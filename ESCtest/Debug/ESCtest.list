
ESCtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000376c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003944  08003944  00013944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003984  08003984  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003984  08003984  00013984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800398c  0800398c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800398c  0800398c  0001398c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  080039a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080039a0  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001179e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fdb  00000000  00000000  000317da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  000337b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  00034728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d527  00000000  00000000  000355e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114dc  00000000  00000000  00052b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1f60  00000000  00000000  00063fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125f43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e4  00000000  00000000  00125f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800392c 	.word	0x0800392c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800392c 	.word	0x0800392c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fa91 	bl	8000a46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f81c 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f914 	bl	8000754 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f8c6 	bl	80006bc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000530:	f000 f862 	bl	80005f8 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000534:	2100      	movs	r1, #0
 8000536:	4809      	ldr	r0, [pc, #36]	; (800055c <main+0x40>)
 8000538:	f001 fdb6 	bl	80020a8 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 250);
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <main+0x40>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	22fa      	movs	r2, #250	; 0xfa
 8000542:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(100);
 8000544:	2064      	movs	r0, #100	; 0x64
 8000546:	f000 faef 	bl	8000b28 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 250);
 800054a:	4b04      	ldr	r3, [pc, #16]	; (800055c <main+0x40>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	22fa      	movs	r2, #250	; 0xfa
 8000550:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(100);
 8000552:	2064      	movs	r0, #100	; 0x64
 8000554:	f000 fae8 	bl	8000b28 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 250);
 8000558:	e7f0      	b.n	800053c <main+0x20>
 800055a:	bf00      	nop
 800055c:	20000028 	.word	0x20000028

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0318 	add.w	r3, r7, #24
 800056a:	2238      	movs	r2, #56	; 0x38
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 f9d4 	bl	800391c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000582:	2000      	movs	r0, #0
 8000584:	f000 fd70 	bl	8001068 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2340      	movs	r3, #64	; 0x40
 8000594:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800059e:	2304      	movs	r3, #4
 80005a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005a2:	2355      	movs	r3, #85	; 0x55
 80005a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0318 	add.w	r3, r7, #24
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fdfa 	bl	80011b0 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005c2:	f000 f907 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2303      	movs	r3, #3
 80005cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2104      	movs	r1, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 f8fe 	bl	80017e0 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ea:	f000 f8f3 	bl	80007d4 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	; 0x28
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800060a:	463b      	mov	r3, r7
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
 8000618:	615a      	str	r2, [r3, #20]
 800061a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <MX_TIM2_Init+0xc0>)
 800061e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000622:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <MX_TIM2_Init+0xc0>)
 8000626:	22a9      	movs	r2, #169	; 0xa9
 8000628:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062a:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <MX_TIM2_Init+0xc0>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000630:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_TIM2_Init+0xc0>)
 8000632:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000636:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_TIM2_Init+0xc0>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <MX_TIM2_Init+0xc0>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000644:	481c      	ldr	r0, [pc, #112]	; (80006b8 <MX_TIM2_Init+0xc0>)
 8000646:	f001 fcd7 	bl	8001ff8 <HAL_TIM_PWM_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000650:	f000 f8c0 	bl	80007d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4619      	mov	r1, r3
 8000662:	4815      	ldr	r0, [pc, #84]	; (80006b8 <MX_TIM2_Init+0xc0>)
 8000664:	f002 fae0 	bl	8002c28 <HAL_TIMEx_MasterConfigSynchronization>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800066e:	f000 f8b1 	bl	80007d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000672:	2360      	movs	r3, #96	; 0x60
 8000674:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	4619      	mov	r1, r3
 8000688:	480b      	ldr	r0, [pc, #44]	; (80006b8 <MX_TIM2_Init+0xc0>)
 800068a:	f001 fe0d 	bl	80022a8 <HAL_TIM_PWM_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000694:	f000 f89e 	bl	80007d4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_TIM2_Init+0xc0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	699a      	ldr	r2, [r3, #24]
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_TIM2_Init+0xc0>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f022 0208 	bic.w	r2, r2, #8
 80006a6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006a8:	4803      	ldr	r0, [pc, #12]	; (80006b8 <MX_TIM2_Init+0xc0>)
 80006aa:	f000 f8db 	bl	8000864 <HAL_TIM_MspPostInit>

}
 80006ae:	bf00      	nop
 80006b0:	3728      	adds	r7, #40	; 0x28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000028 	.word	0x20000028

080006bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <MX_USART2_UART_Init+0x90>)
 80006c2:	4a23      	ldr	r2, [pc, #140]	; (8000750 <MX_USART2_UART_Init+0x94>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_USART2_UART_Init+0x90>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_USART2_UART_Init+0x90>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_USART2_UART_Init+0x90>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_USART2_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_USART2_UART_Init+0x90>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_USART2_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_USART2_UART_Init+0x90>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_USART2_UART_Init+0x90>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_USART2_UART_Init+0x90>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_USART2_UART_Init+0x90>)
 8000700:	2200      	movs	r2, #0
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000704:	4811      	ldr	r0, [pc, #68]	; (800074c <MX_USART2_UART_Init+0x90>)
 8000706:	f002 fb11 	bl	8002d2c <HAL_UART_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000710:	f000 f860 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000714:	2100      	movs	r1, #0
 8000716:	480d      	ldr	r0, [pc, #52]	; (800074c <MX_USART2_UART_Init+0x90>)
 8000718:	f003 f812 	bl	8003740 <HAL_UARTEx_SetTxFifoThreshold>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000722:	f000 f857 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000726:	2100      	movs	r1, #0
 8000728:	4808      	ldr	r0, [pc, #32]	; (800074c <MX_USART2_UART_Init+0x90>)
 800072a:	f003 f847 	bl	80037bc <HAL_UARTEx_SetRxFifoThreshold>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000734:	f000 f84e 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_USART2_UART_Init+0x90>)
 800073a:	f002 ffc8 	bl	80036ce <HAL_UARTEx_DisableFifoMode>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000744:	f000 f846 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000074 	.word	0x20000074
 8000750:	40004400 	.word	0x40004400

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_GPIO_Init+0x78>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <MX_GPIO_Init+0x78>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_GPIO_Init+0x78>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_GPIO_Init+0x78>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a11      	ldr	r2, [pc, #68]	; (80007cc <MX_GPIO_Init+0x78>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_GPIO_Init+0x78>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <MX_GPIO_Init+0x7c>)
 80007a2:	f000 fc49 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_GPIO_Init+0x7c>)
 80007c0:	f000 fab8 	bl	8000d34 <HAL_GPIO_Init>

}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000400 	.word	0x48000400

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <HAL_MspInit+0x44>)
 80007e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ea:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <HAL_MspInit+0x44>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6613      	str	r3, [r2, #96]	; 0x60
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <HAL_MspInit+0x44>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_MspInit+0x44>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_MspInit+0x44>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6593      	str	r3, [r2, #88]	; 0x58
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_MspInit+0x44>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000838:	d10b      	bne.n	8000852 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_TIM_PWM_MspInit+0x38>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_TIM_PWM_MspInit+0x38>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6593      	str	r3, [r2, #88]	; 0x58
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_TIM_PWM_MspInit+0x38>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000884:	d11c      	bne.n	80008c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <HAL_TIM_MspPostInit+0x64>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <HAL_TIM_MspPostInit+0x64>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <HAL_TIM_MspPostInit+0x64>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800089e:	2320      	movs	r3, #32
 80008a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	4619      	mov	r1, r3
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f000 fa3a 	bl	8000d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80008c0:	bf00      	nop
 80008c2:	3720      	adds	r7, #32
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40021000 	.word	0x40021000

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b09a      	sub	sp, #104	; 0x68
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	2244      	movs	r2, #68	; 0x44
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 f815 	bl	800391c <memset>
  if(huart->Instance==USART2)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a1f      	ldr	r2, [pc, #124]	; (8000974 <HAL_UART_MspInit+0xa8>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d136      	bne.n	800096a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4618      	mov	r0, r3
 800090a:	f001 f985 	bl	8001c18 <HAL_RCCEx_PeriphCLKConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000914:	f7ff ff5e 	bl	80007d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_UART_MspInit+0xac>)
 800091a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091c:	4a16      	ldr	r2, [pc, #88]	; (8000978 <HAL_UART_MspInit+0xac>)
 800091e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000922:	6593      	str	r3, [r2, #88]	; 0x58
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_UART_MspInit+0xac>)
 8000926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_UART_MspInit+0xac>)
 8000932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000934:	4a10      	ldr	r2, [pc, #64]	; (8000978 <HAL_UART_MspInit+0xac>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_UART_MspInit+0xac>)
 800093e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000948:	230c      	movs	r3, #12
 800094a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000958:	2307      	movs	r3, #7
 800095a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000960:	4619      	mov	r1, r3
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f000 f9e5 	bl	8000d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800096a:	bf00      	nop
 800096c:	3768      	adds	r7, #104	; 0x68
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40004400 	.word	0x40004400
 8000978:	40021000 	.word	0x40021000

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f890 	bl	8000aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <SystemInit+0x20>)
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <SystemInit+0x20>)
 80009dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80009fa:	490e      	ldr	r1, [pc, #56]	; (8000a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009fc:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <LoopForever+0xe>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a10:	4c0b      	ldr	r4, [pc, #44]	; (8000a40 <LoopForever+0x16>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a1e:	f7ff ffd7 	bl	80009d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a22:	f002 ff57 	bl	80038d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a26:	f7ff fd79 	bl	800051c <main>

08000a2a <LoopForever>:

LoopForever:
    b LoopForever
 8000a2a:	e7fe      	b.n	8000a2a <LoopForever>
  ldr   r0, =_estack
 8000a2c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a38:	08003994 	.word	0x08003994
  ldr r2, =_sbss
 8000a3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a40:	20000108 	.word	0x20000108

08000a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC1_2_IRQHandler>

08000a46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 f93d 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a56:	2000      	movs	r0, #0
 8000a58:	f000 f80e 	bl	8000a78 <HAL_InitTick>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d002      	beq.n	8000a68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	71fb      	strb	r3, [r7, #7]
 8000a66:	e001      	b.n	8000a6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a68:	f7ff feba 	bl	80007e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a6c:	79fb      	ldrb	r3, [r7, #7]

}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <HAL_InitTick+0x68>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d022      	beq.n	8000ad2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_InitTick+0x6c>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <HAL_InitTick+0x68>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a98:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 f93a 	bl	8000d1a <HAL_SYSTICK_Config>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d10f      	bne.n	8000acc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b0f      	cmp	r3, #15
 8000ab0:	d809      	bhi.n	8000ac6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	6879      	ldr	r1, [r7, #4]
 8000ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8000aba:	f000 f914 	bl	8000ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_InitTick+0x70>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	e007      	b.n	8000ad6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	e004      	b.n	8000ad6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	73fb      	strb	r3, [r7, #15]
 8000ad0:	e001      	b.n	8000ad6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000004 	.word	0x20000004

08000aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_IncTick+0x1c>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x20>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4413      	add	r3, r2
 8000afa:	4a03      	ldr	r2, [pc, #12]	; (8000b08 <HAL_IncTick+0x1c>)
 8000afc:	6013      	str	r3, [r2, #0]
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	20000104 	.word	0x20000104
 8000b0c:	20000008 	.word	0x20000008

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000104 	.word	0x20000104

08000b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff ffee 	bl	8000b10 <HAL_GetTick>
 8000b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b40:	d004      	beq.n	8000b4c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_Delay+0x40>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4413      	add	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4c:	bf00      	nop
 8000b4e:	f7ff ffdf 	bl	8000b10 <HAL_GetTick>
 8000b52:	4602      	mov	r2, r0
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d8f7      	bhi.n	8000b4e <HAL_Delay+0x26>
  {
  }
}
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000008 	.word	0x20000008

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff8e 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff47 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff5e 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff90 	bl	8000c24 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5f 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffb2 	bl	8000c8c <SysTick_Config>
 8000d28:	4603      	mov	r3, r0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d42:	e15a      	b.n	8000ffa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 814c 	beq.w	8000ff4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d005      	beq.n	8000d74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d130      	bne.n	8000dd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000daa:	2201      	movs	r2, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	f003 0201 	and.w	r2, r3, #1
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d017      	beq.n	8000e12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d123      	bne.n	8000e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	08da      	lsrs	r2, r3, #3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3208      	adds	r2, #8
 8000e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	220f      	movs	r2, #15
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	691a      	ldr	r2, [r3, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	6939      	ldr	r1, [r7, #16]
 8000e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0203 	and.w	r2, r3, #3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 80a6 	beq.w	8000ff4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea8:	4b5b      	ldr	r3, [pc, #364]	; (8001018 <HAL_GPIO_Init+0x2e4>)
 8000eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eac:	4a5a      	ldr	r2, [pc, #360]	; (8001018 <HAL_GPIO_Init+0x2e4>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb4:	4b58      	ldr	r3, [pc, #352]	; (8001018 <HAL_GPIO_Init+0x2e4>)
 8000eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec0:	4a56      	ldr	r2, [pc, #344]	; (800101c <HAL_GPIO_Init+0x2e8>)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eea:	d01f      	beq.n	8000f2c <HAL_GPIO_Init+0x1f8>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a4c      	ldr	r2, [pc, #304]	; (8001020 <HAL_GPIO_Init+0x2ec>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d019      	beq.n	8000f28 <HAL_GPIO_Init+0x1f4>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a4b      	ldr	r2, [pc, #300]	; (8001024 <HAL_GPIO_Init+0x2f0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d013      	beq.n	8000f24 <HAL_GPIO_Init+0x1f0>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a4a      	ldr	r2, [pc, #296]	; (8001028 <HAL_GPIO_Init+0x2f4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d00d      	beq.n	8000f20 <HAL_GPIO_Init+0x1ec>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a49      	ldr	r2, [pc, #292]	; (800102c <HAL_GPIO_Init+0x2f8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d007      	beq.n	8000f1c <HAL_GPIO_Init+0x1e8>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a48      	ldr	r2, [pc, #288]	; (8001030 <HAL_GPIO_Init+0x2fc>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d101      	bne.n	8000f18 <HAL_GPIO_Init+0x1e4>
 8000f14:	2305      	movs	r3, #5
 8000f16:	e00a      	b.n	8000f2e <HAL_GPIO_Init+0x1fa>
 8000f18:	2306      	movs	r3, #6
 8000f1a:	e008      	b.n	8000f2e <HAL_GPIO_Init+0x1fa>
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	e006      	b.n	8000f2e <HAL_GPIO_Init+0x1fa>
 8000f20:	2303      	movs	r3, #3
 8000f22:	e004      	b.n	8000f2e <HAL_GPIO_Init+0x1fa>
 8000f24:	2302      	movs	r3, #2
 8000f26:	e002      	b.n	8000f2e <HAL_GPIO_Init+0x1fa>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <HAL_GPIO_Init+0x1fa>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	f002 0203 	and.w	r2, r2, #3
 8000f34:	0092      	lsls	r2, r2, #2
 8000f36:	4093      	lsls	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3e:	4937      	ldr	r1, [pc, #220]	; (800101c <HAL_GPIO_Init+0x2e8>)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3302      	adds	r3, #2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f4c:	4b39      	ldr	r3, [pc, #228]	; (8001034 <HAL_GPIO_Init+0x300>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f70:	4a30      	ldr	r2, [pc, #192]	; (8001034 <HAL_GPIO_Init+0x300>)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f76:	4b2f      	ldr	r3, [pc, #188]	; (8001034 <HAL_GPIO_Init+0x300>)
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f9a:	4a26      	ldr	r2, [pc, #152]	; (8001034 <HAL_GPIO_Init+0x300>)
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <HAL_GPIO_Init+0x300>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <HAL_GPIO_Init+0x300>)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <HAL_GPIO_Init+0x300>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fee:	4a11      	ldr	r2, [pc, #68]	; (8001034 <HAL_GPIO_Init+0x300>)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	f47f ae9d 	bne.w	8000d44 <HAL_GPIO_Init+0x10>
  }
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	371c      	adds	r7, #28
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	40021000 	.word	0x40021000
 800101c:	40010000 	.word	0x40010000
 8001020:	48000400 	.word	0x48000400
 8001024:	48000800 	.word	0x48000800
 8001028:	48000c00 	.word	0x48000c00
 800102c:	48001000 	.word	0x48001000
 8001030:	48001400 	.word	0x48001400
 8001034:	40010400 	.word	0x40010400

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001054:	e002      	b.n	800105c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d141      	bne.n	80010fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001076:	4b4b      	ldr	r3, [pc, #300]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800107e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001082:	d131      	bne.n	80010e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001084:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800108a:	4a46      	ldr	r2, [pc, #280]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800108c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001090:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001094:	4b43      	ldr	r3, [pc, #268]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800109c:	4a41      	ldr	r2, [pc, #260]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010a4:	4b40      	ldr	r3, [pc, #256]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2232      	movs	r2, #50	; 0x32
 80010aa:	fb02 f303 	mul.w	r3, r2, r3
 80010ae:	4a3f      	ldr	r2, [pc, #252]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010b0:	fba2 2303 	umull	r2, r3, r2, r3
 80010b4:	0c9b      	lsrs	r3, r3, #18
 80010b6:	3301      	adds	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ba:	e002      	b.n	80010c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3b01      	subs	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010c2:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ce:	d102      	bne.n	80010d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1f2      	bne.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010d6:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010e2:	d158      	bne.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e057      	b.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010e8:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ee:	4a2d      	ldr	r2, [pc, #180]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010f8:	e04d      	b.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001100:	d141      	bne.n	8001186 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001102:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800110a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800110e:	d131      	bne.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001116:	4a23      	ldr	r2, [pc, #140]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001128:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2232      	movs	r2, #50	; 0x32
 8001136:	fb02 f303 	mul.w	r3, r2, r3
 800113a:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	0c9b      	lsrs	r3, r3, #18
 8001142:	3301      	adds	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001146:	e002      	b.n	800114e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3b01      	subs	r3, #1
 800114c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115a:	d102      	bne.n	8001162 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f2      	bne.n	8001148 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800116e:	d112      	bne.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e011      	b.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001180:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001184:	e007      	b.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001190:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001194:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	40007000 	.word	0x40007000
 80011a8:	20000000 	.word	0x20000000
 80011ac:	431bde83 	.word	0x431bde83

080011b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e306      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d075      	beq.n	80012ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ce:	4b97      	ldr	r3, [pc, #604]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011d8:	4b94      	ldr	r3, [pc, #592]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	2b0c      	cmp	r3, #12
 80011e6:	d102      	bne.n	80011ee <HAL_RCC_OscConfig+0x3e>
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d002      	beq.n	80011f4 <HAL_RCC_OscConfig+0x44>
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d10b      	bne.n	800120c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	4b8d      	ldr	r3, [pc, #564]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d05b      	beq.n	80012b8 <HAL_RCC_OscConfig+0x108>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d157      	bne.n	80012b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e2e1      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001214:	d106      	bne.n	8001224 <HAL_RCC_OscConfig+0x74>
 8001216:	4b85      	ldr	r3, [pc, #532]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a84      	ldr	r2, [pc, #528]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e01d      	b.n	8001260 <HAL_RCC_OscConfig+0xb0>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x98>
 800122e:	4b7f      	ldr	r3, [pc, #508]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a7e      	ldr	r2, [pc, #504]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b7c      	ldr	r3, [pc, #496]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a7b      	ldr	r2, [pc, #492]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 8001240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e00b      	b.n	8001260 <HAL_RCC_OscConfig+0xb0>
 8001248:	4b78      	ldr	r3, [pc, #480]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a77      	ldr	r2, [pc, #476]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 800124e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b75      	ldr	r3, [pc, #468]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a74      	ldr	r2, [pc, #464]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d013      	beq.n	8001290 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001268:	f7ff fc52 	bl	8000b10 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fc4e 	bl	8000b10 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e2a6      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001282:	4b6a      	ldr	r3, [pc, #424]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0xc0>
 800128e:	e014      	b.n	80012ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001290:	f7ff fc3e 	bl	8000b10 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fc3a 	bl	8000b10 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e292      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012aa:	4b60      	ldr	r3, [pc, #384]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0xe8>
 80012b6:	e000      	b.n	80012ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d075      	beq.n	80013b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c6:	4b59      	ldr	r3, [pc, #356]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d0:	4b56      	ldr	r3, [pc, #344]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b0c      	cmp	r3, #12
 80012de:	d102      	bne.n	80012e6 <HAL_RCC_OscConfig+0x136>
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d002      	beq.n	80012ec <HAL_RCC_OscConfig+0x13c>
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d11f      	bne.n	800132c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012ec:	4b4f      	ldr	r3, [pc, #316]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d005      	beq.n	8001304 <HAL_RCC_OscConfig+0x154>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e265      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001304:	4b49      	ldr	r3, [pc, #292]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	061b      	lsls	r3, r3, #24
 8001312:	4946      	ldr	r1, [pc, #280]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001318:	4b45      	ldr	r3, [pc, #276]	; (8001430 <HAL_RCC_OscConfig+0x280>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fbab 	bl	8000a78 <HAL_InitTick>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d043      	beq.n	80013b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e251      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d023      	beq.n	800137c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001334:	4b3d      	ldr	r3, [pc, #244]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a3c      	ldr	r2, [pc, #240]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 800133a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fbe6 	bl	8000b10 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001348:	f7ff fbe2 	bl	8000b10 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e23a      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800135a:	4b34      	ldr	r3, [pc, #208]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001366:	4b31      	ldr	r3, [pc, #196]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	061b      	lsls	r3, r3, #24
 8001374:	492d      	ldr	r1, [pc, #180]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
 800137a:	e01a      	b.n	80013b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800137c:	4b2b      	ldr	r3, [pc, #172]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a2a      	ldr	r2, [pc, #168]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 8001382:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fbc2 	bl	8000b10 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fbbe 	bl	8000b10 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e216      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013a2:	4b22      	ldr	r3, [pc, #136]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x1e0>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d041      	beq.n	8001442 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01c      	beq.n	8001400 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 80013c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013cc:	4a17      	ldr	r2, [pc, #92]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d6:	f7ff fb9b 	bl	8000b10 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013de:	f7ff fb97 	bl	8000b10 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e1ef      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 80013f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0ef      	beq.n	80013de <HAL_RCC_OscConfig+0x22e>
 80013fe:	e020      	b.n	8001442 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 8001402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001406:	4a09      	ldr	r2, [pc, #36]	; (800142c <HAL_RCC_OscConfig+0x27c>)
 8001408:	f023 0301 	bic.w	r3, r3, #1
 800140c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001410:	f7ff fb7e 	bl	8000b10 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001416:	e00d      	b.n	8001434 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001418:	f7ff fb7a 	bl	8000b10 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d906      	bls.n	8001434 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e1d2      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001434:	4b8c      	ldr	r3, [pc, #560]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 8001436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1ea      	bne.n	8001418 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 80a6 	beq.w	800159c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001454:	4b84      	ldr	r3, [pc, #528]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 8001456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_RCC_OscConfig+0x2b4>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x2b6>
 8001464:	2300      	movs	r3, #0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00d      	beq.n	8001486 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	4b7f      	ldr	r3, [pc, #508]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146e:	4a7e      	ldr	r2, [pc, #504]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	6593      	str	r3, [r2, #88]	; 0x58
 8001476:	4b7c      	ldr	r3, [pc, #496]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 8001478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001482:	2301      	movs	r3, #1
 8001484:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001486:	4b79      	ldr	r3, [pc, #484]	; (800166c <HAL_RCC_OscConfig+0x4bc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d118      	bne.n	80014c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001492:	4b76      	ldr	r3, [pc, #472]	; (800166c <HAL_RCC_OscConfig+0x4bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a75      	ldr	r2, [pc, #468]	; (800166c <HAL_RCC_OscConfig+0x4bc>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149e:	f7ff fb37 	bl	8000b10 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a6:	f7ff fb33 	bl	8000b10 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e18b      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b8:	4b6c      	ldr	r3, [pc, #432]	; (800166c <HAL_RCC_OscConfig+0x4bc>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d108      	bne.n	80014de <HAL_RCC_OscConfig+0x32e>
 80014cc:	4b66      	ldr	r3, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 80014ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d2:	4a65      	ldr	r2, [pc, #404]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014dc:	e024      	b.n	8001528 <HAL_RCC_OscConfig+0x378>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	d110      	bne.n	8001508 <HAL_RCC_OscConfig+0x358>
 80014e6:	4b60      	ldr	r3, [pc, #384]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 80014e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ec:	4a5e      	ldr	r2, [pc, #376]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014f6:	4b5c      	ldr	r3, [pc, #368]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 80014f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014fc:	4a5a      	ldr	r2, [pc, #360]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001506:	e00f      	b.n	8001528 <HAL_RCC_OscConfig+0x378>
 8001508:	4b57      	ldr	r3, [pc, #348]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 800150a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150e:	4a56      	ldr	r2, [pc, #344]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001518:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151e:	4a52      	ldr	r2, [pc, #328]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 8001520:	f023 0304 	bic.w	r3, r3, #4
 8001524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d016      	beq.n	800155e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001530:	f7ff faee 	bl	8000b10 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001536:	e00a      	b.n	800154e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001538:	f7ff faea 	bl	8000b10 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	; 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e140      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800154e:	4b46      	ldr	r3, [pc, #280]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 8001550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0ed      	beq.n	8001538 <HAL_RCC_OscConfig+0x388>
 800155c:	e015      	b.n	800158a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155e:	f7ff fad7 	bl	8000b10 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001564:	e00a      	b.n	800157c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001566:	f7ff fad3 	bl	8000b10 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f241 3288 	movw	r2, #5000	; 0x1388
 8001574:	4293      	cmp	r3, r2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e129      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800157c:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 800157e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1ed      	bne.n	8001566 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800158a:	7ffb      	ldrb	r3, [r7, #31]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d105      	bne.n	800159c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001590:	4b35      	ldr	r3, [pc, #212]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 8001592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001594:	4a34      	ldr	r2, [pc, #208]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 8001596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0320 	and.w	r3, r3, #32
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d03c      	beq.n	8001622 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d01c      	beq.n	80015ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015b0:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 80015b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015b6:	4a2c      	ldr	r2, [pc, #176]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c0:	f7ff faa6 	bl	8000b10 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c8:	f7ff faa2 	bl	8000b10 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e0fa      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015da:	4b23      	ldr	r3, [pc, #140]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 80015dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0ef      	beq.n	80015c8 <HAL_RCC_OscConfig+0x418>
 80015e8:	e01b      	b.n	8001622 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 80015ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015f0:	4a1d      	ldr	r2, [pc, #116]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 80015f2:	f023 0301 	bic.w	r3, r3, #1
 80015f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fa:	f7ff fa89 	bl	8000b10 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001602:	f7ff fa85 	bl	8000b10 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0dd      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 8001616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ef      	bne.n	8001602 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 80d1 	beq.w	80017ce <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	2b0c      	cmp	r3, #12
 8001636:	f000 808b 	beq.w	8001750 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d15e      	bne.n	8001700 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_RCC_OscConfig+0x4b8>)
 8001648:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800164c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff fa5f 	bl	8000b10 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001654:	e00c      	b.n	8001670 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001656:	f7ff fa5b 	bl	8000b10 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d905      	bls.n	8001670 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e0b3      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
 8001668:	40021000 	.word	0x40021000
 800166c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001670:	4b59      	ldr	r3, [pc, #356]	; (80017d8 <HAL_RCC_OscConfig+0x628>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1ec      	bne.n	8001656 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800167c:	4b56      	ldr	r3, [pc, #344]	; (80017d8 <HAL_RCC_OscConfig+0x628>)
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	4b56      	ldr	r3, [pc, #344]	; (80017dc <HAL_RCC_OscConfig+0x62c>)
 8001682:	4013      	ands	r3, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6a11      	ldr	r1, [r2, #32]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800168c:	3a01      	subs	r2, #1
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	4311      	orrs	r1, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001696:	0212      	lsls	r2, r2, #8
 8001698:	4311      	orrs	r1, r2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800169e:	0852      	lsrs	r2, r2, #1
 80016a0:	3a01      	subs	r2, #1
 80016a2:	0552      	lsls	r2, r2, #21
 80016a4:	4311      	orrs	r1, r2
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016aa:	0852      	lsrs	r2, r2, #1
 80016ac:	3a01      	subs	r2, #1
 80016ae:	0652      	lsls	r2, r2, #25
 80016b0:	4311      	orrs	r1, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016b6:	06d2      	lsls	r2, r2, #27
 80016b8:	430a      	orrs	r2, r1
 80016ba:	4947      	ldr	r1, [pc, #284]	; (80017d8 <HAL_RCC_OscConfig+0x628>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c0:	4b45      	ldr	r3, [pc, #276]	; (80017d8 <HAL_RCC_OscConfig+0x628>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a44      	ldr	r2, [pc, #272]	; (80017d8 <HAL_RCC_OscConfig+0x628>)
 80016c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016cc:	4b42      	ldr	r3, [pc, #264]	; (80017d8 <HAL_RCC_OscConfig+0x628>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4a41      	ldr	r2, [pc, #260]	; (80017d8 <HAL_RCC_OscConfig+0x628>)
 80016d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff fa1a 	bl	8000b10 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e0:	f7ff fa16 	bl	8000b10 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e06e      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016f2:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <HAL_RCC_OscConfig+0x628>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x530>
 80016fe:	e066      	b.n	80017ce <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001700:	4b35      	ldr	r3, [pc, #212]	; (80017d8 <HAL_RCC_OscConfig+0x628>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a34      	ldr	r2, [pc, #208]	; (80017d8 <HAL_RCC_OscConfig+0x628>)
 8001706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800170a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800170c:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <HAL_RCC_OscConfig+0x628>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4a31      	ldr	r2, [pc, #196]	; (80017d8 <HAL_RCC_OscConfig+0x628>)
 8001712:	f023 0303 	bic.w	r3, r3, #3
 8001716:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001718:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <HAL_RCC_OscConfig+0x628>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4a2e      	ldr	r2, [pc, #184]	; (80017d8 <HAL_RCC_OscConfig+0x628>)
 800171e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001726:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff f9f2 	bl	8000b10 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001730:	f7ff f9ee 	bl	8000b10 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e046      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001742:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <HAL_RCC_OscConfig+0x628>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x580>
 800174e:	e03e      	b.n	80017ce <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e039      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800175c:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <HAL_RCC_OscConfig+0x628>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 0203 	and.w	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	429a      	cmp	r2, r3
 800176e:	d12c      	bne.n	80017ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	3b01      	subs	r3, #1
 800177c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d123      	bne.n	80017ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d11b      	bne.n	80017ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d113      	bne.n	80017ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	3b01      	subs	r3, #1
 80017b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d109      	bne.n	80017ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c0:	085b      	lsrs	r3, r3, #1
 80017c2:	3b01      	subs	r3, #1
 80017c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d001      	beq.n	80017ce <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40021000 	.word	0x40021000
 80017dc:	019f800c 	.word	0x019f800c

080017e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e11e      	b.n	8001a36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f8:	4b91      	ldr	r3, [pc, #580]	; (8001a40 <HAL_RCC_ClockConfig+0x260>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d910      	bls.n	8001828 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b8e      	ldr	r3, [pc, #568]	; (8001a40 <HAL_RCC_ClockConfig+0x260>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 020f 	bic.w	r2, r3, #15
 800180e:	498c      	ldr	r1, [pc, #560]	; (8001a40 <HAL_RCC_ClockConfig+0x260>)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b8a      	ldr	r3, [pc, #552]	; (8001a40 <HAL_RCC_ClockConfig+0x260>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e106      	b.n	8001a36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d073      	beq.n	800191c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b03      	cmp	r3, #3
 800183a:	d129      	bne.n	8001890 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183c:	4b81      	ldr	r3, [pc, #516]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0f4      	b.n	8001a36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800184c:	f000 f99e 	bl	8001b8c <RCC_GetSysClockFreqFromPLLSource>
 8001850:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4a7c      	ldr	r2, [pc, #496]	; (8001a48 <HAL_RCC_ClockConfig+0x268>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d93f      	bls.n	80018da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800185a:	4b7a      	ldr	r3, [pc, #488]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800186e:	2b00      	cmp	r3, #0
 8001870:	d033      	beq.n	80018da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001876:	2b00      	cmp	r3, #0
 8001878:	d12f      	bne.n	80018da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800187a:	4b72      	ldr	r3, [pc, #456]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001882:	4a70      	ldr	r2, [pc, #448]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 8001884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001888:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e024      	b.n	80018da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d107      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001898:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0c6      	b.n	8001a36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a8:	4b66      	ldr	r3, [pc, #408]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0be      	b.n	8001a36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80018b8:	f000 f8ce 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4a61      	ldr	r2, [pc, #388]	; (8001a48 <HAL_RCC_ClockConfig+0x268>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d909      	bls.n	80018da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018c6:	4b5f      	ldr	r3, [pc, #380]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ce:	4a5d      	ldr	r2, [pc, #372]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 80018d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018da:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f023 0203 	bic.w	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4957      	ldr	r1, [pc, #348]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018ec:	f7ff f910 	bl	8000b10 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	e00a      	b.n	800190a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f4:	f7ff f90c 	bl	8000b10 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e095      	b.n	8001a36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	4b4e      	ldr	r3, [pc, #312]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 020c 	and.w	r2, r3, #12
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	429a      	cmp	r2, r3
 800191a:	d1eb      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d023      	beq.n	8001970 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001934:	4b43      	ldr	r3, [pc, #268]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800193a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800193e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800194c:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001954:	4a3b      	ldr	r2, [pc, #236]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 8001956:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800195a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195c:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4936      	ldr	r1, [pc, #216]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
 800196e:	e008      	b.n	8001982 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b80      	cmp	r3, #128	; 0x80
 8001974:	d105      	bne.n	8001982 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001976:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	4a32      	ldr	r2, [pc, #200]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800197c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001980:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001982:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <HAL_RCC_ClockConfig+0x260>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d21d      	bcs.n	80019cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001990:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <HAL_RCC_ClockConfig+0x260>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f023 020f 	bic.w	r2, r3, #15
 8001998:	4929      	ldr	r1, [pc, #164]	; (8001a40 <HAL_RCC_ClockConfig+0x260>)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	4313      	orrs	r3, r2
 800199e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019a0:	f7ff f8b6 	bl	8000b10 <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	e00a      	b.n	80019be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a8:	f7ff f8b2 	bl	8000b10 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e03b      	b.n	8001a36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_RCC_ClockConfig+0x260>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d1ed      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4917      	ldr	r1, [pc, #92]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d009      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	490f      	ldr	r1, [pc, #60]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a0a:	f000 f825 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	490c      	ldr	r1, [pc, #48]	; (8001a4c <HAL_RCC_ClockConfig+0x26c>)
 8001a1c:	5ccb      	ldrb	r3, [r1, r3]
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	fa22 f303 	lsr.w	r3, r2, r3
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <HAL_RCC_ClockConfig+0x270>)
 8001a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_RCC_ClockConfig+0x274>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f822 	bl	8000a78 <HAL_InitTick>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40022000 	.word	0x40022000
 8001a44:	40021000 	.word	0x40021000
 8001a48:	04c4b400 	.word	0x04c4b400
 8001a4c:	08003944 	.word	0x08003944
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a5e:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d102      	bne.n	8001a70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	e047      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a7c:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	e03e      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a82:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b0c      	cmp	r3, #12
 8001a8c:	d136      	bne.n	8001afc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a98:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d10c      	bne.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aac:	4a1a      	ldr	r2, [pc, #104]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab4:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab6:	68d2      	ldr	r2, [r2, #12]
 8001ab8:	0a12      	lsrs	r2, r2, #8
 8001aba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	617b      	str	r3, [r7, #20]
      break;
 8001ac4:	e00c      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ac6:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ad0:	68d2      	ldr	r2, [r2, #12]
 8001ad2:	0a12      	lsrs	r2, r2, #8
 8001ad4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ad8:	fb02 f303 	mul.w	r3, r2, r3
 8001adc:	617b      	str	r3, [r7, #20]
      break;
 8001ade:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0e5b      	lsrs	r3, r3, #25
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	3301      	adds	r3, #1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	e001      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b00:	693b      	ldr	r3, [r7, #16]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	00f42400 	.word	0x00f42400
 8001b18:	007a1200 	.word	0x007a1200

08001b1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000

08001b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b38:	f7ff fff0 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4904      	ldr	r1, [pc, #16]	; (8001b5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	08003954 	.word	0x08003954

08001b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b64:	f7ff ffda 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	0adb      	lsrs	r3, r3, #11
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	4904      	ldr	r1, [pc, #16]	; (8001b88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b76:	5ccb      	ldrb	r3, [r1, r3]
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000
 8001b88:	08003954 	.word	0x08003954

08001b8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d10c      	bne.n	8001bca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bb0:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bba:	68d2      	ldr	r2, [r2, #12]
 8001bbc:	0a12      	lsrs	r2, r2, #8
 8001bbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	617b      	str	r3, [r7, #20]
    break;
 8001bc8:	e00c      	b.n	8001be4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bca:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bd4:	68d2      	ldr	r2, [r2, #12]
 8001bd6:	0a12      	lsrs	r2, r2, #8
 8001bd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
    break;
 8001be2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0e5b      	lsrs	r3, r3, #25
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001bfe:	687b      	ldr	r3, [r7, #4]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	007a1200 	.word	0x007a1200
 8001c14:	00f42400 	.word	0x00f42400

08001c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c20:	2300      	movs	r3, #0
 8001c22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c24:	2300      	movs	r3, #0
 8001c26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 8098 	beq.w	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3a:	4b43      	ldr	r3, [pc, #268]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10d      	bne.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	4a3f      	ldr	r2, [pc, #252]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	6593      	str	r3, [r2, #88]	; 0x58
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c62:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a39      	ldr	r2, [pc, #228]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c6e:	f7fe ff4f 	bl	8000b10 <HAL_GetTick>
 8001c72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c74:	e009      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c76:	f7fe ff4b 	bl	8000b10 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d902      	bls.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	74fb      	strb	r3, [r7, #19]
        break;
 8001c88:	e005      	b.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c8a:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0ef      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001c96:	7cfb      	ldrb	r3, [r7, #19]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d159      	bne.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d01e      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d019      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cb8:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cc4:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cda:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ce4:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d016      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7fe ff0b 	bl	8000b10 <HAL_GetTick>
 8001cfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfc:	e00b      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7fe ff07 	bl	8000b10 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d902      	bls.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	74fb      	strb	r3, [r7, #19]
            break;
 8001d14:	e006      	b.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ec      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001d24:	7cfb      	ldrb	r3, [r7, #19]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10b      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	4903      	ldr	r1, [pc, #12]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d40:	e008      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d42:	7cfb      	ldrb	r3, [r7, #19]
 8001d44:	74bb      	strb	r3, [r7, #18]
 8001d46:	e005      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d50:	7cfb      	ldrb	r3, [r7, #19]
 8001d52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d54:	7c7b      	ldrb	r3, [r7, #17]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d105      	bne.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5a:	4ba6      	ldr	r3, [pc, #664]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	4aa5      	ldr	r2, [pc, #660]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00a      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d72:	4ba0      	ldr	r3, [pc, #640]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d78:	f023 0203 	bic.w	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	499c      	ldr	r1, [pc, #624]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00a      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d94:	4b97      	ldr	r3, [pc, #604]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9a:	f023 020c 	bic.w	r2, r3, #12
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	4994      	ldr	r1, [pc, #592]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001db6:	4b8f      	ldr	r3, [pc, #572]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	498b      	ldr	r1, [pc, #556]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00a      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001dd8:	4b86      	ldr	r3, [pc, #536]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	4983      	ldr	r1, [pc, #524]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0320 	and.w	r3, r3, #32
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00a      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001dfa:	4b7e      	ldr	r3, [pc, #504]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	497a      	ldr	r1, [pc, #488]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00a      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e1c:	4b75      	ldr	r3, [pc, #468]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	4972      	ldr	r1, [pc, #456]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e3e:	4b6d      	ldr	r3, [pc, #436]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	4969      	ldr	r1, [pc, #420]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00a      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e60:	4b64      	ldr	r3, [pc, #400]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4961      	ldr	r1, [pc, #388]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e82:	4b5c      	ldr	r3, [pc, #368]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	4958      	ldr	r1, [pc, #352]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d015      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ea4:	4b53      	ldr	r3, [pc, #332]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	4950      	ldr	r1, [pc, #320]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ec2:	d105      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ec4:	4b4b      	ldr	r3, [pc, #300]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4a4a      	ldr	r2, [pc, #296]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ece:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d015      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001edc:	4b45      	ldr	r3, [pc, #276]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	4942      	ldr	r1, [pc, #264]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001efa:	d105      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001efc:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a3c      	ldr	r2, [pc, #240]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f06:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d015      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f14:	4b37      	ldr	r3, [pc, #220]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4934      	ldr	r1, [pc, #208]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f32:	d105      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f34:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4a2e      	ldr	r2, [pc, #184]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f3e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d015      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f4c:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5a:	4926      	ldr	r1, [pc, #152]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f6a:	d105      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f6c:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4a20      	ldr	r2, [pc, #128]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f76:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d015      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f92:	4918      	ldr	r1, [pc, #96]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fa2:	d105      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d015      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fca:	490a      	ldr	r1, [pc, #40]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fda:	d105      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001fe8:	7cbb      	ldrb	r3, [r7, #18]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000

08001ff8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e049      	b.n	800209e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe fc02 	bl	8000828 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3304      	adds	r3, #4
 8002034:	4619      	mov	r1, r3
 8002036:	4610      	mov	r0, r2
 8002038:	f000 fa4a 	bl	80024d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <HAL_TIM_PWM_Start+0x24>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	e03c      	b.n	8002146 <HAL_TIM_PWM_Start+0x9e>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d109      	bne.n	80020e6 <HAL_TIM_PWM_Start+0x3e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	bf14      	ite	ne
 80020de:	2301      	movne	r3, #1
 80020e0:	2300      	moveq	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	e02f      	b.n	8002146 <HAL_TIM_PWM_Start+0x9e>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d109      	bne.n	8002100 <HAL_TIM_PWM_Start+0x58>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	bf14      	ite	ne
 80020f8:	2301      	movne	r3, #1
 80020fa:	2300      	moveq	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	e022      	b.n	8002146 <HAL_TIM_PWM_Start+0x9e>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2b0c      	cmp	r3, #12
 8002104:	d109      	bne.n	800211a <HAL_TIM_PWM_Start+0x72>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b01      	cmp	r3, #1
 8002110:	bf14      	ite	ne
 8002112:	2301      	movne	r3, #1
 8002114:	2300      	moveq	r3, #0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	e015      	b.n	8002146 <HAL_TIM_PWM_Start+0x9e>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b10      	cmp	r3, #16
 800211e:	d109      	bne.n	8002134 <HAL_TIM_PWM_Start+0x8c>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b01      	cmp	r3, #1
 800212a:	bf14      	ite	ne
 800212c:	2301      	movne	r3, #1
 800212e:	2300      	moveq	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	e008      	b.n	8002146 <HAL_TIM_PWM_Start+0x9e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e097      	b.n	800227e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d104      	bne.n	800215e <HAL_TIM_PWM_Start+0xb6>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2202      	movs	r2, #2
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800215c:	e023      	b.n	80021a6 <HAL_TIM_PWM_Start+0xfe>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b04      	cmp	r3, #4
 8002162:	d104      	bne.n	800216e <HAL_TIM_PWM_Start+0xc6>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800216c:	e01b      	b.n	80021a6 <HAL_TIM_PWM_Start+0xfe>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b08      	cmp	r3, #8
 8002172:	d104      	bne.n	800217e <HAL_TIM_PWM_Start+0xd6>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800217c:	e013      	b.n	80021a6 <HAL_TIM_PWM_Start+0xfe>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b0c      	cmp	r3, #12
 8002182:	d104      	bne.n	800218e <HAL_TIM_PWM_Start+0xe6>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800218c:	e00b      	b.n	80021a6 <HAL_TIM_PWM_Start+0xfe>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b10      	cmp	r3, #16
 8002192:	d104      	bne.n	800219e <HAL_TIM_PWM_Start+0xf6>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800219c:	e003      	b.n	80021a6 <HAL_TIM_PWM_Start+0xfe>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2202      	movs	r2, #2
 80021a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2201      	movs	r2, #1
 80021ac:	6839      	ldr	r1, [r7, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fd14 	bl	8002bdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a33      	ldr	r2, [pc, #204]	; (8002288 <HAL_TIM_PWM_Start+0x1e0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_TIM_PWM_Start+0x13e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a32      	ldr	r2, [pc, #200]	; (800228c <HAL_TIM_PWM_Start+0x1e4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00e      	beq.n	80021e6 <HAL_TIM_PWM_Start+0x13e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a30      	ldr	r2, [pc, #192]	; (8002290 <HAL_TIM_PWM_Start+0x1e8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d009      	beq.n	80021e6 <HAL_TIM_PWM_Start+0x13e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a2f      	ldr	r2, [pc, #188]	; (8002294 <HAL_TIM_PWM_Start+0x1ec>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d004      	beq.n	80021e6 <HAL_TIM_PWM_Start+0x13e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a2d      	ldr	r2, [pc, #180]	; (8002298 <HAL_TIM_PWM_Start+0x1f0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_TIM_PWM_Start+0x142>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_TIM_PWM_Start+0x144>
 80021ea:	2300      	movs	r3, #0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d007      	beq.n	8002200 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a20      	ldr	r2, [pc, #128]	; (8002288 <HAL_TIM_PWM_Start+0x1e0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d018      	beq.n	800223c <HAL_TIM_PWM_Start+0x194>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002212:	d013      	beq.n	800223c <HAL_TIM_PWM_Start+0x194>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a20      	ldr	r2, [pc, #128]	; (800229c <HAL_TIM_PWM_Start+0x1f4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00e      	beq.n	800223c <HAL_TIM_PWM_Start+0x194>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <HAL_TIM_PWM_Start+0x1f8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d009      	beq.n	800223c <HAL_TIM_PWM_Start+0x194>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a17      	ldr	r2, [pc, #92]	; (800228c <HAL_TIM_PWM_Start+0x1e4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d004      	beq.n	800223c <HAL_TIM_PWM_Start+0x194>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a16      	ldr	r2, [pc, #88]	; (8002290 <HAL_TIM_PWM_Start+0x1e8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d115      	bne.n	8002268 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <HAL_TIM_PWM_Start+0x1fc>)
 8002244:	4013      	ands	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b06      	cmp	r3, #6
 800224c:	d015      	beq.n	800227a <HAL_TIM_PWM_Start+0x1d2>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002254:	d011      	beq.n	800227a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002266:	e008      	b.n	800227a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	e000      	b.n	800227c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40012c00 	.word	0x40012c00
 800228c:	40013400 	.word	0x40013400
 8002290:	40014000 	.word	0x40014000
 8002294:	40014400 	.word	0x40014400
 8002298:	40014800 	.word	0x40014800
 800229c:	40000400 	.word	0x40000400
 80022a0:	40000800 	.word	0x40000800
 80022a4:	00010007 	.word	0x00010007

080022a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e0ff      	b.n	80024c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b14      	cmp	r3, #20
 80022d2:	f200 80f0 	bhi.w	80024b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80022d6:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	08002331 	.word	0x08002331
 80022e0:	080024b7 	.word	0x080024b7
 80022e4:	080024b7 	.word	0x080024b7
 80022e8:	080024b7 	.word	0x080024b7
 80022ec:	08002371 	.word	0x08002371
 80022f0:	080024b7 	.word	0x080024b7
 80022f4:	080024b7 	.word	0x080024b7
 80022f8:	080024b7 	.word	0x080024b7
 80022fc:	080023b3 	.word	0x080023b3
 8002300:	080024b7 	.word	0x080024b7
 8002304:	080024b7 	.word	0x080024b7
 8002308:	080024b7 	.word	0x080024b7
 800230c:	080023f3 	.word	0x080023f3
 8002310:	080024b7 	.word	0x080024b7
 8002314:	080024b7 	.word	0x080024b7
 8002318:	080024b7 	.word	0x080024b7
 800231c:	08002435 	.word	0x08002435
 8002320:	080024b7 	.word	0x080024b7
 8002324:	080024b7 	.word	0x080024b7
 8002328:	080024b7 	.word	0x080024b7
 800232c:	08002475 	.word	0x08002475
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f95a 	bl	80025f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0208 	orr.w	r2, r2, #8
 800234a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0204 	bic.w	r2, r2, #4
 800235a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6999      	ldr	r1, [r3, #24]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	619a      	str	r2, [r3, #24]
      break;
 800236e:	e0a5      	b.n	80024bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f9ca 	bl	8002710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800238a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800239a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6999      	ldr	r1, [r3, #24]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	021a      	lsls	r2, r3, #8
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	619a      	str	r2, [r3, #24]
      break;
 80023b0:	e084      	b.n	80024bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fa33 	bl	8002824 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0208 	orr.w	r2, r2, #8
 80023cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69da      	ldr	r2, [r3, #28]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0204 	bic.w	r2, r2, #4
 80023dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69d9      	ldr	r1, [r3, #28]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	61da      	str	r2, [r3, #28]
      break;
 80023f0:	e064      	b.n	80024bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68b9      	ldr	r1, [r7, #8]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fa9b 	bl	8002934 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800240c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69da      	ldr	r2, [r3, #28]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800241c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69d9      	ldr	r1, [r3, #28]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	021a      	lsls	r2, r3, #8
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	61da      	str	r2, [r3, #28]
      break;
 8002432:	e043      	b.n	80024bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fb04 	bl	8002a48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0208 	orr.w	r2, r2, #8
 800244e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0204 	bic.w	r2, r2, #4
 800245e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002472:	e023      	b.n	80024bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fb48 	bl	8002b10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	021a      	lsls	r2, r3, #8
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80024b4:	e002      	b.n	80024bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	75fb      	strb	r3, [r7, #23]
      break;
 80024ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop

080024d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a3c      	ldr	r2, [pc, #240]	; (80025d4 <TIM_Base_SetConfig+0x104>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00f      	beq.n	8002508 <TIM_Base_SetConfig+0x38>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ee:	d00b      	beq.n	8002508 <TIM_Base_SetConfig+0x38>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a39      	ldr	r2, [pc, #228]	; (80025d8 <TIM_Base_SetConfig+0x108>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d007      	beq.n	8002508 <TIM_Base_SetConfig+0x38>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a38      	ldr	r2, [pc, #224]	; (80025dc <TIM_Base_SetConfig+0x10c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d003      	beq.n	8002508 <TIM_Base_SetConfig+0x38>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a37      	ldr	r2, [pc, #220]	; (80025e0 <TIM_Base_SetConfig+0x110>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d108      	bne.n	800251a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a2d      	ldr	r2, [pc, #180]	; (80025d4 <TIM_Base_SetConfig+0x104>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01b      	beq.n	800255a <TIM_Base_SetConfig+0x8a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002528:	d017      	beq.n	800255a <TIM_Base_SetConfig+0x8a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a2a      	ldr	r2, [pc, #168]	; (80025d8 <TIM_Base_SetConfig+0x108>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d013      	beq.n	800255a <TIM_Base_SetConfig+0x8a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a29      	ldr	r2, [pc, #164]	; (80025dc <TIM_Base_SetConfig+0x10c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00f      	beq.n	800255a <TIM_Base_SetConfig+0x8a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <TIM_Base_SetConfig+0x110>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00b      	beq.n	800255a <TIM_Base_SetConfig+0x8a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a27      	ldr	r2, [pc, #156]	; (80025e4 <TIM_Base_SetConfig+0x114>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <TIM_Base_SetConfig+0x8a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <TIM_Base_SetConfig+0x118>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d003      	beq.n	800255a <TIM_Base_SetConfig+0x8a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a25      	ldr	r2, [pc, #148]	; (80025ec <TIM_Base_SetConfig+0x11c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d108      	bne.n	800256c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <TIM_Base_SetConfig+0x104>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d00f      	beq.n	80025b8 <TIM_Base_SetConfig+0xe8>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <TIM_Base_SetConfig+0x110>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d00b      	beq.n	80025b8 <TIM_Base_SetConfig+0xe8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <TIM_Base_SetConfig+0x114>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d007      	beq.n	80025b8 <TIM_Base_SetConfig+0xe8>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <TIM_Base_SetConfig+0x118>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d003      	beq.n	80025b8 <TIM_Base_SetConfig+0xe8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a0e      	ldr	r2, [pc, #56]	; (80025ec <TIM_Base_SetConfig+0x11c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d103      	bne.n	80025c0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	615a      	str	r2, [r3, #20]
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40012c00 	.word	0x40012c00
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40000800 	.word	0x40000800
 80025e0:	40013400 	.word	0x40013400
 80025e4:	40014000 	.word	0x40014000
 80025e8:	40014400 	.word	0x40014400
 80025ec:	40014800 	.word	0x40014800

080025f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	f023 0201 	bic.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f023 0303 	bic.w	r3, r3, #3
 800262a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f023 0302 	bic.w	r3, r3, #2
 800263c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a2c      	ldr	r2, [pc, #176]	; (80026fc <TIM_OC1_SetConfig+0x10c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00f      	beq.n	8002670 <TIM_OC1_SetConfig+0x80>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a2b      	ldr	r2, [pc, #172]	; (8002700 <TIM_OC1_SetConfig+0x110>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00b      	beq.n	8002670 <TIM_OC1_SetConfig+0x80>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a2a      	ldr	r2, [pc, #168]	; (8002704 <TIM_OC1_SetConfig+0x114>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d007      	beq.n	8002670 <TIM_OC1_SetConfig+0x80>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a29      	ldr	r2, [pc, #164]	; (8002708 <TIM_OC1_SetConfig+0x118>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d003      	beq.n	8002670 <TIM_OC1_SetConfig+0x80>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a28      	ldr	r2, [pc, #160]	; (800270c <TIM_OC1_SetConfig+0x11c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d10c      	bne.n	800268a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f023 0308 	bic.w	r3, r3, #8
 8002676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	4313      	orrs	r3, r2
 8002680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f023 0304 	bic.w	r3, r3, #4
 8002688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a1b      	ldr	r2, [pc, #108]	; (80026fc <TIM_OC1_SetConfig+0x10c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00f      	beq.n	80026b2 <TIM_OC1_SetConfig+0xc2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a1a      	ldr	r2, [pc, #104]	; (8002700 <TIM_OC1_SetConfig+0x110>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00b      	beq.n	80026b2 <TIM_OC1_SetConfig+0xc2>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a19      	ldr	r2, [pc, #100]	; (8002704 <TIM_OC1_SetConfig+0x114>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d007      	beq.n	80026b2 <TIM_OC1_SetConfig+0xc2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a18      	ldr	r2, [pc, #96]	; (8002708 <TIM_OC1_SetConfig+0x118>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d003      	beq.n	80026b2 <TIM_OC1_SetConfig+0xc2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a17      	ldr	r2, [pc, #92]	; (800270c <TIM_OC1_SetConfig+0x11c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d111      	bne.n	80026d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	621a      	str	r2, [r3, #32]
}
 80026f0:	bf00      	nop
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40012c00 	.word	0x40012c00
 8002700:	40013400 	.word	0x40013400
 8002704:	40014000 	.word	0x40014000
 8002708:	40014400 	.word	0x40014400
 800270c:	40014800 	.word	0x40014800

08002710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	f023 0210 	bic.w	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800273e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800274a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f023 0320 	bic.w	r3, r3, #32
 800275e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a28      	ldr	r2, [pc, #160]	; (8002810 <TIM_OC2_SetConfig+0x100>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d003      	beq.n	800277c <TIM_OC2_SetConfig+0x6c>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a27      	ldr	r2, [pc, #156]	; (8002814 <TIM_OC2_SetConfig+0x104>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d10d      	bne.n	8002798 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002796:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <TIM_OC2_SetConfig+0x100>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00f      	beq.n	80027c0 <TIM_OC2_SetConfig+0xb0>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <TIM_OC2_SetConfig+0x104>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00b      	beq.n	80027c0 <TIM_OC2_SetConfig+0xb0>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a1b      	ldr	r2, [pc, #108]	; (8002818 <TIM_OC2_SetConfig+0x108>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <TIM_OC2_SetConfig+0xb0>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a1a      	ldr	r2, [pc, #104]	; (800281c <TIM_OC2_SetConfig+0x10c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d003      	beq.n	80027c0 <TIM_OC2_SetConfig+0xb0>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a19      	ldr	r2, [pc, #100]	; (8002820 <TIM_OC2_SetConfig+0x110>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d113      	bne.n	80027e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	621a      	str	r2, [r3, #32]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40012c00 	.word	0x40012c00
 8002814:	40013400 	.word	0x40013400
 8002818:	40014000 	.word	0x40014000
 800281c:	40014400 	.word	0x40014400
 8002820:	40014800 	.word	0x40014800

08002824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0303 	bic.w	r3, r3, #3
 800285e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	4313      	orrs	r3, r2
 800287c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a27      	ldr	r2, [pc, #156]	; (8002920 <TIM_OC3_SetConfig+0xfc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d003      	beq.n	800288e <TIM_OC3_SetConfig+0x6a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a26      	ldr	r2, [pc, #152]	; (8002924 <TIM_OC3_SetConfig+0x100>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d10d      	bne.n	80028aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <TIM_OC3_SetConfig+0xfc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00f      	beq.n	80028d2 <TIM_OC3_SetConfig+0xae>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <TIM_OC3_SetConfig+0x100>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00b      	beq.n	80028d2 <TIM_OC3_SetConfig+0xae>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <TIM_OC3_SetConfig+0x104>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d007      	beq.n	80028d2 <TIM_OC3_SetConfig+0xae>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a19      	ldr	r2, [pc, #100]	; (800292c <TIM_OC3_SetConfig+0x108>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d003      	beq.n	80028d2 <TIM_OC3_SetConfig+0xae>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a18      	ldr	r2, [pc, #96]	; (8002930 <TIM_OC3_SetConfig+0x10c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d113      	bne.n	80028fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	621a      	str	r2, [r3, #32]
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40012c00 	.word	0x40012c00
 8002924:	40013400 	.word	0x40013400
 8002928:	40014000 	.word	0x40014000
 800292c:	40014400 	.word	0x40014400
 8002930:	40014800 	.word	0x40014800

08002934 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800296e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4313      	orrs	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	031b      	lsls	r3, r3, #12
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a28      	ldr	r2, [pc, #160]	; (8002a34 <TIM_OC4_SetConfig+0x100>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d003      	beq.n	80029a0 <TIM_OC4_SetConfig+0x6c>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a27      	ldr	r2, [pc, #156]	; (8002a38 <TIM_OC4_SetConfig+0x104>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d10d      	bne.n	80029bc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80029a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	031b      	lsls	r3, r3, #12
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <TIM_OC4_SetConfig+0x100>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00f      	beq.n	80029e4 <TIM_OC4_SetConfig+0xb0>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a1c      	ldr	r2, [pc, #112]	; (8002a38 <TIM_OC4_SetConfig+0x104>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00b      	beq.n	80029e4 <TIM_OC4_SetConfig+0xb0>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a1b      	ldr	r2, [pc, #108]	; (8002a3c <TIM_OC4_SetConfig+0x108>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d007      	beq.n	80029e4 <TIM_OC4_SetConfig+0xb0>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a1a      	ldr	r2, [pc, #104]	; (8002a40 <TIM_OC4_SetConfig+0x10c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d003      	beq.n	80029e4 <TIM_OC4_SetConfig+0xb0>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <TIM_OC4_SetConfig+0x110>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d113      	bne.n	8002a0c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80029f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	019b      	lsls	r3, r3, #6
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	019b      	lsls	r3, r3, #6
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	621a      	str	r2, [r3, #32]
}
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40012c00 	.word	0x40012c00
 8002a38:	40013400 	.word	0x40013400
 8002a3c:	40014000 	.word	0x40014000
 8002a40:	40014400 	.word	0x40014400
 8002a44:	40014800 	.word	0x40014800

08002a48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002a8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	041b      	lsls	r3, r3, #16
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a17      	ldr	r2, [pc, #92]	; (8002afc <TIM_OC5_SetConfig+0xb4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00f      	beq.n	8002ac2 <TIM_OC5_SetConfig+0x7a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <TIM_OC5_SetConfig+0xb8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00b      	beq.n	8002ac2 <TIM_OC5_SetConfig+0x7a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a15      	ldr	r2, [pc, #84]	; (8002b04 <TIM_OC5_SetConfig+0xbc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <TIM_OC5_SetConfig+0x7a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <TIM_OC5_SetConfig+0xc0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d003      	beq.n	8002ac2 <TIM_OC5_SetConfig+0x7a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a13      	ldr	r2, [pc, #76]	; (8002b0c <TIM_OC5_SetConfig+0xc4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d109      	bne.n	8002ad6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	621a      	str	r2, [r3, #32]
}
 8002af0:	bf00      	nop
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	40012c00 	.word	0x40012c00
 8002b00:	40013400 	.word	0x40013400
 8002b04:	40014000 	.word	0x40014000
 8002b08:	40014400 	.word	0x40014400
 8002b0c:	40014800 	.word	0x40014800

08002b10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	051b      	lsls	r3, r3, #20
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <TIM_OC6_SetConfig+0xb8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d00f      	beq.n	8002b8c <TIM_OC6_SetConfig+0x7c>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <TIM_OC6_SetConfig+0xbc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00b      	beq.n	8002b8c <TIM_OC6_SetConfig+0x7c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a16      	ldr	r2, [pc, #88]	; (8002bd0 <TIM_OC6_SetConfig+0xc0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d007      	beq.n	8002b8c <TIM_OC6_SetConfig+0x7c>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a15      	ldr	r2, [pc, #84]	; (8002bd4 <TIM_OC6_SetConfig+0xc4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d003      	beq.n	8002b8c <TIM_OC6_SetConfig+0x7c>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <TIM_OC6_SetConfig+0xc8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d109      	bne.n	8002ba0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	029b      	lsls	r3, r3, #10
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	621a      	str	r2, [r3, #32]
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40012c00 	.word	0x40012c00
 8002bcc:	40013400 	.word	0x40013400
 8002bd0:	40014000 	.word	0x40014000
 8002bd4:	40014400 	.word	0x40014400
 8002bd8:	40014800 	.word	0x40014800

08002bdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	2201      	movs	r2, #1
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a1a      	ldr	r2, [r3, #32]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	401a      	ands	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a1a      	ldr	r2, [r3, #32]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	431a      	orrs	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	621a      	str	r2, [r3, #32]
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e065      	b.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a2c      	ldr	r2, [pc, #176]	; (8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a2b      	ldr	r2, [pc, #172]	; (8002d1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d108      	bne.n	8002c86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1b      	ldr	r2, [pc, #108]	; (8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d018      	beq.n	8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb6:	d013      	beq.n	8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a18      	ldr	r2, [pc, #96]	; (8002d20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00e      	beq.n	8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d009      	beq.n	8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d004      	beq.n	8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a13      	ldr	r2, [pc, #76]	; (8002d28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d10c      	bne.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ce6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40013400 	.word	0x40013400
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40000800 	.word	0x40000800
 8002d28:	40014000 	.word	0x40014000

08002d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e042      	b.n	8002dc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d106      	bne.n	8002d56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7fd fdbb 	bl	80008cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2224      	movs	r2, #36	; 0x24
 8002d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0201 	bic.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f82c 	bl	8002dcc <UART_SetConfig>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e022      	b.n	8002dc4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 faec 	bl	8003364 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002daa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fb73 	bl	80034a8 <UART_CheckIdleState>
 8002dc2:	4603      	mov	r3, r0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd0:	b08c      	sub	sp, #48	; 0x30
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4bab      	ldr	r3, [pc, #684]	; (80030a8 <UART_SetConfig+0x2dc>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e04:	430b      	orrs	r3, r1
 8002e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4aa0      	ldr	r2, [pc, #640]	; (80030ac <UART_SetConfig+0x2e0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d004      	beq.n	8002e38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e34:	4313      	orrs	r3, r2
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e42:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	f023 010f 	bic.w	r1, r3, #15
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a91      	ldr	r2, [pc, #580]	; (80030b0 <UART_SetConfig+0x2e4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d125      	bne.n	8002ebc <UART_SetConfig+0xf0>
 8002e70:	4b90      	ldr	r3, [pc, #576]	; (80030b4 <UART_SetConfig+0x2e8>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d81a      	bhi.n	8002eb4 <UART_SetConfig+0xe8>
 8002e7e:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <UART_SetConfig+0xb8>)
 8002e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	08002ea5 	.word	0x08002ea5
 8002e8c:	08002e9d 	.word	0x08002e9d
 8002e90:	08002ead 	.word	0x08002ead
 8002e94:	2301      	movs	r3, #1
 8002e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e9a:	e0d6      	b.n	800304a <UART_SetConfig+0x27e>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ea2:	e0d2      	b.n	800304a <UART_SetConfig+0x27e>
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eaa:	e0ce      	b.n	800304a <UART_SetConfig+0x27e>
 8002eac:	2308      	movs	r3, #8
 8002eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eb2:	e0ca      	b.n	800304a <UART_SetConfig+0x27e>
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eba:	e0c6      	b.n	800304a <UART_SetConfig+0x27e>
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a7d      	ldr	r2, [pc, #500]	; (80030b8 <UART_SetConfig+0x2ec>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d138      	bne.n	8002f38 <UART_SetConfig+0x16c>
 8002ec6:	4b7b      	ldr	r3, [pc, #492]	; (80030b4 <UART_SetConfig+0x2e8>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b0c      	cmp	r3, #12
 8002ed2:	d82d      	bhi.n	8002f30 <UART_SetConfig+0x164>
 8002ed4:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <UART_SetConfig+0x110>)
 8002ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eda:	bf00      	nop
 8002edc:	08002f11 	.word	0x08002f11
 8002ee0:	08002f31 	.word	0x08002f31
 8002ee4:	08002f31 	.word	0x08002f31
 8002ee8:	08002f31 	.word	0x08002f31
 8002eec:	08002f21 	.word	0x08002f21
 8002ef0:	08002f31 	.word	0x08002f31
 8002ef4:	08002f31 	.word	0x08002f31
 8002ef8:	08002f31 	.word	0x08002f31
 8002efc:	08002f19 	.word	0x08002f19
 8002f00:	08002f31 	.word	0x08002f31
 8002f04:	08002f31 	.word	0x08002f31
 8002f08:	08002f31 	.word	0x08002f31
 8002f0c:	08002f29 	.word	0x08002f29
 8002f10:	2300      	movs	r3, #0
 8002f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f16:	e098      	b.n	800304a <UART_SetConfig+0x27e>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f1e:	e094      	b.n	800304a <UART_SetConfig+0x27e>
 8002f20:	2304      	movs	r3, #4
 8002f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f26:	e090      	b.n	800304a <UART_SetConfig+0x27e>
 8002f28:	2308      	movs	r3, #8
 8002f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f2e:	e08c      	b.n	800304a <UART_SetConfig+0x27e>
 8002f30:	2310      	movs	r3, #16
 8002f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f36:	e088      	b.n	800304a <UART_SetConfig+0x27e>
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a5f      	ldr	r2, [pc, #380]	; (80030bc <UART_SetConfig+0x2f0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d125      	bne.n	8002f8e <UART_SetConfig+0x1c2>
 8002f42:	4b5c      	ldr	r3, [pc, #368]	; (80030b4 <UART_SetConfig+0x2e8>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f4c:	2b30      	cmp	r3, #48	; 0x30
 8002f4e:	d016      	beq.n	8002f7e <UART_SetConfig+0x1b2>
 8002f50:	2b30      	cmp	r3, #48	; 0x30
 8002f52:	d818      	bhi.n	8002f86 <UART_SetConfig+0x1ba>
 8002f54:	2b20      	cmp	r3, #32
 8002f56:	d00a      	beq.n	8002f6e <UART_SetConfig+0x1a2>
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	d814      	bhi.n	8002f86 <UART_SetConfig+0x1ba>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <UART_SetConfig+0x19a>
 8002f60:	2b10      	cmp	r3, #16
 8002f62:	d008      	beq.n	8002f76 <UART_SetConfig+0x1aa>
 8002f64:	e00f      	b.n	8002f86 <UART_SetConfig+0x1ba>
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f6c:	e06d      	b.n	800304a <UART_SetConfig+0x27e>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f74:	e069      	b.n	800304a <UART_SetConfig+0x27e>
 8002f76:	2304      	movs	r3, #4
 8002f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f7c:	e065      	b.n	800304a <UART_SetConfig+0x27e>
 8002f7e:	2308      	movs	r3, #8
 8002f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f84:	e061      	b.n	800304a <UART_SetConfig+0x27e>
 8002f86:	2310      	movs	r3, #16
 8002f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f8c:	e05d      	b.n	800304a <UART_SetConfig+0x27e>
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a4b      	ldr	r2, [pc, #300]	; (80030c0 <UART_SetConfig+0x2f4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d125      	bne.n	8002fe4 <UART_SetConfig+0x218>
 8002f98:	4b46      	ldr	r3, [pc, #280]	; (80030b4 <UART_SetConfig+0x2e8>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fa2:	2bc0      	cmp	r3, #192	; 0xc0
 8002fa4:	d016      	beq.n	8002fd4 <UART_SetConfig+0x208>
 8002fa6:	2bc0      	cmp	r3, #192	; 0xc0
 8002fa8:	d818      	bhi.n	8002fdc <UART_SetConfig+0x210>
 8002faa:	2b80      	cmp	r3, #128	; 0x80
 8002fac:	d00a      	beq.n	8002fc4 <UART_SetConfig+0x1f8>
 8002fae:	2b80      	cmp	r3, #128	; 0x80
 8002fb0:	d814      	bhi.n	8002fdc <UART_SetConfig+0x210>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <UART_SetConfig+0x1f0>
 8002fb6:	2b40      	cmp	r3, #64	; 0x40
 8002fb8:	d008      	beq.n	8002fcc <UART_SetConfig+0x200>
 8002fba:	e00f      	b.n	8002fdc <UART_SetConfig+0x210>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fc2:	e042      	b.n	800304a <UART_SetConfig+0x27e>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fca:	e03e      	b.n	800304a <UART_SetConfig+0x27e>
 8002fcc:	2304      	movs	r3, #4
 8002fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fd2:	e03a      	b.n	800304a <UART_SetConfig+0x27e>
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fda:	e036      	b.n	800304a <UART_SetConfig+0x27e>
 8002fdc:	2310      	movs	r3, #16
 8002fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fe2:	e032      	b.n	800304a <UART_SetConfig+0x27e>
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a30      	ldr	r2, [pc, #192]	; (80030ac <UART_SetConfig+0x2e0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d12a      	bne.n	8003044 <UART_SetConfig+0x278>
 8002fee:	4b31      	ldr	r3, [pc, #196]	; (80030b4 <UART_SetConfig+0x2e8>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ff8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ffc:	d01a      	beq.n	8003034 <UART_SetConfig+0x268>
 8002ffe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003002:	d81b      	bhi.n	800303c <UART_SetConfig+0x270>
 8003004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003008:	d00c      	beq.n	8003024 <UART_SetConfig+0x258>
 800300a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800300e:	d815      	bhi.n	800303c <UART_SetConfig+0x270>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <UART_SetConfig+0x250>
 8003014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003018:	d008      	beq.n	800302c <UART_SetConfig+0x260>
 800301a:	e00f      	b.n	800303c <UART_SetConfig+0x270>
 800301c:	2300      	movs	r3, #0
 800301e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003022:	e012      	b.n	800304a <UART_SetConfig+0x27e>
 8003024:	2302      	movs	r3, #2
 8003026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800302a:	e00e      	b.n	800304a <UART_SetConfig+0x27e>
 800302c:	2304      	movs	r3, #4
 800302e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003032:	e00a      	b.n	800304a <UART_SetConfig+0x27e>
 8003034:	2308      	movs	r3, #8
 8003036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800303a:	e006      	b.n	800304a <UART_SetConfig+0x27e>
 800303c:	2310      	movs	r3, #16
 800303e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003042:	e002      	b.n	800304a <UART_SetConfig+0x27e>
 8003044:	2310      	movs	r3, #16
 8003046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a17      	ldr	r2, [pc, #92]	; (80030ac <UART_SetConfig+0x2e0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	f040 80a8 	bne.w	80031a6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003056:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800305a:	2b08      	cmp	r3, #8
 800305c:	d834      	bhi.n	80030c8 <UART_SetConfig+0x2fc>
 800305e:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <UART_SetConfig+0x298>)
 8003060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003064:	08003089 	.word	0x08003089
 8003068:	080030c9 	.word	0x080030c9
 800306c:	08003091 	.word	0x08003091
 8003070:	080030c9 	.word	0x080030c9
 8003074:	08003097 	.word	0x08003097
 8003078:	080030c9 	.word	0x080030c9
 800307c:	080030c9 	.word	0x080030c9
 8003080:	080030c9 	.word	0x080030c9
 8003084:	0800309f 	.word	0x0800309f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003088:	f7fe fd54 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 800308c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800308e:	e021      	b.n	80030d4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <UART_SetConfig+0x2f8>)
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003094:	e01e      	b.n	80030d4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003096:	f7fe fcdf 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 800309a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800309c:	e01a      	b.n	80030d4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800309e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80030a4:	e016      	b.n	80030d4 <UART_SetConfig+0x308>
 80030a6:	bf00      	nop
 80030a8:	cfff69f3 	.word	0xcfff69f3
 80030ac:	40008000 	.word	0x40008000
 80030b0:	40013800 	.word	0x40013800
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40004400 	.word	0x40004400
 80030bc:	40004800 	.word	0x40004800
 80030c0:	40004c00 	.word	0x40004c00
 80030c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80030d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 812a 	beq.w	8003330 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	4a9e      	ldr	r2, [pc, #632]	; (800335c <UART_SetConfig+0x590>)
 80030e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030e6:	461a      	mov	r2, r3
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d305      	bcc.n	800310c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	429a      	cmp	r2, r3
 800310a:	d903      	bls.n	8003114 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003112:	e10d      	b.n	8003330 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	2200      	movs	r2, #0
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	60fa      	str	r2, [r7, #12]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	4a8e      	ldr	r2, [pc, #568]	; (800335c <UART_SetConfig+0x590>)
 8003122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003126:	b29b      	uxth	r3, r3
 8003128:	2200      	movs	r2, #0
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003132:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003136:	f7fd f86f 	bl	8000218 <__aeabi_uldivmod>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4610      	mov	r0, r2
 8003140:	4619      	mov	r1, r3
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	020b      	lsls	r3, r1, #8
 800314c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003150:	0202      	lsls	r2, r0, #8
 8003152:	6979      	ldr	r1, [r7, #20]
 8003154:	6849      	ldr	r1, [r1, #4]
 8003156:	0849      	lsrs	r1, r1, #1
 8003158:	2000      	movs	r0, #0
 800315a:	460c      	mov	r4, r1
 800315c:	4605      	mov	r5, r0
 800315e:	eb12 0804 	adds.w	r8, r2, r4
 8003162:	eb43 0905 	adc.w	r9, r3, r5
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	469a      	mov	sl, r3
 800316e:	4693      	mov	fp, r2
 8003170:	4652      	mov	r2, sl
 8003172:	465b      	mov	r3, fp
 8003174:	4640      	mov	r0, r8
 8003176:	4649      	mov	r1, r9
 8003178:	f7fd f84e 	bl	8000218 <__aeabi_uldivmod>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4613      	mov	r3, r2
 8003182:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800318a:	d308      	bcc.n	800319e <UART_SetConfig+0x3d2>
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003192:	d204      	bcs.n	800319e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6a3a      	ldr	r2, [r7, #32]
 800319a:	60da      	str	r2, [r3, #12]
 800319c:	e0c8      	b.n	8003330 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80031a4:	e0c4      	b.n	8003330 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ae:	d167      	bne.n	8003280 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80031b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d828      	bhi.n	800320a <UART_SetConfig+0x43e>
 80031b8:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <UART_SetConfig+0x3f4>)
 80031ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031be:	bf00      	nop
 80031c0:	080031e5 	.word	0x080031e5
 80031c4:	080031ed 	.word	0x080031ed
 80031c8:	080031f5 	.word	0x080031f5
 80031cc:	0800320b 	.word	0x0800320b
 80031d0:	080031fb 	.word	0x080031fb
 80031d4:	0800320b 	.word	0x0800320b
 80031d8:	0800320b 	.word	0x0800320b
 80031dc:	0800320b 	.word	0x0800320b
 80031e0:	08003203 	.word	0x08003203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e4:	f7fe fca6 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 80031e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80031ea:	e014      	b.n	8003216 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031ec:	f7fe fcb8 	bl	8001b60 <HAL_RCC_GetPCLK2Freq>
 80031f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80031f2:	e010      	b.n	8003216 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031f4:	4b5a      	ldr	r3, [pc, #360]	; (8003360 <UART_SetConfig+0x594>)
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80031f8:	e00d      	b.n	8003216 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031fa:	f7fe fc2d 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 80031fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003200:	e009      	b.n	8003216 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003208:	e005      	b.n	8003216 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003214:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8089 	beq.w	8003330 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	4a4e      	ldr	r2, [pc, #312]	; (800335c <UART_SetConfig+0x590>)
 8003224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003228:	461a      	mov	r2, r3
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003230:	005a      	lsls	r2, r3, #1
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	441a      	add	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003242:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	2b0f      	cmp	r3, #15
 8003248:	d916      	bls.n	8003278 <UART_SetConfig+0x4ac>
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003250:	d212      	bcs.n	8003278 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	b29b      	uxth	r3, r3
 8003256:	f023 030f 	bic.w	r3, r3, #15
 800325a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	085b      	lsrs	r3, r3, #1
 8003260:	b29b      	uxth	r3, r3
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	b29a      	uxth	r2, r3
 8003268:	8bfb      	ldrh	r3, [r7, #30]
 800326a:	4313      	orrs	r3, r2
 800326c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	8bfa      	ldrh	r2, [r7, #30]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	e05b      	b.n	8003330 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800327e:	e057      	b.n	8003330 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003280:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003284:	2b08      	cmp	r3, #8
 8003286:	d828      	bhi.n	80032da <UART_SetConfig+0x50e>
 8003288:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <UART_SetConfig+0x4c4>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032b5 	.word	0x080032b5
 8003294:	080032bd 	.word	0x080032bd
 8003298:	080032c5 	.word	0x080032c5
 800329c:	080032db 	.word	0x080032db
 80032a0:	080032cb 	.word	0x080032cb
 80032a4:	080032db 	.word	0x080032db
 80032a8:	080032db 	.word	0x080032db
 80032ac:	080032db 	.word	0x080032db
 80032b0:	080032d3 	.word	0x080032d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b4:	f7fe fc3e 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 80032b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032ba:	e014      	b.n	80032e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032bc:	f7fe fc50 	bl	8001b60 <HAL_RCC_GetPCLK2Freq>
 80032c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032c2:	e010      	b.n	80032e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c4:	4b26      	ldr	r3, [pc, #152]	; (8003360 <UART_SetConfig+0x594>)
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032c8:	e00d      	b.n	80032e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ca:	f7fe fbc5 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 80032ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032d0:	e009      	b.n	80032e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032d8:	e005      	b.n	80032e6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80032e4:	bf00      	nop
    }

    if (pclk != 0U)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d021      	beq.n	8003330 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	4a1a      	ldr	r2, [pc, #104]	; (800335c <UART_SetConfig+0x590>)
 80032f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032f6:	461a      	mov	r2, r3
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	441a      	add	r2, r3
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	fbb2 f3f3 	udiv	r3, r2, r3
 800330e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	2b0f      	cmp	r3, #15
 8003314:	d909      	bls.n	800332a <UART_SetConfig+0x55e>
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331c:	d205      	bcs.n	800332a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	b29a      	uxth	r2, r3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60da      	str	r2, [r3, #12]
 8003328:	e002      	b.n	8003330 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2201      	movs	r2, #1
 8003334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2201      	movs	r2, #1
 800333c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2200      	movs	r2, #0
 8003344:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2200      	movs	r2, #0
 800334a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800334c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003350:	4618      	mov	r0, r3
 8003352:	3730      	adds	r7, #48	; 0x30
 8003354:	46bd      	mov	sp, r7
 8003356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800335a:	bf00      	nop
 800335c:	0800395c 	.word	0x0800395c
 8003360:	00f42400 	.word	0x00f42400

08003364 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01a      	beq.n	800347a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003462:	d10a      	bne.n	800347a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
  }
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034b8:	f7fd fb2a 	bl	8000b10 <HAL_GetTick>
 80034bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d10e      	bne.n	80034ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f82f 	bl	800353e <UART_WaitOnFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e025      	b.n	8003536 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d10e      	bne.n	8003516 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f819 	bl	800353e <UART_WaitOnFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e00f      	b.n	8003536 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b09c      	sub	sp, #112	; 0x70
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	4613      	mov	r3, r2
 800354c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800354e:	e0a9      	b.n	80036a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003556:	f000 80a5 	beq.w	80036a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355a:	f7fd fad9 	bl	8000b10 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003566:	429a      	cmp	r2, r3
 8003568:	d302      	bcc.n	8003570 <UART_WaitOnFlagUntilTimeout+0x32>
 800356a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800356c:	2b00      	cmp	r3, #0
 800356e:	d140      	bne.n	80035f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800357e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003580:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003584:	667b      	str	r3, [r7, #100]	; 0x64
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800358e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003590:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003594:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800359c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e6      	bne.n	8003570 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3308      	adds	r3, #8
 80035a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	663b      	str	r3, [r7, #96]	; 0x60
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3308      	adds	r3, #8
 80035c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80035c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e5      	bne.n	80035a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e069      	b.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d051      	beq.n	80036a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800360e:	d149      	bne.n	80036a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003618:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800362e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	461a      	mov	r2, r3
 8003636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003638:	637b      	str	r3, [r7, #52]	; 0x34
 800363a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800363e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e6      	bne.n	800361a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3308      	adds	r3, #8
 8003652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	613b      	str	r3, [r7, #16]
   return(result);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	66bb      	str	r3, [r7, #104]	; 0x68
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800366c:	623a      	str	r2, [r7, #32]
 800366e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	69f9      	ldr	r1, [r7, #28]
 8003672:	6a3a      	ldr	r2, [r7, #32]
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	61bb      	str	r3, [r7, #24]
   return(result);
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e010      	b.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4013      	ands	r3, r2
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	bf0c      	ite	eq
 80036b4:	2301      	moveq	r3, #1
 80036b6:	2300      	movne	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	429a      	cmp	r2, r3
 80036c0:	f43f af46 	beq.w	8003550 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3770      	adds	r7, #112	; 0x70
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b085      	sub	sp, #20
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e027      	b.n	8003734 <HAL_UARTEx_DisableFifoMode+0x66>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2224      	movs	r2, #36	; 0x24
 80036f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0201 	bic.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003712:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003754:	2302      	movs	r3, #2
 8003756:	e02d      	b.n	80037b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2224      	movs	r2, #36	; 0x24
 8003764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f84f 	bl	8003838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e02d      	b.n	8003830 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2224      	movs	r2, #36	; 0x24
 80037e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0201 	bic.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f811 	bl	8003838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003844:	2b00      	cmp	r3, #0
 8003846:	d108      	bne.n	800385a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003858:	e031      	b.n	80038be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800385a:	2308      	movs	r3, #8
 800385c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800385e:	2308      	movs	r3, #8
 8003860:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	0e5b      	lsrs	r3, r3, #25
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	0f5b      	lsrs	r3, r3, #29
 800387a:	b2db      	uxtb	r3, r3
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003882:	7bbb      	ldrb	r3, [r7, #14]
 8003884:	7b3a      	ldrb	r2, [r7, #12]
 8003886:	4911      	ldr	r1, [pc, #68]	; (80038cc <UARTEx_SetNbDataToProcess+0x94>)
 8003888:	5c8a      	ldrb	r2, [r1, r2]
 800388a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800388e:	7b3a      	ldrb	r2, [r7, #12]
 8003890:	490f      	ldr	r1, [pc, #60]	; (80038d0 <UARTEx_SetNbDataToProcess+0x98>)
 8003892:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003894:	fb93 f3f2 	sdiv	r3, r3, r2
 8003898:	b29a      	uxth	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	7b7a      	ldrb	r2, [r7, #13]
 80038a4:	4909      	ldr	r1, [pc, #36]	; (80038cc <UARTEx_SetNbDataToProcess+0x94>)
 80038a6:	5c8a      	ldrb	r2, [r1, r2]
 80038a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038ac:	7b7a      	ldrb	r2, [r7, #13]
 80038ae:	4908      	ldr	r1, [pc, #32]	; (80038d0 <UARTEx_SetNbDataToProcess+0x98>)
 80038b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	08003974 	.word	0x08003974
 80038d0:	0800397c 	.word	0x0800397c

080038d4 <__libc_init_array>:
 80038d4:	b570      	push	{r4, r5, r6, lr}
 80038d6:	4d0d      	ldr	r5, [pc, #52]	; (800390c <__libc_init_array+0x38>)
 80038d8:	4c0d      	ldr	r4, [pc, #52]	; (8003910 <__libc_init_array+0x3c>)
 80038da:	1b64      	subs	r4, r4, r5
 80038dc:	10a4      	asrs	r4, r4, #2
 80038de:	2600      	movs	r6, #0
 80038e0:	42a6      	cmp	r6, r4
 80038e2:	d109      	bne.n	80038f8 <__libc_init_array+0x24>
 80038e4:	4d0b      	ldr	r5, [pc, #44]	; (8003914 <__libc_init_array+0x40>)
 80038e6:	4c0c      	ldr	r4, [pc, #48]	; (8003918 <__libc_init_array+0x44>)
 80038e8:	f000 f820 	bl	800392c <_init>
 80038ec:	1b64      	subs	r4, r4, r5
 80038ee:	10a4      	asrs	r4, r4, #2
 80038f0:	2600      	movs	r6, #0
 80038f2:	42a6      	cmp	r6, r4
 80038f4:	d105      	bne.n	8003902 <__libc_init_array+0x2e>
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
 80038f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038fc:	4798      	blx	r3
 80038fe:	3601      	adds	r6, #1
 8003900:	e7ee      	b.n	80038e0 <__libc_init_array+0xc>
 8003902:	f855 3b04 	ldr.w	r3, [r5], #4
 8003906:	4798      	blx	r3
 8003908:	3601      	adds	r6, #1
 800390a:	e7f2      	b.n	80038f2 <__libc_init_array+0x1e>
 800390c:	0800398c 	.word	0x0800398c
 8003910:	0800398c 	.word	0x0800398c
 8003914:	0800398c 	.word	0x0800398c
 8003918:	08003990 	.word	0x08003990

0800391c <memset>:
 800391c:	4402      	add	r2, r0
 800391e:	4603      	mov	r3, r0
 8003920:	4293      	cmp	r3, r2
 8003922:	d100      	bne.n	8003926 <memset+0xa>
 8003924:	4770      	bx	lr
 8003926:	f803 1b01 	strb.w	r1, [r3], #1
 800392a:	e7f9      	b.n	8003920 <memset+0x4>

0800392c <_init>:
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392e:	bf00      	nop
 8003930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003932:	bc08      	pop	{r3}
 8003934:	469e      	mov	lr, r3
 8003936:	4770      	bx	lr

08003938 <_fini>:
 8003938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393a:	bf00      	nop
 800393c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393e:	bc08      	pop	{r3}
 8003940:	469e      	mov	lr, r3
 8003942:	4770      	bx	lr
