
ServoTester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004170  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004348  08004348  00014348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004388  08004388  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004388  08004388  00014388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004390  08004390  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  080043a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  080043a4  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014319  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e9  00000000  00000000  00034355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00036640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  000377e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df46  00000000  00000000  000388c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001310d  00000000  00000000  0005680e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c729a  00000000  00000000  0006991b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130bb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c54  00000000  00000000  00130c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004330 	.word	0x08004330

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004330 	.word	0x08004330

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fc09 	bl	8000d36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f82c 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f9d4 	bl	80008d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f986 	bl	800083c <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000530:	f000 f872 	bl	8000618 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000534:	f000 f8b6 	bl	80006a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000538:	f000 f91a 	bl	8000770 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2000);
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <main+0x5c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000544:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2000);
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <main+0x60>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800054e:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 8000550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000554:	f000 fc60 	bl	8000e18 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <main+0x5c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000560:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <main+0x60>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800056a:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 800056c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000570:	f000 fc52 	bl	8000e18 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2000);
 8000574:	e7e2      	b.n	800053c <main+0x20>
 8000576:	bf00      	nop
 8000578:	200000d8 	.word	0x200000d8
 800057c:	2000008c 	.word	0x2000008c

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	2238      	movs	r2, #56	; 0x38
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fec6 	bl	8004320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005a6:	f001 fa61 	bl	8001a6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005aa:	2302      	movs	r3, #2
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2340      	movs	r3, #64	; 0x40
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005c4:	230a      	movs	r3, #10
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0318 	add.w	r3, r7, #24
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 faeb 	bl	8001bb4 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80005e4:	f000 f9b6 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2303      	movs	r3, #3
 80005ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fdef 	bl	80021e4 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800060c:	f000 f9a2 	bl	8000954 <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	; 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_FDCAN1_Init+0x84>)
 800061e:	4a20      	ldr	r2, [pc, #128]	; (80006a0 <MX_FDCAN1_Init+0x88>)
 8000620:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_FDCAN1_Init+0x84>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000636:	2200      	movs	r2, #0
 8000638:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_FDCAN1_Init+0x84>)
 800063c:	2200      	movs	r2, #0
 800063e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000642:	2200      	movs	r2, #0
 8000644:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000648:	2205      	movs	r2, #5
 800064a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_FDCAN1_Init+0x84>)
 800064e:	2210      	movs	r2, #16
 8000650:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000654:	220d      	movs	r2, #13
 8000656:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_FDCAN1_Init+0x84>)
 800065a:	2202      	movs	r2, #2
 800065c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000660:	2201      	movs	r2, #1
 8000662:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000664:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000666:	2204      	movs	r2, #4
 8000668:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_FDCAN1_Init+0x84>)
 800066c:	2205      	movs	r2, #5
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000672:	2204      	movs	r2, #4
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000678:	2201      	movs	r2, #1
 800067a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_FDCAN1_Init+0x84>)
 800067e:	2200      	movs	r2, #0
 8000680:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_FDCAN1_Init+0x84>)
 800068a:	f000 fcf7 	bl	800107c <HAL_FDCAN_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000694:	f000 f95e 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000028 	.word	0x20000028
 80006a0:	40006400 	.word	0x40006400

080006a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b6:	463b      	mov	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
 80006c4:	615a      	str	r2, [r3, #20]
 80006c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <MX_TIM2_Init+0xc8>)
 80006ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <MX_TIM2_Init+0xc8>)
 80006d2:	224f      	movs	r2, #79	; 0x4f
 80006d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <MX_TIM2_Init+0xc8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <MX_TIM2_Init+0xc8>)
 80006de:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80006e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_TIM2_Init+0xc8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_TIM2_Init+0xc8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006f0:	481e      	ldr	r0, [pc, #120]	; (800076c <MX_TIM2_Init+0xc8>)
 80006f2:	f002 f983 	bl	80029fc <HAL_TIM_PWM_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80006fc:	f000 f92a 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	4817      	ldr	r0, [pc, #92]	; (800076c <MX_TIM2_Init+0xc8>)
 8000710:	f002 ff8c 	bl	800362c <HAL_TIMEx_MasterConfigSynchronization>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800071a:	f000 f91b 	bl	8000954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071e:	2360      	movs	r3, #96	; 0x60
 8000720:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	4619      	mov	r1, r3
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <MX_TIM2_Init+0xc8>)
 8000736:	f002 fab9 	bl	8002cac <HAL_TIM_PWM_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000740:	f000 f908 	bl	8000954 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_TIM2_Init+0xc8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	699a      	ldr	r2, [r3, #24]
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_TIM2_Init+0xc8>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f022 0208 	bic.w	r2, r2, #8
 8000752:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000754:	2100      	movs	r1, #0
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_TIM2_Init+0xc8>)
 8000758:	f002 f9a8 	bl	8002aac <HAL_TIM_PWM_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800075c:	4803      	ldr	r0, [pc, #12]	; (800076c <MX_TIM2_Init+0xc8>)
 800075e:	f000 f9bf 	bl	8000ae0 <HAL_TIM_MspPostInit>

}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	; 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000008c 	.word	0x2000008c

08000770 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	615a      	str	r2, [r3, #20]
 8000792:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <MX_TIM3_Init+0xc4>)
 8000796:	4a28      	ldr	r2, [pc, #160]	; (8000838 <MX_TIM3_Init+0xc8>)
 8000798:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <MX_TIM3_Init+0xc4>)
 800079c:	224f      	movs	r2, #79	; 0x4f
 800079e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	4b24      	ldr	r3, [pc, #144]	; (8000834 <MX_TIM3_Init+0xc4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <MX_TIM3_Init+0xc4>)
 80007a8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80007ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <MX_TIM3_Init+0xc4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <MX_TIM3_Init+0xc4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007ba:	481e      	ldr	r0, [pc, #120]	; (8000834 <MX_TIM3_Init+0xc4>)
 80007bc:	f002 f91e 	bl	80029fc <HAL_TIM_PWM_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80007c6:	f000 f8c5 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4816      	ldr	r0, [pc, #88]	; (8000834 <MX_TIM3_Init+0xc4>)
 80007da:	f002 ff27 	bl	800362c <HAL_TIMEx_MasterConfigSynchronization>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80007e4:	f000 f8b6 	bl	8000954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e8:	2360      	movs	r3, #96	; 0x60
 80007ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	2204      	movs	r2, #4
 80007fc:	4619      	mov	r1, r3
 80007fe:	480d      	ldr	r0, [pc, #52]	; (8000834 <MX_TIM3_Init+0xc4>)
 8000800:	f002 fa54 	bl	8002cac <HAL_TIM_PWM_ConfigChannel>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800080a:	f000 f8a3 	bl	8000954 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_TIM3_Init+0xc4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	699a      	ldr	r2, [r3, #24]
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <MX_TIM3_Init+0xc4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800081c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800081e:	2104      	movs	r1, #4
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_TIM3_Init+0xc4>)
 8000822:	f002 f943 	bl	8002aac <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000826:	4803      	ldr	r0, [pc, #12]	; (8000834 <MX_TIM3_Init+0xc4>)
 8000828:	f000 f95a 	bl	8000ae0 <HAL_TIM_MspPostInit>

}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200000d8 	.word	0x200000d8
 8000838:	40000400 	.word	0x40000400

0800083c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000840:	4b22      	ldr	r3, [pc, #136]	; (80008cc <MX_USART2_UART_Init+0x90>)
 8000842:	4a23      	ldr	r2, [pc, #140]	; (80008d0 <MX_USART2_UART_Init+0x94>)
 8000844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_USART2_UART_Init+0x90>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_USART2_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_USART2_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_USART2_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_USART2_UART_Init+0x90>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_USART2_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_USART2_UART_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_USART2_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_USART2_UART_Init+0x90>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_USART2_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000884:	4811      	ldr	r0, [pc, #68]	; (80008cc <MX_USART2_UART_Init+0x90>)
 8000886:	f002 ff53 	bl	8003730 <HAL_UART_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000890:	f000 f860 	bl	8000954 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000894:	2100      	movs	r1, #0
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <MX_USART2_UART_Init+0x90>)
 8000898:	f003 fc54 	bl	8004144 <HAL_UARTEx_SetTxFifoThreshold>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008a2:	f000 f857 	bl	8000954 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a6:	2100      	movs	r1, #0
 80008a8:	4808      	ldr	r0, [pc, #32]	; (80008cc <MX_USART2_UART_Init+0x90>)
 80008aa:	f003 fc89 	bl	80041c0 <HAL_UARTEx_SetRxFifoThreshold>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008b4:	f000 f84e 	bl	8000954 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_USART2_UART_Init+0x90>)
 80008ba:	f003 fc0a 	bl	80040d2 <HAL_UARTEx_DisableFifoMode>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008c4:	f000 f846 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000124 	.word	0x20000124
 80008d0:	40004400 	.word	0x40004400

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_GPIO_Init+0x78>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <MX_GPIO_Init+0x78>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_GPIO_Init+0x78>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_GPIO_Init+0x78>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <MX_GPIO_Init+0x78>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_GPIO_Init+0x78>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <MX_GPIO_Init+0x7c>)
 8000922:	f001 f88b 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_GPIO_Init+0x7c>)
 8000940:	f000 fefa 	bl	8001738 <HAL_GPIO_Init>

}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000
 8000950:	48000400 	.word	0x48000400

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x44>)
 8000968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_MspInit+0x44>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6613      	str	r3, [r2, #96]	; 0x60
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_MspInit+0x44>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x44>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x44>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6593      	str	r3, [r2, #88]	; 0x58
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x44>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09a      	sub	sp, #104	; 0x68
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	2244      	movs	r2, #68	; 0x44
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f003 fca9 	bl	8004320 <memset>
  if(hfdcan->Instance==FDCAN1)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a28      	ldr	r2, [pc, #160]	; (8000a74 <HAL_FDCAN_MspInit+0xcc>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d149      	bne.n	8000a6c <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80009d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80009de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009e2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 fe17 	bl	800261c <HAL_RCCEx_PeriphCLKConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80009f4:	f7ff ffae 	bl	8000954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <HAL_FDCAN_MspInit+0xd0>)
 80009fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fc:	4a1e      	ldr	r2, [pc, #120]	; (8000a78 <HAL_FDCAN_MspInit+0xd0>)
 80009fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a02:	6593      	str	r3, [r2, #88]	; 0x58
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <HAL_FDCAN_MspInit+0xd0>)
 8000a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_FDCAN_MspInit+0xd0>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a14:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <HAL_FDCAN_MspInit+0xd0>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_FDCAN_MspInit+0xd0>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a2c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a3a:	2309      	movs	r3, #9
 8000a3c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a42:	4619      	mov	r1, r3
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a48:	f000 fe76 	bl	8001738 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2015      	movs	r0, #21
 8000a52:	f000 fade 	bl	8001012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000a56:	2015      	movs	r0, #21
 8000a58:	f000 faf5 	bl	8001046 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2016      	movs	r0, #22
 8000a62:	f000 fad6 	bl	8001012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000a66:	2016      	movs	r0, #22
 8000a68:	f000 faed 	bl	8001046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000a6c:	bf00      	nop
 8000a6e:	3768      	adds	r7, #104	; 0x68
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40006400 	.word	0x40006400
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a8c:	d10c      	bne.n	8000aa8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_TIM_PWM_MspInit+0x5c>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a92:	4a11      	ldr	r2, [pc, #68]	; (8000ad8 <HAL_TIM_PWM_MspInit+0x5c>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_TIM_PWM_MspInit+0x5c>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000aa6:	e010      	b.n	8000aca <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <HAL_TIM_PWM_MspInit+0x60>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d10b      	bne.n	8000aca <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_TIM_PWM_MspInit+0x5c>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_TIM_PWM_MspInit+0x5c>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6593      	str	r3, [r2, #88]	; 0x58
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_TIM_PWM_MspInit+0x5c>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40000400 	.word	0x40000400

08000ae0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b00:	d11d      	bne.n	8000b3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <HAL_TIM_MspPostInit+0xac>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <HAL_TIM_MspPostInit+0xac>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <HAL_TIM_MspPostInit+0xac>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b1a:	2320      	movs	r3, #32
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f000 fdfe 	bl	8001738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b3c:	e021      	b.n	8000b82 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <HAL_TIM_MspPostInit+0xb0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d11c      	bne.n	8000b82 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_TIM_MspPostInit+0xac>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4c:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <HAL_TIM_MspPostInit+0xac>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_TIM_MspPostInit+0xac>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b60:	2310      	movs	r3, #16
 8000b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b70:	2302      	movs	r3, #2
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7e:	f000 fddb 	bl	8001738 <HAL_GPIO_Init>
}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40000400 	.word	0x40000400

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09a      	sub	sp, #104	; 0x68
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	2244      	movs	r2, #68	; 0x44
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f003 fbb3 	bl	8004320 <memset>
  if(huart->Instance==USART2)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a1f      	ldr	r2, [pc, #124]	; (8000c3c <HAL_UART_MspInit+0xa8>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d136      	bne.n	8000c32 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 fd23 	bl	800261c <HAL_RCCEx_PeriphCLKConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bdc:	f7ff feba 	bl	8000954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_UART_MspInit+0xac>)
 8000be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be4:	4a16      	ldr	r2, [pc, #88]	; (8000c40 <HAL_UART_MspInit+0xac>)
 8000be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bea:	6593      	str	r3, [r2, #88]	; 0x58
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_UART_MspInit+0xac>)
 8000bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_UART_MspInit+0xac>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfc:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <HAL_UART_MspInit+0xac>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_UART_MspInit+0xac>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c10:	230c      	movs	r3, #12
 8000c12:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c20:	2307      	movs	r3, #7
 8000c22:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2e:	f000 fd83 	bl	8001738 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3768      	adds	r7, #104	; 0x68
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40021000 	.word	0x40021000

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 f8a4 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <FDCAN1_IT0_IRQHandler+0x10>)
 8000c9e:	f000 fb47 	bl	8001330 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000028 	.word	0x20000028

08000cac <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <FDCAN1_IT1_IRQHandler+0x10>)
 8000cb2:	f000 fb3d 	bl	8001330 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000028 	.word	0x20000028

08000cc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ce6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cea:	490e      	ldr	r1, [pc, #56]	; (8000d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <LoopForever+0xe>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d00:	4c0b      	ldr	r4, [pc, #44]	; (8000d30 <LoopForever+0x16>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d0e:	f7ff ffd7 	bl	8000cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d12:	f003 fae1 	bl	80042d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d16:	f7ff fc01 	bl	800051c <main>

08000d1a <LoopForever>:

LoopForever:
    b LoopForever
 8000d1a:	e7fe      	b.n	8000d1a <LoopForever>
  ldr   r0, =_estack
 8000d1c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d28:	08004398 	.word	0x08004398
  ldr r2, =_sbss
 8000d2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d30:	200001b8 	.word	0x200001b8

08000d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC1_2_IRQHandler>

08000d36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f95b 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d46:	2001      	movs	r0, #1
 8000d48:	f000 f80e 	bl	8000d68 <HAL_InitTick>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	71fb      	strb	r3, [r7, #7]
 8000d56:	e001      	b.n	8000d5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d58:	f7ff fe02 	bl	8000960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d5c:	79fb      	ldrb	r3, [r7, #7]

}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_InitTick+0x68>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d022      	beq.n	8000dc2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_InitTick+0x6c>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HAL_InitTick+0x68>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d88:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 f966 	bl	8001062 <HAL_SYSTICK_Config>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d10f      	bne.n	8000dbc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b0f      	cmp	r3, #15
 8000da0:	d809      	bhi.n	8000db6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da2:	2200      	movs	r2, #0
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	f04f 30ff 	mov.w	r0, #4294967295
 8000daa:	f000 f932 	bl	8001012 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_InitTick+0x70>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	e007      	b.n	8000dc6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	e004      	b.n	8000dc6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e001      	b.n	8000dc6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_IncTick+0x1c>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_IncTick+0x20>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <HAL_IncTick+0x1c>)
 8000dec:	6013      	str	r3, [r2, #0]
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	200001b4 	.word	0x200001b4
 8000dfc:	20000008 	.word	0x20000008

08000e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <HAL_GetTick+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200001b4 	.word	0x200001b4

08000e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff ffee 	bl	8000e00 <HAL_GetTick>
 8000e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e30:	d004      	beq.n	8000e3c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_Delay+0x40>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	4413      	add	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3c:	bf00      	nop
 8000e3e:	f7ff ffdf 	bl	8000e00 <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d8f7      	bhi.n	8000e3e <HAL_Delay+0x26>
  {
  }
}
 8000e4e:	bf00      	nop
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000008 	.word	0x20000008

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4907      	ldr	r1, [pc, #28]	; (8000ef8 <__NVIC_EnableIRQ+0x38>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	; (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00f      	b.n	8000fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <SysTick_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f7ff ff8e 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff29 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001020:	f7ff ff40 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8001024:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff ff90 	bl	8000f50 <NVIC_EncodePriority>
 8001030:	4602      	mov	r2, r0
 8001032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff5f 	bl	8000efc <__NVIC_SetPriority>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff33 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffa4 	bl	8000fb8 <SysTick_Config>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e147      	b.n	800131e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d106      	bne.n	80010a8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fc80 	bl	80009a8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	699a      	ldr	r2, [r3, #24]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0210 	bic.w	r2, r2, #16
 80010b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b8:	f7ff fea2 	bl	8000e00 <HAL_GetTick>
 80010bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010be:	e012      	b.n	80010e6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010c0:	f7ff fe9e 	bl	8000e00 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b0a      	cmp	r3, #10
 80010cc:	d90b      	bls.n	80010e6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d2:	f043 0201 	orr.w	r2, r3, #1
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2203      	movs	r2, #3
 80010de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e11b      	b.n	800131e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d0e5      	beq.n	80010c0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	699a      	ldr	r2, [r3, #24]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0201 	orr.w	r2, r2, #1
 8001102:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001104:	f7ff fe7c 	bl	8000e00 <HAL_GetTick>
 8001108:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800110a:	e012      	b.n	8001132 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800110c:	f7ff fe78 	bl	8000e00 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b0a      	cmp	r3, #10
 8001118:	d90b      	bls.n	8001132 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111e:	f043 0201 	orr.w	r2, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2203      	movs	r2, #3
 800112a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e0f5      	b.n	800131e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0e5      	beq.n	800110c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	699a      	ldr	r2, [r3, #24]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0202 	orr.w	r2, r2, #2
 800114e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a74      	ldr	r2, [pc, #464]	; (8001328 <HAL_FDCAN_Init+0x2ac>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d103      	bne.n	8001162 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800115a:	4a74      	ldr	r2, [pc, #464]	; (800132c <HAL_FDCAN_Init+0x2b0>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7c1b      	ldrb	r3, [r3, #16]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d108      	bne.n	800117c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	699a      	ldr	r2, [r3, #24]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001178:	619a      	str	r2, [r3, #24]
 800117a:	e007      	b.n	800118c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	699a      	ldr	r2, [r3, #24]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800118a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7c5b      	ldrb	r3, [r3, #17]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d108      	bne.n	80011a6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	699a      	ldr	r2, [r3, #24]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011a2:	619a      	str	r2, [r3, #24]
 80011a4:	e007      	b.n	80011b6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	699a      	ldr	r2, [r3, #24]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011b4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7c9b      	ldrb	r3, [r3, #18]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d108      	bne.n	80011d0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	699a      	ldr	r2, [r3, #24]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011cc:	619a      	str	r2, [r3, #24]
 80011ce:	e007      	b.n	80011e0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	699a      	ldr	r2, [r3, #24]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011de:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	699a      	ldr	r2, [r3, #24]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001204:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0210 	bic.w	r2, r2, #16
 8001214:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d108      	bne.n	8001230 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	699a      	ldr	r2, [r3, #24]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0204 	orr.w	r2, r2, #4
 800122c:	619a      	str	r2, [r3, #24]
 800122e:	e02c      	b.n	800128a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d028      	beq.n	800128a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b02      	cmp	r3, #2
 800123e:	d01c      	beq.n	800127a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800124e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	691a      	ldr	r2, [r3, #16]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0210 	orr.w	r2, r2, #16
 800125e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b03      	cmp	r3, #3
 8001266:	d110      	bne.n	800128a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0220 	orr.w	r2, r2, #32
 8001276:	619a      	str	r2, [r3, #24]
 8001278:	e007      	b.n	800128a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	699a      	ldr	r2, [r3, #24]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0220 	orr.w	r2, r2, #32
 8001288:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	3b01      	subs	r3, #1
 8001290:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	3b01      	subs	r3, #1
 8001298:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800129a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012a2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012b2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012b4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80012be:	d115      	bne.n	80012ec <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	3b01      	subs	r3, #1
 80012cc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012ce:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	3b01      	subs	r3, #1
 80012d6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012d8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	3b01      	subs	r3, #1
 80012e2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012e8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012ea:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f9c2 	bl	800168c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40006400 	.word	0x40006400
 800132c:	40006500 	.word	0x40006500

08001330 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800133e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134c:	4013      	ands	r3, r2
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001362:	6a3a      	ldr	r2, [r7, #32]
 8001364:	4013      	ands	r3, r2
 8001366:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800136e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001372:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137a:	69fa      	ldr	r2, [r7, #28]
 800137c:	4013      	ands	r3, r2
 800137e:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001386:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800138a:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800139e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013a2:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4013      	ands	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00d      	beq.n	80013da <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d006      	beq.n	80013da <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2240      	movs	r2, #64	; 0x40
 80013d2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f939 	bl	800164c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d01b      	beq.n	8001420 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d014      	beq.n	8001420 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013fe:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001416:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001418:	6939      	ldr	r1, [r7, #16]
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f8f7 	bl	800160e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800142e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f8b6 	bl	80015a2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d007      	beq.n	800144c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6a3a      	ldr	r2, [r7, #32]
 8001442:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001444:	6a39      	ldr	r1, [r7, #32]
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f8b6 	bl	80015b8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800145a:	69f9      	ldr	r1, [r7, #28]
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f8b6 	bl	80015ce <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00e      	beq.n	800148e <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001486:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f8ab 	bl	80015e4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001498:	2b00      	cmp	r3, #0
 800149a:	d01a      	beq.n	80014d2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d013      	beq.n	80014d2 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014b2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	4013      	ands	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2280      	movs	r2, #128	; 0x80
 80014c8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80014ca:	68f9      	ldr	r1, [r7, #12]
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f893 	bl	80015f8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00e      	beq.n	80014fe <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014f6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f893 	bl	8001624 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00e      	beq.n	800152a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d007      	beq.n	800152a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001522:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f887 	bl	8001638 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d011      	beq.n	800155c <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00a      	beq.n	800155c <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800154e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001554:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800156a:	6979      	ldr	r1, [r7, #20]
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f881 	bl	8001674 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d009      	beq.n	800158c <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f863 	bl	8001660 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001696:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016a6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ae:	041a      	lsls	r2, r3, #16
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016cc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d4:	061a      	lsls	r2, r3, #24
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e005      	b.n	800171a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	3304      	adds	r3, #4
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	429a      	cmp	r2, r3
 8001724:	d3f3      	bcc.n	800170e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001726:	bf00      	nop
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	4000a400 	.word	0x4000a400

08001738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001746:	e15a      	b.n	80019fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2101      	movs	r1, #1
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	4013      	ands	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 814c 	beq.w	80019f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b01      	cmp	r3, #1
 800176a:	d005      	beq.n	8001778 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001774:	2b02      	cmp	r3, #2
 8001776:	d130      	bne.n	80017da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ae:	2201      	movs	r2, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	f003 0201 	and.w	r2, r3, #1
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d017      	beq.n	8001816 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	2203      	movs	r2, #3
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d123      	bne.n	800186a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	08da      	lsrs	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3208      	adds	r2, #8
 800182a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	691a      	ldr	r2, [r3, #16]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	6939      	ldr	r1, [r7, #16]
 8001866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0203 	and.w	r2, r3, #3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80a6 	beq.w	80019f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ac:	4b5b      	ldr	r3, [pc, #364]	; (8001a1c <HAL_GPIO_Init+0x2e4>)
 80018ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b0:	4a5a      	ldr	r2, [pc, #360]	; (8001a1c <HAL_GPIO_Init+0x2e4>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6613      	str	r3, [r2, #96]	; 0x60
 80018b8:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <HAL_GPIO_Init+0x2e4>)
 80018ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c4:	4a56      	ldr	r2, [pc, #344]	; (8001a20 <HAL_GPIO_Init+0x2e8>)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3302      	adds	r3, #2
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ee:	d01f      	beq.n	8001930 <HAL_GPIO_Init+0x1f8>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a4c      	ldr	r2, [pc, #304]	; (8001a24 <HAL_GPIO_Init+0x2ec>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d019      	beq.n	800192c <HAL_GPIO_Init+0x1f4>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a4b      	ldr	r2, [pc, #300]	; (8001a28 <HAL_GPIO_Init+0x2f0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d013      	beq.n	8001928 <HAL_GPIO_Init+0x1f0>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a4a      	ldr	r2, [pc, #296]	; (8001a2c <HAL_GPIO_Init+0x2f4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d00d      	beq.n	8001924 <HAL_GPIO_Init+0x1ec>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a49      	ldr	r2, [pc, #292]	; (8001a30 <HAL_GPIO_Init+0x2f8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d007      	beq.n	8001920 <HAL_GPIO_Init+0x1e8>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a48      	ldr	r2, [pc, #288]	; (8001a34 <HAL_GPIO_Init+0x2fc>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d101      	bne.n	800191c <HAL_GPIO_Init+0x1e4>
 8001918:	2305      	movs	r3, #5
 800191a:	e00a      	b.n	8001932 <HAL_GPIO_Init+0x1fa>
 800191c:	2306      	movs	r3, #6
 800191e:	e008      	b.n	8001932 <HAL_GPIO_Init+0x1fa>
 8001920:	2304      	movs	r3, #4
 8001922:	e006      	b.n	8001932 <HAL_GPIO_Init+0x1fa>
 8001924:	2303      	movs	r3, #3
 8001926:	e004      	b.n	8001932 <HAL_GPIO_Init+0x1fa>
 8001928:	2302      	movs	r3, #2
 800192a:	e002      	b.n	8001932 <HAL_GPIO_Init+0x1fa>
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <HAL_GPIO_Init+0x1fa>
 8001930:	2300      	movs	r3, #0
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	f002 0203 	and.w	r2, r2, #3
 8001938:	0092      	lsls	r2, r2, #2
 800193a:	4093      	lsls	r3, r2
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001942:	4937      	ldr	r1, [pc, #220]	; (8001a20 <HAL_GPIO_Init+0x2e8>)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	089b      	lsrs	r3, r3, #2
 8001948:	3302      	adds	r3, #2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001950:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <HAL_GPIO_Init+0x300>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001974:	4a30      	ldr	r2, [pc, #192]	; (8001a38 <HAL_GPIO_Init+0x300>)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800197a:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <HAL_GPIO_Init+0x300>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800199e:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <HAL_GPIO_Init+0x300>)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <HAL_GPIO_Init+0x300>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019c8:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <HAL_GPIO_Init+0x300>)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ce:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <HAL_GPIO_Init+0x300>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <HAL_GPIO_Init+0x300>)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f47f ae9d 	bne.w	8001748 <HAL_GPIO_Init+0x10>
  }
}
 8001a0e:	bf00      	nop
 8001a10:	bf00      	nop
 8001a12:	371c      	adds	r7, #28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010000 	.word	0x40010000
 8001a24:	48000400 	.word	0x48000400
 8001a28:	48000800 	.word	0x48000800
 8001a2c:	48000c00 	.word	0x48000c00
 8001a30:	48001000 	.word	0x48001000
 8001a34:	48001400 	.word	0x48001400
 8001a38:	40010400 	.word	0x40010400

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a4c:	787b      	ldrb	r3, [r7, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d141      	bne.n	8001afe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7a:	4b4b      	ldr	r3, [pc, #300]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	d131      	bne.n	8001aec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a88:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a8e:	4a46      	ldr	r2, [pc, #280]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a98:	4b43      	ldr	r3, [pc, #268]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aa0:	4a41      	ldr	r2, [pc, #260]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aa8:	4b40      	ldr	r3, [pc, #256]	; (8001bac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2232      	movs	r2, #50	; 0x32
 8001aae:	fb02 f303 	mul.w	r3, r2, r3
 8001ab2:	4a3f      	ldr	r2, [pc, #252]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab8:	0c9b      	lsrs	r3, r3, #18
 8001aba:	3301      	adds	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001abe:	e002      	b.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ac6:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad2:	d102      	bne.n	8001ada <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f2      	bne.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ada:	4b33      	ldr	r3, [pc, #204]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae6:	d158      	bne.n	8001b9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e057      	b.n	8001b9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aec:	4b2e      	ldr	r3, [pc, #184]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001af2:	4a2d      	ldr	r2, [pc, #180]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001af8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001afc:	e04d      	b.n	8001b9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b04:	d141      	bne.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b06:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b12:	d131      	bne.n	8001b78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b14:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b1a:	4a23      	ldr	r2, [pc, #140]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b24:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2232      	movs	r2, #50	; 0x32
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b40:	fba2 2303 	umull	r2, r3, r2, r3
 8001b44:	0c9b      	lsrs	r3, r3, #18
 8001b46:	3301      	adds	r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b4a:	e002      	b.n	8001b52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b5e:	d102      	bne.n	8001b66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f2      	bne.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b72:	d112      	bne.n	8001b9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e011      	b.n	8001b9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b88:	e007      	b.n	8001b9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	431bde83 	.word	0x431bde83

08001bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e306      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d075      	beq.n	8001cbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd2:	4b97      	ldr	r3, [pc, #604]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bdc:	4b94      	ldr	r3, [pc, #592]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	2b0c      	cmp	r3, #12
 8001bea:	d102      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x3e>
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d002      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x44>
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d10b      	bne.n	8001c10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	4b8d      	ldr	r3, [pc, #564]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d05b      	beq.n	8001cbc <HAL_RCC_OscConfig+0x108>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d157      	bne.n	8001cbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e2e1      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c18:	d106      	bne.n	8001c28 <HAL_RCC_OscConfig+0x74>
 8001c1a:	4b85      	ldr	r3, [pc, #532]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a84      	ldr	r2, [pc, #528]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e01d      	b.n	8001c64 <HAL_RCC_OscConfig+0xb0>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x98>
 8001c32:	4b7f      	ldr	r3, [pc, #508]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a7e      	ldr	r2, [pc, #504]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b7c      	ldr	r3, [pc, #496]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a7b      	ldr	r2, [pc, #492]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e00b      	b.n	8001c64 <HAL_RCC_OscConfig+0xb0>
 8001c4c:	4b78      	ldr	r3, [pc, #480]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a77      	ldr	r2, [pc, #476]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b75      	ldr	r3, [pc, #468]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a74      	ldr	r2, [pc, #464]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d013      	beq.n	8001c94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7ff f8c8 	bl	8000e00 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff f8c4 	bl	8000e00 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b64      	cmp	r3, #100	; 0x64
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e2a6      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c86:	4b6a      	ldr	r3, [pc, #424]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0xc0>
 8001c92:	e014      	b.n	8001cbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff f8b4 	bl	8000e00 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff f8b0 	bl	8000e00 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e292      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cae:	4b60      	ldr	r3, [pc, #384]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0xe8>
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d075      	beq.n	8001db6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cca:	4b59      	ldr	r3, [pc, #356]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cd4:	4b56      	ldr	r3, [pc, #344]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	2b0c      	cmp	r3, #12
 8001ce2:	d102      	bne.n	8001cea <HAL_RCC_OscConfig+0x136>
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d002      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x13c>
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d11f      	bne.n	8001d30 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf0:	4b4f      	ldr	r3, [pc, #316]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_OscConfig+0x154>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e265      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d08:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	4946      	ldr	r1, [pc, #280]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d1c:	4b45      	ldr	r3, [pc, #276]	; (8001e34 <HAL_RCC_OscConfig+0x280>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff f821 	bl	8000d68 <HAL_InitTick>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d043      	beq.n	8001db4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e251      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d023      	beq.n	8001d80 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d38:	4b3d      	ldr	r3, [pc, #244]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a3c      	ldr	r2, [pc, #240]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7ff f85c 	bl	8000e00 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4c:	f7ff f858 	bl	8000e00 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e23a      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d5e:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6a:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	061b      	lsls	r3, r3, #24
 8001d78:	492d      	ldr	r1, [pc, #180]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
 8001d7e:	e01a      	b.n	8001db6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d80:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a2a      	ldr	r2, [pc, #168]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001d86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff f838 	bl	8000e00 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d94:	f7ff f834 	bl	8000e00 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e216      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x1e0>
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d041      	beq.n	8001e46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01c      	beq.n	8001e04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd0:	4a17      	ldr	r2, [pc, #92]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dda:	f7ff f811 	bl	8000e00 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de2:	f7ff f80d 	bl	8000e00 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e1ef      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0ef      	beq.n	8001de2 <HAL_RCC_OscConfig+0x22e>
 8001e02:	e020      	b.n	8001e46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0a:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <HAL_RCC_OscConfig+0x27c>)
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e14:	f7fe fff4 	bl	8000e00 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e1a:	e00d      	b.n	8001e38 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1c:	f7fe fff0 	bl	8000e00 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d906      	bls.n	8001e38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e1d2      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000
 8001e34:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e38:	4b8c      	ldr	r3, [pc, #560]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ea      	bne.n	8001e1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80a6 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e54:	2300      	movs	r3, #0
 8001e56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e58:	4b84      	ldr	r3, [pc, #528]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_OscConfig+0x2b4>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x2b6>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00d      	beq.n	8001e8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	4b7f      	ldr	r3, [pc, #508]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	4a7e      	ldr	r2, [pc, #504]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	6593      	str	r3, [r2, #88]	; 0x58
 8001e7a:	4b7c      	ldr	r3, [pc, #496]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e86:	2301      	movs	r3, #1
 8001e88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e8a:	4b79      	ldr	r3, [pc, #484]	; (8002070 <HAL_RCC_OscConfig+0x4bc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d118      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e96:	4b76      	ldr	r3, [pc, #472]	; (8002070 <HAL_RCC_OscConfig+0x4bc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a75      	ldr	r2, [pc, #468]	; (8002070 <HAL_RCC_OscConfig+0x4bc>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea2:	f7fe ffad 	bl	8000e00 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7fe ffa9 	bl	8000e00 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e18b      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ebc:	4b6c      	ldr	r3, [pc, #432]	; (8002070 <HAL_RCC_OscConfig+0x4bc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d108      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x32e>
 8001ed0:	4b66      	ldr	r3, [pc, #408]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed6:	4a65      	ldr	r2, [pc, #404]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ee0:	e024      	b.n	8001f2c <HAL_RCC_OscConfig+0x378>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b05      	cmp	r3, #5
 8001ee8:	d110      	bne.n	8001f0c <HAL_RCC_OscConfig+0x358>
 8001eea:	4b60      	ldr	r3, [pc, #384]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef0:	4a5e      	ldr	r2, [pc, #376]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001efa:	4b5c      	ldr	r3, [pc, #368]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f00:	4a5a      	ldr	r2, [pc, #360]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f0a:	e00f      	b.n	8001f2c <HAL_RCC_OscConfig+0x378>
 8001f0c:	4b57      	ldr	r3, [pc, #348]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	4a56      	ldr	r2, [pc, #344]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f1c:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f22:	4a52      	ldr	r2, [pc, #328]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d016      	beq.n	8001f62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7fe ff64 	bl	8000e00 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f7fe ff60 	bl	8000e00 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e140      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f52:	4b46      	ldr	r3, [pc, #280]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0ed      	beq.n	8001f3c <HAL_RCC_OscConfig+0x388>
 8001f60:	e015      	b.n	8001f8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7fe ff4d 	bl	8000e00 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7fe ff49 	bl	8000e00 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e129      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f80:	4b3a      	ldr	r3, [pc, #232]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1ed      	bne.n	8001f6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f8e:	7ffb      	ldrb	r3, [r7, #31]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d105      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f94:	4b35      	ldr	r3, [pc, #212]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	4a34      	ldr	r2, [pc, #208]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0320 	and.w	r3, r3, #32
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d03c      	beq.n	8002026 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01c      	beq.n	8001fee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fba:	4a2c      	ldr	r2, [pc, #176]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7fe ff1c 	bl	8000e00 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fcc:	f7fe ff18 	bl	8000e00 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e0fa      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fde:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001fe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0ef      	beq.n	8001fcc <HAL_RCC_OscConfig+0x418>
 8001fec:	e01b      	b.n	8002026 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fee:	4b1f      	ldr	r3, [pc, #124]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ff4:	4a1d      	ldr	r2, [pc, #116]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8001ff6:	f023 0301 	bic.w	r3, r3, #1
 8001ffa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffe:	f7fe feff 	bl	8000e00 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002006:	f7fe fefb 	bl	8000e00 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e0dd      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 800201a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1ef      	bne.n	8002006 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80d1 	beq.w	80021d2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b0c      	cmp	r3, #12
 800203a:	f000 808b 	beq.w	8002154 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d15e      	bne.n	8002104 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_RCC_OscConfig+0x4b8>)
 800204c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7fe fed5 	bl	8000e00 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002058:	e00c      	b.n	8002074 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205a:	f7fe fed1 	bl	8000e00 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d905      	bls.n	8002074 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e0b3      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
 800206c:	40021000 	.word	0x40021000
 8002070:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002074:	4b59      	ldr	r3, [pc, #356]	; (80021dc <HAL_RCC_OscConfig+0x628>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1ec      	bne.n	800205a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002080:	4b56      	ldr	r3, [pc, #344]	; (80021dc <HAL_RCC_OscConfig+0x628>)
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	4b56      	ldr	r3, [pc, #344]	; (80021e0 <HAL_RCC_OscConfig+0x62c>)
 8002086:	4013      	ands	r3, r2
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6a11      	ldr	r1, [r2, #32]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002090:	3a01      	subs	r2, #1
 8002092:	0112      	lsls	r2, r2, #4
 8002094:	4311      	orrs	r1, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800209a:	0212      	lsls	r2, r2, #8
 800209c:	4311      	orrs	r1, r2
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020a2:	0852      	lsrs	r2, r2, #1
 80020a4:	3a01      	subs	r2, #1
 80020a6:	0552      	lsls	r2, r2, #21
 80020a8:	4311      	orrs	r1, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020ae:	0852      	lsrs	r2, r2, #1
 80020b0:	3a01      	subs	r2, #1
 80020b2:	0652      	lsls	r2, r2, #25
 80020b4:	4311      	orrs	r1, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020ba:	06d2      	lsls	r2, r2, #27
 80020bc:	430a      	orrs	r2, r1
 80020be:	4947      	ldr	r1, [pc, #284]	; (80021dc <HAL_RCC_OscConfig+0x628>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c4:	4b45      	ldr	r3, [pc, #276]	; (80021dc <HAL_RCC_OscConfig+0x628>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a44      	ldr	r2, [pc, #272]	; (80021dc <HAL_RCC_OscConfig+0x628>)
 80020ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020d0:	4b42      	ldr	r3, [pc, #264]	; (80021dc <HAL_RCC_OscConfig+0x628>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a41      	ldr	r2, [pc, #260]	; (80021dc <HAL_RCC_OscConfig+0x628>)
 80020d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7fe fe90 	bl	8000e00 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e4:	f7fe fe8c 	bl	8000e00 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e06e      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f6:	4b39      	ldr	r3, [pc, #228]	; (80021dc <HAL_RCC_OscConfig+0x628>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x530>
 8002102:	e066      	b.n	80021d2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002104:	4b35      	ldr	r3, [pc, #212]	; (80021dc <HAL_RCC_OscConfig+0x628>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a34      	ldr	r2, [pc, #208]	; (80021dc <HAL_RCC_OscConfig+0x628>)
 800210a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800210e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002110:	4b32      	ldr	r3, [pc, #200]	; (80021dc <HAL_RCC_OscConfig+0x628>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4a31      	ldr	r2, [pc, #196]	; (80021dc <HAL_RCC_OscConfig+0x628>)
 8002116:	f023 0303 	bic.w	r3, r3, #3
 800211a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800211c:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_OscConfig+0x628>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4a2e      	ldr	r2, [pc, #184]	; (80021dc <HAL_RCC_OscConfig+0x628>)
 8002122:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7fe fe68 	bl	8000e00 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002134:	f7fe fe64 	bl	8000e00 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e046      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002146:	4b25      	ldr	r3, [pc, #148]	; (80021dc <HAL_RCC_OscConfig+0x628>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x580>
 8002152:	e03e      	b.n	80021d2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e039      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002160:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <HAL_RCC_OscConfig+0x628>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f003 0203 	and.w	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	429a      	cmp	r2, r3
 8002172:	d12c      	bne.n	80021ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	3b01      	subs	r3, #1
 8002180:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d123      	bne.n	80021ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d11b      	bne.n	80021ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d113      	bne.n	80021ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	085b      	lsrs	r3, r3, #1
 80021b2:	3b01      	subs	r3, #1
 80021b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d109      	bne.n	80021ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c4:	085b      	lsrs	r3, r3, #1
 80021c6:	3b01      	subs	r3, #1
 80021c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	019f800c 	.word	0x019f800c

080021e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e11e      	b.n	800243a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b91      	ldr	r3, [pc, #580]	; (8002444 <HAL_RCC_ClockConfig+0x260>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d910      	bls.n	800222c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b8e      	ldr	r3, [pc, #568]	; (8002444 <HAL_RCC_ClockConfig+0x260>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 020f 	bic.w	r2, r3, #15
 8002212:	498c      	ldr	r1, [pc, #560]	; (8002444 <HAL_RCC_ClockConfig+0x260>)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b8a      	ldr	r3, [pc, #552]	; (8002444 <HAL_RCC_ClockConfig+0x260>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e106      	b.n	800243a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d073      	beq.n	8002320 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b03      	cmp	r3, #3
 800223e:	d129      	bne.n	8002294 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002240:	4b81      	ldr	r3, [pc, #516]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0f4      	b.n	800243a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002250:	f000 f99e 	bl	8002590 <RCC_GetSysClockFreqFromPLLSource>
 8002254:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4a7c      	ldr	r2, [pc, #496]	; (800244c <HAL_RCC_ClockConfig+0x268>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d93f      	bls.n	80022de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800225e:	4b7a      	ldr	r3, [pc, #488]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002272:	2b00      	cmp	r3, #0
 8002274:	d033      	beq.n	80022de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800227a:	2b00      	cmp	r3, #0
 800227c:	d12f      	bne.n	80022de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800227e:	4b72      	ldr	r3, [pc, #456]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002286:	4a70      	ldr	r2, [pc, #448]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	e024      	b.n	80022de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d107      	bne.n	80022ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800229c:	4b6a      	ldr	r3, [pc, #424]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0c6      	b.n	800243a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ac:	4b66      	ldr	r3, [pc, #408]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0be      	b.n	800243a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80022bc:	f000 f8ce 	bl	800245c <HAL_RCC_GetSysClockFreq>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4a61      	ldr	r2, [pc, #388]	; (800244c <HAL_RCC_ClockConfig+0x268>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d909      	bls.n	80022de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022ca:	4b5f      	ldr	r3, [pc, #380]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022d2:	4a5d      	ldr	r2, [pc, #372]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 80022d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022de:	4b5a      	ldr	r3, [pc, #360]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f023 0203 	bic.w	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4957      	ldr	r1, [pc, #348]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f0:	f7fe fd86 	bl	8000e00 <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	e00a      	b.n	800230e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f8:	f7fe fd82 	bl	8000e00 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	; 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e095      	b.n	800243a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	4b4e      	ldr	r3, [pc, #312]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 020c 	and.w	r2, r3, #12
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	429a      	cmp	r2, r3
 800231e:	d1eb      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d023      	beq.n	8002374 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002338:	4b43      	ldr	r3, [pc, #268]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4a42      	ldr	r2, [pc, #264]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 800233e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002342:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002350:	4b3d      	ldr	r3, [pc, #244]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002358:	4a3b      	ldr	r2, [pc, #236]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 800235a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800235e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b39      	ldr	r3, [pc, #228]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4936      	ldr	r1, [pc, #216]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
 8002372:	e008      	b.n	8002386 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b80      	cmp	r3, #128	; 0x80
 8002378:	d105      	bne.n	8002386 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800237a:	4b33      	ldr	r3, [pc, #204]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	4a32      	ldr	r2, [pc, #200]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002380:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002384:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002386:	4b2f      	ldr	r3, [pc, #188]	; (8002444 <HAL_RCC_ClockConfig+0x260>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d21d      	bcs.n	80023d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <HAL_RCC_ClockConfig+0x260>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 020f 	bic.w	r2, r3, #15
 800239c:	4929      	ldr	r1, [pc, #164]	; (8002444 <HAL_RCC_ClockConfig+0x260>)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023a4:	f7fe fd2c 	bl	8000e00 <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ac:	f7fe fd28 	bl	8000e00 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e03b      	b.n	800243a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <HAL_RCC_ClockConfig+0x260>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d1ed      	bne.n	80023ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4917      	ldr	r1, [pc, #92]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	490f      	ldr	r1, [pc, #60]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800240e:	f000 f825 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8002412:	4602      	mov	r2, r0
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <HAL_RCC_ClockConfig+0x264>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	490c      	ldr	r1, [pc, #48]	; (8002450 <HAL_RCC_ClockConfig+0x26c>)
 8002420:	5ccb      	ldrb	r3, [r1, r3]
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <HAL_RCC_ClockConfig+0x270>)
 800242c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_RCC_ClockConfig+0x274>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fc98 	bl	8000d68 <HAL_InitTick>
 8002438:	4603      	mov	r3, r0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40022000 	.word	0x40022000
 8002448:	40021000 	.word	0x40021000
 800244c:	04c4b400 	.word	0x04c4b400
 8002450:	08004348 	.word	0x08004348
 8002454:	20000000 	.word	0x20000000
 8002458:	20000004 	.word	0x20000004

0800245c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002462:	4b2c      	ldr	r3, [pc, #176]	; (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b04      	cmp	r3, #4
 800246c:	d102      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800246e:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	e047      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002474:	4b27      	ldr	r3, [pc, #156]	; (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b08      	cmp	r3, #8
 800247e:	d102      	bne.n	8002486 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002480:	4b26      	ldr	r3, [pc, #152]	; (800251c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	e03e      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002486:	4b23      	ldr	r3, [pc, #140]	; (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b0c      	cmp	r3, #12
 8002490:	d136      	bne.n	8002500 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	3301      	adds	r3, #1
 80024a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d10c      	bne.n	80024ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024b0:	4a1a      	ldr	r2, [pc, #104]	; (800251c <HAL_RCC_GetSysClockFreq+0xc0>)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	4a16      	ldr	r2, [pc, #88]	; (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ba:	68d2      	ldr	r2, [r2, #12]
 80024bc:	0a12      	lsrs	r2, r2, #8
 80024be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	617b      	str	r3, [r7, #20]
      break;
 80024c8:	e00c      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024ca:	4a13      	ldr	r2, [pc, #76]	; (8002518 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	4a10      	ldr	r2, [pc, #64]	; (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d4:	68d2      	ldr	r2, [r2, #12]
 80024d6:	0a12      	lsrs	r2, r2, #8
 80024d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024dc:	fb02 f303 	mul.w	r3, r2, r3
 80024e0:	617b      	str	r3, [r7, #20]
      break;
 80024e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	0e5b      	lsrs	r3, r3, #25
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	3301      	adds	r3, #1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	e001      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002504:	693b      	ldr	r3, [r7, #16]
}
 8002506:	4618      	mov	r0, r3
 8002508:	371c      	adds	r7, #28
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	00f42400 	.word	0x00f42400
 800251c:	007a1200 	.word	0x007a1200

08002520 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_RCC_GetHCLKFreq+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000000 	.word	0x20000000

08002538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800253c:	f7ff fff0 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	0a1b      	lsrs	r3, r3, #8
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4904      	ldr	r1, [pc, #16]	; (8002560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800254e:	5ccb      	ldrb	r3, [r1, r3]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	08004358 	.word	0x08004358

08002564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002568:	f7ff ffda 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	0adb      	lsrs	r3, r3, #11
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4904      	ldr	r1, [pc, #16]	; (800258c <HAL_RCC_GetPCLK2Freq+0x28>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	08004358 	.word	0x08004358

08002590 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002596:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3301      	adds	r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d10c      	bne.n	80025ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025b4:	4a17      	ldr	r2, [pc, #92]	; (8002614 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025be:	68d2      	ldr	r2, [r2, #12]
 80025c0:	0a12      	lsrs	r2, r2, #8
 80025c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
    break;
 80025cc:	e00c      	b.n	80025e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4a0e      	ldr	r2, [pc, #56]	; (8002610 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	0a12      	lsrs	r2, r2, #8
 80025dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
    break;
 80025e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0e5b      	lsrs	r3, r3, #25
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002602:	687b      	ldr	r3, [r7, #4]
}
 8002604:	4618      	mov	r0, r3
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40021000 	.word	0x40021000
 8002614:	007a1200 	.word	0x007a1200
 8002618:	00f42400 	.word	0x00f42400

0800261c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002624:	2300      	movs	r3, #0
 8002626:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002628:	2300      	movs	r3, #0
 800262a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8098 	beq.w	800276a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263e:	4b43      	ldr	r3, [pc, #268]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10d      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	4b40      	ldr	r3, [pc, #256]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	4a3f      	ldr	r2, [pc, #252]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	6593      	str	r3, [r2, #88]	; 0x58
 8002656:	4b3d      	ldr	r3, [pc, #244]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002662:	2301      	movs	r3, #1
 8002664:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002666:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a39      	ldr	r2, [pc, #228]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800266c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002670:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002672:	f7fe fbc5 	bl	8000e00 <HAL_GetTick>
 8002676:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002678:	e009      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267a:	f7fe fbc1 	bl	8000e00 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d902      	bls.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	74fb      	strb	r3, [r7, #19]
        break;
 800268c:	e005      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800268e:	4b30      	ldr	r3, [pc, #192]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0ef      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d159      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026a0:	4b2a      	ldr	r3, [pc, #168]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d01e      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d019      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026c8:	4b20      	ldr	r3, [pc, #128]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ce:	4a1f      	ldr	r2, [pc, #124]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026d8:	4b1c      	ldr	r3, [pc, #112]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026de:	4a1b      	ldr	r2, [pc, #108]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026e8:	4a18      	ldr	r2, [pc, #96]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d016      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7fe fb81 	bl	8000e00 <HAL_GetTick>
 80026fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002700:	e00b      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7fe fb7d 	bl	8000e00 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d902      	bls.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	74fb      	strb	r3, [r7, #19]
            break;
 8002718:	e006      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0ec      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10b      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800272e:	4b07      	ldr	r3, [pc, #28]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	4903      	ldr	r1, [pc, #12]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002744:	e008      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	74bb      	strb	r3, [r7, #18]
 800274a:	e005      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002758:	7c7b      	ldrb	r3, [r7, #17]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d105      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4ba6      	ldr	r3, [pc, #664]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002762:	4aa5      	ldr	r2, [pc, #660]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002768:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002776:	4ba0      	ldr	r3, [pc, #640]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277c:	f023 0203 	bic.w	r2, r3, #3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	499c      	ldr	r1, [pc, #624]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002798:	4b97      	ldr	r3, [pc, #604]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f023 020c 	bic.w	r2, r3, #12
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	4994      	ldr	r1, [pc, #592]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ba:	4b8f      	ldr	r3, [pc, #572]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	498b      	ldr	r1, [pc, #556]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027dc:	4b86      	ldr	r3, [pc, #536]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	4983      	ldr	r1, [pc, #524]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027fe:	4b7e      	ldr	r3, [pc, #504]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002804:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	497a      	ldr	r1, [pc, #488]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002820:	4b75      	ldr	r3, [pc, #468]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	4972      	ldr	r1, [pc, #456]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002842:	4b6d      	ldr	r3, [pc, #436]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	4969      	ldr	r1, [pc, #420]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002864:	4b64      	ldr	r3, [pc, #400]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4961      	ldr	r1, [pc, #388]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002886:	4b5c      	ldr	r3, [pc, #368]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	4958      	ldr	r1, [pc, #352]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d015      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028a8:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	4950      	ldr	r1, [pc, #320]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028c6:	d105      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c8:	4b4b      	ldr	r3, [pc, #300]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a4a      	ldr	r2, [pc, #296]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d015      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028e0:	4b45      	ldr	r3, [pc, #276]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	4942      	ldr	r1, [pc, #264]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028fe:	d105      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002900:	4b3d      	ldr	r3, [pc, #244]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a3c      	ldr	r2, [pc, #240]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800290a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d015      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002918:	4b37      	ldr	r3, [pc, #220]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	4934      	ldr	r1, [pc, #208]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002936:	d105      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002938:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a2e      	ldr	r2, [pc, #184]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002942:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d015      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002950:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295e:	4926      	ldr	r1, [pc, #152]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800296e:	d105      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002970:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a20      	ldr	r2, [pc, #128]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800297a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d015      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002988:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	4918      	ldr	r1, [pc, #96]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a6:	d105      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d015      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029c0:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	490a      	ldr	r1, [pc, #40]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029de:	d105      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80029ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000

080029fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e049      	b.n	8002aa2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe f82a 	bl	8000a7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3304      	adds	r3, #4
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	f000 fa4a 	bl	8002ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d109      	bne.n	8002ad0 <HAL_TIM_PWM_Start+0x24>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	bf14      	ite	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	2300      	moveq	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e03c      	b.n	8002b4a <HAL_TIM_PWM_Start+0x9e>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d109      	bne.n	8002aea <HAL_TIM_PWM_Start+0x3e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	bf14      	ite	ne
 8002ae2:	2301      	movne	r3, #1
 8002ae4:	2300      	moveq	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	e02f      	b.n	8002b4a <HAL_TIM_PWM_Start+0x9e>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d109      	bne.n	8002b04 <HAL_TIM_PWM_Start+0x58>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	bf14      	ite	ne
 8002afc:	2301      	movne	r3, #1
 8002afe:	2300      	moveq	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e022      	b.n	8002b4a <HAL_TIM_PWM_Start+0x9e>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	d109      	bne.n	8002b1e <HAL_TIM_PWM_Start+0x72>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	bf14      	ite	ne
 8002b16:	2301      	movne	r3, #1
 8002b18:	2300      	moveq	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	e015      	b.n	8002b4a <HAL_TIM_PWM_Start+0x9e>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b10      	cmp	r3, #16
 8002b22:	d109      	bne.n	8002b38 <HAL_TIM_PWM_Start+0x8c>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	bf14      	ite	ne
 8002b30:	2301      	movne	r3, #1
 8002b32:	2300      	moveq	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e008      	b.n	8002b4a <HAL_TIM_PWM_Start+0x9e>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	bf14      	ite	ne
 8002b44:	2301      	movne	r3, #1
 8002b46:	2300      	moveq	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e097      	b.n	8002c82 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d104      	bne.n	8002b62 <HAL_TIM_PWM_Start+0xb6>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b60:	e023      	b.n	8002baa <HAL_TIM_PWM_Start+0xfe>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d104      	bne.n	8002b72 <HAL_TIM_PWM_Start+0xc6>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b70:	e01b      	b.n	8002baa <HAL_TIM_PWM_Start+0xfe>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d104      	bne.n	8002b82 <HAL_TIM_PWM_Start+0xd6>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b80:	e013      	b.n	8002baa <HAL_TIM_PWM_Start+0xfe>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b0c      	cmp	r3, #12
 8002b86:	d104      	bne.n	8002b92 <HAL_TIM_PWM_Start+0xe6>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b90:	e00b      	b.n	8002baa <HAL_TIM_PWM_Start+0xfe>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d104      	bne.n	8002ba2 <HAL_TIM_PWM_Start+0xf6>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba0:	e003      	b.n	8002baa <HAL_TIM_PWM_Start+0xfe>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	6839      	ldr	r1, [r7, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fd14 	bl	80035e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a33      	ldr	r2, [pc, #204]	; (8002c8c <HAL_TIM_PWM_Start+0x1e0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_TIM_PWM_Start+0x13e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a32      	ldr	r2, [pc, #200]	; (8002c90 <HAL_TIM_PWM_Start+0x1e4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00e      	beq.n	8002bea <HAL_TIM_PWM_Start+0x13e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a30      	ldr	r2, [pc, #192]	; (8002c94 <HAL_TIM_PWM_Start+0x1e8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d009      	beq.n	8002bea <HAL_TIM_PWM_Start+0x13e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a2f      	ldr	r2, [pc, #188]	; (8002c98 <HAL_TIM_PWM_Start+0x1ec>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_TIM_PWM_Start+0x13e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2d      	ldr	r2, [pc, #180]	; (8002c9c <HAL_TIM_PWM_Start+0x1f0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_TIM_PWM_Start+0x142>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_TIM_PWM_Start+0x144>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a20      	ldr	r2, [pc, #128]	; (8002c8c <HAL_TIM_PWM_Start+0x1e0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d018      	beq.n	8002c40 <HAL_TIM_PWM_Start+0x194>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c16:	d013      	beq.n	8002c40 <HAL_TIM_PWM_Start+0x194>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a20      	ldr	r2, [pc, #128]	; (8002ca0 <HAL_TIM_PWM_Start+0x1f4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00e      	beq.n	8002c40 <HAL_TIM_PWM_Start+0x194>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1f      	ldr	r2, [pc, #124]	; (8002ca4 <HAL_TIM_PWM_Start+0x1f8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d009      	beq.n	8002c40 <HAL_TIM_PWM_Start+0x194>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a17      	ldr	r2, [pc, #92]	; (8002c90 <HAL_TIM_PWM_Start+0x1e4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d004      	beq.n	8002c40 <HAL_TIM_PWM_Start+0x194>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a16      	ldr	r2, [pc, #88]	; (8002c94 <HAL_TIM_PWM_Start+0x1e8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d115      	bne.n	8002c6c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <HAL_TIM_PWM_Start+0x1fc>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	d015      	beq.n	8002c7e <HAL_TIM_PWM_Start+0x1d2>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c58:	d011      	beq.n	8002c7e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6a:	e008      	b.n	8002c7e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e000      	b.n	8002c80 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40012c00 	.word	0x40012c00
 8002c90:	40013400 	.word	0x40013400
 8002c94:	40014000 	.word	0x40014000
 8002c98:	40014400 	.word	0x40014400
 8002c9c:	40014800 	.word	0x40014800
 8002ca0:	40000400 	.word	0x40000400
 8002ca4:	40000800 	.word	0x40000800
 8002ca8:	00010007 	.word	0x00010007

08002cac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e0ff      	b.n	8002eca <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b14      	cmp	r3, #20
 8002cd6:	f200 80f0 	bhi.w	8002eba <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002cda:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002d35 	.word	0x08002d35
 8002ce4:	08002ebb 	.word	0x08002ebb
 8002ce8:	08002ebb 	.word	0x08002ebb
 8002cec:	08002ebb 	.word	0x08002ebb
 8002cf0:	08002d75 	.word	0x08002d75
 8002cf4:	08002ebb 	.word	0x08002ebb
 8002cf8:	08002ebb 	.word	0x08002ebb
 8002cfc:	08002ebb 	.word	0x08002ebb
 8002d00:	08002db7 	.word	0x08002db7
 8002d04:	08002ebb 	.word	0x08002ebb
 8002d08:	08002ebb 	.word	0x08002ebb
 8002d0c:	08002ebb 	.word	0x08002ebb
 8002d10:	08002df7 	.word	0x08002df7
 8002d14:	08002ebb 	.word	0x08002ebb
 8002d18:	08002ebb 	.word	0x08002ebb
 8002d1c:	08002ebb 	.word	0x08002ebb
 8002d20:	08002e39 	.word	0x08002e39
 8002d24:	08002ebb 	.word	0x08002ebb
 8002d28:	08002ebb 	.word	0x08002ebb
 8002d2c:	08002ebb 	.word	0x08002ebb
 8002d30:	08002e79 	.word	0x08002e79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f95a 	bl	8002ff4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0208 	orr.w	r2, r2, #8
 8002d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0204 	bic.w	r2, r2, #4
 8002d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6999      	ldr	r1, [r3, #24]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	619a      	str	r2, [r3, #24]
      break;
 8002d72:	e0a5      	b.n	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f9ca 	bl	8003114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6999      	ldr	r1, [r3, #24]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	021a      	lsls	r2, r3, #8
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	619a      	str	r2, [r3, #24]
      break;
 8002db4:	e084      	b.n	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fa33 	bl	8003228 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69da      	ldr	r2, [r3, #28]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0208 	orr.w	r2, r2, #8
 8002dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0204 	bic.w	r2, r2, #4
 8002de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69d9      	ldr	r1, [r3, #28]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	61da      	str	r2, [r3, #28]
      break;
 8002df4:	e064      	b.n	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fa9b 	bl	8003338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69da      	ldr	r2, [r3, #28]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69da      	ldr	r2, [r3, #28]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69d9      	ldr	r1, [r3, #28]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	021a      	lsls	r2, r3, #8
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	61da      	str	r2, [r3, #28]
      break;
 8002e36:	e043      	b.n	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fb04 	bl	800344c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0208 	orr.w	r2, r2, #8
 8002e52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0204 	bic.w	r2, r2, #4
 8002e62:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002e76:	e023      	b.n	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fb48 	bl	8003514 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	021a      	lsls	r2, r3, #8
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002eb8:	e002      	b.n	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8002ebe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop

08002ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a3c      	ldr	r2, [pc, #240]	; (8002fd8 <TIM_Base_SetConfig+0x104>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00f      	beq.n	8002f0c <TIM_Base_SetConfig+0x38>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef2:	d00b      	beq.n	8002f0c <TIM_Base_SetConfig+0x38>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a39      	ldr	r2, [pc, #228]	; (8002fdc <TIM_Base_SetConfig+0x108>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d007      	beq.n	8002f0c <TIM_Base_SetConfig+0x38>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a38      	ldr	r2, [pc, #224]	; (8002fe0 <TIM_Base_SetConfig+0x10c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d003      	beq.n	8002f0c <TIM_Base_SetConfig+0x38>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a37      	ldr	r2, [pc, #220]	; (8002fe4 <TIM_Base_SetConfig+0x110>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d108      	bne.n	8002f1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a2d      	ldr	r2, [pc, #180]	; (8002fd8 <TIM_Base_SetConfig+0x104>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01b      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2c:	d017      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a2a      	ldr	r2, [pc, #168]	; (8002fdc <TIM_Base_SetConfig+0x108>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a29      	ldr	r2, [pc, #164]	; (8002fe0 <TIM_Base_SetConfig+0x10c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00f      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a28      	ldr	r2, [pc, #160]	; (8002fe4 <TIM_Base_SetConfig+0x110>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00b      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a27      	ldr	r2, [pc, #156]	; (8002fe8 <TIM_Base_SetConfig+0x114>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a26      	ldr	r2, [pc, #152]	; (8002fec <TIM_Base_SetConfig+0x118>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d003      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a25      	ldr	r2, [pc, #148]	; (8002ff0 <TIM_Base_SetConfig+0x11c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d108      	bne.n	8002f70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <TIM_Base_SetConfig+0x104>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00f      	beq.n	8002fbc <TIM_Base_SetConfig+0xe8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a11      	ldr	r2, [pc, #68]	; (8002fe4 <TIM_Base_SetConfig+0x110>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00b      	beq.n	8002fbc <TIM_Base_SetConfig+0xe8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <TIM_Base_SetConfig+0x114>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d007      	beq.n	8002fbc <TIM_Base_SetConfig+0xe8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <TIM_Base_SetConfig+0x118>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d003      	beq.n	8002fbc <TIM_Base_SetConfig+0xe8>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <TIM_Base_SetConfig+0x11c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d103      	bne.n	8002fc4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	615a      	str	r2, [r3, #20]
}
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	40013400 	.word	0x40013400
 8002fe8:	40014000 	.word	0x40014000
 8002fec:	40014400 	.word	0x40014400
 8002ff0:	40014800 	.word	0x40014800

08002ff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f023 0201 	bic.w	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0303 	bic.w	r3, r3, #3
 800302e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f023 0302 	bic.w	r3, r3, #2
 8003040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a2c      	ldr	r2, [pc, #176]	; (8003100 <TIM_OC1_SetConfig+0x10c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00f      	beq.n	8003074 <TIM_OC1_SetConfig+0x80>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a2b      	ldr	r2, [pc, #172]	; (8003104 <TIM_OC1_SetConfig+0x110>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00b      	beq.n	8003074 <TIM_OC1_SetConfig+0x80>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a2a      	ldr	r2, [pc, #168]	; (8003108 <TIM_OC1_SetConfig+0x114>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d007      	beq.n	8003074 <TIM_OC1_SetConfig+0x80>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a29      	ldr	r2, [pc, #164]	; (800310c <TIM_OC1_SetConfig+0x118>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d003      	beq.n	8003074 <TIM_OC1_SetConfig+0x80>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a28      	ldr	r2, [pc, #160]	; (8003110 <TIM_OC1_SetConfig+0x11c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d10c      	bne.n	800308e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f023 0308 	bic.w	r3, r3, #8
 800307a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f023 0304 	bic.w	r3, r3, #4
 800308c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <TIM_OC1_SetConfig+0x10c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00f      	beq.n	80030b6 <TIM_OC1_SetConfig+0xc2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a1a      	ldr	r2, [pc, #104]	; (8003104 <TIM_OC1_SetConfig+0x110>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00b      	beq.n	80030b6 <TIM_OC1_SetConfig+0xc2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <TIM_OC1_SetConfig+0x114>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d007      	beq.n	80030b6 <TIM_OC1_SetConfig+0xc2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a18      	ldr	r2, [pc, #96]	; (800310c <TIM_OC1_SetConfig+0x118>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d003      	beq.n	80030b6 <TIM_OC1_SetConfig+0xc2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a17      	ldr	r2, [pc, #92]	; (8003110 <TIM_OC1_SetConfig+0x11c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d111      	bne.n	80030da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	621a      	str	r2, [r3, #32]
}
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40012c00 	.word	0x40012c00
 8003104:	40013400 	.word	0x40013400
 8003108:	40014000 	.word	0x40014000
 800310c:	40014400 	.word	0x40014400
 8003110:	40014800 	.word	0x40014800

08003114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	f023 0210 	bic.w	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800314e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f023 0320 	bic.w	r3, r3, #32
 8003162:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a28      	ldr	r2, [pc, #160]	; (8003214 <TIM_OC2_SetConfig+0x100>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d003      	beq.n	8003180 <TIM_OC2_SetConfig+0x6c>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a27      	ldr	r2, [pc, #156]	; (8003218 <TIM_OC2_SetConfig+0x104>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d10d      	bne.n	800319c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800319a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <TIM_OC2_SetConfig+0x100>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00f      	beq.n	80031c4 <TIM_OC2_SetConfig+0xb0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a1c      	ldr	r2, [pc, #112]	; (8003218 <TIM_OC2_SetConfig+0x104>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d00b      	beq.n	80031c4 <TIM_OC2_SetConfig+0xb0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a1b      	ldr	r2, [pc, #108]	; (800321c <TIM_OC2_SetConfig+0x108>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d007      	beq.n	80031c4 <TIM_OC2_SetConfig+0xb0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a1a      	ldr	r2, [pc, #104]	; (8003220 <TIM_OC2_SetConfig+0x10c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d003      	beq.n	80031c4 <TIM_OC2_SetConfig+0xb0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a19      	ldr	r2, [pc, #100]	; (8003224 <TIM_OC2_SetConfig+0x110>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d113      	bne.n	80031ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	621a      	str	r2, [r3, #32]
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40012c00 	.word	0x40012c00
 8003218:	40013400 	.word	0x40013400
 800321c:	40014000 	.word	0x40014000
 8003220:	40014400 	.word	0x40014400
 8003224:	40014800 	.word	0x40014800

08003228 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0303 	bic.w	r3, r3, #3
 8003262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a27      	ldr	r2, [pc, #156]	; (8003324 <TIM_OC3_SetConfig+0xfc>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d003      	beq.n	8003292 <TIM_OC3_SetConfig+0x6a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a26      	ldr	r2, [pc, #152]	; (8003328 <TIM_OC3_SetConfig+0x100>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d10d      	bne.n	80032ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <TIM_OC3_SetConfig+0xfc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00f      	beq.n	80032d6 <TIM_OC3_SetConfig+0xae>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <TIM_OC3_SetConfig+0x100>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00b      	beq.n	80032d6 <TIM_OC3_SetConfig+0xae>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a1a      	ldr	r2, [pc, #104]	; (800332c <TIM_OC3_SetConfig+0x104>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d007      	beq.n	80032d6 <TIM_OC3_SetConfig+0xae>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a19      	ldr	r2, [pc, #100]	; (8003330 <TIM_OC3_SetConfig+0x108>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d003      	beq.n	80032d6 <TIM_OC3_SetConfig+0xae>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a18      	ldr	r2, [pc, #96]	; (8003334 <TIM_OC3_SetConfig+0x10c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d113      	bne.n	80032fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	621a      	str	r2, [r3, #32]
}
 8003318:	bf00      	nop
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40012c00 	.word	0x40012c00
 8003328:	40013400 	.word	0x40013400
 800332c:	40014000 	.word	0x40014000
 8003330:	40014400 	.word	0x40014400
 8003334:	40014800 	.word	0x40014800

08003338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800336a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	031b      	lsls	r3, r3, #12
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a28      	ldr	r2, [pc, #160]	; (8003438 <TIM_OC4_SetConfig+0x100>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d003      	beq.n	80033a4 <TIM_OC4_SetConfig+0x6c>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a27      	ldr	r2, [pc, #156]	; (800343c <TIM_OC4_SetConfig+0x104>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d10d      	bne.n	80033c0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	031b      	lsls	r3, r3, #12
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <TIM_OC4_SetConfig+0x100>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00f      	beq.n	80033e8 <TIM_OC4_SetConfig+0xb0>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a1c      	ldr	r2, [pc, #112]	; (800343c <TIM_OC4_SetConfig+0x104>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00b      	beq.n	80033e8 <TIM_OC4_SetConfig+0xb0>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a1b      	ldr	r2, [pc, #108]	; (8003440 <TIM_OC4_SetConfig+0x108>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d007      	beq.n	80033e8 <TIM_OC4_SetConfig+0xb0>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a1a      	ldr	r2, [pc, #104]	; (8003444 <TIM_OC4_SetConfig+0x10c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <TIM_OC4_SetConfig+0xb0>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a19      	ldr	r2, [pc, #100]	; (8003448 <TIM_OC4_SetConfig+0x110>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d113      	bne.n	8003410 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033f6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	019b      	lsls	r3, r3, #6
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	019b      	lsls	r3, r3, #6
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	621a      	str	r2, [r3, #32]
}
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40013400 	.word	0x40013400
 8003440:	40014000 	.word	0x40014000
 8003444:	40014400 	.word	0x40014400
 8003448:	40014800 	.word	0x40014800

0800344c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003490:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	041b      	lsls	r3, r3, #16
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a17      	ldr	r2, [pc, #92]	; (8003500 <TIM_OC5_SetConfig+0xb4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00f      	beq.n	80034c6 <TIM_OC5_SetConfig+0x7a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a16      	ldr	r2, [pc, #88]	; (8003504 <TIM_OC5_SetConfig+0xb8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00b      	beq.n	80034c6 <TIM_OC5_SetConfig+0x7a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a15      	ldr	r2, [pc, #84]	; (8003508 <TIM_OC5_SetConfig+0xbc>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d007      	beq.n	80034c6 <TIM_OC5_SetConfig+0x7a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a14      	ldr	r2, [pc, #80]	; (800350c <TIM_OC5_SetConfig+0xc0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d003      	beq.n	80034c6 <TIM_OC5_SetConfig+0x7a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a13      	ldr	r2, [pc, #76]	; (8003510 <TIM_OC5_SetConfig+0xc4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d109      	bne.n	80034da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	621a      	str	r2, [r3, #32]
}
 80034f4:	bf00      	nop
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40012c00 	.word	0x40012c00
 8003504:	40013400 	.word	0x40013400
 8003508:	40014000 	.word	0x40014000
 800350c:	40014400 	.word	0x40014400
 8003510:	40014800 	.word	0x40014800

08003514 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800355a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	051b      	lsls	r3, r3, #20
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a18      	ldr	r2, [pc, #96]	; (80035cc <TIM_OC6_SetConfig+0xb8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00f      	beq.n	8003590 <TIM_OC6_SetConfig+0x7c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a17      	ldr	r2, [pc, #92]	; (80035d0 <TIM_OC6_SetConfig+0xbc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00b      	beq.n	8003590 <TIM_OC6_SetConfig+0x7c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a16      	ldr	r2, [pc, #88]	; (80035d4 <TIM_OC6_SetConfig+0xc0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d007      	beq.n	8003590 <TIM_OC6_SetConfig+0x7c>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <TIM_OC6_SetConfig+0xc4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_OC6_SetConfig+0x7c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a14      	ldr	r2, [pc, #80]	; (80035dc <TIM_OC6_SetConfig+0xc8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d109      	bne.n	80035a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003596:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	029b      	lsls	r3, r3, #10
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40012c00 	.word	0x40012c00
 80035d0:	40013400 	.word	0x40013400
 80035d4:	40014000 	.word	0x40014000
 80035d8:	40014400 	.word	0x40014400
 80035dc:	40014800 	.word	0x40014800

080035e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	2201      	movs	r2, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1a      	ldr	r2, [r3, #32]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	43db      	mvns	r3, r3
 8003602:	401a      	ands	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a1a      	ldr	r2, [r3, #32]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	fa01 f303 	lsl.w	r3, r1, r3
 8003618:	431a      	orrs	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	621a      	str	r2, [r3, #32]
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003640:	2302      	movs	r3, #2
 8003642:	e065      	b.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a2c      	ldr	r2, [pc, #176]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a2b      	ldr	r2, [pc, #172]	; (8003720 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d108      	bne.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800367e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003694:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1b      	ldr	r2, [pc, #108]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d018      	beq.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ba:	d013      	beq.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a18      	ldr	r2, [pc, #96]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00e      	beq.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a17      	ldr	r2, [pc, #92]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d009      	beq.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a12      	ldr	r2, [pc, #72]	; (8003720 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a13      	ldr	r2, [pc, #76]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d10c      	bne.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	40012c00 	.word	0x40012c00
 8003720:	40013400 	.word	0x40013400
 8003724:	40000400 	.word	0x40000400
 8003728:	40000800 	.word	0x40000800
 800372c:	40014000 	.word	0x40014000

08003730 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e042      	b.n	80037c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003748:	2b00      	cmp	r3, #0
 800374a:	d106      	bne.n	800375a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7fd fa1d 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2224      	movs	r2, #36	; 0x24
 800375e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f82c 	bl	80037d0 <UART_SetConfig>
 8003778:	4603      	mov	r3, r0
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e022      	b.n	80037c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 faec 	bl	8003d68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800379e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fb73 	bl	8003eac <UART_CheckIdleState>
 80037c6:	4603      	mov	r3, r0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037d4:	b08c      	sub	sp, #48	; 0x30
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4bab      	ldr	r3, [pc, #684]	; (8003aac <UART_SetConfig+0x2dc>)
 8003800:	4013      	ands	r3, r2
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003808:	430b      	orrs	r3, r1
 800380a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4aa0      	ldr	r2, [pc, #640]	; (8003ab0 <UART_SetConfig+0x2e0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003838:	4313      	orrs	r3, r2
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003846:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	6812      	ldr	r2, [r2, #0]
 800384e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003850:	430b      	orrs	r3, r1
 8003852:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	f023 010f 	bic.w	r1, r3, #15
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a91      	ldr	r2, [pc, #580]	; (8003ab4 <UART_SetConfig+0x2e4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d125      	bne.n	80038c0 <UART_SetConfig+0xf0>
 8003874:	4b90      	ldr	r3, [pc, #576]	; (8003ab8 <UART_SetConfig+0x2e8>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	2b03      	cmp	r3, #3
 8003880:	d81a      	bhi.n	80038b8 <UART_SetConfig+0xe8>
 8003882:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <UART_SetConfig+0xb8>)
 8003884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003888:	08003899 	.word	0x08003899
 800388c:	080038a9 	.word	0x080038a9
 8003890:	080038a1 	.word	0x080038a1
 8003894:	080038b1 	.word	0x080038b1
 8003898:	2301      	movs	r3, #1
 800389a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800389e:	e0d6      	b.n	8003a4e <UART_SetConfig+0x27e>
 80038a0:	2302      	movs	r3, #2
 80038a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038a6:	e0d2      	b.n	8003a4e <UART_SetConfig+0x27e>
 80038a8:	2304      	movs	r3, #4
 80038aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ae:	e0ce      	b.n	8003a4e <UART_SetConfig+0x27e>
 80038b0:	2308      	movs	r3, #8
 80038b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038b6:	e0ca      	b.n	8003a4e <UART_SetConfig+0x27e>
 80038b8:	2310      	movs	r3, #16
 80038ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038be:	e0c6      	b.n	8003a4e <UART_SetConfig+0x27e>
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a7d      	ldr	r2, [pc, #500]	; (8003abc <UART_SetConfig+0x2ec>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d138      	bne.n	800393c <UART_SetConfig+0x16c>
 80038ca:	4b7b      	ldr	r3, [pc, #492]	; (8003ab8 <UART_SetConfig+0x2e8>)
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b0c      	cmp	r3, #12
 80038d6:	d82d      	bhi.n	8003934 <UART_SetConfig+0x164>
 80038d8:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <UART_SetConfig+0x110>)
 80038da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038de:	bf00      	nop
 80038e0:	08003915 	.word	0x08003915
 80038e4:	08003935 	.word	0x08003935
 80038e8:	08003935 	.word	0x08003935
 80038ec:	08003935 	.word	0x08003935
 80038f0:	08003925 	.word	0x08003925
 80038f4:	08003935 	.word	0x08003935
 80038f8:	08003935 	.word	0x08003935
 80038fc:	08003935 	.word	0x08003935
 8003900:	0800391d 	.word	0x0800391d
 8003904:	08003935 	.word	0x08003935
 8003908:	08003935 	.word	0x08003935
 800390c:	08003935 	.word	0x08003935
 8003910:	0800392d 	.word	0x0800392d
 8003914:	2300      	movs	r3, #0
 8003916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800391a:	e098      	b.n	8003a4e <UART_SetConfig+0x27e>
 800391c:	2302      	movs	r3, #2
 800391e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003922:	e094      	b.n	8003a4e <UART_SetConfig+0x27e>
 8003924:	2304      	movs	r3, #4
 8003926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800392a:	e090      	b.n	8003a4e <UART_SetConfig+0x27e>
 800392c:	2308      	movs	r3, #8
 800392e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003932:	e08c      	b.n	8003a4e <UART_SetConfig+0x27e>
 8003934:	2310      	movs	r3, #16
 8003936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800393a:	e088      	b.n	8003a4e <UART_SetConfig+0x27e>
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a5f      	ldr	r2, [pc, #380]	; (8003ac0 <UART_SetConfig+0x2f0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d125      	bne.n	8003992 <UART_SetConfig+0x1c2>
 8003946:	4b5c      	ldr	r3, [pc, #368]	; (8003ab8 <UART_SetConfig+0x2e8>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003950:	2b30      	cmp	r3, #48	; 0x30
 8003952:	d016      	beq.n	8003982 <UART_SetConfig+0x1b2>
 8003954:	2b30      	cmp	r3, #48	; 0x30
 8003956:	d818      	bhi.n	800398a <UART_SetConfig+0x1ba>
 8003958:	2b20      	cmp	r3, #32
 800395a:	d00a      	beq.n	8003972 <UART_SetConfig+0x1a2>
 800395c:	2b20      	cmp	r3, #32
 800395e:	d814      	bhi.n	800398a <UART_SetConfig+0x1ba>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <UART_SetConfig+0x19a>
 8003964:	2b10      	cmp	r3, #16
 8003966:	d008      	beq.n	800397a <UART_SetConfig+0x1aa>
 8003968:	e00f      	b.n	800398a <UART_SetConfig+0x1ba>
 800396a:	2300      	movs	r3, #0
 800396c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003970:	e06d      	b.n	8003a4e <UART_SetConfig+0x27e>
 8003972:	2302      	movs	r3, #2
 8003974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003978:	e069      	b.n	8003a4e <UART_SetConfig+0x27e>
 800397a:	2304      	movs	r3, #4
 800397c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003980:	e065      	b.n	8003a4e <UART_SetConfig+0x27e>
 8003982:	2308      	movs	r3, #8
 8003984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003988:	e061      	b.n	8003a4e <UART_SetConfig+0x27e>
 800398a:	2310      	movs	r3, #16
 800398c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003990:	e05d      	b.n	8003a4e <UART_SetConfig+0x27e>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a4b      	ldr	r2, [pc, #300]	; (8003ac4 <UART_SetConfig+0x2f4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d125      	bne.n	80039e8 <UART_SetConfig+0x218>
 800399c:	4b46      	ldr	r3, [pc, #280]	; (8003ab8 <UART_SetConfig+0x2e8>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039a6:	2bc0      	cmp	r3, #192	; 0xc0
 80039a8:	d016      	beq.n	80039d8 <UART_SetConfig+0x208>
 80039aa:	2bc0      	cmp	r3, #192	; 0xc0
 80039ac:	d818      	bhi.n	80039e0 <UART_SetConfig+0x210>
 80039ae:	2b80      	cmp	r3, #128	; 0x80
 80039b0:	d00a      	beq.n	80039c8 <UART_SetConfig+0x1f8>
 80039b2:	2b80      	cmp	r3, #128	; 0x80
 80039b4:	d814      	bhi.n	80039e0 <UART_SetConfig+0x210>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <UART_SetConfig+0x1f0>
 80039ba:	2b40      	cmp	r3, #64	; 0x40
 80039bc:	d008      	beq.n	80039d0 <UART_SetConfig+0x200>
 80039be:	e00f      	b.n	80039e0 <UART_SetConfig+0x210>
 80039c0:	2300      	movs	r3, #0
 80039c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c6:	e042      	b.n	8003a4e <UART_SetConfig+0x27e>
 80039c8:	2302      	movs	r3, #2
 80039ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ce:	e03e      	b.n	8003a4e <UART_SetConfig+0x27e>
 80039d0:	2304      	movs	r3, #4
 80039d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039d6:	e03a      	b.n	8003a4e <UART_SetConfig+0x27e>
 80039d8:	2308      	movs	r3, #8
 80039da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039de:	e036      	b.n	8003a4e <UART_SetConfig+0x27e>
 80039e0:	2310      	movs	r3, #16
 80039e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039e6:	e032      	b.n	8003a4e <UART_SetConfig+0x27e>
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a30      	ldr	r2, [pc, #192]	; (8003ab0 <UART_SetConfig+0x2e0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d12a      	bne.n	8003a48 <UART_SetConfig+0x278>
 80039f2:	4b31      	ldr	r3, [pc, #196]	; (8003ab8 <UART_SetConfig+0x2e8>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a00:	d01a      	beq.n	8003a38 <UART_SetConfig+0x268>
 8003a02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a06:	d81b      	bhi.n	8003a40 <UART_SetConfig+0x270>
 8003a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a0c:	d00c      	beq.n	8003a28 <UART_SetConfig+0x258>
 8003a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a12:	d815      	bhi.n	8003a40 <UART_SetConfig+0x270>
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <UART_SetConfig+0x250>
 8003a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1c:	d008      	beq.n	8003a30 <UART_SetConfig+0x260>
 8003a1e:	e00f      	b.n	8003a40 <UART_SetConfig+0x270>
 8003a20:	2300      	movs	r3, #0
 8003a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a26:	e012      	b.n	8003a4e <UART_SetConfig+0x27e>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a2e:	e00e      	b.n	8003a4e <UART_SetConfig+0x27e>
 8003a30:	2304      	movs	r3, #4
 8003a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a36:	e00a      	b.n	8003a4e <UART_SetConfig+0x27e>
 8003a38:	2308      	movs	r3, #8
 8003a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a3e:	e006      	b.n	8003a4e <UART_SetConfig+0x27e>
 8003a40:	2310      	movs	r3, #16
 8003a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a46:	e002      	b.n	8003a4e <UART_SetConfig+0x27e>
 8003a48:	2310      	movs	r3, #16
 8003a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <UART_SetConfig+0x2e0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	f040 80a8 	bne.w	8003baa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d834      	bhi.n	8003acc <UART_SetConfig+0x2fc>
 8003a62:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <UART_SetConfig+0x298>)
 8003a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a68:	08003a8d 	.word	0x08003a8d
 8003a6c:	08003acd 	.word	0x08003acd
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003acd 	.word	0x08003acd
 8003a78:	08003a9b 	.word	0x08003a9b
 8003a7c:	08003acd 	.word	0x08003acd
 8003a80:	08003acd 	.word	0x08003acd
 8003a84:	08003acd 	.word	0x08003acd
 8003a88:	08003aa3 	.word	0x08003aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a8c:	f7fe fd54 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 8003a90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a92:	e021      	b.n	8003ad8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <UART_SetConfig+0x2f8>)
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a98:	e01e      	b.n	8003ad8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a9a:	f7fe fcdf 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8003a9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003aa0:	e01a      	b.n	8003ad8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003aa8:	e016      	b.n	8003ad8 <UART_SetConfig+0x308>
 8003aaa:	bf00      	nop
 8003aac:	cfff69f3 	.word	0xcfff69f3
 8003ab0:	40008000 	.word	0x40008000
 8003ab4:	40013800 	.word	0x40013800
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40004400 	.word	0x40004400
 8003ac0:	40004800 	.word	0x40004800
 8003ac4:	40004c00 	.word	0x40004c00
 8003ac8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ad6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 812a 	beq.w	8003d34 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	4a9e      	ldr	r2, [pc, #632]	; (8003d60 <UART_SetConfig+0x590>)
 8003ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aea:	461a      	mov	r2, r3
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	fbb3 f3f2 	udiv	r3, r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4413      	add	r3, r2
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d305      	bcc.n	8003b10 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d903      	bls.n	8003b18 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b16:	e10d      	b.n	8003d34 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	60fa      	str	r2, [r7, #12]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	4a8e      	ldr	r2, [pc, #568]	; (8003d60 <UART_SetConfig+0x590>)
 8003b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b3a:	f7fc fb6d 	bl	8000218 <__aeabi_uldivmod>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	020b      	lsls	r3, r1, #8
 8003b50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b54:	0202      	lsls	r2, r0, #8
 8003b56:	6979      	ldr	r1, [r7, #20]
 8003b58:	6849      	ldr	r1, [r1, #4]
 8003b5a:	0849      	lsrs	r1, r1, #1
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	460c      	mov	r4, r1
 8003b60:	4605      	mov	r5, r0
 8003b62:	eb12 0804 	adds.w	r8, r2, r4
 8003b66:	eb43 0905 	adc.w	r9, r3, r5
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	469a      	mov	sl, r3
 8003b72:	4693      	mov	fp, r2
 8003b74:	4652      	mov	r2, sl
 8003b76:	465b      	mov	r3, fp
 8003b78:	4640      	mov	r0, r8
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	f7fc fb4c 	bl	8000218 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4613      	mov	r3, r2
 8003b86:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b8e:	d308      	bcc.n	8003ba2 <UART_SetConfig+0x3d2>
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b96:	d204      	bcs.n	8003ba2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6a3a      	ldr	r2, [r7, #32]
 8003b9e:	60da      	str	r2, [r3, #12]
 8003ba0:	e0c8      	b.n	8003d34 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ba8:	e0c4      	b.n	8003d34 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb2:	d167      	bne.n	8003c84 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003bb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d828      	bhi.n	8003c0e <UART_SetConfig+0x43e>
 8003bbc:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <UART_SetConfig+0x3f4>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003be9 	.word	0x08003be9
 8003bc8:	08003bf1 	.word	0x08003bf1
 8003bcc:	08003bf9 	.word	0x08003bf9
 8003bd0:	08003c0f 	.word	0x08003c0f
 8003bd4:	08003bff 	.word	0x08003bff
 8003bd8:	08003c0f 	.word	0x08003c0f
 8003bdc:	08003c0f 	.word	0x08003c0f
 8003be0:	08003c0f 	.word	0x08003c0f
 8003be4:	08003c07 	.word	0x08003c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be8:	f7fe fca6 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 8003bec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bee:	e014      	b.n	8003c1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bf0:	f7fe fcb8 	bl	8002564 <HAL_RCC_GetPCLK2Freq>
 8003bf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bf6:	e010      	b.n	8003c1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf8:	4b5a      	ldr	r3, [pc, #360]	; (8003d64 <UART_SetConfig+0x594>)
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bfc:	e00d      	b.n	8003c1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfe:	f7fe fc2d 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8003c02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c04:	e009      	b.n	8003c1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c0c:	e005      	b.n	8003c1a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8089 	beq.w	8003d34 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	4a4e      	ldr	r2, [pc, #312]	; (8003d60 <UART_SetConfig+0x590>)
 8003c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c34:	005a      	lsls	r2, r3, #1
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	085b      	lsrs	r3, r3, #1
 8003c3c:	441a      	add	r2, r3
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	2b0f      	cmp	r3, #15
 8003c4c:	d916      	bls.n	8003c7c <UART_SetConfig+0x4ac>
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c54:	d212      	bcs.n	8003c7c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	f023 030f 	bic.w	r3, r3, #15
 8003c5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	085b      	lsrs	r3, r3, #1
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	8bfb      	ldrh	r3, [r7, #30]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	8bfa      	ldrh	r2, [r7, #30]
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	e05b      	b.n	8003d34 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c82:	e057      	b.n	8003d34 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d828      	bhi.n	8003cde <UART_SetConfig+0x50e>
 8003c8c:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <UART_SetConfig+0x4c4>)
 8003c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c92:	bf00      	nop
 8003c94:	08003cb9 	.word	0x08003cb9
 8003c98:	08003cc1 	.word	0x08003cc1
 8003c9c:	08003cc9 	.word	0x08003cc9
 8003ca0:	08003cdf 	.word	0x08003cdf
 8003ca4:	08003ccf 	.word	0x08003ccf
 8003ca8:	08003cdf 	.word	0x08003cdf
 8003cac:	08003cdf 	.word	0x08003cdf
 8003cb0:	08003cdf 	.word	0x08003cdf
 8003cb4:	08003cd7 	.word	0x08003cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb8:	f7fe fc3e 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 8003cbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cbe:	e014      	b.n	8003cea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cc0:	f7fe fc50 	bl	8002564 <HAL_RCC_GetPCLK2Freq>
 8003cc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cc6:	e010      	b.n	8003cea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc8:	4b26      	ldr	r3, [pc, #152]	; (8003d64 <UART_SetConfig+0x594>)
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ccc:	e00d      	b.n	8003cea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cce:	f7fe fbc5 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8003cd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cd4:	e009      	b.n	8003cea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cdc:	e005      	b.n	8003cea <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ce8:	bf00      	nop
    }

    if (pclk != 0U)
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d021      	beq.n	8003d34 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	4a1a      	ldr	r2, [pc, #104]	; (8003d60 <UART_SetConfig+0x590>)
 8003cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	085b      	lsrs	r3, r3, #1
 8003d08:	441a      	add	r2, r3
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	2b0f      	cmp	r3, #15
 8003d18:	d909      	bls.n	8003d2e <UART_SetConfig+0x55e>
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d20:	d205      	bcs.n	8003d2e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60da      	str	r2, [r3, #12]
 8003d2c:	e002      	b.n	8003d34 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2200      	movs	r2, #0
 8003d48:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003d50:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3730      	adds	r7, #48	; 0x30
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d5e:	bf00      	nop
 8003d60:	08004360 	.word	0x08004360
 8003d64:	00f42400 	.word	0x00f42400

08003d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01a      	beq.n	8003e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e66:	d10a      	bne.n	8003e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	605a      	str	r2, [r3, #4]
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ebc:	f7fc ffa0 	bl	8000e00 <HAL_GetTick>
 8003ec0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d10e      	bne.n	8003eee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ed0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f82f 	bl	8003f42 <UART_WaitOnFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e025      	b.n	8003f3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d10e      	bne.n	8003f1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003efc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f819 	bl	8003f42 <UART_WaitOnFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e00f      	b.n	8003f3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b09c      	sub	sp, #112	; 0x70
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	603b      	str	r3, [r7, #0]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f52:	e0a9      	b.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5a:	f000 80a5 	beq.w	80040a8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5e:	f7fc ff4f 	bl	8000e00 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d302      	bcc.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d140      	bne.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f88:	667b      	str	r3, [r7, #100]	; 0x64
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e6      	bne.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3308      	adds	r3, #8
 8003fac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	663b      	str	r3, [r7, #96]	; 0x60
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e5      	bne.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e069      	b.n	80040ca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d051      	beq.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800400e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004012:	d149      	bne.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800401c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004032:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403c:	637b      	str	r3, [r7, #52]	; 0x34
 800403e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e6      	bne.n	800401e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3308      	adds	r3, #8
 8004056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	613b      	str	r3, [r7, #16]
   return(result);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	66bb      	str	r3, [r7, #104]	; 0x68
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3308      	adds	r3, #8
 800406e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004070:	623a      	str	r2, [r7, #32]
 8004072:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	69f9      	ldr	r1, [r7, #28]
 8004076:	6a3a      	ldr	r2, [r7, #32]
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	61bb      	str	r3, [r7, #24]
   return(result);
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e5      	bne.n	8004050 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e010      	b.n	80040ca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69da      	ldr	r2, [r3, #28]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4013      	ands	r3, r2
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	f43f af46 	beq.w	8003f54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3770      	adds	r7, #112	; 0x70
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b085      	sub	sp, #20
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e027      	b.n	8004138 <HAL_UARTEx_DisableFifoMode+0x66>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2224      	movs	r2, #36	; 0x24
 80040f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0201 	bic.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004116:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004158:	2302      	movs	r3, #2
 800415a:	e02d      	b.n	80041b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2224      	movs	r2, #36	; 0x24
 8004168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0201 	bic.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f84f 	bl	800423c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e02d      	b.n	8004234 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2224      	movs	r2, #36	; 0x24
 80041e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0201 	bic.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f811 	bl	800423c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2220      	movs	r2, #32
 8004226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004248:	2b00      	cmp	r3, #0
 800424a:	d108      	bne.n	800425e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800425c:	e031      	b.n	80042c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800425e:	2308      	movs	r3, #8
 8004260:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004262:	2308      	movs	r3, #8
 8004264:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	0e5b      	lsrs	r3, r3, #25
 800426e:	b2db      	uxtb	r3, r3
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	0f5b      	lsrs	r3, r3, #29
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004286:	7bbb      	ldrb	r3, [r7, #14]
 8004288:	7b3a      	ldrb	r2, [r7, #12]
 800428a:	4911      	ldr	r1, [pc, #68]	; (80042d0 <UARTEx_SetNbDataToProcess+0x94>)
 800428c:	5c8a      	ldrb	r2, [r1, r2]
 800428e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004292:	7b3a      	ldrb	r2, [r7, #12]
 8004294:	490f      	ldr	r1, [pc, #60]	; (80042d4 <UARTEx_SetNbDataToProcess+0x98>)
 8004296:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004298:	fb93 f3f2 	sdiv	r3, r3, r2
 800429c:	b29a      	uxth	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	7b7a      	ldrb	r2, [r7, #13]
 80042a8:	4909      	ldr	r1, [pc, #36]	; (80042d0 <UARTEx_SetNbDataToProcess+0x94>)
 80042aa:	5c8a      	ldrb	r2, [r1, r2]
 80042ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80042b0:	7b7a      	ldrb	r2, [r7, #13]
 80042b2:	4908      	ldr	r1, [pc, #32]	; (80042d4 <UARTEx_SetNbDataToProcess+0x98>)
 80042b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	08004378 	.word	0x08004378
 80042d4:	08004380 	.word	0x08004380

080042d8 <__libc_init_array>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	4d0d      	ldr	r5, [pc, #52]	; (8004310 <__libc_init_array+0x38>)
 80042dc:	4c0d      	ldr	r4, [pc, #52]	; (8004314 <__libc_init_array+0x3c>)
 80042de:	1b64      	subs	r4, r4, r5
 80042e0:	10a4      	asrs	r4, r4, #2
 80042e2:	2600      	movs	r6, #0
 80042e4:	42a6      	cmp	r6, r4
 80042e6:	d109      	bne.n	80042fc <__libc_init_array+0x24>
 80042e8:	4d0b      	ldr	r5, [pc, #44]	; (8004318 <__libc_init_array+0x40>)
 80042ea:	4c0c      	ldr	r4, [pc, #48]	; (800431c <__libc_init_array+0x44>)
 80042ec:	f000 f820 	bl	8004330 <_init>
 80042f0:	1b64      	subs	r4, r4, r5
 80042f2:	10a4      	asrs	r4, r4, #2
 80042f4:	2600      	movs	r6, #0
 80042f6:	42a6      	cmp	r6, r4
 80042f8:	d105      	bne.n	8004306 <__libc_init_array+0x2e>
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004300:	4798      	blx	r3
 8004302:	3601      	adds	r6, #1
 8004304:	e7ee      	b.n	80042e4 <__libc_init_array+0xc>
 8004306:	f855 3b04 	ldr.w	r3, [r5], #4
 800430a:	4798      	blx	r3
 800430c:	3601      	adds	r6, #1
 800430e:	e7f2      	b.n	80042f6 <__libc_init_array+0x1e>
 8004310:	08004390 	.word	0x08004390
 8004314:	08004390 	.word	0x08004390
 8004318:	08004390 	.word	0x08004390
 800431c:	08004394 	.word	0x08004394

08004320 <memset>:
 8004320:	4402      	add	r2, r0
 8004322:	4603      	mov	r3, r0
 8004324:	4293      	cmp	r3, r2
 8004326:	d100      	bne.n	800432a <memset+0xa>
 8004328:	4770      	bx	lr
 800432a:	f803 1b01 	strb.w	r1, [r3], #1
 800432e:	e7f9      	b.n	8004324 <memset+0x4>

08004330 <_init>:
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	bf00      	nop
 8004334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004336:	bc08      	pop	{r3}
 8004338:	469e      	mov	lr, r3
 800433a:	4770      	bx	lr

0800433c <_fini>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	bf00      	nop
 8004340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004342:	bc08      	pop	{r3}
 8004344:	469e      	mov	lr, r3
 8004346:	4770      	bx	lr
