
TestController2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052f0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080054d0  080054d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005614  08005614  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005614  08005614  00015614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800561c  0800561c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800561c  0800561c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005620  08005620  00015620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000070  08005694  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08005694  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff1e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb2  00000000  00000000  0002ffbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00031f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  00032ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e41d  00000000  00000000  00033718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e11e  00000000  00000000  00051b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd642  00000000  00000000  0005fc53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d295  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aec  00000000  00000000  0011d2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080054b8 	.word	0x080054b8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080054b8 	.word	0x080054b8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	230a      	movs	r3, #10
 80005d6:	68b9      	ldr	r1, [r7, #8]
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <_write+0x24>)
 80005da:	f003 f847 	bl	800366c <HAL_UART_Transmit>
	return len;
 80005de:	687b      	ldr	r3, [r7, #4]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000f0 	.word	0x200000f0

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fe60 	bl	80012b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 fa8d 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fbcb 	bl	8000d94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 fb73 	bl	8000ce8 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000602:	f000 fad3 	bl	8000bac <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t TxData[1];
  uint8_t _TxData = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	76bb      	strb	r3, [r7, #26]

  printf("Initialized\r\n");
 800060a:	48c0      	ldr	r0, [pc, #768]	; (800090c <main+0x320>)
 800060c:	f003 ff00 	bl	8004410 <puts>
  uint8_t Flag1 = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	77fb      	strb	r3, [r7, #31]
  uint8_t Flag2 = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	77bb      	strb	r3, [r7, #30]
  uint8_t FlagL = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	777b      	strb	r3, [r7, #29]
  uint8_t FlagR = 1;
 800061c:	2301      	movs	r3, #1
 800061e:	773b      	strb	r3, [r7, #28]
  GPIO_PinState _inputs[11]={};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	f8c3 2007 	str.w	r2, [r3, #7]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  GPIO_PinState inputs[11]={
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0),
 800062e:	2101      	movs	r1, #1
 8000630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000634:	f001 ffea 	bl	800260c <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 800063a:	703b      	strb	r3, [r7, #0]
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1),
 800063c:	2102      	movs	r1, #2
 800063e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000642:	f001 ffe3 	bl	800260c <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 8000648:	707b      	strb	r3, [r7, #1]
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4),
 800064a:	2110      	movs	r1, #16
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f001 ffdc 	bl	800260c <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 8000656:	70bb      	strb	r3, [r7, #2]
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5),
 8000658:	2120      	movs	r1, #32
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f001 ffd5 	bl	800260c <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 8000664:	70fb      	strb	r3, [r7, #3]
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6),
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066c:	f001 ffce 	bl	800260c <HAL_GPIO_ReadPin>
 8000670:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 8000672:	713b      	strb	r3, [r7, #4]
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7),
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f001 ffc7 	bl	800260c <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 8000680:	717b      	strb	r3, [r7, #5]
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8),
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f001 ffbf 	bl	800260c <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 8000690:	71bb      	strb	r3, [r7, #6]
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9),
 8000692:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069a:	f001 ffb7 	bl	800260c <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 80006a0:	71fb      	strb	r3, [r7, #7]
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10),
 80006a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 ffaf 	bl	800260c <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 80006b0:	723b      	strb	r3, [r7, #8]
			  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0),
 80006b2:	2101      	movs	r1, #1
 80006b4:	4896      	ldr	r0, [pc, #600]	; (8000910 <main+0x324>)
 80006b6:	f001 ffa9 	bl	800260c <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 80006bc:	727b      	strb	r3, [r7, #9]
			  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)
 80006be:	2120      	movs	r1, #32
 80006c0:	4893      	ldr	r0, [pc, #588]	; (8000910 <main+0x324>)
 80006c2:	f001 ffa3 	bl	800260c <HAL_GPIO_ReadPin>
 80006c6:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 80006c8:	72bb      	strb	r3, [r7, #10]

	  };

	  for(uint8_t i=0; i<11; i++){
 80006ca:	2300      	movs	r3, #0
 80006cc:	76fb      	strb	r3, [r7, #27]
 80006ce:	e215      	b.n	8000afc <main+0x510>
		  if(inputs[i] != _inputs[i]){
 80006d0:	7efb      	ldrb	r3, [r7, #27]
 80006d2:	3320      	adds	r3, #32
 80006d4:	443b      	add	r3, r7
 80006d6:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 80006da:	7efb      	ldrb	r3, [r7, #27]
 80006dc:	3320      	adds	r3, #32
 80006de:	443b      	add	r3, r7
 80006e0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	f000 81e5 	beq.w	8000ab4 <main+0x4c8>
			  switch(i){
 80006ea:	7efb      	ldrb	r3, [r7, #27]
 80006ec:	2b0a      	cmp	r3, #10
 80006ee:	f200 81f8 	bhi.w	8000ae2 <main+0x4f6>
 80006f2:	a201      	add	r2, pc, #4	; (adr r2, 80006f8 <main+0x10c>)
 80006f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f8:	08000725 	.word	0x08000725
 80006fc:	0800075d 	.word	0x0800075d
 8000700:	080007cb 	.word	0x080007cb
 8000704:	08000839 	.word	0x08000839
 8000708:	08000871 	.word	0x08000871
 800070c:	080008bf 	.word	0x080008bf
 8000710:	0800091d 	.word	0x0800091d
 8000714:	0800098b 	.word	0x0800098b
 8000718:	080009c3 	.word	0x080009c3
 800071c:	08000a09 	.word	0x08000a09
 8000720:	08000a71 	.word	0x08000a71
			  case 0:
				  if(inputs[i]==GPIO_PIN_RESET){
 8000724:	7efb      	ldrb	r3, [r7, #27]
 8000726:	3320      	adds	r3, #32
 8000728:	443b      	add	r3, r7
 800072a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800072e:	2b00      	cmp	r3, #0
 8000730:	f040 81c2 	bne.w	8000ab8 <main+0x4cc>
					  TxHeader.Identifier = CANID_CYL_SET;
 8000734:	4b77      	ldr	r3, [pc, #476]	; (8000914 <main+0x328>)
 8000736:	f44f 728a 	mov.w	r2, #276	; 0x114
 800073a:	601a      	str	r2, [r3, #0]
					  TxData[0] = 7;
 800073c:	2307      	movs	r3, #7
 800073e:	763b      	strb	r3, [r7, #24]
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000740:	f107 0318 	add.w	r3, r7, #24
 8000744:	461a      	mov	r2, r3
 8000746:	4973      	ldr	r1, [pc, #460]	; (8000914 <main+0x328>)
 8000748:	4873      	ldr	r0, [pc, #460]	; (8000918 <main+0x32c>)
 800074a:	f001 f964 	bl	8001a16 <HAL_FDCAN_AddMessageToTxFifoQ>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	f000 81b1 	beq.w	8000ab8 <main+0x4cc>

							Error_Handler();
 8000756:	f000 fbc1 	bl	8000edc <Error_Handler>
					  }
				  }
				  //printf("Set\r\n");

				  break;
 800075a:	e1ad      	b.n	8000ab8 <main+0x4cc>


			  case 1:
				  if(inputs[i]==GPIO_PIN_RESET){
 800075c:	7efb      	ldrb	r3, [r7, #27]
 800075e:	3320      	adds	r3, #32
 8000760:	443b      	add	r3, r7
 8000762:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d113      	bne.n	8000792 <main+0x1a6>
					  TxHeader.Identifier = CANID_BAL_SPL_1;
 800076a:	4b6a      	ldr	r3, [pc, #424]	; (8000914 <main+0x328>)
 800076c:	f240 121b 	movw	r2, #283	; 0x11b
 8000770:	601a      	str	r2, [r3, #0]
					  TxData[0] = 7;
 8000772:	2307      	movs	r3, #7
 8000774:	763b      	strb	r3, [r7, #24]
					  //printf("BAL1 supply\r\n");
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000776:	f107 0318 	add.w	r3, r7, #24
 800077a:	461a      	mov	r2, r3
 800077c:	4965      	ldr	r1, [pc, #404]	; (8000914 <main+0x328>)
 800077e:	4866      	ldr	r0, [pc, #408]	; (8000918 <main+0x32c>)
 8000780:	f001 f949 	bl	8001a16 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	f000 8198 	beq.w	8000abc <main+0x4d0>

							Error_Handler();
 800078c:	f000 fba6 	bl	8000edc <Error_Handler>

							Error_Handler();
					  }
				  }

				  break;
 8000790:	e194      	b.n	8000abc <main+0x4d0>
				  else if(inputs[i] == GPIO_PIN_SET) {
 8000792:	7efb      	ldrb	r3, [r7, #27]
 8000794:	3320      	adds	r3, #32
 8000796:	443b      	add	r3, r7
 8000798:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800079c:	2b01      	cmp	r3, #1
 800079e:	f040 818d 	bne.w	8000abc <main+0x4d0>
					  TxHeader.Identifier = CANID_BAL_SPL_1;
 80007a2:	4b5c      	ldr	r3, [pc, #368]	; (8000914 <main+0x328>)
 80007a4:	f240 121b 	movw	r2, #283	; 0x11b
 80007a8:	601a      	str	r2, [r3, #0]
					  TxData[0] = 6;
 80007aa:	2306      	movs	r3, #6
 80007ac:	763b      	strb	r3, [r7, #24]
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80007ae:	f107 0318 	add.w	r3, r7, #24
 80007b2:	461a      	mov	r2, r3
 80007b4:	4957      	ldr	r1, [pc, #348]	; (8000914 <main+0x328>)
 80007b6:	4858      	ldr	r0, [pc, #352]	; (8000918 <main+0x32c>)
 80007b8:	f001 f92d 	bl	8001a16 <HAL_FDCAN_AddMessageToTxFifoQ>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f000 817c 	beq.w	8000abc <main+0x4d0>
							Error_Handler();
 80007c4:	f000 fb8a 	bl	8000edc <Error_Handler>
				  break;
 80007c8:	e178      	b.n	8000abc <main+0x4d0>


			  case 2:
				  if(inputs[i]==GPIO_PIN_RESET){
 80007ca:	7efb      	ldrb	r3, [r7, #27]
 80007cc:	3320      	adds	r3, #32
 80007ce:	443b      	add	r3, r7
 80007d0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d113      	bne.n	8000800 <main+0x214>
					  TxHeader.Identifier = CANID_BAL_SPL_2;
 80007d8:	4b4e      	ldr	r3, [pc, #312]	; (8000914 <main+0x328>)
 80007da:	f44f 728e 	mov.w	r2, #284	; 0x11c
 80007de:	601a      	str	r2, [r3, #0]
					  TxData[0] = 7;
 80007e0:	2307      	movs	r3, #7
 80007e2:	763b      	strb	r3, [r7, #24]
					  //printf("BAL2 Supply\r\n");
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80007e4:	f107 0318 	add.w	r3, r7, #24
 80007e8:	461a      	mov	r2, r3
 80007ea:	494a      	ldr	r1, [pc, #296]	; (8000914 <main+0x328>)
 80007ec:	484a      	ldr	r0, [pc, #296]	; (8000918 <main+0x32c>)
 80007ee:	f001 f912 	bl	8001a16 <HAL_FDCAN_AddMessageToTxFifoQ>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	f000 8163 	beq.w	8000ac0 <main+0x4d4>

							Error_Handler();
 80007fa:	f000 fb6f 	bl	8000edc <Error_Handler>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {

							Error_Handler();
					  }
				  }
				  break;
 80007fe:	e15f      	b.n	8000ac0 <main+0x4d4>
				  else if(inputs[i] == GPIO_PIN_SET) {
 8000800:	7efb      	ldrb	r3, [r7, #27]
 8000802:	3320      	adds	r3, #32
 8000804:	443b      	add	r3, r7
 8000806:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800080a:	2b01      	cmp	r3, #1
 800080c:	f040 8158 	bne.w	8000ac0 <main+0x4d4>
					  TxHeader.Identifier = CANID_BAL_SPL_2;
 8000810:	4b40      	ldr	r3, [pc, #256]	; (8000914 <main+0x328>)
 8000812:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8000816:	601a      	str	r2, [r3, #0]
					  TxData[0] = 6;
 8000818:	2306      	movs	r3, #6
 800081a:	763b      	strb	r3, [r7, #24]
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 800081c:	f107 0318 	add.w	r3, r7, #24
 8000820:	461a      	mov	r2, r3
 8000822:	493c      	ldr	r1, [pc, #240]	; (8000914 <main+0x328>)
 8000824:	483c      	ldr	r0, [pc, #240]	; (8000918 <main+0x32c>)
 8000826:	f001 f8f6 	bl	8001a16 <HAL_FDCAN_AddMessageToTxFifoQ>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	f000 8147 	beq.w	8000ac0 <main+0x4d4>
							Error_Handler();
 8000832:	f000 fb53 	bl	8000edc <Error_Handler>
				  break;
 8000836:	e143      	b.n	8000ac0 <main+0x4d4>


			  case 3:
				  if(inputs[i]==GPIO_PIN_RESET){
 8000838:	7efb      	ldrb	r3, [r7, #27]
 800083a:	3320      	adds	r3, #32
 800083c:	443b      	add	r3, r7
 800083e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000842:	2b00      	cmp	r3, #0
 8000844:	f040 813e 	bne.w	8000ac4 <main+0x4d8>
					  TxHeader.Identifier = CANID_CYL_PICK;
 8000848:	4b32      	ldr	r3, [pc, #200]	; (8000914 <main+0x328>)
 800084a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800084e:	601a      	str	r2, [r3, #0]
					  TxData[0] = 3;
 8000850:	2303      	movs	r3, #3
 8000852:	763b      	strb	r3, [r7, #24]

					  //printf("Pick\r\n");
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000854:	f107 0318 	add.w	r3, r7, #24
 8000858:	461a      	mov	r2, r3
 800085a:	492e      	ldr	r1, [pc, #184]	; (8000914 <main+0x328>)
 800085c:	482e      	ldr	r0, [pc, #184]	; (8000918 <main+0x32c>)
 800085e:	f001 f8da 	bl	8001a16 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	f000 812d 	beq.w	8000ac4 <main+0x4d8>

							Error_Handler();
 800086a:	f000 fb37 	bl	8000edc <Error_Handler>
					  }
				  }
				  break;
 800086e:	e129      	b.n	8000ac4 <main+0x4d8>


			  case 4:
				  if(inputs[i]==GPIO_PIN_RESET){
 8000870:	7efb      	ldrb	r3, [r7, #27]
 8000872:	3320      	adds	r3, #32
 8000874:	443b      	add	r3, r7
 8000876:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800087a:	2b00      	cmp	r3, #0
 800087c:	f040 8124 	bne.w	8000ac8 <main+0x4dc>
					  TxHeader.Identifier = CANID_LED;
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <main+0x328>)
 8000882:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8000886:	601a      	str	r2, [r3, #0]

					  if(FlagL==0)FlagL=1;
 8000888:	7f7b      	ldrb	r3, [r7, #29]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d102      	bne.n	8000894 <main+0x2a8>
 800088e:	2301      	movs	r3, #1
 8000890:	777b      	strb	r3, [r7, #29]
 8000892:	e004      	b.n	800089e <main+0x2b2>
					  else if(FlagL==1)FlagL=0;
 8000894:	7f7b      	ldrb	r3, [r7, #29]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d101      	bne.n	800089e <main+0x2b2>
 800089a:	2300      	movs	r3, #0
 800089c:	777b      	strb	r3, [r7, #29]

					  TxData[0] = FlagL;
 800089e:	7f7b      	ldrb	r3, [r7, #29]
 80008a0:	763b      	strb	r3, [r7, #24]
					  //printf("LED\r\n");
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	461a      	mov	r2, r3
 80008a8:	491a      	ldr	r1, [pc, #104]	; (8000914 <main+0x328>)
 80008aa:	481b      	ldr	r0, [pc, #108]	; (8000918 <main+0x32c>)
 80008ac:	f001 f8b3 	bl	8001a16 <HAL_FDCAN_AddMessageToTxFifoQ>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 8108 	beq.w	8000ac8 <main+0x4dc>

							Error_Handler();
 80008b8:	f000 fb10 	bl	8000edc <Error_Handler>
					  }
				  }
				  break;
 80008bc:	e104      	b.n	8000ac8 <main+0x4dc>


			  case 5:
				  if(inputs[i]==GPIO_PIN_RESET){
 80008be:	7efb      	ldrb	r3, [r7, #27]
 80008c0:	3320      	adds	r3, #32
 80008c2:	443b      	add	r3, r7
 80008c4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	f040 80ff 	bne.w	8000acc <main+0x4e0>
					  TxHeader.Identifier = CANID_CYL_RELEASE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <main+0x328>)
 80008d0:	f240 1219 	movw	r2, #281	; 0x119
 80008d4:	601a      	str	r2, [r3, #0]

					  if(FlagR==1)FlagR=2;
 80008d6:	7f3b      	ldrb	r3, [r7, #28]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d102      	bne.n	80008e2 <main+0x2f6>
 80008dc:	2302      	movs	r3, #2
 80008de:	773b      	strb	r3, [r7, #28]
 80008e0:	e004      	b.n	80008ec <main+0x300>
					  else if(FlagR==2)FlagR=1;
 80008e2:	7f3b      	ldrb	r3, [r7, #28]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d101      	bne.n	80008ec <main+0x300>
 80008e8:	2301      	movs	r3, #1
 80008ea:	773b      	strb	r3, [r7, #28]

					  TxData[0] = FlagR;
 80008ec:	7f3b      	ldrb	r3, [r7, #28]
 80008ee:	763b      	strb	r3, [r7, #24]
					  //printf("Release%d\r\n", FlagR);
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80008f0:	f107 0318 	add.w	r3, r7, #24
 80008f4:	461a      	mov	r2, r3
 80008f6:	4907      	ldr	r1, [pc, #28]	; (8000914 <main+0x328>)
 80008f8:	4807      	ldr	r0, [pc, #28]	; (8000918 <main+0x32c>)
 80008fa:	f001 f88c 	bl	8001a16 <HAL_FDCAN_AddMessageToTxFifoQ>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	f000 80e3 	beq.w	8000acc <main+0x4e0>

							Error_Handler();
 8000906:	f000 fae9 	bl	8000edc <Error_Handler>
					  }
				  }
				  break;
 800090a:	e0df      	b.n	8000acc <main+0x4e0>
 800090c:	080054d0 	.word	0x080054d0
 8000910:	48000400 	.word	0x48000400
 8000914:	20000180 	.word	0x20000180
 8000918:	2000008c 	.word	0x2000008c


			  case 6:
				  if(inputs[i]==GPIO_PIN_RESET){
 800091c:	7efb      	ldrb	r3, [r7, #27]
 800091e:	3320      	adds	r3, #32
 8000920:	443b      	add	r3, r7
 8000922:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d113      	bne.n	8000952 <main+0x366>
					  TxHeader.Identifier = CANID_BAL_DSC_2;
 800092a:	4b78      	ldr	r3, [pc, #480]	; (8000b0c <main+0x520>)
 800092c:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8000930:	601a      	str	r2, [r3, #0]
					  TxData[0] = 7;
 8000932:	2307      	movs	r3, #7
 8000934:	763b      	strb	r3, [r7, #24]

					  //printf("BAL2 Discharge\r\n");
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000936:	f107 0318 	add.w	r3, r7, #24
 800093a:	461a      	mov	r2, r3
 800093c:	4973      	ldr	r1, [pc, #460]	; (8000b0c <main+0x520>)
 800093e:	4874      	ldr	r0, [pc, #464]	; (8000b10 <main+0x524>)
 8000940:	f001 f869 	bl	8001a16 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	f000 80c2 	beq.w	8000ad0 <main+0x4e4>

							Error_Handler();
 800094c:	f000 fac6 	bl	8000edc <Error_Handler>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {

							Error_Handler();
					  }
				  }
				  break;
 8000950:	e0be      	b.n	8000ad0 <main+0x4e4>
				  else if(inputs[i] == GPIO_PIN_SET) {
 8000952:	7efb      	ldrb	r3, [r7, #27]
 8000954:	3320      	adds	r3, #32
 8000956:	443b      	add	r3, r7
 8000958:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800095c:	2b01      	cmp	r3, #1
 800095e:	f040 80b7 	bne.w	8000ad0 <main+0x4e4>
					  TxHeader.Identifier = CANID_BAL_DSC_2;
 8000962:	4b6a      	ldr	r3, [pc, #424]	; (8000b0c <main+0x520>)
 8000964:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8000968:	601a      	str	r2, [r3, #0]
					  TxData[0] = 6;
 800096a:	2306      	movs	r3, #6
 800096c:	763b      	strb	r3, [r7, #24]
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	461a      	mov	r2, r3
 8000974:	4965      	ldr	r1, [pc, #404]	; (8000b0c <main+0x520>)
 8000976:	4866      	ldr	r0, [pc, #408]	; (8000b10 <main+0x524>)
 8000978:	f001 f84d 	bl	8001a16 <HAL_FDCAN_AddMessageToTxFifoQ>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 80a6 	beq.w	8000ad0 <main+0x4e4>
							Error_Handler();
 8000984:	f000 faaa 	bl	8000edc <Error_Handler>
				  break;
 8000988:	e0a2      	b.n	8000ad0 <main+0x4e4>


			  case 7:
				  if(inputs[i]==GPIO_PIN_RESET){
 800098a:	7efb      	ldrb	r3, [r7, #27]
 800098c:	3320      	adds	r3, #32
 800098e:	443b      	add	r3, r7
 8000990:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000994:	2b00      	cmp	r3, #0
 8000996:	f040 809d 	bne.w	8000ad4 <main+0x4e8>
					  TxHeader.Identifier = CANID_CYL_THROW;
 800099a:	4b5c      	ldr	r3, [pc, #368]	; (8000b0c <main+0x520>)
 800099c:	f44f 7288 	mov.w	r2, #272	; 0x110
 80009a0:	601a      	str	r2, [r3, #0]
					  TxData[0] = 3;
 80009a2:	2303      	movs	r3, #3
 80009a4:	763b      	strb	r3, [r7, #24]
					  //printf("Throw\r\n");
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80009a6:	f107 0318 	add.w	r3, r7, #24
 80009aa:	461a      	mov	r2, r3
 80009ac:	4957      	ldr	r1, [pc, #348]	; (8000b0c <main+0x520>)
 80009ae:	4858      	ldr	r0, [pc, #352]	; (8000b10 <main+0x524>)
 80009b0:	f001 f831 	bl	8001a16 <HAL_FDCAN_AddMessageToTxFifoQ>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f000 808c 	beq.w	8000ad4 <main+0x4e8>

							Error_Handler();
 80009bc:	f000 fa8e 	bl	8000edc <Error_Handler>
					  }
				  }
				  break;
 80009c0:	e088      	b.n	8000ad4 <main+0x4e8>


			  case 8:
				  if(inputs[i]==GPIO_PIN_RESET){
 80009c2:	7efb      	ldrb	r3, [r7, #27]
 80009c4:	3320      	adds	r3, #32
 80009c6:	443b      	add	r3, r7
 80009c8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f040 8083 	bne.w	8000ad8 <main+0x4ec>
					  TxHeader.Identifier = CANID_CYL_BLARM_2;
 80009d2:	4b4e      	ldr	r3, [pc, #312]	; (8000b0c <main+0x520>)
 80009d4:	f240 1217 	movw	r2, #279	; 0x117
 80009d8:	601a      	str	r2, [r3, #0]
					  if(Flag2 == 1)Flag2=6;
 80009da:	7fbb      	ldrb	r3, [r7, #30]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d102      	bne.n	80009e6 <main+0x3fa>
 80009e0:	2306      	movs	r3, #6
 80009e2:	77bb      	strb	r3, [r7, #30]
 80009e4:	e001      	b.n	80009ea <main+0x3fe>
					  else Flag2=1;
 80009e6:	2301      	movs	r3, #1
 80009e8:	77bb      	strb	r3, [r7, #30]

					  TxData[0] = Flag2;
 80009ea:	7fbb      	ldrb	r3, [r7, #30]
 80009ec:	763b      	strb	r3, [r7, #24]

					  //printf("Arm2-%d\r\n",Flag2);
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80009ee:	f107 0318 	add.w	r3, r7, #24
 80009f2:	461a      	mov	r2, r3
 80009f4:	4945      	ldr	r1, [pc, #276]	; (8000b0c <main+0x520>)
 80009f6:	4846      	ldr	r0, [pc, #280]	; (8000b10 <main+0x524>)
 80009f8:	f001 f80d 	bl	8001a16 <HAL_FDCAN_AddMessageToTxFifoQ>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d06a      	beq.n	8000ad8 <main+0x4ec>

							Error_Handler();
 8000a02:	f000 fa6b 	bl	8000edc <Error_Handler>
					  }

				  }

				  break;
 8000a06:	e067      	b.n	8000ad8 <main+0x4ec>


			  case 9:
				  if(inputs[i]==GPIO_PIN_RESET){
 8000a08:	7efb      	ldrb	r3, [r7, #27]
 8000a0a:	3320      	adds	r3, #32
 8000a0c:	443b      	add	r3, r7
 8000a0e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d112      	bne.n	8000a3c <main+0x450>
					  TxHeader.Identifier = CANID_BAL_DSC_1;
 8000a16:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <main+0x520>)
 8000a18:	f240 121d 	movw	r2, #285	; 0x11d
 8000a1c:	601a      	str	r2, [r3, #0]
					  TxData[0] = 7;
 8000a1e:	2307      	movs	r3, #7
 8000a20:	763b      	strb	r3, [r7, #24]

					  //printf("BAL1 Discharge\r\n");
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000a22:	f107 0318 	add.w	r3, r7, #24
 8000a26:	461a      	mov	r2, r3
 8000a28:	4938      	ldr	r1, [pc, #224]	; (8000b0c <main+0x520>)
 8000a2a:	4839      	ldr	r0, [pc, #228]	; (8000b10 <main+0x524>)
 8000a2c:	f000 fff3 	bl	8001a16 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d052      	beq.n	8000adc <main+0x4f0>

							Error_Handler();
 8000a36:	f000 fa51 	bl	8000edc <Error_Handler>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {

							Error_Handler();
					  }
				  }
				  break;
 8000a3a:	e04f      	b.n	8000adc <main+0x4f0>
				  else if(inputs[i] == GPIO_PIN_SET) {
 8000a3c:	7efb      	ldrb	r3, [r7, #27]
 8000a3e:	3320      	adds	r3, #32
 8000a40:	443b      	add	r3, r7
 8000a42:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d148      	bne.n	8000adc <main+0x4f0>
					  TxHeader.Identifier = CANID_BAL_DSC_1;
 8000a4a:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <main+0x520>)
 8000a4c:	f240 121d 	movw	r2, #285	; 0x11d
 8000a50:	601a      	str	r2, [r3, #0]
					  TxData[0] = 6;
 8000a52:	2306      	movs	r3, #6
 8000a54:	763b      	strb	r3, [r7, #24]
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000a56:	f107 0318 	add.w	r3, r7, #24
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	492b      	ldr	r1, [pc, #172]	; (8000b0c <main+0x520>)
 8000a5e:	482c      	ldr	r0, [pc, #176]	; (8000b10 <main+0x524>)
 8000a60:	f000 ffd9 	bl	8001a16 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d038      	beq.n	8000adc <main+0x4f0>
							Error_Handler();
 8000a6a:	f000 fa37 	bl	8000edc <Error_Handler>
				  break;
 8000a6e:	e035      	b.n	8000adc <main+0x4f0>


			  case 10:

				  if(inputs[i]==GPIO_PIN_RESET){
 8000a70:	7efb      	ldrb	r3, [r7, #27]
 8000a72:	3320      	adds	r3, #32
 8000a74:	443b      	add	r3, r7
 8000a76:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d130      	bne.n	8000ae0 <main+0x4f4>
					  TxHeader.Identifier = CANID_CYL_BLARM_1;
 8000a7e:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <main+0x520>)
 8000a80:	f44f 728b 	mov.w	r2, #278	; 0x116
 8000a84:	601a      	str	r2, [r3, #0]
					  if(Flag1 == 1)Flag1=6;
 8000a86:	7ffb      	ldrb	r3, [r7, #31]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d102      	bne.n	8000a92 <main+0x4a6>
 8000a8c:	2306      	movs	r3, #6
 8000a8e:	77fb      	strb	r3, [r7, #31]
 8000a90:	e001      	b.n	8000a96 <main+0x4aa>
					  else Flag1=1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	77fb      	strb	r3, [r7, #31]
					  //printf("arm1-%d\r\n",Flag1);

					  TxData[0] = Flag1;
 8000a96:	7ffb      	ldrb	r3, [r7, #31]
 8000a98:	763b      	strb	r3, [r7, #24]
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000a9a:	f107 0318 	add.w	r3, r7, #24
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	491a      	ldr	r1, [pc, #104]	; (8000b0c <main+0x520>)
 8000aa2:	481b      	ldr	r0, [pc, #108]	; (8000b10 <main+0x524>)
 8000aa4:	f000 ffb7 	bl	8001a16 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d018      	beq.n	8000ae0 <main+0x4f4>

							Error_Handler();
 8000aae:	f000 fa15 	bl	8000edc <Error_Handler>
					  }

				  }
				  break;
 8000ab2:	e015      	b.n	8000ae0 <main+0x4f4>
			  }
		  }
 8000ab4:	bf00      	nop
 8000ab6:	e014      	b.n	8000ae2 <main+0x4f6>
				  break;
 8000ab8:	bf00      	nop
 8000aba:	e012      	b.n	8000ae2 <main+0x4f6>
				  break;
 8000abc:	bf00      	nop
 8000abe:	e010      	b.n	8000ae2 <main+0x4f6>
				  break;
 8000ac0:	bf00      	nop
 8000ac2:	e00e      	b.n	8000ae2 <main+0x4f6>
				  break;
 8000ac4:	bf00      	nop
 8000ac6:	e00c      	b.n	8000ae2 <main+0x4f6>
				  break;
 8000ac8:	bf00      	nop
 8000aca:	e00a      	b.n	8000ae2 <main+0x4f6>
				  break;
 8000acc:	bf00      	nop
 8000ace:	e008      	b.n	8000ae2 <main+0x4f6>
				  break;
 8000ad0:	bf00      	nop
 8000ad2:	e006      	b.n	8000ae2 <main+0x4f6>
				  break;
 8000ad4:	bf00      	nop
 8000ad6:	e004      	b.n	8000ae2 <main+0x4f6>
				  break;
 8000ad8:	bf00      	nop
 8000ada:	e002      	b.n	8000ae2 <main+0x4f6>
				  break;
 8000adc:	bf00      	nop
 8000ade:	e000      	b.n	8000ae2 <main+0x4f6>
				  break;
 8000ae0:	bf00      	nop
		  _inputs[i] = inputs[i];
 8000ae2:	7efa      	ldrb	r2, [r7, #27]
 8000ae4:	7efb      	ldrb	r3, [r7, #27]
 8000ae6:	3220      	adds	r2, #32
 8000ae8:	443a      	add	r2, r7
 8000aea:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000aee:	3320      	adds	r3, #32
 8000af0:	443b      	add	r3, r7
 8000af2:	f803 2c14 	strb.w	r2, [r3, #-20]
	  for(uint8_t i=0; i<11; i++){
 8000af6:	7efb      	ldrb	r3, [r7, #27]
 8000af8:	3301      	adds	r3, #1
 8000afa:	76fb      	strb	r3, [r7, #27]
 8000afc:	7efb      	ldrb	r3, [r7, #27]
 8000afe:	2b0a      	cmp	r3, #10
 8000b00:	f67f ade6 	bls.w	80006d0 <main+0xe4>

	  			Error_Handler();
	  		}
	  }*/

	  HAL_Delay(100);
 8000b04:	2064      	movs	r0, #100	; 0x64
 8000b06:	f000 fc47 	bl	8001398 <HAL_Delay>
  {
 8000b0a:	e590      	b.n	800062e <main+0x42>
 8000b0c:	20000180 	.word	0x20000180
 8000b10:	2000008c 	.word	0x2000008c

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b094      	sub	sp, #80	; 0x50
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0318 	add.w	r3, r7, #24
 8000b1e:	2238      	movs	r2, #56	; 0x38
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 fbe6 	bl	80042f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b3a:	f001 fd7f 	bl	800263c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b48:	2340      	movs	r3, #64	; 0x40
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b50:	2302      	movs	r3, #2
 8000b52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b54:	2301      	movs	r3, #1
 8000b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b58:	230a      	movs	r3, #10
 8000b5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b68:	f107 0318 	add.w	r3, r7, #24
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f001 fe09 	bl	8002784 <HAL_RCC_OscConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000b78:	f000 f9b0 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b80:	2303      	movs	r3, #3
 8000b82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2102      	movs	r1, #2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f002 f90d 	bl	8002db4 <HAL_RCC_ClockConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ba0:	f000 f99c 	bl	8000edc <Error_Handler>
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3750      	adds	r7, #80	; 0x50
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000bb2:	4b4a      	ldr	r3, [pc, #296]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000bb4:	4a4a      	ldr	r2, [pc, #296]	; (8000ce0 <MX_FDCAN1_Init+0x134>)
 8000bb6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000bb8:	4b48      	ldr	r3, [pc, #288]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bbe:	4b47      	ldr	r3, [pc, #284]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000bc4:	4b45      	ldr	r3, [pc, #276]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000bca:	4b44      	ldr	r3, [pc, #272]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000bd0:	4b42      	ldr	r3, [pc, #264]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000bd6:	4b41      	ldr	r3, [pc, #260]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000bdc:	4b3f      	ldr	r3, [pc, #252]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000bde:	2205      	movs	r2, #5
 8000be0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000be2:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000be4:	2210      	movs	r2, #16
 8000be6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000be8:	4b3c      	ldr	r3, [pc, #240]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000bea:	220d      	movs	r2, #13
 8000bec:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000bee:	4b3b      	ldr	r3, [pc, #236]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000bf4:	4b39      	ldr	r3, [pc, #228]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000bfa:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000c00:	4b36      	ldr	r3, [pc, #216]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000c02:	2205      	movs	r2, #5
 8000c04:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000c06:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000c08:	2204      	movs	r2, #4
 8000c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000c0c:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c12:	4b32      	ldr	r3, [pc, #200]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c18:	4b30      	ldr	r3, [pc, #192]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c1e:	482f      	ldr	r0, [pc, #188]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000c20:	f000 fcec 	bl	80015fc <HAL_FDCAN_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000c2a:	f000 f957 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <MX_FDCAN1_Init+0x138>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
  	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000c34:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <MX_FDCAN1_Init+0x138>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  	TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <MX_FDCAN1_Init+0x138>)
 8000c3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c40:	60da      	str	r2, [r3, #12]
  	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c42:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <MX_FDCAN1_Init+0x138>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000c48:	4b26      	ldr	r3, [pc, #152]	; (8000ce4 <MX_FDCAN1_Init+0x138>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000c4e:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <MX_FDCAN1_Init+0x138>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c54:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <MX_FDCAN1_Init+0x138>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  	TxHeader.MessageMarker = 0;
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_FDCAN1_Init+0x138>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  	TxHeader.Identifier = 0x210;
 8000c60:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <MX_FDCAN1_Init+0x138>)
 8000c62:	f44f 7204 	mov.w	r2, #528	; 0x210
 8000c66:	601a      	str	r2, [r3, #0]
  	FDCAN_FilterTypeDef sFilterConfig;
  		sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	603b      	str	r3, [r7, #0]
  		sFilterConfig.FilterIndex = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	607b      	str	r3, [r7, #4]
  		sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000c70:	2302      	movs	r3, #2
 8000c72:	60bb      	str	r3, [r7, #8]
  		sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000c74:	2301      	movs	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
  		sFilterConfig.FilterID1 = 0x000;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
  		sFilterConfig.FilterID2 = 0x000;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  		if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000c80:	463b      	mov	r3, r7
 8000c82:	4619      	mov	r1, r3
 8000c84:	4815      	ldr	r0, [pc, #84]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000c86:	f000 fe13 	bl	80018b0 <HAL_FDCAN_ConfigFilter>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_FDCAN1_Init+0xe8>
  			Error_Handler();
 8000c90:	f000 f924 	bl	8000edc <Error_Handler>
  		}
  		if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8000c94:	2300      	movs	r3, #0
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2300      	movs	r3, #0
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	480f      	ldr	r0, [pc, #60]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000ca0:	f000 fe60 	bl	8001964 <HAL_FDCAN_ConfigGlobalFilter>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_FDCAN1_Init+0x102>
  			Error_Handler();
 8000caa:	f000 f917 	bl	8000edc <Error_Handler>
  		}

  		if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000cae:	480b      	ldr	r0, [pc, #44]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000cb0:	f000 fe89 	bl	80019c6 <HAL_FDCAN_Start>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_FDCAN1_Init+0x112>
  			Error_Handler();
 8000cba:	f000 f90f 	bl	8000edc <Error_Handler>
  		}
  		if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_FDCAN1_Init+0x130>)
 8000cc4:	f000 ffc6 	bl	8001c54 <HAL_FDCAN_ActivateNotification>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_FDCAN1_Init+0x126>
  		  Error_Handler();
 8000cce:	f000 f905 	bl	8000edc <Error_Handler>
  		}


  /* USER CODE END FDCAN1_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000008c 	.word	0x2000008c
 8000ce0:	40006400 	.word	0x40006400
 8000ce4:	20000180 	.word	0x20000180

08000ce8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cec:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <MX_USART2_UART_Init+0xa0>)
 8000cee:	4a27      	ldr	r2, [pc, #156]	; (8000d8c <MX_USART2_UART_Init+0xa4>)
 8000cf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cf2:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <MX_USART2_UART_Init+0xa0>)
 8000cf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfa:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <MX_USART2_UART_Init+0xa0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d00:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <MX_USART2_UART_Init+0xa0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <MX_USART2_UART_Init+0xa0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_USART2_UART_Init+0xa0>)
 8000d0e:	220c      	movs	r2, #12
 8000d10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_USART2_UART_Init+0xa0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_USART2_UART_Init+0xa0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_USART2_UART_Init+0xa0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <MX_USART2_UART_Init+0xa0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <MX_USART2_UART_Init+0xa0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d30:	4815      	ldr	r0, [pc, #84]	; (8000d88 <MX_USART2_UART_Init+0xa0>)
 8000d32:	f002 fc4b 	bl	80035cc <HAL_UART_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d3c:	f000 f8ce 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d40:	2100      	movs	r1, #0
 8000d42:	4811      	ldr	r0, [pc, #68]	; (8000d88 <MX_USART2_UART_Init+0xa0>)
 8000d44:	f003 f9e2 	bl	800410c <HAL_UARTEx_SetTxFifoThreshold>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d4e:	f000 f8c5 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d52:	2100      	movs	r1, #0
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <MX_USART2_UART_Init+0xa0>)
 8000d56:	f003 fa17 	bl	8004188 <HAL_UARTEx_SetRxFifoThreshold>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d60:	f000 f8bc 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d64:	4808      	ldr	r0, [pc, #32]	; (8000d88 <MX_USART2_UART_Init+0xa0>)
 8000d66:	f003 f998 	bl	800409a <HAL_UARTEx_DisableFifoMode>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d70:	f000 f8b4 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  setbuf(stdout, NULL);
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_USART2_UART_Init+0xa8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f003 fb4f 	bl	8004420 <setbuf>

  /* USER CODE END USART2_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200000f0 	.word	0x200000f0
 8000d8c:	40004400 	.word	0x40004400
 8000d90:	2000000c 	.word	0x2000000c

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_GPIO_Init+0x84>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4a1a      	ldr	r2, [pc, #104]	; (8000e18 <MX_GPIO_Init+0x84>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_GPIO_Init+0x84>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_GPIO_Init+0x84>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <MX_GPIO_Init+0x84>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <MX_GPIO_Init+0x84>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000dda:	f240 73f3 	movw	r3, #2035	; 0x7f3
 8000dde:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4619      	mov	r1, r3
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f001 fa89 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000df6:	2321      	movs	r3, #33	; 0x21
 8000df8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	4619      	mov	r1, r3
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <MX_GPIO_Init+0x88>)
 8000e0a:	f001 fa7d 	bl	8002308 <HAL_GPIO_Init>

}
 8000e0e:	bf00      	nop
 8000e10:	3720      	adds	r7, #32
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	48000400 	.word	0x48000400

08000e20 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b092      	sub	sp, #72	; 0x48
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	uint16_t PBattVol, CBattVol, AirPress;
	uint8_t RxData[8];
	if(hfdcan==&hfdcan1){
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a27      	ldr	r2, [pc, #156]	; (8000ecc <HAL_FDCAN_RxFifo0Callback+0xac>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d147      	bne.n	8000ec2 <HAL_FDCAN_RxFifo0Callback+0xa2>
		//printf("get message!!\r\n");
		uint8_t RxData[8]={};
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
 8000e36:	2300      	movs	r3, #0
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34
		FDCAN_RxHeaderTypeDef RxHeader;
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000e3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e3e:	f107 0208 	add.w	r2, r7, #8
 8000e42:	2140      	movs	r1, #64	; 0x40
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 fe2b 	bl	8001aa0 <HAL_FDCAN_GetRxMessage>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_FDCAN_RxFifo0Callback+0x34>
			Error_Handler();
 8000e50:	f000 f844 	bl	8000edc <Error_Handler>
		}
		if(RxHeader.Identifier == 0x700){
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000e5a:	d132      	bne.n	8000ec2 <HAL_FDCAN_RxFifo0Callback+0xa2>
			PBattVol = RxData[0]<<8 | RxData[1];
 8000e5c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			CBattVol = RxData[2]<<8 | RxData[3];
 8000e72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000e76:	021b      	lsls	r3, r3, #8
 8000e78:	b21a      	sxth	r2, r3
 8000e7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b21b      	sxth	r3, r3
 8000e84:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			AirPress = RxData[4]<<8 | RxData[5];
 8000e88:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b21a      	sxth	r2, r3
 8000e90:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	4313      	orrs	r3, r2
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			printf("Power Battery Vol: %d\r\n", PBattVol);
 8000e9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8000ea6:	f003 fa2d 	bl	8004304 <iprintf>
			printf("Controller Battery Vol: %d\r\n", CBattVol);
 8000eaa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4808      	ldr	r0, [pc, #32]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8000eb2:	f003 fa27 	bl	8004304 <iprintf>
			printf("Air Pressure: %d\r\n", AirPress);
 8000eb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8000ebe:	f003 fa21 	bl	8004304 <iprintf>

		}
	}
}
 8000ec2:	bf00      	nop
 8000ec4:	3748      	adds	r7, #72	; 0x48
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2000008c 	.word	0x2000008c
 8000ed0:	080054e0 	.word	0x080054e0
 8000ed4:	080054f8 	.word	0x080054f8
 8000ed8:	08005518 	.word	0x08005518

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_MspInit+0x44>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_MspInit+0x44>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6613      	str	r3, [r2, #96]	; 0x60
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_MspInit+0x44>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_MspInit+0x44>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_MspInit+0x44>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	6593      	str	r3, [r2, #88]	; 0x58
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_MspInit+0x44>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b09a      	sub	sp, #104	; 0x68
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	2244      	movs	r2, #68	; 0x44
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 f9cf 	bl	80042f4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a28      	ldr	r2, [pc, #160]	; (8000ffc <HAL_FDCAN_MspInit+0xcc>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d149      	bne.n	8000ff4 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f64:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f6a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 f93b 	bl	80031ec <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000f7c:	f7ff ffae 	bl	8000edc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <HAL_FDCAN_MspInit+0xd0>)
 8000f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f84:	4a1e      	ldr	r2, [pc, #120]	; (8001000 <HAL_FDCAN_MspInit+0xd0>)
 8000f86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <HAL_FDCAN_MspInit+0xd0>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_FDCAN_MspInit+0xd0>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	4a18      	ldr	r2, [pc, #96]	; (8001000 <HAL_FDCAN_MspInit+0xd0>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_FDCAN_MspInit+0xd0>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fb0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fb4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000fc2:	2309      	movs	r3, #9
 8000fc4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd0:	f001 f99a 	bl	8002308 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2015      	movs	r0, #21
 8000fda:	f000 fada 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000fde:	2015      	movs	r0, #21
 8000fe0:	f000 faf1 	bl	80015c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2016      	movs	r0, #22
 8000fea:	f000 fad2 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000fee:	2016      	movs	r0, #22
 8000ff0:	f000 fae9 	bl	80015c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3768      	adds	r7, #104	; 0x68
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40006400 	.word	0x40006400
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b09a      	sub	sp, #104	; 0x68
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	2244      	movs	r2, #68	; 0x44
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f003 f965 	bl	80042f4 <memset>
  if(huart->Instance==USART2)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a1f      	ldr	r2, [pc, #124]	; (80010ac <HAL_UART_MspInit+0xa8>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d136      	bne.n	80010a2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001034:	2302      	movs	r3, #2
 8001036:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4618      	mov	r0, r3
 8001042:	f002 f8d3 	bl	80031ec <HAL_RCCEx_PeriphCLKConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800104c:	f7ff ff46 	bl	8000edc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_UART_MspInit+0xac>)
 8001052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001054:	4a16      	ldr	r2, [pc, #88]	; (80010b0 <HAL_UART_MspInit+0xac>)
 8001056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105a:	6593      	str	r3, [r2, #88]	; 0x58
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_UART_MspInit+0xac>)
 800105e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_UART_MspInit+0xac>)
 800106a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106c:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <HAL_UART_MspInit+0xac>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_UART_MspInit+0xac>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001080:	230c      	movs	r3, #12
 8001082:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001090:	2307      	movs	r3, #7
 8001092:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109e:	f001 f933 	bl	8002308 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010a2:	bf00      	nop
 80010a4:	3768      	adds	r7, #104	; 0x68
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40004400 	.word	0x40004400
 80010b0:	40021000 	.word	0x40021000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler+0x4>

080010ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <MemManage_Handler+0x4>

080010c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001100:	f000 f92c 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <FDCAN1_IT0_IRQHandler+0x10>)
 800110e:	f000 fe87 	bl	8001e20 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000008c 	.word	0x2000008c

0800111c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <FDCAN1_IT1_IRQHandler+0x10>)
 8001122:	f000 fe7d 	bl	8001e20 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000008c 	.word	0x2000008c

08001130 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	e00a      	b.n	8001158 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001142:	f3af 8000 	nop.w
 8001146:	4601      	mov	r1, r0
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	60ba      	str	r2, [r7, #8]
 800114e:	b2ca      	uxtb	r2, r1
 8001150:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3301      	adds	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	429a      	cmp	r2, r3
 800115e:	dbf0      	blt.n	8001142 <_read+0x12>
	}

return len;
 8001160:	687b      	ldr	r3, [r7, #4]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <_close>:
	}
	return len;
}

int _close(int file)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
	return -1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001192:	605a      	str	r2, [r3, #4]
	return 0;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <_isatty>:

int _isatty(int file)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
	return 1;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
	return 0;
 80011c4:	2300      	movs	r3, #0
	}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <_sbrk+0x5c>)
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <_sbrk+0x60>)
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <_sbrk+0x64>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <_sbrk+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	429a      	cmp	r2, r3
 8001202:	d207      	bcs.n	8001214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001204:	f003 f84c 	bl	80042a0 <__errno>
 8001208:	4603      	mov	r3, r0
 800120a:	220c      	movs	r2, #12
 800120c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	e009      	b.n	8001228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <_sbrk+0x64>)
 8001224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20008000 	.word	0x20008000
 8001234:	00000400 	.word	0x00000400
 8001238:	200001a4 	.word	0x200001a4
 800123c:	200001c0 	.word	0x200001c0

08001240 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <SystemInit+0x20>)
 8001246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <SystemInit+0x20>)
 800124c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001264:	480d      	ldr	r0, [pc, #52]	; (800129c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001266:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800126a:	490e      	ldr	r1, [pc, #56]	; (80012a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <LoopForever+0xe>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001280:	4c0b      	ldr	r4, [pc, #44]	; (80012b0 <LoopForever+0x16>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800128e:	f7ff ffd7 	bl	8001240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001292:	f003 f80b 	bl	80042ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001296:	f7ff f9a9 	bl	80005ec <main>

0800129a <LoopForever>:

LoopForever:
    b LoopForever
 800129a:	e7fe      	b.n	800129a <LoopForever>
  ldr   r0, =_estack
 800129c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012a8:	08005624 	.word	0x08005624
  ldr r2, =_sbss
 80012ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012b0:	200001bc 	.word	0x200001bc

080012b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC1_2_IRQHandler>

080012b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 f95b 	bl	800157c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 f80e 	bl	80012e8 <HAL_InitTick>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	71fb      	strb	r3, [r7, #7]
 80012d6:	e001      	b.n	80012dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012d8:	f7ff fe06 	bl	8000ee8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012dc:	79fb      	ldrb	r3, [r7, #7]

}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_InitTick+0x68>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d022      	beq.n	8001342 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_InitTick+0x6c>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_InitTick+0x68>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001308:	fbb1 f3f3 	udiv	r3, r1, r3
 800130c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f966 	bl	80015e2 <HAL_SYSTICK_Config>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10f      	bne.n	800133c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b0f      	cmp	r3, #15
 8001320:	d809      	bhi.n	8001336 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001322:	2200      	movs	r2, #0
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	f04f 30ff 	mov.w	r0, #4294967295
 800132a:	f000 f932 	bl	8001592 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_InitTick+0x70>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e007      	b.n	8001346 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	e004      	b.n	8001346 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	e001      	b.n	8001346 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000008 	.word	0x20000008
 8001354:	20000000 	.word	0x20000000
 8001358:	20000004 	.word	0x20000004

0800135c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_IncTick+0x1c>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x20>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4413      	add	r3, r2
 800136a:	4a03      	ldr	r2, [pc, #12]	; (8001378 <HAL_IncTick+0x1c>)
 800136c:	6013      	str	r3, [r2, #0]
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	200001a8 	.word	0x200001a8
 800137c:	20000008 	.word	0x20000008

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	200001a8 	.word	0x200001a8

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff ffee 	bl	8001380 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d004      	beq.n	80013bc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_Delay+0x40>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	4413      	add	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013bc:	bf00      	nop
 80013be:	f7ff ffdf 	bl	8001380 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d8f7      	bhi.n	80013be <HAL_Delay+0x26>
  {
  }
}
 80013ce:	bf00      	nop
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000008 	.word	0x20000008

080013dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	db0b      	blt.n	800146a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	f003 021f 	and.w	r2, r3, #31
 8001458:	4907      	ldr	r1, [pc, #28]	; (8001478 <__NVIC_EnableIRQ+0x38>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	2001      	movs	r0, #1
 8001462:	fa00 f202 	lsl.w	r2, r0, r2
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000e100 	.word	0xe000e100

0800147c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	db0a      	blt.n	80014a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	490c      	ldr	r1, [pc, #48]	; (80014c8 <__NVIC_SetPriority+0x4c>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	0112      	lsls	r2, r2, #4
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	440b      	add	r3, r1
 80014a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a4:	e00a      	b.n	80014bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4908      	ldr	r1, [pc, #32]	; (80014cc <__NVIC_SetPriority+0x50>)
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	3b04      	subs	r3, #4
 80014b4:	0112      	lsls	r2, r2, #4
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	440b      	add	r3, r1
 80014ba:	761a      	strb	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	bf28      	it	cs
 80014ee:	2304      	movcs	r3, #4
 80014f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3304      	adds	r3, #4
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d902      	bls.n	8001500 <NVIC_EncodePriority+0x30>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3b03      	subs	r3, #3
 80014fe:	e000      	b.n	8001502 <NVIC_EncodePriority+0x32>
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	f04f 32ff 	mov.w	r2, #4294967295
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	401a      	ands	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001518:	f04f 31ff 	mov.w	r1, #4294967295
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	43d9      	mvns	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	4313      	orrs	r3, r2
         );
}
 800152a:	4618      	mov	r0, r3
 800152c:	3724      	adds	r7, #36	; 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001548:	d301      	bcc.n	800154e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154a:	2301      	movs	r3, #1
 800154c:	e00f      	b.n	800156e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <SysTick_Config+0x40>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001556:	210f      	movs	r1, #15
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f7ff ff8e 	bl	800147c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <SysTick_Config+0x40>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <SysTick_Config+0x40>)
 8001568:	2207      	movs	r2, #7
 800156a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	e000e010 	.word	0xe000e010

0800157c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ff29 	bl	80013dc <__NVIC_SetPriorityGrouping>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015a0:	f7ff ff40 	bl	8001424 <__NVIC_GetPriorityGrouping>
 80015a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f7ff ff90 	bl	80014d0 <NVIC_EncodePriority>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff5f 	bl	800147c <__NVIC_SetPriority>
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff33 	bl	8001440 <__NVIC_EnableIRQ>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ffa4 	bl	8001538 <SysTick_Config>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e147      	b.n	800189e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d106      	bne.n	8001628 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fc84 	bl	8000f30 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	699a      	ldr	r2, [r3, #24]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0210 	bic.w	r2, r2, #16
 8001636:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001638:	f7ff fea2 	bl	8001380 <HAL_GetTick>
 800163c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800163e:	e012      	b.n	8001666 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001640:	f7ff fe9e 	bl	8001380 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b0a      	cmp	r3, #10
 800164c:	d90b      	bls.n	8001666 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001652:	f043 0201 	orr.w	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2203      	movs	r2, #3
 800165e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e11b      	b.n	800189e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b08      	cmp	r3, #8
 8001672:	d0e5      	beq.n	8001640 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699a      	ldr	r2, [r3, #24]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001684:	f7ff fe7c 	bl	8001380 <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800168a:	e012      	b.n	80016b2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800168c:	f7ff fe78 	bl	8001380 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b0a      	cmp	r3, #10
 8001698:	d90b      	bls.n	80016b2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169e:	f043 0201 	orr.w	r2, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2203      	movs	r2, #3
 80016aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e0f5      	b.n	800189e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0e5      	beq.n	800168c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0202 	orr.w	r2, r2, #2
 80016ce:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a74      	ldr	r2, [pc, #464]	; (80018a8 <HAL_FDCAN_Init+0x2ac>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d103      	bne.n	80016e2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80016da:	4a74      	ldr	r2, [pc, #464]	; (80018ac <HAL_FDCAN_Init+0x2b0>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7c1b      	ldrb	r3, [r3, #16]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d108      	bne.n	80016fc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699a      	ldr	r2, [r3, #24]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016f8:	619a      	str	r2, [r3, #24]
 80016fa:	e007      	b.n	800170c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699a      	ldr	r2, [r3, #24]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800170a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7c5b      	ldrb	r3, [r3, #17]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d108      	bne.n	8001726 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699a      	ldr	r2, [r3, #24]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001722:	619a      	str	r2, [r3, #24]
 8001724:	e007      	b.n	8001736 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	699a      	ldr	r2, [r3, #24]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001734:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7c9b      	ldrb	r3, [r3, #18]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d108      	bne.n	8001750 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	699a      	ldr	r2, [r3, #24]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800174c:	619a      	str	r2, [r3, #24]
 800174e:	e007      	b.n	8001760 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	699a      	ldr	r2, [r3, #24]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800175e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	699a      	ldr	r2, [r3, #24]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001784:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0210 	bic.w	r2, r2, #16
 8001794:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d108      	bne.n	80017b0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	699a      	ldr	r2, [r3, #24]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0204 	orr.w	r2, r2, #4
 80017ac:	619a      	str	r2, [r3, #24]
 80017ae:	e02c      	b.n	800180a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d028      	beq.n	800180a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d01c      	beq.n	80017fa <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	699a      	ldr	r2, [r3, #24]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017ce:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0210 	orr.w	r2, r2, #16
 80017de:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d110      	bne.n	800180a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699a      	ldr	r2, [r3, #24]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0220 	orr.w	r2, r2, #32
 80017f6:	619a      	str	r2, [r3, #24]
 80017f8:	e007      	b.n	800180a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	699a      	ldr	r2, [r3, #24]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f042 0220 	orr.w	r2, r2, #32
 8001808:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	3b01      	subs	r3, #1
 8001810:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	3b01      	subs	r3, #1
 8001818:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800181a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001822:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	3b01      	subs	r3, #1
 800182c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001832:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001834:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800183e:	d115      	bne.n	800186c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	3b01      	subs	r3, #1
 800184c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800184e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	3b01      	subs	r3, #1
 8001856:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001858:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	3b01      	subs	r3, #1
 8001862:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001868:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800186a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fc6e 	bl	8002164 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40006400 	.word	0x40006400
 80018ac:	40006500 	.word	0x40006500

080018b0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80018c0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80018c2:	7dfb      	ldrb	r3, [r7, #23]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d002      	beq.n	80018ce <HAL_FDCAN_ConfigFilter+0x1e>
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d13d      	bne.n	800194a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d119      	bne.n	800190a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80018e2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80018ea:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e01d      	b.n	8001946 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	075a      	lsls	r2, r3, #29
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	079a      	lsls	r2, r3, #30
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	4313      	orrs	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4413      	add	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3304      	adds	r3, #4
 800193e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e006      	b.n	8001958 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194e:	f043 0202 	orr.w	r2, r3, #2
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
  }
}
 8001958:	4618      	mov	r0, r3
 800195a:	371c      	adds	r7, #28
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d116      	bne.n	80019ac <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001986:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	011a      	lsls	r2, r3, #4
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	431a      	orrs	r2, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	431a      	orrs	r2, r3
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	431a      	orrs	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	e006      	b.n	80019ba <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b0:	f043 0204 	orr.w	r2, r3, #4
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
  }
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d110      	bne.n	80019fc <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2202      	movs	r2, #2
 80019de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699a      	ldr	r2, [r3, #24]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0201 	bic.w	r2, r2, #1
 80019f0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	e006      	b.n	8001a0a <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a00:	f043 0204 	orr.w	r2, r3, #4
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
  }
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d12c      	bne.n	8001a88 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e023      	b.n	8001a96 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001a56:	0c1b      	lsrs	r3, r3, #16
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 fbd3 	bl	8002210 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2101      	movs	r1, #1
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	fa01 f202 	lsl.w	r2, r1, r2
 8001a76:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e006      	b.n	8001a96 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8c:	f043 0208 	orr.w	r2, r3, #8
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
  }
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b08b      	sub	sp, #44	; 0x2c
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ab4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001ab6:	7efb      	ldrb	r3, [r7, #27]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	f040 80bc 	bne.w	8001c36 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b40      	cmp	r3, #64	; 0x40
 8001ac2:	d121      	bne.n	8001b08 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d107      	bne.n	8001ae4 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0af      	b.n	8001c44 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4413      	add	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	440b      	add	r3, r1
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
 8001b06:	e020      	b.n	8001b4a <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d107      	bne.n	8001b28 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e08d      	b.n	8001c44 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d107      	bne.n	8001b6e <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	0c9b      	lsrs	r3, r3, #18
 8001b64:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e005      	b.n	8001b7a <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	3304      	adds	r3, #4
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	0e1b      	lsrs	r3, r3, #24
 8001bcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0fda      	lsrs	r2, r3, #31
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	3304      	adds	r3, #4
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
 8001bec:	e00a      	b.n	8001c04 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	441a      	add	r2, r3
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	440b      	add	r3, r1
 8001bfa:	7812      	ldrb	r2, [r2, #0]
 8001bfc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	3301      	adds	r3, #1
 8001c02:	623b      	str	r3, [r7, #32]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0c1b      	lsrs	r3, r3, #16
 8001c0a:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8001c0c:	5cd3      	ldrb	r3, [r2, r3]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d3eb      	bcc.n	8001bee <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b40      	cmp	r3, #64	; 0x40
 8001c1a:	d105      	bne.n	8001c28 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001c26:	e004      	b.n	8001c32 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e006      	b.n	8001c44 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3a:	f043 0208 	orr.w	r2, r3, #8
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
  }
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	372c      	adds	r7, #44	; 0x2c
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	08005544 	.word	0x08005544

08001c54 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c66:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d003      	beq.n	8001c76 <HAL_FDCAN_ActivateNotification+0x22>
 8001c6e:	7dfb      	ldrb	r3, [r7, #23]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	f040 80c8 	bne.w	8001e06 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d004      	beq.n	8001c92 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d03b      	beq.n	8001d0a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d031      	beq.n	8001d0a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d004      	beq.n	8001cba <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d027      	beq.n	8001d0a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d01d      	beq.n	8001d0a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d013      	beq.n	8001d0a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d004      	beq.n	8001cf6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d009      	beq.n	8001d0a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00c      	beq.n	8001d1a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d107      	bne.n	8001d1a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0201 	orr.w	r2, r2, #1
 8001d18:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d004      	beq.n	8001d2e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d13b      	bne.n	8001da6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d004      	beq.n	8001d42 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d131      	bne.n	8001da6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d127      	bne.n	8001da6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d004      	beq.n	8001d6a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d11d      	bne.n	8001da6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d004      	beq.n	8001d7e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d113      	bne.n	8001da6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d004      	beq.n	8001d92 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00c      	beq.n	8001db6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d007      	beq.n	8001db6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0202 	orr.w	r2, r2, #2
 8001db4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d009      	beq.n	8001dd4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d009      	beq.n	8001df2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e006      	b.n	8001e14 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0a:	f043 0202 	orr.w	r2, r3, #2
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
  }
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	6a3a      	ldr	r2, [r7, #32]
 8001e54:	4013      	ands	r3, r2
 8001e56:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e62:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e76:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001e7a:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e8e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e92:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00d      	beq.n	8001eca <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2240      	movs	r2, #64	; 0x40
 8001ec2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f92e 	bl	8002126 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01b      	beq.n	8001f10 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d014      	beq.n	8001f10 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001eee:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f06:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001f08:	6939      	ldr	r1, [r7, #16]
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f8ec 	bl	80020e8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d007      	beq.n	8001f26 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001f1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f8b6 	bl	8002092 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a3a      	ldr	r2, [r7, #32]
 8001f32:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001f34:	6a39      	ldr	r1, [r7, #32]
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe ff72 	bl	8000e20 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d007      	beq.n	8001f52 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001f4a:	69f9      	ldr	r1, [r7, #28]
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f8ab 	bl	80020a8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00e      	beq.n	8001f7e <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f76:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f8a0 	bl	80020be <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d01a      	beq.n	8001fc2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d013      	beq.n	8001fc2 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001fa2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2280      	movs	r2, #128	; 0x80
 8001fb8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001fba:	68f9      	ldr	r1, [r7, #12]
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f888 	bl	80020d2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00e      	beq.n	8001fee <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d007      	beq.n	8001fee <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f888 	bl	80020fe <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00e      	beq.n	800201a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002012:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f87c 	bl	8002112 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d011      	beq.n	800204c <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800203e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002044:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d007      	beq.n	8002062 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800205a:	6979      	ldr	r1, [r7, #20]
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f876 	bl	800214e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d009      	beq.n	800207c <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f858 	bl	800213a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800216c:	4b27      	ldr	r3, [pc, #156]	; (800220c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800216e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800217e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002186:	041a      	lsls	r2, r3, #16
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021a4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ac:	061a      	lsls	r2, r3, #24
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e005      	b.n	80021f2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3304      	adds	r3, #4
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d3f3      	bcc.n	80021e6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80021fe:	bf00      	nop
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	4000a400 	.word	0x4000a400

08002210 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10a      	bne.n	800223c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800222e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002236:	4313      	orrs	r3, r2
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	e00a      	b.n	8002252 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002244:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800224a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800224c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002250:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800225c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002262:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002268:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	3304      	adds	r3, #4
 800228e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	3304      	adds	r3, #4
 800229a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	e020      	b.n	80022e4 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	3303      	adds	r3, #3
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3302      	adds	r3, #2
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	440b      	add	r3, r1
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80022ba:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3301      	adds	r3, #1
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	440b      	add	r3, r1
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80022c8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	440a      	add	r2, r1
 80022d0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80022d2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	3304      	adds	r3, #4
 80022dc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3304      	adds	r3, #4
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	4a06      	ldr	r2, [pc, #24]	; (8002304 <FDCAN_CopyMessageToRAM+0xf4>)
 80022ec:	5cd3      	ldrb	r3, [r2, r3]
 80022ee:	461a      	mov	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d3d5      	bcc.n	80022a2 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	3724      	adds	r7, #36	; 0x24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	08005544 	.word	0x08005544

08002308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002316:	e15a      	b.n	80025ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	4013      	ands	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 814c 	beq.w	80025c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d005      	beq.n	8002348 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002344:	2b02      	cmp	r3, #2
 8002346:	d130      	bne.n	80023aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800237e:	2201      	movs	r2, #1
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	f003 0201 	and.w	r2, r3, #1
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d017      	beq.n	80023e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d123      	bne.n	800243a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	08da      	lsrs	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3208      	adds	r2, #8
 80023fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	220f      	movs	r2, #15
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	08da      	lsrs	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3208      	adds	r2, #8
 8002434:	6939      	ldr	r1, [r7, #16]
 8002436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0203 	and.w	r2, r3, #3
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80a6 	beq.w	80025c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247c:	4b5b      	ldr	r3, [pc, #364]	; (80025ec <HAL_GPIO_Init+0x2e4>)
 800247e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002480:	4a5a      	ldr	r2, [pc, #360]	; (80025ec <HAL_GPIO_Init+0x2e4>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6613      	str	r3, [r2, #96]	; 0x60
 8002488:	4b58      	ldr	r3, [pc, #352]	; (80025ec <HAL_GPIO_Init+0x2e4>)
 800248a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002494:	4a56      	ldr	r2, [pc, #344]	; (80025f0 <HAL_GPIO_Init+0x2e8>)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	220f      	movs	r2, #15
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024be:	d01f      	beq.n	8002500 <HAL_GPIO_Init+0x1f8>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a4c      	ldr	r2, [pc, #304]	; (80025f4 <HAL_GPIO_Init+0x2ec>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d019      	beq.n	80024fc <HAL_GPIO_Init+0x1f4>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a4b      	ldr	r2, [pc, #300]	; (80025f8 <HAL_GPIO_Init+0x2f0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d013      	beq.n	80024f8 <HAL_GPIO_Init+0x1f0>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a4a      	ldr	r2, [pc, #296]	; (80025fc <HAL_GPIO_Init+0x2f4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00d      	beq.n	80024f4 <HAL_GPIO_Init+0x1ec>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a49      	ldr	r2, [pc, #292]	; (8002600 <HAL_GPIO_Init+0x2f8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d007      	beq.n	80024f0 <HAL_GPIO_Init+0x1e8>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a48      	ldr	r2, [pc, #288]	; (8002604 <HAL_GPIO_Init+0x2fc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d101      	bne.n	80024ec <HAL_GPIO_Init+0x1e4>
 80024e8:	2305      	movs	r3, #5
 80024ea:	e00a      	b.n	8002502 <HAL_GPIO_Init+0x1fa>
 80024ec:	2306      	movs	r3, #6
 80024ee:	e008      	b.n	8002502 <HAL_GPIO_Init+0x1fa>
 80024f0:	2304      	movs	r3, #4
 80024f2:	e006      	b.n	8002502 <HAL_GPIO_Init+0x1fa>
 80024f4:	2303      	movs	r3, #3
 80024f6:	e004      	b.n	8002502 <HAL_GPIO_Init+0x1fa>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e002      	b.n	8002502 <HAL_GPIO_Init+0x1fa>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_GPIO_Init+0x1fa>
 8002500:	2300      	movs	r3, #0
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	f002 0203 	and.w	r2, r2, #3
 8002508:	0092      	lsls	r2, r2, #2
 800250a:	4093      	lsls	r3, r2
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002512:	4937      	ldr	r1, [pc, #220]	; (80025f0 <HAL_GPIO_Init+0x2e8>)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	3302      	adds	r3, #2
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002520:	4b39      	ldr	r3, [pc, #228]	; (8002608 <HAL_GPIO_Init+0x300>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002544:	4a30      	ldr	r2, [pc, #192]	; (8002608 <HAL_GPIO_Init+0x300>)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800254a:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <HAL_GPIO_Init+0x300>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800256e:	4a26      	ldr	r2, [pc, #152]	; (8002608 <HAL_GPIO_Init+0x300>)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002574:	4b24      	ldr	r3, [pc, #144]	; (8002608 <HAL_GPIO_Init+0x300>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	43db      	mvns	r3, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002598:	4a1b      	ldr	r2, [pc, #108]	; (8002608 <HAL_GPIO_Init+0x300>)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <HAL_GPIO_Init+0x300>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025c2:	4a11      	ldr	r2, [pc, #68]	; (8002608 <HAL_GPIO_Init+0x300>)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	3301      	adds	r3, #1
 80025cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f47f ae9d 	bne.w	8002318 <HAL_GPIO_Init+0x10>
  }
}
 80025de:	bf00      	nop
 80025e0:	bf00      	nop
 80025e2:	371c      	adds	r7, #28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40010000 	.word	0x40010000
 80025f4:	48000400 	.word	0x48000400
 80025f8:	48000800 	.word	0x48000800
 80025fc:	48000c00 	.word	0x48000c00
 8002600:	48001000 	.word	0x48001000
 8002604:	48001400 	.word	0x48001400
 8002608:	40010400 	.word	0x40010400

0800260c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	887b      	ldrh	r3, [r7, #2]
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	e001      	b.n	800262e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800262e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d141      	bne.n	80026ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800264a:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002656:	d131      	bne.n	80026bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002658:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800265e:	4a46      	ldr	r2, [pc, #280]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002664:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002668:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002670:	4a41      	ldr	r2, [pc, #260]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002676:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002678:	4b40      	ldr	r3, [pc, #256]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2232      	movs	r2, #50	; 0x32
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	4a3f      	ldr	r2, [pc, #252]	; (8002780 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002684:	fba2 2303 	umull	r2, r3, r2, r3
 8002688:	0c9b      	lsrs	r3, r3, #18
 800268a:	3301      	adds	r3, #1
 800268c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800268e:	e002      	b.n	8002696 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3b01      	subs	r3, #1
 8002694:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002696:	4b38      	ldr	r3, [pc, #224]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a2:	d102      	bne.n	80026aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f2      	bne.n	8002690 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026aa:	4b33      	ldr	r3, [pc, #204]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b6:	d158      	bne.n	800276a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e057      	b.n	800276c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026bc:	4b2e      	ldr	r3, [pc, #184]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c2:	4a2d      	ldr	r2, [pc, #180]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026cc:	e04d      	b.n	800276a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026d4:	d141      	bne.n	800275a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026d6:	4b28      	ldr	r3, [pc, #160]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e2:	d131      	bne.n	8002748 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026e4:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ea:	4a23      	ldr	r2, [pc, #140]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f4:	4b20      	ldr	r3, [pc, #128]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026fc:	4a1e      	ldr	r2, [pc, #120]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002702:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002704:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2232      	movs	r2, #50	; 0x32
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	4a1c      	ldr	r2, [pc, #112]	; (8002780 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	0c9b      	lsrs	r3, r3, #18
 8002716:	3301      	adds	r3, #1
 8002718:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800271a:	e002      	b.n	8002722 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3b01      	subs	r3, #1
 8002720:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272e:	d102      	bne.n	8002736 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f2      	bne.n	800271c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002742:	d112      	bne.n	800276a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e011      	b.n	800276c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002754:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002758:	e007      	b.n	800276a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002762:	4a05      	ldr	r2, [pc, #20]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002764:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002768:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40007000 	.word	0x40007000
 800277c:	20000000 	.word	0x20000000
 8002780:	431bde83 	.word	0x431bde83

08002784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e306      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d075      	beq.n	800288e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a2:	4b97      	ldr	r3, [pc, #604]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027ac:	4b94      	ldr	r3, [pc, #592]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	d102      	bne.n	80027c2 <HAL_RCC_OscConfig+0x3e>
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d002      	beq.n	80027c8 <HAL_RCC_OscConfig+0x44>
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d10b      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c8:	4b8d      	ldr	r3, [pc, #564]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d05b      	beq.n	800288c <HAL_RCC_OscConfig+0x108>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d157      	bne.n	800288c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e2e1      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e8:	d106      	bne.n	80027f8 <HAL_RCC_OscConfig+0x74>
 80027ea:	4b85      	ldr	r3, [pc, #532]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a84      	ldr	r2, [pc, #528]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e01d      	b.n	8002834 <HAL_RCC_OscConfig+0xb0>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x98>
 8002802:	4b7f      	ldr	r3, [pc, #508]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a7e      	ldr	r2, [pc, #504]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 8002808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b7c      	ldr	r3, [pc, #496]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a7b      	ldr	r2, [pc, #492]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e00b      	b.n	8002834 <HAL_RCC_OscConfig+0xb0>
 800281c:	4b78      	ldr	r3, [pc, #480]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a77      	ldr	r2, [pc, #476]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 8002822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b75      	ldr	r3, [pc, #468]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a74      	ldr	r2, [pc, #464]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 800282e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe fda0 	bl	8001380 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002844:	f7fe fd9c 	bl	8001380 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	; 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e2a6      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002856:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0xc0>
 8002862:	e014      	b.n	800288e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fd8c 	bl	8001380 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800286c:	f7fe fd88 	bl	8001380 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	; 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e292      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800287e:	4b60      	ldr	r3, [pc, #384]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0xe8>
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d075      	beq.n	8002986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289a:	4b59      	ldr	r3, [pc, #356]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a4:	4b56      	ldr	r3, [pc, #344]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	2b0c      	cmp	r3, #12
 80028b2:	d102      	bne.n	80028ba <HAL_RCC_OscConfig+0x136>
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d002      	beq.n	80028c0 <HAL_RCC_OscConfig+0x13c>
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d11f      	bne.n	8002900 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028c0:	4b4f      	ldr	r3, [pc, #316]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_OscConfig+0x154>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e265      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d8:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	061b      	lsls	r3, r3, #24
 80028e6:	4946      	ldr	r1, [pc, #280]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028ec:	4b45      	ldr	r3, [pc, #276]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe fcf9 	bl	80012e8 <HAL_InitTick>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d043      	beq.n	8002984 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e251      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d023      	beq.n	8002950 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002908:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a3c      	ldr	r2, [pc, #240]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 800290e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fd34 	bl	8001380 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291c:	f7fe fd30 	bl	8001380 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e23a      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800292e:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293a:	4b31      	ldr	r3, [pc, #196]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	061b      	lsls	r3, r3, #24
 8002948:	492d      	ldr	r1, [pc, #180]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
 800294e:	e01a      	b.n	8002986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a2a      	ldr	r2, [pc, #168]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 8002956:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800295a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe fd10 	bl	8001380 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002964:	f7fe fd0c 	bl	8001380 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e216      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002976:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x1e0>
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002984:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d041      	beq.n	8002a16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01c      	beq.n	80029d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299a:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 800299c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a0:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029aa:	f7fe fce9 	bl	8001380 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b2:	f7fe fce5 	bl	8001380 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e1ef      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c4:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 80029c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0ef      	beq.n	80029b2 <HAL_RCC_OscConfig+0x22e>
 80029d2:	e020      	b.n	8002a16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 80029d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029da:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe fccc 	bl	8001380 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ea:	e00d      	b.n	8002a08 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ec:	f7fe fcc8 	bl	8001380 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d906      	bls.n	8002a08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e1d2      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a08:	4b8c      	ldr	r3, [pc, #560]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1ea      	bne.n	80029ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80a6 	beq.w	8002b70 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a24:	2300      	movs	r3, #0
 8002a26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a28:	4b84      	ldr	r3, [pc, #528]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2b4>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x2b6>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00d      	beq.n	8002a5a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	4b7f      	ldr	r3, [pc, #508]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	4a7e      	ldr	r2, [pc, #504]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a48:	6593      	str	r3, [r2, #88]	; 0x58
 8002a4a:	4b7c      	ldr	r3, [pc, #496]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a56:	2301      	movs	r3, #1
 8002a58:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5a:	4b79      	ldr	r3, [pc, #484]	; (8002c40 <HAL_RCC_OscConfig+0x4bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d118      	bne.n	8002a98 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a66:	4b76      	ldr	r3, [pc, #472]	; (8002c40 <HAL_RCC_OscConfig+0x4bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a75      	ldr	r2, [pc, #468]	; (8002c40 <HAL_RCC_OscConfig+0x4bc>)
 8002a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a72:	f7fe fc85 	bl	8001380 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7a:	f7fe fc81 	bl	8001380 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e18b      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8c:	4b6c      	ldr	r3, [pc, #432]	; (8002c40 <HAL_RCC_OscConfig+0x4bc>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d108      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x32e>
 8002aa0:	4b66      	ldr	r3, [pc, #408]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	4a65      	ldr	r2, [pc, #404]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ab0:	e024      	b.n	8002afc <HAL_RCC_OscConfig+0x378>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b05      	cmp	r3, #5
 8002ab8:	d110      	bne.n	8002adc <HAL_RCC_OscConfig+0x358>
 8002aba:	4b60      	ldr	r3, [pc, #384]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac0:	4a5e      	ldr	r2, [pc, #376]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002ac2:	f043 0304 	orr.w	r3, r3, #4
 8002ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aca:	4b5c      	ldr	r3, [pc, #368]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	4a5a      	ldr	r2, [pc, #360]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ada:	e00f      	b.n	8002afc <HAL_RCC_OscConfig+0x378>
 8002adc:	4b57      	ldr	r3, [pc, #348]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae2:	4a56      	ldr	r2, [pc, #344]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aec:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	4a52      	ldr	r2, [pc, #328]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002af4:	f023 0304 	bic.w	r3, r3, #4
 8002af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d016      	beq.n	8002b32 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b04:	f7fe fc3c 	bl	8001380 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0c:	f7fe fc38 	bl	8001380 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e140      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b22:	4b46      	ldr	r3, [pc, #280]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ed      	beq.n	8002b0c <HAL_RCC_OscConfig+0x388>
 8002b30:	e015      	b.n	8002b5e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b32:	f7fe fc25 	bl	8001380 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7fe fc21 	bl	8001380 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e129      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b50:	4b3a      	ldr	r3, [pc, #232]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1ed      	bne.n	8002b3a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b5e:	7ffb      	ldrb	r3, [r7, #31]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b64:	4b35      	ldr	r3, [pc, #212]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	4a34      	ldr	r2, [pc, #208]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d03c      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01c      	beq.n	8002bbe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b84:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b8a:	4a2c      	ldr	r2, [pc, #176]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7fe fbf4 	bl	8001380 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b9c:	f7fe fbf0 	bl	8001380 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e0fa      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bae:	4b23      	ldr	r3, [pc, #140]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002bb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0ef      	beq.n	8002b9c <HAL_RCC_OscConfig+0x418>
 8002bbc:	e01b      	b.n	8002bf6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bbe:	4b1f      	ldr	r3, [pc, #124]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002bc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bc4:	4a1d      	ldr	r2, [pc, #116]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002bc6:	f023 0301 	bic.w	r3, r3, #1
 8002bca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bce:	f7fe fbd7 	bl	8001380 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bd6:	f7fe fbd3 	bl	8001380 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e0dd      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002be8:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002bea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ef      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 80d1 	beq.w	8002da2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c00:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b0c      	cmp	r3, #12
 8002c0a:	f000 808b 	beq.w	8002d24 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d15e      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <HAL_RCC_OscConfig+0x4b8>)
 8002c1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7fe fbad 	bl	8001380 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c28:	e00c      	b.n	8002c44 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7fe fba9 	bl	8001380 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d905      	bls.n	8002c44 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e0b3      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c44:	4b59      	ldr	r3, [pc, #356]	; (8002dac <HAL_RCC_OscConfig+0x628>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1ec      	bne.n	8002c2a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c50:	4b56      	ldr	r3, [pc, #344]	; (8002dac <HAL_RCC_OscConfig+0x628>)
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	4b56      	ldr	r3, [pc, #344]	; (8002db0 <HAL_RCC_OscConfig+0x62c>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6a11      	ldr	r1, [r2, #32]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c60:	3a01      	subs	r2, #1
 8002c62:	0112      	lsls	r2, r2, #4
 8002c64:	4311      	orrs	r1, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002c6a:	0212      	lsls	r2, r2, #8
 8002c6c:	4311      	orrs	r1, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c72:	0852      	lsrs	r2, r2, #1
 8002c74:	3a01      	subs	r2, #1
 8002c76:	0552      	lsls	r2, r2, #21
 8002c78:	4311      	orrs	r1, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c7e:	0852      	lsrs	r2, r2, #1
 8002c80:	3a01      	subs	r2, #1
 8002c82:	0652      	lsls	r2, r2, #25
 8002c84:	4311      	orrs	r1, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c8a:	06d2      	lsls	r2, r2, #27
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	4947      	ldr	r1, [pc, #284]	; (8002dac <HAL_RCC_OscConfig+0x628>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c94:	4b45      	ldr	r3, [pc, #276]	; (8002dac <HAL_RCC_OscConfig+0x628>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a44      	ldr	r2, [pc, #272]	; (8002dac <HAL_RCC_OscConfig+0x628>)
 8002c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c9e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ca0:	4b42      	ldr	r3, [pc, #264]	; (8002dac <HAL_RCC_OscConfig+0x628>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4a41      	ldr	r2, [pc, #260]	; (8002dac <HAL_RCC_OscConfig+0x628>)
 8002ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002caa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7fe fb68 	bl	8001380 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb4:	f7fe fb64 	bl	8001380 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e06e      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc6:	4b39      	ldr	r3, [pc, #228]	; (8002dac <HAL_RCC_OscConfig+0x628>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x530>
 8002cd2:	e066      	b.n	8002da2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd4:	4b35      	ldr	r3, [pc, #212]	; (8002dac <HAL_RCC_OscConfig+0x628>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a34      	ldr	r2, [pc, #208]	; (8002dac <HAL_RCC_OscConfig+0x628>)
 8002cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cde:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ce0:	4b32      	ldr	r3, [pc, #200]	; (8002dac <HAL_RCC_OscConfig+0x628>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4a31      	ldr	r2, [pc, #196]	; (8002dac <HAL_RCC_OscConfig+0x628>)
 8002ce6:	f023 0303 	bic.w	r3, r3, #3
 8002cea:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002cec:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <HAL_RCC_OscConfig+0x628>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a2e      	ldr	r2, [pc, #184]	; (8002dac <HAL_RCC_OscConfig+0x628>)
 8002cf2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fb40 	bl	8001380 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d04:	f7fe fb3c 	bl	8001380 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e046      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d16:	4b25      	ldr	r3, [pc, #148]	; (8002dac <HAL_RCC_OscConfig+0x628>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x580>
 8002d22:	e03e      	b.n	8002da2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e039      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d30:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <HAL_RCC_OscConfig+0x628>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f003 0203 	and.w	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d12c      	bne.n	8002d9e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d123      	bne.n	8002d9e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d11b      	bne.n	8002d9e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d113      	bne.n	8002d9e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	3b01      	subs	r3, #1
 8002d84:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d109      	bne.n	8002d9e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	3b01      	subs	r3, #1
 8002d98:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3720      	adds	r7, #32
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	019f800c 	.word	0x019f800c

08002db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e11e      	b.n	800300a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b91      	ldr	r3, [pc, #580]	; (8003014 <HAL_RCC_ClockConfig+0x260>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d910      	bls.n	8002dfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b8e      	ldr	r3, [pc, #568]	; (8003014 <HAL_RCC_ClockConfig+0x260>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 020f 	bic.w	r2, r3, #15
 8002de2:	498c      	ldr	r1, [pc, #560]	; (8003014 <HAL_RCC_ClockConfig+0x260>)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	4b8a      	ldr	r3, [pc, #552]	; (8003014 <HAL_RCC_ClockConfig+0x260>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e106      	b.n	800300a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d073      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d129      	bne.n	8002e64 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e10:	4b81      	ldr	r3, [pc, #516]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0f4      	b.n	800300a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e20:	f000 f99e 	bl	8003160 <RCC_GetSysClockFreqFromPLLSource>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4a7c      	ldr	r2, [pc, #496]	; (800301c <HAL_RCC_ClockConfig+0x268>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d93f      	bls.n	8002eae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e2e:	4b7a      	ldr	r3, [pc, #488]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d033      	beq.n	8002eae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d12f      	bne.n	8002eae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e4e:	4b72      	ldr	r3, [pc, #456]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e56:	4a70      	ldr	r2, [pc, #448]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	e024      	b.n	8002eae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e6c:	4b6a      	ldr	r3, [pc, #424]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0c6      	b.n	800300a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e7c:	4b66      	ldr	r3, [pc, #408]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0be      	b.n	800300a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e8c:	f000 f8ce 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8002e90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4a61      	ldr	r2, [pc, #388]	; (800301c <HAL_RCC_ClockConfig+0x268>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d909      	bls.n	8002eae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e9a:	4b5f      	ldr	r3, [pc, #380]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ea2:	4a5d      	ldr	r2, [pc, #372]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eae:	4b5a      	ldr	r3, [pc, #360]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f023 0203 	bic.w	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4957      	ldr	r1, [pc, #348]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec0:	f7fe fa5e 	bl	8001380 <HAL_GetTick>
 8002ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec8:	f7fe fa5a 	bl	8001380 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e095      	b.n	800300a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	4b4e      	ldr	r3, [pc, #312]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 020c 	and.w	r2, r3, #12
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d1eb      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d023      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f08:	4b43      	ldr	r3, [pc, #268]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4a42      	ldr	r2, [pc, #264]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002f0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f20:	4b3d      	ldr	r3, [pc, #244]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f28:	4a3b      	ldr	r2, [pc, #236]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002f2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b39      	ldr	r3, [pc, #228]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	4936      	ldr	r1, [pc, #216]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	608b      	str	r3, [r1, #8]
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2b80      	cmp	r3, #128	; 0x80
 8002f48:	d105      	bne.n	8002f56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f4a:	4b33      	ldr	r3, [pc, #204]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	4a32      	ldr	r2, [pc, #200]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002f50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f56:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <HAL_RCC_ClockConfig+0x260>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d21d      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f64:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <HAL_RCC_ClockConfig+0x260>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f023 020f 	bic.w	r2, r3, #15
 8002f6c:	4929      	ldr	r1, [pc, #164]	; (8003014 <HAL_RCC_ClockConfig+0x260>)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f74:	f7fe fa04 	bl	8001380 <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f7c:	f7fe fa00 	bl	8001380 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e03b      	b.n	800300a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_RCC_ClockConfig+0x260>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d1ed      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fac:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4917      	ldr	r1, [pc, #92]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fca:	4b13      	ldr	r3, [pc, #76]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	490f      	ldr	r1, [pc, #60]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fde:	f000 f825 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <HAL_RCC_ClockConfig+0x264>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	490c      	ldr	r1, [pc, #48]	; (8003020 <HAL_RCC_ClockConfig+0x26c>)
 8002ff0:	5ccb      	ldrb	r3, [r1, r3]
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <HAL_RCC_ClockConfig+0x270>)
 8002ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_RCC_ClockConfig+0x274>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe f970 	bl	80012e8 <HAL_InitTick>
 8003008:	4603      	mov	r3, r0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40022000 	.word	0x40022000
 8003018:	40021000 	.word	0x40021000
 800301c:	04c4b400 	.word	0x04c4b400
 8003020:	0800552c 	.word	0x0800552c
 8003024:	20000000 	.word	0x20000000
 8003028:	20000004 	.word	0x20000004

0800302c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003032:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	2b04      	cmp	r3, #4
 800303c:	d102      	bne.n	8003044 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800303e:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	e047      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003044:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 030c 	and.w	r3, r3, #12
 800304c:	2b08      	cmp	r3, #8
 800304e:	d102      	bne.n	8003056 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003050:	4b26      	ldr	r3, [pc, #152]	; (80030ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	e03e      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003056:	4b23      	ldr	r3, [pc, #140]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d136      	bne.n	80030d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800306c:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	3301      	adds	r3, #1
 8003078:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d10c      	bne.n	800309a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003080:	4a1a      	ldr	r2, [pc, #104]	; (80030ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	4a16      	ldr	r2, [pc, #88]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800308a:	68d2      	ldr	r2, [r2, #12]
 800308c:	0a12      	lsrs	r2, r2, #8
 800308e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	617b      	str	r3, [r7, #20]
      break;
 8003098:	e00c      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800309a:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a2:	4a10      	ldr	r2, [pc, #64]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a4:	68d2      	ldr	r2, [r2, #12]
 80030a6:	0a12      	lsrs	r2, r2, #8
 80030a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	617b      	str	r3, [r7, #20]
      break;
 80030b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	0e5b      	lsrs	r3, r3, #25
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	3301      	adds	r3, #1
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	e001      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80030d4:	693b      	ldr	r3, [r7, #16]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000
 80030e8:	00f42400 	.word	0x00f42400
 80030ec:	007a1200 	.word	0x007a1200

080030f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000000 	.word	0x20000000

08003108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800310c:	f7ff fff0 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 8003110:	4602      	mov	r2, r0
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	0a1b      	lsrs	r3, r3, #8
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	4904      	ldr	r1, [pc, #16]	; (8003130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003128:	4618      	mov	r0, r3
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40021000 	.word	0x40021000
 8003130:	0800553c 	.word	0x0800553c

08003134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003138:	f7ff ffda 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 800313c:	4602      	mov	r2, r0
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	0adb      	lsrs	r3, r3, #11
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	4904      	ldr	r1, [pc, #16]	; (800315c <HAL_RCC_GetPCLK2Freq+0x28>)
 800314a:	5ccb      	ldrb	r3, [r1, r3]
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000
 800315c:	0800553c 	.word	0x0800553c

08003160 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003166:	4b1e      	ldr	r3, [pc, #120]	; (80031e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	3301      	adds	r3, #1
 800317c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b03      	cmp	r3, #3
 8003182:	d10c      	bne.n	800319e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003184:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	fbb2 f3f3 	udiv	r3, r2, r3
 800318c:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800318e:	68d2      	ldr	r2, [r2, #12]
 8003190:	0a12      	lsrs	r2, r2, #8
 8003192:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	617b      	str	r3, [r7, #20]
    break;
 800319c:	e00c      	b.n	80031b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800319e:	4a12      	ldr	r2, [pc, #72]	; (80031e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a6:	4a0e      	ldr	r2, [pc, #56]	; (80031e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031a8:	68d2      	ldr	r2, [r2, #12]
 80031aa:	0a12      	lsrs	r2, r2, #8
 80031ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031b0:	fb02 f303 	mul.w	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]
    break;
 80031b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	0e5b      	lsrs	r3, r3, #25
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	3301      	adds	r3, #1
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80031d2:	687b      	ldr	r3, [r7, #4]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	371c      	adds	r7, #28
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	40021000 	.word	0x40021000
 80031e4:	007a1200 	.word	0x007a1200
 80031e8:	00f42400 	.word	0x00f42400

080031ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031f4:	2300      	movs	r3, #0
 80031f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031f8:	2300      	movs	r3, #0
 80031fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8098 	beq.w	800333a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800320a:	2300      	movs	r3, #0
 800320c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800320e:	4b43      	ldr	r3, [pc, #268]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10d      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	4b40      	ldr	r3, [pc, #256]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	4a3f      	ldr	r2, [pc, #252]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003224:	6593      	str	r3, [r2, #88]	; 0x58
 8003226:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003232:	2301      	movs	r3, #1
 8003234:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003236:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a39      	ldr	r2, [pc, #228]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003240:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003242:	f7fe f89d 	bl	8001380 <HAL_GetTick>
 8003246:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003248:	e009      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324a:	f7fe f899 	bl	8001380 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d902      	bls.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	74fb      	strb	r3, [r7, #19]
        break;
 800325c:	e005      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800325e:	4b30      	ldr	r3, [pc, #192]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0ef      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800326a:	7cfb      	ldrb	r3, [r7, #19]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d159      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003270:	4b2a      	ldr	r3, [pc, #168]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01e      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	429a      	cmp	r2, r3
 800328a:	d019      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800328c:	4b23      	ldr	r3, [pc, #140]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003296:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003298:	4b20      	ldr	r3, [pc, #128]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	4a1f      	ldr	r2, [pc, #124]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032a8:	4b1c      	ldr	r3, [pc, #112]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	4a1b      	ldr	r2, [pc, #108]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032b8:	4a18      	ldr	r2, [pc, #96]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d016      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fe f859 	bl	8001380 <HAL_GetTick>
 80032ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d0:	e00b      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fe f855 	bl	8001380 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d902      	bls.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	74fb      	strb	r3, [r7, #19]
            break;
 80032e8:	e006      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ea:	4b0c      	ldr	r3, [pc, #48]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ec      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032fe:	4b07      	ldr	r3, [pc, #28]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003304:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	4903      	ldr	r1, [pc, #12]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003314:	e008      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	74bb      	strb	r3, [r7, #18]
 800331a:	e005      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800331c:	40021000 	.word	0x40021000
 8003320:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003328:	7c7b      	ldrb	r3, [r7, #17]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d105      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332e:	4ba6      	ldr	r3, [pc, #664]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	4aa5      	ldr	r2, [pc, #660]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003338:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003346:	4ba0      	ldr	r3, [pc, #640]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334c:	f023 0203 	bic.w	r2, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	499c      	ldr	r1, [pc, #624]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003368:	4b97      	ldr	r3, [pc, #604]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	f023 020c 	bic.w	r2, r3, #12
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	4994      	ldr	r1, [pc, #592]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800338a:	4b8f      	ldr	r3, [pc, #572]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	498b      	ldr	r1, [pc, #556]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033ac:	4b86      	ldr	r3, [pc, #536]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	4983      	ldr	r1, [pc, #524]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033ce:	4b7e      	ldr	r3, [pc, #504]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	497a      	ldr	r1, [pc, #488]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033f0:	4b75      	ldr	r3, [pc, #468]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	4972      	ldr	r1, [pc, #456]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003412:	4b6d      	ldr	r3, [pc, #436]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003418:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	4969      	ldr	r1, [pc, #420]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003434:	4b64      	ldr	r3, [pc, #400]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	4961      	ldr	r1, [pc, #388]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003456:	4b5c      	ldr	r3, [pc, #368]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	4958      	ldr	r1, [pc, #352]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003474:	2b00      	cmp	r3, #0
 8003476:	d015      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003478:	4b53      	ldr	r3, [pc, #332]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	4950      	ldr	r1, [pc, #320]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003496:	d105      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003498:	4b4b      	ldr	r3, [pc, #300]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4a4a      	ldr	r2, [pc, #296]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d015      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034b0:	4b45      	ldr	r3, [pc, #276]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	4942      	ldr	r1, [pc, #264]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ce:	d105      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d0:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4a3c      	ldr	r2, [pc, #240]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d015      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034e8:	4b37      	ldr	r3, [pc, #220]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	4934      	ldr	r1, [pc, #208]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003506:	d105      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003508:	4b2f      	ldr	r3, [pc, #188]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a2e      	ldr	r2, [pc, #184]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003512:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d015      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003520:	4b29      	ldr	r3, [pc, #164]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352e:	4926      	ldr	r1, [pc, #152]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800353e:	d105      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003540:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4a20      	ldr	r2, [pc, #128]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800354a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d015      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	4918      	ldr	r1, [pc, #96]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003576:	d105      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003578:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a12      	ldr	r2, [pc, #72]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003582:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d015      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003590:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359e:	490a      	ldr	r1, [pc, #40]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ae:	d105      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80035bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40021000 	.word	0x40021000

080035cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e042      	b.n	8003664 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7fd fd07 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2224      	movs	r2, #36	; 0x24
 80035fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8c2 	bl	8003798 <UART_SetConfig>
 8003614:	4603      	mov	r3, r0
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e022      	b.n	8003664 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fb82 	bl	8003d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800363a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800364a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fc09 	bl	8003e74 <UART_CheckIdleState>
 8003662:	4603      	mov	r3, r0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003682:	2b20      	cmp	r3, #32
 8003684:	f040 8083 	bne.w	800378e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_UART_Transmit+0x28>
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e07b      	b.n	8003790 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_UART_Transmit+0x3a>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e074      	b.n	8003790 <HAL_UART_Transmit+0x124>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2221      	movs	r2, #33	; 0x21
 80036ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036be:	f7fd fe5f 	bl	8001380 <HAL_GetTick>
 80036c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	88fa      	ldrh	r2, [r7, #6]
 80036c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036dc:	d108      	bne.n	80036f0 <HAL_UART_Transmit+0x84>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	e003      	b.n	80036f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003700:	e02c      	b.n	800375c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	; 0x80
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fbfc 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e039      	b.n	8003790 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003730:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	3302      	adds	r3, #2
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	e007      	b.n	800374a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	3301      	adds	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1cc      	bne.n	8003702 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2200      	movs	r2, #0
 8003770:	2140      	movs	r1, #64	; 0x40
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fbc9 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e006      	b.n	8003790 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	e000      	b.n	8003790 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800378e:	2302      	movs	r3, #2
  }
}
 8003790:	4618      	mov	r0, r3
 8003792:	3720      	adds	r7, #32
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800379c:	b08c      	sub	sp, #48	; 0x30
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	431a      	orrs	r2, r3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	4313      	orrs	r3, r2
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4bab      	ldr	r3, [pc, #684]	; (8003a74 <UART_SetConfig+0x2dc>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037d0:	430b      	orrs	r3, r1
 80037d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4aa0      	ldr	r2, [pc, #640]	; (8003a78 <UART_SetConfig+0x2e0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d004      	beq.n	8003804 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003800:	4313      	orrs	r3, r2
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800380e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	6812      	ldr	r2, [r2, #0]
 8003816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003818:	430b      	orrs	r3, r1
 800381a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	f023 010f 	bic.w	r1, r3, #15
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a91      	ldr	r2, [pc, #580]	; (8003a7c <UART_SetConfig+0x2e4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d125      	bne.n	8003888 <UART_SetConfig+0xf0>
 800383c:	4b90      	ldr	r3, [pc, #576]	; (8003a80 <UART_SetConfig+0x2e8>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b03      	cmp	r3, #3
 8003848:	d81a      	bhi.n	8003880 <UART_SetConfig+0xe8>
 800384a:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <UART_SetConfig+0xb8>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	08003861 	.word	0x08003861
 8003854:	08003871 	.word	0x08003871
 8003858:	08003869 	.word	0x08003869
 800385c:	08003879 	.word	0x08003879
 8003860:	2301      	movs	r3, #1
 8003862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003866:	e0d6      	b.n	8003a16 <UART_SetConfig+0x27e>
 8003868:	2302      	movs	r3, #2
 800386a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800386e:	e0d2      	b.n	8003a16 <UART_SetConfig+0x27e>
 8003870:	2304      	movs	r3, #4
 8003872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003876:	e0ce      	b.n	8003a16 <UART_SetConfig+0x27e>
 8003878:	2308      	movs	r3, #8
 800387a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800387e:	e0ca      	b.n	8003a16 <UART_SetConfig+0x27e>
 8003880:	2310      	movs	r3, #16
 8003882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003886:	e0c6      	b.n	8003a16 <UART_SetConfig+0x27e>
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a7d      	ldr	r2, [pc, #500]	; (8003a84 <UART_SetConfig+0x2ec>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d138      	bne.n	8003904 <UART_SetConfig+0x16c>
 8003892:	4b7b      	ldr	r3, [pc, #492]	; (8003a80 <UART_SetConfig+0x2e8>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b0c      	cmp	r3, #12
 800389e:	d82d      	bhi.n	80038fc <UART_SetConfig+0x164>
 80038a0:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <UART_SetConfig+0x110>)
 80038a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a6:	bf00      	nop
 80038a8:	080038dd 	.word	0x080038dd
 80038ac:	080038fd 	.word	0x080038fd
 80038b0:	080038fd 	.word	0x080038fd
 80038b4:	080038fd 	.word	0x080038fd
 80038b8:	080038ed 	.word	0x080038ed
 80038bc:	080038fd 	.word	0x080038fd
 80038c0:	080038fd 	.word	0x080038fd
 80038c4:	080038fd 	.word	0x080038fd
 80038c8:	080038e5 	.word	0x080038e5
 80038cc:	080038fd 	.word	0x080038fd
 80038d0:	080038fd 	.word	0x080038fd
 80038d4:	080038fd 	.word	0x080038fd
 80038d8:	080038f5 	.word	0x080038f5
 80038dc:	2300      	movs	r3, #0
 80038de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038e2:	e098      	b.n	8003a16 <UART_SetConfig+0x27e>
 80038e4:	2302      	movs	r3, #2
 80038e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ea:	e094      	b.n	8003a16 <UART_SetConfig+0x27e>
 80038ec:	2304      	movs	r3, #4
 80038ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f2:	e090      	b.n	8003a16 <UART_SetConfig+0x27e>
 80038f4:	2308      	movs	r3, #8
 80038f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038fa:	e08c      	b.n	8003a16 <UART_SetConfig+0x27e>
 80038fc:	2310      	movs	r3, #16
 80038fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003902:	e088      	b.n	8003a16 <UART_SetConfig+0x27e>
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a5f      	ldr	r2, [pc, #380]	; (8003a88 <UART_SetConfig+0x2f0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d125      	bne.n	800395a <UART_SetConfig+0x1c2>
 800390e:	4b5c      	ldr	r3, [pc, #368]	; (8003a80 <UART_SetConfig+0x2e8>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003914:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003918:	2b30      	cmp	r3, #48	; 0x30
 800391a:	d016      	beq.n	800394a <UART_SetConfig+0x1b2>
 800391c:	2b30      	cmp	r3, #48	; 0x30
 800391e:	d818      	bhi.n	8003952 <UART_SetConfig+0x1ba>
 8003920:	2b20      	cmp	r3, #32
 8003922:	d00a      	beq.n	800393a <UART_SetConfig+0x1a2>
 8003924:	2b20      	cmp	r3, #32
 8003926:	d814      	bhi.n	8003952 <UART_SetConfig+0x1ba>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <UART_SetConfig+0x19a>
 800392c:	2b10      	cmp	r3, #16
 800392e:	d008      	beq.n	8003942 <UART_SetConfig+0x1aa>
 8003930:	e00f      	b.n	8003952 <UART_SetConfig+0x1ba>
 8003932:	2300      	movs	r3, #0
 8003934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003938:	e06d      	b.n	8003a16 <UART_SetConfig+0x27e>
 800393a:	2302      	movs	r3, #2
 800393c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003940:	e069      	b.n	8003a16 <UART_SetConfig+0x27e>
 8003942:	2304      	movs	r3, #4
 8003944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003948:	e065      	b.n	8003a16 <UART_SetConfig+0x27e>
 800394a:	2308      	movs	r3, #8
 800394c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003950:	e061      	b.n	8003a16 <UART_SetConfig+0x27e>
 8003952:	2310      	movs	r3, #16
 8003954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003958:	e05d      	b.n	8003a16 <UART_SetConfig+0x27e>
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a4b      	ldr	r2, [pc, #300]	; (8003a8c <UART_SetConfig+0x2f4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d125      	bne.n	80039b0 <UART_SetConfig+0x218>
 8003964:	4b46      	ldr	r3, [pc, #280]	; (8003a80 <UART_SetConfig+0x2e8>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800396e:	2bc0      	cmp	r3, #192	; 0xc0
 8003970:	d016      	beq.n	80039a0 <UART_SetConfig+0x208>
 8003972:	2bc0      	cmp	r3, #192	; 0xc0
 8003974:	d818      	bhi.n	80039a8 <UART_SetConfig+0x210>
 8003976:	2b80      	cmp	r3, #128	; 0x80
 8003978:	d00a      	beq.n	8003990 <UART_SetConfig+0x1f8>
 800397a:	2b80      	cmp	r3, #128	; 0x80
 800397c:	d814      	bhi.n	80039a8 <UART_SetConfig+0x210>
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <UART_SetConfig+0x1f0>
 8003982:	2b40      	cmp	r3, #64	; 0x40
 8003984:	d008      	beq.n	8003998 <UART_SetConfig+0x200>
 8003986:	e00f      	b.n	80039a8 <UART_SetConfig+0x210>
 8003988:	2300      	movs	r3, #0
 800398a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800398e:	e042      	b.n	8003a16 <UART_SetConfig+0x27e>
 8003990:	2302      	movs	r3, #2
 8003992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003996:	e03e      	b.n	8003a16 <UART_SetConfig+0x27e>
 8003998:	2304      	movs	r3, #4
 800399a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800399e:	e03a      	b.n	8003a16 <UART_SetConfig+0x27e>
 80039a0:	2308      	movs	r3, #8
 80039a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039a6:	e036      	b.n	8003a16 <UART_SetConfig+0x27e>
 80039a8:	2310      	movs	r3, #16
 80039aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ae:	e032      	b.n	8003a16 <UART_SetConfig+0x27e>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a30      	ldr	r2, [pc, #192]	; (8003a78 <UART_SetConfig+0x2e0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d12a      	bne.n	8003a10 <UART_SetConfig+0x278>
 80039ba:	4b31      	ldr	r3, [pc, #196]	; (8003a80 <UART_SetConfig+0x2e8>)
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039c8:	d01a      	beq.n	8003a00 <UART_SetConfig+0x268>
 80039ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039ce:	d81b      	bhi.n	8003a08 <UART_SetConfig+0x270>
 80039d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d4:	d00c      	beq.n	80039f0 <UART_SetConfig+0x258>
 80039d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039da:	d815      	bhi.n	8003a08 <UART_SetConfig+0x270>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <UART_SetConfig+0x250>
 80039e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e4:	d008      	beq.n	80039f8 <UART_SetConfig+0x260>
 80039e6:	e00f      	b.n	8003a08 <UART_SetConfig+0x270>
 80039e8:	2300      	movs	r3, #0
 80039ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ee:	e012      	b.n	8003a16 <UART_SetConfig+0x27e>
 80039f0:	2302      	movs	r3, #2
 80039f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039f6:	e00e      	b.n	8003a16 <UART_SetConfig+0x27e>
 80039f8:	2304      	movs	r3, #4
 80039fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039fe:	e00a      	b.n	8003a16 <UART_SetConfig+0x27e>
 8003a00:	2308      	movs	r3, #8
 8003a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a06:	e006      	b.n	8003a16 <UART_SetConfig+0x27e>
 8003a08:	2310      	movs	r3, #16
 8003a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a0e:	e002      	b.n	8003a16 <UART_SetConfig+0x27e>
 8003a10:	2310      	movs	r3, #16
 8003a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a17      	ldr	r2, [pc, #92]	; (8003a78 <UART_SetConfig+0x2e0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	f040 80a8 	bne.w	8003b72 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d834      	bhi.n	8003a94 <UART_SetConfig+0x2fc>
 8003a2a:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <UART_SetConfig+0x298>)
 8003a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a30:	08003a55 	.word	0x08003a55
 8003a34:	08003a95 	.word	0x08003a95
 8003a38:	08003a5d 	.word	0x08003a5d
 8003a3c:	08003a95 	.word	0x08003a95
 8003a40:	08003a63 	.word	0x08003a63
 8003a44:	08003a95 	.word	0x08003a95
 8003a48:	08003a95 	.word	0x08003a95
 8003a4c:	08003a95 	.word	0x08003a95
 8003a50:	08003a6b 	.word	0x08003a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a54:	f7ff fb58 	bl	8003108 <HAL_RCC_GetPCLK1Freq>
 8003a58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a5a:	e021      	b.n	8003aa0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <UART_SetConfig+0x2f8>)
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a60:	e01e      	b.n	8003aa0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a62:	f7ff fae3 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8003a66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a68:	e01a      	b.n	8003aa0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a70:	e016      	b.n	8003aa0 <UART_SetConfig+0x308>
 8003a72:	bf00      	nop
 8003a74:	cfff69f3 	.word	0xcfff69f3
 8003a78:	40008000 	.word	0x40008000
 8003a7c:	40013800 	.word	0x40013800
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40004400 	.word	0x40004400
 8003a88:	40004800 	.word	0x40004800
 8003a8c:	40004c00 	.word	0x40004c00
 8003a90:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 812a 	beq.w	8003cfc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	4a9e      	ldr	r2, [pc, #632]	; (8003d28 <UART_SetConfig+0x590>)
 8003aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	4413      	add	r3, r2
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d305      	bcc.n	8003ad8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d903      	bls.n	8003ae0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ade:	e10d      	b.n	8003cfc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	60fa      	str	r2, [r7, #12]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	4a8e      	ldr	r2, [pc, #568]	; (8003d28 <UART_SetConfig+0x590>)
 8003aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2200      	movs	r2, #0
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003afe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b02:	f7fc fbdd 	bl	80002c0 <__aeabi_uldivmod>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	020b      	lsls	r3, r1, #8
 8003b18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b1c:	0202      	lsls	r2, r0, #8
 8003b1e:	6979      	ldr	r1, [r7, #20]
 8003b20:	6849      	ldr	r1, [r1, #4]
 8003b22:	0849      	lsrs	r1, r1, #1
 8003b24:	2000      	movs	r0, #0
 8003b26:	460c      	mov	r4, r1
 8003b28:	4605      	mov	r5, r0
 8003b2a:	eb12 0804 	adds.w	r8, r2, r4
 8003b2e:	eb43 0905 	adc.w	r9, r3, r5
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	469a      	mov	sl, r3
 8003b3a:	4693      	mov	fp, r2
 8003b3c:	4652      	mov	r2, sl
 8003b3e:	465b      	mov	r3, fp
 8003b40:	4640      	mov	r0, r8
 8003b42:	4649      	mov	r1, r9
 8003b44:	f7fc fbbc 	bl	80002c0 <__aeabi_uldivmod>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b56:	d308      	bcc.n	8003b6a <UART_SetConfig+0x3d2>
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b5e:	d204      	bcs.n	8003b6a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6a3a      	ldr	r2, [r7, #32]
 8003b66:	60da      	str	r2, [r3, #12]
 8003b68:	e0c8      	b.n	8003cfc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b70:	e0c4      	b.n	8003cfc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7a:	d167      	bne.n	8003c4c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003b7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d828      	bhi.n	8003bd6 <UART_SetConfig+0x43e>
 8003b84:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <UART_SetConfig+0x3f4>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003bb1 	.word	0x08003bb1
 8003b90:	08003bb9 	.word	0x08003bb9
 8003b94:	08003bc1 	.word	0x08003bc1
 8003b98:	08003bd7 	.word	0x08003bd7
 8003b9c:	08003bc7 	.word	0x08003bc7
 8003ba0:	08003bd7 	.word	0x08003bd7
 8003ba4:	08003bd7 	.word	0x08003bd7
 8003ba8:	08003bd7 	.word	0x08003bd7
 8003bac:	08003bcf 	.word	0x08003bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb0:	f7ff faaa 	bl	8003108 <HAL_RCC_GetPCLK1Freq>
 8003bb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bb6:	e014      	b.n	8003be2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb8:	f7ff fabc 	bl	8003134 <HAL_RCC_GetPCLK2Freq>
 8003bbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bbe:	e010      	b.n	8003be2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bc0:	4b5a      	ldr	r3, [pc, #360]	; (8003d2c <UART_SetConfig+0x594>)
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bc4:	e00d      	b.n	8003be2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc6:	f7ff fa31 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8003bca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bcc:	e009      	b.n	8003be2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bd4:	e005      	b.n	8003be2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003be0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 8089 	beq.w	8003cfc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	4a4e      	ldr	r2, [pc, #312]	; (8003d28 <UART_SetConfig+0x590>)
 8003bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bfc:	005a      	lsls	r2, r3, #1
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	441a      	add	r2, r3
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	2b0f      	cmp	r3, #15
 8003c14:	d916      	bls.n	8003c44 <UART_SetConfig+0x4ac>
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1c:	d212      	bcs.n	8003c44 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	f023 030f 	bic.w	r3, r3, #15
 8003c26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	8bfb      	ldrh	r3, [r7, #30]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	8bfa      	ldrh	r2, [r7, #30]
 8003c40:	60da      	str	r2, [r3, #12]
 8003c42:	e05b      	b.n	8003cfc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c4a:	e057      	b.n	8003cfc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d828      	bhi.n	8003ca6 <UART_SetConfig+0x50e>
 8003c54:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <UART_SetConfig+0x4c4>)
 8003c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5a:	bf00      	nop
 8003c5c:	08003c81 	.word	0x08003c81
 8003c60:	08003c89 	.word	0x08003c89
 8003c64:	08003c91 	.word	0x08003c91
 8003c68:	08003ca7 	.word	0x08003ca7
 8003c6c:	08003c97 	.word	0x08003c97
 8003c70:	08003ca7 	.word	0x08003ca7
 8003c74:	08003ca7 	.word	0x08003ca7
 8003c78:	08003ca7 	.word	0x08003ca7
 8003c7c:	08003c9f 	.word	0x08003c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c80:	f7ff fa42 	bl	8003108 <HAL_RCC_GetPCLK1Freq>
 8003c84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c86:	e014      	b.n	8003cb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c88:	f7ff fa54 	bl	8003134 <HAL_RCC_GetPCLK2Freq>
 8003c8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c8e:	e010      	b.n	8003cb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c90:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <UART_SetConfig+0x594>)
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c94:	e00d      	b.n	8003cb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c96:	f7ff f9c9 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8003c9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c9c:	e009      	b.n	8003cb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ca4:	e005      	b.n	8003cb2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003cb0:	bf00      	nop
    }

    if (pclk != 0U)
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d021      	beq.n	8003cfc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	4a1a      	ldr	r2, [pc, #104]	; (8003d28 <UART_SetConfig+0x590>)
 8003cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	441a      	add	r2, r3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	2b0f      	cmp	r3, #15
 8003ce0:	d909      	bls.n	8003cf6 <UART_SetConfig+0x55e>
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce8:	d205      	bcs.n	8003cf6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60da      	str	r2, [r3, #12]
 8003cf4:	e002      	b.n	8003cfc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2200      	movs	r2, #0
 8003d16:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003d18:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3730      	adds	r7, #48	; 0x30
 8003d20:	46bd      	mov	sp, r7
 8003d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d26:	bf00      	nop
 8003d28:	08005554 	.word	0x08005554
 8003d2c:	00f42400 	.word	0x00f42400

08003d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01a      	beq.n	8003e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e2e:	d10a      	bne.n	8003e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  }
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e84:	f7fd fa7c 	bl	8001380 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d10e      	bne.n	8003eb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f82f 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e025      	b.n	8003f02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d10e      	bne.n	8003ee2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f819 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e00f      	b.n	8003f02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b09c      	sub	sp, #112	; 0x70
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	603b      	str	r3, [r7, #0]
 8003f16:	4613      	mov	r3, r2
 8003f18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1a:	e0a9      	b.n	8004070 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	f000 80a5 	beq.w	8004070 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f26:	f7fd fa2b 	bl	8001380 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d302      	bcc.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x32>
 8003f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d140      	bne.n	8003fbe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f50:	667b      	str	r3, [r7, #100]	; 0x64
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e6      	bne.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3308      	adds	r3, #8
 8003f74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	663b      	str	r3, [r7, #96]	; 0x60
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e5      	bne.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e069      	b.n	8004092 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d051      	beq.n	8004070 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fda:	d149      	bne.n	8004070 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004004:	637b      	str	r3, [r7, #52]	; 0x34
 8004006:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800400a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e6      	bne.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	613b      	str	r3, [r7, #16]
   return(result);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3308      	adds	r3, #8
 8004036:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004038:	623a      	str	r2, [r7, #32]
 800403a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	69f9      	ldr	r1, [r7, #28]
 800403e:	6a3a      	ldr	r2, [r7, #32]
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	61bb      	str	r3, [r7, #24]
   return(result);
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e5      	bne.n	8004018 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e010      	b.n	8004092 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69da      	ldr	r2, [r3, #28]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4013      	ands	r3, r2
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	429a      	cmp	r2, r3
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	429a      	cmp	r2, r3
 800408c:	f43f af46 	beq.w	8003f1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3770      	adds	r7, #112	; 0x70
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800409a:	b480      	push	{r7}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e027      	b.n	8004100 <HAL_UARTEx_DisableFifoMode+0x66>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2224      	movs	r2, #36	; 0x24
 80040bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80040de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004120:	2302      	movs	r3, #2
 8004122:	e02d      	b.n	8004180 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2224      	movs	r2, #36	; 0x24
 8004130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f84f 	bl	8004204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800419c:	2302      	movs	r3, #2
 800419e:	e02d      	b.n	80041fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2224      	movs	r2, #36	; 0x24
 80041ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f811 	bl	8004204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004210:	2b00      	cmp	r3, #0
 8004212:	d108      	bne.n	8004226 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004224:	e031      	b.n	800428a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004226:	2308      	movs	r3, #8
 8004228:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800422a:	2308      	movs	r3, #8
 800422c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	0e5b      	lsrs	r3, r3, #25
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	0f5b      	lsrs	r3, r3, #29
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800424e:	7bbb      	ldrb	r3, [r7, #14]
 8004250:	7b3a      	ldrb	r2, [r7, #12]
 8004252:	4911      	ldr	r1, [pc, #68]	; (8004298 <UARTEx_SetNbDataToProcess+0x94>)
 8004254:	5c8a      	ldrb	r2, [r1, r2]
 8004256:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800425a:	7b3a      	ldrb	r2, [r7, #12]
 800425c:	490f      	ldr	r1, [pc, #60]	; (800429c <UARTEx_SetNbDataToProcess+0x98>)
 800425e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004260:	fb93 f3f2 	sdiv	r3, r3, r2
 8004264:	b29a      	uxth	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	7b7a      	ldrb	r2, [r7, #13]
 8004270:	4909      	ldr	r1, [pc, #36]	; (8004298 <UARTEx_SetNbDataToProcess+0x94>)
 8004272:	5c8a      	ldrb	r2, [r1, r2]
 8004274:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004278:	7b7a      	ldrb	r2, [r7, #13]
 800427a:	4908      	ldr	r1, [pc, #32]	; (800429c <UARTEx_SetNbDataToProcess+0x98>)
 800427c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800427e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004282:	b29a      	uxth	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800428a:	bf00      	nop
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	0800556c 	.word	0x0800556c
 800429c:	08005574 	.word	0x08005574

080042a0 <__errno>:
 80042a0:	4b01      	ldr	r3, [pc, #4]	; (80042a8 <__errno+0x8>)
 80042a2:	6818      	ldr	r0, [r3, #0]
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	2000000c 	.word	0x2000000c

080042ac <__libc_init_array>:
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	4d0d      	ldr	r5, [pc, #52]	; (80042e4 <__libc_init_array+0x38>)
 80042b0:	4c0d      	ldr	r4, [pc, #52]	; (80042e8 <__libc_init_array+0x3c>)
 80042b2:	1b64      	subs	r4, r4, r5
 80042b4:	10a4      	asrs	r4, r4, #2
 80042b6:	2600      	movs	r6, #0
 80042b8:	42a6      	cmp	r6, r4
 80042ba:	d109      	bne.n	80042d0 <__libc_init_array+0x24>
 80042bc:	4d0b      	ldr	r5, [pc, #44]	; (80042ec <__libc_init_array+0x40>)
 80042be:	4c0c      	ldr	r4, [pc, #48]	; (80042f0 <__libc_init_array+0x44>)
 80042c0:	f001 f8fa 	bl	80054b8 <_init>
 80042c4:	1b64      	subs	r4, r4, r5
 80042c6:	10a4      	asrs	r4, r4, #2
 80042c8:	2600      	movs	r6, #0
 80042ca:	42a6      	cmp	r6, r4
 80042cc:	d105      	bne.n	80042da <__libc_init_array+0x2e>
 80042ce:	bd70      	pop	{r4, r5, r6, pc}
 80042d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d4:	4798      	blx	r3
 80042d6:	3601      	adds	r6, #1
 80042d8:	e7ee      	b.n	80042b8 <__libc_init_array+0xc>
 80042da:	f855 3b04 	ldr.w	r3, [r5], #4
 80042de:	4798      	blx	r3
 80042e0:	3601      	adds	r6, #1
 80042e2:	e7f2      	b.n	80042ca <__libc_init_array+0x1e>
 80042e4:	0800561c 	.word	0x0800561c
 80042e8:	0800561c 	.word	0x0800561c
 80042ec:	0800561c 	.word	0x0800561c
 80042f0:	08005620 	.word	0x08005620

080042f4 <memset>:
 80042f4:	4402      	add	r2, r0
 80042f6:	4603      	mov	r3, r0
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d100      	bne.n	80042fe <memset+0xa>
 80042fc:	4770      	bx	lr
 80042fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004302:	e7f9      	b.n	80042f8 <memset+0x4>

08004304 <iprintf>:
 8004304:	b40f      	push	{r0, r1, r2, r3}
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <iprintf+0x2c>)
 8004308:	b513      	push	{r0, r1, r4, lr}
 800430a:	681c      	ldr	r4, [r3, #0]
 800430c:	b124      	cbz	r4, 8004318 <iprintf+0x14>
 800430e:	69a3      	ldr	r3, [r4, #24]
 8004310:	b913      	cbnz	r3, 8004318 <iprintf+0x14>
 8004312:	4620      	mov	r0, r4
 8004314:	f000 fb2c 	bl	8004970 <__sinit>
 8004318:	ab05      	add	r3, sp, #20
 800431a:	9a04      	ldr	r2, [sp, #16]
 800431c:	68a1      	ldr	r1, [r4, #8]
 800431e:	9301      	str	r3, [sp, #4]
 8004320:	4620      	mov	r0, r4
 8004322:	f000 fd3d 	bl	8004da0 <_vfiprintf_r>
 8004326:	b002      	add	sp, #8
 8004328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800432c:	b004      	add	sp, #16
 800432e:	4770      	bx	lr
 8004330:	2000000c 	.word	0x2000000c

08004334 <_puts_r>:
 8004334:	b570      	push	{r4, r5, r6, lr}
 8004336:	460e      	mov	r6, r1
 8004338:	4605      	mov	r5, r0
 800433a:	b118      	cbz	r0, 8004344 <_puts_r+0x10>
 800433c:	6983      	ldr	r3, [r0, #24]
 800433e:	b90b      	cbnz	r3, 8004344 <_puts_r+0x10>
 8004340:	f000 fb16 	bl	8004970 <__sinit>
 8004344:	69ab      	ldr	r3, [r5, #24]
 8004346:	68ac      	ldr	r4, [r5, #8]
 8004348:	b913      	cbnz	r3, 8004350 <_puts_r+0x1c>
 800434a:	4628      	mov	r0, r5
 800434c:	f000 fb10 	bl	8004970 <__sinit>
 8004350:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <_puts_r+0xd0>)
 8004352:	429c      	cmp	r4, r3
 8004354:	d120      	bne.n	8004398 <_puts_r+0x64>
 8004356:	686c      	ldr	r4, [r5, #4]
 8004358:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800435a:	07db      	lsls	r3, r3, #31
 800435c:	d405      	bmi.n	800436a <_puts_r+0x36>
 800435e:	89a3      	ldrh	r3, [r4, #12]
 8004360:	0598      	lsls	r0, r3, #22
 8004362:	d402      	bmi.n	800436a <_puts_r+0x36>
 8004364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004366:	f000 fba1 	bl	8004aac <__retarget_lock_acquire_recursive>
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	0719      	lsls	r1, r3, #28
 800436e:	d51d      	bpl.n	80043ac <_puts_r+0x78>
 8004370:	6923      	ldr	r3, [r4, #16]
 8004372:	b1db      	cbz	r3, 80043ac <_puts_r+0x78>
 8004374:	3e01      	subs	r6, #1
 8004376:	68a3      	ldr	r3, [r4, #8]
 8004378:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800437c:	3b01      	subs	r3, #1
 800437e:	60a3      	str	r3, [r4, #8]
 8004380:	bb39      	cbnz	r1, 80043d2 <_puts_r+0x9e>
 8004382:	2b00      	cmp	r3, #0
 8004384:	da38      	bge.n	80043f8 <_puts_r+0xc4>
 8004386:	4622      	mov	r2, r4
 8004388:	210a      	movs	r1, #10
 800438a:	4628      	mov	r0, r5
 800438c:	f000 f916 	bl	80045bc <__swbuf_r>
 8004390:	3001      	adds	r0, #1
 8004392:	d011      	beq.n	80043b8 <_puts_r+0x84>
 8004394:	250a      	movs	r5, #10
 8004396:	e011      	b.n	80043bc <_puts_r+0x88>
 8004398:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <_puts_r+0xd4>)
 800439a:	429c      	cmp	r4, r3
 800439c:	d101      	bne.n	80043a2 <_puts_r+0x6e>
 800439e:	68ac      	ldr	r4, [r5, #8]
 80043a0:	e7da      	b.n	8004358 <_puts_r+0x24>
 80043a2:	4b1a      	ldr	r3, [pc, #104]	; (800440c <_puts_r+0xd8>)
 80043a4:	429c      	cmp	r4, r3
 80043a6:	bf08      	it	eq
 80043a8:	68ec      	ldreq	r4, [r5, #12]
 80043aa:	e7d5      	b.n	8004358 <_puts_r+0x24>
 80043ac:	4621      	mov	r1, r4
 80043ae:	4628      	mov	r0, r5
 80043b0:	f000 f956 	bl	8004660 <__swsetup_r>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d0dd      	beq.n	8004374 <_puts_r+0x40>
 80043b8:	f04f 35ff 	mov.w	r5, #4294967295
 80043bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043be:	07da      	lsls	r2, r3, #31
 80043c0:	d405      	bmi.n	80043ce <_puts_r+0x9a>
 80043c2:	89a3      	ldrh	r3, [r4, #12]
 80043c4:	059b      	lsls	r3, r3, #22
 80043c6:	d402      	bmi.n	80043ce <_puts_r+0x9a>
 80043c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043ca:	f000 fb70 	bl	8004aae <__retarget_lock_release_recursive>
 80043ce:	4628      	mov	r0, r5
 80043d0:	bd70      	pop	{r4, r5, r6, pc}
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	da04      	bge.n	80043e0 <_puts_r+0xac>
 80043d6:	69a2      	ldr	r2, [r4, #24]
 80043d8:	429a      	cmp	r2, r3
 80043da:	dc06      	bgt.n	80043ea <_puts_r+0xb6>
 80043dc:	290a      	cmp	r1, #10
 80043de:	d004      	beq.n	80043ea <_puts_r+0xb6>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	6022      	str	r2, [r4, #0]
 80043e6:	7019      	strb	r1, [r3, #0]
 80043e8:	e7c5      	b.n	8004376 <_puts_r+0x42>
 80043ea:	4622      	mov	r2, r4
 80043ec:	4628      	mov	r0, r5
 80043ee:	f000 f8e5 	bl	80045bc <__swbuf_r>
 80043f2:	3001      	adds	r0, #1
 80043f4:	d1bf      	bne.n	8004376 <_puts_r+0x42>
 80043f6:	e7df      	b.n	80043b8 <_puts_r+0x84>
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	250a      	movs	r5, #10
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	6022      	str	r2, [r4, #0]
 8004400:	701d      	strb	r5, [r3, #0]
 8004402:	e7db      	b.n	80043bc <_puts_r+0x88>
 8004404:	080055a0 	.word	0x080055a0
 8004408:	080055c0 	.word	0x080055c0
 800440c:	08005580 	.word	0x08005580

08004410 <puts>:
 8004410:	4b02      	ldr	r3, [pc, #8]	; (800441c <puts+0xc>)
 8004412:	4601      	mov	r1, r0
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	f7ff bf8d 	b.w	8004334 <_puts_r>
 800441a:	bf00      	nop
 800441c:	2000000c 	.word	0x2000000c

08004420 <setbuf>:
 8004420:	2900      	cmp	r1, #0
 8004422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004426:	bf0c      	ite	eq
 8004428:	2202      	moveq	r2, #2
 800442a:	2200      	movne	r2, #0
 800442c:	f000 b800 	b.w	8004430 <setvbuf>

08004430 <setvbuf>:
 8004430:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004434:	461d      	mov	r5, r3
 8004436:	4b5d      	ldr	r3, [pc, #372]	; (80045ac <setvbuf+0x17c>)
 8004438:	681f      	ldr	r7, [r3, #0]
 800443a:	4604      	mov	r4, r0
 800443c:	460e      	mov	r6, r1
 800443e:	4690      	mov	r8, r2
 8004440:	b127      	cbz	r7, 800444c <setvbuf+0x1c>
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	b913      	cbnz	r3, 800444c <setvbuf+0x1c>
 8004446:	4638      	mov	r0, r7
 8004448:	f000 fa92 	bl	8004970 <__sinit>
 800444c:	4b58      	ldr	r3, [pc, #352]	; (80045b0 <setvbuf+0x180>)
 800444e:	429c      	cmp	r4, r3
 8004450:	d167      	bne.n	8004522 <setvbuf+0xf2>
 8004452:	687c      	ldr	r4, [r7, #4]
 8004454:	f1b8 0f02 	cmp.w	r8, #2
 8004458:	d006      	beq.n	8004468 <setvbuf+0x38>
 800445a:	f1b8 0f01 	cmp.w	r8, #1
 800445e:	f200 809f 	bhi.w	80045a0 <setvbuf+0x170>
 8004462:	2d00      	cmp	r5, #0
 8004464:	f2c0 809c 	blt.w	80045a0 <setvbuf+0x170>
 8004468:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800446a:	07db      	lsls	r3, r3, #31
 800446c:	d405      	bmi.n	800447a <setvbuf+0x4a>
 800446e:	89a3      	ldrh	r3, [r4, #12]
 8004470:	0598      	lsls	r0, r3, #22
 8004472:	d402      	bmi.n	800447a <setvbuf+0x4a>
 8004474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004476:	f000 fb19 	bl	8004aac <__retarget_lock_acquire_recursive>
 800447a:	4621      	mov	r1, r4
 800447c:	4638      	mov	r0, r7
 800447e:	f000 f9e3 	bl	8004848 <_fflush_r>
 8004482:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004484:	b141      	cbz	r1, 8004498 <setvbuf+0x68>
 8004486:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800448a:	4299      	cmp	r1, r3
 800448c:	d002      	beq.n	8004494 <setvbuf+0x64>
 800448e:	4638      	mov	r0, r7
 8004490:	f000 fb7c 	bl	8004b8c <_free_r>
 8004494:	2300      	movs	r3, #0
 8004496:	6363      	str	r3, [r4, #52]	; 0x34
 8004498:	2300      	movs	r3, #0
 800449a:	61a3      	str	r3, [r4, #24]
 800449c:	6063      	str	r3, [r4, #4]
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	0619      	lsls	r1, r3, #24
 80044a2:	d503      	bpl.n	80044ac <setvbuf+0x7c>
 80044a4:	6921      	ldr	r1, [r4, #16]
 80044a6:	4638      	mov	r0, r7
 80044a8:	f000 fb70 	bl	8004b8c <_free_r>
 80044ac:	89a3      	ldrh	r3, [r4, #12]
 80044ae:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	f1b8 0f02 	cmp.w	r8, #2
 80044ba:	81a3      	strh	r3, [r4, #12]
 80044bc:	d06c      	beq.n	8004598 <setvbuf+0x168>
 80044be:	ab01      	add	r3, sp, #4
 80044c0:	466a      	mov	r2, sp
 80044c2:	4621      	mov	r1, r4
 80044c4:	4638      	mov	r0, r7
 80044c6:	f000 faf3 	bl	8004ab0 <__swhatbuf_r>
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	4318      	orrs	r0, r3
 80044ce:	81a0      	strh	r0, [r4, #12]
 80044d0:	2d00      	cmp	r5, #0
 80044d2:	d130      	bne.n	8004536 <setvbuf+0x106>
 80044d4:	9d00      	ldr	r5, [sp, #0]
 80044d6:	4628      	mov	r0, r5
 80044d8:	f000 fb50 	bl	8004b7c <malloc>
 80044dc:	4606      	mov	r6, r0
 80044de:	2800      	cmp	r0, #0
 80044e0:	d155      	bne.n	800458e <setvbuf+0x15e>
 80044e2:	f8dd 9000 	ldr.w	r9, [sp]
 80044e6:	45a9      	cmp	r9, r5
 80044e8:	d14a      	bne.n	8004580 <setvbuf+0x150>
 80044ea:	f04f 35ff 	mov.w	r5, #4294967295
 80044ee:	2200      	movs	r2, #0
 80044f0:	60a2      	str	r2, [r4, #8]
 80044f2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80044f6:	6022      	str	r2, [r4, #0]
 80044f8:	6122      	str	r2, [r4, #16]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004500:	6162      	str	r2, [r4, #20]
 8004502:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	07d2      	lsls	r2, r2, #31
 800450a:	81a3      	strh	r3, [r4, #12]
 800450c:	d405      	bmi.n	800451a <setvbuf+0xea>
 800450e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004512:	d102      	bne.n	800451a <setvbuf+0xea>
 8004514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004516:	f000 faca 	bl	8004aae <__retarget_lock_release_recursive>
 800451a:	4628      	mov	r0, r5
 800451c:	b003      	add	sp, #12
 800451e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004522:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <setvbuf+0x184>)
 8004524:	429c      	cmp	r4, r3
 8004526:	d101      	bne.n	800452c <setvbuf+0xfc>
 8004528:	68bc      	ldr	r4, [r7, #8]
 800452a:	e793      	b.n	8004454 <setvbuf+0x24>
 800452c:	4b22      	ldr	r3, [pc, #136]	; (80045b8 <setvbuf+0x188>)
 800452e:	429c      	cmp	r4, r3
 8004530:	bf08      	it	eq
 8004532:	68fc      	ldreq	r4, [r7, #12]
 8004534:	e78e      	b.n	8004454 <setvbuf+0x24>
 8004536:	2e00      	cmp	r6, #0
 8004538:	d0cd      	beq.n	80044d6 <setvbuf+0xa6>
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	b913      	cbnz	r3, 8004544 <setvbuf+0x114>
 800453e:	4638      	mov	r0, r7
 8004540:	f000 fa16 	bl	8004970 <__sinit>
 8004544:	f1b8 0f01 	cmp.w	r8, #1
 8004548:	bf08      	it	eq
 800454a:	89a3      	ldrheq	r3, [r4, #12]
 800454c:	6026      	str	r6, [r4, #0]
 800454e:	bf04      	itt	eq
 8004550:	f043 0301 	orreq.w	r3, r3, #1
 8004554:	81a3      	strheq	r3, [r4, #12]
 8004556:	89a2      	ldrh	r2, [r4, #12]
 8004558:	f012 0308 	ands.w	r3, r2, #8
 800455c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004560:	d01c      	beq.n	800459c <setvbuf+0x16c>
 8004562:	07d3      	lsls	r3, r2, #31
 8004564:	bf41      	itttt	mi
 8004566:	2300      	movmi	r3, #0
 8004568:	426d      	negmi	r5, r5
 800456a:	60a3      	strmi	r3, [r4, #8]
 800456c:	61a5      	strmi	r5, [r4, #24]
 800456e:	bf58      	it	pl
 8004570:	60a5      	strpl	r5, [r4, #8]
 8004572:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004574:	f015 0501 	ands.w	r5, r5, #1
 8004578:	d115      	bne.n	80045a6 <setvbuf+0x176>
 800457a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800457e:	e7c8      	b.n	8004512 <setvbuf+0xe2>
 8004580:	4648      	mov	r0, r9
 8004582:	f000 fafb 	bl	8004b7c <malloc>
 8004586:	4606      	mov	r6, r0
 8004588:	2800      	cmp	r0, #0
 800458a:	d0ae      	beq.n	80044ea <setvbuf+0xba>
 800458c:	464d      	mov	r5, r9
 800458e:	89a3      	ldrh	r3, [r4, #12]
 8004590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004594:	81a3      	strh	r3, [r4, #12]
 8004596:	e7d0      	b.n	800453a <setvbuf+0x10a>
 8004598:	2500      	movs	r5, #0
 800459a:	e7a8      	b.n	80044ee <setvbuf+0xbe>
 800459c:	60a3      	str	r3, [r4, #8]
 800459e:	e7e8      	b.n	8004572 <setvbuf+0x142>
 80045a0:	f04f 35ff 	mov.w	r5, #4294967295
 80045a4:	e7b9      	b.n	800451a <setvbuf+0xea>
 80045a6:	2500      	movs	r5, #0
 80045a8:	e7b7      	b.n	800451a <setvbuf+0xea>
 80045aa:	bf00      	nop
 80045ac:	2000000c 	.word	0x2000000c
 80045b0:	080055a0 	.word	0x080055a0
 80045b4:	080055c0 	.word	0x080055c0
 80045b8:	08005580 	.word	0x08005580

080045bc <__swbuf_r>:
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045be:	460e      	mov	r6, r1
 80045c0:	4614      	mov	r4, r2
 80045c2:	4605      	mov	r5, r0
 80045c4:	b118      	cbz	r0, 80045ce <__swbuf_r+0x12>
 80045c6:	6983      	ldr	r3, [r0, #24]
 80045c8:	b90b      	cbnz	r3, 80045ce <__swbuf_r+0x12>
 80045ca:	f000 f9d1 	bl	8004970 <__sinit>
 80045ce:	4b21      	ldr	r3, [pc, #132]	; (8004654 <__swbuf_r+0x98>)
 80045d0:	429c      	cmp	r4, r3
 80045d2:	d12b      	bne.n	800462c <__swbuf_r+0x70>
 80045d4:	686c      	ldr	r4, [r5, #4]
 80045d6:	69a3      	ldr	r3, [r4, #24]
 80045d8:	60a3      	str	r3, [r4, #8]
 80045da:	89a3      	ldrh	r3, [r4, #12]
 80045dc:	071a      	lsls	r2, r3, #28
 80045de:	d52f      	bpl.n	8004640 <__swbuf_r+0x84>
 80045e0:	6923      	ldr	r3, [r4, #16]
 80045e2:	b36b      	cbz	r3, 8004640 <__swbuf_r+0x84>
 80045e4:	6923      	ldr	r3, [r4, #16]
 80045e6:	6820      	ldr	r0, [r4, #0]
 80045e8:	1ac0      	subs	r0, r0, r3
 80045ea:	6963      	ldr	r3, [r4, #20]
 80045ec:	b2f6      	uxtb	r6, r6
 80045ee:	4283      	cmp	r3, r0
 80045f0:	4637      	mov	r7, r6
 80045f2:	dc04      	bgt.n	80045fe <__swbuf_r+0x42>
 80045f4:	4621      	mov	r1, r4
 80045f6:	4628      	mov	r0, r5
 80045f8:	f000 f926 	bl	8004848 <_fflush_r>
 80045fc:	bb30      	cbnz	r0, 800464c <__swbuf_r+0x90>
 80045fe:	68a3      	ldr	r3, [r4, #8]
 8004600:	3b01      	subs	r3, #1
 8004602:	60a3      	str	r3, [r4, #8]
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	6022      	str	r2, [r4, #0]
 800460a:	701e      	strb	r6, [r3, #0]
 800460c:	6963      	ldr	r3, [r4, #20]
 800460e:	3001      	adds	r0, #1
 8004610:	4283      	cmp	r3, r0
 8004612:	d004      	beq.n	800461e <__swbuf_r+0x62>
 8004614:	89a3      	ldrh	r3, [r4, #12]
 8004616:	07db      	lsls	r3, r3, #31
 8004618:	d506      	bpl.n	8004628 <__swbuf_r+0x6c>
 800461a:	2e0a      	cmp	r6, #10
 800461c:	d104      	bne.n	8004628 <__swbuf_r+0x6c>
 800461e:	4621      	mov	r1, r4
 8004620:	4628      	mov	r0, r5
 8004622:	f000 f911 	bl	8004848 <_fflush_r>
 8004626:	b988      	cbnz	r0, 800464c <__swbuf_r+0x90>
 8004628:	4638      	mov	r0, r7
 800462a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800462c:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <__swbuf_r+0x9c>)
 800462e:	429c      	cmp	r4, r3
 8004630:	d101      	bne.n	8004636 <__swbuf_r+0x7a>
 8004632:	68ac      	ldr	r4, [r5, #8]
 8004634:	e7cf      	b.n	80045d6 <__swbuf_r+0x1a>
 8004636:	4b09      	ldr	r3, [pc, #36]	; (800465c <__swbuf_r+0xa0>)
 8004638:	429c      	cmp	r4, r3
 800463a:	bf08      	it	eq
 800463c:	68ec      	ldreq	r4, [r5, #12]
 800463e:	e7ca      	b.n	80045d6 <__swbuf_r+0x1a>
 8004640:	4621      	mov	r1, r4
 8004642:	4628      	mov	r0, r5
 8004644:	f000 f80c 	bl	8004660 <__swsetup_r>
 8004648:	2800      	cmp	r0, #0
 800464a:	d0cb      	beq.n	80045e4 <__swbuf_r+0x28>
 800464c:	f04f 37ff 	mov.w	r7, #4294967295
 8004650:	e7ea      	b.n	8004628 <__swbuf_r+0x6c>
 8004652:	bf00      	nop
 8004654:	080055a0 	.word	0x080055a0
 8004658:	080055c0 	.word	0x080055c0
 800465c:	08005580 	.word	0x08005580

08004660 <__swsetup_r>:
 8004660:	4b32      	ldr	r3, [pc, #200]	; (800472c <__swsetup_r+0xcc>)
 8004662:	b570      	push	{r4, r5, r6, lr}
 8004664:	681d      	ldr	r5, [r3, #0]
 8004666:	4606      	mov	r6, r0
 8004668:	460c      	mov	r4, r1
 800466a:	b125      	cbz	r5, 8004676 <__swsetup_r+0x16>
 800466c:	69ab      	ldr	r3, [r5, #24]
 800466e:	b913      	cbnz	r3, 8004676 <__swsetup_r+0x16>
 8004670:	4628      	mov	r0, r5
 8004672:	f000 f97d 	bl	8004970 <__sinit>
 8004676:	4b2e      	ldr	r3, [pc, #184]	; (8004730 <__swsetup_r+0xd0>)
 8004678:	429c      	cmp	r4, r3
 800467a:	d10f      	bne.n	800469c <__swsetup_r+0x3c>
 800467c:	686c      	ldr	r4, [r5, #4]
 800467e:	89a3      	ldrh	r3, [r4, #12]
 8004680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004684:	0719      	lsls	r1, r3, #28
 8004686:	d42c      	bmi.n	80046e2 <__swsetup_r+0x82>
 8004688:	06dd      	lsls	r5, r3, #27
 800468a:	d411      	bmi.n	80046b0 <__swsetup_r+0x50>
 800468c:	2309      	movs	r3, #9
 800468e:	6033      	str	r3, [r6, #0]
 8004690:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004694:	81a3      	strh	r3, [r4, #12]
 8004696:	f04f 30ff 	mov.w	r0, #4294967295
 800469a:	e03e      	b.n	800471a <__swsetup_r+0xba>
 800469c:	4b25      	ldr	r3, [pc, #148]	; (8004734 <__swsetup_r+0xd4>)
 800469e:	429c      	cmp	r4, r3
 80046a0:	d101      	bne.n	80046a6 <__swsetup_r+0x46>
 80046a2:	68ac      	ldr	r4, [r5, #8]
 80046a4:	e7eb      	b.n	800467e <__swsetup_r+0x1e>
 80046a6:	4b24      	ldr	r3, [pc, #144]	; (8004738 <__swsetup_r+0xd8>)
 80046a8:	429c      	cmp	r4, r3
 80046aa:	bf08      	it	eq
 80046ac:	68ec      	ldreq	r4, [r5, #12]
 80046ae:	e7e6      	b.n	800467e <__swsetup_r+0x1e>
 80046b0:	0758      	lsls	r0, r3, #29
 80046b2:	d512      	bpl.n	80046da <__swsetup_r+0x7a>
 80046b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046b6:	b141      	cbz	r1, 80046ca <__swsetup_r+0x6a>
 80046b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046bc:	4299      	cmp	r1, r3
 80046be:	d002      	beq.n	80046c6 <__swsetup_r+0x66>
 80046c0:	4630      	mov	r0, r6
 80046c2:	f000 fa63 	bl	8004b8c <_free_r>
 80046c6:	2300      	movs	r3, #0
 80046c8:	6363      	str	r3, [r4, #52]	; 0x34
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	2300      	movs	r3, #0
 80046d4:	6063      	str	r3, [r4, #4]
 80046d6:	6923      	ldr	r3, [r4, #16]
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	f043 0308 	orr.w	r3, r3, #8
 80046e0:	81a3      	strh	r3, [r4, #12]
 80046e2:	6923      	ldr	r3, [r4, #16]
 80046e4:	b94b      	cbnz	r3, 80046fa <__swsetup_r+0x9a>
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f0:	d003      	beq.n	80046fa <__swsetup_r+0x9a>
 80046f2:	4621      	mov	r1, r4
 80046f4:	4630      	mov	r0, r6
 80046f6:	f000 fa01 	bl	8004afc <__smakebuf_r>
 80046fa:	89a0      	ldrh	r0, [r4, #12]
 80046fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004700:	f010 0301 	ands.w	r3, r0, #1
 8004704:	d00a      	beq.n	800471c <__swsetup_r+0xbc>
 8004706:	2300      	movs	r3, #0
 8004708:	60a3      	str	r3, [r4, #8]
 800470a:	6963      	ldr	r3, [r4, #20]
 800470c:	425b      	negs	r3, r3
 800470e:	61a3      	str	r3, [r4, #24]
 8004710:	6923      	ldr	r3, [r4, #16]
 8004712:	b943      	cbnz	r3, 8004726 <__swsetup_r+0xc6>
 8004714:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004718:	d1ba      	bne.n	8004690 <__swsetup_r+0x30>
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	0781      	lsls	r1, r0, #30
 800471e:	bf58      	it	pl
 8004720:	6963      	ldrpl	r3, [r4, #20]
 8004722:	60a3      	str	r3, [r4, #8]
 8004724:	e7f4      	b.n	8004710 <__swsetup_r+0xb0>
 8004726:	2000      	movs	r0, #0
 8004728:	e7f7      	b.n	800471a <__swsetup_r+0xba>
 800472a:	bf00      	nop
 800472c:	2000000c 	.word	0x2000000c
 8004730:	080055a0 	.word	0x080055a0
 8004734:	080055c0 	.word	0x080055c0
 8004738:	08005580 	.word	0x08005580

0800473c <__sflush_r>:
 800473c:	898a      	ldrh	r2, [r1, #12]
 800473e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004742:	4605      	mov	r5, r0
 8004744:	0710      	lsls	r0, r2, #28
 8004746:	460c      	mov	r4, r1
 8004748:	d458      	bmi.n	80047fc <__sflush_r+0xc0>
 800474a:	684b      	ldr	r3, [r1, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	dc05      	bgt.n	800475c <__sflush_r+0x20>
 8004750:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	dc02      	bgt.n	800475c <__sflush_r+0x20>
 8004756:	2000      	movs	r0, #0
 8004758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800475c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800475e:	2e00      	cmp	r6, #0
 8004760:	d0f9      	beq.n	8004756 <__sflush_r+0x1a>
 8004762:	2300      	movs	r3, #0
 8004764:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004768:	682f      	ldr	r7, [r5, #0]
 800476a:	602b      	str	r3, [r5, #0]
 800476c:	d032      	beq.n	80047d4 <__sflush_r+0x98>
 800476e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004770:	89a3      	ldrh	r3, [r4, #12]
 8004772:	075a      	lsls	r2, r3, #29
 8004774:	d505      	bpl.n	8004782 <__sflush_r+0x46>
 8004776:	6863      	ldr	r3, [r4, #4]
 8004778:	1ac0      	subs	r0, r0, r3
 800477a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800477c:	b10b      	cbz	r3, 8004782 <__sflush_r+0x46>
 800477e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004780:	1ac0      	subs	r0, r0, r3
 8004782:	2300      	movs	r3, #0
 8004784:	4602      	mov	r2, r0
 8004786:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004788:	6a21      	ldr	r1, [r4, #32]
 800478a:	4628      	mov	r0, r5
 800478c:	47b0      	blx	r6
 800478e:	1c43      	adds	r3, r0, #1
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	d106      	bne.n	80047a2 <__sflush_r+0x66>
 8004794:	6829      	ldr	r1, [r5, #0]
 8004796:	291d      	cmp	r1, #29
 8004798:	d82c      	bhi.n	80047f4 <__sflush_r+0xb8>
 800479a:	4a2a      	ldr	r2, [pc, #168]	; (8004844 <__sflush_r+0x108>)
 800479c:	40ca      	lsrs	r2, r1
 800479e:	07d6      	lsls	r6, r2, #31
 80047a0:	d528      	bpl.n	80047f4 <__sflush_r+0xb8>
 80047a2:	2200      	movs	r2, #0
 80047a4:	6062      	str	r2, [r4, #4]
 80047a6:	04d9      	lsls	r1, r3, #19
 80047a8:	6922      	ldr	r2, [r4, #16]
 80047aa:	6022      	str	r2, [r4, #0]
 80047ac:	d504      	bpl.n	80047b8 <__sflush_r+0x7c>
 80047ae:	1c42      	adds	r2, r0, #1
 80047b0:	d101      	bne.n	80047b6 <__sflush_r+0x7a>
 80047b2:	682b      	ldr	r3, [r5, #0]
 80047b4:	b903      	cbnz	r3, 80047b8 <__sflush_r+0x7c>
 80047b6:	6560      	str	r0, [r4, #84]	; 0x54
 80047b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047ba:	602f      	str	r7, [r5, #0]
 80047bc:	2900      	cmp	r1, #0
 80047be:	d0ca      	beq.n	8004756 <__sflush_r+0x1a>
 80047c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047c4:	4299      	cmp	r1, r3
 80047c6:	d002      	beq.n	80047ce <__sflush_r+0x92>
 80047c8:	4628      	mov	r0, r5
 80047ca:	f000 f9df 	bl	8004b8c <_free_r>
 80047ce:	2000      	movs	r0, #0
 80047d0:	6360      	str	r0, [r4, #52]	; 0x34
 80047d2:	e7c1      	b.n	8004758 <__sflush_r+0x1c>
 80047d4:	6a21      	ldr	r1, [r4, #32]
 80047d6:	2301      	movs	r3, #1
 80047d8:	4628      	mov	r0, r5
 80047da:	47b0      	blx	r6
 80047dc:	1c41      	adds	r1, r0, #1
 80047de:	d1c7      	bne.n	8004770 <__sflush_r+0x34>
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0c4      	beq.n	8004770 <__sflush_r+0x34>
 80047e6:	2b1d      	cmp	r3, #29
 80047e8:	d001      	beq.n	80047ee <__sflush_r+0xb2>
 80047ea:	2b16      	cmp	r3, #22
 80047ec:	d101      	bne.n	80047f2 <__sflush_r+0xb6>
 80047ee:	602f      	str	r7, [r5, #0]
 80047f0:	e7b1      	b.n	8004756 <__sflush_r+0x1a>
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f8:	81a3      	strh	r3, [r4, #12]
 80047fa:	e7ad      	b.n	8004758 <__sflush_r+0x1c>
 80047fc:	690f      	ldr	r7, [r1, #16]
 80047fe:	2f00      	cmp	r7, #0
 8004800:	d0a9      	beq.n	8004756 <__sflush_r+0x1a>
 8004802:	0793      	lsls	r3, r2, #30
 8004804:	680e      	ldr	r6, [r1, #0]
 8004806:	bf08      	it	eq
 8004808:	694b      	ldreq	r3, [r1, #20]
 800480a:	600f      	str	r7, [r1, #0]
 800480c:	bf18      	it	ne
 800480e:	2300      	movne	r3, #0
 8004810:	eba6 0807 	sub.w	r8, r6, r7
 8004814:	608b      	str	r3, [r1, #8]
 8004816:	f1b8 0f00 	cmp.w	r8, #0
 800481a:	dd9c      	ble.n	8004756 <__sflush_r+0x1a>
 800481c:	6a21      	ldr	r1, [r4, #32]
 800481e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004820:	4643      	mov	r3, r8
 8004822:	463a      	mov	r2, r7
 8004824:	4628      	mov	r0, r5
 8004826:	47b0      	blx	r6
 8004828:	2800      	cmp	r0, #0
 800482a:	dc06      	bgt.n	800483a <__sflush_r+0xfe>
 800482c:	89a3      	ldrh	r3, [r4, #12]
 800482e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004832:	81a3      	strh	r3, [r4, #12]
 8004834:	f04f 30ff 	mov.w	r0, #4294967295
 8004838:	e78e      	b.n	8004758 <__sflush_r+0x1c>
 800483a:	4407      	add	r7, r0
 800483c:	eba8 0800 	sub.w	r8, r8, r0
 8004840:	e7e9      	b.n	8004816 <__sflush_r+0xda>
 8004842:	bf00      	nop
 8004844:	20400001 	.word	0x20400001

08004848 <_fflush_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	690b      	ldr	r3, [r1, #16]
 800484c:	4605      	mov	r5, r0
 800484e:	460c      	mov	r4, r1
 8004850:	b913      	cbnz	r3, 8004858 <_fflush_r+0x10>
 8004852:	2500      	movs	r5, #0
 8004854:	4628      	mov	r0, r5
 8004856:	bd38      	pop	{r3, r4, r5, pc}
 8004858:	b118      	cbz	r0, 8004862 <_fflush_r+0x1a>
 800485a:	6983      	ldr	r3, [r0, #24]
 800485c:	b90b      	cbnz	r3, 8004862 <_fflush_r+0x1a>
 800485e:	f000 f887 	bl	8004970 <__sinit>
 8004862:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <_fflush_r+0x6c>)
 8004864:	429c      	cmp	r4, r3
 8004866:	d11b      	bne.n	80048a0 <_fflush_r+0x58>
 8004868:	686c      	ldr	r4, [r5, #4]
 800486a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0ef      	beq.n	8004852 <_fflush_r+0xa>
 8004872:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004874:	07d0      	lsls	r0, r2, #31
 8004876:	d404      	bmi.n	8004882 <_fflush_r+0x3a>
 8004878:	0599      	lsls	r1, r3, #22
 800487a:	d402      	bmi.n	8004882 <_fflush_r+0x3a>
 800487c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800487e:	f000 f915 	bl	8004aac <__retarget_lock_acquire_recursive>
 8004882:	4628      	mov	r0, r5
 8004884:	4621      	mov	r1, r4
 8004886:	f7ff ff59 	bl	800473c <__sflush_r>
 800488a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800488c:	07da      	lsls	r2, r3, #31
 800488e:	4605      	mov	r5, r0
 8004890:	d4e0      	bmi.n	8004854 <_fflush_r+0xc>
 8004892:	89a3      	ldrh	r3, [r4, #12]
 8004894:	059b      	lsls	r3, r3, #22
 8004896:	d4dd      	bmi.n	8004854 <_fflush_r+0xc>
 8004898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800489a:	f000 f908 	bl	8004aae <__retarget_lock_release_recursive>
 800489e:	e7d9      	b.n	8004854 <_fflush_r+0xc>
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <_fflush_r+0x70>)
 80048a2:	429c      	cmp	r4, r3
 80048a4:	d101      	bne.n	80048aa <_fflush_r+0x62>
 80048a6:	68ac      	ldr	r4, [r5, #8]
 80048a8:	e7df      	b.n	800486a <_fflush_r+0x22>
 80048aa:	4b04      	ldr	r3, [pc, #16]	; (80048bc <_fflush_r+0x74>)
 80048ac:	429c      	cmp	r4, r3
 80048ae:	bf08      	it	eq
 80048b0:	68ec      	ldreq	r4, [r5, #12]
 80048b2:	e7da      	b.n	800486a <_fflush_r+0x22>
 80048b4:	080055a0 	.word	0x080055a0
 80048b8:	080055c0 	.word	0x080055c0
 80048bc:	08005580 	.word	0x08005580

080048c0 <std>:
 80048c0:	2300      	movs	r3, #0
 80048c2:	b510      	push	{r4, lr}
 80048c4:	4604      	mov	r4, r0
 80048c6:	e9c0 3300 	strd	r3, r3, [r0]
 80048ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048ce:	6083      	str	r3, [r0, #8]
 80048d0:	8181      	strh	r1, [r0, #12]
 80048d2:	6643      	str	r3, [r0, #100]	; 0x64
 80048d4:	81c2      	strh	r2, [r0, #14]
 80048d6:	6183      	str	r3, [r0, #24]
 80048d8:	4619      	mov	r1, r3
 80048da:	2208      	movs	r2, #8
 80048dc:	305c      	adds	r0, #92	; 0x5c
 80048de:	f7ff fd09 	bl	80042f4 <memset>
 80048e2:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <std+0x38>)
 80048e4:	6263      	str	r3, [r4, #36]	; 0x24
 80048e6:	4b05      	ldr	r3, [pc, #20]	; (80048fc <std+0x3c>)
 80048e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <std+0x40>)
 80048ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048ee:	4b05      	ldr	r3, [pc, #20]	; (8004904 <std+0x44>)
 80048f0:	6224      	str	r4, [r4, #32]
 80048f2:	6323      	str	r3, [r4, #48]	; 0x30
 80048f4:	bd10      	pop	{r4, pc}
 80048f6:	bf00      	nop
 80048f8:	08005349 	.word	0x08005349
 80048fc:	0800536b 	.word	0x0800536b
 8004900:	080053a3 	.word	0x080053a3
 8004904:	080053c7 	.word	0x080053c7

08004908 <_cleanup_r>:
 8004908:	4901      	ldr	r1, [pc, #4]	; (8004910 <_cleanup_r+0x8>)
 800490a:	f000 b8af 	b.w	8004a6c <_fwalk_reent>
 800490e:	bf00      	nop
 8004910:	08004849 	.word	0x08004849

08004914 <__sfmoreglue>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	2268      	movs	r2, #104	; 0x68
 8004918:	1e4d      	subs	r5, r1, #1
 800491a:	4355      	muls	r5, r2
 800491c:	460e      	mov	r6, r1
 800491e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004922:	f000 f99f 	bl	8004c64 <_malloc_r>
 8004926:	4604      	mov	r4, r0
 8004928:	b140      	cbz	r0, 800493c <__sfmoreglue+0x28>
 800492a:	2100      	movs	r1, #0
 800492c:	e9c0 1600 	strd	r1, r6, [r0]
 8004930:	300c      	adds	r0, #12
 8004932:	60a0      	str	r0, [r4, #8]
 8004934:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004938:	f7ff fcdc 	bl	80042f4 <memset>
 800493c:	4620      	mov	r0, r4
 800493e:	bd70      	pop	{r4, r5, r6, pc}

08004940 <__sfp_lock_acquire>:
 8004940:	4801      	ldr	r0, [pc, #4]	; (8004948 <__sfp_lock_acquire+0x8>)
 8004942:	f000 b8b3 	b.w	8004aac <__retarget_lock_acquire_recursive>
 8004946:	bf00      	nop
 8004948:	200001ad 	.word	0x200001ad

0800494c <__sfp_lock_release>:
 800494c:	4801      	ldr	r0, [pc, #4]	; (8004954 <__sfp_lock_release+0x8>)
 800494e:	f000 b8ae 	b.w	8004aae <__retarget_lock_release_recursive>
 8004952:	bf00      	nop
 8004954:	200001ad 	.word	0x200001ad

08004958 <__sinit_lock_acquire>:
 8004958:	4801      	ldr	r0, [pc, #4]	; (8004960 <__sinit_lock_acquire+0x8>)
 800495a:	f000 b8a7 	b.w	8004aac <__retarget_lock_acquire_recursive>
 800495e:	bf00      	nop
 8004960:	200001ae 	.word	0x200001ae

08004964 <__sinit_lock_release>:
 8004964:	4801      	ldr	r0, [pc, #4]	; (800496c <__sinit_lock_release+0x8>)
 8004966:	f000 b8a2 	b.w	8004aae <__retarget_lock_release_recursive>
 800496a:	bf00      	nop
 800496c:	200001ae 	.word	0x200001ae

08004970 <__sinit>:
 8004970:	b510      	push	{r4, lr}
 8004972:	4604      	mov	r4, r0
 8004974:	f7ff fff0 	bl	8004958 <__sinit_lock_acquire>
 8004978:	69a3      	ldr	r3, [r4, #24]
 800497a:	b11b      	cbz	r3, 8004984 <__sinit+0x14>
 800497c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004980:	f7ff bff0 	b.w	8004964 <__sinit_lock_release>
 8004984:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004988:	6523      	str	r3, [r4, #80]	; 0x50
 800498a:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <__sinit+0x68>)
 800498c:	4a13      	ldr	r2, [pc, #76]	; (80049dc <__sinit+0x6c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	62a2      	str	r2, [r4, #40]	; 0x28
 8004992:	42a3      	cmp	r3, r4
 8004994:	bf04      	itt	eq
 8004996:	2301      	moveq	r3, #1
 8004998:	61a3      	streq	r3, [r4, #24]
 800499a:	4620      	mov	r0, r4
 800499c:	f000 f820 	bl	80049e0 <__sfp>
 80049a0:	6060      	str	r0, [r4, #4]
 80049a2:	4620      	mov	r0, r4
 80049a4:	f000 f81c 	bl	80049e0 <__sfp>
 80049a8:	60a0      	str	r0, [r4, #8]
 80049aa:	4620      	mov	r0, r4
 80049ac:	f000 f818 	bl	80049e0 <__sfp>
 80049b0:	2200      	movs	r2, #0
 80049b2:	60e0      	str	r0, [r4, #12]
 80049b4:	2104      	movs	r1, #4
 80049b6:	6860      	ldr	r0, [r4, #4]
 80049b8:	f7ff ff82 	bl	80048c0 <std>
 80049bc:	68a0      	ldr	r0, [r4, #8]
 80049be:	2201      	movs	r2, #1
 80049c0:	2109      	movs	r1, #9
 80049c2:	f7ff ff7d 	bl	80048c0 <std>
 80049c6:	68e0      	ldr	r0, [r4, #12]
 80049c8:	2202      	movs	r2, #2
 80049ca:	2112      	movs	r1, #18
 80049cc:	f7ff ff78 	bl	80048c0 <std>
 80049d0:	2301      	movs	r3, #1
 80049d2:	61a3      	str	r3, [r4, #24]
 80049d4:	e7d2      	b.n	800497c <__sinit+0xc>
 80049d6:	bf00      	nop
 80049d8:	0800557c 	.word	0x0800557c
 80049dc:	08004909 	.word	0x08004909

080049e0 <__sfp>:
 80049e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e2:	4607      	mov	r7, r0
 80049e4:	f7ff ffac 	bl	8004940 <__sfp_lock_acquire>
 80049e8:	4b1e      	ldr	r3, [pc, #120]	; (8004a64 <__sfp+0x84>)
 80049ea:	681e      	ldr	r6, [r3, #0]
 80049ec:	69b3      	ldr	r3, [r6, #24]
 80049ee:	b913      	cbnz	r3, 80049f6 <__sfp+0x16>
 80049f0:	4630      	mov	r0, r6
 80049f2:	f7ff ffbd 	bl	8004970 <__sinit>
 80049f6:	3648      	adds	r6, #72	; 0x48
 80049f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	d503      	bpl.n	8004a08 <__sfp+0x28>
 8004a00:	6833      	ldr	r3, [r6, #0]
 8004a02:	b30b      	cbz	r3, 8004a48 <__sfp+0x68>
 8004a04:	6836      	ldr	r6, [r6, #0]
 8004a06:	e7f7      	b.n	80049f8 <__sfp+0x18>
 8004a08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a0c:	b9d5      	cbnz	r5, 8004a44 <__sfp+0x64>
 8004a0e:	4b16      	ldr	r3, [pc, #88]	; (8004a68 <__sfp+0x88>)
 8004a10:	60e3      	str	r3, [r4, #12]
 8004a12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a16:	6665      	str	r5, [r4, #100]	; 0x64
 8004a18:	f000 f847 	bl	8004aaa <__retarget_lock_init_recursive>
 8004a1c:	f7ff ff96 	bl	800494c <__sfp_lock_release>
 8004a20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a28:	6025      	str	r5, [r4, #0]
 8004a2a:	61a5      	str	r5, [r4, #24]
 8004a2c:	2208      	movs	r2, #8
 8004a2e:	4629      	mov	r1, r5
 8004a30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a34:	f7ff fc5e 	bl	80042f4 <memset>
 8004a38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a40:	4620      	mov	r0, r4
 8004a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a44:	3468      	adds	r4, #104	; 0x68
 8004a46:	e7d9      	b.n	80049fc <__sfp+0x1c>
 8004a48:	2104      	movs	r1, #4
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	f7ff ff62 	bl	8004914 <__sfmoreglue>
 8004a50:	4604      	mov	r4, r0
 8004a52:	6030      	str	r0, [r6, #0]
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d1d5      	bne.n	8004a04 <__sfp+0x24>
 8004a58:	f7ff ff78 	bl	800494c <__sfp_lock_release>
 8004a5c:	230c      	movs	r3, #12
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	e7ee      	b.n	8004a40 <__sfp+0x60>
 8004a62:	bf00      	nop
 8004a64:	0800557c 	.word	0x0800557c
 8004a68:	ffff0001 	.word	0xffff0001

08004a6c <_fwalk_reent>:
 8004a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a70:	4606      	mov	r6, r0
 8004a72:	4688      	mov	r8, r1
 8004a74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a78:	2700      	movs	r7, #0
 8004a7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a7e:	f1b9 0901 	subs.w	r9, r9, #1
 8004a82:	d505      	bpl.n	8004a90 <_fwalk_reent+0x24>
 8004a84:	6824      	ldr	r4, [r4, #0]
 8004a86:	2c00      	cmp	r4, #0
 8004a88:	d1f7      	bne.n	8004a7a <_fwalk_reent+0xe>
 8004a8a:	4638      	mov	r0, r7
 8004a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a90:	89ab      	ldrh	r3, [r5, #12]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d907      	bls.n	8004aa6 <_fwalk_reent+0x3a>
 8004a96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	d003      	beq.n	8004aa6 <_fwalk_reent+0x3a>
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	47c0      	blx	r8
 8004aa4:	4307      	orrs	r7, r0
 8004aa6:	3568      	adds	r5, #104	; 0x68
 8004aa8:	e7e9      	b.n	8004a7e <_fwalk_reent+0x12>

08004aaa <__retarget_lock_init_recursive>:
 8004aaa:	4770      	bx	lr

08004aac <__retarget_lock_acquire_recursive>:
 8004aac:	4770      	bx	lr

08004aae <__retarget_lock_release_recursive>:
 8004aae:	4770      	bx	lr

08004ab0 <__swhatbuf_r>:
 8004ab0:	b570      	push	{r4, r5, r6, lr}
 8004ab2:	460e      	mov	r6, r1
 8004ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab8:	2900      	cmp	r1, #0
 8004aba:	b096      	sub	sp, #88	; 0x58
 8004abc:	4614      	mov	r4, r2
 8004abe:	461d      	mov	r5, r3
 8004ac0:	da08      	bge.n	8004ad4 <__swhatbuf_r+0x24>
 8004ac2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	602a      	str	r2, [r5, #0]
 8004aca:	061a      	lsls	r2, r3, #24
 8004acc:	d410      	bmi.n	8004af0 <__swhatbuf_r+0x40>
 8004ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ad2:	e00e      	b.n	8004af2 <__swhatbuf_r+0x42>
 8004ad4:	466a      	mov	r2, sp
 8004ad6:	f000 fc9d 	bl	8005414 <_fstat_r>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	dbf1      	blt.n	8004ac2 <__swhatbuf_r+0x12>
 8004ade:	9a01      	ldr	r2, [sp, #4]
 8004ae0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ae4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ae8:	425a      	negs	r2, r3
 8004aea:	415a      	adcs	r2, r3
 8004aec:	602a      	str	r2, [r5, #0]
 8004aee:	e7ee      	b.n	8004ace <__swhatbuf_r+0x1e>
 8004af0:	2340      	movs	r3, #64	; 0x40
 8004af2:	2000      	movs	r0, #0
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	b016      	add	sp, #88	; 0x58
 8004af8:	bd70      	pop	{r4, r5, r6, pc}
	...

08004afc <__smakebuf_r>:
 8004afc:	898b      	ldrh	r3, [r1, #12]
 8004afe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b00:	079d      	lsls	r5, r3, #30
 8004b02:	4606      	mov	r6, r0
 8004b04:	460c      	mov	r4, r1
 8004b06:	d507      	bpl.n	8004b18 <__smakebuf_r+0x1c>
 8004b08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	6123      	str	r3, [r4, #16]
 8004b10:	2301      	movs	r3, #1
 8004b12:	6163      	str	r3, [r4, #20]
 8004b14:	b002      	add	sp, #8
 8004b16:	bd70      	pop	{r4, r5, r6, pc}
 8004b18:	ab01      	add	r3, sp, #4
 8004b1a:	466a      	mov	r2, sp
 8004b1c:	f7ff ffc8 	bl	8004ab0 <__swhatbuf_r>
 8004b20:	9900      	ldr	r1, [sp, #0]
 8004b22:	4605      	mov	r5, r0
 8004b24:	4630      	mov	r0, r6
 8004b26:	f000 f89d 	bl	8004c64 <_malloc_r>
 8004b2a:	b948      	cbnz	r0, 8004b40 <__smakebuf_r+0x44>
 8004b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b30:	059a      	lsls	r2, r3, #22
 8004b32:	d4ef      	bmi.n	8004b14 <__smakebuf_r+0x18>
 8004b34:	f023 0303 	bic.w	r3, r3, #3
 8004b38:	f043 0302 	orr.w	r3, r3, #2
 8004b3c:	81a3      	strh	r3, [r4, #12]
 8004b3e:	e7e3      	b.n	8004b08 <__smakebuf_r+0xc>
 8004b40:	4b0d      	ldr	r3, [pc, #52]	; (8004b78 <__smakebuf_r+0x7c>)
 8004b42:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b44:	89a3      	ldrh	r3, [r4, #12]
 8004b46:	6020      	str	r0, [r4, #0]
 8004b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4c:	81a3      	strh	r3, [r4, #12]
 8004b4e:	9b00      	ldr	r3, [sp, #0]
 8004b50:	6163      	str	r3, [r4, #20]
 8004b52:	9b01      	ldr	r3, [sp, #4]
 8004b54:	6120      	str	r0, [r4, #16]
 8004b56:	b15b      	cbz	r3, 8004b70 <__smakebuf_r+0x74>
 8004b58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	f000 fc6b 	bl	8005438 <_isatty_r>
 8004b62:	b128      	cbz	r0, 8004b70 <__smakebuf_r+0x74>
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	f023 0303 	bic.w	r3, r3, #3
 8004b6a:	f043 0301 	orr.w	r3, r3, #1
 8004b6e:	81a3      	strh	r3, [r4, #12]
 8004b70:	89a0      	ldrh	r0, [r4, #12]
 8004b72:	4305      	orrs	r5, r0
 8004b74:	81a5      	strh	r5, [r4, #12]
 8004b76:	e7cd      	b.n	8004b14 <__smakebuf_r+0x18>
 8004b78:	08004909 	.word	0x08004909

08004b7c <malloc>:
 8004b7c:	4b02      	ldr	r3, [pc, #8]	; (8004b88 <malloc+0xc>)
 8004b7e:	4601      	mov	r1, r0
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	f000 b86f 	b.w	8004c64 <_malloc_r>
 8004b86:	bf00      	nop
 8004b88:	2000000c 	.word	0x2000000c

08004b8c <_free_r>:
 8004b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b8e:	2900      	cmp	r1, #0
 8004b90:	d044      	beq.n	8004c1c <_free_r+0x90>
 8004b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b96:	9001      	str	r0, [sp, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8004b9e:	bfb8      	it	lt
 8004ba0:	18e4      	addlt	r4, r4, r3
 8004ba2:	f000 fc6b 	bl	800547c <__malloc_lock>
 8004ba6:	4a1e      	ldr	r2, [pc, #120]	; (8004c20 <_free_r+0x94>)
 8004ba8:	9801      	ldr	r0, [sp, #4]
 8004baa:	6813      	ldr	r3, [r2, #0]
 8004bac:	b933      	cbnz	r3, 8004bbc <_free_r+0x30>
 8004bae:	6063      	str	r3, [r4, #4]
 8004bb0:	6014      	str	r4, [r2, #0]
 8004bb2:	b003      	add	sp, #12
 8004bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bb8:	f000 bc66 	b.w	8005488 <__malloc_unlock>
 8004bbc:	42a3      	cmp	r3, r4
 8004bbe:	d908      	bls.n	8004bd2 <_free_r+0x46>
 8004bc0:	6825      	ldr	r5, [r4, #0]
 8004bc2:	1961      	adds	r1, r4, r5
 8004bc4:	428b      	cmp	r3, r1
 8004bc6:	bf01      	itttt	eq
 8004bc8:	6819      	ldreq	r1, [r3, #0]
 8004bca:	685b      	ldreq	r3, [r3, #4]
 8004bcc:	1949      	addeq	r1, r1, r5
 8004bce:	6021      	streq	r1, [r4, #0]
 8004bd0:	e7ed      	b.n	8004bae <_free_r+0x22>
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	b10b      	cbz	r3, 8004bdc <_free_r+0x50>
 8004bd8:	42a3      	cmp	r3, r4
 8004bda:	d9fa      	bls.n	8004bd2 <_free_r+0x46>
 8004bdc:	6811      	ldr	r1, [r2, #0]
 8004bde:	1855      	adds	r5, r2, r1
 8004be0:	42a5      	cmp	r5, r4
 8004be2:	d10b      	bne.n	8004bfc <_free_r+0x70>
 8004be4:	6824      	ldr	r4, [r4, #0]
 8004be6:	4421      	add	r1, r4
 8004be8:	1854      	adds	r4, r2, r1
 8004bea:	42a3      	cmp	r3, r4
 8004bec:	6011      	str	r1, [r2, #0]
 8004bee:	d1e0      	bne.n	8004bb2 <_free_r+0x26>
 8004bf0:	681c      	ldr	r4, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	6053      	str	r3, [r2, #4]
 8004bf6:	4421      	add	r1, r4
 8004bf8:	6011      	str	r1, [r2, #0]
 8004bfa:	e7da      	b.n	8004bb2 <_free_r+0x26>
 8004bfc:	d902      	bls.n	8004c04 <_free_r+0x78>
 8004bfe:	230c      	movs	r3, #12
 8004c00:	6003      	str	r3, [r0, #0]
 8004c02:	e7d6      	b.n	8004bb2 <_free_r+0x26>
 8004c04:	6825      	ldr	r5, [r4, #0]
 8004c06:	1961      	adds	r1, r4, r5
 8004c08:	428b      	cmp	r3, r1
 8004c0a:	bf04      	itt	eq
 8004c0c:	6819      	ldreq	r1, [r3, #0]
 8004c0e:	685b      	ldreq	r3, [r3, #4]
 8004c10:	6063      	str	r3, [r4, #4]
 8004c12:	bf04      	itt	eq
 8004c14:	1949      	addeq	r1, r1, r5
 8004c16:	6021      	streq	r1, [r4, #0]
 8004c18:	6054      	str	r4, [r2, #4]
 8004c1a:	e7ca      	b.n	8004bb2 <_free_r+0x26>
 8004c1c:	b003      	add	sp, #12
 8004c1e:	bd30      	pop	{r4, r5, pc}
 8004c20:	200001b0 	.word	0x200001b0

08004c24 <sbrk_aligned>:
 8004c24:	b570      	push	{r4, r5, r6, lr}
 8004c26:	4e0e      	ldr	r6, [pc, #56]	; (8004c60 <sbrk_aligned+0x3c>)
 8004c28:	460c      	mov	r4, r1
 8004c2a:	6831      	ldr	r1, [r6, #0]
 8004c2c:	4605      	mov	r5, r0
 8004c2e:	b911      	cbnz	r1, 8004c36 <sbrk_aligned+0x12>
 8004c30:	f000 fb7a 	bl	8005328 <_sbrk_r>
 8004c34:	6030      	str	r0, [r6, #0]
 8004c36:	4621      	mov	r1, r4
 8004c38:	4628      	mov	r0, r5
 8004c3a:	f000 fb75 	bl	8005328 <_sbrk_r>
 8004c3e:	1c43      	adds	r3, r0, #1
 8004c40:	d00a      	beq.n	8004c58 <sbrk_aligned+0x34>
 8004c42:	1cc4      	adds	r4, r0, #3
 8004c44:	f024 0403 	bic.w	r4, r4, #3
 8004c48:	42a0      	cmp	r0, r4
 8004c4a:	d007      	beq.n	8004c5c <sbrk_aligned+0x38>
 8004c4c:	1a21      	subs	r1, r4, r0
 8004c4e:	4628      	mov	r0, r5
 8004c50:	f000 fb6a 	bl	8005328 <_sbrk_r>
 8004c54:	3001      	adds	r0, #1
 8004c56:	d101      	bne.n	8004c5c <sbrk_aligned+0x38>
 8004c58:	f04f 34ff 	mov.w	r4, #4294967295
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
 8004c60:	200001b4 	.word	0x200001b4

08004c64 <_malloc_r>:
 8004c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c68:	1ccd      	adds	r5, r1, #3
 8004c6a:	f025 0503 	bic.w	r5, r5, #3
 8004c6e:	3508      	adds	r5, #8
 8004c70:	2d0c      	cmp	r5, #12
 8004c72:	bf38      	it	cc
 8004c74:	250c      	movcc	r5, #12
 8004c76:	2d00      	cmp	r5, #0
 8004c78:	4607      	mov	r7, r0
 8004c7a:	db01      	blt.n	8004c80 <_malloc_r+0x1c>
 8004c7c:	42a9      	cmp	r1, r5
 8004c7e:	d905      	bls.n	8004c8c <_malloc_r+0x28>
 8004c80:	230c      	movs	r3, #12
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	2600      	movs	r6, #0
 8004c86:	4630      	mov	r0, r6
 8004c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c8c:	4e2e      	ldr	r6, [pc, #184]	; (8004d48 <_malloc_r+0xe4>)
 8004c8e:	f000 fbf5 	bl	800547c <__malloc_lock>
 8004c92:	6833      	ldr	r3, [r6, #0]
 8004c94:	461c      	mov	r4, r3
 8004c96:	bb34      	cbnz	r4, 8004ce6 <_malloc_r+0x82>
 8004c98:	4629      	mov	r1, r5
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	f7ff ffc2 	bl	8004c24 <sbrk_aligned>
 8004ca0:	1c43      	adds	r3, r0, #1
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	d14d      	bne.n	8004d42 <_malloc_r+0xde>
 8004ca6:	6834      	ldr	r4, [r6, #0]
 8004ca8:	4626      	mov	r6, r4
 8004caa:	2e00      	cmp	r6, #0
 8004cac:	d140      	bne.n	8004d30 <_malloc_r+0xcc>
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	4631      	mov	r1, r6
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	eb04 0803 	add.w	r8, r4, r3
 8004cb8:	f000 fb36 	bl	8005328 <_sbrk_r>
 8004cbc:	4580      	cmp	r8, r0
 8004cbe:	d13a      	bne.n	8004d36 <_malloc_r+0xd2>
 8004cc0:	6821      	ldr	r1, [r4, #0]
 8004cc2:	3503      	adds	r5, #3
 8004cc4:	1a6d      	subs	r5, r5, r1
 8004cc6:	f025 0503 	bic.w	r5, r5, #3
 8004cca:	3508      	adds	r5, #8
 8004ccc:	2d0c      	cmp	r5, #12
 8004cce:	bf38      	it	cc
 8004cd0:	250c      	movcc	r5, #12
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	f7ff ffa5 	bl	8004c24 <sbrk_aligned>
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d02b      	beq.n	8004d36 <_malloc_r+0xd2>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	442b      	add	r3, r5
 8004ce2:	6023      	str	r3, [r4, #0]
 8004ce4:	e00e      	b.n	8004d04 <_malloc_r+0xa0>
 8004ce6:	6822      	ldr	r2, [r4, #0]
 8004ce8:	1b52      	subs	r2, r2, r5
 8004cea:	d41e      	bmi.n	8004d2a <_malloc_r+0xc6>
 8004cec:	2a0b      	cmp	r2, #11
 8004cee:	d916      	bls.n	8004d1e <_malloc_r+0xba>
 8004cf0:	1961      	adds	r1, r4, r5
 8004cf2:	42a3      	cmp	r3, r4
 8004cf4:	6025      	str	r5, [r4, #0]
 8004cf6:	bf18      	it	ne
 8004cf8:	6059      	strne	r1, [r3, #4]
 8004cfa:	6863      	ldr	r3, [r4, #4]
 8004cfc:	bf08      	it	eq
 8004cfe:	6031      	streq	r1, [r6, #0]
 8004d00:	5162      	str	r2, [r4, r5]
 8004d02:	604b      	str	r3, [r1, #4]
 8004d04:	4638      	mov	r0, r7
 8004d06:	f104 060b 	add.w	r6, r4, #11
 8004d0a:	f000 fbbd 	bl	8005488 <__malloc_unlock>
 8004d0e:	f026 0607 	bic.w	r6, r6, #7
 8004d12:	1d23      	adds	r3, r4, #4
 8004d14:	1af2      	subs	r2, r6, r3
 8004d16:	d0b6      	beq.n	8004c86 <_malloc_r+0x22>
 8004d18:	1b9b      	subs	r3, r3, r6
 8004d1a:	50a3      	str	r3, [r4, r2]
 8004d1c:	e7b3      	b.n	8004c86 <_malloc_r+0x22>
 8004d1e:	6862      	ldr	r2, [r4, #4]
 8004d20:	42a3      	cmp	r3, r4
 8004d22:	bf0c      	ite	eq
 8004d24:	6032      	streq	r2, [r6, #0]
 8004d26:	605a      	strne	r2, [r3, #4]
 8004d28:	e7ec      	b.n	8004d04 <_malloc_r+0xa0>
 8004d2a:	4623      	mov	r3, r4
 8004d2c:	6864      	ldr	r4, [r4, #4]
 8004d2e:	e7b2      	b.n	8004c96 <_malloc_r+0x32>
 8004d30:	4634      	mov	r4, r6
 8004d32:	6876      	ldr	r6, [r6, #4]
 8004d34:	e7b9      	b.n	8004caa <_malloc_r+0x46>
 8004d36:	230c      	movs	r3, #12
 8004d38:	603b      	str	r3, [r7, #0]
 8004d3a:	4638      	mov	r0, r7
 8004d3c:	f000 fba4 	bl	8005488 <__malloc_unlock>
 8004d40:	e7a1      	b.n	8004c86 <_malloc_r+0x22>
 8004d42:	6025      	str	r5, [r4, #0]
 8004d44:	e7de      	b.n	8004d04 <_malloc_r+0xa0>
 8004d46:	bf00      	nop
 8004d48:	200001b0 	.word	0x200001b0

08004d4c <__sfputc_r>:
 8004d4c:	6893      	ldr	r3, [r2, #8]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	b410      	push	{r4}
 8004d54:	6093      	str	r3, [r2, #8]
 8004d56:	da08      	bge.n	8004d6a <__sfputc_r+0x1e>
 8004d58:	6994      	ldr	r4, [r2, #24]
 8004d5a:	42a3      	cmp	r3, r4
 8004d5c:	db01      	blt.n	8004d62 <__sfputc_r+0x16>
 8004d5e:	290a      	cmp	r1, #10
 8004d60:	d103      	bne.n	8004d6a <__sfputc_r+0x1e>
 8004d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d66:	f7ff bc29 	b.w	80045bc <__swbuf_r>
 8004d6a:	6813      	ldr	r3, [r2, #0]
 8004d6c:	1c58      	adds	r0, r3, #1
 8004d6e:	6010      	str	r0, [r2, #0]
 8004d70:	7019      	strb	r1, [r3, #0]
 8004d72:	4608      	mov	r0, r1
 8004d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <__sfputs_r>:
 8004d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7c:	4606      	mov	r6, r0
 8004d7e:	460f      	mov	r7, r1
 8004d80:	4614      	mov	r4, r2
 8004d82:	18d5      	adds	r5, r2, r3
 8004d84:	42ac      	cmp	r4, r5
 8004d86:	d101      	bne.n	8004d8c <__sfputs_r+0x12>
 8004d88:	2000      	movs	r0, #0
 8004d8a:	e007      	b.n	8004d9c <__sfputs_r+0x22>
 8004d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d90:	463a      	mov	r2, r7
 8004d92:	4630      	mov	r0, r6
 8004d94:	f7ff ffda 	bl	8004d4c <__sfputc_r>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d1f3      	bne.n	8004d84 <__sfputs_r+0xa>
 8004d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004da0 <_vfiprintf_r>:
 8004da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da4:	460d      	mov	r5, r1
 8004da6:	b09d      	sub	sp, #116	; 0x74
 8004da8:	4614      	mov	r4, r2
 8004daa:	4698      	mov	r8, r3
 8004dac:	4606      	mov	r6, r0
 8004dae:	b118      	cbz	r0, 8004db8 <_vfiprintf_r+0x18>
 8004db0:	6983      	ldr	r3, [r0, #24]
 8004db2:	b90b      	cbnz	r3, 8004db8 <_vfiprintf_r+0x18>
 8004db4:	f7ff fddc 	bl	8004970 <__sinit>
 8004db8:	4b89      	ldr	r3, [pc, #548]	; (8004fe0 <_vfiprintf_r+0x240>)
 8004dba:	429d      	cmp	r5, r3
 8004dbc:	d11b      	bne.n	8004df6 <_vfiprintf_r+0x56>
 8004dbe:	6875      	ldr	r5, [r6, #4]
 8004dc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dc2:	07d9      	lsls	r1, r3, #31
 8004dc4:	d405      	bmi.n	8004dd2 <_vfiprintf_r+0x32>
 8004dc6:	89ab      	ldrh	r3, [r5, #12]
 8004dc8:	059a      	lsls	r2, r3, #22
 8004dca:	d402      	bmi.n	8004dd2 <_vfiprintf_r+0x32>
 8004dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dce:	f7ff fe6d 	bl	8004aac <__retarget_lock_acquire_recursive>
 8004dd2:	89ab      	ldrh	r3, [r5, #12]
 8004dd4:	071b      	lsls	r3, r3, #28
 8004dd6:	d501      	bpl.n	8004ddc <_vfiprintf_r+0x3c>
 8004dd8:	692b      	ldr	r3, [r5, #16]
 8004dda:	b9eb      	cbnz	r3, 8004e18 <_vfiprintf_r+0x78>
 8004ddc:	4629      	mov	r1, r5
 8004dde:	4630      	mov	r0, r6
 8004de0:	f7ff fc3e 	bl	8004660 <__swsetup_r>
 8004de4:	b1c0      	cbz	r0, 8004e18 <_vfiprintf_r+0x78>
 8004de6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004de8:	07dc      	lsls	r4, r3, #31
 8004dea:	d50e      	bpl.n	8004e0a <_vfiprintf_r+0x6a>
 8004dec:	f04f 30ff 	mov.w	r0, #4294967295
 8004df0:	b01d      	add	sp, #116	; 0x74
 8004df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df6:	4b7b      	ldr	r3, [pc, #492]	; (8004fe4 <_vfiprintf_r+0x244>)
 8004df8:	429d      	cmp	r5, r3
 8004dfa:	d101      	bne.n	8004e00 <_vfiprintf_r+0x60>
 8004dfc:	68b5      	ldr	r5, [r6, #8]
 8004dfe:	e7df      	b.n	8004dc0 <_vfiprintf_r+0x20>
 8004e00:	4b79      	ldr	r3, [pc, #484]	; (8004fe8 <_vfiprintf_r+0x248>)
 8004e02:	429d      	cmp	r5, r3
 8004e04:	bf08      	it	eq
 8004e06:	68f5      	ldreq	r5, [r6, #12]
 8004e08:	e7da      	b.n	8004dc0 <_vfiprintf_r+0x20>
 8004e0a:	89ab      	ldrh	r3, [r5, #12]
 8004e0c:	0598      	lsls	r0, r3, #22
 8004e0e:	d4ed      	bmi.n	8004dec <_vfiprintf_r+0x4c>
 8004e10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e12:	f7ff fe4c 	bl	8004aae <__retarget_lock_release_recursive>
 8004e16:	e7e9      	b.n	8004dec <_vfiprintf_r+0x4c>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e1c:	2320      	movs	r3, #32
 8004e1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e26:	2330      	movs	r3, #48	; 0x30
 8004e28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004fec <_vfiprintf_r+0x24c>
 8004e2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e30:	f04f 0901 	mov.w	r9, #1
 8004e34:	4623      	mov	r3, r4
 8004e36:	469a      	mov	sl, r3
 8004e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e3c:	b10a      	cbz	r2, 8004e42 <_vfiprintf_r+0xa2>
 8004e3e:	2a25      	cmp	r2, #37	; 0x25
 8004e40:	d1f9      	bne.n	8004e36 <_vfiprintf_r+0x96>
 8004e42:	ebba 0b04 	subs.w	fp, sl, r4
 8004e46:	d00b      	beq.n	8004e60 <_vfiprintf_r+0xc0>
 8004e48:	465b      	mov	r3, fp
 8004e4a:	4622      	mov	r2, r4
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	4630      	mov	r0, r6
 8004e50:	f7ff ff93 	bl	8004d7a <__sfputs_r>
 8004e54:	3001      	adds	r0, #1
 8004e56:	f000 80aa 	beq.w	8004fae <_vfiprintf_r+0x20e>
 8004e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e5c:	445a      	add	r2, fp
 8004e5e:	9209      	str	r2, [sp, #36]	; 0x24
 8004e60:	f89a 3000 	ldrb.w	r3, [sl]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80a2 	beq.w	8004fae <_vfiprintf_r+0x20e>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e74:	f10a 0a01 	add.w	sl, sl, #1
 8004e78:	9304      	str	r3, [sp, #16]
 8004e7a:	9307      	str	r3, [sp, #28]
 8004e7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e80:	931a      	str	r3, [sp, #104]	; 0x68
 8004e82:	4654      	mov	r4, sl
 8004e84:	2205      	movs	r2, #5
 8004e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e8a:	4858      	ldr	r0, [pc, #352]	; (8004fec <_vfiprintf_r+0x24c>)
 8004e8c:	f7fb f9c8 	bl	8000220 <memchr>
 8004e90:	9a04      	ldr	r2, [sp, #16]
 8004e92:	b9d8      	cbnz	r0, 8004ecc <_vfiprintf_r+0x12c>
 8004e94:	06d1      	lsls	r1, r2, #27
 8004e96:	bf44      	itt	mi
 8004e98:	2320      	movmi	r3, #32
 8004e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e9e:	0713      	lsls	r3, r2, #28
 8004ea0:	bf44      	itt	mi
 8004ea2:	232b      	movmi	r3, #43	; 0x2b
 8004ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8004eac:	2b2a      	cmp	r3, #42	; 0x2a
 8004eae:	d015      	beq.n	8004edc <_vfiprintf_r+0x13c>
 8004eb0:	9a07      	ldr	r2, [sp, #28]
 8004eb2:	4654      	mov	r4, sl
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	f04f 0c0a 	mov.w	ip, #10
 8004eba:	4621      	mov	r1, r4
 8004ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ec0:	3b30      	subs	r3, #48	; 0x30
 8004ec2:	2b09      	cmp	r3, #9
 8004ec4:	d94e      	bls.n	8004f64 <_vfiprintf_r+0x1c4>
 8004ec6:	b1b0      	cbz	r0, 8004ef6 <_vfiprintf_r+0x156>
 8004ec8:	9207      	str	r2, [sp, #28]
 8004eca:	e014      	b.n	8004ef6 <_vfiprintf_r+0x156>
 8004ecc:	eba0 0308 	sub.w	r3, r0, r8
 8004ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	9304      	str	r3, [sp, #16]
 8004ed8:	46a2      	mov	sl, r4
 8004eda:	e7d2      	b.n	8004e82 <_vfiprintf_r+0xe2>
 8004edc:	9b03      	ldr	r3, [sp, #12]
 8004ede:	1d19      	adds	r1, r3, #4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	9103      	str	r1, [sp, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	bfbb      	ittet	lt
 8004ee8:	425b      	neglt	r3, r3
 8004eea:	f042 0202 	orrlt.w	r2, r2, #2
 8004eee:	9307      	strge	r3, [sp, #28]
 8004ef0:	9307      	strlt	r3, [sp, #28]
 8004ef2:	bfb8      	it	lt
 8004ef4:	9204      	strlt	r2, [sp, #16]
 8004ef6:	7823      	ldrb	r3, [r4, #0]
 8004ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8004efa:	d10c      	bne.n	8004f16 <_vfiprintf_r+0x176>
 8004efc:	7863      	ldrb	r3, [r4, #1]
 8004efe:	2b2a      	cmp	r3, #42	; 0x2a
 8004f00:	d135      	bne.n	8004f6e <_vfiprintf_r+0x1ce>
 8004f02:	9b03      	ldr	r3, [sp, #12]
 8004f04:	1d1a      	adds	r2, r3, #4
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	9203      	str	r2, [sp, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	bfb8      	it	lt
 8004f0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f12:	3402      	adds	r4, #2
 8004f14:	9305      	str	r3, [sp, #20]
 8004f16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004ffc <_vfiprintf_r+0x25c>
 8004f1a:	7821      	ldrb	r1, [r4, #0]
 8004f1c:	2203      	movs	r2, #3
 8004f1e:	4650      	mov	r0, sl
 8004f20:	f7fb f97e 	bl	8000220 <memchr>
 8004f24:	b140      	cbz	r0, 8004f38 <_vfiprintf_r+0x198>
 8004f26:	2340      	movs	r3, #64	; 0x40
 8004f28:	eba0 000a 	sub.w	r0, r0, sl
 8004f2c:	fa03 f000 	lsl.w	r0, r3, r0
 8004f30:	9b04      	ldr	r3, [sp, #16]
 8004f32:	4303      	orrs	r3, r0
 8004f34:	3401      	adds	r4, #1
 8004f36:	9304      	str	r3, [sp, #16]
 8004f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f3c:	482c      	ldr	r0, [pc, #176]	; (8004ff0 <_vfiprintf_r+0x250>)
 8004f3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f42:	2206      	movs	r2, #6
 8004f44:	f7fb f96c 	bl	8000220 <memchr>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d03f      	beq.n	8004fcc <_vfiprintf_r+0x22c>
 8004f4c:	4b29      	ldr	r3, [pc, #164]	; (8004ff4 <_vfiprintf_r+0x254>)
 8004f4e:	bb1b      	cbnz	r3, 8004f98 <_vfiprintf_r+0x1f8>
 8004f50:	9b03      	ldr	r3, [sp, #12]
 8004f52:	3307      	adds	r3, #7
 8004f54:	f023 0307 	bic.w	r3, r3, #7
 8004f58:	3308      	adds	r3, #8
 8004f5a:	9303      	str	r3, [sp, #12]
 8004f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f5e:	443b      	add	r3, r7
 8004f60:	9309      	str	r3, [sp, #36]	; 0x24
 8004f62:	e767      	b.n	8004e34 <_vfiprintf_r+0x94>
 8004f64:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f68:	460c      	mov	r4, r1
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	e7a5      	b.n	8004eba <_vfiprintf_r+0x11a>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	3401      	adds	r4, #1
 8004f72:	9305      	str	r3, [sp, #20]
 8004f74:	4619      	mov	r1, r3
 8004f76:	f04f 0c0a 	mov.w	ip, #10
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f80:	3a30      	subs	r2, #48	; 0x30
 8004f82:	2a09      	cmp	r2, #9
 8004f84:	d903      	bls.n	8004f8e <_vfiprintf_r+0x1ee>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0c5      	beq.n	8004f16 <_vfiprintf_r+0x176>
 8004f8a:	9105      	str	r1, [sp, #20]
 8004f8c:	e7c3      	b.n	8004f16 <_vfiprintf_r+0x176>
 8004f8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f92:	4604      	mov	r4, r0
 8004f94:	2301      	movs	r3, #1
 8004f96:	e7f0      	b.n	8004f7a <_vfiprintf_r+0x1da>
 8004f98:	ab03      	add	r3, sp, #12
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	462a      	mov	r2, r5
 8004f9e:	4b16      	ldr	r3, [pc, #88]	; (8004ff8 <_vfiprintf_r+0x258>)
 8004fa0:	a904      	add	r1, sp, #16
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f3af 8000 	nop.w
 8004fa8:	4607      	mov	r7, r0
 8004faa:	1c78      	adds	r0, r7, #1
 8004fac:	d1d6      	bne.n	8004f5c <_vfiprintf_r+0x1bc>
 8004fae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fb0:	07d9      	lsls	r1, r3, #31
 8004fb2:	d405      	bmi.n	8004fc0 <_vfiprintf_r+0x220>
 8004fb4:	89ab      	ldrh	r3, [r5, #12]
 8004fb6:	059a      	lsls	r2, r3, #22
 8004fb8:	d402      	bmi.n	8004fc0 <_vfiprintf_r+0x220>
 8004fba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fbc:	f7ff fd77 	bl	8004aae <__retarget_lock_release_recursive>
 8004fc0:	89ab      	ldrh	r3, [r5, #12]
 8004fc2:	065b      	lsls	r3, r3, #25
 8004fc4:	f53f af12 	bmi.w	8004dec <_vfiprintf_r+0x4c>
 8004fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fca:	e711      	b.n	8004df0 <_vfiprintf_r+0x50>
 8004fcc:	ab03      	add	r3, sp, #12
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	462a      	mov	r2, r5
 8004fd2:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <_vfiprintf_r+0x258>)
 8004fd4:	a904      	add	r1, sp, #16
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	f000 f880 	bl	80050dc <_printf_i>
 8004fdc:	e7e4      	b.n	8004fa8 <_vfiprintf_r+0x208>
 8004fde:	bf00      	nop
 8004fe0:	080055a0 	.word	0x080055a0
 8004fe4:	080055c0 	.word	0x080055c0
 8004fe8:	08005580 	.word	0x08005580
 8004fec:	080055e0 	.word	0x080055e0
 8004ff0:	080055ea 	.word	0x080055ea
 8004ff4:	00000000 	.word	0x00000000
 8004ff8:	08004d7b 	.word	0x08004d7b
 8004ffc:	080055e6 	.word	0x080055e6

08005000 <_printf_common>:
 8005000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005004:	4616      	mov	r6, r2
 8005006:	4699      	mov	r9, r3
 8005008:	688a      	ldr	r2, [r1, #8]
 800500a:	690b      	ldr	r3, [r1, #16]
 800500c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005010:	4293      	cmp	r3, r2
 8005012:	bfb8      	it	lt
 8005014:	4613      	movlt	r3, r2
 8005016:	6033      	str	r3, [r6, #0]
 8005018:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800501c:	4607      	mov	r7, r0
 800501e:	460c      	mov	r4, r1
 8005020:	b10a      	cbz	r2, 8005026 <_printf_common+0x26>
 8005022:	3301      	adds	r3, #1
 8005024:	6033      	str	r3, [r6, #0]
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	0699      	lsls	r1, r3, #26
 800502a:	bf42      	ittt	mi
 800502c:	6833      	ldrmi	r3, [r6, #0]
 800502e:	3302      	addmi	r3, #2
 8005030:	6033      	strmi	r3, [r6, #0]
 8005032:	6825      	ldr	r5, [r4, #0]
 8005034:	f015 0506 	ands.w	r5, r5, #6
 8005038:	d106      	bne.n	8005048 <_printf_common+0x48>
 800503a:	f104 0a19 	add.w	sl, r4, #25
 800503e:	68e3      	ldr	r3, [r4, #12]
 8005040:	6832      	ldr	r2, [r6, #0]
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	42ab      	cmp	r3, r5
 8005046:	dc26      	bgt.n	8005096 <_printf_common+0x96>
 8005048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800504c:	1e13      	subs	r3, r2, #0
 800504e:	6822      	ldr	r2, [r4, #0]
 8005050:	bf18      	it	ne
 8005052:	2301      	movne	r3, #1
 8005054:	0692      	lsls	r2, r2, #26
 8005056:	d42b      	bmi.n	80050b0 <_printf_common+0xb0>
 8005058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800505c:	4649      	mov	r1, r9
 800505e:	4638      	mov	r0, r7
 8005060:	47c0      	blx	r8
 8005062:	3001      	adds	r0, #1
 8005064:	d01e      	beq.n	80050a4 <_printf_common+0xa4>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	68e5      	ldr	r5, [r4, #12]
 800506a:	6832      	ldr	r2, [r6, #0]
 800506c:	f003 0306 	and.w	r3, r3, #6
 8005070:	2b04      	cmp	r3, #4
 8005072:	bf08      	it	eq
 8005074:	1aad      	subeq	r5, r5, r2
 8005076:	68a3      	ldr	r3, [r4, #8]
 8005078:	6922      	ldr	r2, [r4, #16]
 800507a:	bf0c      	ite	eq
 800507c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005080:	2500      	movne	r5, #0
 8005082:	4293      	cmp	r3, r2
 8005084:	bfc4      	itt	gt
 8005086:	1a9b      	subgt	r3, r3, r2
 8005088:	18ed      	addgt	r5, r5, r3
 800508a:	2600      	movs	r6, #0
 800508c:	341a      	adds	r4, #26
 800508e:	42b5      	cmp	r5, r6
 8005090:	d11a      	bne.n	80050c8 <_printf_common+0xc8>
 8005092:	2000      	movs	r0, #0
 8005094:	e008      	b.n	80050a8 <_printf_common+0xa8>
 8005096:	2301      	movs	r3, #1
 8005098:	4652      	mov	r2, sl
 800509a:	4649      	mov	r1, r9
 800509c:	4638      	mov	r0, r7
 800509e:	47c0      	blx	r8
 80050a0:	3001      	adds	r0, #1
 80050a2:	d103      	bne.n	80050ac <_printf_common+0xac>
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295
 80050a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ac:	3501      	adds	r5, #1
 80050ae:	e7c6      	b.n	800503e <_printf_common+0x3e>
 80050b0:	18e1      	adds	r1, r4, r3
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	2030      	movs	r0, #48	; 0x30
 80050b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050ba:	4422      	add	r2, r4
 80050bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050c4:	3302      	adds	r3, #2
 80050c6:	e7c7      	b.n	8005058 <_printf_common+0x58>
 80050c8:	2301      	movs	r3, #1
 80050ca:	4622      	mov	r2, r4
 80050cc:	4649      	mov	r1, r9
 80050ce:	4638      	mov	r0, r7
 80050d0:	47c0      	blx	r8
 80050d2:	3001      	adds	r0, #1
 80050d4:	d0e6      	beq.n	80050a4 <_printf_common+0xa4>
 80050d6:	3601      	adds	r6, #1
 80050d8:	e7d9      	b.n	800508e <_printf_common+0x8e>
	...

080050dc <_printf_i>:
 80050dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e0:	7e0f      	ldrb	r7, [r1, #24]
 80050e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050e4:	2f78      	cmp	r7, #120	; 0x78
 80050e6:	4691      	mov	r9, r2
 80050e8:	4680      	mov	r8, r0
 80050ea:	460c      	mov	r4, r1
 80050ec:	469a      	mov	sl, r3
 80050ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050f2:	d807      	bhi.n	8005104 <_printf_i+0x28>
 80050f4:	2f62      	cmp	r7, #98	; 0x62
 80050f6:	d80a      	bhi.n	800510e <_printf_i+0x32>
 80050f8:	2f00      	cmp	r7, #0
 80050fa:	f000 80d8 	beq.w	80052ae <_printf_i+0x1d2>
 80050fe:	2f58      	cmp	r7, #88	; 0x58
 8005100:	f000 80a3 	beq.w	800524a <_printf_i+0x16e>
 8005104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800510c:	e03a      	b.n	8005184 <_printf_i+0xa8>
 800510e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005112:	2b15      	cmp	r3, #21
 8005114:	d8f6      	bhi.n	8005104 <_printf_i+0x28>
 8005116:	a101      	add	r1, pc, #4	; (adr r1, 800511c <_printf_i+0x40>)
 8005118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800511c:	08005175 	.word	0x08005175
 8005120:	08005189 	.word	0x08005189
 8005124:	08005105 	.word	0x08005105
 8005128:	08005105 	.word	0x08005105
 800512c:	08005105 	.word	0x08005105
 8005130:	08005105 	.word	0x08005105
 8005134:	08005189 	.word	0x08005189
 8005138:	08005105 	.word	0x08005105
 800513c:	08005105 	.word	0x08005105
 8005140:	08005105 	.word	0x08005105
 8005144:	08005105 	.word	0x08005105
 8005148:	08005295 	.word	0x08005295
 800514c:	080051b9 	.word	0x080051b9
 8005150:	08005277 	.word	0x08005277
 8005154:	08005105 	.word	0x08005105
 8005158:	08005105 	.word	0x08005105
 800515c:	080052b7 	.word	0x080052b7
 8005160:	08005105 	.word	0x08005105
 8005164:	080051b9 	.word	0x080051b9
 8005168:	08005105 	.word	0x08005105
 800516c:	08005105 	.word	0x08005105
 8005170:	0800527f 	.word	0x0800527f
 8005174:	682b      	ldr	r3, [r5, #0]
 8005176:	1d1a      	adds	r2, r3, #4
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	602a      	str	r2, [r5, #0]
 800517c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005184:	2301      	movs	r3, #1
 8005186:	e0a3      	b.n	80052d0 <_printf_i+0x1f4>
 8005188:	6820      	ldr	r0, [r4, #0]
 800518a:	6829      	ldr	r1, [r5, #0]
 800518c:	0606      	lsls	r6, r0, #24
 800518e:	f101 0304 	add.w	r3, r1, #4
 8005192:	d50a      	bpl.n	80051aa <_printf_i+0xce>
 8005194:	680e      	ldr	r6, [r1, #0]
 8005196:	602b      	str	r3, [r5, #0]
 8005198:	2e00      	cmp	r6, #0
 800519a:	da03      	bge.n	80051a4 <_printf_i+0xc8>
 800519c:	232d      	movs	r3, #45	; 0x2d
 800519e:	4276      	negs	r6, r6
 80051a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051a4:	485e      	ldr	r0, [pc, #376]	; (8005320 <_printf_i+0x244>)
 80051a6:	230a      	movs	r3, #10
 80051a8:	e019      	b.n	80051de <_printf_i+0x102>
 80051aa:	680e      	ldr	r6, [r1, #0]
 80051ac:	602b      	str	r3, [r5, #0]
 80051ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051b2:	bf18      	it	ne
 80051b4:	b236      	sxthne	r6, r6
 80051b6:	e7ef      	b.n	8005198 <_printf_i+0xbc>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	6820      	ldr	r0, [r4, #0]
 80051bc:	1d19      	adds	r1, r3, #4
 80051be:	6029      	str	r1, [r5, #0]
 80051c0:	0601      	lsls	r1, r0, #24
 80051c2:	d501      	bpl.n	80051c8 <_printf_i+0xec>
 80051c4:	681e      	ldr	r6, [r3, #0]
 80051c6:	e002      	b.n	80051ce <_printf_i+0xf2>
 80051c8:	0646      	lsls	r6, r0, #25
 80051ca:	d5fb      	bpl.n	80051c4 <_printf_i+0xe8>
 80051cc:	881e      	ldrh	r6, [r3, #0]
 80051ce:	4854      	ldr	r0, [pc, #336]	; (8005320 <_printf_i+0x244>)
 80051d0:	2f6f      	cmp	r7, #111	; 0x6f
 80051d2:	bf0c      	ite	eq
 80051d4:	2308      	moveq	r3, #8
 80051d6:	230a      	movne	r3, #10
 80051d8:	2100      	movs	r1, #0
 80051da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051de:	6865      	ldr	r5, [r4, #4]
 80051e0:	60a5      	str	r5, [r4, #8]
 80051e2:	2d00      	cmp	r5, #0
 80051e4:	bfa2      	ittt	ge
 80051e6:	6821      	ldrge	r1, [r4, #0]
 80051e8:	f021 0104 	bicge.w	r1, r1, #4
 80051ec:	6021      	strge	r1, [r4, #0]
 80051ee:	b90e      	cbnz	r6, 80051f4 <_printf_i+0x118>
 80051f0:	2d00      	cmp	r5, #0
 80051f2:	d04d      	beq.n	8005290 <_printf_i+0x1b4>
 80051f4:	4615      	mov	r5, r2
 80051f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80051fa:	fb03 6711 	mls	r7, r3, r1, r6
 80051fe:	5dc7      	ldrb	r7, [r0, r7]
 8005200:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005204:	4637      	mov	r7, r6
 8005206:	42bb      	cmp	r3, r7
 8005208:	460e      	mov	r6, r1
 800520a:	d9f4      	bls.n	80051f6 <_printf_i+0x11a>
 800520c:	2b08      	cmp	r3, #8
 800520e:	d10b      	bne.n	8005228 <_printf_i+0x14c>
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	07de      	lsls	r6, r3, #31
 8005214:	d508      	bpl.n	8005228 <_printf_i+0x14c>
 8005216:	6923      	ldr	r3, [r4, #16]
 8005218:	6861      	ldr	r1, [r4, #4]
 800521a:	4299      	cmp	r1, r3
 800521c:	bfde      	ittt	le
 800521e:	2330      	movle	r3, #48	; 0x30
 8005220:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005224:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005228:	1b52      	subs	r2, r2, r5
 800522a:	6122      	str	r2, [r4, #16]
 800522c:	f8cd a000 	str.w	sl, [sp]
 8005230:	464b      	mov	r3, r9
 8005232:	aa03      	add	r2, sp, #12
 8005234:	4621      	mov	r1, r4
 8005236:	4640      	mov	r0, r8
 8005238:	f7ff fee2 	bl	8005000 <_printf_common>
 800523c:	3001      	adds	r0, #1
 800523e:	d14c      	bne.n	80052da <_printf_i+0x1fe>
 8005240:	f04f 30ff 	mov.w	r0, #4294967295
 8005244:	b004      	add	sp, #16
 8005246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524a:	4835      	ldr	r0, [pc, #212]	; (8005320 <_printf_i+0x244>)
 800524c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005250:	6829      	ldr	r1, [r5, #0]
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	f851 6b04 	ldr.w	r6, [r1], #4
 8005258:	6029      	str	r1, [r5, #0]
 800525a:	061d      	lsls	r5, r3, #24
 800525c:	d514      	bpl.n	8005288 <_printf_i+0x1ac>
 800525e:	07df      	lsls	r7, r3, #31
 8005260:	bf44      	itt	mi
 8005262:	f043 0320 	orrmi.w	r3, r3, #32
 8005266:	6023      	strmi	r3, [r4, #0]
 8005268:	b91e      	cbnz	r6, 8005272 <_printf_i+0x196>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	f023 0320 	bic.w	r3, r3, #32
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	2310      	movs	r3, #16
 8005274:	e7b0      	b.n	80051d8 <_printf_i+0xfc>
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	f043 0320 	orr.w	r3, r3, #32
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	2378      	movs	r3, #120	; 0x78
 8005280:	4828      	ldr	r0, [pc, #160]	; (8005324 <_printf_i+0x248>)
 8005282:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005286:	e7e3      	b.n	8005250 <_printf_i+0x174>
 8005288:	0659      	lsls	r1, r3, #25
 800528a:	bf48      	it	mi
 800528c:	b2b6      	uxthmi	r6, r6
 800528e:	e7e6      	b.n	800525e <_printf_i+0x182>
 8005290:	4615      	mov	r5, r2
 8005292:	e7bb      	b.n	800520c <_printf_i+0x130>
 8005294:	682b      	ldr	r3, [r5, #0]
 8005296:	6826      	ldr	r6, [r4, #0]
 8005298:	6961      	ldr	r1, [r4, #20]
 800529a:	1d18      	adds	r0, r3, #4
 800529c:	6028      	str	r0, [r5, #0]
 800529e:	0635      	lsls	r5, r6, #24
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	d501      	bpl.n	80052a8 <_printf_i+0x1cc>
 80052a4:	6019      	str	r1, [r3, #0]
 80052a6:	e002      	b.n	80052ae <_printf_i+0x1d2>
 80052a8:	0670      	lsls	r0, r6, #25
 80052aa:	d5fb      	bpl.n	80052a4 <_printf_i+0x1c8>
 80052ac:	8019      	strh	r1, [r3, #0]
 80052ae:	2300      	movs	r3, #0
 80052b0:	6123      	str	r3, [r4, #16]
 80052b2:	4615      	mov	r5, r2
 80052b4:	e7ba      	b.n	800522c <_printf_i+0x150>
 80052b6:	682b      	ldr	r3, [r5, #0]
 80052b8:	1d1a      	adds	r2, r3, #4
 80052ba:	602a      	str	r2, [r5, #0]
 80052bc:	681d      	ldr	r5, [r3, #0]
 80052be:	6862      	ldr	r2, [r4, #4]
 80052c0:	2100      	movs	r1, #0
 80052c2:	4628      	mov	r0, r5
 80052c4:	f7fa ffac 	bl	8000220 <memchr>
 80052c8:	b108      	cbz	r0, 80052ce <_printf_i+0x1f2>
 80052ca:	1b40      	subs	r0, r0, r5
 80052cc:	6060      	str	r0, [r4, #4]
 80052ce:	6863      	ldr	r3, [r4, #4]
 80052d0:	6123      	str	r3, [r4, #16]
 80052d2:	2300      	movs	r3, #0
 80052d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d8:	e7a8      	b.n	800522c <_printf_i+0x150>
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	462a      	mov	r2, r5
 80052de:	4649      	mov	r1, r9
 80052e0:	4640      	mov	r0, r8
 80052e2:	47d0      	blx	sl
 80052e4:	3001      	adds	r0, #1
 80052e6:	d0ab      	beq.n	8005240 <_printf_i+0x164>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	079b      	lsls	r3, r3, #30
 80052ec:	d413      	bmi.n	8005316 <_printf_i+0x23a>
 80052ee:	68e0      	ldr	r0, [r4, #12]
 80052f0:	9b03      	ldr	r3, [sp, #12]
 80052f2:	4298      	cmp	r0, r3
 80052f4:	bfb8      	it	lt
 80052f6:	4618      	movlt	r0, r3
 80052f8:	e7a4      	b.n	8005244 <_printf_i+0x168>
 80052fa:	2301      	movs	r3, #1
 80052fc:	4632      	mov	r2, r6
 80052fe:	4649      	mov	r1, r9
 8005300:	4640      	mov	r0, r8
 8005302:	47d0      	blx	sl
 8005304:	3001      	adds	r0, #1
 8005306:	d09b      	beq.n	8005240 <_printf_i+0x164>
 8005308:	3501      	adds	r5, #1
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	9903      	ldr	r1, [sp, #12]
 800530e:	1a5b      	subs	r3, r3, r1
 8005310:	42ab      	cmp	r3, r5
 8005312:	dcf2      	bgt.n	80052fa <_printf_i+0x21e>
 8005314:	e7eb      	b.n	80052ee <_printf_i+0x212>
 8005316:	2500      	movs	r5, #0
 8005318:	f104 0619 	add.w	r6, r4, #25
 800531c:	e7f5      	b.n	800530a <_printf_i+0x22e>
 800531e:	bf00      	nop
 8005320:	080055f1 	.word	0x080055f1
 8005324:	08005602 	.word	0x08005602

08005328 <_sbrk_r>:
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	4d06      	ldr	r5, [pc, #24]	; (8005344 <_sbrk_r+0x1c>)
 800532c:	2300      	movs	r3, #0
 800532e:	4604      	mov	r4, r0
 8005330:	4608      	mov	r0, r1
 8005332:	602b      	str	r3, [r5, #0]
 8005334:	f7fb ff4e 	bl	80011d4 <_sbrk>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d102      	bne.n	8005342 <_sbrk_r+0x1a>
 800533c:	682b      	ldr	r3, [r5, #0]
 800533e:	b103      	cbz	r3, 8005342 <_sbrk_r+0x1a>
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	200001b8 	.word	0x200001b8

08005348 <__sread>:
 8005348:	b510      	push	{r4, lr}
 800534a:	460c      	mov	r4, r1
 800534c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005350:	f000 f8a0 	bl	8005494 <_read_r>
 8005354:	2800      	cmp	r0, #0
 8005356:	bfab      	itete	ge
 8005358:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800535a:	89a3      	ldrhlt	r3, [r4, #12]
 800535c:	181b      	addge	r3, r3, r0
 800535e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005362:	bfac      	ite	ge
 8005364:	6563      	strge	r3, [r4, #84]	; 0x54
 8005366:	81a3      	strhlt	r3, [r4, #12]
 8005368:	bd10      	pop	{r4, pc}

0800536a <__swrite>:
 800536a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800536e:	461f      	mov	r7, r3
 8005370:	898b      	ldrh	r3, [r1, #12]
 8005372:	05db      	lsls	r3, r3, #23
 8005374:	4605      	mov	r5, r0
 8005376:	460c      	mov	r4, r1
 8005378:	4616      	mov	r6, r2
 800537a:	d505      	bpl.n	8005388 <__swrite+0x1e>
 800537c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005380:	2302      	movs	r3, #2
 8005382:	2200      	movs	r2, #0
 8005384:	f000 f868 	bl	8005458 <_lseek_r>
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800538e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005392:	81a3      	strh	r3, [r4, #12]
 8005394:	4632      	mov	r2, r6
 8005396:	463b      	mov	r3, r7
 8005398:	4628      	mov	r0, r5
 800539a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800539e:	f000 b817 	b.w	80053d0 <_write_r>

080053a2 <__sseek>:
 80053a2:	b510      	push	{r4, lr}
 80053a4:	460c      	mov	r4, r1
 80053a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053aa:	f000 f855 	bl	8005458 <_lseek_r>
 80053ae:	1c43      	adds	r3, r0, #1
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	bf15      	itete	ne
 80053b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80053b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053be:	81a3      	strheq	r3, [r4, #12]
 80053c0:	bf18      	it	ne
 80053c2:	81a3      	strhne	r3, [r4, #12]
 80053c4:	bd10      	pop	{r4, pc}

080053c6 <__sclose>:
 80053c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ca:	f000 b813 	b.w	80053f4 <_close_r>
	...

080053d0 <_write_r>:
 80053d0:	b538      	push	{r3, r4, r5, lr}
 80053d2:	4d07      	ldr	r5, [pc, #28]	; (80053f0 <_write_r+0x20>)
 80053d4:	4604      	mov	r4, r0
 80053d6:	4608      	mov	r0, r1
 80053d8:	4611      	mov	r1, r2
 80053da:	2200      	movs	r2, #0
 80053dc:	602a      	str	r2, [r5, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	f7fb f8f0 	bl	80005c4 <_write>
 80053e4:	1c43      	adds	r3, r0, #1
 80053e6:	d102      	bne.n	80053ee <_write_r+0x1e>
 80053e8:	682b      	ldr	r3, [r5, #0]
 80053ea:	b103      	cbz	r3, 80053ee <_write_r+0x1e>
 80053ec:	6023      	str	r3, [r4, #0]
 80053ee:	bd38      	pop	{r3, r4, r5, pc}
 80053f0:	200001b8 	.word	0x200001b8

080053f4 <_close_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	4d06      	ldr	r5, [pc, #24]	; (8005410 <_close_r+0x1c>)
 80053f8:	2300      	movs	r3, #0
 80053fa:	4604      	mov	r4, r0
 80053fc:	4608      	mov	r0, r1
 80053fe:	602b      	str	r3, [r5, #0]
 8005400:	f7fb feb3 	bl	800116a <_close>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_close_r+0x1a>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	b103      	cbz	r3, 800540e <_close_r+0x1a>
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	200001b8 	.word	0x200001b8

08005414 <_fstat_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4d07      	ldr	r5, [pc, #28]	; (8005434 <_fstat_r+0x20>)
 8005418:	2300      	movs	r3, #0
 800541a:	4604      	mov	r4, r0
 800541c:	4608      	mov	r0, r1
 800541e:	4611      	mov	r1, r2
 8005420:	602b      	str	r3, [r5, #0]
 8005422:	f7fb feae 	bl	8001182 <_fstat>
 8005426:	1c43      	adds	r3, r0, #1
 8005428:	d102      	bne.n	8005430 <_fstat_r+0x1c>
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	b103      	cbz	r3, 8005430 <_fstat_r+0x1c>
 800542e:	6023      	str	r3, [r4, #0]
 8005430:	bd38      	pop	{r3, r4, r5, pc}
 8005432:	bf00      	nop
 8005434:	200001b8 	.word	0x200001b8

08005438 <_isatty_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4d06      	ldr	r5, [pc, #24]	; (8005454 <_isatty_r+0x1c>)
 800543c:	2300      	movs	r3, #0
 800543e:	4604      	mov	r4, r0
 8005440:	4608      	mov	r0, r1
 8005442:	602b      	str	r3, [r5, #0]
 8005444:	f7fb fead 	bl	80011a2 <_isatty>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_isatty_r+0x1a>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	b103      	cbz	r3, 8005452 <_isatty_r+0x1a>
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	200001b8 	.word	0x200001b8

08005458 <_lseek_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d07      	ldr	r5, [pc, #28]	; (8005478 <_lseek_r+0x20>)
 800545c:	4604      	mov	r4, r0
 800545e:	4608      	mov	r0, r1
 8005460:	4611      	mov	r1, r2
 8005462:	2200      	movs	r2, #0
 8005464:	602a      	str	r2, [r5, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	f7fb fea6 	bl	80011b8 <_lseek>
 800546c:	1c43      	adds	r3, r0, #1
 800546e:	d102      	bne.n	8005476 <_lseek_r+0x1e>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	b103      	cbz	r3, 8005476 <_lseek_r+0x1e>
 8005474:	6023      	str	r3, [r4, #0]
 8005476:	bd38      	pop	{r3, r4, r5, pc}
 8005478:	200001b8 	.word	0x200001b8

0800547c <__malloc_lock>:
 800547c:	4801      	ldr	r0, [pc, #4]	; (8005484 <__malloc_lock+0x8>)
 800547e:	f7ff bb15 	b.w	8004aac <__retarget_lock_acquire_recursive>
 8005482:	bf00      	nop
 8005484:	200001ac 	.word	0x200001ac

08005488 <__malloc_unlock>:
 8005488:	4801      	ldr	r0, [pc, #4]	; (8005490 <__malloc_unlock+0x8>)
 800548a:	f7ff bb10 	b.w	8004aae <__retarget_lock_release_recursive>
 800548e:	bf00      	nop
 8005490:	200001ac 	.word	0x200001ac

08005494 <_read_r>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	4d07      	ldr	r5, [pc, #28]	; (80054b4 <_read_r+0x20>)
 8005498:	4604      	mov	r4, r0
 800549a:	4608      	mov	r0, r1
 800549c:	4611      	mov	r1, r2
 800549e:	2200      	movs	r2, #0
 80054a0:	602a      	str	r2, [r5, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	f7fb fe44 	bl	8001130 <_read>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	d102      	bne.n	80054b2 <_read_r+0x1e>
 80054ac:	682b      	ldr	r3, [r5, #0]
 80054ae:	b103      	cbz	r3, 80054b2 <_read_r+0x1e>
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	bd38      	pop	{r3, r4, r5, pc}
 80054b4:	200001b8 	.word	0x200001b8

080054b8 <_init>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	bf00      	nop
 80054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054be:	bc08      	pop	{r3}
 80054c0:	469e      	mov	lr, r3
 80054c2:	4770      	bx	lr

080054c4 <_fini>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	bf00      	nop
 80054c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ca:	bc08      	pop	{r3}
 80054cc:	469e      	mov	lr, r3
 80054ce:	4770      	bx	lr
