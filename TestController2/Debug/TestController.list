
TestController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b80  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08004d60  08004d60  00014d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ea4  08004ea4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004ea4  08004ea4  00014ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004eac  08004eac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eac  08004eac  00014eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004eb0  08004eb0  00014eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000070  08004f24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08004f24  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff5f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fdc  00000000  00000000  0002ffff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00031fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  00032c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e3db  00000000  00000000  000337d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfcd  00000000  00000000  00051bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd54a  00000000  00000000  0005fb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d0ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b6c  00000000  00000000  0011d11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004d48 	.word	0x08004d48

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004d48 	.word	0x08004d48

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	230a      	movs	r3, #10
 80005d6:	68b9      	ldr	r1, [r7, #8]
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <_write+0x24>)
 80005da:	f002 fc8f 	bl	8002efc <HAL_UART_Transmit>
	return len;
 80005de:	687b      	ldr	r3, [r7, #4]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000f0 	.word	0x200000f0

080005ec <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_15){
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005fc:	d103      	bne.n	8000606 <HAL_GPIO_EXTI_Callback+0x1a>
		printf("a\r\n");
 80005fe:	4824      	ldr	r0, [pc, #144]	; (8000690 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000600:	f003 fb4e 	bl	8003ca0 <puts>
		printf("i\r\n");
	}
	else if(GPIO_Pin == GPIO_PIN_3){
		printf("j\r\n");
	}
}
 8000604:	e03f      	b.n	8000686 <HAL_GPIO_EXTI_Callback+0x9a>
	else if(GPIO_Pin == GPIO_PIN_10){
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800060c:	d103      	bne.n	8000616 <HAL_GPIO_EXTI_Callback+0x2a>
		printf("b\r\n");
 800060e:	4821      	ldr	r0, [pc, #132]	; (8000694 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000610:	f003 fb46 	bl	8003ca0 <puts>
}
 8000614:	e037      	b.n	8000686 <HAL_GPIO_EXTI_Callback+0x9a>
	else if(GPIO_Pin == GPIO_PIN_9){
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800061c:	d103      	bne.n	8000626 <HAL_GPIO_EXTI_Callback+0x3a>
		printf("c\r\n");
 800061e:	481e      	ldr	r0, [pc, #120]	; (8000698 <HAL_GPIO_EXTI_Callback+0xac>)
 8000620:	f003 fb3e 	bl	8003ca0 <puts>
}
 8000624:	e02f      	b.n	8000686 <HAL_GPIO_EXTI_Callback+0x9a>
	else if(GPIO_Pin == GPIO_PIN_7){
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	2b80      	cmp	r3, #128	; 0x80
 800062a:	d103      	bne.n	8000634 <HAL_GPIO_EXTI_Callback+0x48>
		printf("d\r\n");
 800062c:	481b      	ldr	r0, [pc, #108]	; (800069c <HAL_GPIO_EXTI_Callback+0xb0>)
 800062e:	f003 fb37 	bl	8003ca0 <puts>
}
 8000632:	e028      	b.n	8000686 <HAL_GPIO_EXTI_Callback+0x9a>
	else if(GPIO_Pin == GPIO_PIN_6){
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	2b40      	cmp	r3, #64	; 0x40
 8000638:	d103      	bne.n	8000642 <HAL_GPIO_EXTI_Callback+0x56>
		printf("e\r\n");
 800063a:	4819      	ldr	r0, [pc, #100]	; (80006a0 <HAL_GPIO_EXTI_Callback+0xb4>)
 800063c:	f003 fb30 	bl	8003ca0 <puts>
}
 8000640:	e021      	b.n	8000686 <HAL_GPIO_EXTI_Callback+0x9a>
	else if(GPIO_Pin == GPIO_PIN_5){
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	2b20      	cmp	r3, #32
 8000646:	d103      	bne.n	8000650 <HAL_GPIO_EXTI_Callback+0x64>
		printf("f\r\n");
 8000648:	4816      	ldr	r0, [pc, #88]	; (80006a4 <HAL_GPIO_EXTI_Callback+0xb8>)
 800064a:	f003 fb29 	bl	8003ca0 <puts>
}
 800064e:	e01a      	b.n	8000686 <HAL_GPIO_EXTI_Callback+0x9a>
	else if(GPIO_Pin == GPIO_PIN_4){
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	2b10      	cmp	r3, #16
 8000654:	d103      	bne.n	800065e <HAL_GPIO_EXTI_Callback+0x72>
		printf("g\r\n");
 8000656:	4814      	ldr	r0, [pc, #80]	; (80006a8 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000658:	f003 fb22 	bl	8003ca0 <puts>
}
 800065c:	e013      	b.n	8000686 <HAL_GPIO_EXTI_Callback+0x9a>
	else if(GPIO_Pin == GPIO_PIN_1){
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d103      	bne.n	800066c <HAL_GPIO_EXTI_Callback+0x80>
		printf("h\r\n");
 8000664:	4811      	ldr	r0, [pc, #68]	; (80006ac <HAL_GPIO_EXTI_Callback+0xc0>)
 8000666:	f003 fb1b 	bl	8003ca0 <puts>
}
 800066a:	e00c      	b.n	8000686 <HAL_GPIO_EXTI_Callback+0x9a>
	else if(GPIO_Pin == GPIO_PIN_0){
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d103      	bne.n	800067a <HAL_GPIO_EXTI_Callback+0x8e>
		printf("i\r\n");
 8000672:	480f      	ldr	r0, [pc, #60]	; (80006b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000674:	f003 fb14 	bl	8003ca0 <puts>
}
 8000678:	e005      	b.n	8000686 <HAL_GPIO_EXTI_Callback+0x9a>
	else if(GPIO_Pin == GPIO_PIN_3){
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	2b08      	cmp	r3, #8
 800067e:	d102      	bne.n	8000686 <HAL_GPIO_EXTI_Callback+0x9a>
		printf("j\r\n");
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000682:	f003 fb0d 	bl	8003ca0 <puts>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	08004d60 	.word	0x08004d60
 8000694:	08004d64 	.word	0x08004d64
 8000698:	08004d68 	.word	0x08004d68
 800069c:	08004d6c 	.word	0x08004d6c
 80006a0:	08004d70 	.word	0x08004d70
 80006a4:	08004d74 	.word	0x08004d74
 80006a8:	08004d78 	.word	0x08004d78
 80006ac:	08004d7c 	.word	0x08004d7c
 80006b0:	08004d80 	.word	0x08004d80
 80006b4:	08004d84 	.word	0x08004d84

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006be:	f000 fc6a 	bl	8000f96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c2:	f000 f899 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c6:	f000 f9a7 	bl	8000a18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ca:	f000 f94f 	bl	800096c <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 80006ce:	f000 f8df 	bl	8000890 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t TxData[3];
  int8_t RobotVel[3];
  printf("Initialized\r\n");
 80006d2:	4840      	ldr	r0, [pc, #256]	; (80007d4 <main+0x11c>)
 80006d4:	f003 fae4 	bl	8003ca0 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	   if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==GPIO_PIN_RESET){
 80006d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f001 fbc4 	bl	8001e6c <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d109      	bne.n	80006fe <main+0x46>
		  RobotVel[0]=0;	RobotVel[1]=127;	RobotVel[2]=0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	713b      	strb	r3, [r7, #4]
 80006ee:	237f      	movs	r3, #127	; 0x7f
 80006f0:	717b      	strb	r3, [r7, #5]
 80006f2:	2300      	movs	r3, #0
 80006f4:	71bb      	strb	r3, [r7, #6]
		  printf("Y+\r\n");
 80006f6:	4838      	ldr	r0, [pc, #224]	; (80007d8 <main+0x120>)
 80006f8:	f003 fad2 	bl	8003ca0 <puts>
 80006fc:	e03a      	b.n	8000774 <main+0xbc>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)==GPIO_PIN_RESET){
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	4836      	ldr	r0, [pc, #216]	; (80007dc <main+0x124>)
 8000702:	f001 fbb3 	bl	8001e6c <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d109      	bne.n	8000720 <main+0x68>
		  RobotVel[0]=0;	RobotVel[1]=-127;	RobotVel[2]=0;
 800070c:	2300      	movs	r3, #0
 800070e:	713b      	strb	r3, [r7, #4]
 8000710:	2381      	movs	r3, #129	; 0x81
 8000712:	717b      	strb	r3, [r7, #5]
 8000714:	2300      	movs	r3, #0
 8000716:	71bb      	strb	r3, [r7, #6]
		  printf("Y-\r\n");
 8000718:	4831      	ldr	r0, [pc, #196]	; (80007e0 <main+0x128>)
 800071a:	f003 fac1 	bl	8003ca0 <puts>
 800071e:	e029      	b.n	8000774 <main+0xbc>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_RESET){
 8000720:	2120      	movs	r1, #32
 8000722:	482e      	ldr	r0, [pc, #184]	; (80007dc <main+0x124>)
 8000724:	f001 fba2 	bl	8001e6c <HAL_GPIO_ReadPin>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d109      	bne.n	8000742 <main+0x8a>
		  RobotVel[0]=127;	RobotVel[1]=0;	RobotVel[2]=0;
 800072e:	237f      	movs	r3, #127	; 0x7f
 8000730:	713b      	strb	r3, [r7, #4]
 8000732:	2300      	movs	r3, #0
 8000734:	717b      	strb	r3, [r7, #5]
 8000736:	2300      	movs	r3, #0
 8000738:	71bb      	strb	r3, [r7, #6]
		  printf("X+\r\n");
 800073a:	482a      	ldr	r0, [pc, #168]	; (80007e4 <main+0x12c>)
 800073c:	f003 fab0 	bl	8003ca0 <puts>
 8000740:	e018      	b.n	8000774 <main+0xbc>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)==GPIO_PIN_RESET){
 8000742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074a:	f001 fb8f 	bl	8001e6c <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d109      	bne.n	8000768 <main+0xb0>
		  RobotVel[0]=-127;	RobotVel[1]=0;	RobotVel[2]=0;
 8000754:	2381      	movs	r3, #129	; 0x81
 8000756:	713b      	strb	r3, [r7, #4]
 8000758:	2300      	movs	r3, #0
 800075a:	717b      	strb	r3, [r7, #5]
 800075c:	2300      	movs	r3, #0
 800075e:	71bb      	strb	r3, [r7, #6]
		  printf("X-\r\n");
 8000760:	4821      	ldr	r0, [pc, #132]	; (80007e8 <main+0x130>)
 8000762:	f003 fa9d 	bl	8003ca0 <puts>
 8000766:	e005      	b.n	8000774 <main+0xbc>
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==GPIO_PIN_RESET){
		  RobotVel[0]=0;	RobotVel[1]=0;	RobotVel[2]=0;
		  printf("R-\r\n");
	  }*/
	  else{
		  RobotVel[0]=0;	RobotVel[1]=0;	RobotVel[2]=0;
 8000768:	2300      	movs	r3, #0
 800076a:	713b      	strb	r3, [r7, #4]
 800076c:	2300      	movs	r3, #0
 800076e:	717b      	strb	r3, [r7, #5]
 8000770:	2300      	movs	r3, #0
 8000772:	71bb      	strb	r3, [r7, #6]
		 // printf("N\r\n");
	  }

	  for(int i=0; i<3; i++){
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	e010      	b.n	800079c <main+0xe4>
		  TxData[i] = RobotVel[i]+127;
 800077a:	1d3a      	adds	r2, r7, #4
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	4413      	add	r3, r2
 8000780:	f993 3000 	ldrsb.w	r3, [r3]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	337f      	adds	r3, #127	; 0x7f
 8000788:	b2d9      	uxtb	r1, r3
 800078a:	f107 0208 	add.w	r2, r7, #8
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	4413      	add	r3, r2
 8000792:	460a      	mov	r2, r1
 8000794:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<3; i++){
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3301      	adds	r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	ddeb      	ble.n	800077a <main+0xc2>

	  }
	  printf("X:%d, Y%d, Om%d\r\n", TxData[0], TxData[1], TxData[2]);
 80007a2:	7a3b      	ldrb	r3, [r7, #8]
 80007a4:	4619      	mov	r1, r3
 80007a6:	7a7b      	ldrb	r3, [r7, #9]
 80007a8:	461a      	mov	r2, r3
 80007aa:	7abb      	ldrb	r3, [r7, #10]
 80007ac:	480f      	ldr	r0, [pc, #60]	; (80007ec <main+0x134>)
 80007ae:	f003 f9f1 	bl	8003b94 <iprintf>

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	461a      	mov	r2, r3
 80007b8:	490d      	ldr	r1, [pc, #52]	; (80007f0 <main+0x138>)
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <main+0x13c>)
 80007bc:	f000 ff10 	bl	80015e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <main+0x112>

	  		Error_Handler();
 80007c6:	f000 f9cb 	bl	8000b60 <Error_Handler>
	  	}

	  HAL_Delay(15);
 80007ca:	200f      	movs	r0, #15
 80007cc:	f000 fc54 	bl	8001078 <HAL_Delay>
	   if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==GPIO_PIN_RESET){
 80007d0:	e782      	b.n	80006d8 <main+0x20>
 80007d2:	bf00      	nop
 80007d4:	08004d88 	.word	0x08004d88
 80007d8:	08004d98 	.word	0x08004d98
 80007dc:	48000400 	.word	0x48000400
 80007e0:	08004d9c 	.word	0x08004d9c
 80007e4:	08004da0 	.word	0x08004da0
 80007e8:	08004da4 	.word	0x08004da4
 80007ec:	08004da8 	.word	0x08004da8
 80007f0:	20000180 	.word	0x20000180
 80007f4:	2000008c 	.word	0x2000008c

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b094      	sub	sp, #80	; 0x50
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0318 	add.w	r3, r7, #24
 8000802:	2238      	movs	r2, #56	; 0x38
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f003 f9bc 	bl	8003b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800081a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800081e:	f001 fb55 	bl	8001ecc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000822:	2302      	movs	r3, #2
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2340      	movs	r3, #64	; 0x40
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000830:	2302      	movs	r3, #2
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000834:	2302      	movs	r3, #2
 8000836:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000838:	2301      	movs	r3, #1
 800083a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 800083c:	230a      	movs	r3, #10
 800083e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000844:	2302      	movs	r3, #2
 8000846:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000848:	2302      	movs	r3, #2
 800084a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 0318 	add.w	r3, r7, #24
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fbdf 	bl	8002014 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800085c:	f000 f980 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	230f      	movs	r3, #15
 8000862:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	2303      	movs	r3, #3
 8000866:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2102      	movs	r1, #2
 8000878:	4618      	mov	r0, r3
 800087a:	f001 fee3 	bl	8002644 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000884:	f000 f96c 	bl	8000b60 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3750      	adds	r7, #80	; 0x50
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000894:	4b32      	ldr	r3, [pc, #200]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 8000896:	4a33      	ldr	r2, [pc, #204]	; (8000964 <MX_FDCAN1_Init+0xd4>)
 8000898:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800089a:	4b31      	ldr	r3, [pc, #196]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008a0:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80008a6:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80008ac:	4b2c      	ldr	r3, [pc, #176]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80008b2:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80008b8:	4b29      	ldr	r3, [pc, #164]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 80008be:	4b28      	ldr	r3, [pc, #160]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 80008c0:	2205      	movs	r2, #5
 80008c2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 80008c4:	4b26      	ldr	r3, [pc, #152]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 80008c6:	2210      	movs	r2, #16
 80008c8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80008ca:	4b25      	ldr	r3, [pc, #148]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 80008cc:	220d      	movs	r2, #13
 80008ce:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80008d0:	4b23      	ldr	r3, [pc, #140]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 80008d2:	2202      	movs	r2, #2
 80008d4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80008d6:	4b22      	ldr	r3, [pc, #136]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 80008d8:	2201      	movs	r2, #1
 80008da:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80008dc:	4b20      	ldr	r3, [pc, #128]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 80008de:	2204      	movs	r2, #4
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 80008e4:	2205      	movs	r2, #5
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 80008ea:	2204      	movs	r2, #4
 80008ec:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000900:	4817      	ldr	r0, [pc, #92]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 8000902:	f000 fceb 	bl	80012dc <HAL_FDCAN_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800090c:	f000 f928 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000910:	4813      	ldr	r0, [pc, #76]	; (8000960 <MX_FDCAN1_Init+0xd0>)
 8000912:	f000 fe3d 	bl	8001590 <HAL_FDCAN_Start>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_FDCAN1_Init+0x90>
  		Error_Handler();
 800091c:	f000 f920 	bl	8000b60 <Error_Handler>
  	}

  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_FDCAN1_Init+0xd8>)
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
  	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_FDCAN1_Init+0xd8>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  	TxHeader.DataLength = FDCAN_DLC_BYTES_3;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_FDCAN1_Init+0xd8>)
 800092e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000932:	60da      	str	r2, [r3, #12]
  	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_FDCAN1_Init+0xd8>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_FDCAN1_Init+0xd8>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_FDCAN1_Init+0xd8>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_FDCAN1_Init+0xd8>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  	TxHeader.MessageMarker = 0;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_FDCAN1_Init+0xd8>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  	TxHeader.Identifier = CANID_ROBOTVEL;
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <MX_FDCAN1_Init+0xd8>)
 8000954:	f240 220f 	movw	r2, #527	; 0x20f
 8000958:	601a      	str	r2, [r3, #0]

  /* USER CODE END FDCAN1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000008c 	.word	0x2000008c
 8000964:	40006400 	.word	0x40006400
 8000968:	20000180 	.word	0x20000180

0800096c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000970:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <MX_USART2_UART_Init+0xa0>)
 8000972:	4a27      	ldr	r2, [pc, #156]	; (8000a10 <MX_USART2_UART_Init+0xa4>)
 8000974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000976:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <MX_USART2_UART_Init+0xa0>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <MX_USART2_UART_Init+0xa0>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <MX_USART2_UART_Init+0xa0>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098a:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <MX_USART2_UART_Init+0xa0>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <MX_USART2_UART_Init+0xa0>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_USART2_UART_Init+0xa0>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <MX_USART2_UART_Init+0xa0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_USART2_UART_Init+0xa0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_USART2_UART_Init+0xa0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_USART2_UART_Init+0xa0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b4:	4815      	ldr	r0, [pc, #84]	; (8000a0c <MX_USART2_UART_Init+0xa0>)
 80009b6:	f002 fa51 	bl	8002e5c <HAL_UART_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009c0:	f000 f8ce 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4811      	ldr	r0, [pc, #68]	; (8000a0c <MX_USART2_UART_Init+0xa0>)
 80009c8:	f002 ffe8 	bl	800399c <HAL_UARTEx_SetTxFifoThreshold>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009d2:	f000 f8c5 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <MX_USART2_UART_Init+0xa0>)
 80009da:	f003 f81d 	bl	8003a18 <HAL_UARTEx_SetRxFifoThreshold>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009e4:	f000 f8bc 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <MX_USART2_UART_Init+0xa0>)
 80009ea:	f002 ff9e 	bl	800392a <HAL_UARTEx_DisableFifoMode>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009f4:	f000 f8b4 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  setbuf(stdout, NULL);
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART2_UART_Init+0xa8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 f955 	bl	8003cb0 <setbuf>

  /* USER CODE END USART2_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200000f0 	.word	0x200000f0
 8000a10:	40004400 	.word	0x40004400
 8000a14:	2000000c 	.word	0x2000000c

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2e:	4b49      	ldr	r3, [pc, #292]	; (8000b54 <MX_GPIO_Init+0x13c>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a48      	ldr	r2, [pc, #288]	; (8000b54 <MX_GPIO_Init+0x13c>)
 8000a34:	f043 0320 	orr.w	r3, r3, #32
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b46      	ldr	r3, [pc, #280]	; (8000b54 <MX_GPIO_Init+0x13c>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0320 	and.w	r3, r3, #32
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b43      	ldr	r3, [pc, #268]	; (8000b54 <MX_GPIO_Init+0x13c>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a42      	ldr	r2, [pc, #264]	; (8000b54 <MX_GPIO_Init+0x13c>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b40      	ldr	r3, [pc, #256]	; (8000b54 <MX_GPIO_Init+0x13c>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b3d      	ldr	r3, [pc, #244]	; (8000b54 <MX_GPIO_Init+0x13c>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a3c      	ldr	r2, [pc, #240]	; (8000b54 <MX_GPIO_Init+0x13c>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <MX_GPIO_Init+0x13c>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a76:	2303      	movs	r3, #3
 8000a78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	4619      	mov	r1, r3
 8000a88:	4833      	ldr	r0, [pc, #204]	; (8000b58 <MX_GPIO_Init+0x140>)
 8000a8a:	f001 f86d 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000a8e:	f240 63f3 	movw	r3, #1779	; 0x6f3
 8000a92:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f001 f85e 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000aac:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000ab0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f001 f850 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000acc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ad0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4619      	mov	r1, r3
 8000adc:	481f      	ldr	r0, [pc, #124]	; (8000b5c <MX_GPIO_Init+0x144>)
 8000ade:	f001 f843 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ae2:	23f0      	movs	r3, #240	; 0xf0
 8000ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4619      	mov	r1, r3
 8000af4:	4819      	ldr	r0, [pc, #100]	; (8000b5c <MX_GPIO_Init+0x144>)
 8000af6:	f001 f837 	bl	8001b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2006      	movs	r0, #6
 8000b00:	f000 fbb7 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b04:	2006      	movs	r0, #6
 8000b06:	f000 fbce 	bl	80012a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2007      	movs	r0, #7
 8000b10:	f000 fbaf 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b14:	2007      	movs	r0, #7
 8000b16:	f000 fbc6 	bl	80012a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f000 fba7 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b24:	200a      	movs	r0, #10
 8000b26:	f000 fbbe 	bl	80012a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2017      	movs	r0, #23
 8000b30:	f000 fb9f 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b34:	2017      	movs	r0, #23
 8000b36:	f000 fbb6 	bl	80012a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2028      	movs	r0, #40	; 0x28
 8000b40:	f000 fb97 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b44:	2028      	movs	r0, #40	; 0x28
 8000b46:	f000 fbae 	bl	80012a6 <HAL_NVIC_EnableIRQ>

}
 8000b4a:	bf00      	nop
 8000b4c:	3720      	adds	r7, #32
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48001400 	.word	0x48001400
 8000b5c:	48000400 	.word	0x48000400

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b76:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6593      	str	r3, [r2, #88]	; 0x58
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b09a      	sub	sp, #104	; 0x68
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	2244      	movs	r2, #68	; 0x44
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 ffd5 	bl	8003b84 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a28      	ldr	r2, [pc, #160]	; (8000c80 <HAL_FDCAN_MspInit+0xcc>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d149      	bne.n	8000c78 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000bea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bee:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 ff41 	bl	8002a7c <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000c00:	f7ff ffae 	bl	8000b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <HAL_FDCAN_MspInit+0xd0>)
 8000c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c08:	4a1e      	ldr	r2, [pc, #120]	; (8000c84 <HAL_FDCAN_MspInit+0xd0>)
 8000c0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <HAL_FDCAN_MspInit+0xd0>)
 8000c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <HAL_FDCAN_MspInit+0xd0>)
 8000c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c20:	4a18      	ldr	r2, [pc, #96]	; (8000c84 <HAL_FDCAN_MspInit+0xd0>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_FDCAN_MspInit+0xd0>)
 8000c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c38:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c46:	2309      	movs	r3, #9
 8000c48:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c54:	f000 ff88 	bl	8001b68 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2015      	movs	r0, #21
 8000c5e:	f000 fb08 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c62:	2015      	movs	r0, #21
 8000c64:	f000 fb1f 	bl	80012a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2016      	movs	r0, #22
 8000c6e:	f000 fb00 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000c72:	2016      	movs	r0, #22
 8000c74:	f000 fb17 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000c78:	bf00      	nop
 8000c7a:	3768      	adds	r7, #104	; 0x68
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40006400 	.word	0x40006400
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09a      	sub	sp, #104	; 0x68
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	2244      	movs	r2, #68	; 0x44
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 ff6b 	bl	8003b84 <memset>
  if(huart->Instance==USART2)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a1f      	ldr	r2, [pc, #124]	; (8000d30 <HAL_UART_MspInit+0xa8>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d136      	bne.n	8000d26 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 fed9 	bl	8002a7c <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cd0:	f7ff ff46 	bl	8000b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_UART_MspInit+0xac>)
 8000cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd8:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <HAL_UART_MspInit+0xac>)
 8000cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cde:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_UART_MspInit+0xac>)
 8000ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_UART_MspInit+0xac>)
 8000cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf0:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_UART_MspInit+0xac>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_UART_MspInit+0xac>)
 8000cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000d04:	230c      	movs	r3, #12
 8000d06:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d14:	2307      	movs	r3, #7
 8000d16:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d22:	f000 ff21 	bl	8001b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3768      	adds	r7, #104	; 0x68
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40004400 	.word	0x40004400
 8000d34:	40021000 	.word	0x40021000

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d84:	f000 f95a 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f001 f883 	bl	8001e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f001 f87c 	bl	8001e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000dac:	2010      	movs	r0, #16
 8000dae:	f001 f875 	bl	8001e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <FDCAN1_IT0_IRQHandler+0x10>)
 8000dbe:	f000 fc53 	bl	8001668 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000008c 	.word	0x2000008c

08000dcc <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <FDCAN1_IT1_IRQHandler+0x10>)
 8000dd2:	f000 fc49 	bl	8001668 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000008c 	.word	0x2000008c

08000de0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000de4:	2020      	movs	r0, #32
 8000de6:	f001 f859 	bl	8001e9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000dea:	2040      	movs	r0, #64	; 0x40
 8000dec:	f001 f856 	bl	8001e9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000df0:	2080      	movs	r0, #128	; 0x80
 8000df2:	f001 f853 	bl	8001e9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000df6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dfa:	f001 f84f 	bl	8001e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000e06:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e0a:	f001 f847 	bl	8001e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	e00a      	b.n	8000e3a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e24:	f3af 8000 	nop.w
 8000e28:	4601      	mov	r1, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	60ba      	str	r2, [r7, #8]
 8000e30:	b2ca      	uxtb	r2, r1
 8000e32:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	3301      	adds	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	dbf0      	blt.n	8000e24 <_read+0x12>
	}

return len;
 8000e42:	687b      	ldr	r3, [r7, #4]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	return -1;
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e74:	605a      	str	r2, [r3, #4]
	return 0;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <_isatty>:

int _isatty(int file)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	return 1;
 8000e8c:	2301      	movs	r3, #1
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b085      	sub	sp, #20
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
	return 0;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f002 fe24 	bl	8003b30 <__errno>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20008000 	.word	0x20008000
 8000f14:	00000400 	.word	0x00000400
 8000f18:	200001a4 	.word	0x200001a4
 8000f1c:	200001c0 	.word	0x200001c0

08000f20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4a:	490e      	ldr	r1, [pc, #56]	; (8000f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <LoopForever+0xe>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f60:	4c0b      	ldr	r4, [pc, #44]	; (8000f90 <LoopForever+0x16>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f6e:	f7ff ffd7 	bl	8000f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f72:	f002 fde3 	bl	8003b3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f76:	f7ff fb9f 	bl	80006b8 <main>

08000f7a <LoopForever>:

LoopForever:
    b LoopForever
 8000f7a:	e7fe      	b.n	8000f7a <LoopForever>
  ldr   r0, =_estack
 8000f7c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f88:	08004eb4 	.word	0x08004eb4
  ldr r2, =_sbss
 8000f8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f90:	200001bc 	.word	0x200001bc

08000f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_2_IRQHandler>

08000f96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f95b 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f80e 	bl	8000fc8 <HAL_InitTick>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	e001      	b.n	8000fbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb8:	f7ff fdd8 	bl	8000b6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]

}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_InitTick+0x68>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d022      	beq.n	8001022 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_InitTick+0x6c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_InitTick+0x68>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f966 	bl	80012c2 <HAL_SYSTICK_Config>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10f      	bne.n	800101c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b0f      	cmp	r3, #15
 8001000:	d809      	bhi.n	8001016 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001002:	2200      	movs	r2, #0
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	f04f 30ff 	mov.w	r0, #4294967295
 800100a:	f000 f932 	bl	8001272 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_InitTick+0x70>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	e007      	b.n	8001026 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	e004      	b.n	8001026 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e001      	b.n	8001026 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000008 	.word	0x20000008
 8001034:	20000000 	.word	0x20000000
 8001038:	20000004 	.word	0x20000004

0800103c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_IncTick+0x1c>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x20>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4413      	add	r3, r2
 800104a:	4a03      	ldr	r2, [pc, #12]	; (8001058 <HAL_IncTick+0x1c>)
 800104c:	6013      	str	r3, [r2, #0]
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	200001a8 	.word	0x200001a8
 800105c:	20000008 	.word	0x20000008

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200001a8 	.word	0x200001a8

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d004      	beq.n	800109c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_Delay+0x40>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109c:	bf00      	nop
 800109e:	f7ff ffdf 	bl	8001060 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d8f7      	bhi.n	800109e <HAL_Delay+0x26>
  {
  }
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000008 	.word	0x20000008

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <__NVIC_EnableIRQ+0x38>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff29 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff40 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff90 	bl	80011b0 <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5f 	bl	800115c <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff33 	bl	8001120 <__NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffa4 	bl	8001218 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e147      	b.n	800157e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d106      	bne.n	8001308 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fc56 	bl	8000bb4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	699a      	ldr	r2, [r3, #24]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0210 	bic.w	r2, r2, #16
 8001316:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001318:	f7ff fea2 	bl	8001060 <HAL_GetTick>
 800131c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800131e:	e012      	b.n	8001346 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001320:	f7ff fe9e 	bl	8001060 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b0a      	cmp	r3, #10
 800132c:	d90b      	bls.n	8001346 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001332:	f043 0201 	orr.w	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2203      	movs	r2, #3
 800133e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e11b      	b.n	800157e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b08      	cmp	r3, #8
 8001352:	d0e5      	beq.n	8001320 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	699a      	ldr	r2, [r3, #24]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001364:	f7ff fe7c 	bl	8001060 <HAL_GetTick>
 8001368:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800136a:	e012      	b.n	8001392 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800136c:	f7ff fe78 	bl	8001060 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b0a      	cmp	r3, #10
 8001378:	d90b      	bls.n	8001392 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137e:	f043 0201 	orr.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2203      	movs	r2, #3
 800138a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0f5      	b.n	800157e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0e5      	beq.n	800136c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	699a      	ldr	r2, [r3, #24]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0202 	orr.w	r2, r2, #2
 80013ae:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a74      	ldr	r2, [pc, #464]	; (8001588 <HAL_FDCAN_Init+0x2ac>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d103      	bne.n	80013c2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80013ba:	4a74      	ldr	r2, [pc, #464]	; (800158c <HAL_FDCAN_Init+0x2b0>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7c1b      	ldrb	r3, [r3, #16]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d108      	bne.n	80013dc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	699a      	ldr	r2, [r3, #24]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013d8:	619a      	str	r2, [r3, #24]
 80013da:	e007      	b.n	80013ec <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699a      	ldr	r2, [r3, #24]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7c5b      	ldrb	r3, [r3, #17]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d108      	bne.n	8001406 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	699a      	ldr	r2, [r3, #24]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001402:	619a      	str	r2, [r3, #24]
 8001404:	e007      	b.n	8001416 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	699a      	ldr	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001414:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7c9b      	ldrb	r3, [r3, #18]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d108      	bne.n	8001430 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699a      	ldr	r2, [r3, #24]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800142c:	619a      	str	r2, [r3, #24]
 800142e:	e007      	b.n	8001440 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	699a      	ldr	r2, [r3, #24]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800143e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	699a      	ldr	r2, [r3, #24]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001464:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0210 	bic.w	r2, r2, #16
 8001474:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d108      	bne.n	8001490 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	699a      	ldr	r2, [r3, #24]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0204 	orr.w	r2, r2, #4
 800148c:	619a      	str	r2, [r3, #24]
 800148e:	e02c      	b.n	80014ea <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d028      	beq.n	80014ea <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d01c      	beq.n	80014da <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699a      	ldr	r2, [r3, #24]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ae:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	691a      	ldr	r2, [r3, #16]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0210 	orr.w	r2, r2, #16
 80014be:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d110      	bne.n	80014ea <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	699a      	ldr	r2, [r3, #24]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0220 	orr.w	r2, r2, #32
 80014d6:	619a      	str	r2, [r3, #24]
 80014d8:	e007      	b.n	80014ea <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	699a      	ldr	r2, [r3, #24]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0220 	orr.w	r2, r2, #32
 80014e8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014fa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001502:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	3b01      	subs	r3, #1
 800150c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001512:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001514:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800151e:	d115      	bne.n	800154c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001524:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152a:	3b01      	subs	r3, #1
 800152c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800152e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	3b01      	subs	r3, #1
 8001536:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001538:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	3b01      	subs	r3, #1
 8001542:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001548:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800154a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 fa2e 	bl	80019c4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40006400 	.word	0x40006400
 800158c:	40006500 	.word	0x40006500

08001590 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d110      	bne.n	80015c6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2202      	movs	r2, #2
 80015a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699a      	ldr	r2, [r3, #24]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e006      	b.n	80015d4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ca:	f043 0204 	orr.w	r2, r3, #4
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
  }
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d12c      	bne.n	8001652 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d007      	beq.n	8001618 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e023      	b.n	8001660 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001620:	0c1b      	lsrs	r3, r3, #16
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 fa1e 	bl	8001a70 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2101      	movs	r1, #1
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	fa01 f202 	lsl.w	r2, r1, r2
 8001640:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001644:	2201      	movs	r2, #1
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	409a      	lsls	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e006      	b.n	8001660 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001656:	f043 0208 	orr.w	r2, r3, #8
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
  }
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001676:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001684:	4013      	ands	r3, r2
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169a:	6a3a      	ldr	r2, [r7, #32]
 800169c:	4013      	ands	r3, r2
 800169e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016aa:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016be:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80016c2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016da:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4013      	ands	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00d      	beq.n	8001712 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2240      	movs	r2, #64	; 0x40
 800170a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f939 	bl	8001984 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01b      	beq.n	8001758 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d014      	beq.n	8001758 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001736:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800174e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001750:	6939      	ldr	r1, [r7, #16]
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f8f7 	bl	8001946 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	2b00      	cmp	r3, #0
 800175c:	d007      	beq.n	800176e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001764:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001766:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f8b6 	bl	80018da <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d007      	beq.n	8001784 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6a3a      	ldr	r2, [r7, #32]
 800177a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800177c:	6a39      	ldr	r1, [r7, #32]
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f8b6 	bl	80018f0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001792:	69f9      	ldr	r1, [r7, #28]
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f8b6 	bl	8001906 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00e      	beq.n	80017c6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d007      	beq.n	80017c6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017be:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f8ab 	bl	800191c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d01a      	beq.n	800180a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d013      	beq.n	800180a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80017ea:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4013      	ands	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001802:	68f9      	ldr	r1, [r7, #12]
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f893 	bl	8001930 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00e      	beq.n	8001836 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d007      	beq.n	8001836 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800182e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f893 	bl	800195c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800183c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00e      	beq.n	8001862 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800185a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f887 	bl	8001970 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d011      	beq.n	8001894 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00a      	beq.n	8001894 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001886:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80018a2:	6979      	ldr	r1, [r7, #20]
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f881 	bl	80019ac <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d009      	beq.n	80018c4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f863 	bl	8001998 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80019ce:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019de:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e6:	041a      	lsls	r2, r3, #16
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a04:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	061a      	lsls	r2, r3, #24
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e005      	b.n	8001a52 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3304      	adds	r3, #4
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d3f3      	bcc.n	8001a46 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001a5e:	bf00      	nop
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	4000a400 	.word	0x4000a400

08001a70 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10a      	bne.n	8001a9c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001a8e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	e00a      	b.n	8001ab2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001aa4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001aaa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001aac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ab0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001abc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001ac2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001ac8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	3304      	adds	r3, #4
 8001aee:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	3304      	adds	r3, #4
 8001afa:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e020      	b.n	8001b44 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3303      	adds	r3, #3
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3302      	adds	r3, #2
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	440b      	add	r3, r1
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001b1a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	440b      	add	r3, r1
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001b28:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	440a      	add	r2, r1
 8001b30:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001b32:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3304      	adds	r3, #4
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <FDCAN_CopyMessageToRAM+0xf4>)
 8001b4c:	5cd3      	ldrb	r3, [r2, r3]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d3d5      	bcc.n	8001b02 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
 8001b5a:	3724      	adds	r7, #36	; 0x24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	08004dd4 	.word	0x08004dd4

08001b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b76:	e15a      	b.n	8001e2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 814c 	beq.w	8001e28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d005      	beq.n	8001ba8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d130      	bne.n	8001c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bde:	2201      	movs	r2, #1
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	091b      	lsrs	r3, r3, #4
 8001bf4:	f003 0201 	and.w	r2, r3, #1
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d017      	beq.n	8001c46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d123      	bne.n	8001c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	08da      	lsrs	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3208      	adds	r2, #8
 8001c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	220f      	movs	r2, #15
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	08da      	lsrs	r2, r3, #3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3208      	adds	r2, #8
 8001c94:	6939      	ldr	r1, [r7, #16]
 8001c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0203 	and.w	r2, r3, #3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 80a6 	beq.w	8001e28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cdc:	4b5b      	ldr	r3, [pc, #364]	; (8001e4c <HAL_GPIO_Init+0x2e4>)
 8001cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce0:	4a5a      	ldr	r2, [pc, #360]	; (8001e4c <HAL_GPIO_Init+0x2e4>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ce8:	4b58      	ldr	r3, [pc, #352]	; (8001e4c <HAL_GPIO_Init+0x2e4>)
 8001cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf4:	4a56      	ldr	r2, [pc, #344]	; (8001e50 <HAL_GPIO_Init+0x2e8>)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d1e:	d01f      	beq.n	8001d60 <HAL_GPIO_Init+0x1f8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a4c      	ldr	r2, [pc, #304]	; (8001e54 <HAL_GPIO_Init+0x2ec>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d019      	beq.n	8001d5c <HAL_GPIO_Init+0x1f4>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a4b      	ldr	r2, [pc, #300]	; (8001e58 <HAL_GPIO_Init+0x2f0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d013      	beq.n	8001d58 <HAL_GPIO_Init+0x1f0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a4a      	ldr	r2, [pc, #296]	; (8001e5c <HAL_GPIO_Init+0x2f4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d00d      	beq.n	8001d54 <HAL_GPIO_Init+0x1ec>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a49      	ldr	r2, [pc, #292]	; (8001e60 <HAL_GPIO_Init+0x2f8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d007      	beq.n	8001d50 <HAL_GPIO_Init+0x1e8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a48      	ldr	r2, [pc, #288]	; (8001e64 <HAL_GPIO_Init+0x2fc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_GPIO_Init+0x1e4>
 8001d48:	2305      	movs	r3, #5
 8001d4a:	e00a      	b.n	8001d62 <HAL_GPIO_Init+0x1fa>
 8001d4c:	2306      	movs	r3, #6
 8001d4e:	e008      	b.n	8001d62 <HAL_GPIO_Init+0x1fa>
 8001d50:	2304      	movs	r3, #4
 8001d52:	e006      	b.n	8001d62 <HAL_GPIO_Init+0x1fa>
 8001d54:	2303      	movs	r3, #3
 8001d56:	e004      	b.n	8001d62 <HAL_GPIO_Init+0x1fa>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e002      	b.n	8001d62 <HAL_GPIO_Init+0x1fa>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <HAL_GPIO_Init+0x1fa>
 8001d60:	2300      	movs	r3, #0
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	f002 0203 	and.w	r2, r2, #3
 8001d68:	0092      	lsls	r2, r2, #2
 8001d6a:	4093      	lsls	r3, r2
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d72:	4937      	ldr	r1, [pc, #220]	; (8001e50 <HAL_GPIO_Init+0x2e8>)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	3302      	adds	r3, #2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d80:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001da4:	4a30      	ldr	r2, [pc, #192]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001daa:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dce:	4a26      	ldr	r2, [pc, #152]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001dd4:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001df8:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e22:	4a11      	ldr	r2, [pc, #68]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f47f ae9d 	bne.w	8001b78 <HAL_GPIO_Init+0x10>
  }
}
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010000 	.word	0x40010000
 8001e54:	48000400 	.word	0x48000400
 8001e58:	48000800 	.word	0x48000800
 8001e5c:	48000c00 	.word	0x48000c00
 8001e60:	48001000 	.word	0x48001000
 8001e64:	48001400 	.word	0x48001400
 8001e68:	40010400 	.word	0x40010400

08001e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
 8001e88:	e001      	b.n	8001e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d006      	beq.n	8001ec0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fb96 	bl	80005ec <HAL_GPIO_EXTI_Callback>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40010400 	.word	0x40010400

08001ecc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d141      	bne.n	8001f5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eda:	4b4b      	ldr	r3, [pc, #300]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee6:	d131      	bne.n	8001f4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ee8:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eee:	4a46      	ldr	r2, [pc, #280]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ef4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f00:	4a41      	ldr	r2, [pc, #260]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f08:	4b40      	ldr	r3, [pc, #256]	; (800200c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2232      	movs	r2, #50	; 0x32
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	4a3f      	ldr	r2, [pc, #252]	; (8002010 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f14:	fba2 2303 	umull	r2, r3, r2, r3
 8001f18:	0c9b      	lsrs	r3, r3, #18
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f1e:	e002      	b.n	8001f26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f26:	4b38      	ldr	r3, [pc, #224]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f32:	d102      	bne.n	8001f3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f2      	bne.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f3a:	4b33      	ldr	r3, [pc, #204]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f46:	d158      	bne.n	8001ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e057      	b.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f52:	4a2d      	ldr	r2, [pc, #180]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f5c:	e04d      	b.n	8001ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f64:	d141      	bne.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f66:	4b28      	ldr	r3, [pc, #160]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f72:	d131      	bne.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f74:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f7a:	4a23      	ldr	r2, [pc, #140]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f84:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f8c:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f94:	4b1d      	ldr	r3, [pc, #116]	; (800200c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2232      	movs	r2, #50	; 0x32
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa4:	0c9b      	lsrs	r3, r3, #18
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001faa:	e002      	b.n	8001fb2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fbe:	d102      	bne.n	8001fc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f2      	bne.n	8001fac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd2:	d112      	bne.n	8001ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e011      	b.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fe8:	e007      	b.n	8001ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ff8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	40007000 	.word	0x40007000
 800200c:	20000000 	.word	0x20000000
 8002010:	431bde83 	.word	0x431bde83

08002014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e306      	b.n	8002634 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d075      	beq.n	800211e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002032:	4b97      	ldr	r3, [pc, #604]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800203c:	4b94      	ldr	r3, [pc, #592]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b0c      	cmp	r3, #12
 800204a:	d102      	bne.n	8002052 <HAL_RCC_OscConfig+0x3e>
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b03      	cmp	r3, #3
 8002050:	d002      	beq.n	8002058 <HAL_RCC_OscConfig+0x44>
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b08      	cmp	r3, #8
 8002056:	d10b      	bne.n	8002070 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002058:	4b8d      	ldr	r3, [pc, #564]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d05b      	beq.n	800211c <HAL_RCC_OscConfig+0x108>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d157      	bne.n	800211c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e2e1      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002078:	d106      	bne.n	8002088 <HAL_RCC_OscConfig+0x74>
 800207a:	4b85      	ldr	r3, [pc, #532]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a84      	ldr	r2, [pc, #528]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e01d      	b.n	80020c4 <HAL_RCC_OscConfig+0xb0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0x98>
 8002092:	4b7f      	ldr	r3, [pc, #508]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a7e      	ldr	r2, [pc, #504]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 8002098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	4b7c      	ldr	r3, [pc, #496]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a7b      	ldr	r2, [pc, #492]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e00b      	b.n	80020c4 <HAL_RCC_OscConfig+0xb0>
 80020ac:	4b78      	ldr	r3, [pc, #480]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a77      	ldr	r2, [pc, #476]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 80020b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	4b75      	ldr	r3, [pc, #468]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a74      	ldr	r2, [pc, #464]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 80020be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d013      	beq.n	80020f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7fe ffc8 	bl	8001060 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7fe ffc4 	bl	8001060 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e2a6      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020e6:	4b6a      	ldr	r3, [pc, #424]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0xc0>
 80020f2:	e014      	b.n	800211e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7fe ffb4 	bl	8001060 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fc:	f7fe ffb0 	bl	8001060 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	; 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e292      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800210e:	4b60      	ldr	r3, [pc, #384]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0xe8>
 800211a:	e000      	b.n	800211e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d075      	beq.n	8002216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800212a:	4b59      	ldr	r3, [pc, #356]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002134:	4b56      	ldr	r3, [pc, #344]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b0c      	cmp	r3, #12
 8002142:	d102      	bne.n	800214a <HAL_RCC_OscConfig+0x136>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d002      	beq.n	8002150 <HAL_RCC_OscConfig+0x13c>
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b04      	cmp	r3, #4
 800214e:	d11f      	bne.n	8002190 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002150:	4b4f      	ldr	r3, [pc, #316]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_OscConfig+0x154>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e265      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b49      	ldr	r3, [pc, #292]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	061b      	lsls	r3, r3, #24
 8002176:	4946      	ldr	r1, [pc, #280]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800217c:	4b45      	ldr	r3, [pc, #276]	; (8002294 <HAL_RCC_OscConfig+0x280>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe ff21 	bl	8000fc8 <HAL_InitTick>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d043      	beq.n	8002214 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e251      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d023      	beq.n	80021e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002198:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a3c      	ldr	r2, [pc, #240]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 800219e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7fe ff5c 	bl	8001060 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ac:	f7fe ff58 	bl	8001060 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e23a      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021be:	4b34      	ldr	r3, [pc, #208]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ca:	4b31      	ldr	r3, [pc, #196]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	061b      	lsls	r3, r3, #24
 80021d8:	492d      	ldr	r1, [pc, #180]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]
 80021de:	e01a      	b.n	8002216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a2a      	ldr	r2, [pc, #168]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 80021e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7fe ff38 	bl	8001060 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f4:	f7fe ff34 	bl	8001060 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e216      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002206:	4b22      	ldr	r3, [pc, #136]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1e0>
 8002212:	e000      	b.n	8002216 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002214:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d041      	beq.n	80022a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d01c      	beq.n	8002264 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222a:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 800222c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002230:	4a17      	ldr	r2, [pc, #92]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223a:	f7fe ff11 	bl	8001060 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002242:	f7fe ff0d 	bl	8001060 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1ef      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 8002256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0ef      	beq.n	8002242 <HAL_RCC_OscConfig+0x22e>
 8002262:	e020      	b.n	80022a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 8002266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <HAL_RCC_OscConfig+0x27c>)
 800226c:	f023 0301 	bic.w	r3, r3, #1
 8002270:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002274:	f7fe fef4 	bl	8001060 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800227a:	e00d      	b.n	8002298 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227c:	f7fe fef0 	bl	8001060 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d906      	bls.n	8002298 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e1d2      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002298:	4b8c      	ldr	r3, [pc, #560]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 800229a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1ea      	bne.n	800227c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 80a6 	beq.w	8002400 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b4:	2300      	movs	r3, #0
 80022b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022b8:	4b84      	ldr	r3, [pc, #528]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_OscConfig+0x2b4>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x2b6>
 80022c8:	2300      	movs	r3, #0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00d      	beq.n	80022ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	4b7f      	ldr	r3, [pc, #508]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	4a7e      	ldr	r2, [pc, #504]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d8:	6593      	str	r3, [r2, #88]	; 0x58
 80022da:	4b7c      	ldr	r3, [pc, #496]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022e6:	2301      	movs	r3, #1
 80022e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ea:	4b79      	ldr	r3, [pc, #484]	; (80024d0 <HAL_RCC_OscConfig+0x4bc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d118      	bne.n	8002328 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f6:	4b76      	ldr	r3, [pc, #472]	; (80024d0 <HAL_RCC_OscConfig+0x4bc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a75      	ldr	r2, [pc, #468]	; (80024d0 <HAL_RCC_OscConfig+0x4bc>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002302:	f7fe fead 	bl	8001060 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7fe fea9 	bl	8001060 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e18b      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231c:	4b6c      	ldr	r3, [pc, #432]	; (80024d0 <HAL_RCC_OscConfig+0x4bc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d108      	bne.n	8002342 <HAL_RCC_OscConfig+0x32e>
 8002330:	4b66      	ldr	r3, [pc, #408]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	4a65      	ldr	r2, [pc, #404]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002340:	e024      	b.n	800238c <HAL_RCC_OscConfig+0x378>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b05      	cmp	r3, #5
 8002348:	d110      	bne.n	800236c <HAL_RCC_OscConfig+0x358>
 800234a:	4b60      	ldr	r3, [pc, #384]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 800234c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002350:	4a5e      	ldr	r2, [pc, #376]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800235a:	4b5c      	ldr	r3, [pc, #368]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 800235c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002360:	4a5a      	ldr	r2, [pc, #360]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800236a:	e00f      	b.n	800238c <HAL_RCC_OscConfig+0x378>
 800236c:	4b57      	ldr	r3, [pc, #348]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002372:	4a56      	ldr	r2, [pc, #344]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800237c:	4b53      	ldr	r3, [pc, #332]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	4a52      	ldr	r2, [pc, #328]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 8002384:	f023 0304 	bic.w	r3, r3, #4
 8002388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d016      	beq.n	80023c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002394:	f7fe fe64 	bl	8001060 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239c:	f7fe fe60 	bl	8001060 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e140      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b2:	4b46      	ldr	r3, [pc, #280]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0ed      	beq.n	800239c <HAL_RCC_OscConfig+0x388>
 80023c0:	e015      	b.n	80023ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c2:	f7fe fe4d 	bl	8001060 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7fe fe49 	bl	8001060 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e129      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023e0:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1ed      	bne.n	80023ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023ee:	7ffb      	ldrb	r3, [r7, #31]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f4:	4b35      	ldr	r3, [pc, #212]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 80023f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f8:	4a34      	ldr	r2, [pc, #208]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 80023fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b00      	cmp	r3, #0
 800240a:	d03c      	beq.n	8002486 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01c      	beq.n	800244e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002414:	4b2d      	ldr	r3, [pc, #180]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 8002416:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800241a:	4a2c      	ldr	r2, [pc, #176]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7fe fe1c 	bl	8001060 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800242c:	f7fe fe18 	bl	8001060 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e0fa      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800243e:	4b23      	ldr	r3, [pc, #140]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 8002440:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ef      	beq.n	800242c <HAL_RCC_OscConfig+0x418>
 800244c:	e01b      	b.n	8002486 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800244e:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 8002450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002454:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245e:	f7fe fdff 	bl	8001060 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002466:	f7fe fdfb 	bl	8001060 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0dd      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 800247a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1ef      	bne.n	8002466 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80d1 	beq.w	8002632 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b0c      	cmp	r3, #12
 800249a:	f000 808b 	beq.w	80025b4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d15e      	bne.n	8002564 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a08      	ldr	r2, [pc, #32]	; (80024cc <HAL_RCC_OscConfig+0x4b8>)
 80024ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe fdd5 	bl	8001060 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b8:	e00c      	b.n	80024d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe fdd1 	bl	8001060 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d905      	bls.n	80024d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e0b3      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_RCC_OscConfig+0x628>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1ec      	bne.n	80024ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e0:	4b56      	ldr	r3, [pc, #344]	; (800263c <HAL_RCC_OscConfig+0x628>)
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	4b56      	ldr	r3, [pc, #344]	; (8002640 <HAL_RCC_OscConfig+0x62c>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6a11      	ldr	r1, [r2, #32]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024f0:	3a01      	subs	r2, #1
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	4311      	orrs	r1, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80024fa:	0212      	lsls	r2, r2, #8
 80024fc:	4311      	orrs	r1, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002502:	0852      	lsrs	r2, r2, #1
 8002504:	3a01      	subs	r2, #1
 8002506:	0552      	lsls	r2, r2, #21
 8002508:	4311      	orrs	r1, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800250e:	0852      	lsrs	r2, r2, #1
 8002510:	3a01      	subs	r2, #1
 8002512:	0652      	lsls	r2, r2, #25
 8002514:	4311      	orrs	r1, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800251a:	06d2      	lsls	r2, r2, #27
 800251c:	430a      	orrs	r2, r1
 800251e:	4947      	ldr	r1, [pc, #284]	; (800263c <HAL_RCC_OscConfig+0x628>)
 8002520:	4313      	orrs	r3, r2
 8002522:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002524:	4b45      	ldr	r3, [pc, #276]	; (800263c <HAL_RCC_OscConfig+0x628>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a44      	ldr	r2, [pc, #272]	; (800263c <HAL_RCC_OscConfig+0x628>)
 800252a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002530:	4b42      	ldr	r3, [pc, #264]	; (800263c <HAL_RCC_OscConfig+0x628>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4a41      	ldr	r2, [pc, #260]	; (800263c <HAL_RCC_OscConfig+0x628>)
 8002536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800253a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe fd90 	bl	8001060 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe fd8c 	bl	8001060 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e06e      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002556:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_RCC_OscConfig+0x628>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x530>
 8002562:	e066      	b.n	8002632 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002564:	4b35      	ldr	r3, [pc, #212]	; (800263c <HAL_RCC_OscConfig+0x628>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a34      	ldr	r2, [pc, #208]	; (800263c <HAL_RCC_OscConfig+0x628>)
 800256a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800256e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002570:	4b32      	ldr	r3, [pc, #200]	; (800263c <HAL_RCC_OscConfig+0x628>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a31      	ldr	r2, [pc, #196]	; (800263c <HAL_RCC_OscConfig+0x628>)
 8002576:	f023 0303 	bic.w	r3, r3, #3
 800257a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800257c:	4b2f      	ldr	r3, [pc, #188]	; (800263c <HAL_RCC_OscConfig+0x628>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4a2e      	ldr	r2, [pc, #184]	; (800263c <HAL_RCC_OscConfig+0x628>)
 8002582:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fd68 	bl	8001060 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7fe fd64 	bl	8001060 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e046      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a6:	4b25      	ldr	r3, [pc, #148]	; (800263c <HAL_RCC_OscConfig+0x628>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x580>
 80025b2:	e03e      	b.n	8002632 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e039      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025c0:	4b1e      	ldr	r3, [pc, #120]	; (800263c <HAL_RCC_OscConfig+0x628>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d12c      	bne.n	800262e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	3b01      	subs	r3, #1
 80025e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d123      	bne.n	800262e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d11b      	bne.n	800262e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d113      	bne.n	800262e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	3b01      	subs	r3, #1
 8002614:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d109      	bne.n	800262e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	3b01      	subs	r3, #1
 8002628:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3720      	adds	r7, #32
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	019f800c 	.word	0x019f800c

08002644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e11e      	b.n	800289a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800265c:	4b91      	ldr	r3, [pc, #580]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d910      	bls.n	800268c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b8e      	ldr	r3, [pc, #568]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 020f 	bic.w	r2, r3, #15
 8002672:	498c      	ldr	r1, [pc, #560]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b8a      	ldr	r3, [pc, #552]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e106      	b.n	800289a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d073      	beq.n	8002780 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d129      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a0:	4b81      	ldr	r3, [pc, #516]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0f4      	b.n	800289a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80026b0:	f000 f99e 	bl	80029f0 <RCC_GetSysClockFreqFromPLLSource>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4a7c      	ldr	r2, [pc, #496]	; (80028ac <HAL_RCC_ClockConfig+0x268>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d93f      	bls.n	800273e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026be:	4b7a      	ldr	r3, [pc, #488]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d033      	beq.n	800273e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d12f      	bne.n	800273e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026de:	4b72      	ldr	r3, [pc, #456]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026e6:	4a70      	ldr	r2, [pc, #448]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 80026e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e024      	b.n	800273e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d107      	bne.n	800270c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fc:	4b6a      	ldr	r3, [pc, #424]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d109      	bne.n	800271c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0c6      	b.n	800289a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800270c:	4b66      	ldr	r3, [pc, #408]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0be      	b.n	800289a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800271c:	f000 f8ce 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 8002720:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4a61      	ldr	r2, [pc, #388]	; (80028ac <HAL_RCC_ClockConfig+0x268>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d909      	bls.n	800273e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800272a:	4b5f      	ldr	r3, [pc, #380]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002732:	4a5d      	ldr	r2, [pc, #372]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 8002734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002738:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800273e:	4b5a      	ldr	r3, [pc, #360]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f023 0203 	bic.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4957      	ldr	r1, [pc, #348]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 800274c:	4313      	orrs	r3, r2
 800274e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002750:	f7fe fc86 	bl	8001060 <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	e00a      	b.n	800276e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002758:	f7fe fc82 	bl	8001060 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e095      	b.n	800289a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	4b4e      	ldr	r3, [pc, #312]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 020c 	and.w	r2, r3, #12
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	429a      	cmp	r2, r3
 800277e:	d1eb      	bne.n	8002758 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d023      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002798:	4b43      	ldr	r3, [pc, #268]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a42      	ldr	r2, [pc, #264]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 800279e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80027b0:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80027b8:	4a3b      	ldr	r2, [pc, #236]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 80027ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c0:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	4936      	ldr	r1, [pc, #216]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b80      	cmp	r3, #128	; 0x80
 80027d8:	d105      	bne.n	80027e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027da:	4b33      	ldr	r3, [pc, #204]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	4a32      	ldr	r2, [pc, #200]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 80027e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e6:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d21d      	bcs.n	8002830 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f4:	4b2b      	ldr	r3, [pc, #172]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f023 020f 	bic.w	r2, r3, #15
 80027fc:	4929      	ldr	r1, [pc, #164]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	4313      	orrs	r3, r2
 8002802:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002804:	f7fe fc2c 	bl	8001060 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	e00a      	b.n	8002822 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7fe fc28 	bl	8001060 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e03b      	b.n	800289a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002822:	4b20      	ldr	r3, [pc, #128]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d1ed      	bne.n	800280c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800283c:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4917      	ldr	r1, [pc, #92]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d009      	beq.n	800286e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	490f      	ldr	r1, [pc, #60]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800286e:	f000 f825 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 8002872:	4602      	mov	r2, r0
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <HAL_RCC_ClockConfig+0x264>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	490c      	ldr	r1, [pc, #48]	; (80028b0 <HAL_RCC_ClockConfig+0x26c>)
 8002880:	5ccb      	ldrb	r3, [r1, r3]
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	fa22 f303 	lsr.w	r3, r2, r3
 800288a:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <HAL_RCC_ClockConfig+0x270>)
 800288c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_RCC_ClockConfig+0x274>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fb98 	bl	8000fc8 <HAL_InitTick>
 8002898:	4603      	mov	r3, r0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40022000 	.word	0x40022000
 80028a8:	40021000 	.word	0x40021000
 80028ac:	04c4b400 	.word	0x04c4b400
 80028b0:	08004dbc 	.word	0x08004dbc
 80028b4:	20000000 	.word	0x20000000
 80028b8:	20000004 	.word	0x20000004

080028bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028c2:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d102      	bne.n	80028d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028ce:	4b2a      	ldr	r3, [pc, #168]	; (8002978 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	e047      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028d4:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d102      	bne.n	80028e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028e0:	4b26      	ldr	r3, [pc, #152]	; (800297c <HAL_RCC_GetSysClockFreq+0xc0>)
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	e03e      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028e6:	4b23      	ldr	r3, [pc, #140]	; (8002974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	d136      	bne.n	8002960 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028f2:	4b20      	ldr	r3, [pc, #128]	; (8002974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028fc:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	3301      	adds	r3, #1
 8002908:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d10c      	bne.n	800292a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002910:	4a1a      	ldr	r2, [pc, #104]	; (800297c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	4a16      	ldr	r2, [pc, #88]	; (8002974 <HAL_RCC_GetSysClockFreq+0xb8>)
 800291a:	68d2      	ldr	r2, [r2, #12]
 800291c:	0a12      	lsrs	r2, r2, #8
 800291e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	617b      	str	r3, [r7, #20]
      break;
 8002928:	e00c      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800292a:	4a13      	ldr	r2, [pc, #76]	; (8002978 <HAL_RCC_GetSysClockFreq+0xbc>)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002932:	4a10      	ldr	r2, [pc, #64]	; (8002974 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002934:	68d2      	ldr	r2, [r2, #12]
 8002936:	0a12      	lsrs	r2, r2, #8
 8002938:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	617b      	str	r3, [r7, #20]
      break;
 8002942:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	0e5b      	lsrs	r3, r3, #25
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	3301      	adds	r3, #1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	e001      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002964:	693b      	ldr	r3, [r7, #16]
}
 8002966:	4618      	mov	r0, r3
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000
 8002978:	00f42400 	.word	0x00f42400
 800297c:	007a1200 	.word	0x007a1200

08002980 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_RCC_GetHCLKFreq+0x14>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000000 	.word	0x20000000

08002998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800299c:	f7ff fff0 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	4904      	ldr	r1, [pc, #16]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029ae:	5ccb      	ldrb	r3, [r1, r3]
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	08004dcc 	.word	0x08004dcc

080029c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029c8:	f7ff ffda 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	0adb      	lsrs	r3, r3, #11
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	4904      	ldr	r1, [pc, #16]	; (80029ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	08004dcc 	.word	0x08004dcc

080029f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029f6:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d10c      	bne.n	8002a2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a14:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	4a14      	ldr	r2, [pc, #80]	; (8002a70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a1e:	68d2      	ldr	r2, [r2, #12]
 8002a20:	0a12      	lsrs	r2, r2, #8
 8002a22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a26:	fb02 f303 	mul.w	r3, r2, r3
 8002a2a:	617b      	str	r3, [r7, #20]
    break;
 8002a2c:	e00c      	b.n	8002a48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a36:	4a0e      	ldr	r2, [pc, #56]	; (8002a70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a38:	68d2      	ldr	r2, [r2, #12]
 8002a3a:	0a12      	lsrs	r2, r2, #8
 8002a3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a40:	fb02 f303 	mul.w	r3, r2, r3
 8002a44:	617b      	str	r3, [r7, #20]
    break;
 8002a46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	0e5b      	lsrs	r3, r3, #25
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	3301      	adds	r3, #1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a62:	687b      	ldr	r3, [r7, #4]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	371c      	adds	r7, #28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40021000 	.word	0x40021000
 8002a74:	007a1200 	.word	0x007a1200
 8002a78:	00f42400 	.word	0x00f42400

08002a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a84:	2300      	movs	r3, #0
 8002a86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a88:	2300      	movs	r3, #0
 8002a8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8098 	beq.w	8002bca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9e:	4b43      	ldr	r3, [pc, #268]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	4b40      	ldr	r3, [pc, #256]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	4a3f      	ldr	r2, [pc, #252]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac6:	4b3a      	ldr	r3, [pc, #232]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a39      	ldr	r2, [pc, #228]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ad2:	f7fe fac5 	bl	8001060 <HAL_GetTick>
 8002ad6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ad8:	e009      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ada:	f7fe fac1 	bl	8001060 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d902      	bls.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	74fb      	strb	r3, [r7, #19]
        break;
 8002aec:	e005      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aee:	4b30      	ldr	r3, [pc, #192]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0ef      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002afa:	7cfb      	ldrb	r3, [r7, #19]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d159      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b00:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01e      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d019      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b1c:	4b23      	ldr	r3, [pc, #140]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b28:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	4a1f      	ldr	r2, [pc, #124]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b48:	4a18      	ldr	r2, [pc, #96]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d016      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fa81 	bl	8001060 <HAL_GetTick>
 8002b5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b60:	e00b      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b62:	f7fe fa7d 	bl	8001060 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d902      	bls.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	74fb      	strb	r3, [r7, #19]
            break;
 8002b78:	e006      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0ec      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10b      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b8e:	4b07      	ldr	r3, [pc, #28]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	4903      	ldr	r1, [pc, #12]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ba6:	7cfb      	ldrb	r3, [r7, #19]
 8002ba8:	74bb      	strb	r3, [r7, #18]
 8002baa:	e005      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bb8:	7c7b      	ldrb	r3, [r7, #17]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d105      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bbe:	4ba6      	ldr	r3, [pc, #664]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc2:	4aa5      	ldr	r2, [pc, #660]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bd6:	4ba0      	ldr	r3, [pc, #640]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bdc:	f023 0203 	bic.w	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	499c      	ldr	r1, [pc, #624]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bf8:	4b97      	ldr	r3, [pc, #604]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	f023 020c 	bic.w	r2, r3, #12
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	4994      	ldr	r1, [pc, #592]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c1a:	4b8f      	ldr	r3, [pc, #572]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	498b      	ldr	r1, [pc, #556]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c3c:	4b86      	ldr	r3, [pc, #536]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	4983      	ldr	r1, [pc, #524]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c5e:	4b7e      	ldr	r3, [pc, #504]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	497a      	ldr	r1, [pc, #488]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c80:	4b75      	ldr	r3, [pc, #468]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	4972      	ldr	r1, [pc, #456]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ca2:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	4969      	ldr	r1, [pc, #420]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cc4:	4b64      	ldr	r3, [pc, #400]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	4961      	ldr	r1, [pc, #388]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ce6:	4b5c      	ldr	r3, [pc, #368]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	4958      	ldr	r1, [pc, #352]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d015      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d08:	4b53      	ldr	r3, [pc, #332]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	4950      	ldr	r1, [pc, #320]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d26:	d105      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d28:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4a4a      	ldr	r2, [pc, #296]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d015      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d40:	4b45      	ldr	r3, [pc, #276]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	4942      	ldr	r1, [pc, #264]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d5e:	d105      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d60:	4b3d      	ldr	r3, [pc, #244]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4a3c      	ldr	r2, [pc, #240]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d6a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d015      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d78:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4934      	ldr	r1, [pc, #208]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d96:	d105      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d98:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4a2e      	ldr	r2, [pc, #184]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002da2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d015      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002db0:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbe:	4926      	ldr	r1, [pc, #152]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dce:	d105      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd0:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4a20      	ldr	r2, [pc, #128]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dda:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d015      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002de8:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	4918      	ldr	r1, [pc, #96]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e06:	d105      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d015      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e20:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2e:	490a      	ldr	r1, [pc, #40]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e3e:	d105      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000

08002e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e042      	b.n	8002ef4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d106      	bne.n	8002e86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7fd ff01 	bl	8000c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2224      	movs	r2, #36	; 0x24
 8002e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f8c2 	bl	8003028 <UART_SetConfig>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e022      	b.n	8002ef4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fb82 	bl	80035c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fc09 	bl	8003704 <UART_CheckIdleState>
 8002ef2:	4603      	mov	r3, r0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	f040 8083 	bne.w	800301e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_UART_Transmit+0x28>
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e07b      	b.n	8003020 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Transmit+0x3a>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e074      	b.n	8003020 <HAL_UART_Transmit+0x124>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2221      	movs	r2, #33	; 0x21
 8002f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f4e:	f7fe f887 	bl	8001060 <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	88fa      	ldrh	r2, [r7, #6]
 8002f58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6c:	d108      	bne.n	8002f80 <HAL_UART_Transmit+0x84>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d104      	bne.n	8002f80 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	e003      	b.n	8002f88 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002f90:	e02c      	b.n	8002fec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2180      	movs	r1, #128	; 0x80
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fbfc 	bl	800379a <UART_WaitOnFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e039      	b.n	8003020 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10b      	bne.n	8002fca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	e007      	b.n	8002fda <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1cc      	bne.n	8002f92 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2200      	movs	r2, #0
 8003000:	2140      	movs	r1, #64	; 0x40
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 fbc9 	bl	800379a <UART_WaitOnFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e006      	b.n	8003020 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
  }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3720      	adds	r7, #32
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800302c:	b08c      	sub	sp, #48	; 0x30
 800302e:	af00      	add	r7, sp, #0
 8003030:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	431a      	orrs	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	431a      	orrs	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	4313      	orrs	r3, r2
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4bab      	ldr	r3, [pc, #684]	; (8003304 <UART_SetConfig+0x2dc>)
 8003058:	4013      	ands	r3, r2
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003060:	430b      	orrs	r3, r1
 8003062:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4aa0      	ldr	r2, [pc, #640]	; (8003308 <UART_SetConfig+0x2e0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d004      	beq.n	8003094 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003090:	4313      	orrs	r3, r2
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800309e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030a8:	430b      	orrs	r3, r1
 80030aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	f023 010f 	bic.w	r1, r3, #15
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a91      	ldr	r2, [pc, #580]	; (800330c <UART_SetConfig+0x2e4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d125      	bne.n	8003118 <UART_SetConfig+0xf0>
 80030cc:	4b90      	ldr	r3, [pc, #576]	; (8003310 <UART_SetConfig+0x2e8>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d81a      	bhi.n	8003110 <UART_SetConfig+0xe8>
 80030da:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <UART_SetConfig+0xb8>)
 80030dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e0:	080030f1 	.word	0x080030f1
 80030e4:	08003101 	.word	0x08003101
 80030e8:	080030f9 	.word	0x080030f9
 80030ec:	08003109 	.word	0x08003109
 80030f0:	2301      	movs	r3, #1
 80030f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030f6:	e0d6      	b.n	80032a6 <UART_SetConfig+0x27e>
 80030f8:	2302      	movs	r3, #2
 80030fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030fe:	e0d2      	b.n	80032a6 <UART_SetConfig+0x27e>
 8003100:	2304      	movs	r3, #4
 8003102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003106:	e0ce      	b.n	80032a6 <UART_SetConfig+0x27e>
 8003108:	2308      	movs	r3, #8
 800310a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800310e:	e0ca      	b.n	80032a6 <UART_SetConfig+0x27e>
 8003110:	2310      	movs	r3, #16
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003116:	e0c6      	b.n	80032a6 <UART_SetConfig+0x27e>
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a7d      	ldr	r2, [pc, #500]	; (8003314 <UART_SetConfig+0x2ec>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d138      	bne.n	8003194 <UART_SetConfig+0x16c>
 8003122:	4b7b      	ldr	r3, [pc, #492]	; (8003310 <UART_SetConfig+0x2e8>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b0c      	cmp	r3, #12
 800312e:	d82d      	bhi.n	800318c <UART_SetConfig+0x164>
 8003130:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <UART_SetConfig+0x110>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	0800316d 	.word	0x0800316d
 800313c:	0800318d 	.word	0x0800318d
 8003140:	0800318d 	.word	0x0800318d
 8003144:	0800318d 	.word	0x0800318d
 8003148:	0800317d 	.word	0x0800317d
 800314c:	0800318d 	.word	0x0800318d
 8003150:	0800318d 	.word	0x0800318d
 8003154:	0800318d 	.word	0x0800318d
 8003158:	08003175 	.word	0x08003175
 800315c:	0800318d 	.word	0x0800318d
 8003160:	0800318d 	.word	0x0800318d
 8003164:	0800318d 	.word	0x0800318d
 8003168:	08003185 	.word	0x08003185
 800316c:	2300      	movs	r3, #0
 800316e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003172:	e098      	b.n	80032a6 <UART_SetConfig+0x27e>
 8003174:	2302      	movs	r3, #2
 8003176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800317a:	e094      	b.n	80032a6 <UART_SetConfig+0x27e>
 800317c:	2304      	movs	r3, #4
 800317e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003182:	e090      	b.n	80032a6 <UART_SetConfig+0x27e>
 8003184:	2308      	movs	r3, #8
 8003186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800318a:	e08c      	b.n	80032a6 <UART_SetConfig+0x27e>
 800318c:	2310      	movs	r3, #16
 800318e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003192:	e088      	b.n	80032a6 <UART_SetConfig+0x27e>
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a5f      	ldr	r2, [pc, #380]	; (8003318 <UART_SetConfig+0x2f0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d125      	bne.n	80031ea <UART_SetConfig+0x1c2>
 800319e:	4b5c      	ldr	r3, [pc, #368]	; (8003310 <UART_SetConfig+0x2e8>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031a8:	2b30      	cmp	r3, #48	; 0x30
 80031aa:	d016      	beq.n	80031da <UART_SetConfig+0x1b2>
 80031ac:	2b30      	cmp	r3, #48	; 0x30
 80031ae:	d818      	bhi.n	80031e2 <UART_SetConfig+0x1ba>
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d00a      	beq.n	80031ca <UART_SetConfig+0x1a2>
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d814      	bhi.n	80031e2 <UART_SetConfig+0x1ba>
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <UART_SetConfig+0x19a>
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d008      	beq.n	80031d2 <UART_SetConfig+0x1aa>
 80031c0:	e00f      	b.n	80031e2 <UART_SetConfig+0x1ba>
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031c8:	e06d      	b.n	80032a6 <UART_SetConfig+0x27e>
 80031ca:	2302      	movs	r3, #2
 80031cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031d0:	e069      	b.n	80032a6 <UART_SetConfig+0x27e>
 80031d2:	2304      	movs	r3, #4
 80031d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031d8:	e065      	b.n	80032a6 <UART_SetConfig+0x27e>
 80031da:	2308      	movs	r3, #8
 80031dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031e0:	e061      	b.n	80032a6 <UART_SetConfig+0x27e>
 80031e2:	2310      	movs	r3, #16
 80031e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031e8:	e05d      	b.n	80032a6 <UART_SetConfig+0x27e>
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a4b      	ldr	r2, [pc, #300]	; (800331c <UART_SetConfig+0x2f4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d125      	bne.n	8003240 <UART_SetConfig+0x218>
 80031f4:	4b46      	ldr	r3, [pc, #280]	; (8003310 <UART_SetConfig+0x2e8>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003200:	d016      	beq.n	8003230 <UART_SetConfig+0x208>
 8003202:	2bc0      	cmp	r3, #192	; 0xc0
 8003204:	d818      	bhi.n	8003238 <UART_SetConfig+0x210>
 8003206:	2b80      	cmp	r3, #128	; 0x80
 8003208:	d00a      	beq.n	8003220 <UART_SetConfig+0x1f8>
 800320a:	2b80      	cmp	r3, #128	; 0x80
 800320c:	d814      	bhi.n	8003238 <UART_SetConfig+0x210>
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <UART_SetConfig+0x1f0>
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d008      	beq.n	8003228 <UART_SetConfig+0x200>
 8003216:	e00f      	b.n	8003238 <UART_SetConfig+0x210>
 8003218:	2300      	movs	r3, #0
 800321a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800321e:	e042      	b.n	80032a6 <UART_SetConfig+0x27e>
 8003220:	2302      	movs	r3, #2
 8003222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003226:	e03e      	b.n	80032a6 <UART_SetConfig+0x27e>
 8003228:	2304      	movs	r3, #4
 800322a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800322e:	e03a      	b.n	80032a6 <UART_SetConfig+0x27e>
 8003230:	2308      	movs	r3, #8
 8003232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003236:	e036      	b.n	80032a6 <UART_SetConfig+0x27e>
 8003238:	2310      	movs	r3, #16
 800323a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800323e:	e032      	b.n	80032a6 <UART_SetConfig+0x27e>
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a30      	ldr	r2, [pc, #192]	; (8003308 <UART_SetConfig+0x2e0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d12a      	bne.n	80032a0 <UART_SetConfig+0x278>
 800324a:	4b31      	ldr	r3, [pc, #196]	; (8003310 <UART_SetConfig+0x2e8>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003254:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003258:	d01a      	beq.n	8003290 <UART_SetConfig+0x268>
 800325a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800325e:	d81b      	bhi.n	8003298 <UART_SetConfig+0x270>
 8003260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003264:	d00c      	beq.n	8003280 <UART_SetConfig+0x258>
 8003266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326a:	d815      	bhi.n	8003298 <UART_SetConfig+0x270>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <UART_SetConfig+0x250>
 8003270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003274:	d008      	beq.n	8003288 <UART_SetConfig+0x260>
 8003276:	e00f      	b.n	8003298 <UART_SetConfig+0x270>
 8003278:	2300      	movs	r3, #0
 800327a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800327e:	e012      	b.n	80032a6 <UART_SetConfig+0x27e>
 8003280:	2302      	movs	r3, #2
 8003282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003286:	e00e      	b.n	80032a6 <UART_SetConfig+0x27e>
 8003288:	2304      	movs	r3, #4
 800328a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800328e:	e00a      	b.n	80032a6 <UART_SetConfig+0x27e>
 8003290:	2308      	movs	r3, #8
 8003292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003296:	e006      	b.n	80032a6 <UART_SetConfig+0x27e>
 8003298:	2310      	movs	r3, #16
 800329a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800329e:	e002      	b.n	80032a6 <UART_SetConfig+0x27e>
 80032a0:	2310      	movs	r3, #16
 80032a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a17      	ldr	r2, [pc, #92]	; (8003308 <UART_SetConfig+0x2e0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	f040 80a8 	bne.w	8003402 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d834      	bhi.n	8003324 <UART_SetConfig+0x2fc>
 80032ba:	a201      	add	r2, pc, #4	; (adr r2, 80032c0 <UART_SetConfig+0x298>)
 80032bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c0:	080032e5 	.word	0x080032e5
 80032c4:	08003325 	.word	0x08003325
 80032c8:	080032ed 	.word	0x080032ed
 80032cc:	08003325 	.word	0x08003325
 80032d0:	080032f3 	.word	0x080032f3
 80032d4:	08003325 	.word	0x08003325
 80032d8:	08003325 	.word	0x08003325
 80032dc:	08003325 	.word	0x08003325
 80032e0:	080032fb 	.word	0x080032fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e4:	f7ff fb58 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 80032e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032ea:	e021      	b.n	8003330 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <UART_SetConfig+0x2f8>)
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032f0:	e01e      	b.n	8003330 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f2:	f7ff fae3 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 80032f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032f8:	e01a      	b.n	8003330 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003300:	e016      	b.n	8003330 <UART_SetConfig+0x308>
 8003302:	bf00      	nop
 8003304:	cfff69f3 	.word	0xcfff69f3
 8003308:	40008000 	.word	0x40008000
 800330c:	40013800 	.word	0x40013800
 8003310:	40021000 	.word	0x40021000
 8003314:	40004400 	.word	0x40004400
 8003318:	40004800 	.word	0x40004800
 800331c:	40004c00 	.word	0x40004c00
 8003320:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800332e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 812a 	beq.w	800358c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	4a9e      	ldr	r2, [pc, #632]	; (80035b8 <UART_SetConfig+0x590>)
 800333e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003342:	461a      	mov	r2, r3
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	fbb3 f3f2 	udiv	r3, r3, r2
 800334a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4413      	add	r3, r2
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	429a      	cmp	r2, r3
 800335a:	d305      	bcc.n	8003368 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	429a      	cmp	r2, r3
 8003366:	d903      	bls.n	8003370 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800336e:	e10d      	b.n	800358c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	2200      	movs	r2, #0
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	60fa      	str	r2, [r7, #12]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	4a8e      	ldr	r2, [pc, #568]	; (80035b8 <UART_SetConfig+0x590>)
 800337e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003382:	b29b      	uxth	r3, r3
 8003384:	2200      	movs	r2, #0
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800338e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003392:	f7fc ff95 	bl	80002c0 <__aeabi_uldivmod>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	020b      	lsls	r3, r1, #8
 80033a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80033ac:	0202      	lsls	r2, r0, #8
 80033ae:	6979      	ldr	r1, [r7, #20]
 80033b0:	6849      	ldr	r1, [r1, #4]
 80033b2:	0849      	lsrs	r1, r1, #1
 80033b4:	2000      	movs	r0, #0
 80033b6:	460c      	mov	r4, r1
 80033b8:	4605      	mov	r5, r0
 80033ba:	eb12 0804 	adds.w	r8, r2, r4
 80033be:	eb43 0905 	adc.w	r9, r3, r5
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	469a      	mov	sl, r3
 80033ca:	4693      	mov	fp, r2
 80033cc:	4652      	mov	r2, sl
 80033ce:	465b      	mov	r3, fp
 80033d0:	4640      	mov	r0, r8
 80033d2:	4649      	mov	r1, r9
 80033d4:	f7fc ff74 	bl	80002c0 <__aeabi_uldivmod>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4613      	mov	r3, r2
 80033de:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e6:	d308      	bcc.n	80033fa <UART_SetConfig+0x3d2>
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ee:	d204      	bcs.n	80033fa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6a3a      	ldr	r2, [r7, #32]
 80033f6:	60da      	str	r2, [r3, #12]
 80033f8:	e0c8      	b.n	800358c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003400:	e0c4      	b.n	800358c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340a:	d167      	bne.n	80034dc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800340c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003410:	2b08      	cmp	r3, #8
 8003412:	d828      	bhi.n	8003466 <UART_SetConfig+0x43e>
 8003414:	a201      	add	r2, pc, #4	; (adr r2, 800341c <UART_SetConfig+0x3f4>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	08003441 	.word	0x08003441
 8003420:	08003449 	.word	0x08003449
 8003424:	08003451 	.word	0x08003451
 8003428:	08003467 	.word	0x08003467
 800342c:	08003457 	.word	0x08003457
 8003430:	08003467 	.word	0x08003467
 8003434:	08003467 	.word	0x08003467
 8003438:	08003467 	.word	0x08003467
 800343c:	0800345f 	.word	0x0800345f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003440:	f7ff faaa 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8003444:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003446:	e014      	b.n	8003472 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003448:	f7ff fabc 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 800344c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800344e:	e010      	b.n	8003472 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003450:	4b5a      	ldr	r3, [pc, #360]	; (80035bc <UART_SetConfig+0x594>)
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003454:	e00d      	b.n	8003472 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003456:	f7ff fa31 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 800345a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800345c:	e009      	b.n	8003472 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800345e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003464:	e005      	b.n	8003472 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003470:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8089 	beq.w	800358c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	4a4e      	ldr	r2, [pc, #312]	; (80035b8 <UART_SetConfig+0x590>)
 8003480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003484:	461a      	mov	r2, r3
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	fbb3 f3f2 	udiv	r3, r3, r2
 800348c:	005a      	lsls	r2, r3, #1
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	085b      	lsrs	r3, r3, #1
 8003494:	441a      	add	r2, r3
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	fbb2 f3f3 	udiv	r3, r2, r3
 800349e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	2b0f      	cmp	r3, #15
 80034a4:	d916      	bls.n	80034d4 <UART_SetConfig+0x4ac>
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ac:	d212      	bcs.n	80034d4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f023 030f 	bic.w	r3, r3, #15
 80034b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	085b      	lsrs	r3, r3, #1
 80034bc:	b29b      	uxth	r3, r3
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	8bfb      	ldrh	r3, [r7, #30]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	8bfa      	ldrh	r2, [r7, #30]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	e05b      	b.n	800358c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80034da:	e057      	b.n	800358c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d828      	bhi.n	8003536 <UART_SetConfig+0x50e>
 80034e4:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <UART_SetConfig+0x4c4>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	08003511 	.word	0x08003511
 80034f0:	08003519 	.word	0x08003519
 80034f4:	08003521 	.word	0x08003521
 80034f8:	08003537 	.word	0x08003537
 80034fc:	08003527 	.word	0x08003527
 8003500:	08003537 	.word	0x08003537
 8003504:	08003537 	.word	0x08003537
 8003508:	08003537 	.word	0x08003537
 800350c:	0800352f 	.word	0x0800352f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003510:	f7ff fa42 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8003514:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003516:	e014      	b.n	8003542 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003518:	f7ff fa54 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 800351c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800351e:	e010      	b.n	8003542 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003520:	4b26      	ldr	r3, [pc, #152]	; (80035bc <UART_SetConfig+0x594>)
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003524:	e00d      	b.n	8003542 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003526:	f7ff f9c9 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 800352a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800352c:	e009      	b.n	8003542 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800352e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003534:	e005      	b.n	8003542 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003540:	bf00      	nop
    }

    if (pclk != 0U)
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	2b00      	cmp	r3, #0
 8003546:	d021      	beq.n	800358c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	4a1a      	ldr	r2, [pc, #104]	; (80035b8 <UART_SetConfig+0x590>)
 800354e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003552:	461a      	mov	r2, r3
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	fbb3 f2f2 	udiv	r2, r3, r2
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	441a      	add	r2, r3
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	fbb2 f3f3 	udiv	r3, r2, r3
 800356a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	2b0f      	cmp	r3, #15
 8003570:	d909      	bls.n	8003586 <UART_SetConfig+0x55e>
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d205      	bcs.n	8003586 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	b29a      	uxth	r2, r3
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60da      	str	r2, [r3, #12]
 8003584:	e002      	b.n	800358c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2201      	movs	r2, #1
 8003590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2201      	movs	r2, #1
 8003598:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2200      	movs	r2, #0
 80035a0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2200      	movs	r2, #0
 80035a6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80035a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3730      	adds	r7, #48	; 0x30
 80035b0:	46bd      	mov	sp, r7
 80035b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035b6:	bf00      	nop
 80035b8:	08004de4 	.word	0x08004de4
 80035bc:	00f42400 	.word	0x00f42400

080035c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01a      	beq.n	80036d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036be:	d10a      	bne.n	80036d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	605a      	str	r2, [r3, #4]
  }
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af02      	add	r7, sp, #8
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003714:	f7fd fca4 	bl	8001060 <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b08      	cmp	r3, #8
 8003726:	d10e      	bne.n	8003746 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f82f 	bl	800379a <UART_WaitOnFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e025      	b.n	8003792 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b04      	cmp	r3, #4
 8003752:	d10e      	bne.n	8003772 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f819 	bl	800379a <UART_WaitOnFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e00f      	b.n	8003792 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2220      	movs	r2, #32
 8003776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b09c      	sub	sp, #112	; 0x70
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	4613      	mov	r3, r2
 80037a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037aa:	e0a9      	b.n	8003900 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	f000 80a5 	beq.w	8003900 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b6:	f7fd fc53 	bl	8001060 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d302      	bcc.n	80037cc <UART_WaitOnFlagUntilTimeout+0x32>
 80037c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d140      	bne.n	800384e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037e0:	667b      	str	r3, [r7, #100]	; 0x64
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037f2:	e841 2300 	strex	r3, r2, [r1]
 80037f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1e6      	bne.n	80037cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3308      	adds	r3, #8
 8003804:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003808:	e853 3f00 	ldrex	r3, [r3]
 800380c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	663b      	str	r3, [r7, #96]	; 0x60
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3308      	adds	r3, #8
 800381c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800381e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003820:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800382c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e5      	bne.n	80037fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2220      	movs	r2, #32
 800383e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e069      	b.n	8003922 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d051      	beq.n	8003900 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386a:	d149      	bne.n	8003900 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003874:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387e:	e853 3f00 	ldrex	r3, [r3]
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800388a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003894:	637b      	str	r3, [r7, #52]	; 0x34
 8003896:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800389a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800389c:	e841 2300 	strex	r3, r2, [r1]
 80038a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e6      	bne.n	8003876 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3308      	adds	r3, #8
 80038ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	613b      	str	r3, [r7, #16]
   return(result);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	66bb      	str	r3, [r7, #104]	; 0x68
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3308      	adds	r3, #8
 80038c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038c8:	623a      	str	r2, [r7, #32]
 80038ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	69f9      	ldr	r1, [r7, #28]
 80038ce:	6a3a      	ldr	r2, [r7, #32]
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e5      	bne.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e010      	b.n	8003922 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69da      	ldr	r2, [r3, #28]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	4013      	ands	r3, r2
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	429a      	cmp	r2, r3
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	429a      	cmp	r2, r3
 800391c:	f43f af46 	beq.w	80037ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3770      	adds	r7, #112	; 0x70
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_UARTEx_DisableFifoMode+0x16>
 800393c:	2302      	movs	r3, #2
 800393e:	e027      	b.n	8003990 <HAL_UARTEx_DisableFifoMode+0x66>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	; 0x24
 800394c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800396e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e02d      	b.n	8003a10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2224      	movs	r2, #36	; 0x24
 80039c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f84f 	bl	8003a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e02d      	b.n	8003a8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	; 0x24
 8003a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f811 	bl	8003a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d108      	bne.n	8003ab6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ab4:	e031      	b.n	8003b1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003aba:	2308      	movs	r3, #8
 8003abc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	0e5b      	lsrs	r3, r3, #25
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	0f5b      	lsrs	r3, r3, #29
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ade:	7bbb      	ldrb	r3, [r7, #14]
 8003ae0:	7b3a      	ldrb	r2, [r7, #12]
 8003ae2:	4911      	ldr	r1, [pc, #68]	; (8003b28 <UARTEx_SetNbDataToProcess+0x94>)
 8003ae4:	5c8a      	ldrb	r2, [r1, r2]
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003aea:	7b3a      	ldrb	r2, [r7, #12]
 8003aec:	490f      	ldr	r1, [pc, #60]	; (8003b2c <UARTEx_SetNbDataToProcess+0x98>)
 8003aee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003af0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	7b7a      	ldrb	r2, [r7, #13]
 8003b00:	4909      	ldr	r1, [pc, #36]	; (8003b28 <UARTEx_SetNbDataToProcess+0x94>)
 8003b02:	5c8a      	ldrb	r2, [r1, r2]
 8003b04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b08:	7b7a      	ldrb	r2, [r7, #13]
 8003b0a:	4908      	ldr	r1, [pc, #32]	; (8003b2c <UARTEx_SetNbDataToProcess+0x98>)
 8003b0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003b1a:	bf00      	nop
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	08004dfc 	.word	0x08004dfc
 8003b2c:	08004e04 	.word	0x08004e04

08003b30 <__errno>:
 8003b30:	4b01      	ldr	r3, [pc, #4]	; (8003b38 <__errno+0x8>)
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	2000000c 	.word	0x2000000c

08003b3c <__libc_init_array>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	4d0d      	ldr	r5, [pc, #52]	; (8003b74 <__libc_init_array+0x38>)
 8003b40:	4c0d      	ldr	r4, [pc, #52]	; (8003b78 <__libc_init_array+0x3c>)
 8003b42:	1b64      	subs	r4, r4, r5
 8003b44:	10a4      	asrs	r4, r4, #2
 8003b46:	2600      	movs	r6, #0
 8003b48:	42a6      	cmp	r6, r4
 8003b4a:	d109      	bne.n	8003b60 <__libc_init_array+0x24>
 8003b4c:	4d0b      	ldr	r5, [pc, #44]	; (8003b7c <__libc_init_array+0x40>)
 8003b4e:	4c0c      	ldr	r4, [pc, #48]	; (8003b80 <__libc_init_array+0x44>)
 8003b50:	f001 f8fa 	bl	8004d48 <_init>
 8003b54:	1b64      	subs	r4, r4, r5
 8003b56:	10a4      	asrs	r4, r4, #2
 8003b58:	2600      	movs	r6, #0
 8003b5a:	42a6      	cmp	r6, r4
 8003b5c:	d105      	bne.n	8003b6a <__libc_init_array+0x2e>
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
 8003b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b64:	4798      	blx	r3
 8003b66:	3601      	adds	r6, #1
 8003b68:	e7ee      	b.n	8003b48 <__libc_init_array+0xc>
 8003b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b6e:	4798      	blx	r3
 8003b70:	3601      	adds	r6, #1
 8003b72:	e7f2      	b.n	8003b5a <__libc_init_array+0x1e>
 8003b74:	08004eac 	.word	0x08004eac
 8003b78:	08004eac 	.word	0x08004eac
 8003b7c:	08004eac 	.word	0x08004eac
 8003b80:	08004eb0 	.word	0x08004eb0

08003b84 <memset>:
 8003b84:	4402      	add	r2, r0
 8003b86:	4603      	mov	r3, r0
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d100      	bne.n	8003b8e <memset+0xa>
 8003b8c:	4770      	bx	lr
 8003b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b92:	e7f9      	b.n	8003b88 <memset+0x4>

08003b94 <iprintf>:
 8003b94:	b40f      	push	{r0, r1, r2, r3}
 8003b96:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <iprintf+0x2c>)
 8003b98:	b513      	push	{r0, r1, r4, lr}
 8003b9a:	681c      	ldr	r4, [r3, #0]
 8003b9c:	b124      	cbz	r4, 8003ba8 <iprintf+0x14>
 8003b9e:	69a3      	ldr	r3, [r4, #24]
 8003ba0:	b913      	cbnz	r3, 8003ba8 <iprintf+0x14>
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f000 fb2c 	bl	8004200 <__sinit>
 8003ba8:	ab05      	add	r3, sp, #20
 8003baa:	9a04      	ldr	r2, [sp, #16]
 8003bac:	68a1      	ldr	r1, [r4, #8]
 8003bae:	9301      	str	r3, [sp, #4]
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f000 fd3d 	bl	8004630 <_vfiprintf_r>
 8003bb6:	b002      	add	sp, #8
 8003bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bbc:	b004      	add	sp, #16
 8003bbe:	4770      	bx	lr
 8003bc0:	2000000c 	.word	0x2000000c

08003bc4 <_puts_r>:
 8003bc4:	b570      	push	{r4, r5, r6, lr}
 8003bc6:	460e      	mov	r6, r1
 8003bc8:	4605      	mov	r5, r0
 8003bca:	b118      	cbz	r0, 8003bd4 <_puts_r+0x10>
 8003bcc:	6983      	ldr	r3, [r0, #24]
 8003bce:	b90b      	cbnz	r3, 8003bd4 <_puts_r+0x10>
 8003bd0:	f000 fb16 	bl	8004200 <__sinit>
 8003bd4:	69ab      	ldr	r3, [r5, #24]
 8003bd6:	68ac      	ldr	r4, [r5, #8]
 8003bd8:	b913      	cbnz	r3, 8003be0 <_puts_r+0x1c>
 8003bda:	4628      	mov	r0, r5
 8003bdc:	f000 fb10 	bl	8004200 <__sinit>
 8003be0:	4b2c      	ldr	r3, [pc, #176]	; (8003c94 <_puts_r+0xd0>)
 8003be2:	429c      	cmp	r4, r3
 8003be4:	d120      	bne.n	8003c28 <_puts_r+0x64>
 8003be6:	686c      	ldr	r4, [r5, #4]
 8003be8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bea:	07db      	lsls	r3, r3, #31
 8003bec:	d405      	bmi.n	8003bfa <_puts_r+0x36>
 8003bee:	89a3      	ldrh	r3, [r4, #12]
 8003bf0:	0598      	lsls	r0, r3, #22
 8003bf2:	d402      	bmi.n	8003bfa <_puts_r+0x36>
 8003bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bf6:	f000 fba1 	bl	800433c <__retarget_lock_acquire_recursive>
 8003bfa:	89a3      	ldrh	r3, [r4, #12]
 8003bfc:	0719      	lsls	r1, r3, #28
 8003bfe:	d51d      	bpl.n	8003c3c <_puts_r+0x78>
 8003c00:	6923      	ldr	r3, [r4, #16]
 8003c02:	b1db      	cbz	r3, 8003c3c <_puts_r+0x78>
 8003c04:	3e01      	subs	r6, #1
 8003c06:	68a3      	ldr	r3, [r4, #8]
 8003c08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	60a3      	str	r3, [r4, #8]
 8003c10:	bb39      	cbnz	r1, 8003c62 <_puts_r+0x9e>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	da38      	bge.n	8003c88 <_puts_r+0xc4>
 8003c16:	4622      	mov	r2, r4
 8003c18:	210a      	movs	r1, #10
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	f000 f916 	bl	8003e4c <__swbuf_r>
 8003c20:	3001      	adds	r0, #1
 8003c22:	d011      	beq.n	8003c48 <_puts_r+0x84>
 8003c24:	250a      	movs	r5, #10
 8003c26:	e011      	b.n	8003c4c <_puts_r+0x88>
 8003c28:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <_puts_r+0xd4>)
 8003c2a:	429c      	cmp	r4, r3
 8003c2c:	d101      	bne.n	8003c32 <_puts_r+0x6e>
 8003c2e:	68ac      	ldr	r4, [r5, #8]
 8003c30:	e7da      	b.n	8003be8 <_puts_r+0x24>
 8003c32:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <_puts_r+0xd8>)
 8003c34:	429c      	cmp	r4, r3
 8003c36:	bf08      	it	eq
 8003c38:	68ec      	ldreq	r4, [r5, #12]
 8003c3a:	e7d5      	b.n	8003be8 <_puts_r+0x24>
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f000 f956 	bl	8003ef0 <__swsetup_r>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	d0dd      	beq.n	8003c04 <_puts_r+0x40>
 8003c48:	f04f 35ff 	mov.w	r5, #4294967295
 8003c4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c4e:	07da      	lsls	r2, r3, #31
 8003c50:	d405      	bmi.n	8003c5e <_puts_r+0x9a>
 8003c52:	89a3      	ldrh	r3, [r4, #12]
 8003c54:	059b      	lsls	r3, r3, #22
 8003c56:	d402      	bmi.n	8003c5e <_puts_r+0x9a>
 8003c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c5a:	f000 fb70 	bl	800433e <__retarget_lock_release_recursive>
 8003c5e:	4628      	mov	r0, r5
 8003c60:	bd70      	pop	{r4, r5, r6, pc}
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	da04      	bge.n	8003c70 <_puts_r+0xac>
 8003c66:	69a2      	ldr	r2, [r4, #24]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	dc06      	bgt.n	8003c7a <_puts_r+0xb6>
 8003c6c:	290a      	cmp	r1, #10
 8003c6e:	d004      	beq.n	8003c7a <_puts_r+0xb6>
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	6022      	str	r2, [r4, #0]
 8003c76:	7019      	strb	r1, [r3, #0]
 8003c78:	e7c5      	b.n	8003c06 <_puts_r+0x42>
 8003c7a:	4622      	mov	r2, r4
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f000 f8e5 	bl	8003e4c <__swbuf_r>
 8003c82:	3001      	adds	r0, #1
 8003c84:	d1bf      	bne.n	8003c06 <_puts_r+0x42>
 8003c86:	e7df      	b.n	8003c48 <_puts_r+0x84>
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	250a      	movs	r5, #10
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	6022      	str	r2, [r4, #0]
 8003c90:	701d      	strb	r5, [r3, #0]
 8003c92:	e7db      	b.n	8003c4c <_puts_r+0x88>
 8003c94:	08004e30 	.word	0x08004e30
 8003c98:	08004e50 	.word	0x08004e50
 8003c9c:	08004e10 	.word	0x08004e10

08003ca0 <puts>:
 8003ca0:	4b02      	ldr	r3, [pc, #8]	; (8003cac <puts+0xc>)
 8003ca2:	4601      	mov	r1, r0
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	f7ff bf8d 	b.w	8003bc4 <_puts_r>
 8003caa:	bf00      	nop
 8003cac:	2000000c 	.word	0x2000000c

08003cb0 <setbuf>:
 8003cb0:	2900      	cmp	r1, #0
 8003cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2202      	moveq	r2, #2
 8003cba:	2200      	movne	r2, #0
 8003cbc:	f000 b800 	b.w	8003cc0 <setvbuf>

08003cc0 <setvbuf>:
 8003cc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003cc4:	461d      	mov	r5, r3
 8003cc6:	4b5d      	ldr	r3, [pc, #372]	; (8003e3c <setvbuf+0x17c>)
 8003cc8:	681f      	ldr	r7, [r3, #0]
 8003cca:	4604      	mov	r4, r0
 8003ccc:	460e      	mov	r6, r1
 8003cce:	4690      	mov	r8, r2
 8003cd0:	b127      	cbz	r7, 8003cdc <setvbuf+0x1c>
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	b913      	cbnz	r3, 8003cdc <setvbuf+0x1c>
 8003cd6:	4638      	mov	r0, r7
 8003cd8:	f000 fa92 	bl	8004200 <__sinit>
 8003cdc:	4b58      	ldr	r3, [pc, #352]	; (8003e40 <setvbuf+0x180>)
 8003cde:	429c      	cmp	r4, r3
 8003ce0:	d167      	bne.n	8003db2 <setvbuf+0xf2>
 8003ce2:	687c      	ldr	r4, [r7, #4]
 8003ce4:	f1b8 0f02 	cmp.w	r8, #2
 8003ce8:	d006      	beq.n	8003cf8 <setvbuf+0x38>
 8003cea:	f1b8 0f01 	cmp.w	r8, #1
 8003cee:	f200 809f 	bhi.w	8003e30 <setvbuf+0x170>
 8003cf2:	2d00      	cmp	r5, #0
 8003cf4:	f2c0 809c 	blt.w	8003e30 <setvbuf+0x170>
 8003cf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cfa:	07db      	lsls	r3, r3, #31
 8003cfc:	d405      	bmi.n	8003d0a <setvbuf+0x4a>
 8003cfe:	89a3      	ldrh	r3, [r4, #12]
 8003d00:	0598      	lsls	r0, r3, #22
 8003d02:	d402      	bmi.n	8003d0a <setvbuf+0x4a>
 8003d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d06:	f000 fb19 	bl	800433c <__retarget_lock_acquire_recursive>
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	4638      	mov	r0, r7
 8003d0e:	f000 f9e3 	bl	80040d8 <_fflush_r>
 8003d12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d14:	b141      	cbz	r1, 8003d28 <setvbuf+0x68>
 8003d16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d1a:	4299      	cmp	r1, r3
 8003d1c:	d002      	beq.n	8003d24 <setvbuf+0x64>
 8003d1e:	4638      	mov	r0, r7
 8003d20:	f000 fb7c 	bl	800441c <_free_r>
 8003d24:	2300      	movs	r3, #0
 8003d26:	6363      	str	r3, [r4, #52]	; 0x34
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61a3      	str	r3, [r4, #24]
 8003d2c:	6063      	str	r3, [r4, #4]
 8003d2e:	89a3      	ldrh	r3, [r4, #12]
 8003d30:	0619      	lsls	r1, r3, #24
 8003d32:	d503      	bpl.n	8003d3c <setvbuf+0x7c>
 8003d34:	6921      	ldr	r1, [r4, #16]
 8003d36:	4638      	mov	r0, r7
 8003d38:	f000 fb70 	bl	800441c <_free_r>
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003d42:	f023 0303 	bic.w	r3, r3, #3
 8003d46:	f1b8 0f02 	cmp.w	r8, #2
 8003d4a:	81a3      	strh	r3, [r4, #12]
 8003d4c:	d06c      	beq.n	8003e28 <setvbuf+0x168>
 8003d4e:	ab01      	add	r3, sp, #4
 8003d50:	466a      	mov	r2, sp
 8003d52:	4621      	mov	r1, r4
 8003d54:	4638      	mov	r0, r7
 8003d56:	f000 faf3 	bl	8004340 <__swhatbuf_r>
 8003d5a:	89a3      	ldrh	r3, [r4, #12]
 8003d5c:	4318      	orrs	r0, r3
 8003d5e:	81a0      	strh	r0, [r4, #12]
 8003d60:	2d00      	cmp	r5, #0
 8003d62:	d130      	bne.n	8003dc6 <setvbuf+0x106>
 8003d64:	9d00      	ldr	r5, [sp, #0]
 8003d66:	4628      	mov	r0, r5
 8003d68:	f000 fb50 	bl	800440c <malloc>
 8003d6c:	4606      	mov	r6, r0
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	d155      	bne.n	8003e1e <setvbuf+0x15e>
 8003d72:	f8dd 9000 	ldr.w	r9, [sp]
 8003d76:	45a9      	cmp	r9, r5
 8003d78:	d14a      	bne.n	8003e10 <setvbuf+0x150>
 8003d7a:	f04f 35ff 	mov.w	r5, #4294967295
 8003d7e:	2200      	movs	r2, #0
 8003d80:	60a2      	str	r2, [r4, #8]
 8003d82:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003d86:	6022      	str	r2, [r4, #0]
 8003d88:	6122      	str	r2, [r4, #16]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d90:	6162      	str	r2, [r4, #20]
 8003d92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d94:	f043 0302 	orr.w	r3, r3, #2
 8003d98:	07d2      	lsls	r2, r2, #31
 8003d9a:	81a3      	strh	r3, [r4, #12]
 8003d9c:	d405      	bmi.n	8003daa <setvbuf+0xea>
 8003d9e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003da2:	d102      	bne.n	8003daa <setvbuf+0xea>
 8003da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003da6:	f000 faca 	bl	800433e <__retarget_lock_release_recursive>
 8003daa:	4628      	mov	r0, r5
 8003dac:	b003      	add	sp, #12
 8003dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <setvbuf+0x184>)
 8003db4:	429c      	cmp	r4, r3
 8003db6:	d101      	bne.n	8003dbc <setvbuf+0xfc>
 8003db8:	68bc      	ldr	r4, [r7, #8]
 8003dba:	e793      	b.n	8003ce4 <setvbuf+0x24>
 8003dbc:	4b22      	ldr	r3, [pc, #136]	; (8003e48 <setvbuf+0x188>)
 8003dbe:	429c      	cmp	r4, r3
 8003dc0:	bf08      	it	eq
 8003dc2:	68fc      	ldreq	r4, [r7, #12]
 8003dc4:	e78e      	b.n	8003ce4 <setvbuf+0x24>
 8003dc6:	2e00      	cmp	r6, #0
 8003dc8:	d0cd      	beq.n	8003d66 <setvbuf+0xa6>
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	b913      	cbnz	r3, 8003dd4 <setvbuf+0x114>
 8003dce:	4638      	mov	r0, r7
 8003dd0:	f000 fa16 	bl	8004200 <__sinit>
 8003dd4:	f1b8 0f01 	cmp.w	r8, #1
 8003dd8:	bf08      	it	eq
 8003dda:	89a3      	ldrheq	r3, [r4, #12]
 8003ddc:	6026      	str	r6, [r4, #0]
 8003dde:	bf04      	itt	eq
 8003de0:	f043 0301 	orreq.w	r3, r3, #1
 8003de4:	81a3      	strheq	r3, [r4, #12]
 8003de6:	89a2      	ldrh	r2, [r4, #12]
 8003de8:	f012 0308 	ands.w	r3, r2, #8
 8003dec:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003df0:	d01c      	beq.n	8003e2c <setvbuf+0x16c>
 8003df2:	07d3      	lsls	r3, r2, #31
 8003df4:	bf41      	itttt	mi
 8003df6:	2300      	movmi	r3, #0
 8003df8:	426d      	negmi	r5, r5
 8003dfa:	60a3      	strmi	r3, [r4, #8]
 8003dfc:	61a5      	strmi	r5, [r4, #24]
 8003dfe:	bf58      	it	pl
 8003e00:	60a5      	strpl	r5, [r4, #8]
 8003e02:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003e04:	f015 0501 	ands.w	r5, r5, #1
 8003e08:	d115      	bne.n	8003e36 <setvbuf+0x176>
 8003e0a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003e0e:	e7c8      	b.n	8003da2 <setvbuf+0xe2>
 8003e10:	4648      	mov	r0, r9
 8003e12:	f000 fafb 	bl	800440c <malloc>
 8003e16:	4606      	mov	r6, r0
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	d0ae      	beq.n	8003d7a <setvbuf+0xba>
 8003e1c:	464d      	mov	r5, r9
 8003e1e:	89a3      	ldrh	r3, [r4, #12]
 8003e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e24:	81a3      	strh	r3, [r4, #12]
 8003e26:	e7d0      	b.n	8003dca <setvbuf+0x10a>
 8003e28:	2500      	movs	r5, #0
 8003e2a:	e7a8      	b.n	8003d7e <setvbuf+0xbe>
 8003e2c:	60a3      	str	r3, [r4, #8]
 8003e2e:	e7e8      	b.n	8003e02 <setvbuf+0x142>
 8003e30:	f04f 35ff 	mov.w	r5, #4294967295
 8003e34:	e7b9      	b.n	8003daa <setvbuf+0xea>
 8003e36:	2500      	movs	r5, #0
 8003e38:	e7b7      	b.n	8003daa <setvbuf+0xea>
 8003e3a:	bf00      	nop
 8003e3c:	2000000c 	.word	0x2000000c
 8003e40:	08004e30 	.word	0x08004e30
 8003e44:	08004e50 	.word	0x08004e50
 8003e48:	08004e10 	.word	0x08004e10

08003e4c <__swbuf_r>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	460e      	mov	r6, r1
 8003e50:	4614      	mov	r4, r2
 8003e52:	4605      	mov	r5, r0
 8003e54:	b118      	cbz	r0, 8003e5e <__swbuf_r+0x12>
 8003e56:	6983      	ldr	r3, [r0, #24]
 8003e58:	b90b      	cbnz	r3, 8003e5e <__swbuf_r+0x12>
 8003e5a:	f000 f9d1 	bl	8004200 <__sinit>
 8003e5e:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <__swbuf_r+0x98>)
 8003e60:	429c      	cmp	r4, r3
 8003e62:	d12b      	bne.n	8003ebc <__swbuf_r+0x70>
 8003e64:	686c      	ldr	r4, [r5, #4]
 8003e66:	69a3      	ldr	r3, [r4, #24]
 8003e68:	60a3      	str	r3, [r4, #8]
 8003e6a:	89a3      	ldrh	r3, [r4, #12]
 8003e6c:	071a      	lsls	r2, r3, #28
 8003e6e:	d52f      	bpl.n	8003ed0 <__swbuf_r+0x84>
 8003e70:	6923      	ldr	r3, [r4, #16]
 8003e72:	b36b      	cbz	r3, 8003ed0 <__swbuf_r+0x84>
 8003e74:	6923      	ldr	r3, [r4, #16]
 8003e76:	6820      	ldr	r0, [r4, #0]
 8003e78:	1ac0      	subs	r0, r0, r3
 8003e7a:	6963      	ldr	r3, [r4, #20]
 8003e7c:	b2f6      	uxtb	r6, r6
 8003e7e:	4283      	cmp	r3, r0
 8003e80:	4637      	mov	r7, r6
 8003e82:	dc04      	bgt.n	8003e8e <__swbuf_r+0x42>
 8003e84:	4621      	mov	r1, r4
 8003e86:	4628      	mov	r0, r5
 8003e88:	f000 f926 	bl	80040d8 <_fflush_r>
 8003e8c:	bb30      	cbnz	r0, 8003edc <__swbuf_r+0x90>
 8003e8e:	68a3      	ldr	r3, [r4, #8]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	60a3      	str	r3, [r4, #8]
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	6022      	str	r2, [r4, #0]
 8003e9a:	701e      	strb	r6, [r3, #0]
 8003e9c:	6963      	ldr	r3, [r4, #20]
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	4283      	cmp	r3, r0
 8003ea2:	d004      	beq.n	8003eae <__swbuf_r+0x62>
 8003ea4:	89a3      	ldrh	r3, [r4, #12]
 8003ea6:	07db      	lsls	r3, r3, #31
 8003ea8:	d506      	bpl.n	8003eb8 <__swbuf_r+0x6c>
 8003eaa:	2e0a      	cmp	r6, #10
 8003eac:	d104      	bne.n	8003eb8 <__swbuf_r+0x6c>
 8003eae:	4621      	mov	r1, r4
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	f000 f911 	bl	80040d8 <_fflush_r>
 8003eb6:	b988      	cbnz	r0, 8003edc <__swbuf_r+0x90>
 8003eb8:	4638      	mov	r0, r7
 8003eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <__swbuf_r+0x9c>)
 8003ebe:	429c      	cmp	r4, r3
 8003ec0:	d101      	bne.n	8003ec6 <__swbuf_r+0x7a>
 8003ec2:	68ac      	ldr	r4, [r5, #8]
 8003ec4:	e7cf      	b.n	8003e66 <__swbuf_r+0x1a>
 8003ec6:	4b09      	ldr	r3, [pc, #36]	; (8003eec <__swbuf_r+0xa0>)
 8003ec8:	429c      	cmp	r4, r3
 8003eca:	bf08      	it	eq
 8003ecc:	68ec      	ldreq	r4, [r5, #12]
 8003ece:	e7ca      	b.n	8003e66 <__swbuf_r+0x1a>
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	f000 f80c 	bl	8003ef0 <__swsetup_r>
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	d0cb      	beq.n	8003e74 <__swbuf_r+0x28>
 8003edc:	f04f 37ff 	mov.w	r7, #4294967295
 8003ee0:	e7ea      	b.n	8003eb8 <__swbuf_r+0x6c>
 8003ee2:	bf00      	nop
 8003ee4:	08004e30 	.word	0x08004e30
 8003ee8:	08004e50 	.word	0x08004e50
 8003eec:	08004e10 	.word	0x08004e10

08003ef0 <__swsetup_r>:
 8003ef0:	4b32      	ldr	r3, [pc, #200]	; (8003fbc <__swsetup_r+0xcc>)
 8003ef2:	b570      	push	{r4, r5, r6, lr}
 8003ef4:	681d      	ldr	r5, [r3, #0]
 8003ef6:	4606      	mov	r6, r0
 8003ef8:	460c      	mov	r4, r1
 8003efa:	b125      	cbz	r5, 8003f06 <__swsetup_r+0x16>
 8003efc:	69ab      	ldr	r3, [r5, #24]
 8003efe:	b913      	cbnz	r3, 8003f06 <__swsetup_r+0x16>
 8003f00:	4628      	mov	r0, r5
 8003f02:	f000 f97d 	bl	8004200 <__sinit>
 8003f06:	4b2e      	ldr	r3, [pc, #184]	; (8003fc0 <__swsetup_r+0xd0>)
 8003f08:	429c      	cmp	r4, r3
 8003f0a:	d10f      	bne.n	8003f2c <__swsetup_r+0x3c>
 8003f0c:	686c      	ldr	r4, [r5, #4]
 8003f0e:	89a3      	ldrh	r3, [r4, #12]
 8003f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f14:	0719      	lsls	r1, r3, #28
 8003f16:	d42c      	bmi.n	8003f72 <__swsetup_r+0x82>
 8003f18:	06dd      	lsls	r5, r3, #27
 8003f1a:	d411      	bmi.n	8003f40 <__swsetup_r+0x50>
 8003f1c:	2309      	movs	r3, #9
 8003f1e:	6033      	str	r3, [r6, #0]
 8003f20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f24:	81a3      	strh	r3, [r4, #12]
 8003f26:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2a:	e03e      	b.n	8003faa <__swsetup_r+0xba>
 8003f2c:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <__swsetup_r+0xd4>)
 8003f2e:	429c      	cmp	r4, r3
 8003f30:	d101      	bne.n	8003f36 <__swsetup_r+0x46>
 8003f32:	68ac      	ldr	r4, [r5, #8]
 8003f34:	e7eb      	b.n	8003f0e <__swsetup_r+0x1e>
 8003f36:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <__swsetup_r+0xd8>)
 8003f38:	429c      	cmp	r4, r3
 8003f3a:	bf08      	it	eq
 8003f3c:	68ec      	ldreq	r4, [r5, #12]
 8003f3e:	e7e6      	b.n	8003f0e <__swsetup_r+0x1e>
 8003f40:	0758      	lsls	r0, r3, #29
 8003f42:	d512      	bpl.n	8003f6a <__swsetup_r+0x7a>
 8003f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f46:	b141      	cbz	r1, 8003f5a <__swsetup_r+0x6a>
 8003f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f4c:	4299      	cmp	r1, r3
 8003f4e:	d002      	beq.n	8003f56 <__swsetup_r+0x66>
 8003f50:	4630      	mov	r0, r6
 8003f52:	f000 fa63 	bl	800441c <_free_r>
 8003f56:	2300      	movs	r3, #0
 8003f58:	6363      	str	r3, [r4, #52]	; 0x34
 8003f5a:	89a3      	ldrh	r3, [r4, #12]
 8003f5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f60:	81a3      	strh	r3, [r4, #12]
 8003f62:	2300      	movs	r3, #0
 8003f64:	6063      	str	r3, [r4, #4]
 8003f66:	6923      	ldr	r3, [r4, #16]
 8003f68:	6023      	str	r3, [r4, #0]
 8003f6a:	89a3      	ldrh	r3, [r4, #12]
 8003f6c:	f043 0308 	orr.w	r3, r3, #8
 8003f70:	81a3      	strh	r3, [r4, #12]
 8003f72:	6923      	ldr	r3, [r4, #16]
 8003f74:	b94b      	cbnz	r3, 8003f8a <__swsetup_r+0x9a>
 8003f76:	89a3      	ldrh	r3, [r4, #12]
 8003f78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f80:	d003      	beq.n	8003f8a <__swsetup_r+0x9a>
 8003f82:	4621      	mov	r1, r4
 8003f84:	4630      	mov	r0, r6
 8003f86:	f000 fa01 	bl	800438c <__smakebuf_r>
 8003f8a:	89a0      	ldrh	r0, [r4, #12]
 8003f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f90:	f010 0301 	ands.w	r3, r0, #1
 8003f94:	d00a      	beq.n	8003fac <__swsetup_r+0xbc>
 8003f96:	2300      	movs	r3, #0
 8003f98:	60a3      	str	r3, [r4, #8]
 8003f9a:	6963      	ldr	r3, [r4, #20]
 8003f9c:	425b      	negs	r3, r3
 8003f9e:	61a3      	str	r3, [r4, #24]
 8003fa0:	6923      	ldr	r3, [r4, #16]
 8003fa2:	b943      	cbnz	r3, 8003fb6 <__swsetup_r+0xc6>
 8003fa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fa8:	d1ba      	bne.n	8003f20 <__swsetup_r+0x30>
 8003faa:	bd70      	pop	{r4, r5, r6, pc}
 8003fac:	0781      	lsls	r1, r0, #30
 8003fae:	bf58      	it	pl
 8003fb0:	6963      	ldrpl	r3, [r4, #20]
 8003fb2:	60a3      	str	r3, [r4, #8]
 8003fb4:	e7f4      	b.n	8003fa0 <__swsetup_r+0xb0>
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	e7f7      	b.n	8003faa <__swsetup_r+0xba>
 8003fba:	bf00      	nop
 8003fbc:	2000000c 	.word	0x2000000c
 8003fc0:	08004e30 	.word	0x08004e30
 8003fc4:	08004e50 	.word	0x08004e50
 8003fc8:	08004e10 	.word	0x08004e10

08003fcc <__sflush_r>:
 8003fcc:	898a      	ldrh	r2, [r1, #12]
 8003fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd2:	4605      	mov	r5, r0
 8003fd4:	0710      	lsls	r0, r2, #28
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	d458      	bmi.n	800408c <__sflush_r+0xc0>
 8003fda:	684b      	ldr	r3, [r1, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	dc05      	bgt.n	8003fec <__sflush_r+0x20>
 8003fe0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	dc02      	bgt.n	8003fec <__sflush_r+0x20>
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fee:	2e00      	cmp	r6, #0
 8003ff0:	d0f9      	beq.n	8003fe6 <__sflush_r+0x1a>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ff8:	682f      	ldr	r7, [r5, #0]
 8003ffa:	602b      	str	r3, [r5, #0]
 8003ffc:	d032      	beq.n	8004064 <__sflush_r+0x98>
 8003ffe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004000:	89a3      	ldrh	r3, [r4, #12]
 8004002:	075a      	lsls	r2, r3, #29
 8004004:	d505      	bpl.n	8004012 <__sflush_r+0x46>
 8004006:	6863      	ldr	r3, [r4, #4]
 8004008:	1ac0      	subs	r0, r0, r3
 800400a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800400c:	b10b      	cbz	r3, 8004012 <__sflush_r+0x46>
 800400e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004010:	1ac0      	subs	r0, r0, r3
 8004012:	2300      	movs	r3, #0
 8004014:	4602      	mov	r2, r0
 8004016:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004018:	6a21      	ldr	r1, [r4, #32]
 800401a:	4628      	mov	r0, r5
 800401c:	47b0      	blx	r6
 800401e:	1c43      	adds	r3, r0, #1
 8004020:	89a3      	ldrh	r3, [r4, #12]
 8004022:	d106      	bne.n	8004032 <__sflush_r+0x66>
 8004024:	6829      	ldr	r1, [r5, #0]
 8004026:	291d      	cmp	r1, #29
 8004028:	d82c      	bhi.n	8004084 <__sflush_r+0xb8>
 800402a:	4a2a      	ldr	r2, [pc, #168]	; (80040d4 <__sflush_r+0x108>)
 800402c:	40ca      	lsrs	r2, r1
 800402e:	07d6      	lsls	r6, r2, #31
 8004030:	d528      	bpl.n	8004084 <__sflush_r+0xb8>
 8004032:	2200      	movs	r2, #0
 8004034:	6062      	str	r2, [r4, #4]
 8004036:	04d9      	lsls	r1, r3, #19
 8004038:	6922      	ldr	r2, [r4, #16]
 800403a:	6022      	str	r2, [r4, #0]
 800403c:	d504      	bpl.n	8004048 <__sflush_r+0x7c>
 800403e:	1c42      	adds	r2, r0, #1
 8004040:	d101      	bne.n	8004046 <__sflush_r+0x7a>
 8004042:	682b      	ldr	r3, [r5, #0]
 8004044:	b903      	cbnz	r3, 8004048 <__sflush_r+0x7c>
 8004046:	6560      	str	r0, [r4, #84]	; 0x54
 8004048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800404a:	602f      	str	r7, [r5, #0]
 800404c:	2900      	cmp	r1, #0
 800404e:	d0ca      	beq.n	8003fe6 <__sflush_r+0x1a>
 8004050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004054:	4299      	cmp	r1, r3
 8004056:	d002      	beq.n	800405e <__sflush_r+0x92>
 8004058:	4628      	mov	r0, r5
 800405a:	f000 f9df 	bl	800441c <_free_r>
 800405e:	2000      	movs	r0, #0
 8004060:	6360      	str	r0, [r4, #52]	; 0x34
 8004062:	e7c1      	b.n	8003fe8 <__sflush_r+0x1c>
 8004064:	6a21      	ldr	r1, [r4, #32]
 8004066:	2301      	movs	r3, #1
 8004068:	4628      	mov	r0, r5
 800406a:	47b0      	blx	r6
 800406c:	1c41      	adds	r1, r0, #1
 800406e:	d1c7      	bne.n	8004000 <__sflush_r+0x34>
 8004070:	682b      	ldr	r3, [r5, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0c4      	beq.n	8004000 <__sflush_r+0x34>
 8004076:	2b1d      	cmp	r3, #29
 8004078:	d001      	beq.n	800407e <__sflush_r+0xb2>
 800407a:	2b16      	cmp	r3, #22
 800407c:	d101      	bne.n	8004082 <__sflush_r+0xb6>
 800407e:	602f      	str	r7, [r5, #0]
 8004080:	e7b1      	b.n	8003fe6 <__sflush_r+0x1a>
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004088:	81a3      	strh	r3, [r4, #12]
 800408a:	e7ad      	b.n	8003fe8 <__sflush_r+0x1c>
 800408c:	690f      	ldr	r7, [r1, #16]
 800408e:	2f00      	cmp	r7, #0
 8004090:	d0a9      	beq.n	8003fe6 <__sflush_r+0x1a>
 8004092:	0793      	lsls	r3, r2, #30
 8004094:	680e      	ldr	r6, [r1, #0]
 8004096:	bf08      	it	eq
 8004098:	694b      	ldreq	r3, [r1, #20]
 800409a:	600f      	str	r7, [r1, #0]
 800409c:	bf18      	it	ne
 800409e:	2300      	movne	r3, #0
 80040a0:	eba6 0807 	sub.w	r8, r6, r7
 80040a4:	608b      	str	r3, [r1, #8]
 80040a6:	f1b8 0f00 	cmp.w	r8, #0
 80040aa:	dd9c      	ble.n	8003fe6 <__sflush_r+0x1a>
 80040ac:	6a21      	ldr	r1, [r4, #32]
 80040ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040b0:	4643      	mov	r3, r8
 80040b2:	463a      	mov	r2, r7
 80040b4:	4628      	mov	r0, r5
 80040b6:	47b0      	blx	r6
 80040b8:	2800      	cmp	r0, #0
 80040ba:	dc06      	bgt.n	80040ca <__sflush_r+0xfe>
 80040bc:	89a3      	ldrh	r3, [r4, #12]
 80040be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c2:	81a3      	strh	r3, [r4, #12]
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	e78e      	b.n	8003fe8 <__sflush_r+0x1c>
 80040ca:	4407      	add	r7, r0
 80040cc:	eba8 0800 	sub.w	r8, r8, r0
 80040d0:	e7e9      	b.n	80040a6 <__sflush_r+0xda>
 80040d2:	bf00      	nop
 80040d4:	20400001 	.word	0x20400001

080040d8 <_fflush_r>:
 80040d8:	b538      	push	{r3, r4, r5, lr}
 80040da:	690b      	ldr	r3, [r1, #16]
 80040dc:	4605      	mov	r5, r0
 80040de:	460c      	mov	r4, r1
 80040e0:	b913      	cbnz	r3, 80040e8 <_fflush_r+0x10>
 80040e2:	2500      	movs	r5, #0
 80040e4:	4628      	mov	r0, r5
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
 80040e8:	b118      	cbz	r0, 80040f2 <_fflush_r+0x1a>
 80040ea:	6983      	ldr	r3, [r0, #24]
 80040ec:	b90b      	cbnz	r3, 80040f2 <_fflush_r+0x1a>
 80040ee:	f000 f887 	bl	8004200 <__sinit>
 80040f2:	4b14      	ldr	r3, [pc, #80]	; (8004144 <_fflush_r+0x6c>)
 80040f4:	429c      	cmp	r4, r3
 80040f6:	d11b      	bne.n	8004130 <_fflush_r+0x58>
 80040f8:	686c      	ldr	r4, [r5, #4]
 80040fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0ef      	beq.n	80040e2 <_fflush_r+0xa>
 8004102:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004104:	07d0      	lsls	r0, r2, #31
 8004106:	d404      	bmi.n	8004112 <_fflush_r+0x3a>
 8004108:	0599      	lsls	r1, r3, #22
 800410a:	d402      	bmi.n	8004112 <_fflush_r+0x3a>
 800410c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800410e:	f000 f915 	bl	800433c <__retarget_lock_acquire_recursive>
 8004112:	4628      	mov	r0, r5
 8004114:	4621      	mov	r1, r4
 8004116:	f7ff ff59 	bl	8003fcc <__sflush_r>
 800411a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800411c:	07da      	lsls	r2, r3, #31
 800411e:	4605      	mov	r5, r0
 8004120:	d4e0      	bmi.n	80040e4 <_fflush_r+0xc>
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	059b      	lsls	r3, r3, #22
 8004126:	d4dd      	bmi.n	80040e4 <_fflush_r+0xc>
 8004128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800412a:	f000 f908 	bl	800433e <__retarget_lock_release_recursive>
 800412e:	e7d9      	b.n	80040e4 <_fflush_r+0xc>
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <_fflush_r+0x70>)
 8004132:	429c      	cmp	r4, r3
 8004134:	d101      	bne.n	800413a <_fflush_r+0x62>
 8004136:	68ac      	ldr	r4, [r5, #8]
 8004138:	e7df      	b.n	80040fa <_fflush_r+0x22>
 800413a:	4b04      	ldr	r3, [pc, #16]	; (800414c <_fflush_r+0x74>)
 800413c:	429c      	cmp	r4, r3
 800413e:	bf08      	it	eq
 8004140:	68ec      	ldreq	r4, [r5, #12]
 8004142:	e7da      	b.n	80040fa <_fflush_r+0x22>
 8004144:	08004e30 	.word	0x08004e30
 8004148:	08004e50 	.word	0x08004e50
 800414c:	08004e10 	.word	0x08004e10

08004150 <std>:
 8004150:	2300      	movs	r3, #0
 8004152:	b510      	push	{r4, lr}
 8004154:	4604      	mov	r4, r0
 8004156:	e9c0 3300 	strd	r3, r3, [r0]
 800415a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800415e:	6083      	str	r3, [r0, #8]
 8004160:	8181      	strh	r1, [r0, #12]
 8004162:	6643      	str	r3, [r0, #100]	; 0x64
 8004164:	81c2      	strh	r2, [r0, #14]
 8004166:	6183      	str	r3, [r0, #24]
 8004168:	4619      	mov	r1, r3
 800416a:	2208      	movs	r2, #8
 800416c:	305c      	adds	r0, #92	; 0x5c
 800416e:	f7ff fd09 	bl	8003b84 <memset>
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <std+0x38>)
 8004174:	6263      	str	r3, [r4, #36]	; 0x24
 8004176:	4b05      	ldr	r3, [pc, #20]	; (800418c <std+0x3c>)
 8004178:	62a3      	str	r3, [r4, #40]	; 0x28
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <std+0x40>)
 800417c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <std+0x44>)
 8004180:	6224      	str	r4, [r4, #32]
 8004182:	6323      	str	r3, [r4, #48]	; 0x30
 8004184:	bd10      	pop	{r4, pc}
 8004186:	bf00      	nop
 8004188:	08004bd9 	.word	0x08004bd9
 800418c:	08004bfb 	.word	0x08004bfb
 8004190:	08004c33 	.word	0x08004c33
 8004194:	08004c57 	.word	0x08004c57

08004198 <_cleanup_r>:
 8004198:	4901      	ldr	r1, [pc, #4]	; (80041a0 <_cleanup_r+0x8>)
 800419a:	f000 b8af 	b.w	80042fc <_fwalk_reent>
 800419e:	bf00      	nop
 80041a0:	080040d9 	.word	0x080040d9

080041a4 <__sfmoreglue>:
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	2268      	movs	r2, #104	; 0x68
 80041a8:	1e4d      	subs	r5, r1, #1
 80041aa:	4355      	muls	r5, r2
 80041ac:	460e      	mov	r6, r1
 80041ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80041b2:	f000 f99f 	bl	80044f4 <_malloc_r>
 80041b6:	4604      	mov	r4, r0
 80041b8:	b140      	cbz	r0, 80041cc <__sfmoreglue+0x28>
 80041ba:	2100      	movs	r1, #0
 80041bc:	e9c0 1600 	strd	r1, r6, [r0]
 80041c0:	300c      	adds	r0, #12
 80041c2:	60a0      	str	r0, [r4, #8]
 80041c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041c8:	f7ff fcdc 	bl	8003b84 <memset>
 80041cc:	4620      	mov	r0, r4
 80041ce:	bd70      	pop	{r4, r5, r6, pc}

080041d0 <__sfp_lock_acquire>:
 80041d0:	4801      	ldr	r0, [pc, #4]	; (80041d8 <__sfp_lock_acquire+0x8>)
 80041d2:	f000 b8b3 	b.w	800433c <__retarget_lock_acquire_recursive>
 80041d6:	bf00      	nop
 80041d8:	200001ad 	.word	0x200001ad

080041dc <__sfp_lock_release>:
 80041dc:	4801      	ldr	r0, [pc, #4]	; (80041e4 <__sfp_lock_release+0x8>)
 80041de:	f000 b8ae 	b.w	800433e <__retarget_lock_release_recursive>
 80041e2:	bf00      	nop
 80041e4:	200001ad 	.word	0x200001ad

080041e8 <__sinit_lock_acquire>:
 80041e8:	4801      	ldr	r0, [pc, #4]	; (80041f0 <__sinit_lock_acquire+0x8>)
 80041ea:	f000 b8a7 	b.w	800433c <__retarget_lock_acquire_recursive>
 80041ee:	bf00      	nop
 80041f0:	200001ae 	.word	0x200001ae

080041f4 <__sinit_lock_release>:
 80041f4:	4801      	ldr	r0, [pc, #4]	; (80041fc <__sinit_lock_release+0x8>)
 80041f6:	f000 b8a2 	b.w	800433e <__retarget_lock_release_recursive>
 80041fa:	bf00      	nop
 80041fc:	200001ae 	.word	0x200001ae

08004200 <__sinit>:
 8004200:	b510      	push	{r4, lr}
 8004202:	4604      	mov	r4, r0
 8004204:	f7ff fff0 	bl	80041e8 <__sinit_lock_acquire>
 8004208:	69a3      	ldr	r3, [r4, #24]
 800420a:	b11b      	cbz	r3, 8004214 <__sinit+0x14>
 800420c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004210:	f7ff bff0 	b.w	80041f4 <__sinit_lock_release>
 8004214:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004218:	6523      	str	r3, [r4, #80]	; 0x50
 800421a:	4b13      	ldr	r3, [pc, #76]	; (8004268 <__sinit+0x68>)
 800421c:	4a13      	ldr	r2, [pc, #76]	; (800426c <__sinit+0x6c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	62a2      	str	r2, [r4, #40]	; 0x28
 8004222:	42a3      	cmp	r3, r4
 8004224:	bf04      	itt	eq
 8004226:	2301      	moveq	r3, #1
 8004228:	61a3      	streq	r3, [r4, #24]
 800422a:	4620      	mov	r0, r4
 800422c:	f000 f820 	bl	8004270 <__sfp>
 8004230:	6060      	str	r0, [r4, #4]
 8004232:	4620      	mov	r0, r4
 8004234:	f000 f81c 	bl	8004270 <__sfp>
 8004238:	60a0      	str	r0, [r4, #8]
 800423a:	4620      	mov	r0, r4
 800423c:	f000 f818 	bl	8004270 <__sfp>
 8004240:	2200      	movs	r2, #0
 8004242:	60e0      	str	r0, [r4, #12]
 8004244:	2104      	movs	r1, #4
 8004246:	6860      	ldr	r0, [r4, #4]
 8004248:	f7ff ff82 	bl	8004150 <std>
 800424c:	68a0      	ldr	r0, [r4, #8]
 800424e:	2201      	movs	r2, #1
 8004250:	2109      	movs	r1, #9
 8004252:	f7ff ff7d 	bl	8004150 <std>
 8004256:	68e0      	ldr	r0, [r4, #12]
 8004258:	2202      	movs	r2, #2
 800425a:	2112      	movs	r1, #18
 800425c:	f7ff ff78 	bl	8004150 <std>
 8004260:	2301      	movs	r3, #1
 8004262:	61a3      	str	r3, [r4, #24]
 8004264:	e7d2      	b.n	800420c <__sinit+0xc>
 8004266:	bf00      	nop
 8004268:	08004e0c 	.word	0x08004e0c
 800426c:	08004199 	.word	0x08004199

08004270 <__sfp>:
 8004270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004272:	4607      	mov	r7, r0
 8004274:	f7ff ffac 	bl	80041d0 <__sfp_lock_acquire>
 8004278:	4b1e      	ldr	r3, [pc, #120]	; (80042f4 <__sfp+0x84>)
 800427a:	681e      	ldr	r6, [r3, #0]
 800427c:	69b3      	ldr	r3, [r6, #24]
 800427e:	b913      	cbnz	r3, 8004286 <__sfp+0x16>
 8004280:	4630      	mov	r0, r6
 8004282:	f7ff ffbd 	bl	8004200 <__sinit>
 8004286:	3648      	adds	r6, #72	; 0x48
 8004288:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800428c:	3b01      	subs	r3, #1
 800428e:	d503      	bpl.n	8004298 <__sfp+0x28>
 8004290:	6833      	ldr	r3, [r6, #0]
 8004292:	b30b      	cbz	r3, 80042d8 <__sfp+0x68>
 8004294:	6836      	ldr	r6, [r6, #0]
 8004296:	e7f7      	b.n	8004288 <__sfp+0x18>
 8004298:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800429c:	b9d5      	cbnz	r5, 80042d4 <__sfp+0x64>
 800429e:	4b16      	ldr	r3, [pc, #88]	; (80042f8 <__sfp+0x88>)
 80042a0:	60e3      	str	r3, [r4, #12]
 80042a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042a6:	6665      	str	r5, [r4, #100]	; 0x64
 80042a8:	f000 f847 	bl	800433a <__retarget_lock_init_recursive>
 80042ac:	f7ff ff96 	bl	80041dc <__sfp_lock_release>
 80042b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80042b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80042b8:	6025      	str	r5, [r4, #0]
 80042ba:	61a5      	str	r5, [r4, #24]
 80042bc:	2208      	movs	r2, #8
 80042be:	4629      	mov	r1, r5
 80042c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042c4:	f7ff fc5e 	bl	8003b84 <memset>
 80042c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80042cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80042d0:	4620      	mov	r0, r4
 80042d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042d4:	3468      	adds	r4, #104	; 0x68
 80042d6:	e7d9      	b.n	800428c <__sfp+0x1c>
 80042d8:	2104      	movs	r1, #4
 80042da:	4638      	mov	r0, r7
 80042dc:	f7ff ff62 	bl	80041a4 <__sfmoreglue>
 80042e0:	4604      	mov	r4, r0
 80042e2:	6030      	str	r0, [r6, #0]
 80042e4:	2800      	cmp	r0, #0
 80042e6:	d1d5      	bne.n	8004294 <__sfp+0x24>
 80042e8:	f7ff ff78 	bl	80041dc <__sfp_lock_release>
 80042ec:	230c      	movs	r3, #12
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	e7ee      	b.n	80042d0 <__sfp+0x60>
 80042f2:	bf00      	nop
 80042f4:	08004e0c 	.word	0x08004e0c
 80042f8:	ffff0001 	.word	0xffff0001

080042fc <_fwalk_reent>:
 80042fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004300:	4606      	mov	r6, r0
 8004302:	4688      	mov	r8, r1
 8004304:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004308:	2700      	movs	r7, #0
 800430a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800430e:	f1b9 0901 	subs.w	r9, r9, #1
 8004312:	d505      	bpl.n	8004320 <_fwalk_reent+0x24>
 8004314:	6824      	ldr	r4, [r4, #0]
 8004316:	2c00      	cmp	r4, #0
 8004318:	d1f7      	bne.n	800430a <_fwalk_reent+0xe>
 800431a:	4638      	mov	r0, r7
 800431c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004320:	89ab      	ldrh	r3, [r5, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d907      	bls.n	8004336 <_fwalk_reent+0x3a>
 8004326:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800432a:	3301      	adds	r3, #1
 800432c:	d003      	beq.n	8004336 <_fwalk_reent+0x3a>
 800432e:	4629      	mov	r1, r5
 8004330:	4630      	mov	r0, r6
 8004332:	47c0      	blx	r8
 8004334:	4307      	orrs	r7, r0
 8004336:	3568      	adds	r5, #104	; 0x68
 8004338:	e7e9      	b.n	800430e <_fwalk_reent+0x12>

0800433a <__retarget_lock_init_recursive>:
 800433a:	4770      	bx	lr

0800433c <__retarget_lock_acquire_recursive>:
 800433c:	4770      	bx	lr

0800433e <__retarget_lock_release_recursive>:
 800433e:	4770      	bx	lr

08004340 <__swhatbuf_r>:
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	460e      	mov	r6, r1
 8004344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004348:	2900      	cmp	r1, #0
 800434a:	b096      	sub	sp, #88	; 0x58
 800434c:	4614      	mov	r4, r2
 800434e:	461d      	mov	r5, r3
 8004350:	da08      	bge.n	8004364 <__swhatbuf_r+0x24>
 8004352:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	602a      	str	r2, [r5, #0]
 800435a:	061a      	lsls	r2, r3, #24
 800435c:	d410      	bmi.n	8004380 <__swhatbuf_r+0x40>
 800435e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004362:	e00e      	b.n	8004382 <__swhatbuf_r+0x42>
 8004364:	466a      	mov	r2, sp
 8004366:	f000 fc9d 	bl	8004ca4 <_fstat_r>
 800436a:	2800      	cmp	r0, #0
 800436c:	dbf1      	blt.n	8004352 <__swhatbuf_r+0x12>
 800436e:	9a01      	ldr	r2, [sp, #4]
 8004370:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004374:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004378:	425a      	negs	r2, r3
 800437a:	415a      	adcs	r2, r3
 800437c:	602a      	str	r2, [r5, #0]
 800437e:	e7ee      	b.n	800435e <__swhatbuf_r+0x1e>
 8004380:	2340      	movs	r3, #64	; 0x40
 8004382:	2000      	movs	r0, #0
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	b016      	add	sp, #88	; 0x58
 8004388:	bd70      	pop	{r4, r5, r6, pc}
	...

0800438c <__smakebuf_r>:
 800438c:	898b      	ldrh	r3, [r1, #12]
 800438e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004390:	079d      	lsls	r5, r3, #30
 8004392:	4606      	mov	r6, r0
 8004394:	460c      	mov	r4, r1
 8004396:	d507      	bpl.n	80043a8 <__smakebuf_r+0x1c>
 8004398:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800439c:	6023      	str	r3, [r4, #0]
 800439e:	6123      	str	r3, [r4, #16]
 80043a0:	2301      	movs	r3, #1
 80043a2:	6163      	str	r3, [r4, #20]
 80043a4:	b002      	add	sp, #8
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
 80043a8:	ab01      	add	r3, sp, #4
 80043aa:	466a      	mov	r2, sp
 80043ac:	f7ff ffc8 	bl	8004340 <__swhatbuf_r>
 80043b0:	9900      	ldr	r1, [sp, #0]
 80043b2:	4605      	mov	r5, r0
 80043b4:	4630      	mov	r0, r6
 80043b6:	f000 f89d 	bl	80044f4 <_malloc_r>
 80043ba:	b948      	cbnz	r0, 80043d0 <__smakebuf_r+0x44>
 80043bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043c0:	059a      	lsls	r2, r3, #22
 80043c2:	d4ef      	bmi.n	80043a4 <__smakebuf_r+0x18>
 80043c4:	f023 0303 	bic.w	r3, r3, #3
 80043c8:	f043 0302 	orr.w	r3, r3, #2
 80043cc:	81a3      	strh	r3, [r4, #12]
 80043ce:	e7e3      	b.n	8004398 <__smakebuf_r+0xc>
 80043d0:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <__smakebuf_r+0x7c>)
 80043d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80043d4:	89a3      	ldrh	r3, [r4, #12]
 80043d6:	6020      	str	r0, [r4, #0]
 80043d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043dc:	81a3      	strh	r3, [r4, #12]
 80043de:	9b00      	ldr	r3, [sp, #0]
 80043e0:	6163      	str	r3, [r4, #20]
 80043e2:	9b01      	ldr	r3, [sp, #4]
 80043e4:	6120      	str	r0, [r4, #16]
 80043e6:	b15b      	cbz	r3, 8004400 <__smakebuf_r+0x74>
 80043e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043ec:	4630      	mov	r0, r6
 80043ee:	f000 fc6b 	bl	8004cc8 <_isatty_r>
 80043f2:	b128      	cbz	r0, 8004400 <__smakebuf_r+0x74>
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	f023 0303 	bic.w	r3, r3, #3
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	81a3      	strh	r3, [r4, #12]
 8004400:	89a0      	ldrh	r0, [r4, #12]
 8004402:	4305      	orrs	r5, r0
 8004404:	81a5      	strh	r5, [r4, #12]
 8004406:	e7cd      	b.n	80043a4 <__smakebuf_r+0x18>
 8004408:	08004199 	.word	0x08004199

0800440c <malloc>:
 800440c:	4b02      	ldr	r3, [pc, #8]	; (8004418 <malloc+0xc>)
 800440e:	4601      	mov	r1, r0
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	f000 b86f 	b.w	80044f4 <_malloc_r>
 8004416:	bf00      	nop
 8004418:	2000000c 	.word	0x2000000c

0800441c <_free_r>:
 800441c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800441e:	2900      	cmp	r1, #0
 8004420:	d044      	beq.n	80044ac <_free_r+0x90>
 8004422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004426:	9001      	str	r0, [sp, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	f1a1 0404 	sub.w	r4, r1, #4
 800442e:	bfb8      	it	lt
 8004430:	18e4      	addlt	r4, r4, r3
 8004432:	f000 fc6b 	bl	8004d0c <__malloc_lock>
 8004436:	4a1e      	ldr	r2, [pc, #120]	; (80044b0 <_free_r+0x94>)
 8004438:	9801      	ldr	r0, [sp, #4]
 800443a:	6813      	ldr	r3, [r2, #0]
 800443c:	b933      	cbnz	r3, 800444c <_free_r+0x30>
 800443e:	6063      	str	r3, [r4, #4]
 8004440:	6014      	str	r4, [r2, #0]
 8004442:	b003      	add	sp, #12
 8004444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004448:	f000 bc66 	b.w	8004d18 <__malloc_unlock>
 800444c:	42a3      	cmp	r3, r4
 800444e:	d908      	bls.n	8004462 <_free_r+0x46>
 8004450:	6825      	ldr	r5, [r4, #0]
 8004452:	1961      	adds	r1, r4, r5
 8004454:	428b      	cmp	r3, r1
 8004456:	bf01      	itttt	eq
 8004458:	6819      	ldreq	r1, [r3, #0]
 800445a:	685b      	ldreq	r3, [r3, #4]
 800445c:	1949      	addeq	r1, r1, r5
 800445e:	6021      	streq	r1, [r4, #0]
 8004460:	e7ed      	b.n	800443e <_free_r+0x22>
 8004462:	461a      	mov	r2, r3
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	b10b      	cbz	r3, 800446c <_free_r+0x50>
 8004468:	42a3      	cmp	r3, r4
 800446a:	d9fa      	bls.n	8004462 <_free_r+0x46>
 800446c:	6811      	ldr	r1, [r2, #0]
 800446e:	1855      	adds	r5, r2, r1
 8004470:	42a5      	cmp	r5, r4
 8004472:	d10b      	bne.n	800448c <_free_r+0x70>
 8004474:	6824      	ldr	r4, [r4, #0]
 8004476:	4421      	add	r1, r4
 8004478:	1854      	adds	r4, r2, r1
 800447a:	42a3      	cmp	r3, r4
 800447c:	6011      	str	r1, [r2, #0]
 800447e:	d1e0      	bne.n	8004442 <_free_r+0x26>
 8004480:	681c      	ldr	r4, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	6053      	str	r3, [r2, #4]
 8004486:	4421      	add	r1, r4
 8004488:	6011      	str	r1, [r2, #0]
 800448a:	e7da      	b.n	8004442 <_free_r+0x26>
 800448c:	d902      	bls.n	8004494 <_free_r+0x78>
 800448e:	230c      	movs	r3, #12
 8004490:	6003      	str	r3, [r0, #0]
 8004492:	e7d6      	b.n	8004442 <_free_r+0x26>
 8004494:	6825      	ldr	r5, [r4, #0]
 8004496:	1961      	adds	r1, r4, r5
 8004498:	428b      	cmp	r3, r1
 800449a:	bf04      	itt	eq
 800449c:	6819      	ldreq	r1, [r3, #0]
 800449e:	685b      	ldreq	r3, [r3, #4]
 80044a0:	6063      	str	r3, [r4, #4]
 80044a2:	bf04      	itt	eq
 80044a4:	1949      	addeq	r1, r1, r5
 80044a6:	6021      	streq	r1, [r4, #0]
 80044a8:	6054      	str	r4, [r2, #4]
 80044aa:	e7ca      	b.n	8004442 <_free_r+0x26>
 80044ac:	b003      	add	sp, #12
 80044ae:	bd30      	pop	{r4, r5, pc}
 80044b0:	200001b0 	.word	0x200001b0

080044b4 <sbrk_aligned>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	4e0e      	ldr	r6, [pc, #56]	; (80044f0 <sbrk_aligned+0x3c>)
 80044b8:	460c      	mov	r4, r1
 80044ba:	6831      	ldr	r1, [r6, #0]
 80044bc:	4605      	mov	r5, r0
 80044be:	b911      	cbnz	r1, 80044c6 <sbrk_aligned+0x12>
 80044c0:	f000 fb7a 	bl	8004bb8 <_sbrk_r>
 80044c4:	6030      	str	r0, [r6, #0]
 80044c6:	4621      	mov	r1, r4
 80044c8:	4628      	mov	r0, r5
 80044ca:	f000 fb75 	bl	8004bb8 <_sbrk_r>
 80044ce:	1c43      	adds	r3, r0, #1
 80044d0:	d00a      	beq.n	80044e8 <sbrk_aligned+0x34>
 80044d2:	1cc4      	adds	r4, r0, #3
 80044d4:	f024 0403 	bic.w	r4, r4, #3
 80044d8:	42a0      	cmp	r0, r4
 80044da:	d007      	beq.n	80044ec <sbrk_aligned+0x38>
 80044dc:	1a21      	subs	r1, r4, r0
 80044de:	4628      	mov	r0, r5
 80044e0:	f000 fb6a 	bl	8004bb8 <_sbrk_r>
 80044e4:	3001      	adds	r0, #1
 80044e6:	d101      	bne.n	80044ec <sbrk_aligned+0x38>
 80044e8:	f04f 34ff 	mov.w	r4, #4294967295
 80044ec:	4620      	mov	r0, r4
 80044ee:	bd70      	pop	{r4, r5, r6, pc}
 80044f0:	200001b4 	.word	0x200001b4

080044f4 <_malloc_r>:
 80044f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f8:	1ccd      	adds	r5, r1, #3
 80044fa:	f025 0503 	bic.w	r5, r5, #3
 80044fe:	3508      	adds	r5, #8
 8004500:	2d0c      	cmp	r5, #12
 8004502:	bf38      	it	cc
 8004504:	250c      	movcc	r5, #12
 8004506:	2d00      	cmp	r5, #0
 8004508:	4607      	mov	r7, r0
 800450a:	db01      	blt.n	8004510 <_malloc_r+0x1c>
 800450c:	42a9      	cmp	r1, r5
 800450e:	d905      	bls.n	800451c <_malloc_r+0x28>
 8004510:	230c      	movs	r3, #12
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	2600      	movs	r6, #0
 8004516:	4630      	mov	r0, r6
 8004518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800451c:	4e2e      	ldr	r6, [pc, #184]	; (80045d8 <_malloc_r+0xe4>)
 800451e:	f000 fbf5 	bl	8004d0c <__malloc_lock>
 8004522:	6833      	ldr	r3, [r6, #0]
 8004524:	461c      	mov	r4, r3
 8004526:	bb34      	cbnz	r4, 8004576 <_malloc_r+0x82>
 8004528:	4629      	mov	r1, r5
 800452a:	4638      	mov	r0, r7
 800452c:	f7ff ffc2 	bl	80044b4 <sbrk_aligned>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	4604      	mov	r4, r0
 8004534:	d14d      	bne.n	80045d2 <_malloc_r+0xde>
 8004536:	6834      	ldr	r4, [r6, #0]
 8004538:	4626      	mov	r6, r4
 800453a:	2e00      	cmp	r6, #0
 800453c:	d140      	bne.n	80045c0 <_malloc_r+0xcc>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	4631      	mov	r1, r6
 8004542:	4638      	mov	r0, r7
 8004544:	eb04 0803 	add.w	r8, r4, r3
 8004548:	f000 fb36 	bl	8004bb8 <_sbrk_r>
 800454c:	4580      	cmp	r8, r0
 800454e:	d13a      	bne.n	80045c6 <_malloc_r+0xd2>
 8004550:	6821      	ldr	r1, [r4, #0]
 8004552:	3503      	adds	r5, #3
 8004554:	1a6d      	subs	r5, r5, r1
 8004556:	f025 0503 	bic.w	r5, r5, #3
 800455a:	3508      	adds	r5, #8
 800455c:	2d0c      	cmp	r5, #12
 800455e:	bf38      	it	cc
 8004560:	250c      	movcc	r5, #12
 8004562:	4629      	mov	r1, r5
 8004564:	4638      	mov	r0, r7
 8004566:	f7ff ffa5 	bl	80044b4 <sbrk_aligned>
 800456a:	3001      	adds	r0, #1
 800456c:	d02b      	beq.n	80045c6 <_malloc_r+0xd2>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	442b      	add	r3, r5
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	e00e      	b.n	8004594 <_malloc_r+0xa0>
 8004576:	6822      	ldr	r2, [r4, #0]
 8004578:	1b52      	subs	r2, r2, r5
 800457a:	d41e      	bmi.n	80045ba <_malloc_r+0xc6>
 800457c:	2a0b      	cmp	r2, #11
 800457e:	d916      	bls.n	80045ae <_malloc_r+0xba>
 8004580:	1961      	adds	r1, r4, r5
 8004582:	42a3      	cmp	r3, r4
 8004584:	6025      	str	r5, [r4, #0]
 8004586:	bf18      	it	ne
 8004588:	6059      	strne	r1, [r3, #4]
 800458a:	6863      	ldr	r3, [r4, #4]
 800458c:	bf08      	it	eq
 800458e:	6031      	streq	r1, [r6, #0]
 8004590:	5162      	str	r2, [r4, r5]
 8004592:	604b      	str	r3, [r1, #4]
 8004594:	4638      	mov	r0, r7
 8004596:	f104 060b 	add.w	r6, r4, #11
 800459a:	f000 fbbd 	bl	8004d18 <__malloc_unlock>
 800459e:	f026 0607 	bic.w	r6, r6, #7
 80045a2:	1d23      	adds	r3, r4, #4
 80045a4:	1af2      	subs	r2, r6, r3
 80045a6:	d0b6      	beq.n	8004516 <_malloc_r+0x22>
 80045a8:	1b9b      	subs	r3, r3, r6
 80045aa:	50a3      	str	r3, [r4, r2]
 80045ac:	e7b3      	b.n	8004516 <_malloc_r+0x22>
 80045ae:	6862      	ldr	r2, [r4, #4]
 80045b0:	42a3      	cmp	r3, r4
 80045b2:	bf0c      	ite	eq
 80045b4:	6032      	streq	r2, [r6, #0]
 80045b6:	605a      	strne	r2, [r3, #4]
 80045b8:	e7ec      	b.n	8004594 <_malloc_r+0xa0>
 80045ba:	4623      	mov	r3, r4
 80045bc:	6864      	ldr	r4, [r4, #4]
 80045be:	e7b2      	b.n	8004526 <_malloc_r+0x32>
 80045c0:	4634      	mov	r4, r6
 80045c2:	6876      	ldr	r6, [r6, #4]
 80045c4:	e7b9      	b.n	800453a <_malloc_r+0x46>
 80045c6:	230c      	movs	r3, #12
 80045c8:	603b      	str	r3, [r7, #0]
 80045ca:	4638      	mov	r0, r7
 80045cc:	f000 fba4 	bl	8004d18 <__malloc_unlock>
 80045d0:	e7a1      	b.n	8004516 <_malloc_r+0x22>
 80045d2:	6025      	str	r5, [r4, #0]
 80045d4:	e7de      	b.n	8004594 <_malloc_r+0xa0>
 80045d6:	bf00      	nop
 80045d8:	200001b0 	.word	0x200001b0

080045dc <__sfputc_r>:
 80045dc:	6893      	ldr	r3, [r2, #8]
 80045de:	3b01      	subs	r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	b410      	push	{r4}
 80045e4:	6093      	str	r3, [r2, #8]
 80045e6:	da08      	bge.n	80045fa <__sfputc_r+0x1e>
 80045e8:	6994      	ldr	r4, [r2, #24]
 80045ea:	42a3      	cmp	r3, r4
 80045ec:	db01      	blt.n	80045f2 <__sfputc_r+0x16>
 80045ee:	290a      	cmp	r1, #10
 80045f0:	d103      	bne.n	80045fa <__sfputc_r+0x1e>
 80045f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045f6:	f7ff bc29 	b.w	8003e4c <__swbuf_r>
 80045fa:	6813      	ldr	r3, [r2, #0]
 80045fc:	1c58      	adds	r0, r3, #1
 80045fe:	6010      	str	r0, [r2, #0]
 8004600:	7019      	strb	r1, [r3, #0]
 8004602:	4608      	mov	r0, r1
 8004604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004608:	4770      	bx	lr

0800460a <__sfputs_r>:
 800460a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460c:	4606      	mov	r6, r0
 800460e:	460f      	mov	r7, r1
 8004610:	4614      	mov	r4, r2
 8004612:	18d5      	adds	r5, r2, r3
 8004614:	42ac      	cmp	r4, r5
 8004616:	d101      	bne.n	800461c <__sfputs_r+0x12>
 8004618:	2000      	movs	r0, #0
 800461a:	e007      	b.n	800462c <__sfputs_r+0x22>
 800461c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004620:	463a      	mov	r2, r7
 8004622:	4630      	mov	r0, r6
 8004624:	f7ff ffda 	bl	80045dc <__sfputc_r>
 8004628:	1c43      	adds	r3, r0, #1
 800462a:	d1f3      	bne.n	8004614 <__sfputs_r+0xa>
 800462c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004630 <_vfiprintf_r>:
 8004630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004634:	460d      	mov	r5, r1
 8004636:	b09d      	sub	sp, #116	; 0x74
 8004638:	4614      	mov	r4, r2
 800463a:	4698      	mov	r8, r3
 800463c:	4606      	mov	r6, r0
 800463e:	b118      	cbz	r0, 8004648 <_vfiprintf_r+0x18>
 8004640:	6983      	ldr	r3, [r0, #24]
 8004642:	b90b      	cbnz	r3, 8004648 <_vfiprintf_r+0x18>
 8004644:	f7ff fddc 	bl	8004200 <__sinit>
 8004648:	4b89      	ldr	r3, [pc, #548]	; (8004870 <_vfiprintf_r+0x240>)
 800464a:	429d      	cmp	r5, r3
 800464c:	d11b      	bne.n	8004686 <_vfiprintf_r+0x56>
 800464e:	6875      	ldr	r5, [r6, #4]
 8004650:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004652:	07d9      	lsls	r1, r3, #31
 8004654:	d405      	bmi.n	8004662 <_vfiprintf_r+0x32>
 8004656:	89ab      	ldrh	r3, [r5, #12]
 8004658:	059a      	lsls	r2, r3, #22
 800465a:	d402      	bmi.n	8004662 <_vfiprintf_r+0x32>
 800465c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800465e:	f7ff fe6d 	bl	800433c <__retarget_lock_acquire_recursive>
 8004662:	89ab      	ldrh	r3, [r5, #12]
 8004664:	071b      	lsls	r3, r3, #28
 8004666:	d501      	bpl.n	800466c <_vfiprintf_r+0x3c>
 8004668:	692b      	ldr	r3, [r5, #16]
 800466a:	b9eb      	cbnz	r3, 80046a8 <_vfiprintf_r+0x78>
 800466c:	4629      	mov	r1, r5
 800466e:	4630      	mov	r0, r6
 8004670:	f7ff fc3e 	bl	8003ef0 <__swsetup_r>
 8004674:	b1c0      	cbz	r0, 80046a8 <_vfiprintf_r+0x78>
 8004676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004678:	07dc      	lsls	r4, r3, #31
 800467a:	d50e      	bpl.n	800469a <_vfiprintf_r+0x6a>
 800467c:	f04f 30ff 	mov.w	r0, #4294967295
 8004680:	b01d      	add	sp, #116	; 0x74
 8004682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004686:	4b7b      	ldr	r3, [pc, #492]	; (8004874 <_vfiprintf_r+0x244>)
 8004688:	429d      	cmp	r5, r3
 800468a:	d101      	bne.n	8004690 <_vfiprintf_r+0x60>
 800468c:	68b5      	ldr	r5, [r6, #8]
 800468e:	e7df      	b.n	8004650 <_vfiprintf_r+0x20>
 8004690:	4b79      	ldr	r3, [pc, #484]	; (8004878 <_vfiprintf_r+0x248>)
 8004692:	429d      	cmp	r5, r3
 8004694:	bf08      	it	eq
 8004696:	68f5      	ldreq	r5, [r6, #12]
 8004698:	e7da      	b.n	8004650 <_vfiprintf_r+0x20>
 800469a:	89ab      	ldrh	r3, [r5, #12]
 800469c:	0598      	lsls	r0, r3, #22
 800469e:	d4ed      	bmi.n	800467c <_vfiprintf_r+0x4c>
 80046a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046a2:	f7ff fe4c 	bl	800433e <__retarget_lock_release_recursive>
 80046a6:	e7e9      	b.n	800467c <_vfiprintf_r+0x4c>
 80046a8:	2300      	movs	r3, #0
 80046aa:	9309      	str	r3, [sp, #36]	; 0x24
 80046ac:	2320      	movs	r3, #32
 80046ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80046b6:	2330      	movs	r3, #48	; 0x30
 80046b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800487c <_vfiprintf_r+0x24c>
 80046bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046c0:	f04f 0901 	mov.w	r9, #1
 80046c4:	4623      	mov	r3, r4
 80046c6:	469a      	mov	sl, r3
 80046c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046cc:	b10a      	cbz	r2, 80046d2 <_vfiprintf_r+0xa2>
 80046ce:	2a25      	cmp	r2, #37	; 0x25
 80046d0:	d1f9      	bne.n	80046c6 <_vfiprintf_r+0x96>
 80046d2:	ebba 0b04 	subs.w	fp, sl, r4
 80046d6:	d00b      	beq.n	80046f0 <_vfiprintf_r+0xc0>
 80046d8:	465b      	mov	r3, fp
 80046da:	4622      	mov	r2, r4
 80046dc:	4629      	mov	r1, r5
 80046de:	4630      	mov	r0, r6
 80046e0:	f7ff ff93 	bl	800460a <__sfputs_r>
 80046e4:	3001      	adds	r0, #1
 80046e6:	f000 80aa 	beq.w	800483e <_vfiprintf_r+0x20e>
 80046ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046ec:	445a      	add	r2, fp
 80046ee:	9209      	str	r2, [sp, #36]	; 0x24
 80046f0:	f89a 3000 	ldrb.w	r3, [sl]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80a2 	beq.w	800483e <_vfiprintf_r+0x20e>
 80046fa:	2300      	movs	r3, #0
 80046fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004704:	f10a 0a01 	add.w	sl, sl, #1
 8004708:	9304      	str	r3, [sp, #16]
 800470a:	9307      	str	r3, [sp, #28]
 800470c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004710:	931a      	str	r3, [sp, #104]	; 0x68
 8004712:	4654      	mov	r4, sl
 8004714:	2205      	movs	r2, #5
 8004716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800471a:	4858      	ldr	r0, [pc, #352]	; (800487c <_vfiprintf_r+0x24c>)
 800471c:	f7fb fd80 	bl	8000220 <memchr>
 8004720:	9a04      	ldr	r2, [sp, #16]
 8004722:	b9d8      	cbnz	r0, 800475c <_vfiprintf_r+0x12c>
 8004724:	06d1      	lsls	r1, r2, #27
 8004726:	bf44      	itt	mi
 8004728:	2320      	movmi	r3, #32
 800472a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800472e:	0713      	lsls	r3, r2, #28
 8004730:	bf44      	itt	mi
 8004732:	232b      	movmi	r3, #43	; 0x2b
 8004734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004738:	f89a 3000 	ldrb.w	r3, [sl]
 800473c:	2b2a      	cmp	r3, #42	; 0x2a
 800473e:	d015      	beq.n	800476c <_vfiprintf_r+0x13c>
 8004740:	9a07      	ldr	r2, [sp, #28]
 8004742:	4654      	mov	r4, sl
 8004744:	2000      	movs	r0, #0
 8004746:	f04f 0c0a 	mov.w	ip, #10
 800474a:	4621      	mov	r1, r4
 800474c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004750:	3b30      	subs	r3, #48	; 0x30
 8004752:	2b09      	cmp	r3, #9
 8004754:	d94e      	bls.n	80047f4 <_vfiprintf_r+0x1c4>
 8004756:	b1b0      	cbz	r0, 8004786 <_vfiprintf_r+0x156>
 8004758:	9207      	str	r2, [sp, #28]
 800475a:	e014      	b.n	8004786 <_vfiprintf_r+0x156>
 800475c:	eba0 0308 	sub.w	r3, r0, r8
 8004760:	fa09 f303 	lsl.w	r3, r9, r3
 8004764:	4313      	orrs	r3, r2
 8004766:	9304      	str	r3, [sp, #16]
 8004768:	46a2      	mov	sl, r4
 800476a:	e7d2      	b.n	8004712 <_vfiprintf_r+0xe2>
 800476c:	9b03      	ldr	r3, [sp, #12]
 800476e:	1d19      	adds	r1, r3, #4
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	9103      	str	r1, [sp, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	bfbb      	ittet	lt
 8004778:	425b      	neglt	r3, r3
 800477a:	f042 0202 	orrlt.w	r2, r2, #2
 800477e:	9307      	strge	r3, [sp, #28]
 8004780:	9307      	strlt	r3, [sp, #28]
 8004782:	bfb8      	it	lt
 8004784:	9204      	strlt	r2, [sp, #16]
 8004786:	7823      	ldrb	r3, [r4, #0]
 8004788:	2b2e      	cmp	r3, #46	; 0x2e
 800478a:	d10c      	bne.n	80047a6 <_vfiprintf_r+0x176>
 800478c:	7863      	ldrb	r3, [r4, #1]
 800478e:	2b2a      	cmp	r3, #42	; 0x2a
 8004790:	d135      	bne.n	80047fe <_vfiprintf_r+0x1ce>
 8004792:	9b03      	ldr	r3, [sp, #12]
 8004794:	1d1a      	adds	r2, r3, #4
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	9203      	str	r2, [sp, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	bfb8      	it	lt
 800479e:	f04f 33ff 	movlt.w	r3, #4294967295
 80047a2:	3402      	adds	r4, #2
 80047a4:	9305      	str	r3, [sp, #20]
 80047a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800488c <_vfiprintf_r+0x25c>
 80047aa:	7821      	ldrb	r1, [r4, #0]
 80047ac:	2203      	movs	r2, #3
 80047ae:	4650      	mov	r0, sl
 80047b0:	f7fb fd36 	bl	8000220 <memchr>
 80047b4:	b140      	cbz	r0, 80047c8 <_vfiprintf_r+0x198>
 80047b6:	2340      	movs	r3, #64	; 0x40
 80047b8:	eba0 000a 	sub.w	r0, r0, sl
 80047bc:	fa03 f000 	lsl.w	r0, r3, r0
 80047c0:	9b04      	ldr	r3, [sp, #16]
 80047c2:	4303      	orrs	r3, r0
 80047c4:	3401      	adds	r4, #1
 80047c6:	9304      	str	r3, [sp, #16]
 80047c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047cc:	482c      	ldr	r0, [pc, #176]	; (8004880 <_vfiprintf_r+0x250>)
 80047ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047d2:	2206      	movs	r2, #6
 80047d4:	f7fb fd24 	bl	8000220 <memchr>
 80047d8:	2800      	cmp	r0, #0
 80047da:	d03f      	beq.n	800485c <_vfiprintf_r+0x22c>
 80047dc:	4b29      	ldr	r3, [pc, #164]	; (8004884 <_vfiprintf_r+0x254>)
 80047de:	bb1b      	cbnz	r3, 8004828 <_vfiprintf_r+0x1f8>
 80047e0:	9b03      	ldr	r3, [sp, #12]
 80047e2:	3307      	adds	r3, #7
 80047e4:	f023 0307 	bic.w	r3, r3, #7
 80047e8:	3308      	adds	r3, #8
 80047ea:	9303      	str	r3, [sp, #12]
 80047ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ee:	443b      	add	r3, r7
 80047f0:	9309      	str	r3, [sp, #36]	; 0x24
 80047f2:	e767      	b.n	80046c4 <_vfiprintf_r+0x94>
 80047f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80047f8:	460c      	mov	r4, r1
 80047fa:	2001      	movs	r0, #1
 80047fc:	e7a5      	b.n	800474a <_vfiprintf_r+0x11a>
 80047fe:	2300      	movs	r3, #0
 8004800:	3401      	adds	r4, #1
 8004802:	9305      	str	r3, [sp, #20]
 8004804:	4619      	mov	r1, r3
 8004806:	f04f 0c0a 	mov.w	ip, #10
 800480a:	4620      	mov	r0, r4
 800480c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004810:	3a30      	subs	r2, #48	; 0x30
 8004812:	2a09      	cmp	r2, #9
 8004814:	d903      	bls.n	800481e <_vfiprintf_r+0x1ee>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0c5      	beq.n	80047a6 <_vfiprintf_r+0x176>
 800481a:	9105      	str	r1, [sp, #20]
 800481c:	e7c3      	b.n	80047a6 <_vfiprintf_r+0x176>
 800481e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004822:	4604      	mov	r4, r0
 8004824:	2301      	movs	r3, #1
 8004826:	e7f0      	b.n	800480a <_vfiprintf_r+0x1da>
 8004828:	ab03      	add	r3, sp, #12
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	462a      	mov	r2, r5
 800482e:	4b16      	ldr	r3, [pc, #88]	; (8004888 <_vfiprintf_r+0x258>)
 8004830:	a904      	add	r1, sp, #16
 8004832:	4630      	mov	r0, r6
 8004834:	f3af 8000 	nop.w
 8004838:	4607      	mov	r7, r0
 800483a:	1c78      	adds	r0, r7, #1
 800483c:	d1d6      	bne.n	80047ec <_vfiprintf_r+0x1bc>
 800483e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004840:	07d9      	lsls	r1, r3, #31
 8004842:	d405      	bmi.n	8004850 <_vfiprintf_r+0x220>
 8004844:	89ab      	ldrh	r3, [r5, #12]
 8004846:	059a      	lsls	r2, r3, #22
 8004848:	d402      	bmi.n	8004850 <_vfiprintf_r+0x220>
 800484a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800484c:	f7ff fd77 	bl	800433e <__retarget_lock_release_recursive>
 8004850:	89ab      	ldrh	r3, [r5, #12]
 8004852:	065b      	lsls	r3, r3, #25
 8004854:	f53f af12 	bmi.w	800467c <_vfiprintf_r+0x4c>
 8004858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800485a:	e711      	b.n	8004680 <_vfiprintf_r+0x50>
 800485c:	ab03      	add	r3, sp, #12
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	462a      	mov	r2, r5
 8004862:	4b09      	ldr	r3, [pc, #36]	; (8004888 <_vfiprintf_r+0x258>)
 8004864:	a904      	add	r1, sp, #16
 8004866:	4630      	mov	r0, r6
 8004868:	f000 f880 	bl	800496c <_printf_i>
 800486c:	e7e4      	b.n	8004838 <_vfiprintf_r+0x208>
 800486e:	bf00      	nop
 8004870:	08004e30 	.word	0x08004e30
 8004874:	08004e50 	.word	0x08004e50
 8004878:	08004e10 	.word	0x08004e10
 800487c:	08004e70 	.word	0x08004e70
 8004880:	08004e7a 	.word	0x08004e7a
 8004884:	00000000 	.word	0x00000000
 8004888:	0800460b 	.word	0x0800460b
 800488c:	08004e76 	.word	0x08004e76

08004890 <_printf_common>:
 8004890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004894:	4616      	mov	r6, r2
 8004896:	4699      	mov	r9, r3
 8004898:	688a      	ldr	r2, [r1, #8]
 800489a:	690b      	ldr	r3, [r1, #16]
 800489c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048a0:	4293      	cmp	r3, r2
 80048a2:	bfb8      	it	lt
 80048a4:	4613      	movlt	r3, r2
 80048a6:	6033      	str	r3, [r6, #0]
 80048a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048ac:	4607      	mov	r7, r0
 80048ae:	460c      	mov	r4, r1
 80048b0:	b10a      	cbz	r2, 80048b6 <_printf_common+0x26>
 80048b2:	3301      	adds	r3, #1
 80048b4:	6033      	str	r3, [r6, #0]
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	0699      	lsls	r1, r3, #26
 80048ba:	bf42      	ittt	mi
 80048bc:	6833      	ldrmi	r3, [r6, #0]
 80048be:	3302      	addmi	r3, #2
 80048c0:	6033      	strmi	r3, [r6, #0]
 80048c2:	6825      	ldr	r5, [r4, #0]
 80048c4:	f015 0506 	ands.w	r5, r5, #6
 80048c8:	d106      	bne.n	80048d8 <_printf_common+0x48>
 80048ca:	f104 0a19 	add.w	sl, r4, #25
 80048ce:	68e3      	ldr	r3, [r4, #12]
 80048d0:	6832      	ldr	r2, [r6, #0]
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	42ab      	cmp	r3, r5
 80048d6:	dc26      	bgt.n	8004926 <_printf_common+0x96>
 80048d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048dc:	1e13      	subs	r3, r2, #0
 80048de:	6822      	ldr	r2, [r4, #0]
 80048e0:	bf18      	it	ne
 80048e2:	2301      	movne	r3, #1
 80048e4:	0692      	lsls	r2, r2, #26
 80048e6:	d42b      	bmi.n	8004940 <_printf_common+0xb0>
 80048e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048ec:	4649      	mov	r1, r9
 80048ee:	4638      	mov	r0, r7
 80048f0:	47c0      	blx	r8
 80048f2:	3001      	adds	r0, #1
 80048f4:	d01e      	beq.n	8004934 <_printf_common+0xa4>
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	68e5      	ldr	r5, [r4, #12]
 80048fa:	6832      	ldr	r2, [r6, #0]
 80048fc:	f003 0306 	and.w	r3, r3, #6
 8004900:	2b04      	cmp	r3, #4
 8004902:	bf08      	it	eq
 8004904:	1aad      	subeq	r5, r5, r2
 8004906:	68a3      	ldr	r3, [r4, #8]
 8004908:	6922      	ldr	r2, [r4, #16]
 800490a:	bf0c      	ite	eq
 800490c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004910:	2500      	movne	r5, #0
 8004912:	4293      	cmp	r3, r2
 8004914:	bfc4      	itt	gt
 8004916:	1a9b      	subgt	r3, r3, r2
 8004918:	18ed      	addgt	r5, r5, r3
 800491a:	2600      	movs	r6, #0
 800491c:	341a      	adds	r4, #26
 800491e:	42b5      	cmp	r5, r6
 8004920:	d11a      	bne.n	8004958 <_printf_common+0xc8>
 8004922:	2000      	movs	r0, #0
 8004924:	e008      	b.n	8004938 <_printf_common+0xa8>
 8004926:	2301      	movs	r3, #1
 8004928:	4652      	mov	r2, sl
 800492a:	4649      	mov	r1, r9
 800492c:	4638      	mov	r0, r7
 800492e:	47c0      	blx	r8
 8004930:	3001      	adds	r0, #1
 8004932:	d103      	bne.n	800493c <_printf_common+0xac>
 8004934:	f04f 30ff 	mov.w	r0, #4294967295
 8004938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800493c:	3501      	adds	r5, #1
 800493e:	e7c6      	b.n	80048ce <_printf_common+0x3e>
 8004940:	18e1      	adds	r1, r4, r3
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	2030      	movs	r0, #48	; 0x30
 8004946:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800494a:	4422      	add	r2, r4
 800494c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004950:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004954:	3302      	adds	r3, #2
 8004956:	e7c7      	b.n	80048e8 <_printf_common+0x58>
 8004958:	2301      	movs	r3, #1
 800495a:	4622      	mov	r2, r4
 800495c:	4649      	mov	r1, r9
 800495e:	4638      	mov	r0, r7
 8004960:	47c0      	blx	r8
 8004962:	3001      	adds	r0, #1
 8004964:	d0e6      	beq.n	8004934 <_printf_common+0xa4>
 8004966:	3601      	adds	r6, #1
 8004968:	e7d9      	b.n	800491e <_printf_common+0x8e>
	...

0800496c <_printf_i>:
 800496c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004970:	7e0f      	ldrb	r7, [r1, #24]
 8004972:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004974:	2f78      	cmp	r7, #120	; 0x78
 8004976:	4691      	mov	r9, r2
 8004978:	4680      	mov	r8, r0
 800497a:	460c      	mov	r4, r1
 800497c:	469a      	mov	sl, r3
 800497e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004982:	d807      	bhi.n	8004994 <_printf_i+0x28>
 8004984:	2f62      	cmp	r7, #98	; 0x62
 8004986:	d80a      	bhi.n	800499e <_printf_i+0x32>
 8004988:	2f00      	cmp	r7, #0
 800498a:	f000 80d8 	beq.w	8004b3e <_printf_i+0x1d2>
 800498e:	2f58      	cmp	r7, #88	; 0x58
 8004990:	f000 80a3 	beq.w	8004ada <_printf_i+0x16e>
 8004994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004998:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800499c:	e03a      	b.n	8004a14 <_printf_i+0xa8>
 800499e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049a2:	2b15      	cmp	r3, #21
 80049a4:	d8f6      	bhi.n	8004994 <_printf_i+0x28>
 80049a6:	a101      	add	r1, pc, #4	; (adr r1, 80049ac <_printf_i+0x40>)
 80049a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049ac:	08004a05 	.word	0x08004a05
 80049b0:	08004a19 	.word	0x08004a19
 80049b4:	08004995 	.word	0x08004995
 80049b8:	08004995 	.word	0x08004995
 80049bc:	08004995 	.word	0x08004995
 80049c0:	08004995 	.word	0x08004995
 80049c4:	08004a19 	.word	0x08004a19
 80049c8:	08004995 	.word	0x08004995
 80049cc:	08004995 	.word	0x08004995
 80049d0:	08004995 	.word	0x08004995
 80049d4:	08004995 	.word	0x08004995
 80049d8:	08004b25 	.word	0x08004b25
 80049dc:	08004a49 	.word	0x08004a49
 80049e0:	08004b07 	.word	0x08004b07
 80049e4:	08004995 	.word	0x08004995
 80049e8:	08004995 	.word	0x08004995
 80049ec:	08004b47 	.word	0x08004b47
 80049f0:	08004995 	.word	0x08004995
 80049f4:	08004a49 	.word	0x08004a49
 80049f8:	08004995 	.word	0x08004995
 80049fc:	08004995 	.word	0x08004995
 8004a00:	08004b0f 	.word	0x08004b0f
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	1d1a      	adds	r2, r3, #4
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	602a      	str	r2, [r5, #0]
 8004a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0a3      	b.n	8004b60 <_printf_i+0x1f4>
 8004a18:	6820      	ldr	r0, [r4, #0]
 8004a1a:	6829      	ldr	r1, [r5, #0]
 8004a1c:	0606      	lsls	r6, r0, #24
 8004a1e:	f101 0304 	add.w	r3, r1, #4
 8004a22:	d50a      	bpl.n	8004a3a <_printf_i+0xce>
 8004a24:	680e      	ldr	r6, [r1, #0]
 8004a26:	602b      	str	r3, [r5, #0]
 8004a28:	2e00      	cmp	r6, #0
 8004a2a:	da03      	bge.n	8004a34 <_printf_i+0xc8>
 8004a2c:	232d      	movs	r3, #45	; 0x2d
 8004a2e:	4276      	negs	r6, r6
 8004a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a34:	485e      	ldr	r0, [pc, #376]	; (8004bb0 <_printf_i+0x244>)
 8004a36:	230a      	movs	r3, #10
 8004a38:	e019      	b.n	8004a6e <_printf_i+0x102>
 8004a3a:	680e      	ldr	r6, [r1, #0]
 8004a3c:	602b      	str	r3, [r5, #0]
 8004a3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a42:	bf18      	it	ne
 8004a44:	b236      	sxthne	r6, r6
 8004a46:	e7ef      	b.n	8004a28 <_printf_i+0xbc>
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	6820      	ldr	r0, [r4, #0]
 8004a4c:	1d19      	adds	r1, r3, #4
 8004a4e:	6029      	str	r1, [r5, #0]
 8004a50:	0601      	lsls	r1, r0, #24
 8004a52:	d501      	bpl.n	8004a58 <_printf_i+0xec>
 8004a54:	681e      	ldr	r6, [r3, #0]
 8004a56:	e002      	b.n	8004a5e <_printf_i+0xf2>
 8004a58:	0646      	lsls	r6, r0, #25
 8004a5a:	d5fb      	bpl.n	8004a54 <_printf_i+0xe8>
 8004a5c:	881e      	ldrh	r6, [r3, #0]
 8004a5e:	4854      	ldr	r0, [pc, #336]	; (8004bb0 <_printf_i+0x244>)
 8004a60:	2f6f      	cmp	r7, #111	; 0x6f
 8004a62:	bf0c      	ite	eq
 8004a64:	2308      	moveq	r3, #8
 8004a66:	230a      	movne	r3, #10
 8004a68:	2100      	movs	r1, #0
 8004a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a6e:	6865      	ldr	r5, [r4, #4]
 8004a70:	60a5      	str	r5, [r4, #8]
 8004a72:	2d00      	cmp	r5, #0
 8004a74:	bfa2      	ittt	ge
 8004a76:	6821      	ldrge	r1, [r4, #0]
 8004a78:	f021 0104 	bicge.w	r1, r1, #4
 8004a7c:	6021      	strge	r1, [r4, #0]
 8004a7e:	b90e      	cbnz	r6, 8004a84 <_printf_i+0x118>
 8004a80:	2d00      	cmp	r5, #0
 8004a82:	d04d      	beq.n	8004b20 <_printf_i+0x1b4>
 8004a84:	4615      	mov	r5, r2
 8004a86:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a8a:	fb03 6711 	mls	r7, r3, r1, r6
 8004a8e:	5dc7      	ldrb	r7, [r0, r7]
 8004a90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a94:	4637      	mov	r7, r6
 8004a96:	42bb      	cmp	r3, r7
 8004a98:	460e      	mov	r6, r1
 8004a9a:	d9f4      	bls.n	8004a86 <_printf_i+0x11a>
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d10b      	bne.n	8004ab8 <_printf_i+0x14c>
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	07de      	lsls	r6, r3, #31
 8004aa4:	d508      	bpl.n	8004ab8 <_printf_i+0x14c>
 8004aa6:	6923      	ldr	r3, [r4, #16]
 8004aa8:	6861      	ldr	r1, [r4, #4]
 8004aaa:	4299      	cmp	r1, r3
 8004aac:	bfde      	ittt	le
 8004aae:	2330      	movle	r3, #48	; 0x30
 8004ab0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ab4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ab8:	1b52      	subs	r2, r2, r5
 8004aba:	6122      	str	r2, [r4, #16]
 8004abc:	f8cd a000 	str.w	sl, [sp]
 8004ac0:	464b      	mov	r3, r9
 8004ac2:	aa03      	add	r2, sp, #12
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	4640      	mov	r0, r8
 8004ac8:	f7ff fee2 	bl	8004890 <_printf_common>
 8004acc:	3001      	adds	r0, #1
 8004ace:	d14c      	bne.n	8004b6a <_printf_i+0x1fe>
 8004ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad4:	b004      	add	sp, #16
 8004ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ada:	4835      	ldr	r0, [pc, #212]	; (8004bb0 <_printf_i+0x244>)
 8004adc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ae0:	6829      	ldr	r1, [r5, #0]
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ae8:	6029      	str	r1, [r5, #0]
 8004aea:	061d      	lsls	r5, r3, #24
 8004aec:	d514      	bpl.n	8004b18 <_printf_i+0x1ac>
 8004aee:	07df      	lsls	r7, r3, #31
 8004af0:	bf44      	itt	mi
 8004af2:	f043 0320 	orrmi.w	r3, r3, #32
 8004af6:	6023      	strmi	r3, [r4, #0]
 8004af8:	b91e      	cbnz	r6, 8004b02 <_printf_i+0x196>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	f023 0320 	bic.w	r3, r3, #32
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	2310      	movs	r3, #16
 8004b04:	e7b0      	b.n	8004a68 <_printf_i+0xfc>
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	f043 0320 	orr.w	r3, r3, #32
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	2378      	movs	r3, #120	; 0x78
 8004b10:	4828      	ldr	r0, [pc, #160]	; (8004bb4 <_printf_i+0x248>)
 8004b12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b16:	e7e3      	b.n	8004ae0 <_printf_i+0x174>
 8004b18:	0659      	lsls	r1, r3, #25
 8004b1a:	bf48      	it	mi
 8004b1c:	b2b6      	uxthmi	r6, r6
 8004b1e:	e7e6      	b.n	8004aee <_printf_i+0x182>
 8004b20:	4615      	mov	r5, r2
 8004b22:	e7bb      	b.n	8004a9c <_printf_i+0x130>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	6826      	ldr	r6, [r4, #0]
 8004b28:	6961      	ldr	r1, [r4, #20]
 8004b2a:	1d18      	adds	r0, r3, #4
 8004b2c:	6028      	str	r0, [r5, #0]
 8004b2e:	0635      	lsls	r5, r6, #24
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	d501      	bpl.n	8004b38 <_printf_i+0x1cc>
 8004b34:	6019      	str	r1, [r3, #0]
 8004b36:	e002      	b.n	8004b3e <_printf_i+0x1d2>
 8004b38:	0670      	lsls	r0, r6, #25
 8004b3a:	d5fb      	bpl.n	8004b34 <_printf_i+0x1c8>
 8004b3c:	8019      	strh	r1, [r3, #0]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	6123      	str	r3, [r4, #16]
 8004b42:	4615      	mov	r5, r2
 8004b44:	e7ba      	b.n	8004abc <_printf_i+0x150>
 8004b46:	682b      	ldr	r3, [r5, #0]
 8004b48:	1d1a      	adds	r2, r3, #4
 8004b4a:	602a      	str	r2, [r5, #0]
 8004b4c:	681d      	ldr	r5, [r3, #0]
 8004b4e:	6862      	ldr	r2, [r4, #4]
 8004b50:	2100      	movs	r1, #0
 8004b52:	4628      	mov	r0, r5
 8004b54:	f7fb fb64 	bl	8000220 <memchr>
 8004b58:	b108      	cbz	r0, 8004b5e <_printf_i+0x1f2>
 8004b5a:	1b40      	subs	r0, r0, r5
 8004b5c:	6060      	str	r0, [r4, #4]
 8004b5e:	6863      	ldr	r3, [r4, #4]
 8004b60:	6123      	str	r3, [r4, #16]
 8004b62:	2300      	movs	r3, #0
 8004b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b68:	e7a8      	b.n	8004abc <_printf_i+0x150>
 8004b6a:	6923      	ldr	r3, [r4, #16]
 8004b6c:	462a      	mov	r2, r5
 8004b6e:	4649      	mov	r1, r9
 8004b70:	4640      	mov	r0, r8
 8004b72:	47d0      	blx	sl
 8004b74:	3001      	adds	r0, #1
 8004b76:	d0ab      	beq.n	8004ad0 <_printf_i+0x164>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	079b      	lsls	r3, r3, #30
 8004b7c:	d413      	bmi.n	8004ba6 <_printf_i+0x23a>
 8004b7e:	68e0      	ldr	r0, [r4, #12]
 8004b80:	9b03      	ldr	r3, [sp, #12]
 8004b82:	4298      	cmp	r0, r3
 8004b84:	bfb8      	it	lt
 8004b86:	4618      	movlt	r0, r3
 8004b88:	e7a4      	b.n	8004ad4 <_printf_i+0x168>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	4632      	mov	r2, r6
 8004b8e:	4649      	mov	r1, r9
 8004b90:	4640      	mov	r0, r8
 8004b92:	47d0      	blx	sl
 8004b94:	3001      	adds	r0, #1
 8004b96:	d09b      	beq.n	8004ad0 <_printf_i+0x164>
 8004b98:	3501      	adds	r5, #1
 8004b9a:	68e3      	ldr	r3, [r4, #12]
 8004b9c:	9903      	ldr	r1, [sp, #12]
 8004b9e:	1a5b      	subs	r3, r3, r1
 8004ba0:	42ab      	cmp	r3, r5
 8004ba2:	dcf2      	bgt.n	8004b8a <_printf_i+0x21e>
 8004ba4:	e7eb      	b.n	8004b7e <_printf_i+0x212>
 8004ba6:	2500      	movs	r5, #0
 8004ba8:	f104 0619 	add.w	r6, r4, #25
 8004bac:	e7f5      	b.n	8004b9a <_printf_i+0x22e>
 8004bae:	bf00      	nop
 8004bb0:	08004e81 	.word	0x08004e81
 8004bb4:	08004e92 	.word	0x08004e92

08004bb8 <_sbrk_r>:
 8004bb8:	b538      	push	{r3, r4, r5, lr}
 8004bba:	4d06      	ldr	r5, [pc, #24]	; (8004bd4 <_sbrk_r+0x1c>)
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	602b      	str	r3, [r5, #0]
 8004bc4:	f7fc f976 	bl	8000eb4 <_sbrk>
 8004bc8:	1c43      	adds	r3, r0, #1
 8004bca:	d102      	bne.n	8004bd2 <_sbrk_r+0x1a>
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	b103      	cbz	r3, 8004bd2 <_sbrk_r+0x1a>
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}
 8004bd4:	200001b8 	.word	0x200001b8

08004bd8 <__sread>:
 8004bd8:	b510      	push	{r4, lr}
 8004bda:	460c      	mov	r4, r1
 8004bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be0:	f000 f8a0 	bl	8004d24 <_read_r>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	bfab      	itete	ge
 8004be8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bea:	89a3      	ldrhlt	r3, [r4, #12]
 8004bec:	181b      	addge	r3, r3, r0
 8004bee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bf2:	bfac      	ite	ge
 8004bf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bf6:	81a3      	strhlt	r3, [r4, #12]
 8004bf8:	bd10      	pop	{r4, pc}

08004bfa <__swrite>:
 8004bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfe:	461f      	mov	r7, r3
 8004c00:	898b      	ldrh	r3, [r1, #12]
 8004c02:	05db      	lsls	r3, r3, #23
 8004c04:	4605      	mov	r5, r0
 8004c06:	460c      	mov	r4, r1
 8004c08:	4616      	mov	r6, r2
 8004c0a:	d505      	bpl.n	8004c18 <__swrite+0x1e>
 8004c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c10:	2302      	movs	r3, #2
 8004c12:	2200      	movs	r2, #0
 8004c14:	f000 f868 	bl	8004ce8 <_lseek_r>
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c22:	81a3      	strh	r3, [r4, #12]
 8004c24:	4632      	mov	r2, r6
 8004c26:	463b      	mov	r3, r7
 8004c28:	4628      	mov	r0, r5
 8004c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2e:	f000 b817 	b.w	8004c60 <_write_r>

08004c32 <__sseek>:
 8004c32:	b510      	push	{r4, lr}
 8004c34:	460c      	mov	r4, r1
 8004c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c3a:	f000 f855 	bl	8004ce8 <_lseek_r>
 8004c3e:	1c43      	adds	r3, r0, #1
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	bf15      	itete	ne
 8004c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c4e:	81a3      	strheq	r3, [r4, #12]
 8004c50:	bf18      	it	ne
 8004c52:	81a3      	strhne	r3, [r4, #12]
 8004c54:	bd10      	pop	{r4, pc}

08004c56 <__sclose>:
 8004c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c5a:	f000 b813 	b.w	8004c84 <_close_r>
	...

08004c60 <_write_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	4d07      	ldr	r5, [pc, #28]	; (8004c80 <_write_r+0x20>)
 8004c64:	4604      	mov	r4, r0
 8004c66:	4608      	mov	r0, r1
 8004c68:	4611      	mov	r1, r2
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	602a      	str	r2, [r5, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f7fb fca8 	bl	80005c4 <_write>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d102      	bne.n	8004c7e <_write_r+0x1e>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	b103      	cbz	r3, 8004c7e <_write_r+0x1e>
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	200001b8 	.word	0x200001b8

08004c84 <_close_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	4d06      	ldr	r5, [pc, #24]	; (8004ca0 <_close_r+0x1c>)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	602b      	str	r3, [r5, #0]
 8004c90:	f7fc f8dc 	bl	8000e4c <_close>
 8004c94:	1c43      	adds	r3, r0, #1
 8004c96:	d102      	bne.n	8004c9e <_close_r+0x1a>
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	b103      	cbz	r3, 8004c9e <_close_r+0x1a>
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ca0:	200001b8 	.word	0x200001b8

08004ca4 <_fstat_r>:
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	4d07      	ldr	r5, [pc, #28]	; (8004cc4 <_fstat_r+0x20>)
 8004ca8:	2300      	movs	r3, #0
 8004caa:	4604      	mov	r4, r0
 8004cac:	4608      	mov	r0, r1
 8004cae:	4611      	mov	r1, r2
 8004cb0:	602b      	str	r3, [r5, #0]
 8004cb2:	f7fc f8d7 	bl	8000e64 <_fstat>
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	d102      	bne.n	8004cc0 <_fstat_r+0x1c>
 8004cba:	682b      	ldr	r3, [r5, #0]
 8004cbc:	b103      	cbz	r3, 8004cc0 <_fstat_r+0x1c>
 8004cbe:	6023      	str	r3, [r4, #0]
 8004cc0:	bd38      	pop	{r3, r4, r5, pc}
 8004cc2:	bf00      	nop
 8004cc4:	200001b8 	.word	0x200001b8

08004cc8 <_isatty_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4d06      	ldr	r5, [pc, #24]	; (8004ce4 <_isatty_r+0x1c>)
 8004ccc:	2300      	movs	r3, #0
 8004cce:	4604      	mov	r4, r0
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	602b      	str	r3, [r5, #0]
 8004cd4:	f7fc f8d6 	bl	8000e84 <_isatty>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d102      	bne.n	8004ce2 <_isatty_r+0x1a>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	b103      	cbz	r3, 8004ce2 <_isatty_r+0x1a>
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	200001b8 	.word	0x200001b8

08004ce8 <_lseek_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4d07      	ldr	r5, [pc, #28]	; (8004d08 <_lseek_r+0x20>)
 8004cec:	4604      	mov	r4, r0
 8004cee:	4608      	mov	r0, r1
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	602a      	str	r2, [r5, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f7fc f8cf 	bl	8000e9a <_lseek>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_lseek_r+0x1e>
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_lseek_r+0x1e>
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	200001b8 	.word	0x200001b8

08004d0c <__malloc_lock>:
 8004d0c:	4801      	ldr	r0, [pc, #4]	; (8004d14 <__malloc_lock+0x8>)
 8004d0e:	f7ff bb15 	b.w	800433c <__retarget_lock_acquire_recursive>
 8004d12:	bf00      	nop
 8004d14:	200001ac 	.word	0x200001ac

08004d18 <__malloc_unlock>:
 8004d18:	4801      	ldr	r0, [pc, #4]	; (8004d20 <__malloc_unlock+0x8>)
 8004d1a:	f7ff bb10 	b.w	800433e <__retarget_lock_release_recursive>
 8004d1e:	bf00      	nop
 8004d20:	200001ac 	.word	0x200001ac

08004d24 <_read_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4d07      	ldr	r5, [pc, #28]	; (8004d44 <_read_r+0x20>)
 8004d28:	4604      	mov	r4, r0
 8004d2a:	4608      	mov	r0, r1
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	2200      	movs	r2, #0
 8004d30:	602a      	str	r2, [r5, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	f7fc f86d 	bl	8000e12 <_read>
 8004d38:	1c43      	adds	r3, r0, #1
 8004d3a:	d102      	bne.n	8004d42 <_read_r+0x1e>
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	b103      	cbz	r3, 8004d42 <_read_r+0x1e>
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	bd38      	pop	{r3, r4, r5, pc}
 8004d44:	200001b8 	.word	0x200001b8

08004d48 <_init>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	bf00      	nop
 8004d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4e:	bc08      	pop	{r3}
 8004d50:	469e      	mov	lr, r3
 8004d52:	4770      	bx	lr

08004d54 <_fini>:
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d56:	bf00      	nop
 8004d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5a:	bc08      	pop	{r3}
 8004d5c:	469e      	mov	lr, r3
 8004d5e:	4770      	bx	lr
