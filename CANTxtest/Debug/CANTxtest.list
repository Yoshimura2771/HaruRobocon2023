
CANTxtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f84  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b4  080031b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031bc  080031bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  080031d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080031d0  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e489  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba4  00000000  00000000  0002e4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00030070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  00030bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca4e  00000000  00000000  00031668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce8d  00000000  00000000  0004e0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7ce9  00000000  00000000  0005af43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00112c2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee0  00000000  00000000  00112c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003144 	.word	0x08003144

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003144 	.word	0x08003144

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08c      	sub	sp, #48	; 0x30
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fa9e 	bl	8000a62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f83d 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f919 	bl	8000760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052e:	f000 f8cb 	bl	80006c8 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000532:	f000 f883 	bl	800063c <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  FDCAN_TxHeaderTypeDef TxHeader;
  uint8_t TxData[8] = {0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F};
 8000536:	4a19      	ldr	r2, [pc, #100]	; (800059c <main+0x80>)
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800053e:	e883 0003 	stmia.w	r3, {r0, r1}


  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000542:	2300      	movs	r3, #0
 8000544:	613b      	str	r3, [r7, #16]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800054a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800054e:	61bb      	str	r3, [r7, #24]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000550:	2300      	movs	r3, #0
 8000552:	61fb      	str	r3, [r7, #28]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000554:	2300      	movs	r3, #0
 8000556:	623b      	str	r3, [r7, #32]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000558:	2300      	movs	r3, #0
 800055a:	627b      	str	r3, [r7, #36]	; 0x24
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800055c:	2300      	movs	r3, #0
 800055e:	62bb      	str	r3, [r7, #40]	; 0x28
  TxHeader.MessageMarker = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxHeader.Identifier = 0x200;
 8000564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000568:	60fb      	str	r3, [r7, #12]
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 800056a:	480d      	ldr	r0, [pc, #52]	; (80005a0 <main+0x84>)
 800056c:	f000 fd4a 	bl	8001004 <HAL_FDCAN_Start>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <main+0x5e>
	  Error_Handler();
 8000576:	f000 f933 	bl	80007e0 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 800057a:	1d3a      	adds	r2, r7, #4
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	4619      	mov	r1, r3
 8000582:	4807      	ldr	r0, [pc, #28]	; (80005a0 <main+0x84>)
 8000584:	f000 fd66 	bl	8001054 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <main+0x76>
	        /* Transmission request Error */
		Error_Handler();
 800058e:	f000 f927 	bl	80007e0 <Error_Handler>
	  }
	  HAL_Delay(100);
 8000592:	2064      	movs	r0, #100	; 0x64
 8000594:	f000 fad6 	bl	8000b44 <HAL_Delay>
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000598:	e7ef      	b.n	800057a <main+0x5e>
 800059a:	bf00      	nop
 800059c:	0800315c 	.word	0x0800315c
 80005a0:	20000028 	.word	0x20000028

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	2238      	movs	r2, #56	; 0x38
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fdbe 	bl	8003134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ca:	f000 fff3 	bl	80015b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ce:	2302      	movs	r3, #2
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2340      	movs	r3, #64	; 0x40
 80005da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	2302      	movs	r3, #2
 80005de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005e8:	230a      	movs	r3, #10
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0318 	add.w	r3, r7, #24
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 f87d 	bl	80016fc <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000608:	f000 f8ea 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2303      	movs	r3, #3
 8000612:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2102      	movs	r1, #2
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fb81 	bl	8001d2c <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000630:	f000 f8d6 	bl	80007e0 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3750      	adds	r7, #80	; 0x50
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 8000642:	4a20      	ldr	r2, [pc, #128]	; (80006c4 <MX_FDCAN1_Init+0x88>)
 8000644:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000646:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 8000648:	2200      	movs	r2, #0
 800064a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000652:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 800065a:	2200      	movs	r2, #0
 800065c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 8000660:	2200      	movs	r2, #0
 8000662:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 8000666:	2200      	movs	r2, #0
 8000668:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 800066c:	2205      	movs	r2, #5
 800066e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 8000672:	2210      	movs	r2, #16
 8000674:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 8000678:	220d      	movs	r2, #13
 800067a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 800067e:	2202      	movs	r2, #2
 8000680:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 8000684:	2201      	movs	r2, #1
 8000686:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 800068a:	2204      	movs	r2, #4
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 8000690:	2205      	movs	r2, #5
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 8000696:	2204      	movs	r2, #4
 8000698:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 800069c:	2201      	movs	r2, #1
 800069e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_FDCAN1_Init+0x84>)
 80006ae:	f000 fb4f 	bl	8000d50 <HAL_FDCAN_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80006b8:	f000 f892 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000028 	.word	0x20000028
 80006c4:	40006400 	.word	0x40006400

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <MX_USART2_UART_Init+0x90>)
 80006ce:	4a23      	ldr	r2, [pc, #140]	; (800075c <MX_USART2_UART_Init+0x94>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_USART2_UART_Init+0x90>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_USART2_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_USART2_UART_Init+0x90>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_USART2_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_USART2_UART_Init+0x90>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_USART2_UART_Init+0x90>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_USART2_UART_Init+0x90>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <MX_USART2_UART_Init+0x90>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART2_UART_Init+0x90>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_USART2_UART_Init+0x90>)
 800070c:	2200      	movs	r2, #0
 800070e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000710:	4811      	ldr	r0, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x90>)
 8000712:	f001 ff17 	bl	8002544 <HAL_UART_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800071c:	f000 f860 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000720:	2100      	movs	r1, #0
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_USART2_UART_Init+0x90>)
 8000724:	f002 fc18 	bl	8002f58 <HAL_UARTEx_SetTxFifoThreshold>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800072e:	f000 f857 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000732:	2100      	movs	r1, #0
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x90>)
 8000736:	f002 fc4d 	bl	8002fd4 <HAL_UARTEx_SetRxFifoThreshold>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000740:	f000 f84e 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_USART2_UART_Init+0x90>)
 8000746:	f002 fbce 	bl	8002ee6 <HAL_UARTEx_DisableFifoMode>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000750:	f000 f846 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	2000008c 	.word	0x2000008c
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <MX_GPIO_Init+0x78>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a11      	ldr	r2, [pc, #68]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_GPIO_Init+0x78>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <MX_GPIO_Init+0x7c>)
 80007ae:	f000 fee9 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_GPIO_Init+0x7c>)
 80007cc:	f000 fd58 	bl	8001280 <HAL_GPIO_Init>

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000
 80007dc:	48000400 	.word	0x48000400

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x44>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_MspInit+0x44>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6613      	str	r3, [r2, #96]	; 0x60
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_MspInit+0x44>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x44>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x44>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6593      	str	r3, [r2, #88]	; 0x58
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x44>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b09a      	sub	sp, #104	; 0x68
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	2244      	movs	r2, #68	; 0x44
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f002 fc6d 	bl	8003134 <memset>
  if(hfdcan->Instance==FDCAN1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a20      	ldr	r2, [pc, #128]	; (80008e0 <HAL_FDCAN_MspInit+0xac>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d139      	bne.n	80008d8 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000868:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800086a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800086e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	4618      	mov	r0, r3
 8000876:	f001 fc75 	bl	8002164 <HAL_RCCEx_PeriphCLKConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000880:	f7ff ffae 	bl	80007e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <HAL_FDCAN_MspInit+0xb0>)
 8000886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000888:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <HAL_FDCAN_MspInit+0xb0>)
 800088a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800088e:	6593      	str	r3, [r2, #88]	; 0x58
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_FDCAN_MspInit+0xb0>)
 8000892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_FDCAN_MspInit+0xb0>)
 800089e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a0:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <HAL_FDCAN_MspInit+0xb0>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_FDCAN_MspInit+0xb0>)
 80008aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008b8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80008c6:	2309      	movs	r3, #9
 80008c8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008ce:	4619      	mov	r1, r3
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d4:	f000 fcd4 	bl	8001280 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80008d8:	bf00      	nop
 80008da:	3768      	adds	r7, #104	; 0x68
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40006400 	.word	0x40006400
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09a      	sub	sp, #104	; 0x68
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	2244      	movs	r2, #68	; 0x44
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fc13 	bl	8003134 <memset>
  if(huart->Instance==USART2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <HAL_UART_MspInit+0xa8>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d136      	bne.n	8000986 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000918:	2302      	movs	r3, #2
 800091a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4618      	mov	r0, r3
 8000926:	f001 fc1d 	bl	8002164 <HAL_RCCEx_PeriphCLKConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000930:	f7ff ff56 	bl	80007e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <HAL_UART_MspInit+0xac>)
 8000936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000938:	4a16      	ldr	r2, [pc, #88]	; (8000994 <HAL_UART_MspInit+0xac>)
 800093a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093e:	6593      	str	r3, [r2, #88]	; 0x58
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <HAL_UART_MspInit+0xac>)
 8000942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_UART_MspInit+0xac>)
 800094e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000950:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_UART_MspInit+0xac>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_UART_MspInit+0xac>)
 800095a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000964:	230c      	movs	r3, #12
 8000966:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000974:	2307      	movs	r3, #7
 8000976:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800097c:	4619      	mov	r1, r3
 800097e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000982:	f000 fc7d 	bl	8001280 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3768      	adds	r7, #104	; 0x68
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40004400 	.word	0x40004400
 8000994:	40021000 	.word	0x40021000

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 f890 	bl	8000b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <SystemInit+0x20>)
 80009f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <SystemInit+0x20>)
 80009f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490e      	ldr	r1, [pc, #56]	; (8000a50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0b      	ldr	r4, [pc, #44]	; (8000a5c <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a3a:	f7ff ffd7 	bl	80009ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f002 fb55 	bl	80030ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a42:	f7ff fd6b 	bl	800051c <main>

08000a46 <LoopForever>:

LoopForever:
    b LoopForever
 8000a46:	e7fe      	b.n	8000a46 <LoopForever>
  ldr   r0, =_estack
 8000a48:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a54:	080031c4 	.word	0x080031c4
  ldr r2, =_sbss
 8000a58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a5c:	20000120 	.word	0x20000120

08000a60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC1_2_IRQHandler>

08000a62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f93d 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f80e 	bl	8000a94 <HAL_InitTick>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d002      	beq.n	8000a84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	71fb      	strb	r3, [r7, #7]
 8000a82:	e001      	b.n	8000a88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a84:	f7ff feb2 	bl	80007ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a88:	79fb      	ldrb	r3, [r7, #7]

}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <HAL_InitTick+0x68>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d022      	beq.n	8000aee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_InitTick+0x6c>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <HAL_InitTick+0x68>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ab4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 f93a 	bl	8000d36 <HAL_SYSTICK_Config>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d10f      	bne.n	8000ae8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b0f      	cmp	r3, #15
 8000acc:	d809      	bhi.n	8000ae2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	6879      	ldr	r1, [r7, #4]
 8000ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad6:	f000 f914 	bl	8000d02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_InitTick+0x70>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	e007      	b.n	8000af2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	73fb      	strb	r3, [r7, #15]
 8000ae6:	e004      	b.n	8000af2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	73fb      	strb	r3, [r7, #15]
 8000aec:	e001      	b.n	8000af2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000004 	.word	0x20000004

08000b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_IncTick+0x1c>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_IncTick+0x20>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a03      	ldr	r2, [pc, #12]	; (8000b24 <HAL_IncTick+0x1c>)
 8000b18:	6013      	str	r3, [r2, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	2000011c 	.word	0x2000011c
 8000b28:	20000008 	.word	0x20000008

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	2000011c 	.word	0x2000011c

08000b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b4c:	f7ff ffee 	bl	8000b2c <HAL_GetTick>
 8000b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5c:	d004      	beq.n	8000b68 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_Delay+0x40>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	4413      	add	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b68:	bf00      	nop
 8000b6a:	f7ff ffdf 	bl	8000b2c <HAL_GetTick>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d8f7      	bhi.n	8000b6a <HAL_Delay+0x26>
  {
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000008 	.word	0x20000008

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb8:	d301      	bcc.n	8000cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00f      	b.n	8000cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <SysTick_Config+0x40>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f7ff ff8e 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff47 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff5e 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff90 	bl	8000c40 <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5f 	bl	8000bec <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffb2 	bl	8000ca8 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e147      	b.n	8000ff2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d106      	bne.n	8000d7c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fd5c 	bl	8000834 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	699a      	ldr	r2, [r3, #24]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0210 	bic.w	r2, r2, #16
 8000d8a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d8c:	f7ff fece 	bl	8000b2c <HAL_GetTick>
 8000d90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d92:	e012      	b.n	8000dba <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000d94:	f7ff feca 	bl	8000b2c <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2b0a      	cmp	r3, #10
 8000da0:	d90b      	bls.n	8000dba <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da6:	f043 0201 	orr.w	r2, r3, #1
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2203      	movs	r2, #3
 8000db2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e11b      	b.n	8000ff2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d0e5      	beq.n	8000d94 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	699a      	ldr	r2, [r3, #24]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0201 	orr.w	r2, r2, #1
 8000dd6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dd8:	f7ff fea8 	bl	8000b2c <HAL_GetTick>
 8000ddc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000dde:	e012      	b.n	8000e06 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000de0:	f7ff fea4 	bl	8000b2c <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b0a      	cmp	r3, #10
 8000dec:	d90b      	bls.n	8000e06 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df2:	f043 0201 	orr.w	r2, r3, #1
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e0f5      	b.n	8000ff2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0e5      	beq.n	8000de0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	699a      	ldr	r2, [r3, #24]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f042 0202 	orr.w	r2, r2, #2
 8000e22:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a74      	ldr	r2, [pc, #464]	; (8000ffc <HAL_FDCAN_Init+0x2ac>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d103      	bne.n	8000e36 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000e2e:	4a74      	ldr	r2, [pc, #464]	; (8001000 <HAL_FDCAN_Init+0x2b0>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7c1b      	ldrb	r3, [r3, #16]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d108      	bne.n	8000e50 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	699a      	ldr	r2, [r3, #24]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e4c:	619a      	str	r2, [r3, #24]
 8000e4e:	e007      	b.n	8000e60 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	699a      	ldr	r2, [r3, #24]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e5e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	7c5b      	ldrb	r3, [r3, #17]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d108      	bne.n	8000e7a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	699a      	ldr	r2, [r3, #24]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e76:	619a      	str	r2, [r3, #24]
 8000e78:	e007      	b.n	8000e8a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	699a      	ldr	r2, [r3, #24]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e88:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7c9b      	ldrb	r3, [r3, #18]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d108      	bne.n	8000ea4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	699a      	ldr	r2, [r3, #24]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ea0:	619a      	str	r2, [r3, #24]
 8000ea2:	e007      	b.n	8000eb4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	699a      	ldr	r2, [r3, #24]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000eb2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	699a      	ldr	r2, [r3, #24]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000ed8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 0210 	bic.w	r2, r2, #16
 8000ee8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d108      	bne.n	8000f04 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	699a      	ldr	r2, [r3, #24]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f042 0204 	orr.w	r2, r2, #4
 8000f00:	619a      	str	r2, [r3, #24]
 8000f02:	e02c      	b.n	8000f5e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d028      	beq.n	8000f5e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d01c      	beq.n	8000f4e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	699a      	ldr	r2, [r3, #24]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f22:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0210 	orr.w	r2, r2, #16
 8000f32:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d110      	bne.n	8000f5e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	699a      	ldr	r2, [r3, #24]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0220 	orr.w	r2, r2, #32
 8000f4a:	619a      	str	r2, [r3, #24]
 8000f4c:	e007      	b.n	8000f5e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	699a      	ldr	r2, [r3, #24]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0220 	orr.w	r2, r2, #32
 8000f5c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f6e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f76:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f86:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f88:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000f92:	d115      	bne.n	8000fc0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f98:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fa2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000fac:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000fbc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fbe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f880 	bl	80010dc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40006400 	.word	0x40006400
 8001000:	40006500 	.word	0x40006500

08001004 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b01      	cmp	r3, #1
 8001016:	d110      	bne.n	800103a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2202      	movs	r2, #2
 800101c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0201 	bic.w	r2, r2, #1
 800102e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e006      	b.n	8001048 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	f043 0204 	orr.w	r2, r3, #4
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
  }
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d12c      	bne.n	80010c6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d007      	beq.n	800108c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001080:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e023      	b.n	80010d4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001094:	0c1b      	lsrs	r3, r3, #16
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 f870 	bl	8001188 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	fa01 f202 	lsl.w	r2, r1, r2
 80010b4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80010b8:	2201      	movs	r2, #1
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	409a      	lsls	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e006      	b.n	80010d4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ca:	f043 0208 	orr.w	r2, r3, #8
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
  }
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80010e4:	4b27      	ldr	r3, [pc, #156]	; (8001184 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80010e6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010f6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fe:	041a      	lsls	r2, r3, #16
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800111c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001124:	061a      	lsls	r2, r3, #24
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	e005      	b.n	800116a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3304      	adds	r3, #4
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	429a      	cmp	r2, r3
 8001174:	d3f3      	bcc.n	800115e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001176:	bf00      	nop
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	4000a400 	.word	0x4000a400

08001188 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10a      	bne.n	80011b4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80011a6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	e00a      	b.n	80011ca <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80011bc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80011c2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80011c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80011c8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80011d4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80011da:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80011e0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	4613      	mov	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4413      	add	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	440b      	add	r3, r1
 80011fa:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	69fa      	ldr	r2, [r7, #28]
 8001200:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	3304      	adds	r3, #4
 8001206:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	3304      	adds	r3, #4
 8001212:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e020      	b.n	800125c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3303      	adds	r3, #3
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3302      	adds	r3, #2
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	440b      	add	r3, r1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001232:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	440b      	add	r3, r1
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001240:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	440a      	add	r2, r1
 8001248:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800124a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	3304      	adds	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3304      	adds	r3, #4
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0c1b      	lsrs	r3, r3, #16
 8001262:	4a06      	ldr	r2, [pc, #24]	; (800127c <FDCAN_CopyMessageToRAM+0xf4>)
 8001264:	5cd3      	ldrb	r3, [r2, r3]
 8001266:	461a      	mov	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	4293      	cmp	r3, r2
 800126c:	d3d5      	bcc.n	800121a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800126e:	bf00      	nop
 8001270:	bf00      	nop
 8001272:	3724      	adds	r7, #36	; 0x24
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	0800317c 	.word	0x0800317c

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800128e:	e15a      	b.n	8001546 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2101      	movs	r1, #1
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 814c 	beq.w	8001540 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d005      	beq.n	80012c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d130      	bne.n	8001322 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012f6:	2201      	movs	r2, #1
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	f003 0201 	and.w	r2, r3, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b03      	cmp	r3, #3
 800132c:	d017      	beq.n	800135e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d123      	bne.n	80013b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	08da      	lsrs	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3208      	adds	r2, #8
 8001372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	220f      	movs	r2, #15
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	08da      	lsrs	r2, r3, #3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3208      	adds	r2, #8
 80013ac:	6939      	ldr	r1, [r7, #16]
 80013ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0203 	and.w	r2, r3, #3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 80a6 	beq.w	8001540 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f4:	4b5b      	ldr	r3, [pc, #364]	; (8001564 <HAL_GPIO_Init+0x2e4>)
 80013f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f8:	4a5a      	ldr	r2, [pc, #360]	; (8001564 <HAL_GPIO_Init+0x2e4>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001400:	4b58      	ldr	r3, [pc, #352]	; (8001564 <HAL_GPIO_Init+0x2e4>)
 8001402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140c:	4a56      	ldr	r2, [pc, #344]	; (8001568 <HAL_GPIO_Init+0x2e8>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	220f      	movs	r2, #15
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001436:	d01f      	beq.n	8001478 <HAL_GPIO_Init+0x1f8>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a4c      	ldr	r2, [pc, #304]	; (800156c <HAL_GPIO_Init+0x2ec>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d019      	beq.n	8001474 <HAL_GPIO_Init+0x1f4>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a4b      	ldr	r2, [pc, #300]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d013      	beq.n	8001470 <HAL_GPIO_Init+0x1f0>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a4a      	ldr	r2, [pc, #296]	; (8001574 <HAL_GPIO_Init+0x2f4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d00d      	beq.n	800146c <HAL_GPIO_Init+0x1ec>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a49      	ldr	r2, [pc, #292]	; (8001578 <HAL_GPIO_Init+0x2f8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d007      	beq.n	8001468 <HAL_GPIO_Init+0x1e8>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a48      	ldr	r2, [pc, #288]	; (800157c <HAL_GPIO_Init+0x2fc>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d101      	bne.n	8001464 <HAL_GPIO_Init+0x1e4>
 8001460:	2305      	movs	r3, #5
 8001462:	e00a      	b.n	800147a <HAL_GPIO_Init+0x1fa>
 8001464:	2306      	movs	r3, #6
 8001466:	e008      	b.n	800147a <HAL_GPIO_Init+0x1fa>
 8001468:	2304      	movs	r3, #4
 800146a:	e006      	b.n	800147a <HAL_GPIO_Init+0x1fa>
 800146c:	2303      	movs	r3, #3
 800146e:	e004      	b.n	800147a <HAL_GPIO_Init+0x1fa>
 8001470:	2302      	movs	r3, #2
 8001472:	e002      	b.n	800147a <HAL_GPIO_Init+0x1fa>
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <HAL_GPIO_Init+0x1fa>
 8001478:	2300      	movs	r3, #0
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	f002 0203 	and.w	r2, r2, #3
 8001480:	0092      	lsls	r2, r2, #2
 8001482:	4093      	lsls	r3, r2
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800148a:	4937      	ldr	r1, [pc, #220]	; (8001568 <HAL_GPIO_Init+0x2e8>)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001498:	4b39      	ldr	r3, [pc, #228]	; (8001580 <HAL_GPIO_Init+0x300>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014bc:	4a30      	ldr	r2, [pc, #192]	; (8001580 <HAL_GPIO_Init+0x300>)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_GPIO_Init+0x300>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014e6:	4a26      	ldr	r2, [pc, #152]	; (8001580 <HAL_GPIO_Init+0x300>)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_GPIO_Init+0x300>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001510:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <HAL_GPIO_Init+0x300>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_GPIO_Init+0x300>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800153a:	4a11      	ldr	r2, [pc, #68]	; (8001580 <HAL_GPIO_Init+0x300>)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3301      	adds	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	f47f ae9d 	bne.w	8001290 <HAL_GPIO_Init+0x10>
  }
}
 8001556:	bf00      	nop
 8001558:	bf00      	nop
 800155a:	371c      	adds	r7, #28
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	48000400 	.word	0x48000400
 8001570:	48000800 	.word	0x48000800
 8001574:	48000c00 	.word	0x48000c00
 8001578:	48001000 	.word	0x48001000
 800157c:	48001400 	.word	0x48001400
 8001580:	40010400 	.word	0x40010400

08001584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d141      	bne.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015c2:	4b4b      	ldr	r3, [pc, #300]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ce:	d131      	bne.n	8001634 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015d0:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015d6:	4a46      	ldr	r2, [pc, #280]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e0:	4b43      	ldr	r3, [pc, #268]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015e8:	4a41      	ldr	r2, [pc, #260]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015f0:	4b40      	ldr	r3, [pc, #256]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2232      	movs	r2, #50	; 0x32
 80015f6:	fb02 f303 	mul.w	r3, r2, r3
 80015fa:	4a3f      	ldr	r2, [pc, #252]	; (80016f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001600:	0c9b      	lsrs	r3, r3, #18
 8001602:	3301      	adds	r3, #1
 8001604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001606:	e002      	b.n	800160e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3b01      	subs	r3, #1
 800160c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800160e:	4b38      	ldr	r3, [pc, #224]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161a:	d102      	bne.n	8001622 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f2      	bne.n	8001608 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001622:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800162e:	d158      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e057      	b.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001634:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800163a:	4a2d      	ldr	r2, [pc, #180]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001640:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001644:	e04d      	b.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800164c:	d141      	bne.n	80016d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800164e:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800165a:	d131      	bne.n	80016c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001662:	4a23      	ldr	r2, [pc, #140]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001668:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800166c:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001674:	4a1e      	ldr	r2, [pc, #120]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2232      	movs	r2, #50	; 0x32
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	0c9b      	lsrs	r3, r3, #18
 800168e:	3301      	adds	r3, #1
 8001690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001692:	e002      	b.n	800169a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3b01      	subs	r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a6:	d102      	bne.n	80016ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f2      	bne.n	8001694 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ba:	d112      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e011      	b.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016d0:	e007      	b.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	40007000 	.word	0x40007000
 80016f4:	20000000 	.word	0x20000000
 80016f8:	431bde83 	.word	0x431bde83

080016fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e306      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d075      	beq.n	8001806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800171a:	4b97      	ldr	r3, [pc, #604]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001724:	4b94      	ldr	r3, [pc, #592]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2b0c      	cmp	r3, #12
 8001732:	d102      	bne.n	800173a <HAL_RCC_OscConfig+0x3e>
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	2b03      	cmp	r3, #3
 8001738:	d002      	beq.n	8001740 <HAL_RCC_OscConfig+0x44>
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b08      	cmp	r3, #8
 800173e:	d10b      	bne.n	8001758 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	4b8d      	ldr	r3, [pc, #564]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d05b      	beq.n	8001804 <HAL_RCC_OscConfig+0x108>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d157      	bne.n	8001804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e2e1      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001760:	d106      	bne.n	8001770 <HAL_RCC_OscConfig+0x74>
 8001762:	4b85      	ldr	r3, [pc, #532]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a84      	ldr	r2, [pc, #528]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e01d      	b.n	80017ac <HAL_RCC_OscConfig+0xb0>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x98>
 800177a:	4b7f      	ldr	r3, [pc, #508]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a7e      	ldr	r2, [pc, #504]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b7c      	ldr	r3, [pc, #496]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7b      	ldr	r2, [pc, #492]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0xb0>
 8001794:	4b78      	ldr	r3, [pc, #480]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a77      	ldr	r2, [pc, #476]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 800179a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b75      	ldr	r3, [pc, #468]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a74      	ldr	r2, [pc, #464]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 80017a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d013      	beq.n	80017dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7ff f9ba 	bl	8000b2c <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff f9b6 	bl	8000b2c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e2a6      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ce:	4b6a      	ldr	r3, [pc, #424]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0xc0>
 80017da:	e014      	b.n	8001806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017dc:	f7ff f9a6 	bl	8000b2c <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff f9a2 	bl	8000b2c <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	; 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e292      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017f6:	4b60      	ldr	r3, [pc, #384]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0xe8>
 8001802:	e000      	b.n	8001806 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d075      	beq.n	80018fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001812:	4b59      	ldr	r3, [pc, #356]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800181c:	4b56      	ldr	r3, [pc, #344]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b0c      	cmp	r3, #12
 800182a:	d102      	bne.n	8001832 <HAL_RCC_OscConfig+0x136>
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d002      	beq.n	8001838 <HAL_RCC_OscConfig+0x13c>
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	2b04      	cmp	r3, #4
 8001836:	d11f      	bne.n	8001878 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001838:	4b4f      	ldr	r3, [pc, #316]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_OscConfig+0x154>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e265      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001850:	4b49      	ldr	r3, [pc, #292]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	061b      	lsls	r3, r3, #24
 800185e:	4946      	ldr	r1, [pc, #280]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001864:	4b45      	ldr	r3, [pc, #276]	; (800197c <HAL_RCC_OscConfig+0x280>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff f913 	bl	8000a94 <HAL_InitTick>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d043      	beq.n	80018fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e251      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d023      	beq.n	80018c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001880:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a3c      	ldr	r2, [pc, #240]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff f94e 	bl	8000b2c <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001894:	f7ff f94a 	bl	8000b2c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e23a      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a6:	4b34      	ldr	r3, [pc, #208]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b2:	4b31      	ldr	r3, [pc, #196]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	061b      	lsls	r3, r3, #24
 80018c0:	492d      	ldr	r1, [pc, #180]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	604b      	str	r3, [r1, #4]
 80018c6:	e01a      	b.n	80018fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c8:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a2a      	ldr	r2, [pc, #168]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 80018ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff f92a 	bl	8000b2c <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018dc:	f7ff f926 	bl	8000b2c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e216      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ee:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x1e0>
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d041      	beq.n	800198e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d01c      	beq.n	800194c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001918:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001922:	f7ff f903 	bl	8000b2c <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192a:	f7ff f8ff 	bl	8000b2c <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e1ef      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 800193e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0ef      	beq.n	800192a <HAL_RCC_OscConfig+0x22e>
 800194a:	e020      	b.n	800198e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 800194e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195c:	f7ff f8e6 	bl	8000b2c <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001962:	e00d      	b.n	8001980 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001964:	f7ff f8e2 	bl	8000b2c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d906      	bls.n	8001980 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e1d2      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001980:	4b8c      	ldr	r3, [pc, #560]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1ea      	bne.n	8001964 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 80a6 	beq.w	8001ae8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019a0:	4b84      	ldr	r3, [pc, #528]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 80019a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_OscConfig+0x2b4>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x2b6>
 80019b0:	2300      	movs	r3, #0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00d      	beq.n	80019d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b7f      	ldr	r3, [pc, #508]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	4a7e      	ldr	r2, [pc, #504]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	6593      	str	r3, [r2, #88]	; 0x58
 80019c2:	4b7c      	ldr	r3, [pc, #496]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019ce:	2301      	movs	r3, #1
 80019d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d2:	4b79      	ldr	r3, [pc, #484]	; (8001bb8 <HAL_RCC_OscConfig+0x4bc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d118      	bne.n	8001a10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019de:	4b76      	ldr	r3, [pc, #472]	; (8001bb8 <HAL_RCC_OscConfig+0x4bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a75      	ldr	r2, [pc, #468]	; (8001bb8 <HAL_RCC_OscConfig+0x4bc>)
 80019e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ea:	f7ff f89f 	bl	8000b2c <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f2:	f7ff f89b 	bl	8000b2c <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e18b      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a04:	4b6c      	ldr	r3, [pc, #432]	; (8001bb8 <HAL_RCC_OscConfig+0x4bc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d108      	bne.n	8001a2a <HAL_RCC_OscConfig+0x32e>
 8001a18:	4b66      	ldr	r3, [pc, #408]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	4a65      	ldr	r2, [pc, #404]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a28:	e024      	b.n	8001a74 <HAL_RCC_OscConfig+0x378>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	d110      	bne.n	8001a54 <HAL_RCC_OscConfig+0x358>
 8001a32:	4b60      	ldr	r3, [pc, #384]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a38:	4a5e      	ldr	r2, [pc, #376]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a42:	4b5c      	ldr	r3, [pc, #368]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a48:	4a5a      	ldr	r2, [pc, #360]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a52:	e00f      	b.n	8001a74 <HAL_RCC_OscConfig+0x378>
 8001a54:	4b57      	ldr	r3, [pc, #348]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5a:	4a56      	ldr	r2, [pc, #344]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a64:	4b53      	ldr	r3, [pc, #332]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6a:	4a52      	ldr	r2, [pc, #328]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001a6c:	f023 0304 	bic.w	r3, r3, #4
 8001a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d016      	beq.n	8001aaa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7c:	f7ff f856 	bl	8000b2c <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7ff f852 	bl	8000b2c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e140      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a9a:	4b46      	ldr	r3, [pc, #280]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0ed      	beq.n	8001a84 <HAL_RCC_OscConfig+0x388>
 8001aa8:	e015      	b.n	8001ad6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aaa:	f7ff f83f 	bl	8000b2c <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f7ff f83b 	bl	8000b2c <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e129      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ac8:	4b3a      	ldr	r3, [pc, #232]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1ed      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ad6:	7ffb      	ldrb	r3, [r7, #31]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d105      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001adc:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	4a34      	ldr	r2, [pc, #208]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0320 	and.w	r3, r3, #32
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d03c      	beq.n	8001b6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d01c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001afc:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b02:	4a2c      	ldr	r2, [pc, #176]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7ff f80e 	bl	8000b2c <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b14:	f7ff f80a 	bl	8000b2c <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e0fa      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b26:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0ef      	beq.n	8001b14 <HAL_RCC_OscConfig+0x418>
 8001b34:	e01b      	b.n	8001b6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b3c:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b46:	f7fe fff1 	bl	8000b2c <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b4e:	f7fe ffed 	bl	8000b2c <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e0dd      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1ef      	bne.n	8001b4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80d1 	beq.w	8001d1a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	f000 808b 	beq.w	8001c9c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d15e      	bne.n	8001c4c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <HAL_RCC_OscConfig+0x4b8>)
 8001b94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7fe ffc7 	bl	8000b2c <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba0:	e00c      	b.n	8001bbc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7fe ffc3 	bl	8000b2c <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d905      	bls.n	8001bbc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e0b3      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbc:	4b59      	ldr	r3, [pc, #356]	; (8001d24 <HAL_RCC_OscConfig+0x628>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1ec      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc8:	4b56      	ldr	r3, [pc, #344]	; (8001d24 <HAL_RCC_OscConfig+0x628>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	4b56      	ldr	r3, [pc, #344]	; (8001d28 <HAL_RCC_OscConfig+0x62c>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6a11      	ldr	r1, [r2, #32]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bd8:	3a01      	subs	r2, #1
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	4311      	orrs	r1, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001be2:	0212      	lsls	r2, r2, #8
 8001be4:	4311      	orrs	r1, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bea:	0852      	lsrs	r2, r2, #1
 8001bec:	3a01      	subs	r2, #1
 8001bee:	0552      	lsls	r2, r2, #21
 8001bf0:	4311      	orrs	r1, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bf6:	0852      	lsrs	r2, r2, #1
 8001bf8:	3a01      	subs	r2, #1
 8001bfa:	0652      	lsls	r2, r2, #25
 8001bfc:	4311      	orrs	r1, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c02:	06d2      	lsls	r2, r2, #27
 8001c04:	430a      	orrs	r2, r1
 8001c06:	4947      	ldr	r1, [pc, #284]	; (8001d24 <HAL_RCC_OscConfig+0x628>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c0c:	4b45      	ldr	r3, [pc, #276]	; (8001d24 <HAL_RCC_OscConfig+0x628>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a44      	ldr	r2, [pc, #272]	; (8001d24 <HAL_RCC_OscConfig+0x628>)
 8001c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c16:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c18:	4b42      	ldr	r3, [pc, #264]	; (8001d24 <HAL_RCC_OscConfig+0x628>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4a41      	ldr	r2, [pc, #260]	; (8001d24 <HAL_RCC_OscConfig+0x628>)
 8001c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7fe ff82 	bl	8000b2c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7fe ff7e 	bl	8000b2c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e06e      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3e:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <HAL_RCC_OscConfig+0x628>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x530>
 8001c4a:	e066      	b.n	8001d1a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4c:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <HAL_RCC_OscConfig+0x628>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a34      	ldr	r2, [pc, #208]	; (8001d24 <HAL_RCC_OscConfig+0x628>)
 8001c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c56:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c58:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <HAL_RCC_OscConfig+0x628>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4a31      	ldr	r2, [pc, #196]	; (8001d24 <HAL_RCC_OscConfig+0x628>)
 8001c5e:	f023 0303 	bic.w	r3, r3, #3
 8001c62:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c64:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <HAL_RCC_OscConfig+0x628>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4a2e      	ldr	r2, [pc, #184]	; (8001d24 <HAL_RCC_OscConfig+0x628>)
 8001c6a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7fe ff5a 	bl	8000b2c <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7fe ff56 	bl	8000b2c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e046      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8e:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <HAL_RCC_OscConfig+0x628>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x580>
 8001c9a:	e03e      	b.n	8001d1a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e039      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_RCC_OscConfig+0x628>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0203 	and.w	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d12c      	bne.n	8001d16 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d123      	bne.n	8001d16 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d11b      	bne.n	8001d16 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d113      	bne.n	8001d16 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d109      	bne.n	8001d16 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0c:	085b      	lsrs	r3, r3, #1
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3720      	adds	r7, #32
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	019f800c 	.word	0x019f800c

08001d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e11e      	b.n	8001f82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d44:	4b91      	ldr	r3, [pc, #580]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d910      	bls.n	8001d74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b8e      	ldr	r3, [pc, #568]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 020f 	bic.w	r2, r3, #15
 8001d5a:	498c      	ldr	r1, [pc, #560]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b8a      	ldr	r3, [pc, #552]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e106      	b.n	8001f82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d073      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d129      	bne.n	8001ddc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d88:	4b81      	ldr	r3, [pc, #516]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0f4      	b.n	8001f82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d98:	f000 f99e 	bl	80020d8 <RCC_GetSysClockFreqFromPLLSource>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4a7c      	ldr	r2, [pc, #496]	; (8001f94 <HAL_RCC_ClockConfig+0x268>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d93f      	bls.n	8001e26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001da6:	4b7a      	ldr	r3, [pc, #488]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d009      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d033      	beq.n	8001e26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d12f      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dc6:	4b72      	ldr	r3, [pc, #456]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dce:	4a70      	ldr	r2, [pc, #448]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	e024      	b.n	8001e26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d107      	bne.n	8001df4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de4:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0c6      	b.n	8001f82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df4:	4b66      	ldr	r3, [pc, #408]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0be      	b.n	8001f82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e04:	f000 f8ce 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4a61      	ldr	r2, [pc, #388]	; (8001f94 <HAL_RCC_ClockConfig+0x268>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d909      	bls.n	8001e26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e12:	4b5f      	ldr	r3, [pc, #380]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e1a:	4a5d      	ldr	r2, [pc, #372]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e26:	4b5a      	ldr	r3, [pc, #360]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f023 0203 	bic.w	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4957      	ldr	r1, [pc, #348]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e38:	f7fe fe78 	bl	8000b2c <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e40:	f7fe fe74 	bl	8000b2c <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e095      	b.n	8001f82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	4b4e      	ldr	r3, [pc, #312]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 020c 	and.w	r2, r3, #12
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d1eb      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d023      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e80:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4a42      	ldr	r2, [pc, #264]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001e86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d007      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e98:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ea0:	4a3b      	ldr	r2, [pc, #236]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001ea2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ea6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea8:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4936      	ldr	r1, [pc, #216]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	608b      	str	r3, [r1, #8]
 8001eba:	e008      	b.n	8001ece <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b80      	cmp	r3, #128	; 0x80
 8001ec0:	d105      	bne.n	8001ece <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ec2:	4b33      	ldr	r3, [pc, #204]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	4a32      	ldr	r2, [pc, #200]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001ec8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ecc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ece:	4b2f      	ldr	r3, [pc, #188]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d21d      	bcs.n	8001f18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 020f 	bic.w	r2, r3, #15
 8001ee4:	4929      	ldr	r1, [pc, #164]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001eec:	f7fe fe1e 	bl	8000b2c <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef4:	f7fe fe1a 	bl	8000b2c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e03b      	b.n	8001f82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d1ed      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f24:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4917      	ldr	r1, [pc, #92]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d009      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f42:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	490f      	ldr	r1, [pc, #60]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f56:	f000 f825 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	490c      	ldr	r1, [pc, #48]	; (8001f98 <HAL_RCC_ClockConfig+0x26c>)
 8001f68:	5ccb      	ldrb	r3, [r1, r3]
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <HAL_RCC_ClockConfig+0x270>)
 8001f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_RCC_ClockConfig+0x274>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fd8a 	bl	8000a94 <HAL_InitTick>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40022000 	.word	0x40022000
 8001f90:	40021000 	.word	0x40021000
 8001f94:	04c4b400 	.word	0x04c4b400
 8001f98:	08003164 	.word	0x08003164
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000004 	.word	0x20000004

08001fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001faa:	4b2c      	ldr	r3, [pc, #176]	; (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d102      	bne.n	8001fbc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	e047      	b.n	800204c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d102      	bne.n	8001fce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fc8:	4b26      	ldr	r3, [pc, #152]	; (8002064 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	e03e      	b.n	800204c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001fce:	4b23      	ldr	r3, [pc, #140]	; (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d136      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3301      	adds	r3, #1
 8001ff0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d10c      	bne.n	8002012 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ff8:	4a1a      	ldr	r2, [pc, #104]	; (8002064 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	4a16      	ldr	r2, [pc, #88]	; (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002002:	68d2      	ldr	r2, [r2, #12]
 8002004:	0a12      	lsrs	r2, r2, #8
 8002006:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800200a:	fb02 f303 	mul.w	r3, r2, r3
 800200e:	617b      	str	r3, [r7, #20]
      break;
 8002010:	e00c      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002012:	4a13      	ldr	r2, [pc, #76]	; (8002060 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	fbb2 f3f3 	udiv	r3, r2, r3
 800201a:	4a10      	ldr	r2, [pc, #64]	; (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 800201c:	68d2      	ldr	r2, [r2, #12]
 800201e:	0a12      	lsrs	r2, r2, #8
 8002020:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	617b      	str	r3, [r7, #20]
      break;
 800202a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	0e5b      	lsrs	r3, r3, #25
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	3301      	adds	r3, #1
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	fbb2 f3f3 	udiv	r3, r2, r3
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	e001      	b.n	800204c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800204c:	693b      	ldr	r3, [r7, #16]
}
 800204e:	4618      	mov	r0, r3
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	00f42400 	.word	0x00f42400
 8002064:	007a1200 	.word	0x007a1200

08002068 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_RCC_GetHCLKFreq+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000000 	.word	0x20000000

08002080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002084:	f7ff fff0 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 8002088:	4602      	mov	r2, r0
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4904      	ldr	r1, [pc, #16]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002096:	5ccb      	ldrb	r3, [r1, r3]
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08003174 	.word	0x08003174

080020ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020b0:	f7ff ffda 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	0adb      	lsrs	r3, r3, #11
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	4904      	ldr	r1, [pc, #16]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08003174 	.word	0x08003174

080020d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020de:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020e8:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3301      	adds	r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d10c      	bne.n	8002116 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020fc:	4a17      	ldr	r2, [pc, #92]	; (800215c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002106:	68d2      	ldr	r2, [r2, #12]
 8002108:	0a12      	lsrs	r2, r2, #8
 800210a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	617b      	str	r3, [r7, #20]
    break;
 8002114:	e00c      	b.n	8002130 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002120:	68d2      	ldr	r2, [r2, #12]
 8002122:	0a12      	lsrs	r2, r2, #8
 8002124:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002128:	fb02 f303 	mul.w	r3, r2, r3
 800212c:	617b      	str	r3, [r7, #20]
    break;
 800212e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0e5b      	lsrs	r3, r3, #25
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	3301      	adds	r3, #1
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800214a:	687b      	ldr	r3, [r7, #4]
}
 800214c:	4618      	mov	r0, r3
 800214e:	371c      	adds	r7, #28
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	40021000 	.word	0x40021000
 800215c:	007a1200 	.word	0x007a1200
 8002160:	00f42400 	.word	0x00f42400

08002164 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800216c:	2300      	movs	r3, #0
 800216e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002170:	2300      	movs	r3, #0
 8002172:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 8098 	beq.w	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002186:	4b43      	ldr	r3, [pc, #268]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10d      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	4b40      	ldr	r3, [pc, #256]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	4a3f      	ldr	r2, [pc, #252]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219c:	6593      	str	r3, [r2, #88]	; 0x58
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021aa:	2301      	movs	r3, #1
 80021ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021ae:	4b3a      	ldr	r3, [pc, #232]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a39      	ldr	r2, [pc, #228]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021ba:	f7fe fcb7 	bl	8000b2c <HAL_GetTick>
 80021be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021c0:	e009      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c2:	f7fe fcb3 	bl	8000b2c <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d902      	bls.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	74fb      	strb	r3, [r7, #19]
        break;
 80021d4:	e005      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021d6:	4b30      	ldr	r3, [pc, #192]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0ef      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80021e2:	7cfb      	ldrb	r3, [r7, #19]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d159      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021e8:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01e      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	429a      	cmp	r2, r3
 8002202:	d019      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002210:	4b20      	ldr	r3, [pc, #128]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002216:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002220:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002226:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002230:	4a18      	ldr	r2, [pc, #96]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d016      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7fe fc73 	bl	8000b2c <HAL_GetTick>
 8002246:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002248:	e00b      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224a:	f7fe fc6f 	bl	8000b2c <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f241 3288 	movw	r2, #5000	; 0x1388
 8002258:	4293      	cmp	r3, r2
 800225a:	d902      	bls.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	74fb      	strb	r3, [r7, #19]
            break;
 8002260:	e006      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0ec      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10b      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	4903      	ldr	r1, [pc, #12]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800228c:	e008      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800228e:	7cfb      	ldrb	r3, [r7, #19]
 8002290:	74bb      	strb	r3, [r7, #18]
 8002292:	e005      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002294:	40021000 	.word	0x40021000
 8002298:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022a0:	7c7b      	ldrb	r3, [r7, #17]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d105      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a6:	4ba6      	ldr	r3, [pc, #664]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022aa:	4aa5      	ldr	r2, [pc, #660]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022be:	4ba0      	ldr	r3, [pc, #640]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	f023 0203 	bic.w	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	499c      	ldr	r1, [pc, #624]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022e0:	4b97      	ldr	r3, [pc, #604]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f023 020c 	bic.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4994      	ldr	r1, [pc, #592]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002302:	4b8f      	ldr	r3, [pc, #572]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002308:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	498b      	ldr	r1, [pc, #556]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002324:	4b86      	ldr	r3, [pc, #536]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	4983      	ldr	r1, [pc, #524]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002346:	4b7e      	ldr	r3, [pc, #504]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	497a      	ldr	r1, [pc, #488]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002368:	4b75      	ldr	r3, [pc, #468]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	4972      	ldr	r1, [pc, #456]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800238a:	4b6d      	ldr	r3, [pc, #436]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002390:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	4969      	ldr	r1, [pc, #420]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ac:	4b64      	ldr	r3, [pc, #400]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4961      	ldr	r1, [pc, #388]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ce:	4b5c      	ldr	r3, [pc, #368]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	4958      	ldr	r1, [pc, #352]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d015      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023f0:	4b53      	ldr	r3, [pc, #332]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	4950      	ldr	r1, [pc, #320]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800240e:	d105      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002410:	4b4b      	ldr	r3, [pc, #300]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4a4a      	ldr	r2, [pc, #296]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800241a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002424:	2b00      	cmp	r3, #0
 8002426:	d015      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002428:	4b45      	ldr	r3, [pc, #276]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	4942      	ldr	r1, [pc, #264]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002446:	d105      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002448:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4a3c      	ldr	r2, [pc, #240]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002452:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d015      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002460:	4b37      	ldr	r3, [pc, #220]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4934      	ldr	r1, [pc, #208]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800247e:	d105      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002480:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4a2e      	ldr	r2, [pc, #184]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800248a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d015      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002498:	4b29      	ldr	r3, [pc, #164]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a6:	4926      	ldr	r1, [pc, #152]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024b6:	d105      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a20      	ldr	r2, [pc, #128]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d015      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	4918      	ldr	r1, [pc, #96]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ee:	d105      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024f0:	4b13      	ldr	r3, [pc, #76]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a12      	ldr	r2, [pc, #72]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d015      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002508:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	490a      	ldr	r1, [pc, #40]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002522:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002526:	d105      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002532:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002534:	7cbb      	ldrb	r3, [r7, #18]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000

08002544 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e042      	b.n	80025dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800255c:	2b00      	cmp	r3, #0
 800255e:	d106      	bne.n	800256e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7fe f9bd 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2224      	movs	r2, #36	; 0x24
 8002572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0201 	bic.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f82c 	bl	80025e4 <UART_SetConfig>
 800258c:	4603      	mov	r3, r0
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e022      	b.n	80025dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 faec 	bl	8002b7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fb73 	bl	8002cc0 <UART_CheckIdleState>
 80025da:	4603      	mov	r3, r0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e8:	b08c      	sub	sp, #48	; 0x30
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	431a      	orrs	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	431a      	orrs	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	4313      	orrs	r3, r2
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4bab      	ldr	r3, [pc, #684]	; (80028c0 <UART_SetConfig+0x2dc>)
 8002614:	4013      	ands	r3, r2
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800261c:	430b      	orrs	r3, r1
 800261e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4aa0      	ldr	r2, [pc, #640]	; (80028c4 <UART_SetConfig+0x2e0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d004      	beq.n	8002650 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800264c:	4313      	orrs	r3, r2
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800265a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002664:	430b      	orrs	r3, r1
 8002666:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	f023 010f 	bic.w	r1, r3, #15
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a91      	ldr	r2, [pc, #580]	; (80028c8 <UART_SetConfig+0x2e4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d125      	bne.n	80026d4 <UART_SetConfig+0xf0>
 8002688:	4b90      	ldr	r3, [pc, #576]	; (80028cc <UART_SetConfig+0x2e8>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b03      	cmp	r3, #3
 8002694:	d81a      	bhi.n	80026cc <UART_SetConfig+0xe8>
 8002696:	a201      	add	r2, pc, #4	; (adr r2, 800269c <UART_SetConfig+0xb8>)
 8002698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	080026bd 	.word	0x080026bd
 80026a4:	080026b5 	.word	0x080026b5
 80026a8:	080026c5 	.word	0x080026c5
 80026ac:	2301      	movs	r3, #1
 80026ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026b2:	e0d6      	b.n	8002862 <UART_SetConfig+0x27e>
 80026b4:	2302      	movs	r3, #2
 80026b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026ba:	e0d2      	b.n	8002862 <UART_SetConfig+0x27e>
 80026bc:	2304      	movs	r3, #4
 80026be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026c2:	e0ce      	b.n	8002862 <UART_SetConfig+0x27e>
 80026c4:	2308      	movs	r3, #8
 80026c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026ca:	e0ca      	b.n	8002862 <UART_SetConfig+0x27e>
 80026cc:	2310      	movs	r3, #16
 80026ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026d2:	e0c6      	b.n	8002862 <UART_SetConfig+0x27e>
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a7d      	ldr	r2, [pc, #500]	; (80028d0 <UART_SetConfig+0x2ec>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d138      	bne.n	8002750 <UART_SetConfig+0x16c>
 80026de:	4b7b      	ldr	r3, [pc, #492]	; (80028cc <UART_SetConfig+0x2e8>)
 80026e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b0c      	cmp	r3, #12
 80026ea:	d82d      	bhi.n	8002748 <UART_SetConfig+0x164>
 80026ec:	a201      	add	r2, pc, #4	; (adr r2, 80026f4 <UART_SetConfig+0x110>)
 80026ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f2:	bf00      	nop
 80026f4:	08002729 	.word	0x08002729
 80026f8:	08002749 	.word	0x08002749
 80026fc:	08002749 	.word	0x08002749
 8002700:	08002749 	.word	0x08002749
 8002704:	08002739 	.word	0x08002739
 8002708:	08002749 	.word	0x08002749
 800270c:	08002749 	.word	0x08002749
 8002710:	08002749 	.word	0x08002749
 8002714:	08002731 	.word	0x08002731
 8002718:	08002749 	.word	0x08002749
 800271c:	08002749 	.word	0x08002749
 8002720:	08002749 	.word	0x08002749
 8002724:	08002741 	.word	0x08002741
 8002728:	2300      	movs	r3, #0
 800272a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800272e:	e098      	b.n	8002862 <UART_SetConfig+0x27e>
 8002730:	2302      	movs	r3, #2
 8002732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002736:	e094      	b.n	8002862 <UART_SetConfig+0x27e>
 8002738:	2304      	movs	r3, #4
 800273a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800273e:	e090      	b.n	8002862 <UART_SetConfig+0x27e>
 8002740:	2308      	movs	r3, #8
 8002742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002746:	e08c      	b.n	8002862 <UART_SetConfig+0x27e>
 8002748:	2310      	movs	r3, #16
 800274a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800274e:	e088      	b.n	8002862 <UART_SetConfig+0x27e>
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a5f      	ldr	r2, [pc, #380]	; (80028d4 <UART_SetConfig+0x2f0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d125      	bne.n	80027a6 <UART_SetConfig+0x1c2>
 800275a:	4b5c      	ldr	r3, [pc, #368]	; (80028cc <UART_SetConfig+0x2e8>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002760:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002764:	2b30      	cmp	r3, #48	; 0x30
 8002766:	d016      	beq.n	8002796 <UART_SetConfig+0x1b2>
 8002768:	2b30      	cmp	r3, #48	; 0x30
 800276a:	d818      	bhi.n	800279e <UART_SetConfig+0x1ba>
 800276c:	2b20      	cmp	r3, #32
 800276e:	d00a      	beq.n	8002786 <UART_SetConfig+0x1a2>
 8002770:	2b20      	cmp	r3, #32
 8002772:	d814      	bhi.n	800279e <UART_SetConfig+0x1ba>
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <UART_SetConfig+0x19a>
 8002778:	2b10      	cmp	r3, #16
 800277a:	d008      	beq.n	800278e <UART_SetConfig+0x1aa>
 800277c:	e00f      	b.n	800279e <UART_SetConfig+0x1ba>
 800277e:	2300      	movs	r3, #0
 8002780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002784:	e06d      	b.n	8002862 <UART_SetConfig+0x27e>
 8002786:	2302      	movs	r3, #2
 8002788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800278c:	e069      	b.n	8002862 <UART_SetConfig+0x27e>
 800278e:	2304      	movs	r3, #4
 8002790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002794:	e065      	b.n	8002862 <UART_SetConfig+0x27e>
 8002796:	2308      	movs	r3, #8
 8002798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800279c:	e061      	b.n	8002862 <UART_SetConfig+0x27e>
 800279e:	2310      	movs	r3, #16
 80027a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027a4:	e05d      	b.n	8002862 <UART_SetConfig+0x27e>
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a4b      	ldr	r2, [pc, #300]	; (80028d8 <UART_SetConfig+0x2f4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d125      	bne.n	80027fc <UART_SetConfig+0x218>
 80027b0:	4b46      	ldr	r3, [pc, #280]	; (80028cc <UART_SetConfig+0x2e8>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80027ba:	2bc0      	cmp	r3, #192	; 0xc0
 80027bc:	d016      	beq.n	80027ec <UART_SetConfig+0x208>
 80027be:	2bc0      	cmp	r3, #192	; 0xc0
 80027c0:	d818      	bhi.n	80027f4 <UART_SetConfig+0x210>
 80027c2:	2b80      	cmp	r3, #128	; 0x80
 80027c4:	d00a      	beq.n	80027dc <UART_SetConfig+0x1f8>
 80027c6:	2b80      	cmp	r3, #128	; 0x80
 80027c8:	d814      	bhi.n	80027f4 <UART_SetConfig+0x210>
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <UART_SetConfig+0x1f0>
 80027ce:	2b40      	cmp	r3, #64	; 0x40
 80027d0:	d008      	beq.n	80027e4 <UART_SetConfig+0x200>
 80027d2:	e00f      	b.n	80027f4 <UART_SetConfig+0x210>
 80027d4:	2300      	movs	r3, #0
 80027d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027da:	e042      	b.n	8002862 <UART_SetConfig+0x27e>
 80027dc:	2302      	movs	r3, #2
 80027de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027e2:	e03e      	b.n	8002862 <UART_SetConfig+0x27e>
 80027e4:	2304      	movs	r3, #4
 80027e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027ea:	e03a      	b.n	8002862 <UART_SetConfig+0x27e>
 80027ec:	2308      	movs	r3, #8
 80027ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027f2:	e036      	b.n	8002862 <UART_SetConfig+0x27e>
 80027f4:	2310      	movs	r3, #16
 80027f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027fa:	e032      	b.n	8002862 <UART_SetConfig+0x27e>
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a30      	ldr	r2, [pc, #192]	; (80028c4 <UART_SetConfig+0x2e0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d12a      	bne.n	800285c <UART_SetConfig+0x278>
 8002806:	4b31      	ldr	r3, [pc, #196]	; (80028cc <UART_SetConfig+0x2e8>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002810:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002814:	d01a      	beq.n	800284c <UART_SetConfig+0x268>
 8002816:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800281a:	d81b      	bhi.n	8002854 <UART_SetConfig+0x270>
 800281c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002820:	d00c      	beq.n	800283c <UART_SetConfig+0x258>
 8002822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002826:	d815      	bhi.n	8002854 <UART_SetConfig+0x270>
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <UART_SetConfig+0x250>
 800282c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002830:	d008      	beq.n	8002844 <UART_SetConfig+0x260>
 8002832:	e00f      	b.n	8002854 <UART_SetConfig+0x270>
 8002834:	2300      	movs	r3, #0
 8002836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800283a:	e012      	b.n	8002862 <UART_SetConfig+0x27e>
 800283c:	2302      	movs	r3, #2
 800283e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002842:	e00e      	b.n	8002862 <UART_SetConfig+0x27e>
 8002844:	2304      	movs	r3, #4
 8002846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800284a:	e00a      	b.n	8002862 <UART_SetConfig+0x27e>
 800284c:	2308      	movs	r3, #8
 800284e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002852:	e006      	b.n	8002862 <UART_SetConfig+0x27e>
 8002854:	2310      	movs	r3, #16
 8002856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800285a:	e002      	b.n	8002862 <UART_SetConfig+0x27e>
 800285c:	2310      	movs	r3, #16
 800285e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a17      	ldr	r2, [pc, #92]	; (80028c4 <UART_SetConfig+0x2e0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	f040 80a8 	bne.w	80029be <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800286e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002872:	2b08      	cmp	r3, #8
 8002874:	d834      	bhi.n	80028e0 <UART_SetConfig+0x2fc>
 8002876:	a201      	add	r2, pc, #4	; (adr r2, 800287c <UART_SetConfig+0x298>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	080028a1 	.word	0x080028a1
 8002880:	080028e1 	.word	0x080028e1
 8002884:	080028a9 	.word	0x080028a9
 8002888:	080028e1 	.word	0x080028e1
 800288c:	080028af 	.word	0x080028af
 8002890:	080028e1 	.word	0x080028e1
 8002894:	080028e1 	.word	0x080028e1
 8002898:	080028e1 	.word	0x080028e1
 800289c:	080028b7 	.word	0x080028b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028a0:	f7ff fbee 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 80028a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80028a6:	e021      	b.n	80028ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <UART_SetConfig+0x2f8>)
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80028ac:	e01e      	b.n	80028ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028ae:	f7ff fb79 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 80028b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80028b4:	e01a      	b.n	80028ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80028bc:	e016      	b.n	80028ec <UART_SetConfig+0x308>
 80028be:	bf00      	nop
 80028c0:	cfff69f3 	.word	0xcfff69f3
 80028c4:	40008000 	.word	0x40008000
 80028c8:	40013800 	.word	0x40013800
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40004400 	.word	0x40004400
 80028d4:	40004800 	.word	0x40004800
 80028d8:	40004c00 	.word	0x40004c00
 80028dc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80028ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 812a 	beq.w	8002b48 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	4a9e      	ldr	r2, [pc, #632]	; (8002b74 <UART_SetConfig+0x590>)
 80028fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028fe:	461a      	mov	r2, r3
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	fbb3 f3f2 	udiv	r3, r3, r2
 8002906:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	429a      	cmp	r2, r3
 8002916:	d305      	bcc.n	8002924 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	429a      	cmp	r2, r3
 8002922:	d903      	bls.n	800292c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800292a:	e10d      	b.n	8002b48 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	2200      	movs	r2, #0
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	60fa      	str	r2, [r7, #12]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	4a8e      	ldr	r2, [pc, #568]	; (8002b74 <UART_SetConfig+0x590>)
 800293a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800293e:	b29b      	uxth	r3, r3
 8002940:	2200      	movs	r2, #0
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800294a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800294e:	f7fd fc63 	bl	8000218 <__aeabi_uldivmod>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	020b      	lsls	r3, r1, #8
 8002964:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002968:	0202      	lsls	r2, r0, #8
 800296a:	6979      	ldr	r1, [r7, #20]
 800296c:	6849      	ldr	r1, [r1, #4]
 800296e:	0849      	lsrs	r1, r1, #1
 8002970:	2000      	movs	r0, #0
 8002972:	460c      	mov	r4, r1
 8002974:	4605      	mov	r5, r0
 8002976:	eb12 0804 	adds.w	r8, r2, r4
 800297a:	eb43 0905 	adc.w	r9, r3, r5
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	469a      	mov	sl, r3
 8002986:	4693      	mov	fp, r2
 8002988:	4652      	mov	r2, sl
 800298a:	465b      	mov	r3, fp
 800298c:	4640      	mov	r0, r8
 800298e:	4649      	mov	r1, r9
 8002990:	f7fd fc42 	bl	8000218 <__aeabi_uldivmod>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4613      	mov	r3, r2
 800299a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029a2:	d308      	bcc.n	80029b6 <UART_SetConfig+0x3d2>
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029aa:	d204      	bcs.n	80029b6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6a3a      	ldr	r2, [r7, #32]
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	e0c8      	b.n	8002b48 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80029bc:	e0c4      	b.n	8002b48 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c6:	d167      	bne.n	8002a98 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80029c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d828      	bhi.n	8002a22 <UART_SetConfig+0x43e>
 80029d0:	a201      	add	r2, pc, #4	; (adr r2, 80029d8 <UART_SetConfig+0x3f4>)
 80029d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d6:	bf00      	nop
 80029d8:	080029fd 	.word	0x080029fd
 80029dc:	08002a05 	.word	0x08002a05
 80029e0:	08002a0d 	.word	0x08002a0d
 80029e4:	08002a23 	.word	0x08002a23
 80029e8:	08002a13 	.word	0x08002a13
 80029ec:	08002a23 	.word	0x08002a23
 80029f0:	08002a23 	.word	0x08002a23
 80029f4:	08002a23 	.word	0x08002a23
 80029f8:	08002a1b 	.word	0x08002a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029fc:	f7ff fb40 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8002a00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a02:	e014      	b.n	8002a2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a04:	f7ff fb52 	bl	80020ac <HAL_RCC_GetPCLK2Freq>
 8002a08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a0a:	e010      	b.n	8002a2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a0c:	4b5a      	ldr	r3, [pc, #360]	; (8002b78 <UART_SetConfig+0x594>)
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a10:	e00d      	b.n	8002a2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a12:	f7ff fac7 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 8002a16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a18:	e009      	b.n	8002a2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a20:	e005      	b.n	8002a2e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002a2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8089 	beq.w	8002b48 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	4a4e      	ldr	r2, [pc, #312]	; (8002b74 <UART_SetConfig+0x590>)
 8002a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a40:	461a      	mov	r2, r3
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a48:	005a      	lsls	r2, r3, #1
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	441a      	add	r2, r3
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	d916      	bls.n	8002a90 <UART_SetConfig+0x4ac>
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a68:	d212      	bcs.n	8002a90 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f023 030f 	bic.w	r3, r3, #15
 8002a72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	085b      	lsrs	r3, r3, #1
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	8bfb      	ldrh	r3, [r7, #30]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	8bfa      	ldrh	r2, [r7, #30]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	e05b      	b.n	8002b48 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002a96:	e057      	b.n	8002b48 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d828      	bhi.n	8002af2 <UART_SetConfig+0x50e>
 8002aa0:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <UART_SetConfig+0x4c4>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002acd 	.word	0x08002acd
 8002aac:	08002ad5 	.word	0x08002ad5
 8002ab0:	08002add 	.word	0x08002add
 8002ab4:	08002af3 	.word	0x08002af3
 8002ab8:	08002ae3 	.word	0x08002ae3
 8002abc:	08002af3 	.word	0x08002af3
 8002ac0:	08002af3 	.word	0x08002af3
 8002ac4:	08002af3 	.word	0x08002af3
 8002ac8:	08002aeb 	.word	0x08002aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002acc:	f7ff fad8 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8002ad0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ad2:	e014      	b.n	8002afe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ad4:	f7ff faea 	bl	80020ac <HAL_RCC_GetPCLK2Freq>
 8002ad8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ada:	e010      	b.n	8002afe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002adc:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <UART_SetConfig+0x594>)
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ae0:	e00d      	b.n	8002afe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ae2:	f7ff fa5f 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 8002ae6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ae8:	e009      	b.n	8002afe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002af0:	e005      	b.n	8002afe <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002afc:	bf00      	nop
    }

    if (pclk != 0U)
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d021      	beq.n	8002b48 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	4a1a      	ldr	r2, [pc, #104]	; (8002b74 <UART_SetConfig+0x590>)
 8002b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	441a      	add	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	d909      	bls.n	8002b42 <UART_SetConfig+0x55e>
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b34:	d205      	bcs.n	8002b42 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60da      	str	r2, [r3, #12]
 8002b40:	e002      	b.n	8002b48 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2200      	movs	r2, #0
 8002b62:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002b64:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3730      	adds	r7, #48	; 0x30
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b72:	bf00      	nop
 8002b74:	0800318c 	.word	0x0800318c
 8002b78:	00f42400 	.word	0x00f42400

08002b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01a      	beq.n	8002c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c7a:	d10a      	bne.n	8002c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	605a      	str	r2, [r3, #4]
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cd0:	f7fd ff2c 	bl	8000b2c <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d10e      	bne.n	8002d02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f82f 	bl	8002d56 <UART_WaitOnFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e025      	b.n	8002d4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d10e      	bne.n	8002d2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f819 	bl	8002d56 <UART_WaitOnFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e00f      	b.n	8002d4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b09c      	sub	sp, #112	; 0x70
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	4613      	mov	r3, r2
 8002d64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d66:	e0a9      	b.n	8002ebc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6e:	f000 80a5 	beq.w	8002ebc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d72:	f7fd fedb 	bl	8000b2c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d302      	bcc.n	8002d88 <UART_WaitOnFlagUntilTimeout+0x32>
 8002d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d140      	bne.n	8002e0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d90:	e853 3f00 	ldrex	r3, [r3]
 8002d94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d9c:	667b      	str	r3, [r7, #100]	; 0x64
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002da6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002da8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002daa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002dac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002dae:	e841 2300 	strex	r3, r2, [r1]
 8002db2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1e6      	bne.n	8002d88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc4:	e853 3f00 	ldrex	r3, [r3]
 8002dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	663b      	str	r3, [r7, #96]	; 0x60
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dda:	64ba      	str	r2, [r7, #72]	; 0x48
 8002ddc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002de2:	e841 2300 	strex	r3, r2, [r1]
 8002de6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e5      	bne.n	8002dba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e069      	b.n	8002ede <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d051      	beq.n	8002ebc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e26:	d149      	bne.n	8002ebc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	e853 3f00 	ldrex	r3, [r3]
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e50:	637b      	str	r3, [r7, #52]	; 0x34
 8002e52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e58:	e841 2300 	strex	r3, r2, [r1]
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e6      	bne.n	8002e32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3308      	adds	r3, #8
 8002e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	e853 3f00 	ldrex	r3, [r3]
 8002e72:	613b      	str	r3, [r7, #16]
   return(result);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3308      	adds	r3, #8
 8002e82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e84:	623a      	str	r2, [r7, #32]
 8002e86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e88:	69f9      	ldr	r1, [r7, #28]
 8002e8a:	6a3a      	ldr	r2, [r7, #32]
 8002e8c:	e841 2300 	strex	r3, r2, [r1]
 8002e90:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e5      	bne.n	8002e64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e010      	b.n	8002ede <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	f43f af46 	beq.w	8002d68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3770      	adds	r7, #112	; 0x70
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b085      	sub	sp, #20
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_UARTEx_DisableFifoMode+0x16>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e027      	b.n	8002f4c <HAL_UARTEx_DisableFifoMode+0x66>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	; 0x24
 8002f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002f2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e02d      	b.n	8002fcc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2224      	movs	r2, #36	; 0x24
 8002f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0201 	bic.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f84f 	bl	8003050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e02d      	b.n	8003048 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2224      	movs	r2, #36	; 0x24
 8002ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f811 	bl	8003050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800305c:	2b00      	cmp	r3, #0
 800305e:	d108      	bne.n	8003072 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003070:	e031      	b.n	80030d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003072:	2308      	movs	r3, #8
 8003074:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003076:	2308      	movs	r3, #8
 8003078:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	0e5b      	lsrs	r3, r3, #25
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	0f5b      	lsrs	r3, r3, #29
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800309a:	7bbb      	ldrb	r3, [r7, #14]
 800309c:	7b3a      	ldrb	r2, [r7, #12]
 800309e:	4911      	ldr	r1, [pc, #68]	; (80030e4 <UARTEx_SetNbDataToProcess+0x94>)
 80030a0:	5c8a      	ldrb	r2, [r1, r2]
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80030a6:	7b3a      	ldrb	r2, [r7, #12]
 80030a8:	490f      	ldr	r1, [pc, #60]	; (80030e8 <UARTEx_SetNbDataToProcess+0x98>)
 80030aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80030ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	7b7a      	ldrb	r2, [r7, #13]
 80030bc:	4909      	ldr	r1, [pc, #36]	; (80030e4 <UARTEx_SetNbDataToProcess+0x94>)
 80030be:	5c8a      	ldrb	r2, [r1, r2]
 80030c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80030c4:	7b7a      	ldrb	r2, [r7, #13]
 80030c6:	4908      	ldr	r1, [pc, #32]	; (80030e8 <UARTEx_SetNbDataToProcess+0x98>)
 80030c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80030ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	080031a4 	.word	0x080031a4
 80030e8:	080031ac 	.word	0x080031ac

080030ec <__libc_init_array>:
 80030ec:	b570      	push	{r4, r5, r6, lr}
 80030ee:	4d0d      	ldr	r5, [pc, #52]	; (8003124 <__libc_init_array+0x38>)
 80030f0:	4c0d      	ldr	r4, [pc, #52]	; (8003128 <__libc_init_array+0x3c>)
 80030f2:	1b64      	subs	r4, r4, r5
 80030f4:	10a4      	asrs	r4, r4, #2
 80030f6:	2600      	movs	r6, #0
 80030f8:	42a6      	cmp	r6, r4
 80030fa:	d109      	bne.n	8003110 <__libc_init_array+0x24>
 80030fc:	4d0b      	ldr	r5, [pc, #44]	; (800312c <__libc_init_array+0x40>)
 80030fe:	4c0c      	ldr	r4, [pc, #48]	; (8003130 <__libc_init_array+0x44>)
 8003100:	f000 f820 	bl	8003144 <_init>
 8003104:	1b64      	subs	r4, r4, r5
 8003106:	10a4      	asrs	r4, r4, #2
 8003108:	2600      	movs	r6, #0
 800310a:	42a6      	cmp	r6, r4
 800310c:	d105      	bne.n	800311a <__libc_init_array+0x2e>
 800310e:	bd70      	pop	{r4, r5, r6, pc}
 8003110:	f855 3b04 	ldr.w	r3, [r5], #4
 8003114:	4798      	blx	r3
 8003116:	3601      	adds	r6, #1
 8003118:	e7ee      	b.n	80030f8 <__libc_init_array+0xc>
 800311a:	f855 3b04 	ldr.w	r3, [r5], #4
 800311e:	4798      	blx	r3
 8003120:	3601      	adds	r6, #1
 8003122:	e7f2      	b.n	800310a <__libc_init_array+0x1e>
 8003124:	080031bc 	.word	0x080031bc
 8003128:	080031bc 	.word	0x080031bc
 800312c:	080031bc 	.word	0x080031bc
 8003130:	080031c0 	.word	0x080031c0

08003134 <memset>:
 8003134:	4402      	add	r2, r0
 8003136:	4603      	mov	r3, r0
 8003138:	4293      	cmp	r3, r2
 800313a:	d100      	bne.n	800313e <memset+0xa>
 800313c:	4770      	bx	lr
 800313e:	f803 1b01 	strb.w	r1, [r3], #1
 8003142:	e7f9      	b.n	8003138 <memset+0x4>

08003144 <_init>:
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	bf00      	nop
 8003148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314a:	bc08      	pop	{r3}
 800314c:	469e      	mov	lr, r3
 800314e:	4770      	bx	lr

08003150 <_fini>:
 8003150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003152:	bf00      	nop
 8003154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003156:	bc08      	pop	{r3}
 8003158:	469e      	mov	lr, r3
 800315a:	4770      	bx	lr
