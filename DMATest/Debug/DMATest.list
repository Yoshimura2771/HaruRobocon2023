
DMATest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b20  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005d00  08005d00  00015d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de8  08005de8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005df0  08005df0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005df0  08005df0  00015df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000070  08005e68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08005e68  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a31  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002585  00000000  00000000  00032ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00035058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00035f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fd10  00000000  00000000  00036cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e41  00000000  00000000  00056a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd8a6  00000000  00000000  00067841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001350e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004610  00000000  00000000  00135138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005ce8 	.word	0x08005ce8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005ce8 	.word	0x08005ce8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	230a      	movs	r3, #10
 80005d6:	68b9      	ldr	r1, [r7, #8]
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <_write+0x24>)
 80005da:	f003 fcd5 	bl	8003f88 <HAL_UART_Transmit>
	return len;
 80005de:	687b      	ldr	r3, [r7, #4]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000158 	.word	0x20000158

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fbc1 	bl	8000d76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f81a 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f980 	bl	80008fc <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f000 f954 	bl	80008a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000600:	f000 f8fc 	bl	80007fc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000604:	f000 f85e 	bl	80006c4 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("ADC %3hu %3hu\r\n", ADC_buff[0], ADC_buff[1]);
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <main+0x38>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	4619      	mov	r1, r3
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <main+0x38>)
 8000610:	885b      	ldrh	r3, [r3, #2]
 8000612:	461a      	mov	r2, r3
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <main+0x3c>)
 8000616:	f004 fb03 	bl	8004c20 <iprintf>
	  HAL_Delay(100);
 800061a:	2064      	movs	r0, #100	; 0x64
 800061c:	f000 fc1c 	bl	8000e58 <HAL_Delay>
	  printf("ADC %3hu %3hu\r\n", ADC_buff[0], ADC_buff[1]);
 8000620:	e7f2      	b.n	8000608 <main+0x1c>
 8000622:	bf00      	nop
 8000624:	200001e8 	.word	0x200001e8
 8000628:	08005d00 	.word	0x08005d00

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	2238      	movs	r2, #56	; 0x38
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fae8 	bl	8004c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800064e:	2000      	movs	r0, #0
 8000650:	f002 fc82 	bl	8002f58 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065e:	2340      	movs	r3, #64	; 0x40
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800066a:	2304      	movs	r3, #4
 800066c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800066e:	2355      	movs	r3, #85	; 0x55
 8000670:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0318 	add.w	r3, r7, #24
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fd0c 	bl	80030a0 <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800068e:	f000 f975 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2303      	movs	r3, #3
 8000698:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2104      	movs	r1, #4
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 f810 	bl	80036d0 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006b6:	f000 f961 	bl	800097c <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	; 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	; 0x30
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2220      	movs	r2, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f004 fa97 	bl	8004c10 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006e2:	4b41      	ldr	r3, [pc, #260]	; (80007e8 <MX_ADC1_Init+0x124>)
 80006e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006ea:	4b3f      	ldr	r3, [pc, #252]	; (80007e8 <MX_ADC1_Init+0x124>)
 80006ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f2:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <MX_ADC1_Init+0x124>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f8:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <MX_ADC1_Init+0x124>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006fe:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <MX_ADC1_Init+0x124>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000704:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <MX_ADC1_Init+0x124>)
 8000706:	2201      	movs	r2, #1
 8000708:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070a:	4b37      	ldr	r3, [pc, #220]	; (80007e8 <MX_ADC1_Init+0x124>)
 800070c:	2204      	movs	r2, #4
 800070e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000710:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <MX_ADC1_Init+0x124>)
 8000712:	2200      	movs	r2, #0
 8000714:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000716:	4b34      	ldr	r3, [pc, #208]	; (80007e8 <MX_ADC1_Init+0x124>)
 8000718:	2201      	movs	r2, #1
 800071a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800071c:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <MX_ADC1_Init+0x124>)
 800071e:	2202      	movs	r2, #2
 8000720:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000722:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <MX_ADC1_Init+0x124>)
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072a:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <MX_ADC1_Init+0x124>)
 800072c:	2200      	movs	r2, #0
 800072e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000730:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <MX_ADC1_Init+0x124>)
 8000732:	2200      	movs	r2, #0
 8000734:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000736:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <MX_ADC1_Init+0x124>)
 8000738:	2201      	movs	r2, #1
 800073a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_ADC1_Init+0x124>)
 8000740:	2200      	movs	r2, #0
 8000742:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <MX_ADC1_Init+0x124>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074c:	4826      	ldr	r0, [pc, #152]	; (80007e8 <MX_ADC1_Init+0x124>)
 800074e:	f000 fded 	bl	800132c <HAL_ADC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000758:	f000 f910 	bl	800097c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000764:	4619      	mov	r1, r3
 8000766:	4820      	ldr	r0, [pc, #128]	; (80007e8 <MX_ADC1_Init+0x124>)
 8000768:	f001 fe36 	bl	80023d8 <HAL_ADCEx_MultiModeConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000772:	f000 f903 	bl	800097c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000776:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <MX_ADC1_Init+0x128>)
 8000778:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800077a:	2306      	movs	r3, #6
 800077c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800077e:	2304      	movs	r3, #4
 8000780:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000782:	237f      	movs	r3, #127	; 0x7f
 8000784:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000786:	2304      	movs	r3, #4
 8000788:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4815      	ldr	r0, [pc, #84]	; (80007e8 <MX_ADC1_Init+0x124>)
 8000794:	f001 f826 	bl	80017e4 <HAL_ADC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800079e:	f000 f8ed 	bl	800097c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_ADC1_Init+0x12c>)
 80007a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007a6:	230c      	movs	r3, #12
 80007a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4619      	mov	r1, r3
 80007ae:	480e      	ldr	r0, [pc, #56]	; (80007e8 <MX_ADC1_Init+0x124>)
 80007b0:	f001 f818 	bl	80017e4 <HAL_ADC_ConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80007ba:	f000 f8df 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80007be:	217f      	movs	r1, #127	; 0x7f
 80007c0:	4809      	ldr	r0, [pc, #36]	; (80007e8 <MX_ADC1_Init+0x124>)
 80007c2:	f001 fda7 	bl	8002314 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_buff, sizeof(ADC_buff) / sizeof(ADC_buff[0]));
 80007c6:	2202      	movs	r2, #2
 80007c8:	490a      	ldr	r1, [pc, #40]	; (80007f4 <MX_ADC1_Init+0x130>)
 80007ca:	4807      	ldr	r0, [pc, #28]	; (80007e8 <MX_ADC1_Init+0x124>)
 80007cc:	f000 ff38 	bl	8001640 <HAL_ADC_Start_DMA>
  hdma_adc1.Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT);
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_ADC1_Init+0x134>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_ADC1_Init+0x134>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f022 0206 	bic.w	r2, r2, #6
 80007de:	601a      	str	r2, [r3, #0]


  /* USER CODE END ADC1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	3730      	adds	r7, #48	; 0x30
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000008c 	.word	0x2000008c
 80007ec:	04300002 	.word	0x04300002
 80007f0:	c3210000 	.word	0xc3210000
 80007f4:	200001e8 	.word	0x200001e8
 80007f8:	200000f8 	.word	0x200000f8

080007fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000800:	4b26      	ldr	r3, [pc, #152]	; (800089c <MX_USART2_UART_Init+0xa0>)
 8000802:	4a27      	ldr	r2, [pc, #156]	; (80008a0 <MX_USART2_UART_Init+0xa4>)
 8000804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <MX_USART2_UART_Init+0xa0>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <MX_USART2_UART_Init+0xa0>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b21      	ldr	r3, [pc, #132]	; (800089c <MX_USART2_UART_Init+0xa0>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <MX_USART2_UART_Init+0xa0>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <MX_USART2_UART_Init+0xa0>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <MX_USART2_UART_Init+0xa0>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_USART2_UART_Init+0xa0>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_USART2_UART_Init+0xa0>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_USART2_UART_Init+0xa0>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_USART2_UART_Init+0xa0>)
 8000840:	2200      	movs	r2, #0
 8000842:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000844:	4815      	ldr	r0, [pc, #84]	; (800089c <MX_USART2_UART_Init+0xa0>)
 8000846:	f003 fb4f 	bl	8003ee8 <HAL_UART_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000850:	f000 f894 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000854:	2100      	movs	r1, #0
 8000856:	4811      	ldr	r0, [pc, #68]	; (800089c <MX_USART2_UART_Init+0xa0>)
 8000858:	f004 f8e6 	bl	8004a28 <HAL_UARTEx_SetTxFifoThreshold>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000862:	f000 f88b 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000866:	2100      	movs	r1, #0
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <MX_USART2_UART_Init+0xa0>)
 800086a:	f004 f91b 	bl	8004aa4 <HAL_UARTEx_SetRxFifoThreshold>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000874:	f000 f882 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000878:	4808      	ldr	r0, [pc, #32]	; (800089c <MX_USART2_UART_Init+0xa0>)
 800087a:	f004 f89c 	bl	80049b6 <HAL_UARTEx_DisableFifoMode>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000884:	f000 f87a 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  setbuf(stdout, NULL);
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_USART2_UART_Init+0xa8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f004 f9dd 	bl	8004c50 <setbuf>

  /* USER CODE END USART2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000158 	.word	0x20000158
 80008a0:	40004400 	.word	0x40004400
 80008a4:	2000000c 	.word	0x2000000c

080008a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_DMA_Init+0x50>)
 80008b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008b2:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <MX_DMA_Init+0x50>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6493      	str	r3, [r2, #72]	; 0x48
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_DMA_Init+0x50>)
 80008bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_DMA_Init+0x50>)
 80008c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <MX_DMA_Init+0x50>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6493      	str	r3, [r2, #72]	; 0x48
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_DMA_Init+0x50>)
 80008d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	200b      	movs	r0, #11
 80008e4:	f001 fef7 	bl	80026d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008e8:	200b      	movs	r0, #11
 80008ea:	f001 ff0e 	bl	800270a <HAL_NVIC_EnableIRQ>

}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_GPIO_Init+0x78>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a17      	ldr	r2, [pc, #92]	; (8000974 <MX_GPIO_Init+0x78>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_GPIO_Init+0x78>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_GPIO_Init+0x78>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a11      	ldr	r2, [pc, #68]	; (8000974 <MX_GPIO_Init+0x78>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_GPIO_Init+0x78>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000948:	480b      	ldr	r0, [pc, #44]	; (8000978 <MX_GPIO_Init+0x7c>)
 800094a:	f002 faed 	bl	8002f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800094e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000952:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4619      	mov	r1, r3
 8000966:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_GPIO_Init+0x7c>)
 8000968:	f002 f95c 	bl	8002c24 <HAL_GPIO_Init>

}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40021000 	.word	0x40021000
 8000978:	48000400 	.word	0x48000400

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x44>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000992:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <HAL_MspInit+0x44>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6613      	str	r3, [r2, #96]	; 0x60
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_MspInit+0x44>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x44>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x44>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6593      	str	r3, [r2, #88]	; 0x58
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x44>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b09a      	sub	sp, #104	; 0x68
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	2244      	movs	r2, #68	; 0x44
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f004 f90d 	bl	8004c10 <memset>
  if(hadc->Instance==ADC1)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009fe:	d160      	bne.n	8000ac2 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a04:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a06:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 f879 	bl	8003b08 <HAL_RCCEx_PeriphCLKConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a1c:	f7ff ffae 	bl	800097c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a20:	4b2a      	ldr	r3, [pc, #168]	; (8000acc <HAL_ADC_MspInit+0xfc>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a24:	4a29      	ldr	r2, [pc, #164]	; (8000acc <HAL_ADC_MspInit+0xfc>)
 8000a26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2c:	4b27      	ldr	r3, [pc, #156]	; (8000acc <HAL_ADC_MspInit+0xfc>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <HAL_ADC_MspInit+0xfc>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3c:	4a23      	ldr	r2, [pc, #140]	; (8000acc <HAL_ADC_MspInit+0xfc>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a44:	4b21      	ldr	r3, [pc, #132]	; (8000acc <HAL_ADC_MspInit+0xfc>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a50:	2301      	movs	r3, #1
 8000a52:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a54:	2303      	movs	r3, #3
 8000a56:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f002 f8dd 	bl	8002c24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <HAL_ADC_MspInit+0x100>)
 8000a6c:	4a19      	ldr	r2, [pc, #100]	; (8000ad4 <HAL_ADC_MspInit+0x104>)
 8000a6e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_ADC_MspInit+0x100>)
 8000a72:	2205      	movs	r2, #5
 8000a74:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <HAL_ADC_MspInit+0x100>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <HAL_ADC_MspInit+0x100>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <HAL_ADC_MspInit+0x100>)
 8000a84:	2280      	movs	r2, #128	; 0x80
 8000a86:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_ADC_MspInit+0x100>)
 8000a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a8e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_ADC_MspInit+0x100>)
 8000a92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a96:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a98:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <HAL_ADC_MspInit+0x100>)
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <HAL_ADC_MspInit+0x100>)
 8000aa0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aa4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000aa6:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <HAL_ADC_MspInit+0x100>)
 8000aa8:	f001 fe4a 	bl	8002740 <HAL_DMA_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8000ab2:	f7ff ff63 	bl	800097c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <HAL_ADC_MspInit+0x100>)
 8000aba:	655a      	str	r2, [r3, #84]	; 0x54
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_ADC_MspInit+0x100>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3768      	adds	r7, #104	; 0x68
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	200000f8 	.word	0x200000f8
 8000ad4:	40020008 	.word	0x40020008

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09a      	sub	sp, #104	; 0x68
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	2244      	movs	r2, #68	; 0x44
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f004 f889 	bl	8004c10 <memset>
  if(huart->Instance==USART2)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <HAL_UART_MspInit+0xa8>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d136      	bne.n	8000b76 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 fff7 	bl	8003b08 <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b20:	f7ff ff2c 	bl	800097c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_UART_MspInit+0xac>)
 8000b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b28:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <HAL_UART_MspInit+0xac>)
 8000b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_UART_MspInit+0xac>)
 8000b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_UART_MspInit+0xac>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b40:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <HAL_UART_MspInit+0xac>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_UART_MspInit+0xac>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b54:	230c      	movs	r3, #12
 8000b56:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b64:	2307      	movs	r3, #7
 8000b66:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b72:	f002 f857 	bl	8002c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3768      	adds	r7, #104	; 0x68
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40004400 	.word	0x40004400
 8000b84:	40021000 	.word	0x40021000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 f922 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <DMA1_Channel1_IRQHandler+0x10>)
 8000be2:	f001 fed0 	bl	8002986 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000f8 	.word	0x200000f8

08000bf0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e00a      	b.n	8000c18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c02:	f3af 8000 	nop.w
 8000c06:	4601      	mov	r1, r0
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	60ba      	str	r2, [r7, #8]
 8000c0e:	b2ca      	uxtb	r2, r1
 8000c10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3301      	adds	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	dbf0      	blt.n	8000c02 <_read+0x12>
	}

return len;
 8000c20:	687b      	ldr	r3, [r7, #4]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
	return -1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c52:	605a      	str	r2, [r3, #4]
	return 0;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <_isatty>:

int _isatty(int file)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
	return 1;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
	return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c9c:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <_sbrk+0x5c>)
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <_sbrk+0x60>)
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <_sbrk+0x64>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <_sbrk+0x68>)
 8000cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d207      	bcs.n	8000cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc4:	f003 ff7a 	bl	8004bbc <__errno>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	220c      	movs	r2, #12
 8000ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	e009      	b.n	8000ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <_sbrk+0x64>)
 8000ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20008000 	.word	0x20008000
 8000cf4:	00000400 	.word	0x00000400
 8000cf8:	200001ec 	.word	0x200001ec
 8000cfc:	20000208 	.word	0x20000208

08000d00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d2a:	490e      	ldr	r1, [pc, #56]	; (8000d64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d2c:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <LoopForever+0xe>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d40:	4c0b      	ldr	r4, [pc, #44]	; (8000d70 <LoopForever+0x16>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d4e:	f7ff ffd7 	bl	8000d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d52:	f003 ff39 	bl	8004bc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d56:	f7ff fc49 	bl	80005ec <main>

08000d5a <LoopForever>:

LoopForever:
    b LoopForever
 8000d5a:	e7fe      	b.n	8000d5a <LoopForever>
  ldr   r0, =_estack
 8000d5c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d68:	08005df8 	.word	0x08005df8
  ldr r2, =_sbss
 8000d6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d70:	20000204 	.word	0x20000204

08000d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC1_2_IRQHandler>

08000d76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f001 fc9d 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 f80e 	bl	8000da8 <HAL_InitTick>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d002      	beq.n	8000d98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	e001      	b.n	8000d9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d98:	f7ff fdf6 	bl	8000988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d9c:	79fb      	ldrb	r3, [r7, #7]

}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <HAL_InitTick+0x68>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d022      	beq.n	8000e02 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_InitTick+0x6c>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <HAL_InitTick+0x68>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fca8 	bl	8002726 <HAL_SYSTICK_Config>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10f      	bne.n	8000dfc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b0f      	cmp	r3, #15
 8000de0:	d809      	bhi.n	8000df6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de2:	2200      	movs	r2, #0
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dea:	f001 fc74 	bl	80026d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_InitTick+0x70>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	e007      	b.n	8000e06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	73fb      	strb	r3, [r7, #15]
 8000dfa:	e004      	b.n	8000e06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	e001      	b.n	8000e06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000004 	.word	0x20000004

08000e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_IncTick+0x1c>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_IncTick+0x20>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a03      	ldr	r2, [pc, #12]	; (8000e38 <HAL_IncTick+0x1c>)
 8000e2c:	6013      	str	r3, [r2, #0]
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	200001f0 	.word	0x200001f0
 8000e3c:	20000008 	.word	0x20000008

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	200001f0 	.word	0x200001f0

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff ffee 	bl	8000e40 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d004      	beq.n	8000e7c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <HAL_Delay+0x40>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	4413      	add	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7c:	bf00      	nop
 8000e7e:	f7ff ffdf 	bl	8000e40 <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d8f7      	bhi.n	8000e7e <HAL_Delay+0x26>
  {
  }
}
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000008 	.word	0x20000008

08000e9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	609a      	str	r2, [r3, #8]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3360      	adds	r3, #96	; 0x60
 8000f16:	461a      	mov	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <LL_ADC_SetOffset+0x44>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	430a      	orrs	r2, r1
 8000f32:	4313      	orrs	r3, r2
 8000f34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f3c:	bf00      	nop
 8000f3e:	371c      	adds	r7, #28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	03fff000 	.word	0x03fff000

08000f4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3360      	adds	r3, #96	; 0x60
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	3360      	adds	r3, #96	; 0x60
 8000f88:	461a      	mov	r2, r3
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fa2:	bf00      	nop
 8000fa4:	371c      	adds	r7, #28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b087      	sub	sp, #28
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3360      	adds	r3, #96	; 0x60
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000fd8:	bf00      	nop
 8000fda:	371c      	adds	r7, #28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3360      	adds	r3, #96	; 0x60
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	431a      	orrs	r2, r3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800100e:	bf00      	nop
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	431a      	orrs	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	615a      	str	r2, [r3, #20]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001066:	b480      	push	{r7}
 8001068:	b087      	sub	sp, #28
 800106a:	af00      	add	r7, sp, #0
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3330      	adds	r3, #48	; 0x30
 8001076:	461a      	mov	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	0a1b      	lsrs	r3, r3, #8
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	4413      	add	r3, r2
 8001084:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	f003 031f 	and.w	r3, r3, #31
 8001090:	211f      	movs	r1, #31
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	401a      	ands	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	0e9b      	lsrs	r3, r3, #26
 800109e:	f003 011f 	and.w	r1, r3, #31
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	f003 031f 	and.w	r3, r3, #31
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	431a      	orrs	r2, r3
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010b2:	bf00      	nop
 80010b4:	371c      	adds	r7, #28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010be:	b480      	push	{r7}
 80010c0:	b087      	sub	sp, #28
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3314      	adds	r3, #20
 80010ce:	461a      	mov	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	0e5b      	lsrs	r3, r3, #25
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	4413      	add	r3, r2
 80010dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	0d1b      	lsrs	r3, r3, #20
 80010e6:	f003 031f 	and.w	r3, r3, #31
 80010ea:	2107      	movs	r1, #7
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	401a      	ands	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	0d1b      	lsrs	r3, r3, #20
 80010f8:	f003 031f 	and.w	r3, r3, #31
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	431a      	orrs	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001108:	bf00      	nop
 800110a:	371c      	adds	r7, #28
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d10a      	bne.n	800113e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001134:	431a      	orrs	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800113c:	e00a      	b.n	8001154 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800114a:	43db      	mvns	r3, r3
 800114c:	401a      	ands	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	407f0000 	.word	0x407f0000

08001164 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 031f 	and.w	r3, r3, #31
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001190:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	6093      	str	r3, [r2, #8]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011b8:	d101      	bne.n	80011be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001204:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001208:	d101      	bne.n	800120e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800122c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001230:	f043 0201 	orr.w	r2, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001254:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001258:	f043 0202 	orr.w	r2, r3, #2
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <LL_ADC_IsEnabled+0x18>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <LL_ADC_IsEnabled+0x1a>
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d101      	bne.n	80012aa <LL_ADC_IsDisableOngoing+0x18>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <LL_ADC_IsDisableOngoing+0x1a>
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012cc:	f043 0204 	orr.w	r2, r3, #4
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d101      	bne.n	80012f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b08      	cmp	r3, #8
 8001318:	d101      	bne.n	800131e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e177      	b.n	8001636 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001350:	2b00      	cmp	r3, #0
 8001352:	d109      	bne.n	8001368 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff fb3b 	bl	80009d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff19 	bl	80011a4 <LL_ADC_IsDeepPowerDownEnabled>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d004      	beq.n	8001382 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff feff 	bl	8001180 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff34 	bl	80011f4 <LL_ADC_IsInternalRegulatorEnabled>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d115      	bne.n	80013be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff18 	bl	80011cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800139c:	4b9c      	ldr	r3, [pc, #624]	; (8001610 <HAL_ADC_Init+0x2e4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	4a9c      	ldr	r2, [pc, #624]	; (8001614 <HAL_ADC_Init+0x2e8>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	099b      	lsrs	r3, r3, #6
 80013aa:	3301      	adds	r3, #1
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013b0:	e002      	b.n	80013b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f9      	bne.n	80013b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff16 	bl	80011f4 <LL_ADC_IsInternalRegulatorEnabled>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10d      	bne.n	80013ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d2:	f043 0210 	orr.w	r2, r3, #16
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013de:	f043 0201 	orr.w	r2, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff76 	bl	80012e0 <LL_ADC_REG_IsConversionOngoing>
 80013f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f040 8110 	bne.w	8001624 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f040 810c 	bne.w	8001624 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001410:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001414:	f043 0202 	orr.w	r2, r3, #2
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff23 	bl	800126c <LL_ADC_IsEnabled>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d111      	bne.n	8001450 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800142c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001430:	f7ff ff1c 	bl	800126c <LL_ADC_IsEnabled>
 8001434:	4604      	mov	r4, r0
 8001436:	4878      	ldr	r0, [pc, #480]	; (8001618 <HAL_ADC_Init+0x2ec>)
 8001438:	f7ff ff18 	bl	800126c <LL_ADC_IsEnabled>
 800143c:	4603      	mov	r3, r0
 800143e:	4323      	orrs	r3, r4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d105      	bne.n	8001450 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	4619      	mov	r1, r3
 800144a:	4874      	ldr	r0, [pc, #464]	; (800161c <HAL_ADC_Init+0x2f0>)
 800144c:	f7ff fd26 	bl	8000e9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7f5b      	ldrb	r3, [r3, #29]
 8001454:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800145a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001460:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001466:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800146e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800147a:	2b01      	cmp	r3, #1
 800147c:	d106      	bne.n	800148c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001482:	3b01      	subs	r3, #1
 8001484:	045b      	lsls	r3, r3, #17
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	2b00      	cmp	r3, #0
 8001492:	d009      	beq.n	80014a8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	4b5c      	ldr	r3, [pc, #368]	; (8001620 <HAL_ADC_Init+0x2f4>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	69b9      	ldr	r1, [r7, #24]
 80014b8:	430b      	orrs	r3, r1
 80014ba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ff02 	bl	80012e0 <LL_ADC_REG_IsConversionOngoing>
 80014dc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff0f 	bl	8001306 <LL_ADC_INJ_IsConversionOngoing>
 80014e8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d16d      	bne.n	80015cc <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d16a      	bne.n	80015cc <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014fa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001502:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001512:	f023 0302 	bic.w	r3, r3, #2
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6812      	ldr	r2, [r2, #0]
 800151a:	69b9      	ldr	r1, [r7, #24]
 800151c:	430b      	orrs	r3, r1
 800151e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d017      	beq.n	8001558 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001536:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001540:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001544:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6911      	ldr	r1, [r2, #16]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	430b      	orrs	r3, r1
 8001552:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001556:	e013      	b.n	8001580 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001566:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001578:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800157c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001586:	2b01      	cmp	r3, #1
 8001588:	d118      	bne.n	80015bc <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001594:	f023 0304 	bic.w	r3, r3, #4
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015a0:	4311      	orrs	r1, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80015a6:	4311      	orrs	r1, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015ac:	430a      	orrs	r2, r1
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 0201 	orr.w	r2, r2, #1
 80015b8:	611a      	str	r2, [r3, #16]
 80015ba:	e007      	b.n	80015cc <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0201 	bic.w	r2, r2, #1
 80015ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d10c      	bne.n	80015ee <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f023 010f 	bic.w	r1, r3, #15
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	1e5a      	subs	r2, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	631a      	str	r2, [r3, #48]	; 0x30
 80015ec:	e007      	b.n	80015fe <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 020f 	bic.w	r2, r2, #15
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001602:	f023 0303 	bic.w	r3, r3, #3
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	65da      	str	r2, [r3, #92]	; 0x5c
 800160e:	e011      	b.n	8001634 <HAL_ADC_Init+0x308>
 8001610:	20000000 	.word	0x20000000
 8001614:	053e2d63 	.word	0x053e2d63
 8001618:	50000100 	.word	0x50000100
 800161c:	50000300 	.word	0x50000300
 8001620:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001628:	f043 0210 	orr.w	r2, r3, #16
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001634:	7ffb      	ldrb	r3, [r7, #31]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd90      	pop	{r4, r7, pc}
 800163e:	bf00      	nop

08001640 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800164c:	4851      	ldr	r0, [pc, #324]	; (8001794 <HAL_ADC_Start_DMA+0x154>)
 800164e:	f7ff fd89 	bl	8001164 <LL_ADC_GetMultimode>
 8001652:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fe41 	bl	80012e0 <LL_ADC_REG_IsConversionOngoing>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	f040 808f 	bne.w	8001784 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_ADC_Start_DMA+0x34>
 8001670:	2302      	movs	r3, #2
 8001672:	e08a      	b.n	800178a <HAL_ADC_Start_DMA+0x14a>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	2b05      	cmp	r3, #5
 8001686:	d002      	beq.n	800168e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2b09      	cmp	r3, #9
 800168c:	d173      	bne.n	8001776 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 fc98 	bl	8001fc4 <ADC_Enable>
 8001694:	4603      	mov	r3, r0
 8001696:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001698:	7dfb      	ldrb	r3, [r7, #23]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d166      	bne.n	800176c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a38      	ldr	r2, [pc, #224]	; (8001798 <HAL_ADC_Start_DMA+0x158>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d002      	beq.n	80016c2 <HAL_ADC_Start_DMA+0x82>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	e001      	b.n	80016c6 <HAL_ADC_Start_DMA+0x86>
 80016c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d002      	beq.n	80016d4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f0:	f023 0206 	bic.w	r2, r3, #6
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	661a      	str	r2, [r3, #96]	; 0x60
 80016f8:	e002      	b.n	8001700 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001704:	4a25      	ldr	r2, [pc, #148]	; (800179c <HAL_ADC_Start_DMA+0x15c>)
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170c:	4a24      	ldr	r2, [pc, #144]	; (80017a0 <HAL_ADC_Start_DMA+0x160>)
 800170e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001714:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <HAL_ADC_Start_DMA+0x164>)
 8001716:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	221c      	movs	r2, #28
 800171e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0210 	orr.w	r2, r2, #16
 8001736:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3340      	adds	r3, #64	; 0x40
 8001752:	4619      	mov	r1, r3
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f001 f89a 	bl	8002890 <HAL_DMA_Start_IT>
 800175c:	4603      	mov	r3, r0
 800175e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fda7 	bl	80012b8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800176a:	e00d      	b.n	8001788 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001774:	e008      	b.n	8001788 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001782:	e001      	b.n	8001788 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001784:	2302      	movs	r3, #2
 8001786:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001788:	7dfb      	ldrb	r3, [r7, #23]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	50000300 	.word	0x50000300
 8001798:	50000100 	.word	0x50000100
 800179c:	08002147 	.word	0x08002147
 80017a0:	0800221f 	.word	0x0800221f
 80017a4:	0800223b 	.word	0x0800223b

080017a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b0b6      	sub	sp, #216	; 0xd8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x22>
 8001802:	2302      	movs	r3, #2
 8001804:	e3c8      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x7b4>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fd64 	bl	80012e0 <LL_ADC_REG_IsConversionOngoing>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	f040 83ad 	bne.w	8001f7a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	6859      	ldr	r1, [r3, #4]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	f7ff fc1a 	bl	8001066 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fd52 	bl	80012e0 <LL_ADC_REG_IsConversionOngoing>
 800183c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fd5e 	bl	8001306 <LL_ADC_INJ_IsConversionOngoing>
 800184a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800184e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 81d9 	bne.w	8001c0a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800185c:	2b00      	cmp	r3, #0
 800185e:	f040 81d4 	bne.w	8001c0a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800186a:	d10f      	bne.n	800188c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2200      	movs	r2, #0
 8001876:	4619      	mov	r1, r3
 8001878:	f7ff fc21 	bl	80010be <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fbc8 	bl	800101a <LL_ADC_SetSamplingTimeCommonConfig>
 800188a:	e00e      	b.n	80018aa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	461a      	mov	r2, r3
 800189a:	f7ff fc10 	bl	80010be <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fbb8 	bl	800101a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	08db      	lsrs	r3, r3, #3
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d022      	beq.n	8001912 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	6919      	ldr	r1, [r3, #16]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018dc:	f7ff fb12 	bl	8000f04 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	6919      	ldr	r1, [r3, #16]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	461a      	mov	r2, r3
 80018ee:	f7ff fb5e 	bl	8000fae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	6919      	ldr	r1, [r3, #16]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	7f1b      	ldrb	r3, [r3, #28]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d102      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x124>
 8001902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001906:	e000      	b.n	800190a <HAL_ADC_ConfigChannel+0x126>
 8001908:	2300      	movs	r3, #0
 800190a:	461a      	mov	r2, r3
 800190c:	f7ff fb6a 	bl	8000fe4 <LL_ADC_SetOffsetSaturation>
 8001910:	e17b      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fb17 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10a      	bne.n	800193e <HAL_ADC_ConfigChannel+0x15a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fb0c 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001934:	4603      	mov	r3, r0
 8001936:	0e9b      	lsrs	r3, r3, #26
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	e01e      	b.n	800197c <HAL_ADC_ConfigChannel+0x198>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fb01 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001954:	fa93 f3a3 	rbit	r3, r3
 8001958:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800195c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001960:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800196c:	2320      	movs	r3, #32
 800196e:	e004      	b.n	800197a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001970:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001984:	2b00      	cmp	r3, #0
 8001986:	d105      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x1b0>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0e9b      	lsrs	r3, r3, #26
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	e018      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x1e2>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80019b8:	2320      	movs	r3, #32
 80019ba:	e004      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80019bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019c0:	fab3 f383 	clz	r3, r3
 80019c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d106      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fad0 	bl	8000f78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2101      	movs	r1, #1
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fab4 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10a      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x220>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2101      	movs	r1, #1
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff faa9 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	0e9b      	lsrs	r3, r3, #26
 80019fe:	f003 021f 	and.w	r2, r3, #31
 8001a02:	e01e      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x25e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2101      	movs	r1, #1
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fa9e 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001a32:	2320      	movs	r3, #32
 8001a34:	e004      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a3a:	fab3 f383 	clz	r3, r3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d105      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x276>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0e9b      	lsrs	r3, r3, #26
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	e018      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x2a8>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001a7e:	2320      	movs	r3, #32
 8001a80:	e004      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001a82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d106      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2200      	movs	r2, #0
 8001a96:	2101      	movs	r1, #1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fa6d 	bl	8000f78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fa51 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10a      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x2e6>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2102      	movs	r1, #2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fa46 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	0e9b      	lsrs	r3, r3, #26
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	e01e      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x324>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2102      	movs	r1, #2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fa3b 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ae0:	fa93 f3a3 	rbit	r3, r3
 8001ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ae8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001af0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001af8:	2320      	movs	r3, #32
 8001afa:	e004      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001afc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d105      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x33c>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	0e9b      	lsrs	r3, r3, #26
 8001b1a:	f003 031f 	and.w	r3, r3, #31
 8001b1e:	e016      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x36a>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001b40:	2320      	movs	r3, #32
 8001b42:	e004      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d106      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2200      	movs	r2, #0
 8001b58:	2102      	movs	r1, #2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fa0c 	bl	8000f78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2103      	movs	r1, #3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff f9f0 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10a      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x3a8>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2103      	movs	r1, #3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff f9e5 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	0e9b      	lsrs	r3, r3, #26
 8001b86:	f003 021f 	and.w	r2, r3, #31
 8001b8a:	e017      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x3d8>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2103      	movs	r1, #3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff f9da 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ba6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001bae:	2320      	movs	r3, #32
 8001bb0:	e003      	b.n	8001bba <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001bb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x3f0>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	0e9b      	lsrs	r3, r3, #26
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	e011      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x414>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001be2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001be4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001bec:	2320      	movs	r3, #32
 8001bee:	e003      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d106      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2200      	movs	r2, #0
 8001c02:	2103      	movs	r1, #3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff f9b7 	bl	8000f78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fb2c 	bl	800126c <LL_ADC_IsEnabled>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f040 8140 	bne.w	8001e9c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6819      	ldr	r1, [r3, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f7ff fa73 	bl	8001114 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	4a8f      	ldr	r2, [pc, #572]	; (8001e70 <HAL_ADC_ConfigChannel+0x68c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	f040 8131 	bne.w	8001e9c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10b      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x47e>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0e9b      	lsrs	r3, r3, #26
 8001c50:	3301      	adds	r3, #1
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	2b09      	cmp	r3, #9
 8001c58:	bf94      	ite	ls
 8001c5a:	2301      	movls	r3, #1
 8001c5c:	2300      	movhi	r3, #0
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	e019      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x4b2>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c72:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	e003      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	2b09      	cmp	r3, #9
 8001c8e:	bf94      	ite	ls
 8001c90:	2301      	movls	r3, #1
 8001c92:	2300      	movhi	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d079      	beq.n	8001d8e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d107      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x4d2>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0e9b      	lsrs	r3, r3, #26
 8001cac:	3301      	adds	r3, #1
 8001cae:	069b      	lsls	r3, r3, #26
 8001cb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cb4:	e015      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x4fe>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cc6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001cce:	2320      	movs	r3, #32
 8001cd0:	e003      	b.n	8001cda <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	069b      	lsls	r3, r3, #26
 8001cde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x51e>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0e9b      	lsrs	r3, r3, #26
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	e017      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x54e>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	e003      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	ea42 0103 	orr.w	r1, r2, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10a      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x574>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	0e9b      	lsrs	r3, r3, #26
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f003 021f 	and.w	r2, r3, #31
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	051b      	lsls	r3, r3, #20
 8001d56:	e018      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x5a6>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001d70:	2320      	movs	r3, #32
 8001d72:	e003      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f003 021f 	and.w	r2, r3, #31
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d8a:	430b      	orrs	r3, r1
 8001d8c:	e081      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d107      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x5c6>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	0e9b      	lsrs	r3, r3, #26
 8001da0:	3301      	adds	r3, #1
 8001da2:	069b      	lsls	r3, r3, #26
 8001da4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da8:	e015      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x5f2>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001dc2:	2320      	movs	r3, #32
 8001dc4:	e003      	b.n	8001dce <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc8:	fab3 f383 	clz	r3, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	069b      	lsls	r3, r3, #26
 8001dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x612>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	0e9b      	lsrs	r3, r3, #26
 8001de8:	3301      	adds	r3, #1
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	e017      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x642>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	61fb      	str	r3, [r7, #28]
  return result;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001e0e:	2320      	movs	r3, #32
 8001e10:	e003      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	ea42 0103 	orr.w	r1, r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10d      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x66e>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	0e9b      	lsrs	r3, r3, #26
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f003 021f 	and.w	r2, r3, #31
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	3b1e      	subs	r3, #30
 8001e4a:	051b      	lsls	r3, r3, #20
 8001e4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e50:	e01e      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x6ac>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	613b      	str	r3, [r7, #16]
  return result;
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d104      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	e006      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x698>
 8001e6e:	bf00      	nop
 8001e70:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f003 021f 	and.w	r2, r3, #31
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	3b1e      	subs	r3, #30
 8001e8a:	051b      	lsls	r3, r3, #20
 8001e8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e90:	430b      	orrs	r3, r1
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	6892      	ldr	r2, [r2, #8]
 8001e96:	4619      	mov	r1, r3
 8001e98:	f7ff f911 	bl	80010be <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b3f      	ldr	r3, [pc, #252]	; (8001fa0 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d071      	beq.n	8001f8c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ea8:	483e      	ldr	r0, [pc, #248]	; (8001fa4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001eaa:	f7ff f81d 	bl	8000ee8 <LL_ADC_GetCommonPathInternalCh>
 8001eae:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <HAL_ADC_ConfigChannel+0x7c4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_ADC_ConfigChannel+0x6e2>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a3a      	ldr	r2, [pc, #232]	; (8001fac <HAL_ADC_ConfigChannel+0x7c8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d127      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ec6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d121      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eda:	d157      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001edc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ee0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	482f      	ldr	r0, [pc, #188]	; (8001fa4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ee8:	f7fe ffeb 	bl	8000ec2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eec:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <HAL_ADC_ConfigChannel+0x7cc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	099b      	lsrs	r3, r3, #6
 8001ef2:	4a30      	ldr	r2, [pc, #192]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7d0>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	099b      	lsrs	r3, r3, #6
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f06:	e002      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f9      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f14:	e03a      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a27      	ldr	r2, [pc, #156]	; (8001fb8 <HAL_ADC_ConfigChannel+0x7d4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d113      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x764>
 8001f20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10d      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a22      	ldr	r2, [pc, #136]	; (8001fbc <HAL_ADC_ConfigChannel+0x7d8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d02a      	beq.n	8001f8c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4818      	ldr	r0, [pc, #96]	; (8001fa4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f42:	f7fe ffbe 	bl	8000ec2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f46:	e021      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1c      	ldr	r2, [pc, #112]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d11c      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d116      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a16      	ldr	r2, [pc, #88]	; (8001fbc <HAL_ADC_ConfigChannel+0x7d8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d011      	beq.n	8001f8c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f70:	4619      	mov	r1, r3
 8001f72:	480c      	ldr	r0, [pc, #48]	; (8001fa4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f74:	f7fe ffa5 	bl	8000ec2 <LL_ADC_SetCommonPathInternalCh>
 8001f78:	e008      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	f043 0220 	orr.w	r2, r3, #32
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001f94:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	37d8      	adds	r7, #216	; 0xd8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	80080000 	.word	0x80080000
 8001fa4:	50000300 	.word	0x50000300
 8001fa8:	c3210000 	.word	0xc3210000
 8001fac:	90c00010 	.word	0x90c00010
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	053e2d63 	.word	0x053e2d63
 8001fb8:	c7520000 	.word	0xc7520000
 8001fbc:	50000100 	.word	0x50000100
 8001fc0:	cb840000 	.word	0xcb840000

08001fc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff f94b 	bl	800126c <LL_ADC_IsEnabled>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d14d      	bne.n	8002078 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	4b28      	ldr	r3, [pc, #160]	; (8002084 <ADC_Enable+0xc0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00d      	beq.n	8002006 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fee:	f043 0210 	orr.w	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffa:	f043 0201 	orr.w	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e039      	b.n	800207a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff f906 	bl	800121c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002010:	f7fe ff16 	bl	8000e40 <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002016:	e028      	b.n	800206a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff f925 	bl	800126c <LL_ADC_IsEnabled>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d104      	bne.n	8002032 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff f8f5 	bl	800121c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002032:	f7fe ff05 	bl	8000e40 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d914      	bls.n	800206a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b01      	cmp	r3, #1
 800204c:	d00d      	beq.n	800206a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	f043 0210 	orr.w	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e007      	b.n	800207a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d1cf      	bne.n	8002018 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	8000003f 	.word	0x8000003f

08002088 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff f8fc 	bl	8001292 <LL_ADC_IsDisableOngoing>
 800209a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff f8e3 	bl	800126c <LL_ADC_IsEnabled>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d047      	beq.n	800213c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d144      	bne.n	800213c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 030d 	and.w	r3, r3, #13
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d10c      	bne.n	80020da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff f8bd 	bl	8001244 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2203      	movs	r2, #3
 80020d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020d2:	f7fe feb5 	bl	8000e40 <HAL_GetTick>
 80020d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020d8:	e029      	b.n	800212e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	f043 0210 	orr.w	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e023      	b.n	800213e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020f6:	f7fe fea3 	bl	8000e40 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d914      	bls.n	800212e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00d      	beq.n	800212e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	f043 0210 	orr.w	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e007      	b.n	800213e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1dc      	bne.n	80020f6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800215c:	2b00      	cmp	r3, #0
 800215e:	d14b      	bne.n	80021f8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002164:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d021      	beq.n	80021be <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe ff5e 	bl	8001040 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d032      	beq.n	80021f0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d12b      	bne.n	80021f0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d11f      	bne.n	80021f0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b4:	f043 0201 	orr.w	r2, r3, #1
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80021bc:	e018      	b.n	80021f0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d111      	bne.n	80021f0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	f043 0201 	orr.w	r2, r3, #1
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7ff fad9 	bl	80017a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021f6:	e00e      	b.n	8002216 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7ff fae3 	bl	80017d0 <HAL_ADC_ErrorCallback>
}
 800220a:	e004      	b.n	8002216 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	4798      	blx	r3
}
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f7ff fac5 	bl	80017bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002258:	f043 0204 	orr.w	r2, r3, #4
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f7ff fab5 	bl	80017d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <LL_ADC_IsEnabled>:
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <LL_ADC_IsEnabled+0x18>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <LL_ADC_IsEnabled+0x1a>
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_StartCalibration>:
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80022a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	609a      	str	r2, [r3, #8]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <LL_ADC_IsCalibrationOnGoing>:
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022da:	d101      	bne.n	80022e0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_ADC_REG_IsConversionOngoing>:
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d101      	bne.n	8002306 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_ADCEx_Calibration_Start+0x1c>
 800232c:	2302      	movs	r3, #2
 800232e:	e04d      	b.n	80023cc <HAL_ADCEx_Calibration_Start+0xb8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff fea5 	bl	8002088 <ADC_Disable>
 800233e:	4603      	mov	r3, r0
 8002340:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d136      	bne.n	80023b6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002350:	f023 0302 	bic.w	r3, r3, #2
 8002354:	f043 0202 	orr.w	r2, r3, #2
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6839      	ldr	r1, [r7, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff96 	bl	8002294 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002368:	e014      	b.n	8002394 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	3301      	adds	r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4a18      	ldr	r2, [pc, #96]	; (80023d4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d90d      	bls.n	8002394 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237c:	f023 0312 	bic.w	r3, r3, #18
 8002380:	f043 0210 	orr.w	r2, r3, #16
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e01b      	b.n	80023cc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff94 	bl	80022c6 <LL_ADC_IsCalibrationOnGoing>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1e2      	bne.n	800236a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	f023 0303 	bic.w	r3, r3, #3
 80023ac:	f043 0201 	orr.w	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80023b4:	e005      	b.n	80023c2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ba:	f043 0210 	orr.w	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	0004de01 	.word	0x0004de01

080023d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b0a1      	sub	sp, #132	; 0x84
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e08b      	b.n	800250e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80023fe:	2300      	movs	r3, #0
 8002400:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002402:	2300      	movs	r3, #0
 8002404:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800240e:	d102      	bne.n	8002416 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002410:	4b41      	ldr	r3, [pc, #260]	; (8002518 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	e001      	b.n	800241a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10b      	bne.n	8002438 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	f043 0220 	orr.w	r2, r3, #32
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e06a      	b.n	800250e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ff57 	bl	80022ee <LL_ADC_REG_IsConversionOngoing>
 8002440:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ff51 	bl	80022ee <LL_ADC_REG_IsConversionOngoing>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d14c      	bne.n	80024ec <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002454:	2b00      	cmp	r3, #0
 8002456:	d149      	bne.n	80024ec <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002458:	4b30      	ldr	r3, [pc, #192]	; (800251c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800245a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d028      	beq.n	80024b6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6859      	ldr	r1, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002476:	035b      	lsls	r3, r3, #13
 8002478:	430b      	orrs	r3, r1
 800247a:	431a      	orrs	r2, r3
 800247c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800247e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002480:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002484:	f7ff fef3 	bl	800226e <LL_ADC_IsEnabled>
 8002488:	4604      	mov	r4, r0
 800248a:	4823      	ldr	r0, [pc, #140]	; (8002518 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800248c:	f7ff feef 	bl	800226e <LL_ADC_IsEnabled>
 8002490:	4603      	mov	r3, r0
 8002492:	4323      	orrs	r3, r4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d133      	bne.n	8002500 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024a0:	f023 030f 	bic.w	r3, r3, #15
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	6811      	ldr	r1, [r2, #0]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	6892      	ldr	r2, [r2, #8]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	431a      	orrs	r2, r3
 80024b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024b4:	e024      	b.n	8002500 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024c2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024c6:	f7ff fed2 	bl	800226e <LL_ADC_IsEnabled>
 80024ca:	4604      	mov	r4, r0
 80024cc:	4812      	ldr	r0, [pc, #72]	; (8002518 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024ce:	f7ff fece 	bl	800226e <LL_ADC_IsEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4323      	orrs	r3, r4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d112      	bne.n	8002500 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024e2:	f023 030f 	bic.w	r3, r3, #15
 80024e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024e8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024ea:	e009      	b.n	8002500 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	f043 0220 	orr.w	r2, r3, #32
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80024fe:	e000      	b.n	8002502 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002500:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800250a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800250e:	4618      	mov	r0, r3
 8002510:	3784      	adds	r7, #132	; 0x84
 8002512:	46bd      	mov	sp, r7
 8002514:	bd90      	pop	{r4, r7, pc}
 8002516:	bf00      	nop
 8002518:	50000100 	.word	0x50000100
 800251c:	50000300 	.word	0x50000300

08002520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800254c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002552:	4a04      	ldr	r2, [pc, #16]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	60d3      	str	r3, [r2, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <__NVIC_GetPriorityGrouping+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 0307 	and.w	r3, r3, #7
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	db0b      	blt.n	80025ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4907      	ldr	r1, [pc, #28]	; (80025bc <__NVIC_EnableIRQ+0x38>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2001      	movs	r0, #1
 80025a6:	fa00 f202 	lsl.w	r2, r0, r2
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	; (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f7ff ff8e 	bl	80025c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff29 	bl	8002520 <__NVIC_SetPriorityGrouping>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026e4:	f7ff ff40 	bl	8002568 <__NVIC_GetPriorityGrouping>
 80026e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	6978      	ldr	r0, [r7, #20]
 80026f0:	f7ff ff90 	bl	8002614 <NVIC_EncodePriority>
 80026f4:	4602      	mov	r2, r0
 80026f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff5f 	bl	80025c0 <__NVIC_SetPriority>
}
 8002702:	bf00      	nop
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff33 	bl	8002584 <__NVIC_EnableIRQ>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ffa4 	bl	800267c <SysTick_Config>
 8002734:	4603      	mov	r3, r0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e08d      	b.n	800286e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	4b47      	ldr	r3, [pc, #284]	; (8002878 <HAL_DMA_Init+0x138>)
 800275a:	429a      	cmp	r2, r3
 800275c:	d80f      	bhi.n	800277e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	4b45      	ldr	r3, [pc, #276]	; (800287c <HAL_DMA_Init+0x13c>)
 8002766:	4413      	add	r3, r2
 8002768:	4a45      	ldr	r2, [pc, #276]	; (8002880 <HAL_DMA_Init+0x140>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	091b      	lsrs	r3, r3, #4
 8002770:	009a      	lsls	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a42      	ldr	r2, [pc, #264]	; (8002884 <HAL_DMA_Init+0x144>)
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
 800277c:	e00e      	b.n	800279c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	4b40      	ldr	r3, [pc, #256]	; (8002888 <HAL_DMA_Init+0x148>)
 8002786:	4413      	add	r3, r2
 8002788:	4a3d      	ldr	r2, [pc, #244]	; (8002880 <HAL_DMA_Init+0x140>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	091b      	lsrs	r3, r3, #4
 8002790:	009a      	lsls	r2, r3, #2
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a3c      	ldr	r2, [pc, #240]	; (800288c <HAL_DMA_Init+0x14c>)
 800279a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f9b6 	bl	8002b60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027fc:	d102      	bne.n	8002804 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002818:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d010      	beq.n	8002844 <HAL_DMA_Init+0x104>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b04      	cmp	r3, #4
 8002828:	d80c      	bhi.n	8002844 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f9d6 	bl	8002bdc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	e008      	b.n	8002856 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40020407 	.word	0x40020407
 800287c:	bffdfff8 	.word	0xbffdfff8
 8002880:	cccccccd 	.word	0xcccccccd
 8002884:	40020000 	.word	0x40020000
 8002888:	bffdfbf8 	.word	0xbffdfbf8
 800288c:	40020400 	.word	0x40020400

08002890 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
 800289c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_DMA_Start_IT+0x20>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e066      	b.n	800297e <HAL_DMA_Start_IT+0xee>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d155      	bne.n	8002970 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f8fb 	bl	8002ae4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 020e 	orr.w	r2, r2, #14
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e00f      	b.n	8002928 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0204 	bic.w	r2, r2, #4
 8002916:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 020a 	orr.w	r2, r2, #10
 8002926:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d007      	beq.n	8002946 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002944:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800295c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0201 	orr.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e005      	b.n	800297c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002978:	2302      	movs	r3, #2
 800297a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800297c:	7dfb      	ldrb	r3, [r7, #23]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	2204      	movs	r2, #4
 80029a8:	409a      	lsls	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d026      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x7a>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d021      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d107      	bne.n	80029da <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0204 	bic.w	r2, r2, #4
 80029d8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f003 021f 	and.w	r2, r3, #31
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	2104      	movs	r1, #4
 80029e8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d071      	beq.n	8002ada <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029fe:	e06c      	b.n	8002ada <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	2202      	movs	r2, #2
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d02e      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d029      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 020a 	bic.w	r2, r2, #10
 8002a3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a48:	f003 021f 	and.w	r2, r3, #31
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	2102      	movs	r1, #2
 8002a52:	fa01 f202 	lsl.w	r2, r1, r2
 8002a56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d038      	beq.n	8002ada <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a70:	e033      	b.n	8002ada <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d02a      	beq.n	8002adc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d025      	beq.n	8002adc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 020e 	bic.w	r2, r2, #14
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	2101      	movs	r1, #1
 8002aae:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d004      	beq.n	8002adc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ada:	bf00      	nop
 8002adc:	bf00      	nop
}
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002afa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d004      	beq.n	8002b0e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b0c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f003 021f 	and.w	r2, r3, #31
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d108      	bne.n	8002b44 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b42:	e007      	b.n	8002b54 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	60da      	str	r2, [r3, #12]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d802      	bhi.n	8002b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002b74:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	e001      	b.n	8002b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002b7c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	3b08      	subs	r3, #8
 8002b8a:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	009a      	lsls	r2, r3, #2
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a0b      	ldr	r2, [pc, #44]	; (8002bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002baa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40020407 	.word	0x40020407
 8002bcc:	40020800 	.word	0x40020800
 8002bd0:	40020820 	.word	0x40020820
 8002bd4:	cccccccd 	.word	0xcccccccd
 8002bd8:	40020880 	.word	0x40020880

08002bdc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a08      	ldr	r2, [pc, #32]	; (8002c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002bfe:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2201      	movs	r2, #1
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	1000823f 	.word	0x1000823f
 8002c20:	40020940 	.word	0x40020940

08002c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c32:	e15a      	b.n	8002eea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2101      	movs	r1, #1
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	4013      	ands	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 814c 	beq.w	8002ee4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d005      	beq.n	8002c64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d130      	bne.n	8002cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	091b      	lsrs	r3, r3, #4
 8002cb0:	f003 0201 	and.w	r2, r3, #1
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d017      	beq.n	8002d02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	2203      	movs	r2, #3
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d123      	bne.n	8002d56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	08da      	lsrs	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3208      	adds	r2, #8
 8002d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	220f      	movs	r2, #15
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	08da      	lsrs	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3208      	adds	r2, #8
 8002d50:	6939      	ldr	r1, [r7, #16]
 8002d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	2203      	movs	r2, #3
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 0203 	and.w	r2, r3, #3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 80a6 	beq.w	8002ee4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d98:	4b5b      	ldr	r3, [pc, #364]	; (8002f08 <HAL_GPIO_Init+0x2e4>)
 8002d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9c:	4a5a      	ldr	r2, [pc, #360]	; (8002f08 <HAL_GPIO_Init+0x2e4>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	6613      	str	r3, [r2, #96]	; 0x60
 8002da4:	4b58      	ldr	r3, [pc, #352]	; (8002f08 <HAL_GPIO_Init+0x2e4>)
 8002da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002db0:	4a56      	ldr	r2, [pc, #344]	; (8002f0c <HAL_GPIO_Init+0x2e8>)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	089b      	lsrs	r3, r3, #2
 8002db6:	3302      	adds	r3, #2
 8002db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	220f      	movs	r2, #15
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dda:	d01f      	beq.n	8002e1c <HAL_GPIO_Init+0x1f8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a4c      	ldr	r2, [pc, #304]	; (8002f10 <HAL_GPIO_Init+0x2ec>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d019      	beq.n	8002e18 <HAL_GPIO_Init+0x1f4>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a4b      	ldr	r2, [pc, #300]	; (8002f14 <HAL_GPIO_Init+0x2f0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d013      	beq.n	8002e14 <HAL_GPIO_Init+0x1f0>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a4a      	ldr	r2, [pc, #296]	; (8002f18 <HAL_GPIO_Init+0x2f4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00d      	beq.n	8002e10 <HAL_GPIO_Init+0x1ec>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a49      	ldr	r2, [pc, #292]	; (8002f1c <HAL_GPIO_Init+0x2f8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d007      	beq.n	8002e0c <HAL_GPIO_Init+0x1e8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a48      	ldr	r2, [pc, #288]	; (8002f20 <HAL_GPIO_Init+0x2fc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d101      	bne.n	8002e08 <HAL_GPIO_Init+0x1e4>
 8002e04:	2305      	movs	r3, #5
 8002e06:	e00a      	b.n	8002e1e <HAL_GPIO_Init+0x1fa>
 8002e08:	2306      	movs	r3, #6
 8002e0a:	e008      	b.n	8002e1e <HAL_GPIO_Init+0x1fa>
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	e006      	b.n	8002e1e <HAL_GPIO_Init+0x1fa>
 8002e10:	2303      	movs	r3, #3
 8002e12:	e004      	b.n	8002e1e <HAL_GPIO_Init+0x1fa>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e002      	b.n	8002e1e <HAL_GPIO_Init+0x1fa>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <HAL_GPIO_Init+0x1fa>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	f002 0203 	and.w	r2, r2, #3
 8002e24:	0092      	lsls	r2, r2, #2
 8002e26:	4093      	lsls	r3, r2
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e2e:	4937      	ldr	r1, [pc, #220]	; (8002f0c <HAL_GPIO_Init+0x2e8>)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	089b      	lsrs	r3, r3, #2
 8002e34:	3302      	adds	r3, #2
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e3c:	4b39      	ldr	r3, [pc, #228]	; (8002f24 <HAL_GPIO_Init+0x300>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e60:	4a30      	ldr	r2, [pc, #192]	; (8002f24 <HAL_GPIO_Init+0x300>)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e66:	4b2f      	ldr	r3, [pc, #188]	; (8002f24 <HAL_GPIO_Init+0x300>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4013      	ands	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e8a:	4a26      	ldr	r2, [pc, #152]	; (8002f24 <HAL_GPIO_Init+0x300>)
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e90:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <HAL_GPIO_Init+0x300>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eb4:	4a1b      	ldr	r2, [pc, #108]	; (8002f24 <HAL_GPIO_Init+0x300>)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002eba:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <HAL_GPIO_Init+0x300>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ede:	4a11      	ldr	r2, [pc, #68]	; (8002f24 <HAL_GPIO_Init+0x300>)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f47f ae9d 	bne.w	8002c34 <HAL_GPIO_Init+0x10>
  }
}
 8002efa:	bf00      	nop
 8002efc:	bf00      	nop
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40010000 	.word	0x40010000
 8002f10:	48000400 	.word	0x48000400
 8002f14:	48000800 	.word	0x48000800
 8002f18:	48000c00 	.word	0x48000c00
 8002f1c:	48001000 	.word	0x48001000
 8002f20:	48001400 	.word	0x48001400
 8002f24:	40010400 	.word	0x40010400

08002f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	807b      	strh	r3, [r7, #2]
 8002f34:	4613      	mov	r3, r2
 8002f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f38:	787b      	ldrb	r3, [r7, #1]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f3e:	887a      	ldrh	r2, [r7, #2]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f44:	e002      	b.n	8002f4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f46:	887a      	ldrh	r2, [r7, #2]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d141      	bne.n	8002fea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f66:	4b4b      	ldr	r3, [pc, #300]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f72:	d131      	bne.n	8002fd8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f74:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f7a:	4a46      	ldr	r2, [pc, #280]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f84:	4b43      	ldr	r3, [pc, #268]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f8c:	4a41      	ldr	r2, [pc, #260]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f94:	4b40      	ldr	r3, [pc, #256]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2232      	movs	r2, #50	; 0x32
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	4a3f      	ldr	r2, [pc, #252]	; (800309c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	0c9b      	lsrs	r3, r3, #18
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002faa:	e002      	b.n	8002fb2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fb2:	4b38      	ldr	r3, [pc, #224]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fbe:	d102      	bne.n	8002fc6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f2      	bne.n	8002fac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fc6:	4b33      	ldr	r3, [pc, #204]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd2:	d158      	bne.n	8003086 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e057      	b.n	8003088 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fd8:	4b2e      	ldr	r3, [pc, #184]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fde:	4a2d      	ldr	r2, [pc, #180]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fe4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fe8:	e04d      	b.n	8003086 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff0:	d141      	bne.n	8003076 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ff2:	4b28      	ldr	r3, [pc, #160]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffe:	d131      	bne.n	8003064 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003000:	4b24      	ldr	r3, [pc, #144]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003006:	4a23      	ldr	r2, [pc, #140]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003010:	4b20      	ldr	r3, [pc, #128]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003018:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800301e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003020:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2232      	movs	r2, #50	; 0x32
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	4a1c      	ldr	r2, [pc, #112]	; (800309c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	0c9b      	lsrs	r3, r3, #18
 8003032:	3301      	adds	r3, #1
 8003034:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003036:	e002      	b.n	800303e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3b01      	subs	r3, #1
 800303c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304a:	d102      	bne.n	8003052 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f2      	bne.n	8003038 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305e:	d112      	bne.n	8003086 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e011      	b.n	8003088 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800306a:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003070:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003074:	e007      	b.n	8003086 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003076:	4b07      	ldr	r3, [pc, #28]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800307e:	4a05      	ldr	r2, [pc, #20]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003080:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003084:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40007000 	.word	0x40007000
 8003098:	20000000 	.word	0x20000000
 800309c:	431bde83 	.word	0x431bde83

080030a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e306      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d075      	beq.n	80031aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030be:	4b97      	ldr	r3, [pc, #604]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030c8:	4b94      	ldr	r3, [pc, #592]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b0c      	cmp	r3, #12
 80030d6:	d102      	bne.n	80030de <HAL_RCC_OscConfig+0x3e>
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_OscConfig+0x44>
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d10b      	bne.n	80030fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	4b8d      	ldr	r3, [pc, #564]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d05b      	beq.n	80031a8 <HAL_RCC_OscConfig+0x108>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d157      	bne.n	80031a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e2e1      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d106      	bne.n	8003114 <HAL_RCC_OscConfig+0x74>
 8003106:	4b85      	ldr	r3, [pc, #532]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a84      	ldr	r2, [pc, #528]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e01d      	b.n	8003150 <HAL_RCC_OscConfig+0xb0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0x98>
 800311e:	4b7f      	ldr	r3, [pc, #508]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a7e      	ldr	r2, [pc, #504]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 8003124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b7c      	ldr	r3, [pc, #496]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a7b      	ldr	r2, [pc, #492]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0xb0>
 8003138:	4b78      	ldr	r3, [pc, #480]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a77      	ldr	r2, [pc, #476]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 800313e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b75      	ldr	r3, [pc, #468]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a74      	ldr	r2, [pc, #464]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 800314a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fd fe72 	bl	8000e40 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003160:	f7fd fe6e 	bl	8000e40 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e2a6      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003172:	4b6a      	ldr	r3, [pc, #424]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0xc0>
 800317e:	e014      	b.n	80031aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fd fe5e 	bl	8000e40 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003188:	f7fd fe5a 	bl	8000e40 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e292      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800319a:	4b60      	ldr	r3, [pc, #384]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0xe8>
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d075      	beq.n	80032a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b6:	4b59      	ldr	r3, [pc, #356]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031c0:	4b56      	ldr	r3, [pc, #344]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	2b0c      	cmp	r3, #12
 80031ce:	d102      	bne.n	80031d6 <HAL_RCC_OscConfig+0x136>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d002      	beq.n	80031dc <HAL_RCC_OscConfig+0x13c>
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d11f      	bne.n	800321c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031dc:	4b4f      	ldr	r3, [pc, #316]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_OscConfig+0x154>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e265      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	4b49      	ldr	r3, [pc, #292]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	061b      	lsls	r3, r3, #24
 8003202:	4946      	ldr	r1, [pc, #280]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003208:	4b45      	ldr	r3, [pc, #276]	; (8003320 <HAL_RCC_OscConfig+0x280>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd fdcb 	bl	8000da8 <HAL_InitTick>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d043      	beq.n	80032a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e251      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d023      	beq.n	800326c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003224:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a3c      	ldr	r2, [pc, #240]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 800322a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fd fe06 	bl	8000e40 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003238:	f7fd fe02 	bl	8000e40 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e23a      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800324a:	4b34      	ldr	r3, [pc, #208]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003256:	4b31      	ldr	r3, [pc, #196]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	061b      	lsls	r3, r3, #24
 8003264:	492d      	ldr	r1, [pc, #180]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 8003266:	4313      	orrs	r3, r2
 8003268:	604b      	str	r3, [r1, #4]
 800326a:	e01a      	b.n	80032a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800326c:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a2a      	ldr	r2, [pc, #168]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 8003272:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fd fde2 	bl	8000e40 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003280:	f7fd fdde 	bl	8000e40 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e216      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x1e0>
 800329e:	e000      	b.n	80032a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d041      	beq.n	8003332 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032b6:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 80032b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032bc:	4a17      	ldr	r2, [pc, #92]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c6:	f7fd fdbb 	bl	8000e40 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ce:	f7fd fdb7 	bl	8000e40 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e1ef      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032e0:	4b0e      	ldr	r3, [pc, #56]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 80032e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0ef      	beq.n	80032ce <HAL_RCC_OscConfig+0x22e>
 80032ee:	e020      	b.n	8003332 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 80032f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <HAL_RCC_OscConfig+0x27c>)
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003300:	f7fd fd9e 	bl	8000e40 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003306:	e00d      	b.n	8003324 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003308:	f7fd fd9a 	bl	8000e40 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d906      	bls.n	8003324 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e1d2      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003324:	4b8c      	ldr	r3, [pc, #560]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1ea      	bne.n	8003308 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80a6 	beq.w	800348c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003340:	2300      	movs	r3, #0
 8003342:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003344:	4b84      	ldr	r3, [pc, #528]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_OscConfig+0x2b4>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x2b6>
 8003354:	2300      	movs	r3, #0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800335a:	4b7f      	ldr	r3, [pc, #508]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	4a7e      	ldr	r2, [pc, #504]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003364:	6593      	str	r3, [r2, #88]	; 0x58
 8003366:	4b7c      	ldr	r3, [pc, #496]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003372:	2301      	movs	r3, #1
 8003374:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003376:	4b79      	ldr	r3, [pc, #484]	; (800355c <HAL_RCC_OscConfig+0x4bc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d118      	bne.n	80033b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003382:	4b76      	ldr	r3, [pc, #472]	; (800355c <HAL_RCC_OscConfig+0x4bc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a75      	ldr	r2, [pc, #468]	; (800355c <HAL_RCC_OscConfig+0x4bc>)
 8003388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338e:	f7fd fd57 	bl	8000e40 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003396:	f7fd fd53 	bl	8000e40 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e18b      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a8:	4b6c      	ldr	r3, [pc, #432]	; (800355c <HAL_RCC_OscConfig+0x4bc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d108      	bne.n	80033ce <HAL_RCC_OscConfig+0x32e>
 80033bc:	4b66      	ldr	r3, [pc, #408]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c2:	4a65      	ldr	r2, [pc, #404]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033cc:	e024      	b.n	8003418 <HAL_RCC_OscConfig+0x378>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b05      	cmp	r3, #5
 80033d4:	d110      	bne.n	80033f8 <HAL_RCC_OscConfig+0x358>
 80033d6:	4b60      	ldr	r3, [pc, #384]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033dc:	4a5e      	ldr	r2, [pc, #376]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80033de:	f043 0304 	orr.w	r3, r3, #4
 80033e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033e6:	4b5c      	ldr	r3, [pc, #368]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	4a5a      	ldr	r2, [pc, #360]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033f6:	e00f      	b.n	8003418 <HAL_RCC_OscConfig+0x378>
 80033f8:	4b57      	ldr	r3, [pc, #348]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	4a56      	ldr	r2, [pc, #344]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003408:	4b53      	ldr	r3, [pc, #332]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340e:	4a52      	ldr	r2, [pc, #328]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003410:	f023 0304 	bic.w	r3, r3, #4
 8003414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d016      	beq.n	800344e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003420:	f7fd fd0e 	bl	8000e40 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003426:	e00a      	b.n	800343e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003428:	f7fd fd0a 	bl	8000e40 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	; 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e140      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800343e:	4b46      	ldr	r3, [pc, #280]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ed      	beq.n	8003428 <HAL_RCC_OscConfig+0x388>
 800344c:	e015      	b.n	800347a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344e:	f7fd fcf7 	bl	8000e40 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fd fcf3 	bl	8000e40 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e129      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800346c:	4b3a      	ldr	r3, [pc, #232]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1ed      	bne.n	8003456 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800347a:	7ffb      	ldrb	r3, [r7, #31]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d105      	bne.n	800348c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003480:	4b35      	ldr	r3, [pc, #212]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	4a34      	ldr	r2, [pc, #208]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800348a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d03c      	beq.n	8003512 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01c      	beq.n	80034da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034a0:	4b2d      	ldr	r3, [pc, #180]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80034a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034a6:	4a2c      	ldr	r2, [pc, #176]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7fd fcc6 	bl	8000e40 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034b8:	f7fd fcc2 	bl	8000e40 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e0fa      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ca:	4b23      	ldr	r3, [pc, #140]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80034cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ef      	beq.n	80034b8 <HAL_RCC_OscConfig+0x418>
 80034d8:	e01b      	b.n	8003512 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034da:	4b1f      	ldr	r3, [pc, #124]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80034dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034e0:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ea:	f7fd fca9 	bl	8000e40 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034f2:	f7fd fca5 	bl	8000e40 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e0dd      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003504:	4b14      	ldr	r3, [pc, #80]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003506:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1ef      	bne.n	80034f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 80d1 	beq.w	80036be <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b0c      	cmp	r3, #12
 8003526:	f000 808b 	beq.w	8003640 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d15e      	bne.n	80035f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a08      	ldr	r2, [pc, #32]	; (8003558 <HAL_RCC_OscConfig+0x4b8>)
 8003538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800353c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353e:	f7fd fc7f 	bl	8000e40 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003544:	e00c      	b.n	8003560 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003546:	f7fd fc7b 	bl	8000e40 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d905      	bls.n	8003560 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e0b3      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
 8003558:	40021000 	.word	0x40021000
 800355c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003560:	4b59      	ldr	r3, [pc, #356]	; (80036c8 <HAL_RCC_OscConfig+0x628>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ec      	bne.n	8003546 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800356c:	4b56      	ldr	r3, [pc, #344]	; (80036c8 <HAL_RCC_OscConfig+0x628>)
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	4b56      	ldr	r3, [pc, #344]	; (80036cc <HAL_RCC_OscConfig+0x62c>)
 8003572:	4013      	ands	r3, r2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6a11      	ldr	r1, [r2, #32]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800357c:	3a01      	subs	r2, #1
 800357e:	0112      	lsls	r2, r2, #4
 8003580:	4311      	orrs	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003586:	0212      	lsls	r2, r2, #8
 8003588:	4311      	orrs	r1, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800358e:	0852      	lsrs	r2, r2, #1
 8003590:	3a01      	subs	r2, #1
 8003592:	0552      	lsls	r2, r2, #21
 8003594:	4311      	orrs	r1, r2
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800359a:	0852      	lsrs	r2, r2, #1
 800359c:	3a01      	subs	r2, #1
 800359e:	0652      	lsls	r2, r2, #25
 80035a0:	4311      	orrs	r1, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80035a6:	06d2      	lsls	r2, r2, #27
 80035a8:	430a      	orrs	r2, r1
 80035aa:	4947      	ldr	r1, [pc, #284]	; (80036c8 <HAL_RCC_OscConfig+0x628>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b0:	4b45      	ldr	r3, [pc, #276]	; (80036c8 <HAL_RCC_OscConfig+0x628>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a44      	ldr	r2, [pc, #272]	; (80036c8 <HAL_RCC_OscConfig+0x628>)
 80035b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035bc:	4b42      	ldr	r3, [pc, #264]	; (80036c8 <HAL_RCC_OscConfig+0x628>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a41      	ldr	r2, [pc, #260]	; (80036c8 <HAL_RCC_OscConfig+0x628>)
 80035c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fd fc3a 	bl	8000e40 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fd fc36 	bl	8000e40 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e06e      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e2:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <HAL_RCC_OscConfig+0x628>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x530>
 80035ee:	e066      	b.n	80036be <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f0:	4b35      	ldr	r3, [pc, #212]	; (80036c8 <HAL_RCC_OscConfig+0x628>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a34      	ldr	r2, [pc, #208]	; (80036c8 <HAL_RCC_OscConfig+0x628>)
 80035f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035fa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035fc:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <HAL_RCC_OscConfig+0x628>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4a31      	ldr	r2, [pc, #196]	; (80036c8 <HAL_RCC_OscConfig+0x628>)
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003608:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_RCC_OscConfig+0x628>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4a2e      	ldr	r2, [pc, #184]	; (80036c8 <HAL_RCC_OscConfig+0x628>)
 800360e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003616:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fd fc12 	bl	8000e40 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003620:	f7fd fc0e 	bl	8000e40 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e046      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003632:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <HAL_RCC_OscConfig+0x628>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x580>
 800363e:	e03e      	b.n	80036be <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e039      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800364c:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <HAL_RCC_OscConfig+0x628>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0203 	and.w	r2, r3, #3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	429a      	cmp	r2, r3
 800365e:	d12c      	bne.n	80036ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	3b01      	subs	r3, #1
 800366c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d123      	bne.n	80036ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d11b      	bne.n	80036ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d113      	bne.n	80036ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	3b01      	subs	r3, #1
 80036a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d109      	bne.n	80036ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	3b01      	subs	r3, #1
 80036b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d001      	beq.n	80036be <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	019f800c 	.word	0x019f800c

080036d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e11e      	b.n	8003926 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036e8:	4b91      	ldr	r3, [pc, #580]	; (8003930 <HAL_RCC_ClockConfig+0x260>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d910      	bls.n	8003718 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f6:	4b8e      	ldr	r3, [pc, #568]	; (8003930 <HAL_RCC_ClockConfig+0x260>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f023 020f 	bic.w	r2, r3, #15
 80036fe:	498c      	ldr	r1, [pc, #560]	; (8003930 <HAL_RCC_ClockConfig+0x260>)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	4b8a      	ldr	r3, [pc, #552]	; (8003930 <HAL_RCC_ClockConfig+0x260>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e106      	b.n	8003926 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d073      	beq.n	800380c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d129      	bne.n	8003780 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372c:	4b81      	ldr	r3, [pc, #516]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0f4      	b.n	8003926 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800373c:	f000 f99e 	bl	8003a7c <RCC_GetSysClockFreqFromPLLSource>
 8003740:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4a7c      	ldr	r2, [pc, #496]	; (8003938 <HAL_RCC_ClockConfig+0x268>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d93f      	bls.n	80037ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800374a:	4b7a      	ldr	r3, [pc, #488]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800375e:	2b00      	cmp	r3, #0
 8003760:	d033      	beq.n	80037ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003766:	2b00      	cmp	r3, #0
 8003768:	d12f      	bne.n	80037ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800376a:	4b72      	ldr	r3, [pc, #456]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003772:	4a70      	ldr	r2, [pc, #448]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 8003774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003778:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e024      	b.n	80037ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d107      	bne.n	8003798 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003788:	4b6a      	ldr	r3, [pc, #424]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d109      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0c6      	b.n	8003926 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003798:	4b66      	ldr	r3, [pc, #408]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0be      	b.n	8003926 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80037a8:	f000 f8ce 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 80037ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4a61      	ldr	r2, [pc, #388]	; (8003938 <HAL_RCC_ClockConfig+0x268>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d909      	bls.n	80037ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037b6:	4b5f      	ldr	r3, [pc, #380]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037be:	4a5d      	ldr	r2, [pc, #372]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 80037c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037ca:	4b5a      	ldr	r3, [pc, #360]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f023 0203 	bic.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4957      	ldr	r1, [pc, #348]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037dc:	f7fd fb30 	bl	8000e40 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e4:	f7fd fb2c 	bl	8000e40 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e095      	b.n	8003926 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	4b4e      	ldr	r3, [pc, #312]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 020c 	and.w	r2, r3, #12
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	429a      	cmp	r2, r3
 800380a:	d1eb      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d023      	beq.n	8003860 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003824:	4b43      	ldr	r3, [pc, #268]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	4a42      	ldr	r2, [pc, #264]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 800382a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800382e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d007      	beq.n	800384c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800383c:	4b3d      	ldr	r3, [pc, #244]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003844:	4a3b      	ldr	r2, [pc, #236]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 8003846:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800384a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384c:	4b39      	ldr	r3, [pc, #228]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	4936      	ldr	r1, [pc, #216]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
 800385e:	e008      	b.n	8003872 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b80      	cmp	r3, #128	; 0x80
 8003864:	d105      	bne.n	8003872 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003866:	4b33      	ldr	r3, [pc, #204]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	4a32      	ldr	r2, [pc, #200]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 800386c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003870:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003872:	4b2f      	ldr	r3, [pc, #188]	; (8003930 <HAL_RCC_ClockConfig+0x260>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d21d      	bcs.n	80038bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003880:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <HAL_RCC_ClockConfig+0x260>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f023 020f 	bic.w	r2, r3, #15
 8003888:	4929      	ldr	r1, [pc, #164]	; (8003930 <HAL_RCC_ClockConfig+0x260>)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	4313      	orrs	r3, r2
 800388e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003890:	f7fd fad6 	bl	8000e40 <HAL_GetTick>
 8003894:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003896:	e00a      	b.n	80038ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003898:	f7fd fad2 	bl	8000e40 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e03b      	b.n	8003926 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <HAL_RCC_ClockConfig+0x260>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d1ed      	bne.n	8003898 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4917      	ldr	r1, [pc, #92]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038e6:	4b13      	ldr	r3, [pc, #76]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	490f      	ldr	r1, [pc, #60]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038fa:	f000 f825 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 80038fe:	4602      	mov	r2, r0
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <HAL_RCC_ClockConfig+0x264>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	490c      	ldr	r1, [pc, #48]	; (800393c <HAL_RCC_ClockConfig+0x26c>)
 800390c:	5ccb      	ldrb	r3, [r1, r3]
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	fa22 f303 	lsr.w	r3, r2, r3
 8003916:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <HAL_RCC_ClockConfig+0x270>)
 8003918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <HAL_RCC_ClockConfig+0x274>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fd fa42 	bl	8000da8 <HAL_InitTick>
 8003924:	4603      	mov	r3, r0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40022000 	.word	0x40022000
 8003934:	40021000 	.word	0x40021000
 8003938:	04c4b400 	.word	0x04c4b400
 800393c:	08005d10 	.word	0x08005d10
 8003940:	20000000 	.word	0x20000000
 8003944:	20000004 	.word	0x20000004

08003948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800394e:	4b2c      	ldr	r3, [pc, #176]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b04      	cmp	r3, #4
 8003958:	d102      	bne.n	8003960 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800395a:	4b2a      	ldr	r3, [pc, #168]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xbc>)
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	e047      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003960:	4b27      	ldr	r3, [pc, #156]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 030c 	and.w	r3, r3, #12
 8003968:	2b08      	cmp	r3, #8
 800396a:	d102      	bne.n	8003972 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800396c:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xc0>)
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	e03e      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003972:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b0c      	cmp	r3, #12
 800397c:	d136      	bne.n	80039ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800397e:	4b20      	ldr	r3, [pc, #128]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003988:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	3301      	adds	r3, #1
 8003994:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d10c      	bne.n	80039b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800399c:	4a1a      	ldr	r2, [pc, #104]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xc0>)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a4:	4a16      	ldr	r2, [pc, #88]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039a6:	68d2      	ldr	r2, [r2, #12]
 80039a8:	0a12      	lsrs	r2, r2, #8
 80039aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039ae:	fb02 f303 	mul.w	r3, r2, r3
 80039b2:	617b      	str	r3, [r7, #20]
      break;
 80039b4:	e00c      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039b6:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80039be:	4a10      	ldr	r2, [pc, #64]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c0:	68d2      	ldr	r2, [r2, #12]
 80039c2:	0a12      	lsrs	r2, r2, #8
 80039c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039c8:	fb02 f303 	mul.w	r3, r2, r3
 80039cc:	617b      	str	r3, [r7, #20]
      break;
 80039ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0e5b      	lsrs	r3, r3, #25
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	3301      	adds	r3, #1
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	e001      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039f0:	693b      	ldr	r3, [r7, #16]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000
 8003a04:	00f42400 	.word	0x00f42400
 8003a08:	007a1200 	.word	0x007a1200

08003a0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000000 	.word	0x20000000

08003a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a28:	f7ff fff0 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	0a1b      	lsrs	r3, r3, #8
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	4904      	ldr	r1, [pc, #16]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a3a:	5ccb      	ldrb	r3, [r1, r3]
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	08005d20 	.word	0x08005d20

08003a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a54:	f7ff ffda 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	0adb      	lsrs	r3, r3, #11
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	4904      	ldr	r1, [pc, #16]	; (8003a78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a66:	5ccb      	ldrb	r3, [r1, r3]
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000
 8003a78:	08005d20 	.word	0x08005d20

08003a7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a82:	4b1e      	ldr	r3, [pc, #120]	; (8003afc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a8c:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	091b      	lsrs	r3, r3, #4
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	3301      	adds	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d10c      	bne.n	8003aba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003aa0:	4a17      	ldr	r2, [pc, #92]	; (8003b00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	4a14      	ldr	r2, [pc, #80]	; (8003afc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aaa:	68d2      	ldr	r2, [r2, #12]
 8003aac:	0a12      	lsrs	r2, r2, #8
 8003aae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	617b      	str	r3, [r7, #20]
    break;
 8003ab8:	e00c      	b.n	8003ad4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003aba:	4a12      	ldr	r2, [pc, #72]	; (8003b04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac2:	4a0e      	ldr	r2, [pc, #56]	; (8003afc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ac4:	68d2      	ldr	r2, [r2, #12]
 8003ac6:	0a12      	lsrs	r2, r2, #8
 8003ac8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003acc:	fb02 f303 	mul.w	r3, r2, r3
 8003ad0:	617b      	str	r3, [r7, #20]
    break;
 8003ad2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ad4:	4b09      	ldr	r3, [pc, #36]	; (8003afc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	0e5b      	lsrs	r3, r3, #25
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003aee:	687b      	ldr	r3, [r7, #4]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	40021000 	.word	0x40021000
 8003b00:	007a1200 	.word	0x007a1200
 8003b04:	00f42400 	.word	0x00f42400

08003b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b10:	2300      	movs	r3, #0
 8003b12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b14:	2300      	movs	r3, #0
 8003b16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8098 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b26:	2300      	movs	r3, #0
 8003b28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2a:	4b43      	ldr	r3, [pc, #268]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10d      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b36:	4b40      	ldr	r3, [pc, #256]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3a:	4a3f      	ldr	r2, [pc, #252]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b40:	6593      	str	r3, [r2, #88]	; 0x58
 8003b42:	4b3d      	ldr	r3, [pc, #244]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b52:	4b3a      	ldr	r3, [pc, #232]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a39      	ldr	r2, [pc, #228]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b5e:	f7fd f96f 	bl	8000e40 <HAL_GetTick>
 8003b62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b64:	e009      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b66:	f7fd f96b 	bl	8000e40 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d902      	bls.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	74fb      	strb	r3, [r7, #19]
        break;
 8003b78:	e005      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b7a:	4b30      	ldr	r3, [pc, #192]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0ef      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b86:	7cfb      	ldrb	r3, [r7, #19]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d159      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b8c:	4b2a      	ldr	r3, [pc, #168]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01e      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d019      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ba8:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bb4:	4b20      	ldr	r3, [pc, #128]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bba:	4a1f      	ldr	r2, [pc, #124]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bc4:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bca:	4a1b      	ldr	r2, [pc, #108]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bd4:	4a18      	ldr	r2, [pc, #96]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d016      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be6:	f7fd f92b 	bl	8000e40 <HAL_GetTick>
 8003bea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bec:	e00b      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bee:	f7fd f927 	bl	8000e40 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d902      	bls.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	74fb      	strb	r3, [r7, #19]
            break;
 8003c04:	e006      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0ec      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10b      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c1a:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	4903      	ldr	r1, [pc, #12]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c30:	e008      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c32:	7cfb      	ldrb	r3, [r7, #19]
 8003c34:	74bb      	strb	r3, [r7, #18]
 8003c36:	e005      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c44:	7c7b      	ldrb	r3, [r7, #17]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d105      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4a:	4ba6      	ldr	r3, [pc, #664]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4e:	4aa5      	ldr	r2, [pc, #660]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c62:	4ba0      	ldr	r3, [pc, #640]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c68:	f023 0203 	bic.w	r2, r3, #3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	499c      	ldr	r1, [pc, #624]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c84:	4b97      	ldr	r3, [pc, #604]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8a:	f023 020c 	bic.w	r2, r3, #12
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	4994      	ldr	r1, [pc, #592]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ca6:	4b8f      	ldr	r3, [pc, #572]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	498b      	ldr	r1, [pc, #556]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cc8:	4b86      	ldr	r3, [pc, #536]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	4983      	ldr	r1, [pc, #524]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cea:	4b7e      	ldr	r3, [pc, #504]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	497a      	ldr	r1, [pc, #488]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d0c:	4b75      	ldr	r3, [pc, #468]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	4972      	ldr	r1, [pc, #456]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d2e:	4b6d      	ldr	r3, [pc, #436]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	4969      	ldr	r1, [pc, #420]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d50:	4b64      	ldr	r3, [pc, #400]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	4961      	ldr	r1, [pc, #388]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d72:	4b5c      	ldr	r3, [pc, #368]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	4958      	ldr	r1, [pc, #352]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d015      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d94:	4b53      	ldr	r3, [pc, #332]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	4950      	ldr	r1, [pc, #320]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db4:	4b4b      	ldr	r3, [pc, #300]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a4a      	ldr	r2, [pc, #296]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dbe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d015      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dcc:	4b45      	ldr	r3, [pc, #276]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	4942      	ldr	r1, [pc, #264]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dea:	d105      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dec:	4b3d      	ldr	r3, [pc, #244]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4a3c      	ldr	r2, [pc, #240]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003df6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d015      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e04:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	4934      	ldr	r1, [pc, #208]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e22:	d105      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e24:	4b2f      	ldr	r3, [pc, #188]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a2e      	ldr	r2, [pc, #184]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d015      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e3c:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4a:	4926      	ldr	r1, [pc, #152]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e5a:	d105      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e5c:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a20      	ldr	r2, [pc, #128]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d015      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e74:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	4918      	ldr	r1, [pc, #96]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e92:	d105      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e94:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4a12      	ldr	r2, [pc, #72]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d015      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	490a      	ldr	r1, [pc, #40]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eca:	d105      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4a04      	ldr	r2, [pc, #16]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003ed8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40021000 	.word	0x40021000

08003ee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e042      	b.n	8003f80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7fc fde3 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2224      	movs	r2, #36	; 0x24
 8003f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f8c2 	bl	80040b4 <UART_SetConfig>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e022      	b.n	8003f80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fb82 	bl	800464c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fc09 	bl	8004790 <UART_CheckIdleState>
 8003f7e:	4603      	mov	r3, r0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08a      	sub	sp, #40	; 0x28
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f9e:	2b20      	cmp	r3, #32
 8003fa0:	f040 8083 	bne.w	80040aa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_UART_Transmit+0x28>
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e07b      	b.n	80040ac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_UART_Transmit+0x3a>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e074      	b.n	80040ac <HAL_UART_Transmit+0x124>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2221      	movs	r2, #33	; 0x21
 8003fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fda:	f7fc ff31 	bl	8000e40 <HAL_GetTick>
 8003fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	88fa      	ldrh	r2, [r7, #6]
 8003fe4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff8:	d108      	bne.n	800400c <HAL_UART_Transmit+0x84>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d104      	bne.n	800400c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	e003      	b.n	8004014 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004010:	2300      	movs	r3, #0
 8004012:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800401c:	e02c      	b.n	8004078 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2200      	movs	r2, #0
 8004026:	2180      	movs	r1, #128	; 0x80
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fbfc 	bl	8004826 <UART_WaitOnFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e039      	b.n	80040ac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10b      	bne.n	8004056 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800404c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	3302      	adds	r3, #2
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	e007      	b.n	8004066 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	781a      	ldrb	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	3301      	adds	r3, #1
 8004064:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1cc      	bne.n	800401e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2200      	movs	r2, #0
 800408c:	2140      	movs	r1, #64	; 0x40
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 fbc9 	bl	8004826 <UART_WaitOnFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e006      	b.n	80040ac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e000      	b.n	80040ac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80040aa:	2302      	movs	r3, #2
  }
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3720      	adds	r7, #32
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040b8:	b08c      	sub	sp, #48	; 0x30
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	431a      	orrs	r2, r3
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	4313      	orrs	r3, r2
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4bab      	ldr	r3, [pc, #684]	; (8004390 <UART_SetConfig+0x2dc>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040ec:	430b      	orrs	r3, r1
 80040ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4aa0      	ldr	r2, [pc, #640]	; (8004394 <UART_SetConfig+0x2e0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d004      	beq.n	8004120 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800411c:	4313      	orrs	r3, r2
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800412a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004134:	430b      	orrs	r3, r1
 8004136:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	f023 010f 	bic.w	r1, r3, #15
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a91      	ldr	r2, [pc, #580]	; (8004398 <UART_SetConfig+0x2e4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d125      	bne.n	80041a4 <UART_SetConfig+0xf0>
 8004158:	4b90      	ldr	r3, [pc, #576]	; (800439c <UART_SetConfig+0x2e8>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b03      	cmp	r3, #3
 8004164:	d81a      	bhi.n	800419c <UART_SetConfig+0xe8>
 8004166:	a201      	add	r2, pc, #4	; (adr r2, 800416c <UART_SetConfig+0xb8>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	0800417d 	.word	0x0800417d
 8004170:	0800418d 	.word	0x0800418d
 8004174:	08004185 	.word	0x08004185
 8004178:	08004195 	.word	0x08004195
 800417c:	2301      	movs	r3, #1
 800417e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004182:	e0d6      	b.n	8004332 <UART_SetConfig+0x27e>
 8004184:	2302      	movs	r3, #2
 8004186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800418a:	e0d2      	b.n	8004332 <UART_SetConfig+0x27e>
 800418c:	2304      	movs	r3, #4
 800418e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004192:	e0ce      	b.n	8004332 <UART_SetConfig+0x27e>
 8004194:	2308      	movs	r3, #8
 8004196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800419a:	e0ca      	b.n	8004332 <UART_SetConfig+0x27e>
 800419c:	2310      	movs	r3, #16
 800419e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041a2:	e0c6      	b.n	8004332 <UART_SetConfig+0x27e>
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a7d      	ldr	r2, [pc, #500]	; (80043a0 <UART_SetConfig+0x2ec>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d138      	bne.n	8004220 <UART_SetConfig+0x16c>
 80041ae:	4b7b      	ldr	r3, [pc, #492]	; (800439c <UART_SetConfig+0x2e8>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	2b0c      	cmp	r3, #12
 80041ba:	d82d      	bhi.n	8004218 <UART_SetConfig+0x164>
 80041bc:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <UART_SetConfig+0x110>)
 80041be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c2:	bf00      	nop
 80041c4:	080041f9 	.word	0x080041f9
 80041c8:	08004219 	.word	0x08004219
 80041cc:	08004219 	.word	0x08004219
 80041d0:	08004219 	.word	0x08004219
 80041d4:	08004209 	.word	0x08004209
 80041d8:	08004219 	.word	0x08004219
 80041dc:	08004219 	.word	0x08004219
 80041e0:	08004219 	.word	0x08004219
 80041e4:	08004201 	.word	0x08004201
 80041e8:	08004219 	.word	0x08004219
 80041ec:	08004219 	.word	0x08004219
 80041f0:	08004219 	.word	0x08004219
 80041f4:	08004211 	.word	0x08004211
 80041f8:	2300      	movs	r3, #0
 80041fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041fe:	e098      	b.n	8004332 <UART_SetConfig+0x27e>
 8004200:	2302      	movs	r3, #2
 8004202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004206:	e094      	b.n	8004332 <UART_SetConfig+0x27e>
 8004208:	2304      	movs	r3, #4
 800420a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800420e:	e090      	b.n	8004332 <UART_SetConfig+0x27e>
 8004210:	2308      	movs	r3, #8
 8004212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004216:	e08c      	b.n	8004332 <UART_SetConfig+0x27e>
 8004218:	2310      	movs	r3, #16
 800421a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800421e:	e088      	b.n	8004332 <UART_SetConfig+0x27e>
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a5f      	ldr	r2, [pc, #380]	; (80043a4 <UART_SetConfig+0x2f0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d125      	bne.n	8004276 <UART_SetConfig+0x1c2>
 800422a:	4b5c      	ldr	r3, [pc, #368]	; (800439c <UART_SetConfig+0x2e8>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004230:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004234:	2b30      	cmp	r3, #48	; 0x30
 8004236:	d016      	beq.n	8004266 <UART_SetConfig+0x1b2>
 8004238:	2b30      	cmp	r3, #48	; 0x30
 800423a:	d818      	bhi.n	800426e <UART_SetConfig+0x1ba>
 800423c:	2b20      	cmp	r3, #32
 800423e:	d00a      	beq.n	8004256 <UART_SetConfig+0x1a2>
 8004240:	2b20      	cmp	r3, #32
 8004242:	d814      	bhi.n	800426e <UART_SetConfig+0x1ba>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <UART_SetConfig+0x19a>
 8004248:	2b10      	cmp	r3, #16
 800424a:	d008      	beq.n	800425e <UART_SetConfig+0x1aa>
 800424c:	e00f      	b.n	800426e <UART_SetConfig+0x1ba>
 800424e:	2300      	movs	r3, #0
 8004250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004254:	e06d      	b.n	8004332 <UART_SetConfig+0x27e>
 8004256:	2302      	movs	r3, #2
 8004258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800425c:	e069      	b.n	8004332 <UART_SetConfig+0x27e>
 800425e:	2304      	movs	r3, #4
 8004260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004264:	e065      	b.n	8004332 <UART_SetConfig+0x27e>
 8004266:	2308      	movs	r3, #8
 8004268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800426c:	e061      	b.n	8004332 <UART_SetConfig+0x27e>
 800426e:	2310      	movs	r3, #16
 8004270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004274:	e05d      	b.n	8004332 <UART_SetConfig+0x27e>
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a4b      	ldr	r2, [pc, #300]	; (80043a8 <UART_SetConfig+0x2f4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d125      	bne.n	80042cc <UART_SetConfig+0x218>
 8004280:	4b46      	ldr	r3, [pc, #280]	; (800439c <UART_SetConfig+0x2e8>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800428a:	2bc0      	cmp	r3, #192	; 0xc0
 800428c:	d016      	beq.n	80042bc <UART_SetConfig+0x208>
 800428e:	2bc0      	cmp	r3, #192	; 0xc0
 8004290:	d818      	bhi.n	80042c4 <UART_SetConfig+0x210>
 8004292:	2b80      	cmp	r3, #128	; 0x80
 8004294:	d00a      	beq.n	80042ac <UART_SetConfig+0x1f8>
 8004296:	2b80      	cmp	r3, #128	; 0x80
 8004298:	d814      	bhi.n	80042c4 <UART_SetConfig+0x210>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <UART_SetConfig+0x1f0>
 800429e:	2b40      	cmp	r3, #64	; 0x40
 80042a0:	d008      	beq.n	80042b4 <UART_SetConfig+0x200>
 80042a2:	e00f      	b.n	80042c4 <UART_SetConfig+0x210>
 80042a4:	2300      	movs	r3, #0
 80042a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042aa:	e042      	b.n	8004332 <UART_SetConfig+0x27e>
 80042ac:	2302      	movs	r3, #2
 80042ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042b2:	e03e      	b.n	8004332 <UART_SetConfig+0x27e>
 80042b4:	2304      	movs	r3, #4
 80042b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ba:	e03a      	b.n	8004332 <UART_SetConfig+0x27e>
 80042bc:	2308      	movs	r3, #8
 80042be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042c2:	e036      	b.n	8004332 <UART_SetConfig+0x27e>
 80042c4:	2310      	movs	r3, #16
 80042c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ca:	e032      	b.n	8004332 <UART_SetConfig+0x27e>
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a30      	ldr	r2, [pc, #192]	; (8004394 <UART_SetConfig+0x2e0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d12a      	bne.n	800432c <UART_SetConfig+0x278>
 80042d6:	4b31      	ldr	r3, [pc, #196]	; (800439c <UART_SetConfig+0x2e8>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042e4:	d01a      	beq.n	800431c <UART_SetConfig+0x268>
 80042e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ea:	d81b      	bhi.n	8004324 <UART_SetConfig+0x270>
 80042ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f0:	d00c      	beq.n	800430c <UART_SetConfig+0x258>
 80042f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f6:	d815      	bhi.n	8004324 <UART_SetConfig+0x270>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <UART_SetConfig+0x250>
 80042fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004300:	d008      	beq.n	8004314 <UART_SetConfig+0x260>
 8004302:	e00f      	b.n	8004324 <UART_SetConfig+0x270>
 8004304:	2300      	movs	r3, #0
 8004306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800430a:	e012      	b.n	8004332 <UART_SetConfig+0x27e>
 800430c:	2302      	movs	r3, #2
 800430e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004312:	e00e      	b.n	8004332 <UART_SetConfig+0x27e>
 8004314:	2304      	movs	r3, #4
 8004316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800431a:	e00a      	b.n	8004332 <UART_SetConfig+0x27e>
 800431c:	2308      	movs	r3, #8
 800431e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004322:	e006      	b.n	8004332 <UART_SetConfig+0x27e>
 8004324:	2310      	movs	r3, #16
 8004326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800432a:	e002      	b.n	8004332 <UART_SetConfig+0x27e>
 800432c:	2310      	movs	r3, #16
 800432e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a17      	ldr	r2, [pc, #92]	; (8004394 <UART_SetConfig+0x2e0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	f040 80a8 	bne.w	800448e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800433e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004342:	2b08      	cmp	r3, #8
 8004344:	d834      	bhi.n	80043b0 <UART_SetConfig+0x2fc>
 8004346:	a201      	add	r2, pc, #4	; (adr r2, 800434c <UART_SetConfig+0x298>)
 8004348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434c:	08004371 	.word	0x08004371
 8004350:	080043b1 	.word	0x080043b1
 8004354:	08004379 	.word	0x08004379
 8004358:	080043b1 	.word	0x080043b1
 800435c:	0800437f 	.word	0x0800437f
 8004360:	080043b1 	.word	0x080043b1
 8004364:	080043b1 	.word	0x080043b1
 8004368:	080043b1 	.word	0x080043b1
 800436c:	08004387 	.word	0x08004387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004370:	f7ff fb58 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 8004374:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004376:	e021      	b.n	80043bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <UART_SetConfig+0x2f8>)
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800437c:	e01e      	b.n	80043bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800437e:	f7ff fae3 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8004382:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004384:	e01a      	b.n	80043bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800438c:	e016      	b.n	80043bc <UART_SetConfig+0x308>
 800438e:	bf00      	nop
 8004390:	cfff69f3 	.word	0xcfff69f3
 8004394:	40008000 	.word	0x40008000
 8004398:	40013800 	.word	0x40013800
 800439c:	40021000 	.word	0x40021000
 80043a0:	40004400 	.word	0x40004400
 80043a4:	40004800 	.word	0x40004800
 80043a8:	40004c00 	.word	0x40004c00
 80043ac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80043ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 812a 	beq.w	8004618 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	4a9e      	ldr	r2, [pc, #632]	; (8004644 <UART_SetConfig+0x590>)
 80043ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043ce:	461a      	mov	r2, r3
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4413      	add	r3, r2
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d305      	bcc.n	80043f4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d903      	bls.n	80043fc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80043fa:	e10d      	b.n	8004618 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	2200      	movs	r2, #0
 8004400:	60bb      	str	r3, [r7, #8]
 8004402:	60fa      	str	r2, [r7, #12]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	4a8e      	ldr	r2, [pc, #568]	; (8004644 <UART_SetConfig+0x590>)
 800440a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800440e:	b29b      	uxth	r3, r3
 8004410:	2200      	movs	r2, #0
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	607a      	str	r2, [r7, #4]
 8004416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800441a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800441e:	f7fb ff4f 	bl	80002c0 <__aeabi_uldivmod>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4610      	mov	r0, r2
 8004428:	4619      	mov	r1, r3
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	020b      	lsls	r3, r1, #8
 8004434:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004438:	0202      	lsls	r2, r0, #8
 800443a:	6979      	ldr	r1, [r7, #20]
 800443c:	6849      	ldr	r1, [r1, #4]
 800443e:	0849      	lsrs	r1, r1, #1
 8004440:	2000      	movs	r0, #0
 8004442:	460c      	mov	r4, r1
 8004444:	4605      	mov	r5, r0
 8004446:	eb12 0804 	adds.w	r8, r2, r4
 800444a:	eb43 0905 	adc.w	r9, r3, r5
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	469a      	mov	sl, r3
 8004456:	4693      	mov	fp, r2
 8004458:	4652      	mov	r2, sl
 800445a:	465b      	mov	r3, fp
 800445c:	4640      	mov	r0, r8
 800445e:	4649      	mov	r1, r9
 8004460:	f7fb ff2e 	bl	80002c0 <__aeabi_uldivmod>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4613      	mov	r3, r2
 800446a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004472:	d308      	bcc.n	8004486 <UART_SetConfig+0x3d2>
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800447a:	d204      	bcs.n	8004486 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6a3a      	ldr	r2, [r7, #32]
 8004482:	60da      	str	r2, [r3, #12]
 8004484:	e0c8      	b.n	8004618 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800448c:	e0c4      	b.n	8004618 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004496:	d167      	bne.n	8004568 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004498:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800449c:	2b08      	cmp	r3, #8
 800449e:	d828      	bhi.n	80044f2 <UART_SetConfig+0x43e>
 80044a0:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <UART_SetConfig+0x3f4>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044cd 	.word	0x080044cd
 80044ac:	080044d5 	.word	0x080044d5
 80044b0:	080044dd 	.word	0x080044dd
 80044b4:	080044f3 	.word	0x080044f3
 80044b8:	080044e3 	.word	0x080044e3
 80044bc:	080044f3 	.word	0x080044f3
 80044c0:	080044f3 	.word	0x080044f3
 80044c4:	080044f3 	.word	0x080044f3
 80044c8:	080044eb 	.word	0x080044eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044cc:	f7ff faaa 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 80044d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044d2:	e014      	b.n	80044fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d4:	f7ff fabc 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 80044d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044da:	e010      	b.n	80044fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044dc:	4b5a      	ldr	r3, [pc, #360]	; (8004648 <UART_SetConfig+0x594>)
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044e0:	e00d      	b.n	80044fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e2:	f7ff fa31 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 80044e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044e8:	e009      	b.n	80044fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044f0:	e005      	b.n	80044fe <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80044fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8089 	beq.w	8004618 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	4a4e      	ldr	r2, [pc, #312]	; (8004644 <UART_SetConfig+0x590>)
 800450c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004510:	461a      	mov	r2, r3
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	fbb3 f3f2 	udiv	r3, r3, r2
 8004518:	005a      	lsls	r2, r3, #1
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	441a      	add	r2, r3
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	fbb2 f3f3 	udiv	r3, r2, r3
 800452a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	2b0f      	cmp	r3, #15
 8004530:	d916      	bls.n	8004560 <UART_SetConfig+0x4ac>
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004538:	d212      	bcs.n	8004560 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	b29b      	uxth	r3, r3
 800453e:	f023 030f 	bic.w	r3, r3, #15
 8004542:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	085b      	lsrs	r3, r3, #1
 8004548:	b29b      	uxth	r3, r3
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	b29a      	uxth	r2, r3
 8004550:	8bfb      	ldrh	r3, [r7, #30]
 8004552:	4313      	orrs	r3, r2
 8004554:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	8bfa      	ldrh	r2, [r7, #30]
 800455c:	60da      	str	r2, [r3, #12]
 800455e:	e05b      	b.n	8004618 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004566:	e057      	b.n	8004618 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004568:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800456c:	2b08      	cmp	r3, #8
 800456e:	d828      	bhi.n	80045c2 <UART_SetConfig+0x50e>
 8004570:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <UART_SetConfig+0x4c4>)
 8004572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004576:	bf00      	nop
 8004578:	0800459d 	.word	0x0800459d
 800457c:	080045a5 	.word	0x080045a5
 8004580:	080045ad 	.word	0x080045ad
 8004584:	080045c3 	.word	0x080045c3
 8004588:	080045b3 	.word	0x080045b3
 800458c:	080045c3 	.word	0x080045c3
 8004590:	080045c3 	.word	0x080045c3
 8004594:	080045c3 	.word	0x080045c3
 8004598:	080045bb 	.word	0x080045bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800459c:	f7ff fa42 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 80045a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045a2:	e014      	b.n	80045ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045a4:	f7ff fa54 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 80045a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045aa:	e010      	b.n	80045ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045ac:	4b26      	ldr	r3, [pc, #152]	; (8004648 <UART_SetConfig+0x594>)
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045b0:	e00d      	b.n	80045ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045b2:	f7ff f9c9 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 80045b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045b8:	e009      	b.n	80045ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045c0:	e005      	b.n	80045ce <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80045cc:	bf00      	nop
    }

    if (pclk != 0U)
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d021      	beq.n	8004618 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	4a1a      	ldr	r2, [pc, #104]	; (8004644 <UART_SetConfig+0x590>)
 80045da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045de:	461a      	mov	r2, r3
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	441a      	add	r2, r3
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	2b0f      	cmp	r3, #15
 80045fc:	d909      	bls.n	8004612 <UART_SetConfig+0x55e>
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004604:	d205      	bcs.n	8004612 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	b29a      	uxth	r2, r3
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60da      	str	r2, [r3, #12]
 8004610:	e002      	b.n	8004618 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2201      	movs	r2, #1
 800461c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2201      	movs	r2, #1
 8004624:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2200      	movs	r2, #0
 800462c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2200      	movs	r2, #0
 8004632:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004634:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004638:	4618      	mov	r0, r3
 800463a:	3730      	adds	r7, #48	; 0x30
 800463c:	46bd      	mov	sp, r7
 800463e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004642:	bf00      	nop
 8004644:	08005d28 	.word	0x08005d28
 8004648:	00f42400 	.word	0x00f42400

0800464c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01a      	beq.n	8004762 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800474a:	d10a      	bne.n	8004762 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	605a      	str	r2, [r3, #4]
  }
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af02      	add	r7, sp, #8
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047a0:	f7fc fb4e 	bl	8000e40 <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d10e      	bne.n	80047d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f82f 	bl	8004826 <UART_WaitOnFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e025      	b.n	800481e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d10e      	bne.n	80047fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f819 	bl	8004826 <UART_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e00f      	b.n	800481e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b09c      	sub	sp, #112	; 0x70
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	603b      	str	r3, [r7, #0]
 8004832:	4613      	mov	r3, r2
 8004834:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004836:	e0a9      	b.n	800498c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483e:	f000 80a5 	beq.w	800498c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004842:	f7fc fafd 	bl	8000e40 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800484e:	429a      	cmp	r2, r3
 8004850:	d302      	bcc.n	8004858 <UART_WaitOnFlagUntilTimeout+0x32>
 8004852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004854:	2b00      	cmp	r3, #0
 8004856:	d140      	bne.n	80048da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004868:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800486c:	667b      	str	r3, [r7, #100]	; 0x64
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004876:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004878:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800487c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e6      	bne.n	8004858 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3308      	adds	r3, #8
 8004890:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489c:	f023 0301 	bic.w	r3, r3, #1
 80048a0:	663b      	str	r3, [r7, #96]	; 0x60
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3308      	adds	r3, #8
 80048a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80048ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80048b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e5      	bne.n	800488a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e069      	b.n	80049ae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d051      	beq.n	800498c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f6:	d149      	bne.n	800498c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004900:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004916:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004920:	637b      	str	r3, [r7, #52]	; 0x34
 8004922:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e6      	bne.n	8004902 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3308      	adds	r3, #8
 800493a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	613b      	str	r3, [r7, #16]
   return(result);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	66bb      	str	r3, [r7, #104]	; 0x68
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3308      	adds	r3, #8
 8004952:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004954:	623a      	str	r2, [r7, #32]
 8004956:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	69f9      	ldr	r1, [r7, #28]
 800495a:	6a3a      	ldr	r2, [r7, #32]
 800495c:	e841 2300 	strex	r3, r2, [r1]
 8004960:	61bb      	str	r3, [r7, #24]
   return(result);
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e5      	bne.n	8004934 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e010      	b.n	80049ae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	69da      	ldr	r2, [r3, #28]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	4013      	ands	r3, r2
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	429a      	cmp	r2, r3
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	f43f af46 	beq.w	8004838 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3770      	adds	r7, #112	; 0x70
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_UARTEx_DisableFifoMode+0x16>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e027      	b.n	8004a1c <HAL_UARTEx_DisableFifoMode+0x66>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2224      	movs	r2, #36	; 0x24
 80049d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0201 	bic.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80049fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e02d      	b.n	8004a9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2224      	movs	r2, #36	; 0x24
 8004a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0201 	bic.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f84f 	bl	8004b20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e02d      	b.n	8004b18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2224      	movs	r2, #36	; 0x24
 8004ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0201 	bic.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f811 	bl	8004b20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d108      	bne.n	8004b42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b40:	e031      	b.n	8004ba6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b42:	2308      	movs	r3, #8
 8004b44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b46:	2308      	movs	r3, #8
 8004b48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	0e5b      	lsrs	r3, r3, #25
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	0f5b      	lsrs	r3, r3, #29
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b6a:	7bbb      	ldrb	r3, [r7, #14]
 8004b6c:	7b3a      	ldrb	r2, [r7, #12]
 8004b6e:	4911      	ldr	r1, [pc, #68]	; (8004bb4 <UARTEx_SetNbDataToProcess+0x94>)
 8004b70:	5c8a      	ldrb	r2, [r1, r2]
 8004b72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b76:	7b3a      	ldrb	r2, [r7, #12]
 8004b78:	490f      	ldr	r1, [pc, #60]	; (8004bb8 <UARTEx_SetNbDataToProcess+0x98>)
 8004b7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	7b7a      	ldrb	r2, [r7, #13]
 8004b8c:	4909      	ldr	r1, [pc, #36]	; (8004bb4 <UARTEx_SetNbDataToProcess+0x94>)
 8004b8e:	5c8a      	ldrb	r2, [r1, r2]
 8004b90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b94:	7b7a      	ldrb	r2, [r7, #13]
 8004b96:	4908      	ldr	r1, [pc, #32]	; (8004bb8 <UARTEx_SetNbDataToProcess+0x98>)
 8004b98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ba6:	bf00      	nop
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	08005d40 	.word	0x08005d40
 8004bb8:	08005d48 	.word	0x08005d48

08004bbc <__errno>:
 8004bbc:	4b01      	ldr	r3, [pc, #4]	; (8004bc4 <__errno+0x8>)
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	2000000c 	.word	0x2000000c

08004bc8 <__libc_init_array>:
 8004bc8:	b570      	push	{r4, r5, r6, lr}
 8004bca:	4d0d      	ldr	r5, [pc, #52]	; (8004c00 <__libc_init_array+0x38>)
 8004bcc:	4c0d      	ldr	r4, [pc, #52]	; (8004c04 <__libc_init_array+0x3c>)
 8004bce:	1b64      	subs	r4, r4, r5
 8004bd0:	10a4      	asrs	r4, r4, #2
 8004bd2:	2600      	movs	r6, #0
 8004bd4:	42a6      	cmp	r6, r4
 8004bd6:	d109      	bne.n	8004bec <__libc_init_array+0x24>
 8004bd8:	4d0b      	ldr	r5, [pc, #44]	; (8004c08 <__libc_init_array+0x40>)
 8004bda:	4c0c      	ldr	r4, [pc, #48]	; (8004c0c <__libc_init_array+0x44>)
 8004bdc:	f001 f884 	bl	8005ce8 <_init>
 8004be0:	1b64      	subs	r4, r4, r5
 8004be2:	10a4      	asrs	r4, r4, #2
 8004be4:	2600      	movs	r6, #0
 8004be6:	42a6      	cmp	r6, r4
 8004be8:	d105      	bne.n	8004bf6 <__libc_init_array+0x2e>
 8004bea:	bd70      	pop	{r4, r5, r6, pc}
 8004bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf0:	4798      	blx	r3
 8004bf2:	3601      	adds	r6, #1
 8004bf4:	e7ee      	b.n	8004bd4 <__libc_init_array+0xc>
 8004bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bfa:	4798      	blx	r3
 8004bfc:	3601      	adds	r6, #1
 8004bfe:	e7f2      	b.n	8004be6 <__libc_init_array+0x1e>
 8004c00:	08005df0 	.word	0x08005df0
 8004c04:	08005df0 	.word	0x08005df0
 8004c08:	08005df0 	.word	0x08005df0
 8004c0c:	08005df4 	.word	0x08005df4

08004c10 <memset>:
 8004c10:	4402      	add	r2, r0
 8004c12:	4603      	mov	r3, r0
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d100      	bne.n	8004c1a <memset+0xa>
 8004c18:	4770      	bx	lr
 8004c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c1e:	e7f9      	b.n	8004c14 <memset+0x4>

08004c20 <iprintf>:
 8004c20:	b40f      	push	{r0, r1, r2, r3}
 8004c22:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <iprintf+0x2c>)
 8004c24:	b513      	push	{r0, r1, r4, lr}
 8004c26:	681c      	ldr	r4, [r3, #0]
 8004c28:	b124      	cbz	r4, 8004c34 <iprintf+0x14>
 8004c2a:	69a3      	ldr	r3, [r4, #24]
 8004c2c:	b913      	cbnz	r3, 8004c34 <iprintf+0x14>
 8004c2e:	4620      	mov	r0, r4
 8004c30:	f000 f9f6 	bl	8005020 <__sinit>
 8004c34:	ab05      	add	r3, sp, #20
 8004c36:	9a04      	ldr	r2, [sp, #16]
 8004c38:	68a1      	ldr	r1, [r4, #8]
 8004c3a:	9301      	str	r3, [sp, #4]
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f000 fc07 	bl	8005450 <_vfiprintf_r>
 8004c42:	b002      	add	sp, #8
 8004c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c48:	b004      	add	sp, #16
 8004c4a:	4770      	bx	lr
 8004c4c:	2000000c 	.word	0x2000000c

08004c50 <setbuf>:
 8004c50:	2900      	cmp	r1, #0
 8004c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c56:	bf0c      	ite	eq
 8004c58:	2202      	moveq	r2, #2
 8004c5a:	2200      	movne	r2, #0
 8004c5c:	f000 b800 	b.w	8004c60 <setvbuf>

08004c60 <setvbuf>:
 8004c60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004c64:	461d      	mov	r5, r3
 8004c66:	4b5d      	ldr	r3, [pc, #372]	; (8004ddc <setvbuf+0x17c>)
 8004c68:	681f      	ldr	r7, [r3, #0]
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	460e      	mov	r6, r1
 8004c6e:	4690      	mov	r8, r2
 8004c70:	b127      	cbz	r7, 8004c7c <setvbuf+0x1c>
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	b913      	cbnz	r3, 8004c7c <setvbuf+0x1c>
 8004c76:	4638      	mov	r0, r7
 8004c78:	f000 f9d2 	bl	8005020 <__sinit>
 8004c7c:	4b58      	ldr	r3, [pc, #352]	; (8004de0 <setvbuf+0x180>)
 8004c7e:	429c      	cmp	r4, r3
 8004c80:	d167      	bne.n	8004d52 <setvbuf+0xf2>
 8004c82:	687c      	ldr	r4, [r7, #4]
 8004c84:	f1b8 0f02 	cmp.w	r8, #2
 8004c88:	d006      	beq.n	8004c98 <setvbuf+0x38>
 8004c8a:	f1b8 0f01 	cmp.w	r8, #1
 8004c8e:	f200 809f 	bhi.w	8004dd0 <setvbuf+0x170>
 8004c92:	2d00      	cmp	r5, #0
 8004c94:	f2c0 809c 	blt.w	8004dd0 <setvbuf+0x170>
 8004c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c9a:	07db      	lsls	r3, r3, #31
 8004c9c:	d405      	bmi.n	8004caa <setvbuf+0x4a>
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	0598      	lsls	r0, r3, #22
 8004ca2:	d402      	bmi.n	8004caa <setvbuf+0x4a>
 8004ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ca6:	f000 fa59 	bl	800515c <__retarget_lock_acquire_recursive>
 8004caa:	4621      	mov	r1, r4
 8004cac:	4638      	mov	r0, r7
 8004cae:	f000 f923 	bl	8004ef8 <_fflush_r>
 8004cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cb4:	b141      	cbz	r1, 8004cc8 <setvbuf+0x68>
 8004cb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cba:	4299      	cmp	r1, r3
 8004cbc:	d002      	beq.n	8004cc4 <setvbuf+0x64>
 8004cbe:	4638      	mov	r0, r7
 8004cc0:	f000 fabc 	bl	800523c <_free_r>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	6363      	str	r3, [r4, #52]	; 0x34
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61a3      	str	r3, [r4, #24]
 8004ccc:	6063      	str	r3, [r4, #4]
 8004cce:	89a3      	ldrh	r3, [r4, #12]
 8004cd0:	0619      	lsls	r1, r3, #24
 8004cd2:	d503      	bpl.n	8004cdc <setvbuf+0x7c>
 8004cd4:	6921      	ldr	r1, [r4, #16]
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	f000 fab0 	bl	800523c <_free_r>
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004ce2:	f023 0303 	bic.w	r3, r3, #3
 8004ce6:	f1b8 0f02 	cmp.w	r8, #2
 8004cea:	81a3      	strh	r3, [r4, #12]
 8004cec:	d06c      	beq.n	8004dc8 <setvbuf+0x168>
 8004cee:	ab01      	add	r3, sp, #4
 8004cf0:	466a      	mov	r2, sp
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	f000 fa33 	bl	8005160 <__swhatbuf_r>
 8004cfa:	89a3      	ldrh	r3, [r4, #12]
 8004cfc:	4318      	orrs	r0, r3
 8004cfe:	81a0      	strh	r0, [r4, #12]
 8004d00:	2d00      	cmp	r5, #0
 8004d02:	d130      	bne.n	8004d66 <setvbuf+0x106>
 8004d04:	9d00      	ldr	r5, [sp, #0]
 8004d06:	4628      	mov	r0, r5
 8004d08:	f000 fa90 	bl	800522c <malloc>
 8004d0c:	4606      	mov	r6, r0
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d155      	bne.n	8004dbe <setvbuf+0x15e>
 8004d12:	f8dd 9000 	ldr.w	r9, [sp]
 8004d16:	45a9      	cmp	r9, r5
 8004d18:	d14a      	bne.n	8004db0 <setvbuf+0x150>
 8004d1a:	f04f 35ff 	mov.w	r5, #4294967295
 8004d1e:	2200      	movs	r2, #0
 8004d20:	60a2      	str	r2, [r4, #8]
 8004d22:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004d26:	6022      	str	r2, [r4, #0]
 8004d28:	6122      	str	r2, [r4, #16]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d30:	6162      	str	r2, [r4, #20]
 8004d32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d34:	f043 0302 	orr.w	r3, r3, #2
 8004d38:	07d2      	lsls	r2, r2, #31
 8004d3a:	81a3      	strh	r3, [r4, #12]
 8004d3c:	d405      	bmi.n	8004d4a <setvbuf+0xea>
 8004d3e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004d42:	d102      	bne.n	8004d4a <setvbuf+0xea>
 8004d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d46:	f000 fa0a 	bl	800515e <__retarget_lock_release_recursive>
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	b003      	add	sp, #12
 8004d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d52:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <setvbuf+0x184>)
 8004d54:	429c      	cmp	r4, r3
 8004d56:	d101      	bne.n	8004d5c <setvbuf+0xfc>
 8004d58:	68bc      	ldr	r4, [r7, #8]
 8004d5a:	e793      	b.n	8004c84 <setvbuf+0x24>
 8004d5c:	4b22      	ldr	r3, [pc, #136]	; (8004de8 <setvbuf+0x188>)
 8004d5e:	429c      	cmp	r4, r3
 8004d60:	bf08      	it	eq
 8004d62:	68fc      	ldreq	r4, [r7, #12]
 8004d64:	e78e      	b.n	8004c84 <setvbuf+0x24>
 8004d66:	2e00      	cmp	r6, #0
 8004d68:	d0cd      	beq.n	8004d06 <setvbuf+0xa6>
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	b913      	cbnz	r3, 8004d74 <setvbuf+0x114>
 8004d6e:	4638      	mov	r0, r7
 8004d70:	f000 f956 	bl	8005020 <__sinit>
 8004d74:	f1b8 0f01 	cmp.w	r8, #1
 8004d78:	bf08      	it	eq
 8004d7a:	89a3      	ldrheq	r3, [r4, #12]
 8004d7c:	6026      	str	r6, [r4, #0]
 8004d7e:	bf04      	itt	eq
 8004d80:	f043 0301 	orreq.w	r3, r3, #1
 8004d84:	81a3      	strheq	r3, [r4, #12]
 8004d86:	89a2      	ldrh	r2, [r4, #12]
 8004d88:	f012 0308 	ands.w	r3, r2, #8
 8004d8c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004d90:	d01c      	beq.n	8004dcc <setvbuf+0x16c>
 8004d92:	07d3      	lsls	r3, r2, #31
 8004d94:	bf41      	itttt	mi
 8004d96:	2300      	movmi	r3, #0
 8004d98:	426d      	negmi	r5, r5
 8004d9a:	60a3      	strmi	r3, [r4, #8]
 8004d9c:	61a5      	strmi	r5, [r4, #24]
 8004d9e:	bf58      	it	pl
 8004da0:	60a5      	strpl	r5, [r4, #8]
 8004da2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004da4:	f015 0501 	ands.w	r5, r5, #1
 8004da8:	d115      	bne.n	8004dd6 <setvbuf+0x176>
 8004daa:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004dae:	e7c8      	b.n	8004d42 <setvbuf+0xe2>
 8004db0:	4648      	mov	r0, r9
 8004db2:	f000 fa3b 	bl	800522c <malloc>
 8004db6:	4606      	mov	r6, r0
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d0ae      	beq.n	8004d1a <setvbuf+0xba>
 8004dbc:	464d      	mov	r5, r9
 8004dbe:	89a3      	ldrh	r3, [r4, #12]
 8004dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc4:	81a3      	strh	r3, [r4, #12]
 8004dc6:	e7d0      	b.n	8004d6a <setvbuf+0x10a>
 8004dc8:	2500      	movs	r5, #0
 8004dca:	e7a8      	b.n	8004d1e <setvbuf+0xbe>
 8004dcc:	60a3      	str	r3, [r4, #8]
 8004dce:	e7e8      	b.n	8004da2 <setvbuf+0x142>
 8004dd0:	f04f 35ff 	mov.w	r5, #4294967295
 8004dd4:	e7b9      	b.n	8004d4a <setvbuf+0xea>
 8004dd6:	2500      	movs	r5, #0
 8004dd8:	e7b7      	b.n	8004d4a <setvbuf+0xea>
 8004dda:	bf00      	nop
 8004ddc:	2000000c 	.word	0x2000000c
 8004de0:	08005d74 	.word	0x08005d74
 8004de4:	08005d94 	.word	0x08005d94
 8004de8:	08005d54 	.word	0x08005d54

08004dec <__sflush_r>:
 8004dec:	898a      	ldrh	r2, [r1, #12]
 8004dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df2:	4605      	mov	r5, r0
 8004df4:	0710      	lsls	r0, r2, #28
 8004df6:	460c      	mov	r4, r1
 8004df8:	d458      	bmi.n	8004eac <__sflush_r+0xc0>
 8004dfa:	684b      	ldr	r3, [r1, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	dc05      	bgt.n	8004e0c <__sflush_r+0x20>
 8004e00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	dc02      	bgt.n	8004e0c <__sflush_r+0x20>
 8004e06:	2000      	movs	r0, #0
 8004e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e0e:	2e00      	cmp	r6, #0
 8004e10:	d0f9      	beq.n	8004e06 <__sflush_r+0x1a>
 8004e12:	2300      	movs	r3, #0
 8004e14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e18:	682f      	ldr	r7, [r5, #0]
 8004e1a:	602b      	str	r3, [r5, #0]
 8004e1c:	d032      	beq.n	8004e84 <__sflush_r+0x98>
 8004e1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	075a      	lsls	r2, r3, #29
 8004e24:	d505      	bpl.n	8004e32 <__sflush_r+0x46>
 8004e26:	6863      	ldr	r3, [r4, #4]
 8004e28:	1ac0      	subs	r0, r0, r3
 8004e2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e2c:	b10b      	cbz	r3, 8004e32 <__sflush_r+0x46>
 8004e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e30:	1ac0      	subs	r0, r0, r3
 8004e32:	2300      	movs	r3, #0
 8004e34:	4602      	mov	r2, r0
 8004e36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e38:	6a21      	ldr	r1, [r4, #32]
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	47b0      	blx	r6
 8004e3e:	1c43      	adds	r3, r0, #1
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	d106      	bne.n	8004e52 <__sflush_r+0x66>
 8004e44:	6829      	ldr	r1, [r5, #0]
 8004e46:	291d      	cmp	r1, #29
 8004e48:	d82c      	bhi.n	8004ea4 <__sflush_r+0xb8>
 8004e4a:	4a2a      	ldr	r2, [pc, #168]	; (8004ef4 <__sflush_r+0x108>)
 8004e4c:	40ca      	lsrs	r2, r1
 8004e4e:	07d6      	lsls	r6, r2, #31
 8004e50:	d528      	bpl.n	8004ea4 <__sflush_r+0xb8>
 8004e52:	2200      	movs	r2, #0
 8004e54:	6062      	str	r2, [r4, #4]
 8004e56:	04d9      	lsls	r1, r3, #19
 8004e58:	6922      	ldr	r2, [r4, #16]
 8004e5a:	6022      	str	r2, [r4, #0]
 8004e5c:	d504      	bpl.n	8004e68 <__sflush_r+0x7c>
 8004e5e:	1c42      	adds	r2, r0, #1
 8004e60:	d101      	bne.n	8004e66 <__sflush_r+0x7a>
 8004e62:	682b      	ldr	r3, [r5, #0]
 8004e64:	b903      	cbnz	r3, 8004e68 <__sflush_r+0x7c>
 8004e66:	6560      	str	r0, [r4, #84]	; 0x54
 8004e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e6a:	602f      	str	r7, [r5, #0]
 8004e6c:	2900      	cmp	r1, #0
 8004e6e:	d0ca      	beq.n	8004e06 <__sflush_r+0x1a>
 8004e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e74:	4299      	cmp	r1, r3
 8004e76:	d002      	beq.n	8004e7e <__sflush_r+0x92>
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f000 f9df 	bl	800523c <_free_r>
 8004e7e:	2000      	movs	r0, #0
 8004e80:	6360      	str	r0, [r4, #52]	; 0x34
 8004e82:	e7c1      	b.n	8004e08 <__sflush_r+0x1c>
 8004e84:	6a21      	ldr	r1, [r4, #32]
 8004e86:	2301      	movs	r3, #1
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b0      	blx	r6
 8004e8c:	1c41      	adds	r1, r0, #1
 8004e8e:	d1c7      	bne.n	8004e20 <__sflush_r+0x34>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0c4      	beq.n	8004e20 <__sflush_r+0x34>
 8004e96:	2b1d      	cmp	r3, #29
 8004e98:	d001      	beq.n	8004e9e <__sflush_r+0xb2>
 8004e9a:	2b16      	cmp	r3, #22
 8004e9c:	d101      	bne.n	8004ea2 <__sflush_r+0xb6>
 8004e9e:	602f      	str	r7, [r5, #0]
 8004ea0:	e7b1      	b.n	8004e06 <__sflush_r+0x1a>
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ea8:	81a3      	strh	r3, [r4, #12]
 8004eaa:	e7ad      	b.n	8004e08 <__sflush_r+0x1c>
 8004eac:	690f      	ldr	r7, [r1, #16]
 8004eae:	2f00      	cmp	r7, #0
 8004eb0:	d0a9      	beq.n	8004e06 <__sflush_r+0x1a>
 8004eb2:	0793      	lsls	r3, r2, #30
 8004eb4:	680e      	ldr	r6, [r1, #0]
 8004eb6:	bf08      	it	eq
 8004eb8:	694b      	ldreq	r3, [r1, #20]
 8004eba:	600f      	str	r7, [r1, #0]
 8004ebc:	bf18      	it	ne
 8004ebe:	2300      	movne	r3, #0
 8004ec0:	eba6 0807 	sub.w	r8, r6, r7
 8004ec4:	608b      	str	r3, [r1, #8]
 8004ec6:	f1b8 0f00 	cmp.w	r8, #0
 8004eca:	dd9c      	ble.n	8004e06 <__sflush_r+0x1a>
 8004ecc:	6a21      	ldr	r1, [r4, #32]
 8004ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ed0:	4643      	mov	r3, r8
 8004ed2:	463a      	mov	r2, r7
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b0      	blx	r6
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	dc06      	bgt.n	8004eea <__sflush_r+0xfe>
 8004edc:	89a3      	ldrh	r3, [r4, #12]
 8004ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ee2:	81a3      	strh	r3, [r4, #12]
 8004ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee8:	e78e      	b.n	8004e08 <__sflush_r+0x1c>
 8004eea:	4407      	add	r7, r0
 8004eec:	eba8 0800 	sub.w	r8, r8, r0
 8004ef0:	e7e9      	b.n	8004ec6 <__sflush_r+0xda>
 8004ef2:	bf00      	nop
 8004ef4:	20400001 	.word	0x20400001

08004ef8 <_fflush_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	690b      	ldr	r3, [r1, #16]
 8004efc:	4605      	mov	r5, r0
 8004efe:	460c      	mov	r4, r1
 8004f00:	b913      	cbnz	r3, 8004f08 <_fflush_r+0x10>
 8004f02:	2500      	movs	r5, #0
 8004f04:	4628      	mov	r0, r5
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	b118      	cbz	r0, 8004f12 <_fflush_r+0x1a>
 8004f0a:	6983      	ldr	r3, [r0, #24]
 8004f0c:	b90b      	cbnz	r3, 8004f12 <_fflush_r+0x1a>
 8004f0e:	f000 f887 	bl	8005020 <__sinit>
 8004f12:	4b14      	ldr	r3, [pc, #80]	; (8004f64 <_fflush_r+0x6c>)
 8004f14:	429c      	cmp	r4, r3
 8004f16:	d11b      	bne.n	8004f50 <_fflush_r+0x58>
 8004f18:	686c      	ldr	r4, [r5, #4]
 8004f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0ef      	beq.n	8004f02 <_fflush_r+0xa>
 8004f22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f24:	07d0      	lsls	r0, r2, #31
 8004f26:	d404      	bmi.n	8004f32 <_fflush_r+0x3a>
 8004f28:	0599      	lsls	r1, r3, #22
 8004f2a:	d402      	bmi.n	8004f32 <_fflush_r+0x3a>
 8004f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f2e:	f000 f915 	bl	800515c <__retarget_lock_acquire_recursive>
 8004f32:	4628      	mov	r0, r5
 8004f34:	4621      	mov	r1, r4
 8004f36:	f7ff ff59 	bl	8004dec <__sflush_r>
 8004f3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f3c:	07da      	lsls	r2, r3, #31
 8004f3e:	4605      	mov	r5, r0
 8004f40:	d4e0      	bmi.n	8004f04 <_fflush_r+0xc>
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	059b      	lsls	r3, r3, #22
 8004f46:	d4dd      	bmi.n	8004f04 <_fflush_r+0xc>
 8004f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f4a:	f000 f908 	bl	800515e <__retarget_lock_release_recursive>
 8004f4e:	e7d9      	b.n	8004f04 <_fflush_r+0xc>
 8004f50:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <_fflush_r+0x70>)
 8004f52:	429c      	cmp	r4, r3
 8004f54:	d101      	bne.n	8004f5a <_fflush_r+0x62>
 8004f56:	68ac      	ldr	r4, [r5, #8]
 8004f58:	e7df      	b.n	8004f1a <_fflush_r+0x22>
 8004f5a:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <_fflush_r+0x74>)
 8004f5c:	429c      	cmp	r4, r3
 8004f5e:	bf08      	it	eq
 8004f60:	68ec      	ldreq	r4, [r5, #12]
 8004f62:	e7da      	b.n	8004f1a <_fflush_r+0x22>
 8004f64:	08005d74 	.word	0x08005d74
 8004f68:	08005d94 	.word	0x08005d94
 8004f6c:	08005d54 	.word	0x08005d54

08004f70 <std>:
 8004f70:	2300      	movs	r3, #0
 8004f72:	b510      	push	{r4, lr}
 8004f74:	4604      	mov	r4, r0
 8004f76:	e9c0 3300 	strd	r3, r3, [r0]
 8004f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f7e:	6083      	str	r3, [r0, #8]
 8004f80:	8181      	strh	r1, [r0, #12]
 8004f82:	6643      	str	r3, [r0, #100]	; 0x64
 8004f84:	81c2      	strh	r2, [r0, #14]
 8004f86:	6183      	str	r3, [r0, #24]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	305c      	adds	r0, #92	; 0x5c
 8004f8e:	f7ff fe3f 	bl	8004c10 <memset>
 8004f92:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <std+0x38>)
 8004f94:	6263      	str	r3, [r4, #36]	; 0x24
 8004f96:	4b05      	ldr	r3, [pc, #20]	; (8004fac <std+0x3c>)
 8004f98:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f9a:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <std+0x40>)
 8004f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f9e:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <std+0x44>)
 8004fa0:	6224      	str	r4, [r4, #32]
 8004fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8004fa4:	bd10      	pop	{r4, pc}
 8004fa6:	bf00      	nop
 8004fa8:	080059f9 	.word	0x080059f9
 8004fac:	08005a1b 	.word	0x08005a1b
 8004fb0:	08005a53 	.word	0x08005a53
 8004fb4:	08005a77 	.word	0x08005a77

08004fb8 <_cleanup_r>:
 8004fb8:	4901      	ldr	r1, [pc, #4]	; (8004fc0 <_cleanup_r+0x8>)
 8004fba:	f000 b8af 	b.w	800511c <_fwalk_reent>
 8004fbe:	bf00      	nop
 8004fc0:	08004ef9 	.word	0x08004ef9

08004fc4 <__sfmoreglue>:
 8004fc4:	b570      	push	{r4, r5, r6, lr}
 8004fc6:	2268      	movs	r2, #104	; 0x68
 8004fc8:	1e4d      	subs	r5, r1, #1
 8004fca:	4355      	muls	r5, r2
 8004fcc:	460e      	mov	r6, r1
 8004fce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004fd2:	f000 f99f 	bl	8005314 <_malloc_r>
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	b140      	cbz	r0, 8004fec <__sfmoreglue+0x28>
 8004fda:	2100      	movs	r1, #0
 8004fdc:	e9c0 1600 	strd	r1, r6, [r0]
 8004fe0:	300c      	adds	r0, #12
 8004fe2:	60a0      	str	r0, [r4, #8]
 8004fe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fe8:	f7ff fe12 	bl	8004c10 <memset>
 8004fec:	4620      	mov	r0, r4
 8004fee:	bd70      	pop	{r4, r5, r6, pc}

08004ff0 <__sfp_lock_acquire>:
 8004ff0:	4801      	ldr	r0, [pc, #4]	; (8004ff8 <__sfp_lock_acquire+0x8>)
 8004ff2:	f000 b8b3 	b.w	800515c <__retarget_lock_acquire_recursive>
 8004ff6:	bf00      	nop
 8004ff8:	200001f5 	.word	0x200001f5

08004ffc <__sfp_lock_release>:
 8004ffc:	4801      	ldr	r0, [pc, #4]	; (8005004 <__sfp_lock_release+0x8>)
 8004ffe:	f000 b8ae 	b.w	800515e <__retarget_lock_release_recursive>
 8005002:	bf00      	nop
 8005004:	200001f5 	.word	0x200001f5

08005008 <__sinit_lock_acquire>:
 8005008:	4801      	ldr	r0, [pc, #4]	; (8005010 <__sinit_lock_acquire+0x8>)
 800500a:	f000 b8a7 	b.w	800515c <__retarget_lock_acquire_recursive>
 800500e:	bf00      	nop
 8005010:	200001f6 	.word	0x200001f6

08005014 <__sinit_lock_release>:
 8005014:	4801      	ldr	r0, [pc, #4]	; (800501c <__sinit_lock_release+0x8>)
 8005016:	f000 b8a2 	b.w	800515e <__retarget_lock_release_recursive>
 800501a:	bf00      	nop
 800501c:	200001f6 	.word	0x200001f6

08005020 <__sinit>:
 8005020:	b510      	push	{r4, lr}
 8005022:	4604      	mov	r4, r0
 8005024:	f7ff fff0 	bl	8005008 <__sinit_lock_acquire>
 8005028:	69a3      	ldr	r3, [r4, #24]
 800502a:	b11b      	cbz	r3, 8005034 <__sinit+0x14>
 800502c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005030:	f7ff bff0 	b.w	8005014 <__sinit_lock_release>
 8005034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005038:	6523      	str	r3, [r4, #80]	; 0x50
 800503a:	4b13      	ldr	r3, [pc, #76]	; (8005088 <__sinit+0x68>)
 800503c:	4a13      	ldr	r2, [pc, #76]	; (800508c <__sinit+0x6c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	62a2      	str	r2, [r4, #40]	; 0x28
 8005042:	42a3      	cmp	r3, r4
 8005044:	bf04      	itt	eq
 8005046:	2301      	moveq	r3, #1
 8005048:	61a3      	streq	r3, [r4, #24]
 800504a:	4620      	mov	r0, r4
 800504c:	f000 f820 	bl	8005090 <__sfp>
 8005050:	6060      	str	r0, [r4, #4]
 8005052:	4620      	mov	r0, r4
 8005054:	f000 f81c 	bl	8005090 <__sfp>
 8005058:	60a0      	str	r0, [r4, #8]
 800505a:	4620      	mov	r0, r4
 800505c:	f000 f818 	bl	8005090 <__sfp>
 8005060:	2200      	movs	r2, #0
 8005062:	60e0      	str	r0, [r4, #12]
 8005064:	2104      	movs	r1, #4
 8005066:	6860      	ldr	r0, [r4, #4]
 8005068:	f7ff ff82 	bl	8004f70 <std>
 800506c:	68a0      	ldr	r0, [r4, #8]
 800506e:	2201      	movs	r2, #1
 8005070:	2109      	movs	r1, #9
 8005072:	f7ff ff7d 	bl	8004f70 <std>
 8005076:	68e0      	ldr	r0, [r4, #12]
 8005078:	2202      	movs	r2, #2
 800507a:	2112      	movs	r1, #18
 800507c:	f7ff ff78 	bl	8004f70 <std>
 8005080:	2301      	movs	r3, #1
 8005082:	61a3      	str	r3, [r4, #24]
 8005084:	e7d2      	b.n	800502c <__sinit+0xc>
 8005086:	bf00      	nop
 8005088:	08005d50 	.word	0x08005d50
 800508c:	08004fb9 	.word	0x08004fb9

08005090 <__sfp>:
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	4607      	mov	r7, r0
 8005094:	f7ff ffac 	bl	8004ff0 <__sfp_lock_acquire>
 8005098:	4b1e      	ldr	r3, [pc, #120]	; (8005114 <__sfp+0x84>)
 800509a:	681e      	ldr	r6, [r3, #0]
 800509c:	69b3      	ldr	r3, [r6, #24]
 800509e:	b913      	cbnz	r3, 80050a6 <__sfp+0x16>
 80050a0:	4630      	mov	r0, r6
 80050a2:	f7ff ffbd 	bl	8005020 <__sinit>
 80050a6:	3648      	adds	r6, #72	; 0x48
 80050a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	d503      	bpl.n	80050b8 <__sfp+0x28>
 80050b0:	6833      	ldr	r3, [r6, #0]
 80050b2:	b30b      	cbz	r3, 80050f8 <__sfp+0x68>
 80050b4:	6836      	ldr	r6, [r6, #0]
 80050b6:	e7f7      	b.n	80050a8 <__sfp+0x18>
 80050b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050bc:	b9d5      	cbnz	r5, 80050f4 <__sfp+0x64>
 80050be:	4b16      	ldr	r3, [pc, #88]	; (8005118 <__sfp+0x88>)
 80050c0:	60e3      	str	r3, [r4, #12]
 80050c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050c6:	6665      	str	r5, [r4, #100]	; 0x64
 80050c8:	f000 f847 	bl	800515a <__retarget_lock_init_recursive>
 80050cc:	f7ff ff96 	bl	8004ffc <__sfp_lock_release>
 80050d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80050d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050d8:	6025      	str	r5, [r4, #0]
 80050da:	61a5      	str	r5, [r4, #24]
 80050dc:	2208      	movs	r2, #8
 80050de:	4629      	mov	r1, r5
 80050e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050e4:	f7ff fd94 	bl	8004c10 <memset>
 80050e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050f0:	4620      	mov	r0, r4
 80050f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f4:	3468      	adds	r4, #104	; 0x68
 80050f6:	e7d9      	b.n	80050ac <__sfp+0x1c>
 80050f8:	2104      	movs	r1, #4
 80050fa:	4638      	mov	r0, r7
 80050fc:	f7ff ff62 	bl	8004fc4 <__sfmoreglue>
 8005100:	4604      	mov	r4, r0
 8005102:	6030      	str	r0, [r6, #0]
 8005104:	2800      	cmp	r0, #0
 8005106:	d1d5      	bne.n	80050b4 <__sfp+0x24>
 8005108:	f7ff ff78 	bl	8004ffc <__sfp_lock_release>
 800510c:	230c      	movs	r3, #12
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	e7ee      	b.n	80050f0 <__sfp+0x60>
 8005112:	bf00      	nop
 8005114:	08005d50 	.word	0x08005d50
 8005118:	ffff0001 	.word	0xffff0001

0800511c <_fwalk_reent>:
 800511c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005120:	4606      	mov	r6, r0
 8005122:	4688      	mov	r8, r1
 8005124:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005128:	2700      	movs	r7, #0
 800512a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800512e:	f1b9 0901 	subs.w	r9, r9, #1
 8005132:	d505      	bpl.n	8005140 <_fwalk_reent+0x24>
 8005134:	6824      	ldr	r4, [r4, #0]
 8005136:	2c00      	cmp	r4, #0
 8005138:	d1f7      	bne.n	800512a <_fwalk_reent+0xe>
 800513a:	4638      	mov	r0, r7
 800513c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005140:	89ab      	ldrh	r3, [r5, #12]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d907      	bls.n	8005156 <_fwalk_reent+0x3a>
 8005146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800514a:	3301      	adds	r3, #1
 800514c:	d003      	beq.n	8005156 <_fwalk_reent+0x3a>
 800514e:	4629      	mov	r1, r5
 8005150:	4630      	mov	r0, r6
 8005152:	47c0      	blx	r8
 8005154:	4307      	orrs	r7, r0
 8005156:	3568      	adds	r5, #104	; 0x68
 8005158:	e7e9      	b.n	800512e <_fwalk_reent+0x12>

0800515a <__retarget_lock_init_recursive>:
 800515a:	4770      	bx	lr

0800515c <__retarget_lock_acquire_recursive>:
 800515c:	4770      	bx	lr

0800515e <__retarget_lock_release_recursive>:
 800515e:	4770      	bx	lr

08005160 <__swhatbuf_r>:
 8005160:	b570      	push	{r4, r5, r6, lr}
 8005162:	460e      	mov	r6, r1
 8005164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005168:	2900      	cmp	r1, #0
 800516a:	b096      	sub	sp, #88	; 0x58
 800516c:	4614      	mov	r4, r2
 800516e:	461d      	mov	r5, r3
 8005170:	da08      	bge.n	8005184 <__swhatbuf_r+0x24>
 8005172:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	602a      	str	r2, [r5, #0]
 800517a:	061a      	lsls	r2, r3, #24
 800517c:	d410      	bmi.n	80051a0 <__swhatbuf_r+0x40>
 800517e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005182:	e00e      	b.n	80051a2 <__swhatbuf_r+0x42>
 8005184:	466a      	mov	r2, sp
 8005186:	f000 fd5d 	bl	8005c44 <_fstat_r>
 800518a:	2800      	cmp	r0, #0
 800518c:	dbf1      	blt.n	8005172 <__swhatbuf_r+0x12>
 800518e:	9a01      	ldr	r2, [sp, #4]
 8005190:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005194:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005198:	425a      	negs	r2, r3
 800519a:	415a      	adcs	r2, r3
 800519c:	602a      	str	r2, [r5, #0]
 800519e:	e7ee      	b.n	800517e <__swhatbuf_r+0x1e>
 80051a0:	2340      	movs	r3, #64	; 0x40
 80051a2:	2000      	movs	r0, #0
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	b016      	add	sp, #88	; 0x58
 80051a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080051ac <__smakebuf_r>:
 80051ac:	898b      	ldrh	r3, [r1, #12]
 80051ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051b0:	079d      	lsls	r5, r3, #30
 80051b2:	4606      	mov	r6, r0
 80051b4:	460c      	mov	r4, r1
 80051b6:	d507      	bpl.n	80051c8 <__smakebuf_r+0x1c>
 80051b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	6123      	str	r3, [r4, #16]
 80051c0:	2301      	movs	r3, #1
 80051c2:	6163      	str	r3, [r4, #20]
 80051c4:	b002      	add	sp, #8
 80051c6:	bd70      	pop	{r4, r5, r6, pc}
 80051c8:	ab01      	add	r3, sp, #4
 80051ca:	466a      	mov	r2, sp
 80051cc:	f7ff ffc8 	bl	8005160 <__swhatbuf_r>
 80051d0:	9900      	ldr	r1, [sp, #0]
 80051d2:	4605      	mov	r5, r0
 80051d4:	4630      	mov	r0, r6
 80051d6:	f000 f89d 	bl	8005314 <_malloc_r>
 80051da:	b948      	cbnz	r0, 80051f0 <__smakebuf_r+0x44>
 80051dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051e0:	059a      	lsls	r2, r3, #22
 80051e2:	d4ef      	bmi.n	80051c4 <__smakebuf_r+0x18>
 80051e4:	f023 0303 	bic.w	r3, r3, #3
 80051e8:	f043 0302 	orr.w	r3, r3, #2
 80051ec:	81a3      	strh	r3, [r4, #12]
 80051ee:	e7e3      	b.n	80051b8 <__smakebuf_r+0xc>
 80051f0:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <__smakebuf_r+0x7c>)
 80051f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80051f4:	89a3      	ldrh	r3, [r4, #12]
 80051f6:	6020      	str	r0, [r4, #0]
 80051f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051fc:	81a3      	strh	r3, [r4, #12]
 80051fe:	9b00      	ldr	r3, [sp, #0]
 8005200:	6163      	str	r3, [r4, #20]
 8005202:	9b01      	ldr	r3, [sp, #4]
 8005204:	6120      	str	r0, [r4, #16]
 8005206:	b15b      	cbz	r3, 8005220 <__smakebuf_r+0x74>
 8005208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800520c:	4630      	mov	r0, r6
 800520e:	f000 fd2b 	bl	8005c68 <_isatty_r>
 8005212:	b128      	cbz	r0, 8005220 <__smakebuf_r+0x74>
 8005214:	89a3      	ldrh	r3, [r4, #12]
 8005216:	f023 0303 	bic.w	r3, r3, #3
 800521a:	f043 0301 	orr.w	r3, r3, #1
 800521e:	81a3      	strh	r3, [r4, #12]
 8005220:	89a0      	ldrh	r0, [r4, #12]
 8005222:	4305      	orrs	r5, r0
 8005224:	81a5      	strh	r5, [r4, #12]
 8005226:	e7cd      	b.n	80051c4 <__smakebuf_r+0x18>
 8005228:	08004fb9 	.word	0x08004fb9

0800522c <malloc>:
 800522c:	4b02      	ldr	r3, [pc, #8]	; (8005238 <malloc+0xc>)
 800522e:	4601      	mov	r1, r0
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	f000 b86f 	b.w	8005314 <_malloc_r>
 8005236:	bf00      	nop
 8005238:	2000000c 	.word	0x2000000c

0800523c <_free_r>:
 800523c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800523e:	2900      	cmp	r1, #0
 8005240:	d044      	beq.n	80052cc <_free_r+0x90>
 8005242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005246:	9001      	str	r0, [sp, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	f1a1 0404 	sub.w	r4, r1, #4
 800524e:	bfb8      	it	lt
 8005250:	18e4      	addlt	r4, r4, r3
 8005252:	f000 fd2b 	bl	8005cac <__malloc_lock>
 8005256:	4a1e      	ldr	r2, [pc, #120]	; (80052d0 <_free_r+0x94>)
 8005258:	9801      	ldr	r0, [sp, #4]
 800525a:	6813      	ldr	r3, [r2, #0]
 800525c:	b933      	cbnz	r3, 800526c <_free_r+0x30>
 800525e:	6063      	str	r3, [r4, #4]
 8005260:	6014      	str	r4, [r2, #0]
 8005262:	b003      	add	sp, #12
 8005264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005268:	f000 bd26 	b.w	8005cb8 <__malloc_unlock>
 800526c:	42a3      	cmp	r3, r4
 800526e:	d908      	bls.n	8005282 <_free_r+0x46>
 8005270:	6825      	ldr	r5, [r4, #0]
 8005272:	1961      	adds	r1, r4, r5
 8005274:	428b      	cmp	r3, r1
 8005276:	bf01      	itttt	eq
 8005278:	6819      	ldreq	r1, [r3, #0]
 800527a:	685b      	ldreq	r3, [r3, #4]
 800527c:	1949      	addeq	r1, r1, r5
 800527e:	6021      	streq	r1, [r4, #0]
 8005280:	e7ed      	b.n	800525e <_free_r+0x22>
 8005282:	461a      	mov	r2, r3
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	b10b      	cbz	r3, 800528c <_free_r+0x50>
 8005288:	42a3      	cmp	r3, r4
 800528a:	d9fa      	bls.n	8005282 <_free_r+0x46>
 800528c:	6811      	ldr	r1, [r2, #0]
 800528e:	1855      	adds	r5, r2, r1
 8005290:	42a5      	cmp	r5, r4
 8005292:	d10b      	bne.n	80052ac <_free_r+0x70>
 8005294:	6824      	ldr	r4, [r4, #0]
 8005296:	4421      	add	r1, r4
 8005298:	1854      	adds	r4, r2, r1
 800529a:	42a3      	cmp	r3, r4
 800529c:	6011      	str	r1, [r2, #0]
 800529e:	d1e0      	bne.n	8005262 <_free_r+0x26>
 80052a0:	681c      	ldr	r4, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	6053      	str	r3, [r2, #4]
 80052a6:	4421      	add	r1, r4
 80052a8:	6011      	str	r1, [r2, #0]
 80052aa:	e7da      	b.n	8005262 <_free_r+0x26>
 80052ac:	d902      	bls.n	80052b4 <_free_r+0x78>
 80052ae:	230c      	movs	r3, #12
 80052b0:	6003      	str	r3, [r0, #0]
 80052b2:	e7d6      	b.n	8005262 <_free_r+0x26>
 80052b4:	6825      	ldr	r5, [r4, #0]
 80052b6:	1961      	adds	r1, r4, r5
 80052b8:	428b      	cmp	r3, r1
 80052ba:	bf04      	itt	eq
 80052bc:	6819      	ldreq	r1, [r3, #0]
 80052be:	685b      	ldreq	r3, [r3, #4]
 80052c0:	6063      	str	r3, [r4, #4]
 80052c2:	bf04      	itt	eq
 80052c4:	1949      	addeq	r1, r1, r5
 80052c6:	6021      	streq	r1, [r4, #0]
 80052c8:	6054      	str	r4, [r2, #4]
 80052ca:	e7ca      	b.n	8005262 <_free_r+0x26>
 80052cc:	b003      	add	sp, #12
 80052ce:	bd30      	pop	{r4, r5, pc}
 80052d0:	200001f8 	.word	0x200001f8

080052d4 <sbrk_aligned>:
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	4e0e      	ldr	r6, [pc, #56]	; (8005310 <sbrk_aligned+0x3c>)
 80052d8:	460c      	mov	r4, r1
 80052da:	6831      	ldr	r1, [r6, #0]
 80052dc:	4605      	mov	r5, r0
 80052de:	b911      	cbnz	r1, 80052e6 <sbrk_aligned+0x12>
 80052e0:	f000 fb7a 	bl	80059d8 <_sbrk_r>
 80052e4:	6030      	str	r0, [r6, #0]
 80052e6:	4621      	mov	r1, r4
 80052e8:	4628      	mov	r0, r5
 80052ea:	f000 fb75 	bl	80059d8 <_sbrk_r>
 80052ee:	1c43      	adds	r3, r0, #1
 80052f0:	d00a      	beq.n	8005308 <sbrk_aligned+0x34>
 80052f2:	1cc4      	adds	r4, r0, #3
 80052f4:	f024 0403 	bic.w	r4, r4, #3
 80052f8:	42a0      	cmp	r0, r4
 80052fa:	d007      	beq.n	800530c <sbrk_aligned+0x38>
 80052fc:	1a21      	subs	r1, r4, r0
 80052fe:	4628      	mov	r0, r5
 8005300:	f000 fb6a 	bl	80059d8 <_sbrk_r>
 8005304:	3001      	adds	r0, #1
 8005306:	d101      	bne.n	800530c <sbrk_aligned+0x38>
 8005308:	f04f 34ff 	mov.w	r4, #4294967295
 800530c:	4620      	mov	r0, r4
 800530e:	bd70      	pop	{r4, r5, r6, pc}
 8005310:	200001fc 	.word	0x200001fc

08005314 <_malloc_r>:
 8005314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005318:	1ccd      	adds	r5, r1, #3
 800531a:	f025 0503 	bic.w	r5, r5, #3
 800531e:	3508      	adds	r5, #8
 8005320:	2d0c      	cmp	r5, #12
 8005322:	bf38      	it	cc
 8005324:	250c      	movcc	r5, #12
 8005326:	2d00      	cmp	r5, #0
 8005328:	4607      	mov	r7, r0
 800532a:	db01      	blt.n	8005330 <_malloc_r+0x1c>
 800532c:	42a9      	cmp	r1, r5
 800532e:	d905      	bls.n	800533c <_malloc_r+0x28>
 8005330:	230c      	movs	r3, #12
 8005332:	603b      	str	r3, [r7, #0]
 8005334:	2600      	movs	r6, #0
 8005336:	4630      	mov	r0, r6
 8005338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800533c:	4e2e      	ldr	r6, [pc, #184]	; (80053f8 <_malloc_r+0xe4>)
 800533e:	f000 fcb5 	bl	8005cac <__malloc_lock>
 8005342:	6833      	ldr	r3, [r6, #0]
 8005344:	461c      	mov	r4, r3
 8005346:	bb34      	cbnz	r4, 8005396 <_malloc_r+0x82>
 8005348:	4629      	mov	r1, r5
 800534a:	4638      	mov	r0, r7
 800534c:	f7ff ffc2 	bl	80052d4 <sbrk_aligned>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	4604      	mov	r4, r0
 8005354:	d14d      	bne.n	80053f2 <_malloc_r+0xde>
 8005356:	6834      	ldr	r4, [r6, #0]
 8005358:	4626      	mov	r6, r4
 800535a:	2e00      	cmp	r6, #0
 800535c:	d140      	bne.n	80053e0 <_malloc_r+0xcc>
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	4631      	mov	r1, r6
 8005362:	4638      	mov	r0, r7
 8005364:	eb04 0803 	add.w	r8, r4, r3
 8005368:	f000 fb36 	bl	80059d8 <_sbrk_r>
 800536c:	4580      	cmp	r8, r0
 800536e:	d13a      	bne.n	80053e6 <_malloc_r+0xd2>
 8005370:	6821      	ldr	r1, [r4, #0]
 8005372:	3503      	adds	r5, #3
 8005374:	1a6d      	subs	r5, r5, r1
 8005376:	f025 0503 	bic.w	r5, r5, #3
 800537a:	3508      	adds	r5, #8
 800537c:	2d0c      	cmp	r5, #12
 800537e:	bf38      	it	cc
 8005380:	250c      	movcc	r5, #12
 8005382:	4629      	mov	r1, r5
 8005384:	4638      	mov	r0, r7
 8005386:	f7ff ffa5 	bl	80052d4 <sbrk_aligned>
 800538a:	3001      	adds	r0, #1
 800538c:	d02b      	beq.n	80053e6 <_malloc_r+0xd2>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	442b      	add	r3, r5
 8005392:	6023      	str	r3, [r4, #0]
 8005394:	e00e      	b.n	80053b4 <_malloc_r+0xa0>
 8005396:	6822      	ldr	r2, [r4, #0]
 8005398:	1b52      	subs	r2, r2, r5
 800539a:	d41e      	bmi.n	80053da <_malloc_r+0xc6>
 800539c:	2a0b      	cmp	r2, #11
 800539e:	d916      	bls.n	80053ce <_malloc_r+0xba>
 80053a0:	1961      	adds	r1, r4, r5
 80053a2:	42a3      	cmp	r3, r4
 80053a4:	6025      	str	r5, [r4, #0]
 80053a6:	bf18      	it	ne
 80053a8:	6059      	strne	r1, [r3, #4]
 80053aa:	6863      	ldr	r3, [r4, #4]
 80053ac:	bf08      	it	eq
 80053ae:	6031      	streq	r1, [r6, #0]
 80053b0:	5162      	str	r2, [r4, r5]
 80053b2:	604b      	str	r3, [r1, #4]
 80053b4:	4638      	mov	r0, r7
 80053b6:	f104 060b 	add.w	r6, r4, #11
 80053ba:	f000 fc7d 	bl	8005cb8 <__malloc_unlock>
 80053be:	f026 0607 	bic.w	r6, r6, #7
 80053c2:	1d23      	adds	r3, r4, #4
 80053c4:	1af2      	subs	r2, r6, r3
 80053c6:	d0b6      	beq.n	8005336 <_malloc_r+0x22>
 80053c8:	1b9b      	subs	r3, r3, r6
 80053ca:	50a3      	str	r3, [r4, r2]
 80053cc:	e7b3      	b.n	8005336 <_malloc_r+0x22>
 80053ce:	6862      	ldr	r2, [r4, #4]
 80053d0:	42a3      	cmp	r3, r4
 80053d2:	bf0c      	ite	eq
 80053d4:	6032      	streq	r2, [r6, #0]
 80053d6:	605a      	strne	r2, [r3, #4]
 80053d8:	e7ec      	b.n	80053b4 <_malloc_r+0xa0>
 80053da:	4623      	mov	r3, r4
 80053dc:	6864      	ldr	r4, [r4, #4]
 80053de:	e7b2      	b.n	8005346 <_malloc_r+0x32>
 80053e0:	4634      	mov	r4, r6
 80053e2:	6876      	ldr	r6, [r6, #4]
 80053e4:	e7b9      	b.n	800535a <_malloc_r+0x46>
 80053e6:	230c      	movs	r3, #12
 80053e8:	603b      	str	r3, [r7, #0]
 80053ea:	4638      	mov	r0, r7
 80053ec:	f000 fc64 	bl	8005cb8 <__malloc_unlock>
 80053f0:	e7a1      	b.n	8005336 <_malloc_r+0x22>
 80053f2:	6025      	str	r5, [r4, #0]
 80053f4:	e7de      	b.n	80053b4 <_malloc_r+0xa0>
 80053f6:	bf00      	nop
 80053f8:	200001f8 	.word	0x200001f8

080053fc <__sfputc_r>:
 80053fc:	6893      	ldr	r3, [r2, #8]
 80053fe:	3b01      	subs	r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	b410      	push	{r4}
 8005404:	6093      	str	r3, [r2, #8]
 8005406:	da08      	bge.n	800541a <__sfputc_r+0x1e>
 8005408:	6994      	ldr	r4, [r2, #24]
 800540a:	42a3      	cmp	r3, r4
 800540c:	db01      	blt.n	8005412 <__sfputc_r+0x16>
 800540e:	290a      	cmp	r1, #10
 8005410:	d103      	bne.n	800541a <__sfputc_r+0x1e>
 8005412:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005416:	f000 bb33 	b.w	8005a80 <__swbuf_r>
 800541a:	6813      	ldr	r3, [r2, #0]
 800541c:	1c58      	adds	r0, r3, #1
 800541e:	6010      	str	r0, [r2, #0]
 8005420:	7019      	strb	r1, [r3, #0]
 8005422:	4608      	mov	r0, r1
 8005424:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005428:	4770      	bx	lr

0800542a <__sfputs_r>:
 800542a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542c:	4606      	mov	r6, r0
 800542e:	460f      	mov	r7, r1
 8005430:	4614      	mov	r4, r2
 8005432:	18d5      	adds	r5, r2, r3
 8005434:	42ac      	cmp	r4, r5
 8005436:	d101      	bne.n	800543c <__sfputs_r+0x12>
 8005438:	2000      	movs	r0, #0
 800543a:	e007      	b.n	800544c <__sfputs_r+0x22>
 800543c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005440:	463a      	mov	r2, r7
 8005442:	4630      	mov	r0, r6
 8005444:	f7ff ffda 	bl	80053fc <__sfputc_r>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d1f3      	bne.n	8005434 <__sfputs_r+0xa>
 800544c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005450 <_vfiprintf_r>:
 8005450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005454:	460d      	mov	r5, r1
 8005456:	b09d      	sub	sp, #116	; 0x74
 8005458:	4614      	mov	r4, r2
 800545a:	4698      	mov	r8, r3
 800545c:	4606      	mov	r6, r0
 800545e:	b118      	cbz	r0, 8005468 <_vfiprintf_r+0x18>
 8005460:	6983      	ldr	r3, [r0, #24]
 8005462:	b90b      	cbnz	r3, 8005468 <_vfiprintf_r+0x18>
 8005464:	f7ff fddc 	bl	8005020 <__sinit>
 8005468:	4b89      	ldr	r3, [pc, #548]	; (8005690 <_vfiprintf_r+0x240>)
 800546a:	429d      	cmp	r5, r3
 800546c:	d11b      	bne.n	80054a6 <_vfiprintf_r+0x56>
 800546e:	6875      	ldr	r5, [r6, #4]
 8005470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005472:	07d9      	lsls	r1, r3, #31
 8005474:	d405      	bmi.n	8005482 <_vfiprintf_r+0x32>
 8005476:	89ab      	ldrh	r3, [r5, #12]
 8005478:	059a      	lsls	r2, r3, #22
 800547a:	d402      	bmi.n	8005482 <_vfiprintf_r+0x32>
 800547c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800547e:	f7ff fe6d 	bl	800515c <__retarget_lock_acquire_recursive>
 8005482:	89ab      	ldrh	r3, [r5, #12]
 8005484:	071b      	lsls	r3, r3, #28
 8005486:	d501      	bpl.n	800548c <_vfiprintf_r+0x3c>
 8005488:	692b      	ldr	r3, [r5, #16]
 800548a:	b9eb      	cbnz	r3, 80054c8 <_vfiprintf_r+0x78>
 800548c:	4629      	mov	r1, r5
 800548e:	4630      	mov	r0, r6
 8005490:	f000 fb5a 	bl	8005b48 <__swsetup_r>
 8005494:	b1c0      	cbz	r0, 80054c8 <_vfiprintf_r+0x78>
 8005496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005498:	07dc      	lsls	r4, r3, #31
 800549a:	d50e      	bpl.n	80054ba <_vfiprintf_r+0x6a>
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	b01d      	add	sp, #116	; 0x74
 80054a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a6:	4b7b      	ldr	r3, [pc, #492]	; (8005694 <_vfiprintf_r+0x244>)
 80054a8:	429d      	cmp	r5, r3
 80054aa:	d101      	bne.n	80054b0 <_vfiprintf_r+0x60>
 80054ac:	68b5      	ldr	r5, [r6, #8]
 80054ae:	e7df      	b.n	8005470 <_vfiprintf_r+0x20>
 80054b0:	4b79      	ldr	r3, [pc, #484]	; (8005698 <_vfiprintf_r+0x248>)
 80054b2:	429d      	cmp	r5, r3
 80054b4:	bf08      	it	eq
 80054b6:	68f5      	ldreq	r5, [r6, #12]
 80054b8:	e7da      	b.n	8005470 <_vfiprintf_r+0x20>
 80054ba:	89ab      	ldrh	r3, [r5, #12]
 80054bc:	0598      	lsls	r0, r3, #22
 80054be:	d4ed      	bmi.n	800549c <_vfiprintf_r+0x4c>
 80054c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054c2:	f7ff fe4c 	bl	800515e <__retarget_lock_release_recursive>
 80054c6:	e7e9      	b.n	800549c <_vfiprintf_r+0x4c>
 80054c8:	2300      	movs	r3, #0
 80054ca:	9309      	str	r3, [sp, #36]	; 0x24
 80054cc:	2320      	movs	r3, #32
 80054ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80054d6:	2330      	movs	r3, #48	; 0x30
 80054d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800569c <_vfiprintf_r+0x24c>
 80054dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054e0:	f04f 0901 	mov.w	r9, #1
 80054e4:	4623      	mov	r3, r4
 80054e6:	469a      	mov	sl, r3
 80054e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054ec:	b10a      	cbz	r2, 80054f2 <_vfiprintf_r+0xa2>
 80054ee:	2a25      	cmp	r2, #37	; 0x25
 80054f0:	d1f9      	bne.n	80054e6 <_vfiprintf_r+0x96>
 80054f2:	ebba 0b04 	subs.w	fp, sl, r4
 80054f6:	d00b      	beq.n	8005510 <_vfiprintf_r+0xc0>
 80054f8:	465b      	mov	r3, fp
 80054fa:	4622      	mov	r2, r4
 80054fc:	4629      	mov	r1, r5
 80054fe:	4630      	mov	r0, r6
 8005500:	f7ff ff93 	bl	800542a <__sfputs_r>
 8005504:	3001      	adds	r0, #1
 8005506:	f000 80aa 	beq.w	800565e <_vfiprintf_r+0x20e>
 800550a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800550c:	445a      	add	r2, fp
 800550e:	9209      	str	r2, [sp, #36]	; 0x24
 8005510:	f89a 3000 	ldrb.w	r3, [sl]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80a2 	beq.w	800565e <_vfiprintf_r+0x20e>
 800551a:	2300      	movs	r3, #0
 800551c:	f04f 32ff 	mov.w	r2, #4294967295
 8005520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005524:	f10a 0a01 	add.w	sl, sl, #1
 8005528:	9304      	str	r3, [sp, #16]
 800552a:	9307      	str	r3, [sp, #28]
 800552c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005530:	931a      	str	r3, [sp, #104]	; 0x68
 8005532:	4654      	mov	r4, sl
 8005534:	2205      	movs	r2, #5
 8005536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800553a:	4858      	ldr	r0, [pc, #352]	; (800569c <_vfiprintf_r+0x24c>)
 800553c:	f7fa fe70 	bl	8000220 <memchr>
 8005540:	9a04      	ldr	r2, [sp, #16]
 8005542:	b9d8      	cbnz	r0, 800557c <_vfiprintf_r+0x12c>
 8005544:	06d1      	lsls	r1, r2, #27
 8005546:	bf44      	itt	mi
 8005548:	2320      	movmi	r3, #32
 800554a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800554e:	0713      	lsls	r3, r2, #28
 8005550:	bf44      	itt	mi
 8005552:	232b      	movmi	r3, #43	; 0x2b
 8005554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005558:	f89a 3000 	ldrb.w	r3, [sl]
 800555c:	2b2a      	cmp	r3, #42	; 0x2a
 800555e:	d015      	beq.n	800558c <_vfiprintf_r+0x13c>
 8005560:	9a07      	ldr	r2, [sp, #28]
 8005562:	4654      	mov	r4, sl
 8005564:	2000      	movs	r0, #0
 8005566:	f04f 0c0a 	mov.w	ip, #10
 800556a:	4621      	mov	r1, r4
 800556c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005570:	3b30      	subs	r3, #48	; 0x30
 8005572:	2b09      	cmp	r3, #9
 8005574:	d94e      	bls.n	8005614 <_vfiprintf_r+0x1c4>
 8005576:	b1b0      	cbz	r0, 80055a6 <_vfiprintf_r+0x156>
 8005578:	9207      	str	r2, [sp, #28]
 800557a:	e014      	b.n	80055a6 <_vfiprintf_r+0x156>
 800557c:	eba0 0308 	sub.w	r3, r0, r8
 8005580:	fa09 f303 	lsl.w	r3, r9, r3
 8005584:	4313      	orrs	r3, r2
 8005586:	9304      	str	r3, [sp, #16]
 8005588:	46a2      	mov	sl, r4
 800558a:	e7d2      	b.n	8005532 <_vfiprintf_r+0xe2>
 800558c:	9b03      	ldr	r3, [sp, #12]
 800558e:	1d19      	adds	r1, r3, #4
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	9103      	str	r1, [sp, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	bfbb      	ittet	lt
 8005598:	425b      	neglt	r3, r3
 800559a:	f042 0202 	orrlt.w	r2, r2, #2
 800559e:	9307      	strge	r3, [sp, #28]
 80055a0:	9307      	strlt	r3, [sp, #28]
 80055a2:	bfb8      	it	lt
 80055a4:	9204      	strlt	r2, [sp, #16]
 80055a6:	7823      	ldrb	r3, [r4, #0]
 80055a8:	2b2e      	cmp	r3, #46	; 0x2e
 80055aa:	d10c      	bne.n	80055c6 <_vfiprintf_r+0x176>
 80055ac:	7863      	ldrb	r3, [r4, #1]
 80055ae:	2b2a      	cmp	r3, #42	; 0x2a
 80055b0:	d135      	bne.n	800561e <_vfiprintf_r+0x1ce>
 80055b2:	9b03      	ldr	r3, [sp, #12]
 80055b4:	1d1a      	adds	r2, r3, #4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	9203      	str	r2, [sp, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bfb8      	it	lt
 80055be:	f04f 33ff 	movlt.w	r3, #4294967295
 80055c2:	3402      	adds	r4, #2
 80055c4:	9305      	str	r3, [sp, #20]
 80055c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80056ac <_vfiprintf_r+0x25c>
 80055ca:	7821      	ldrb	r1, [r4, #0]
 80055cc:	2203      	movs	r2, #3
 80055ce:	4650      	mov	r0, sl
 80055d0:	f7fa fe26 	bl	8000220 <memchr>
 80055d4:	b140      	cbz	r0, 80055e8 <_vfiprintf_r+0x198>
 80055d6:	2340      	movs	r3, #64	; 0x40
 80055d8:	eba0 000a 	sub.w	r0, r0, sl
 80055dc:	fa03 f000 	lsl.w	r0, r3, r0
 80055e0:	9b04      	ldr	r3, [sp, #16]
 80055e2:	4303      	orrs	r3, r0
 80055e4:	3401      	adds	r4, #1
 80055e6:	9304      	str	r3, [sp, #16]
 80055e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ec:	482c      	ldr	r0, [pc, #176]	; (80056a0 <_vfiprintf_r+0x250>)
 80055ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055f2:	2206      	movs	r2, #6
 80055f4:	f7fa fe14 	bl	8000220 <memchr>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	d03f      	beq.n	800567c <_vfiprintf_r+0x22c>
 80055fc:	4b29      	ldr	r3, [pc, #164]	; (80056a4 <_vfiprintf_r+0x254>)
 80055fe:	bb1b      	cbnz	r3, 8005648 <_vfiprintf_r+0x1f8>
 8005600:	9b03      	ldr	r3, [sp, #12]
 8005602:	3307      	adds	r3, #7
 8005604:	f023 0307 	bic.w	r3, r3, #7
 8005608:	3308      	adds	r3, #8
 800560a:	9303      	str	r3, [sp, #12]
 800560c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800560e:	443b      	add	r3, r7
 8005610:	9309      	str	r3, [sp, #36]	; 0x24
 8005612:	e767      	b.n	80054e4 <_vfiprintf_r+0x94>
 8005614:	fb0c 3202 	mla	r2, ip, r2, r3
 8005618:	460c      	mov	r4, r1
 800561a:	2001      	movs	r0, #1
 800561c:	e7a5      	b.n	800556a <_vfiprintf_r+0x11a>
 800561e:	2300      	movs	r3, #0
 8005620:	3401      	adds	r4, #1
 8005622:	9305      	str	r3, [sp, #20]
 8005624:	4619      	mov	r1, r3
 8005626:	f04f 0c0a 	mov.w	ip, #10
 800562a:	4620      	mov	r0, r4
 800562c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005630:	3a30      	subs	r2, #48	; 0x30
 8005632:	2a09      	cmp	r2, #9
 8005634:	d903      	bls.n	800563e <_vfiprintf_r+0x1ee>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0c5      	beq.n	80055c6 <_vfiprintf_r+0x176>
 800563a:	9105      	str	r1, [sp, #20]
 800563c:	e7c3      	b.n	80055c6 <_vfiprintf_r+0x176>
 800563e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005642:	4604      	mov	r4, r0
 8005644:	2301      	movs	r3, #1
 8005646:	e7f0      	b.n	800562a <_vfiprintf_r+0x1da>
 8005648:	ab03      	add	r3, sp, #12
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	462a      	mov	r2, r5
 800564e:	4b16      	ldr	r3, [pc, #88]	; (80056a8 <_vfiprintf_r+0x258>)
 8005650:	a904      	add	r1, sp, #16
 8005652:	4630      	mov	r0, r6
 8005654:	f3af 8000 	nop.w
 8005658:	4607      	mov	r7, r0
 800565a:	1c78      	adds	r0, r7, #1
 800565c:	d1d6      	bne.n	800560c <_vfiprintf_r+0x1bc>
 800565e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005660:	07d9      	lsls	r1, r3, #31
 8005662:	d405      	bmi.n	8005670 <_vfiprintf_r+0x220>
 8005664:	89ab      	ldrh	r3, [r5, #12]
 8005666:	059a      	lsls	r2, r3, #22
 8005668:	d402      	bmi.n	8005670 <_vfiprintf_r+0x220>
 800566a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800566c:	f7ff fd77 	bl	800515e <__retarget_lock_release_recursive>
 8005670:	89ab      	ldrh	r3, [r5, #12]
 8005672:	065b      	lsls	r3, r3, #25
 8005674:	f53f af12 	bmi.w	800549c <_vfiprintf_r+0x4c>
 8005678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800567a:	e711      	b.n	80054a0 <_vfiprintf_r+0x50>
 800567c:	ab03      	add	r3, sp, #12
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	462a      	mov	r2, r5
 8005682:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <_vfiprintf_r+0x258>)
 8005684:	a904      	add	r1, sp, #16
 8005686:	4630      	mov	r0, r6
 8005688:	f000 f880 	bl	800578c <_printf_i>
 800568c:	e7e4      	b.n	8005658 <_vfiprintf_r+0x208>
 800568e:	bf00      	nop
 8005690:	08005d74 	.word	0x08005d74
 8005694:	08005d94 	.word	0x08005d94
 8005698:	08005d54 	.word	0x08005d54
 800569c:	08005db4 	.word	0x08005db4
 80056a0:	08005dbe 	.word	0x08005dbe
 80056a4:	00000000 	.word	0x00000000
 80056a8:	0800542b 	.word	0x0800542b
 80056ac:	08005dba 	.word	0x08005dba

080056b0 <_printf_common>:
 80056b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b4:	4616      	mov	r6, r2
 80056b6:	4699      	mov	r9, r3
 80056b8:	688a      	ldr	r2, [r1, #8]
 80056ba:	690b      	ldr	r3, [r1, #16]
 80056bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056c0:	4293      	cmp	r3, r2
 80056c2:	bfb8      	it	lt
 80056c4:	4613      	movlt	r3, r2
 80056c6:	6033      	str	r3, [r6, #0]
 80056c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056cc:	4607      	mov	r7, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	b10a      	cbz	r2, 80056d6 <_printf_common+0x26>
 80056d2:	3301      	adds	r3, #1
 80056d4:	6033      	str	r3, [r6, #0]
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	0699      	lsls	r1, r3, #26
 80056da:	bf42      	ittt	mi
 80056dc:	6833      	ldrmi	r3, [r6, #0]
 80056de:	3302      	addmi	r3, #2
 80056e0:	6033      	strmi	r3, [r6, #0]
 80056e2:	6825      	ldr	r5, [r4, #0]
 80056e4:	f015 0506 	ands.w	r5, r5, #6
 80056e8:	d106      	bne.n	80056f8 <_printf_common+0x48>
 80056ea:	f104 0a19 	add.w	sl, r4, #25
 80056ee:	68e3      	ldr	r3, [r4, #12]
 80056f0:	6832      	ldr	r2, [r6, #0]
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	42ab      	cmp	r3, r5
 80056f6:	dc26      	bgt.n	8005746 <_printf_common+0x96>
 80056f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056fc:	1e13      	subs	r3, r2, #0
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	bf18      	it	ne
 8005702:	2301      	movne	r3, #1
 8005704:	0692      	lsls	r2, r2, #26
 8005706:	d42b      	bmi.n	8005760 <_printf_common+0xb0>
 8005708:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800570c:	4649      	mov	r1, r9
 800570e:	4638      	mov	r0, r7
 8005710:	47c0      	blx	r8
 8005712:	3001      	adds	r0, #1
 8005714:	d01e      	beq.n	8005754 <_printf_common+0xa4>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	68e5      	ldr	r5, [r4, #12]
 800571a:	6832      	ldr	r2, [r6, #0]
 800571c:	f003 0306 	and.w	r3, r3, #6
 8005720:	2b04      	cmp	r3, #4
 8005722:	bf08      	it	eq
 8005724:	1aad      	subeq	r5, r5, r2
 8005726:	68a3      	ldr	r3, [r4, #8]
 8005728:	6922      	ldr	r2, [r4, #16]
 800572a:	bf0c      	ite	eq
 800572c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005730:	2500      	movne	r5, #0
 8005732:	4293      	cmp	r3, r2
 8005734:	bfc4      	itt	gt
 8005736:	1a9b      	subgt	r3, r3, r2
 8005738:	18ed      	addgt	r5, r5, r3
 800573a:	2600      	movs	r6, #0
 800573c:	341a      	adds	r4, #26
 800573e:	42b5      	cmp	r5, r6
 8005740:	d11a      	bne.n	8005778 <_printf_common+0xc8>
 8005742:	2000      	movs	r0, #0
 8005744:	e008      	b.n	8005758 <_printf_common+0xa8>
 8005746:	2301      	movs	r3, #1
 8005748:	4652      	mov	r2, sl
 800574a:	4649      	mov	r1, r9
 800574c:	4638      	mov	r0, r7
 800574e:	47c0      	blx	r8
 8005750:	3001      	adds	r0, #1
 8005752:	d103      	bne.n	800575c <_printf_common+0xac>
 8005754:	f04f 30ff 	mov.w	r0, #4294967295
 8005758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800575c:	3501      	adds	r5, #1
 800575e:	e7c6      	b.n	80056ee <_printf_common+0x3e>
 8005760:	18e1      	adds	r1, r4, r3
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	2030      	movs	r0, #48	; 0x30
 8005766:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800576a:	4422      	add	r2, r4
 800576c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005770:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005774:	3302      	adds	r3, #2
 8005776:	e7c7      	b.n	8005708 <_printf_common+0x58>
 8005778:	2301      	movs	r3, #1
 800577a:	4622      	mov	r2, r4
 800577c:	4649      	mov	r1, r9
 800577e:	4638      	mov	r0, r7
 8005780:	47c0      	blx	r8
 8005782:	3001      	adds	r0, #1
 8005784:	d0e6      	beq.n	8005754 <_printf_common+0xa4>
 8005786:	3601      	adds	r6, #1
 8005788:	e7d9      	b.n	800573e <_printf_common+0x8e>
	...

0800578c <_printf_i>:
 800578c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	7e0f      	ldrb	r7, [r1, #24]
 8005792:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005794:	2f78      	cmp	r7, #120	; 0x78
 8005796:	4691      	mov	r9, r2
 8005798:	4680      	mov	r8, r0
 800579a:	460c      	mov	r4, r1
 800579c:	469a      	mov	sl, r3
 800579e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057a2:	d807      	bhi.n	80057b4 <_printf_i+0x28>
 80057a4:	2f62      	cmp	r7, #98	; 0x62
 80057a6:	d80a      	bhi.n	80057be <_printf_i+0x32>
 80057a8:	2f00      	cmp	r7, #0
 80057aa:	f000 80d8 	beq.w	800595e <_printf_i+0x1d2>
 80057ae:	2f58      	cmp	r7, #88	; 0x58
 80057b0:	f000 80a3 	beq.w	80058fa <_printf_i+0x16e>
 80057b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057bc:	e03a      	b.n	8005834 <_printf_i+0xa8>
 80057be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057c2:	2b15      	cmp	r3, #21
 80057c4:	d8f6      	bhi.n	80057b4 <_printf_i+0x28>
 80057c6:	a101      	add	r1, pc, #4	; (adr r1, 80057cc <_printf_i+0x40>)
 80057c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057cc:	08005825 	.word	0x08005825
 80057d0:	08005839 	.word	0x08005839
 80057d4:	080057b5 	.word	0x080057b5
 80057d8:	080057b5 	.word	0x080057b5
 80057dc:	080057b5 	.word	0x080057b5
 80057e0:	080057b5 	.word	0x080057b5
 80057e4:	08005839 	.word	0x08005839
 80057e8:	080057b5 	.word	0x080057b5
 80057ec:	080057b5 	.word	0x080057b5
 80057f0:	080057b5 	.word	0x080057b5
 80057f4:	080057b5 	.word	0x080057b5
 80057f8:	08005945 	.word	0x08005945
 80057fc:	08005869 	.word	0x08005869
 8005800:	08005927 	.word	0x08005927
 8005804:	080057b5 	.word	0x080057b5
 8005808:	080057b5 	.word	0x080057b5
 800580c:	08005967 	.word	0x08005967
 8005810:	080057b5 	.word	0x080057b5
 8005814:	08005869 	.word	0x08005869
 8005818:	080057b5 	.word	0x080057b5
 800581c:	080057b5 	.word	0x080057b5
 8005820:	0800592f 	.word	0x0800592f
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	1d1a      	adds	r2, r3, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	602a      	str	r2, [r5, #0]
 800582c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005834:	2301      	movs	r3, #1
 8005836:	e0a3      	b.n	8005980 <_printf_i+0x1f4>
 8005838:	6820      	ldr	r0, [r4, #0]
 800583a:	6829      	ldr	r1, [r5, #0]
 800583c:	0606      	lsls	r6, r0, #24
 800583e:	f101 0304 	add.w	r3, r1, #4
 8005842:	d50a      	bpl.n	800585a <_printf_i+0xce>
 8005844:	680e      	ldr	r6, [r1, #0]
 8005846:	602b      	str	r3, [r5, #0]
 8005848:	2e00      	cmp	r6, #0
 800584a:	da03      	bge.n	8005854 <_printf_i+0xc8>
 800584c:	232d      	movs	r3, #45	; 0x2d
 800584e:	4276      	negs	r6, r6
 8005850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005854:	485e      	ldr	r0, [pc, #376]	; (80059d0 <_printf_i+0x244>)
 8005856:	230a      	movs	r3, #10
 8005858:	e019      	b.n	800588e <_printf_i+0x102>
 800585a:	680e      	ldr	r6, [r1, #0]
 800585c:	602b      	str	r3, [r5, #0]
 800585e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005862:	bf18      	it	ne
 8005864:	b236      	sxthne	r6, r6
 8005866:	e7ef      	b.n	8005848 <_printf_i+0xbc>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	6820      	ldr	r0, [r4, #0]
 800586c:	1d19      	adds	r1, r3, #4
 800586e:	6029      	str	r1, [r5, #0]
 8005870:	0601      	lsls	r1, r0, #24
 8005872:	d501      	bpl.n	8005878 <_printf_i+0xec>
 8005874:	681e      	ldr	r6, [r3, #0]
 8005876:	e002      	b.n	800587e <_printf_i+0xf2>
 8005878:	0646      	lsls	r6, r0, #25
 800587a:	d5fb      	bpl.n	8005874 <_printf_i+0xe8>
 800587c:	881e      	ldrh	r6, [r3, #0]
 800587e:	4854      	ldr	r0, [pc, #336]	; (80059d0 <_printf_i+0x244>)
 8005880:	2f6f      	cmp	r7, #111	; 0x6f
 8005882:	bf0c      	ite	eq
 8005884:	2308      	moveq	r3, #8
 8005886:	230a      	movne	r3, #10
 8005888:	2100      	movs	r1, #0
 800588a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800588e:	6865      	ldr	r5, [r4, #4]
 8005890:	60a5      	str	r5, [r4, #8]
 8005892:	2d00      	cmp	r5, #0
 8005894:	bfa2      	ittt	ge
 8005896:	6821      	ldrge	r1, [r4, #0]
 8005898:	f021 0104 	bicge.w	r1, r1, #4
 800589c:	6021      	strge	r1, [r4, #0]
 800589e:	b90e      	cbnz	r6, 80058a4 <_printf_i+0x118>
 80058a0:	2d00      	cmp	r5, #0
 80058a2:	d04d      	beq.n	8005940 <_printf_i+0x1b4>
 80058a4:	4615      	mov	r5, r2
 80058a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80058aa:	fb03 6711 	mls	r7, r3, r1, r6
 80058ae:	5dc7      	ldrb	r7, [r0, r7]
 80058b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058b4:	4637      	mov	r7, r6
 80058b6:	42bb      	cmp	r3, r7
 80058b8:	460e      	mov	r6, r1
 80058ba:	d9f4      	bls.n	80058a6 <_printf_i+0x11a>
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d10b      	bne.n	80058d8 <_printf_i+0x14c>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	07de      	lsls	r6, r3, #31
 80058c4:	d508      	bpl.n	80058d8 <_printf_i+0x14c>
 80058c6:	6923      	ldr	r3, [r4, #16]
 80058c8:	6861      	ldr	r1, [r4, #4]
 80058ca:	4299      	cmp	r1, r3
 80058cc:	bfde      	ittt	le
 80058ce:	2330      	movle	r3, #48	; 0x30
 80058d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058d8:	1b52      	subs	r2, r2, r5
 80058da:	6122      	str	r2, [r4, #16]
 80058dc:	f8cd a000 	str.w	sl, [sp]
 80058e0:	464b      	mov	r3, r9
 80058e2:	aa03      	add	r2, sp, #12
 80058e4:	4621      	mov	r1, r4
 80058e6:	4640      	mov	r0, r8
 80058e8:	f7ff fee2 	bl	80056b0 <_printf_common>
 80058ec:	3001      	adds	r0, #1
 80058ee:	d14c      	bne.n	800598a <_printf_i+0x1fe>
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295
 80058f4:	b004      	add	sp, #16
 80058f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fa:	4835      	ldr	r0, [pc, #212]	; (80059d0 <_printf_i+0x244>)
 80058fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005900:	6829      	ldr	r1, [r5, #0]
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	f851 6b04 	ldr.w	r6, [r1], #4
 8005908:	6029      	str	r1, [r5, #0]
 800590a:	061d      	lsls	r5, r3, #24
 800590c:	d514      	bpl.n	8005938 <_printf_i+0x1ac>
 800590e:	07df      	lsls	r7, r3, #31
 8005910:	bf44      	itt	mi
 8005912:	f043 0320 	orrmi.w	r3, r3, #32
 8005916:	6023      	strmi	r3, [r4, #0]
 8005918:	b91e      	cbnz	r6, 8005922 <_printf_i+0x196>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	f023 0320 	bic.w	r3, r3, #32
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	2310      	movs	r3, #16
 8005924:	e7b0      	b.n	8005888 <_printf_i+0xfc>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	f043 0320 	orr.w	r3, r3, #32
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	2378      	movs	r3, #120	; 0x78
 8005930:	4828      	ldr	r0, [pc, #160]	; (80059d4 <_printf_i+0x248>)
 8005932:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005936:	e7e3      	b.n	8005900 <_printf_i+0x174>
 8005938:	0659      	lsls	r1, r3, #25
 800593a:	bf48      	it	mi
 800593c:	b2b6      	uxthmi	r6, r6
 800593e:	e7e6      	b.n	800590e <_printf_i+0x182>
 8005940:	4615      	mov	r5, r2
 8005942:	e7bb      	b.n	80058bc <_printf_i+0x130>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	6826      	ldr	r6, [r4, #0]
 8005948:	6961      	ldr	r1, [r4, #20]
 800594a:	1d18      	adds	r0, r3, #4
 800594c:	6028      	str	r0, [r5, #0]
 800594e:	0635      	lsls	r5, r6, #24
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	d501      	bpl.n	8005958 <_printf_i+0x1cc>
 8005954:	6019      	str	r1, [r3, #0]
 8005956:	e002      	b.n	800595e <_printf_i+0x1d2>
 8005958:	0670      	lsls	r0, r6, #25
 800595a:	d5fb      	bpl.n	8005954 <_printf_i+0x1c8>
 800595c:	8019      	strh	r1, [r3, #0]
 800595e:	2300      	movs	r3, #0
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	4615      	mov	r5, r2
 8005964:	e7ba      	b.n	80058dc <_printf_i+0x150>
 8005966:	682b      	ldr	r3, [r5, #0]
 8005968:	1d1a      	adds	r2, r3, #4
 800596a:	602a      	str	r2, [r5, #0]
 800596c:	681d      	ldr	r5, [r3, #0]
 800596e:	6862      	ldr	r2, [r4, #4]
 8005970:	2100      	movs	r1, #0
 8005972:	4628      	mov	r0, r5
 8005974:	f7fa fc54 	bl	8000220 <memchr>
 8005978:	b108      	cbz	r0, 800597e <_printf_i+0x1f2>
 800597a:	1b40      	subs	r0, r0, r5
 800597c:	6060      	str	r0, [r4, #4]
 800597e:	6863      	ldr	r3, [r4, #4]
 8005980:	6123      	str	r3, [r4, #16]
 8005982:	2300      	movs	r3, #0
 8005984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005988:	e7a8      	b.n	80058dc <_printf_i+0x150>
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	462a      	mov	r2, r5
 800598e:	4649      	mov	r1, r9
 8005990:	4640      	mov	r0, r8
 8005992:	47d0      	blx	sl
 8005994:	3001      	adds	r0, #1
 8005996:	d0ab      	beq.n	80058f0 <_printf_i+0x164>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	079b      	lsls	r3, r3, #30
 800599c:	d413      	bmi.n	80059c6 <_printf_i+0x23a>
 800599e:	68e0      	ldr	r0, [r4, #12]
 80059a0:	9b03      	ldr	r3, [sp, #12]
 80059a2:	4298      	cmp	r0, r3
 80059a4:	bfb8      	it	lt
 80059a6:	4618      	movlt	r0, r3
 80059a8:	e7a4      	b.n	80058f4 <_printf_i+0x168>
 80059aa:	2301      	movs	r3, #1
 80059ac:	4632      	mov	r2, r6
 80059ae:	4649      	mov	r1, r9
 80059b0:	4640      	mov	r0, r8
 80059b2:	47d0      	blx	sl
 80059b4:	3001      	adds	r0, #1
 80059b6:	d09b      	beq.n	80058f0 <_printf_i+0x164>
 80059b8:	3501      	adds	r5, #1
 80059ba:	68e3      	ldr	r3, [r4, #12]
 80059bc:	9903      	ldr	r1, [sp, #12]
 80059be:	1a5b      	subs	r3, r3, r1
 80059c0:	42ab      	cmp	r3, r5
 80059c2:	dcf2      	bgt.n	80059aa <_printf_i+0x21e>
 80059c4:	e7eb      	b.n	800599e <_printf_i+0x212>
 80059c6:	2500      	movs	r5, #0
 80059c8:	f104 0619 	add.w	r6, r4, #25
 80059cc:	e7f5      	b.n	80059ba <_printf_i+0x22e>
 80059ce:	bf00      	nop
 80059d0:	08005dc5 	.word	0x08005dc5
 80059d4:	08005dd6 	.word	0x08005dd6

080059d8 <_sbrk_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4d06      	ldr	r5, [pc, #24]	; (80059f4 <_sbrk_r+0x1c>)
 80059dc:	2300      	movs	r3, #0
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	f7fb f956 	bl	8000c94 <_sbrk>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_sbrk_r+0x1a>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_sbrk_r+0x1a>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	20000200 	.word	0x20000200

080059f8 <__sread>:
 80059f8:	b510      	push	{r4, lr}
 80059fa:	460c      	mov	r4, r1
 80059fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a00:	f000 f960 	bl	8005cc4 <_read_r>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	bfab      	itete	ge
 8005a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a0c:	181b      	addge	r3, r3, r0
 8005a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a12:	bfac      	ite	ge
 8005a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a16:	81a3      	strhlt	r3, [r4, #12]
 8005a18:	bd10      	pop	{r4, pc}

08005a1a <__swrite>:
 8005a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1e:	461f      	mov	r7, r3
 8005a20:	898b      	ldrh	r3, [r1, #12]
 8005a22:	05db      	lsls	r3, r3, #23
 8005a24:	4605      	mov	r5, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	4616      	mov	r6, r2
 8005a2a:	d505      	bpl.n	8005a38 <__swrite+0x1e>
 8005a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a30:	2302      	movs	r3, #2
 8005a32:	2200      	movs	r2, #0
 8005a34:	f000 f928 	bl	8005c88 <_lseek_r>
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a42:	81a3      	strh	r3, [r4, #12]
 8005a44:	4632      	mov	r2, r6
 8005a46:	463b      	mov	r3, r7
 8005a48:	4628      	mov	r0, r5
 8005a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4e:	f000 b869 	b.w	8005b24 <_write_r>

08005a52 <__sseek>:
 8005a52:	b510      	push	{r4, lr}
 8005a54:	460c      	mov	r4, r1
 8005a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a5a:	f000 f915 	bl	8005c88 <_lseek_r>
 8005a5e:	1c43      	adds	r3, r0, #1
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	bf15      	itete	ne
 8005a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a6e:	81a3      	strheq	r3, [r4, #12]
 8005a70:	bf18      	it	ne
 8005a72:	81a3      	strhne	r3, [r4, #12]
 8005a74:	bd10      	pop	{r4, pc}

08005a76 <__sclose>:
 8005a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7a:	f000 b8d3 	b.w	8005c24 <_close_r>
	...

08005a80 <__swbuf_r>:
 8005a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a82:	460e      	mov	r6, r1
 8005a84:	4614      	mov	r4, r2
 8005a86:	4605      	mov	r5, r0
 8005a88:	b118      	cbz	r0, 8005a92 <__swbuf_r+0x12>
 8005a8a:	6983      	ldr	r3, [r0, #24]
 8005a8c:	b90b      	cbnz	r3, 8005a92 <__swbuf_r+0x12>
 8005a8e:	f7ff fac7 	bl	8005020 <__sinit>
 8005a92:	4b21      	ldr	r3, [pc, #132]	; (8005b18 <__swbuf_r+0x98>)
 8005a94:	429c      	cmp	r4, r3
 8005a96:	d12b      	bne.n	8005af0 <__swbuf_r+0x70>
 8005a98:	686c      	ldr	r4, [r5, #4]
 8005a9a:	69a3      	ldr	r3, [r4, #24]
 8005a9c:	60a3      	str	r3, [r4, #8]
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	071a      	lsls	r2, r3, #28
 8005aa2:	d52f      	bpl.n	8005b04 <__swbuf_r+0x84>
 8005aa4:	6923      	ldr	r3, [r4, #16]
 8005aa6:	b36b      	cbz	r3, 8005b04 <__swbuf_r+0x84>
 8005aa8:	6923      	ldr	r3, [r4, #16]
 8005aaa:	6820      	ldr	r0, [r4, #0]
 8005aac:	1ac0      	subs	r0, r0, r3
 8005aae:	6963      	ldr	r3, [r4, #20]
 8005ab0:	b2f6      	uxtb	r6, r6
 8005ab2:	4283      	cmp	r3, r0
 8005ab4:	4637      	mov	r7, r6
 8005ab6:	dc04      	bgt.n	8005ac2 <__swbuf_r+0x42>
 8005ab8:	4621      	mov	r1, r4
 8005aba:	4628      	mov	r0, r5
 8005abc:	f7ff fa1c 	bl	8004ef8 <_fflush_r>
 8005ac0:	bb30      	cbnz	r0, 8005b10 <__swbuf_r+0x90>
 8005ac2:	68a3      	ldr	r3, [r4, #8]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	60a3      	str	r3, [r4, #8]
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	6022      	str	r2, [r4, #0]
 8005ace:	701e      	strb	r6, [r3, #0]
 8005ad0:	6963      	ldr	r3, [r4, #20]
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	4283      	cmp	r3, r0
 8005ad6:	d004      	beq.n	8005ae2 <__swbuf_r+0x62>
 8005ad8:	89a3      	ldrh	r3, [r4, #12]
 8005ada:	07db      	lsls	r3, r3, #31
 8005adc:	d506      	bpl.n	8005aec <__swbuf_r+0x6c>
 8005ade:	2e0a      	cmp	r6, #10
 8005ae0:	d104      	bne.n	8005aec <__swbuf_r+0x6c>
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f7ff fa07 	bl	8004ef8 <_fflush_r>
 8005aea:	b988      	cbnz	r0, 8005b10 <__swbuf_r+0x90>
 8005aec:	4638      	mov	r0, r7
 8005aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af0:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <__swbuf_r+0x9c>)
 8005af2:	429c      	cmp	r4, r3
 8005af4:	d101      	bne.n	8005afa <__swbuf_r+0x7a>
 8005af6:	68ac      	ldr	r4, [r5, #8]
 8005af8:	e7cf      	b.n	8005a9a <__swbuf_r+0x1a>
 8005afa:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <__swbuf_r+0xa0>)
 8005afc:	429c      	cmp	r4, r3
 8005afe:	bf08      	it	eq
 8005b00:	68ec      	ldreq	r4, [r5, #12]
 8005b02:	e7ca      	b.n	8005a9a <__swbuf_r+0x1a>
 8005b04:	4621      	mov	r1, r4
 8005b06:	4628      	mov	r0, r5
 8005b08:	f000 f81e 	bl	8005b48 <__swsetup_r>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d0cb      	beq.n	8005aa8 <__swbuf_r+0x28>
 8005b10:	f04f 37ff 	mov.w	r7, #4294967295
 8005b14:	e7ea      	b.n	8005aec <__swbuf_r+0x6c>
 8005b16:	bf00      	nop
 8005b18:	08005d74 	.word	0x08005d74
 8005b1c:	08005d94 	.word	0x08005d94
 8005b20:	08005d54 	.word	0x08005d54

08005b24 <_write_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	4d07      	ldr	r5, [pc, #28]	; (8005b44 <_write_r+0x20>)
 8005b28:	4604      	mov	r4, r0
 8005b2a:	4608      	mov	r0, r1
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	2200      	movs	r2, #0
 8005b30:	602a      	str	r2, [r5, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	f7fa fd46 	bl	80005c4 <_write>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d102      	bne.n	8005b42 <_write_r+0x1e>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	b103      	cbz	r3, 8005b42 <_write_r+0x1e>
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	20000200 	.word	0x20000200

08005b48 <__swsetup_r>:
 8005b48:	4b32      	ldr	r3, [pc, #200]	; (8005c14 <__swsetup_r+0xcc>)
 8005b4a:	b570      	push	{r4, r5, r6, lr}
 8005b4c:	681d      	ldr	r5, [r3, #0]
 8005b4e:	4606      	mov	r6, r0
 8005b50:	460c      	mov	r4, r1
 8005b52:	b125      	cbz	r5, 8005b5e <__swsetup_r+0x16>
 8005b54:	69ab      	ldr	r3, [r5, #24]
 8005b56:	b913      	cbnz	r3, 8005b5e <__swsetup_r+0x16>
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f7ff fa61 	bl	8005020 <__sinit>
 8005b5e:	4b2e      	ldr	r3, [pc, #184]	; (8005c18 <__swsetup_r+0xd0>)
 8005b60:	429c      	cmp	r4, r3
 8005b62:	d10f      	bne.n	8005b84 <__swsetup_r+0x3c>
 8005b64:	686c      	ldr	r4, [r5, #4]
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b6c:	0719      	lsls	r1, r3, #28
 8005b6e:	d42c      	bmi.n	8005bca <__swsetup_r+0x82>
 8005b70:	06dd      	lsls	r5, r3, #27
 8005b72:	d411      	bmi.n	8005b98 <__swsetup_r+0x50>
 8005b74:	2309      	movs	r3, #9
 8005b76:	6033      	str	r3, [r6, #0]
 8005b78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b7c:	81a3      	strh	r3, [r4, #12]
 8005b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b82:	e03e      	b.n	8005c02 <__swsetup_r+0xba>
 8005b84:	4b25      	ldr	r3, [pc, #148]	; (8005c1c <__swsetup_r+0xd4>)
 8005b86:	429c      	cmp	r4, r3
 8005b88:	d101      	bne.n	8005b8e <__swsetup_r+0x46>
 8005b8a:	68ac      	ldr	r4, [r5, #8]
 8005b8c:	e7eb      	b.n	8005b66 <__swsetup_r+0x1e>
 8005b8e:	4b24      	ldr	r3, [pc, #144]	; (8005c20 <__swsetup_r+0xd8>)
 8005b90:	429c      	cmp	r4, r3
 8005b92:	bf08      	it	eq
 8005b94:	68ec      	ldreq	r4, [r5, #12]
 8005b96:	e7e6      	b.n	8005b66 <__swsetup_r+0x1e>
 8005b98:	0758      	lsls	r0, r3, #29
 8005b9a:	d512      	bpl.n	8005bc2 <__swsetup_r+0x7a>
 8005b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b9e:	b141      	cbz	r1, 8005bb2 <__swsetup_r+0x6a>
 8005ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ba4:	4299      	cmp	r1, r3
 8005ba6:	d002      	beq.n	8005bae <__swsetup_r+0x66>
 8005ba8:	4630      	mov	r0, r6
 8005baa:	f7ff fb47 	bl	800523c <_free_r>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	6363      	str	r3, [r4, #52]	; 0x34
 8005bb2:	89a3      	ldrh	r3, [r4, #12]
 8005bb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bb8:	81a3      	strh	r3, [r4, #12]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	6063      	str	r3, [r4, #4]
 8005bbe:	6923      	ldr	r3, [r4, #16]
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	f043 0308 	orr.w	r3, r3, #8
 8005bc8:	81a3      	strh	r3, [r4, #12]
 8005bca:	6923      	ldr	r3, [r4, #16]
 8005bcc:	b94b      	cbnz	r3, 8005be2 <__swsetup_r+0x9a>
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd8:	d003      	beq.n	8005be2 <__swsetup_r+0x9a>
 8005bda:	4621      	mov	r1, r4
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f7ff fae5 	bl	80051ac <__smakebuf_r>
 8005be2:	89a0      	ldrh	r0, [r4, #12]
 8005be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005be8:	f010 0301 	ands.w	r3, r0, #1
 8005bec:	d00a      	beq.n	8005c04 <__swsetup_r+0xbc>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60a3      	str	r3, [r4, #8]
 8005bf2:	6963      	ldr	r3, [r4, #20]
 8005bf4:	425b      	negs	r3, r3
 8005bf6:	61a3      	str	r3, [r4, #24]
 8005bf8:	6923      	ldr	r3, [r4, #16]
 8005bfa:	b943      	cbnz	r3, 8005c0e <__swsetup_r+0xc6>
 8005bfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c00:	d1ba      	bne.n	8005b78 <__swsetup_r+0x30>
 8005c02:	bd70      	pop	{r4, r5, r6, pc}
 8005c04:	0781      	lsls	r1, r0, #30
 8005c06:	bf58      	it	pl
 8005c08:	6963      	ldrpl	r3, [r4, #20]
 8005c0a:	60a3      	str	r3, [r4, #8]
 8005c0c:	e7f4      	b.n	8005bf8 <__swsetup_r+0xb0>
 8005c0e:	2000      	movs	r0, #0
 8005c10:	e7f7      	b.n	8005c02 <__swsetup_r+0xba>
 8005c12:	bf00      	nop
 8005c14:	2000000c 	.word	0x2000000c
 8005c18:	08005d74 	.word	0x08005d74
 8005c1c:	08005d94 	.word	0x08005d94
 8005c20:	08005d54 	.word	0x08005d54

08005c24 <_close_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	4d06      	ldr	r5, [pc, #24]	; (8005c40 <_close_r+0x1c>)
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	4608      	mov	r0, r1
 8005c2e:	602b      	str	r3, [r5, #0]
 8005c30:	f7fa fffb 	bl	8000c2a <_close>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	d102      	bne.n	8005c3e <_close_r+0x1a>
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	b103      	cbz	r3, 8005c3e <_close_r+0x1a>
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}
 8005c40:	20000200 	.word	0x20000200

08005c44 <_fstat_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	4d07      	ldr	r5, [pc, #28]	; (8005c64 <_fstat_r+0x20>)
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	4611      	mov	r1, r2
 8005c50:	602b      	str	r3, [r5, #0]
 8005c52:	f7fa fff6 	bl	8000c42 <_fstat>
 8005c56:	1c43      	adds	r3, r0, #1
 8005c58:	d102      	bne.n	8005c60 <_fstat_r+0x1c>
 8005c5a:	682b      	ldr	r3, [r5, #0]
 8005c5c:	b103      	cbz	r3, 8005c60 <_fstat_r+0x1c>
 8005c5e:	6023      	str	r3, [r4, #0]
 8005c60:	bd38      	pop	{r3, r4, r5, pc}
 8005c62:	bf00      	nop
 8005c64:	20000200 	.word	0x20000200

08005c68 <_isatty_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4d06      	ldr	r5, [pc, #24]	; (8005c84 <_isatty_r+0x1c>)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	4604      	mov	r4, r0
 8005c70:	4608      	mov	r0, r1
 8005c72:	602b      	str	r3, [r5, #0]
 8005c74:	f7fa fff5 	bl	8000c62 <_isatty>
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	d102      	bne.n	8005c82 <_isatty_r+0x1a>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	b103      	cbz	r3, 8005c82 <_isatty_r+0x1a>
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	20000200 	.word	0x20000200

08005c88 <_lseek_r>:
 8005c88:	b538      	push	{r3, r4, r5, lr}
 8005c8a:	4d07      	ldr	r5, [pc, #28]	; (8005ca8 <_lseek_r+0x20>)
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	4608      	mov	r0, r1
 8005c90:	4611      	mov	r1, r2
 8005c92:	2200      	movs	r2, #0
 8005c94:	602a      	str	r2, [r5, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	f7fa ffee 	bl	8000c78 <_lseek>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d102      	bne.n	8005ca6 <_lseek_r+0x1e>
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	b103      	cbz	r3, 8005ca6 <_lseek_r+0x1e>
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	bd38      	pop	{r3, r4, r5, pc}
 8005ca8:	20000200 	.word	0x20000200

08005cac <__malloc_lock>:
 8005cac:	4801      	ldr	r0, [pc, #4]	; (8005cb4 <__malloc_lock+0x8>)
 8005cae:	f7ff ba55 	b.w	800515c <__retarget_lock_acquire_recursive>
 8005cb2:	bf00      	nop
 8005cb4:	200001f4 	.word	0x200001f4

08005cb8 <__malloc_unlock>:
 8005cb8:	4801      	ldr	r0, [pc, #4]	; (8005cc0 <__malloc_unlock+0x8>)
 8005cba:	f7ff ba50 	b.w	800515e <__retarget_lock_release_recursive>
 8005cbe:	bf00      	nop
 8005cc0:	200001f4 	.word	0x200001f4

08005cc4 <_read_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	4d07      	ldr	r5, [pc, #28]	; (8005ce4 <_read_r+0x20>)
 8005cc8:	4604      	mov	r4, r0
 8005cca:	4608      	mov	r0, r1
 8005ccc:	4611      	mov	r1, r2
 8005cce:	2200      	movs	r2, #0
 8005cd0:	602a      	str	r2, [r5, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f7fa ff8c 	bl	8000bf0 <_read>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	d102      	bne.n	8005ce2 <_read_r+0x1e>
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	b103      	cbz	r3, 8005ce2 <_read_r+0x1e>
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	bd38      	pop	{r3, r4, r5, pc}
 8005ce4:	20000200 	.word	0x20000200

08005ce8 <_init>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	bf00      	nop
 8005cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cee:	bc08      	pop	{r3}
 8005cf0:	469e      	mov	lr, r3
 8005cf2:	4770      	bx	lr

08005cf4 <_fini>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	bf00      	nop
 8005cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfa:	bc08      	pop	{r3}
 8005cfc:	469e      	mov	lr, r3
 8005cfe:	4770      	bx	lr
