
SPI_FullDuplex_ComDMA_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b28  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001d00  08001d00  00011d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d10  08001d10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d10  08001d10  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d10  08001d10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d10  08001d10  00011d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d14  08001d14  00011d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  08001d24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08001d24  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d02  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f2  00000000  00000000  00027d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  00029430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  00029c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b9c2  00000000  00000000  0002a368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000087cd  00000000  00000000  00045d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae74c  00000000  00000000  0004e4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fcc43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f2c  00000000  00000000  000fcc94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001ce8 	.word	0x08001ce8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08001ce8 	.word	0x08001ce8

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa1f 	bl	800065e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f807 	bl	8000232 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8c0 	bl	80003a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 f88c 	bl	8000344 <MX_DMA_Init>
  MX_SPI1_Init();
 800022c:	f000 f84c 	bl	80002c8 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000230:	e7fe      	b.n	8000230 <main+0x18>

08000232 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000232:	b580      	push	{r7, lr}
 8000234:	b094      	sub	sp, #80	; 0x50
 8000236:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000238:	f107 0318 	add.w	r3, r7, #24
 800023c:	2238      	movs	r2, #56	; 0x38
 800023e:	2100      	movs	r1, #0
 8000240:	4618      	mov	r0, r3
 8000242:	f001 fd49 	bl	8001cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000254:	2000      	movs	r0, #0
 8000256:	f000 febf 	bl	8000fd8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025a:	2302      	movs	r3, #2
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000262:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000264:	2340      	movs	r3, #64	; 0x40
 8000266:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000268:	2302      	movs	r3, #2
 800026a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800026c:	2302      	movs	r3, #2
 800026e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000270:	2304      	movs	r3, #4
 8000272:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000274:	2355      	movs	r3, #85	; 0x55
 8000276:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000278:	2302      	movs	r3, #2
 800027a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800027c:	2302      	movs	r3, #2
 800027e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000280:	2302      	movs	r3, #2
 8000282:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	4618      	mov	r0, r3
 800028a:	f000 ff59 	bl	8001140 <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000294:	f000 f8a0 	bl	80003d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029c:	2303      	movs	r3, #3
 800029e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2104      	movs	r1, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fa5d 	bl	8001770 <HAL_RCC_ClockConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002bc:	f000 f88c 	bl	80003d8 <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3750      	adds	r7, #80	; 0x50
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <MX_SPI1_Init+0x74>)
 80002ce:	4a1c      	ldr	r2, [pc, #112]	; (8000340 <MX_SPI1_Init+0x78>)
 80002d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002d2:	4b1a      	ldr	r3, [pc, #104]	; (800033c <MX_SPI1_Init+0x74>)
 80002d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002da:	4b18      	ldr	r3, [pc, #96]	; (800033c <MX_SPI1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002e0:	4b16      	ldr	r3, [pc, #88]	; (800033c <MX_SPI1_Init+0x74>)
 80002e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80002e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002e8:	4b14      	ldr	r3, [pc, #80]	; (800033c <MX_SPI1_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002ee:	4b13      	ldr	r3, [pc, #76]	; (800033c <MX_SPI1_Init+0x74>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_SPI1_Init+0x74>)
 80002f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_SPI1_Init+0x74>)
 80002fe:	2220      	movs	r2, #32
 8000300:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_SPI1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_SPI1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_SPI1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_SPI1_Init+0x74>)
 8000316:	2207      	movs	r2, #7
 8000318:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_SPI1_Init+0x74>)
 800031c:	2200      	movs	r2, #0
 800031e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_SPI1_Init+0x74>)
 8000322:	2200      	movs	r2, #0
 8000324:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_SPI1_Init+0x74>)
 8000328:	f001 fc06 	bl	8001b38 <HAL_SPI_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000332:	f000 f851 	bl	80003d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000028 	.word	0x20000028
 8000340:	40013000 	.word	0x40013000

08000344 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800034a:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <MX_DMA_Init+0x60>)
 800034c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800034e:	4a15      	ldr	r2, [pc, #84]	; (80003a4 <MX_DMA_Init+0x60>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	6493      	str	r3, [r2, #72]	; 0x48
 8000356:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <MX_DMA_Init+0x60>)
 8000358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800035a:	f003 0304 	and.w	r3, r3, #4
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <MX_DMA_Init+0x60>)
 8000364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000366:	4a0f      	ldr	r2, [pc, #60]	; (80003a4 <MX_DMA_Init+0x60>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6493      	str	r3, [r2, #72]	; 0x48
 800036e:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <MX_DMA_Init+0x60>)
 8000370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	2100      	movs	r1, #0
 800037e:	200c      	movs	r0, #12
 8000380:	f000 fab9 	bl	80008f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000384:	200c      	movs	r0, #12
 8000386:	f000 fad0 	bl	800092a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	2100      	movs	r1, #0
 800038e:	200d      	movs	r0, #13
 8000390:	f000 fab1 	bl	80008f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000394:	200d      	movs	r0, #13
 8000396:	f000 fac8 	bl	800092a <HAL_NVIC_EnableIRQ>

}
 800039a:	bf00      	nop
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <MX_GPIO_Init+0x2c>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b2:	4a08      	ldr	r2, [pc, #32]	; (80003d4 <MX_GPIO_Init+0x2c>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_GPIO_Init+0x2c>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]

}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000

080003d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003dc:	b672      	cpsid	i
}
 80003de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <Error_Handler+0x8>
	...

080003e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ea:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <HAL_MspInit+0x44>)
 80003ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ee:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <HAL_MspInit+0x44>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6613      	str	r3, [r2, #96]	; 0x60
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <HAL_MspInit+0x44>)
 80003f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <HAL_MspInit+0x44>)
 8000404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000406:	4a08      	ldr	r2, [pc, #32]	; (8000428 <HAL_MspInit+0x44>)
 8000408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800040c:	6593      	str	r3, [r2, #88]	; 0x58
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <HAL_MspInit+0x44>)
 8000410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800041a:	f000 fe81 	bl	8001120 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000

0800042c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08a      	sub	sp, #40	; 0x28
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000434:	f107 0314 	add.w	r3, r7, #20
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
 8000442:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a4a      	ldr	r2, [pc, #296]	; (8000574 <HAL_SPI_MspInit+0x148>)
 800044a:	4293      	cmp	r3, r2
 800044c:	f040 808d 	bne.w	800056a <HAL_SPI_MspInit+0x13e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000450:	4b49      	ldr	r3, [pc, #292]	; (8000578 <HAL_SPI_MspInit+0x14c>)
 8000452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000454:	4a48      	ldr	r2, [pc, #288]	; (8000578 <HAL_SPI_MspInit+0x14c>)
 8000456:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800045a:	6613      	str	r3, [r2, #96]	; 0x60
 800045c:	4b46      	ldr	r3, [pc, #280]	; (8000578 <HAL_SPI_MspInit+0x14c>)
 800045e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000464:	613b      	str	r3, [r7, #16]
 8000466:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000468:	4b43      	ldr	r3, [pc, #268]	; (8000578 <HAL_SPI_MspInit+0x14c>)
 800046a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046c:	4a42      	ldr	r2, [pc, #264]	; (8000578 <HAL_SPI_MspInit+0x14c>)
 800046e:	f043 0301 	orr.w	r3, r3, #1
 8000472:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000474:	4b40      	ldr	r3, [pc, #256]	; (8000578 <HAL_SPI_MspInit+0x14c>)
 8000476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000478:	f003 0301 	and.w	r3, r3, #1
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000480:	2360      	movs	r3, #96	; 0x60
 8000482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000484:	2302      	movs	r3, #2
 8000486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048c:	2300      	movs	r3, #0
 800048e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000490:	2305      	movs	r3, #5
 8000492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	4619      	mov	r1, r3
 800049a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049e:	f000 fc19 	bl	8000cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a6:	2302      	movs	r3, #2
 80004a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004aa:	2302      	movs	r3, #2
 80004ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ae:	2300      	movs	r3, #0
 80004b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004b2:	2305      	movs	r3, #5
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b6:	f107 0314 	add.w	r3, r7, #20
 80004ba:	4619      	mov	r1, r3
 80004bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c0:	f000 fc08 	bl	8000cd4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80004c4:	4b2d      	ldr	r3, [pc, #180]	; (800057c <HAL_SPI_MspInit+0x150>)
 80004c6:	4a2e      	ldr	r2, [pc, #184]	; (8000580 <HAL_SPI_MspInit+0x154>)
 80004c8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80004ca:	4b2c      	ldr	r3, [pc, #176]	; (800057c <HAL_SPI_MspInit+0x150>)
 80004cc:	220b      	movs	r2, #11
 80004ce:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004d0:	4b2a      	ldr	r3, [pc, #168]	; (800057c <HAL_SPI_MspInit+0x150>)
 80004d2:	2210      	movs	r2, #16
 80004d4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004d6:	4b29      	ldr	r3, [pc, #164]	; (800057c <HAL_SPI_MspInit+0x150>)
 80004d8:	2200      	movs	r2, #0
 80004da:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80004dc:	4b27      	ldr	r3, [pc, #156]	; (800057c <HAL_SPI_MspInit+0x150>)
 80004de:	2280      	movs	r2, #128	; 0x80
 80004e0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004e2:	4b26      	ldr	r3, [pc, #152]	; (800057c <HAL_SPI_MspInit+0x150>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80004e8:	4b24      	ldr	r3, [pc, #144]	; (800057c <HAL_SPI_MspInit+0x150>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80004ee:	4b23      	ldr	r3, [pc, #140]	; (800057c <HAL_SPI_MspInit+0x150>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80004f4:	4b21      	ldr	r3, [pc, #132]	; (800057c <HAL_SPI_MspInit+0x150>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80004fa:	4820      	ldr	r0, [pc, #128]	; (800057c <HAL_SPI_MspInit+0x150>)
 80004fc:	f000 fa30 	bl	8000960 <HAL_DMA_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8000506:	f7ff ff67 	bl	80003d8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a1b      	ldr	r2, [pc, #108]	; (800057c <HAL_SPI_MspInit+0x150>)
 800050e:	655a      	str	r2, [r3, #84]	; 0x54
 8000510:	4a1a      	ldr	r2, [pc, #104]	; (800057c <HAL_SPI_MspInit+0x150>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000516:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <HAL_SPI_MspInit+0x158>)
 8000518:	4a1b      	ldr	r2, [pc, #108]	; (8000588 <HAL_SPI_MspInit+0x15c>)
 800051a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800051c:	4b19      	ldr	r3, [pc, #100]	; (8000584 <HAL_SPI_MspInit+0x158>)
 800051e:	220a      	movs	r2, #10
 8000520:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <HAL_SPI_MspInit+0x158>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <HAL_SPI_MspInit+0x158>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_SPI_MspInit+0x158>)
 8000530:	2280      	movs	r2, #128	; 0x80
 8000532:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000534:	4b13      	ldr	r3, [pc, #76]	; (8000584 <HAL_SPI_MspInit+0x158>)
 8000536:	2200      	movs	r2, #0
 8000538:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_SPI_MspInit+0x158>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000540:	4b10      	ldr	r3, [pc, #64]	; (8000584 <HAL_SPI_MspInit+0x158>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <HAL_SPI_MspInit+0x158>)
 8000548:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800054c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800054e:	480d      	ldr	r0, [pc, #52]	; (8000584 <HAL_SPI_MspInit+0x158>)
 8000550:	f000 fa06 	bl	8000960 <HAL_DMA_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <HAL_SPI_MspInit+0x132>
    {
      Error_Handler();
 800055a:	f7ff ff3d 	bl	80003d8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a08      	ldr	r2, [pc, #32]	; (8000584 <HAL_SPI_MspInit+0x158>)
 8000562:	659a      	str	r2, [r3, #88]	; 0x58
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <HAL_SPI_MspInit+0x158>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800056a:	bf00      	nop
 800056c:	3728      	adds	r7, #40	; 0x28
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40013000 	.word	0x40013000
 8000578:	40021000 	.word	0x40021000
 800057c:	2000008c 	.word	0x2000008c
 8000580:	40020030 	.word	0x40020030
 8000584:	200000ec 	.word	0x200000ec
 8000588:	4002001c 	.word	0x4002001c

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <NMI_Handler+0x4>

08000592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <HardFault_Handler+0x4>

08000598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b8:	f000 f8a4 	bl	8000704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <DMA1_Channel2_IRQHandler+0x10>)
 80005c6:	f000 fa73 	bl	8000ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000ec 	.word	0x200000ec

080005d4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <DMA1_Channel3_IRQHandler+0x10>)
 80005da:	f000 fa69 	bl	8000ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000008c 	.word	0x2000008c

080005e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <SystemInit+0x20>)
 80005ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f2:	4a05      	ldr	r2, [pc, #20]	; (8000608 <SystemInit+0x20>)
 80005f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <LoopForever+0x6>)
  ldr r1, =_edata
 8000612:	490e      	ldr	r1, [pc, #56]	; (800064c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000614:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <LoopForever+0xe>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000628:	4c0b      	ldr	r4, [pc, #44]	; (8000658 <LoopForever+0x16>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000636:	f7ff ffd7 	bl	80005e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800063a:	f001 fb29 	bl	8001c90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800063e:	f7ff fdeb 	bl	8000218 <main>

08000642 <LoopForever>:

LoopForever:
    b LoopForever
 8000642:	e7fe      	b.n	8000642 <LoopForever>
  ldr   r0, =_estack
 8000644:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000650:	08001d18 	.word	0x08001d18
  ldr r2, =_sbss
 8000654:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000658:	20000150 	.word	0x20000150

0800065c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC1_2_IRQHandler>

0800065e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b082      	sub	sp, #8
 8000662:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000664:	2300      	movs	r3, #0
 8000666:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000668:	2003      	movs	r0, #3
 800066a:	f000 f939 	bl	80008e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800066e:	2000      	movs	r0, #0
 8000670:	f000 f80e 	bl	8000690 <HAL_InitTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800067a:	2301      	movs	r3, #1
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	e001      	b.n	8000684 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000680:	f7ff feb0 	bl	80003e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000684:	79fb      	ldrb	r3, [r7, #7]

}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <HAL_InitTick+0x68>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d022      	beq.n	80006ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <HAL_InitTick+0x6c>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <HAL_InitTick+0x68>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80006b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f944 	bl	8000946 <HAL_SYSTICK_Config>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d10f      	bne.n	80006e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b0f      	cmp	r3, #15
 80006c8:	d809      	bhi.n	80006de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ca:	2200      	movs	r2, #0
 80006cc:	6879      	ldr	r1, [r7, #4]
 80006ce:	f04f 30ff 	mov.w	r0, #4294967295
 80006d2:	f000 f910 	bl	80008f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <HAL_InitTick+0x70>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	e007      	b.n	80006ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	73fb      	strb	r3, [r7, #15]
 80006e2:	e004      	b.n	80006ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006e4:	2301      	movs	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]
 80006e8:	e001      	b.n	80006ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000008 	.word	0x20000008
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000004 	.word	0x20000004

08000704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <HAL_IncTick+0x1c>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HAL_IncTick+0x20>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4413      	add	r3, r2
 8000712:	4a03      	ldr	r2, [pc, #12]	; (8000720 <HAL_IncTick+0x1c>)
 8000714:	6013      	str	r3, [r2, #0]
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	2000014c 	.word	0x2000014c
 8000724:	20000008 	.word	0x20000008

08000728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return uwTick;
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <HAL_GetTick+0x14>)
 800072e:	681b      	ldr	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	2000014c 	.word	0x2000014c

08000740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800076c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000772:	4a04      	ldr	r2, [pc, #16]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	60d3      	str	r3, [r2, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <__NVIC_GetPriorityGrouping+0x18>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	f003 0307 	and.w	r3, r3, #7
}
 8000796:	4618      	mov	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	db0b      	blt.n	80007ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	f003 021f 	and.w	r2, r3, #31
 80007bc:	4907      	ldr	r1, [pc, #28]	; (80007dc <__NVIC_EnableIRQ+0x38>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	095b      	lsrs	r3, r3, #5
 80007c4:	2001      	movs	r0, #1
 80007c6:	fa00 f202 	lsl.w	r2, r0, r2
 80007ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000e100 	.word	0xe000e100

080007e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	db0a      	blt.n	800080a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	490c      	ldr	r1, [pc, #48]	; (800082c <__NVIC_SetPriority+0x4c>)
 80007fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fe:	0112      	lsls	r2, r2, #4
 8000800:	b2d2      	uxtb	r2, r2
 8000802:	440b      	add	r3, r1
 8000804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000808:	e00a      	b.n	8000820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4908      	ldr	r1, [pc, #32]	; (8000830 <__NVIC_SetPriority+0x50>)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	f003 030f 	and.w	r3, r3, #15
 8000816:	3b04      	subs	r3, #4
 8000818:	0112      	lsls	r2, r2, #4
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	440b      	add	r3, r1
 800081e:	761a      	strb	r2, [r3, #24]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000e100 	.word	0xe000e100
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000834:	b480      	push	{r7}
 8000836:	b089      	sub	sp, #36	; 0x24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	f1c3 0307 	rsb	r3, r3, #7
 800084e:	2b04      	cmp	r3, #4
 8000850:	bf28      	it	cs
 8000852:	2304      	movcs	r3, #4
 8000854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3304      	adds	r3, #4
 800085a:	2b06      	cmp	r3, #6
 800085c:	d902      	bls.n	8000864 <NVIC_EncodePriority+0x30>
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3b03      	subs	r3, #3
 8000862:	e000      	b.n	8000866 <NVIC_EncodePriority+0x32>
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000868:	f04f 32ff 	mov.w	r2, #4294967295
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	43da      	mvns	r2, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	401a      	ands	r2, r3
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800087c:	f04f 31ff 	mov.w	r1, #4294967295
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	fa01 f303 	lsl.w	r3, r1, r3
 8000886:	43d9      	mvns	r1, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	4313      	orrs	r3, r2
         );
}
 800088e:	4618      	mov	r0, r3
 8000890:	3724      	adds	r7, #36	; 0x24
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008ac:	d301      	bcc.n	80008b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00f      	b.n	80008d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <SysTick_Config+0x40>)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ba:	210f      	movs	r1, #15
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f7ff ff8e 	bl	80007e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <SysTick_Config+0x40>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <SysTick_Config+0x40>)
 80008cc:	2207      	movs	r2, #7
 80008ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	e000e010 	.word	0xe000e010

080008e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff ff29 	bl	8000740 <__NVIC_SetPriorityGrouping>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b086      	sub	sp, #24
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	4603      	mov	r3, r0
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
 8000902:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000904:	f7ff ff40 	bl	8000788 <__NVIC_GetPriorityGrouping>
 8000908:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	68b9      	ldr	r1, [r7, #8]
 800090e:	6978      	ldr	r0, [r7, #20]
 8000910:	f7ff ff90 	bl	8000834 <NVIC_EncodePriority>
 8000914:	4602      	mov	r2, r0
 8000916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff5f 	bl	80007e0 <__NVIC_SetPriority>
}
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff33 	bl	80007a4 <__NVIC_EnableIRQ>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ffa4 	bl	800089c <SysTick_Config>
 8000954:	4603      	mov	r3, r0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e08d      	b.n	8000a8e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	4b47      	ldr	r3, [pc, #284]	; (8000a98 <HAL_DMA_Init+0x138>)
 800097a:	429a      	cmp	r2, r3
 800097c:	d80f      	bhi.n	800099e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <HAL_DMA_Init+0x13c>)
 8000986:	4413      	add	r3, r2
 8000988:	4a45      	ldr	r2, [pc, #276]	; (8000aa0 <HAL_DMA_Init+0x140>)
 800098a:	fba2 2303 	umull	r2, r3, r2, r3
 800098e:	091b      	lsrs	r3, r3, #4
 8000990:	009a      	lsls	r2, r3, #2
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a42      	ldr	r2, [pc, #264]	; (8000aa4 <HAL_DMA_Init+0x144>)
 800099a:	641a      	str	r2, [r3, #64]	; 0x40
 800099c:	e00e      	b.n	80009bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	4b40      	ldr	r3, [pc, #256]	; (8000aa8 <HAL_DMA_Init+0x148>)
 80009a6:	4413      	add	r3, r2
 80009a8:	4a3d      	ldr	r2, [pc, #244]	; (8000aa0 <HAL_DMA_Init+0x140>)
 80009aa:	fba2 2303 	umull	r2, r3, r2, r3
 80009ae:	091b      	lsrs	r3, r3, #4
 80009b0:	009a      	lsls	r2, r3, #2
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a3c      	ldr	r2, [pc, #240]	; (8000aac <HAL_DMA_Init+0x14c>)
 80009ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2202      	movs	r2, #2
 80009c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80009d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80009e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6a1b      	ldr	r3, [r3, #32]
 80009fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f000 f8fe 	bl	8000c10 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a1c:	d102      	bne.n	8000a24 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685a      	ldr	r2, [r3, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000a38:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d010      	beq.n	8000a64 <HAL_DMA_Init+0x104>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	d80c      	bhi.n	8000a64 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f000 f91e 	bl	8000c8c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	e008      	b.n	8000a76 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40020407 	.word	0x40020407
 8000a9c:	bffdfff8 	.word	0xbffdfff8
 8000aa0:	cccccccd 	.word	0xcccccccd
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	bffdfbf8 	.word	0xbffdfbf8
 8000aac:	40020400 	.word	0x40020400

08000ab0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000acc:	f003 031f 	and.w	r3, r3, #31
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d026      	beq.n	8000b2a <HAL_DMA_IRQHandler+0x7a>
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d021      	beq.n	8000b2a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f003 0320 	and.w	r3, r3, #32
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d107      	bne.n	8000b04 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f022 0204 	bic.w	r2, r2, #4
 8000b02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b08:	f003 021f 	and.w	r2, r3, #31
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	2104      	movs	r1, #4
 8000b12:	fa01 f202 	lsl.w	r2, r1, r2
 8000b16:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d071      	beq.n	8000c04 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000b28:	e06c      	b.n	8000c04 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	f003 031f 	and.w	r3, r3, #31
 8000b32:	2202      	movs	r2, #2
 8000b34:	409a      	lsls	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d02e      	beq.n	8000b9c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d029      	beq.n	8000b9c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 0320 	and.w	r3, r3, #32
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10b      	bne.n	8000b6e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 020a 	bic.w	r2, r2, #10
 8000b64:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f003 021f 	and.w	r2, r3, #31
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b80:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d038      	beq.n	8000c04 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000b9a:	e033      	b.n	8000c04 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba0:	f003 031f 	and.w	r3, r3, #31
 8000ba4:	2208      	movs	r2, #8
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4013      	ands	r3, r2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d02a      	beq.n	8000c06 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	f003 0308 	and.w	r3, r3, #8
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d025      	beq.n	8000c06 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 020e 	bic.w	r2, r2, #14
 8000bc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f003 021f 	and.w	r2, r3, #31
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bdc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2201      	movs	r2, #1
 8000be2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2201      	movs	r2, #1
 8000be8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d004      	beq.n	8000c06 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
}
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d802      	bhi.n	8000c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	e001      	b.n	8000c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8000c2c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	3b08      	subs	r3, #8
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8000c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c40:	091b      	lsrs	r3, r3, #4
 8000c42:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	009a      	lsls	r2, r3, #2
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4413      	add	r3, r2
 8000c50:	461a      	mov	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8000c5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 031f 	and.w	r3, r3, #31
 8000c62:	2201      	movs	r2, #1
 8000c64:	409a      	lsls	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000c6a:	bf00      	nop
 8000c6c:	371c      	adds	r7, #28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40020407 	.word	0x40020407
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40020820 	.word	0x40020820
 8000c84:	cccccccd 	.word	0xcccccccd
 8000c88:	40020880 	.word	0x40020880

08000c8c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000cae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	f003 031f 	and.w	r3, r3, #31
 8000cb8:	2201      	movs	r2, #1
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	1000823f 	.word	0x1000823f
 8000cd0:	40020940 	.word	0x40020940

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ce2:	e15a      	b.n	8000f9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	2101      	movs	r1, #1
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 814c 	beq.w	8000f94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d005      	beq.n	8000d14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d130      	bne.n	8000d76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	f003 0201 	and.w	r2, r3, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d017      	beq.n	8000db2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d123      	bne.n	8000e06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	08da      	lsrs	r2, r3, #3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3208      	adds	r2, #8
 8000dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	691a      	ldr	r2, [r3, #16]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	08da      	lsrs	r2, r3, #3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	6939      	ldr	r1, [r7, #16]
 8000e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0203 	and.w	r2, r3, #3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 80a6 	beq.w	8000f94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e48:	4b5b      	ldr	r3, [pc, #364]	; (8000fb8 <HAL_GPIO_Init+0x2e4>)
 8000e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4c:	4a5a      	ldr	r2, [pc, #360]	; (8000fb8 <HAL_GPIO_Init+0x2e4>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6613      	str	r3, [r2, #96]	; 0x60
 8000e54:	4b58      	ldr	r3, [pc, #352]	; (8000fb8 <HAL_GPIO_Init+0x2e4>)
 8000e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e60:	4a56      	ldr	r2, [pc, #344]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e8a:	d01f      	beq.n	8000ecc <HAL_GPIO_Init+0x1f8>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a4c      	ldr	r2, [pc, #304]	; (8000fc0 <HAL_GPIO_Init+0x2ec>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d019      	beq.n	8000ec8 <HAL_GPIO_Init+0x1f4>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a4b      	ldr	r2, [pc, #300]	; (8000fc4 <HAL_GPIO_Init+0x2f0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d013      	beq.n	8000ec4 <HAL_GPIO_Init+0x1f0>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a4a      	ldr	r2, [pc, #296]	; (8000fc8 <HAL_GPIO_Init+0x2f4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d00d      	beq.n	8000ec0 <HAL_GPIO_Init+0x1ec>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a49      	ldr	r2, [pc, #292]	; (8000fcc <HAL_GPIO_Init+0x2f8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d007      	beq.n	8000ebc <HAL_GPIO_Init+0x1e8>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a48      	ldr	r2, [pc, #288]	; (8000fd0 <HAL_GPIO_Init+0x2fc>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d101      	bne.n	8000eb8 <HAL_GPIO_Init+0x1e4>
 8000eb4:	2305      	movs	r3, #5
 8000eb6:	e00a      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000eb8:	2306      	movs	r3, #6
 8000eba:	e008      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	e006      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e004      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e002      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	f002 0203 	and.w	r2, r2, #3
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ede:	4937      	ldr	r1, [pc, #220]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eec:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f10:	4a30      	ldr	r2, [pc, #192]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f16:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f3a:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f40:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f64:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f8e:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f47f ae9d 	bne.w	8000ce4 <HAL_GPIO_Init+0x10>
  }
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	371c      	adds	r7, #28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	48000400 	.word	0x48000400
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	48000c00 	.word	0x48000c00
 8000fcc:	48001000 	.word	0x48001000
 8000fd0:	48001400 	.word	0x48001400
 8000fd4:	40010400 	.word	0x40010400

08000fd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d141      	bne.n	800106a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fe6:	4b4b      	ldr	r3, [pc, #300]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff2:	d131      	bne.n	8001058 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ff4:	4b47      	ldr	r3, [pc, #284]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ffa:	4a46      	ldr	r2, [pc, #280]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001000:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001004:	4b43      	ldr	r3, [pc, #268]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800100c:	4a41      	ldr	r2, [pc, #260]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800100e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001012:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001014:	4b40      	ldr	r3, [pc, #256]	; (8001118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2232      	movs	r2, #50	; 0x32
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	4a3f      	ldr	r2, [pc, #252]	; (800111c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001020:	fba2 2303 	umull	r2, r3, r2, r3
 8001024:	0c9b      	lsrs	r3, r3, #18
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800102a:	e002      	b.n	8001032 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3b01      	subs	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800103e:	d102      	bne.n	8001046 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f2      	bne.n	800102c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001046:	4b33      	ldr	r3, [pc, #204]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001052:	d158      	bne.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e057      	b.n	8001108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800105e:	4a2d      	ldr	r2, [pc, #180]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001068:	e04d      	b.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001070:	d141      	bne.n	80010f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001072:	4b28      	ldr	r3, [pc, #160]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800107a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800107e:	d131      	bne.n	80010e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001080:	4b24      	ldr	r3, [pc, #144]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001086:	4a23      	ldr	r2, [pc, #140]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001098:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2232      	movs	r2, #50	; 0x32
 80010a6:	fb02 f303 	mul.w	r3, r2, r3
 80010aa:	4a1c      	ldr	r2, [pc, #112]	; (800111c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	0c9b      	lsrs	r3, r3, #18
 80010b2:	3301      	adds	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b6:	e002      	b.n	80010be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ca:	d102      	bne.n	80010d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f2      	bne.n	80010b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010de:	d112      	bne.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e011      	b.n	8001108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010f4:	e007      	b.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001100:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001104:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40007000 	.word	0x40007000
 8001118:	20000000 	.word	0x20000000
 800111c:	431bde83 	.word	0x431bde83

08001120 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800112a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112e:	6093      	str	r3, [r2, #8]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40007000 	.word	0x40007000

08001140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e306      	b.n	8001760 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d075      	beq.n	800124a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800115e:	4b97      	ldr	r3, [pc, #604]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001168:	4b94      	ldr	r3, [pc, #592]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	2b0c      	cmp	r3, #12
 8001176:	d102      	bne.n	800117e <HAL_RCC_OscConfig+0x3e>
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	2b03      	cmp	r3, #3
 800117c:	d002      	beq.n	8001184 <HAL_RCC_OscConfig+0x44>
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	2b08      	cmp	r3, #8
 8001182:	d10b      	bne.n	800119c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	4b8d      	ldr	r3, [pc, #564]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d05b      	beq.n	8001248 <HAL_RCC_OscConfig+0x108>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d157      	bne.n	8001248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e2e1      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d106      	bne.n	80011b4 <HAL_RCC_OscConfig+0x74>
 80011a6:	4b85      	ldr	r3, [pc, #532]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a84      	ldr	r2, [pc, #528]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e01d      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011bc:	d10c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x98>
 80011be:	4b7f      	ldr	r3, [pc, #508]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a7e      	ldr	r2, [pc, #504]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b7c      	ldr	r3, [pc, #496]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a7b      	ldr	r2, [pc, #492]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e00b      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011d8:	4b78      	ldr	r3, [pc, #480]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a77      	ldr	r2, [pc, #476]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b75      	ldr	r3, [pc, #468]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a74      	ldr	r2, [pc, #464]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 80011ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d013      	beq.n	8001220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff fa96 	bl	8000728 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fa92 	bl	8000728 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	; 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e2a6      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001212:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0xc0>
 800121e:	e014      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001220:	f7ff fa82 	bl	8000728 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff fa7e 	bl	8000728 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e292      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800123a:	4b60      	ldr	r3, [pc, #384]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0xe8>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d075      	beq.n	8001342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001256:	4b59      	ldr	r3, [pc, #356]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001260:	4b56      	ldr	r3, [pc, #344]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b0c      	cmp	r3, #12
 800126e:	d102      	bne.n	8001276 <HAL_RCC_OscConfig+0x136>
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d002      	beq.n	800127c <HAL_RCC_OscConfig+0x13c>
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b04      	cmp	r3, #4
 800127a:	d11f      	bne.n	80012bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800127c:	4b4f      	ldr	r3, [pc, #316]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <HAL_RCC_OscConfig+0x154>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e265      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001294:	4b49      	ldr	r3, [pc, #292]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	061b      	lsls	r3, r3, #24
 80012a2:	4946      	ldr	r1, [pc, #280]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012a8:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <HAL_RCC_OscConfig+0x280>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f9ef 	bl	8000690 <HAL_InitTick>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d043      	beq.n	8001340 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e251      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d023      	beq.n	800130c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c4:	4b3d      	ldr	r3, [pc, #244]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a3c      	ldr	r2, [pc, #240]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 80012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff fa2a 	bl	8000728 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d8:	f7ff fa26 	bl	8000728 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e23a      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ea:	4b34      	ldr	r3, [pc, #208]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f6:	4b31      	ldr	r3, [pc, #196]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	061b      	lsls	r3, r3, #24
 8001304:	492d      	ldr	r1, [pc, #180]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]
 800130a:	e01a      	b.n	8001342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130c:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a2a      	ldr	r2, [pc, #168]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001318:	f7ff fa06 	bl	8000728 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001320:	f7ff fa02 	bl	8000728 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e216      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x1e0>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d041      	beq.n	80013d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01c      	beq.n	8001390 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135c:	4a17      	ldr	r2, [pc, #92]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff f9df 	bl	8000728 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff f9db 	bl	8000728 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1ef      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0ef      	beq.n	800136e <HAL_RCC_OscConfig+0x22e>
 800138e:	e020      	b.n	80013d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001396:	4a09      	ldr	r2, [pc, #36]	; (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a0:	f7ff f9c2 	bl	8000728 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013a6:	e00d      	b.n	80013c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a8:	f7ff f9be 	bl	8000728 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d906      	bls.n	80013c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e1d2      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000
 80013c0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013c4:	4b8c      	ldr	r3, [pc, #560]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80013c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1ea      	bne.n	80013a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80a6 	beq.w	800152c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013e4:	4b84      	ldr	r3, [pc, #528]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80013e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_OscConfig+0x2b4>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x2b6>
 80013f4:	2300      	movs	r3, #0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00d      	beq.n	8001416 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	4b7f      	ldr	r3, [pc, #508]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fe:	4a7e      	ldr	r2, [pc, #504]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6593      	str	r3, [r2, #88]	; 0x58
 8001406:	4b7c      	ldr	r3, [pc, #496]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001412:	2301      	movs	r3, #1
 8001414:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001416:	4b79      	ldr	r3, [pc, #484]	; (80015fc <HAL_RCC_OscConfig+0x4bc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d118      	bne.n	8001454 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001422:	4b76      	ldr	r3, [pc, #472]	; (80015fc <HAL_RCC_OscConfig+0x4bc>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a75      	ldr	r2, [pc, #468]	; (80015fc <HAL_RCC_OscConfig+0x4bc>)
 8001428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800142e:	f7ff f97b 	bl	8000728 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001436:	f7ff f977 	bl	8000728 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e18b      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001448:	4b6c      	ldr	r3, [pc, #432]	; (80015fc <HAL_RCC_OscConfig+0x4bc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d108      	bne.n	800146e <HAL_RCC_OscConfig+0x32e>
 800145c:	4b66      	ldr	r3, [pc, #408]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 800145e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001462:	4a65      	ldr	r2, [pc, #404]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800146c:	e024      	b.n	80014b8 <HAL_RCC_OscConfig+0x378>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d110      	bne.n	8001498 <HAL_RCC_OscConfig+0x358>
 8001476:	4b60      	ldr	r3, [pc, #384]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800147c:	4a5e      	ldr	r2, [pc, #376]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001486:	4b5c      	ldr	r3, [pc, #368]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800148c:	4a5a      	ldr	r2, [pc, #360]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001496:	e00f      	b.n	80014b8 <HAL_RCC_OscConfig+0x378>
 8001498:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 800149a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149e:	4a56      	ldr	r2, [pc, #344]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014a8:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80014aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ae:	4a52      	ldr	r2, [pc, #328]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80014b0:	f023 0304 	bic.w	r3, r3, #4
 80014b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d016      	beq.n	80014ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c0:	f7ff f932 	bl	8000728 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014c6:	e00a      	b.n	80014de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c8:	f7ff f92e 	bl	8000728 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e140      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014de:	4b46      	ldr	r3, [pc, #280]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80014e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0ed      	beq.n	80014c8 <HAL_RCC_OscConfig+0x388>
 80014ec:	e015      	b.n	800151a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ee:	f7ff f91b 	bl	8000728 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff f917 	bl	8000728 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	f241 3288 	movw	r2, #5000	; 0x1388
 8001504:	4293      	cmp	r3, r2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e129      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800150c:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 800150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ed      	bne.n	80014f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800151a:	7ffb      	ldrb	r3, [r7, #31]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d105      	bne.n	800152c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001520:	4b35      	ldr	r3, [pc, #212]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001524:	4a34      	ldr	r2, [pc, #208]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800152a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	2b00      	cmp	r3, #0
 8001536:	d03c      	beq.n	80015b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d01c      	beq.n	800157a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001540:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001542:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001546:	4a2c      	ldr	r2, [pc, #176]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff f8ea 	bl	8000728 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001558:	f7ff f8e6 	bl	8000728 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e0fa      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 800156c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0ef      	beq.n	8001558 <HAL_RCC_OscConfig+0x418>
 8001578:	e01b      	b.n	80015b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 800157c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001580:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158a:	f7ff f8cd 	bl	8000728 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001592:	f7ff f8c9 	bl	8000728 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e0dd      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80015a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ef      	bne.n	8001592 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 80d1 	beq.w	800175e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b0c      	cmp	r3, #12
 80015c6:	f000 808b 	beq.w	80016e0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d15e      	bne.n	8001690 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_RCC_OscConfig+0x4b8>)
 80015d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff f8a3 	bl	8000728 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e4:	e00c      	b.n	8001600 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff f89f 	bl	8000728 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d905      	bls.n	8001600 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e0b3      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001600:	4b59      	ldr	r3, [pc, #356]	; (8001768 <HAL_RCC_OscConfig+0x628>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1ec      	bne.n	80015e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800160c:	4b56      	ldr	r3, [pc, #344]	; (8001768 <HAL_RCC_OscConfig+0x628>)
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	4b56      	ldr	r3, [pc, #344]	; (800176c <HAL_RCC_OscConfig+0x62c>)
 8001612:	4013      	ands	r3, r2
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6a11      	ldr	r1, [r2, #32]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800161c:	3a01      	subs	r2, #1
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	4311      	orrs	r1, r2
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001626:	0212      	lsls	r2, r2, #8
 8001628:	4311      	orrs	r1, r2
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800162e:	0852      	lsrs	r2, r2, #1
 8001630:	3a01      	subs	r2, #1
 8001632:	0552      	lsls	r2, r2, #21
 8001634:	4311      	orrs	r1, r2
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800163a:	0852      	lsrs	r2, r2, #1
 800163c:	3a01      	subs	r2, #1
 800163e:	0652      	lsls	r2, r2, #25
 8001640:	4311      	orrs	r1, r2
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001646:	06d2      	lsls	r2, r2, #27
 8001648:	430a      	orrs	r2, r1
 800164a:	4947      	ldr	r1, [pc, #284]	; (8001768 <HAL_RCC_OscConfig+0x628>)
 800164c:	4313      	orrs	r3, r2
 800164e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001650:	4b45      	ldr	r3, [pc, #276]	; (8001768 <HAL_RCC_OscConfig+0x628>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a44      	ldr	r2, [pc, #272]	; (8001768 <HAL_RCC_OscConfig+0x628>)
 8001656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800165a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800165c:	4b42      	ldr	r3, [pc, #264]	; (8001768 <HAL_RCC_OscConfig+0x628>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4a41      	ldr	r2, [pc, #260]	; (8001768 <HAL_RCC_OscConfig+0x628>)
 8001662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001666:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff f85e 	bl	8000728 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff f85a 	bl	8000728 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e06e      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001682:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_RCC_OscConfig+0x628>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x530>
 800168e:	e066      	b.n	800175e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001690:	4b35      	ldr	r3, [pc, #212]	; (8001768 <HAL_RCC_OscConfig+0x628>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a34      	ldr	r2, [pc, #208]	; (8001768 <HAL_RCC_OscConfig+0x628>)
 8001696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800169a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800169c:	4b32      	ldr	r3, [pc, #200]	; (8001768 <HAL_RCC_OscConfig+0x628>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	4a31      	ldr	r2, [pc, #196]	; (8001768 <HAL_RCC_OscConfig+0x628>)
 80016a2:	f023 0303 	bic.w	r3, r3, #3
 80016a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80016a8:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <HAL_RCC_OscConfig+0x628>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4a2e      	ldr	r2, [pc, #184]	; (8001768 <HAL_RCC_OscConfig+0x628>)
 80016ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80016b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff f836 	bl	8000728 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff f832 	bl	8000728 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e046      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d2:	4b25      	ldr	r3, [pc, #148]	; (8001768 <HAL_RCC_OscConfig+0x628>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x580>
 80016de:	e03e      	b.n	800175e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e039      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <HAL_RCC_OscConfig+0x628>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f003 0203 	and.w	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d12c      	bne.n	800175a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	3b01      	subs	r3, #1
 800170c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170e:	429a      	cmp	r2, r3
 8001710:	d123      	bne.n	800175a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d11b      	bne.n	800175a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d113      	bne.n	800175a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	085b      	lsrs	r3, r3, #1
 800173e:	3b01      	subs	r3, #1
 8001740:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001742:	429a      	cmp	r2, r3
 8001744:	d109      	bne.n	800175a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001750:	085b      	lsrs	r3, r3, #1
 8001752:	3b01      	subs	r3, #1
 8001754:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001756:	429a      	cmp	r2, r3
 8001758:	d001      	beq.n	800175e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3720      	adds	r7, #32
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40021000 	.word	0x40021000
 800176c:	019f800c 	.word	0x019f800c

08001770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e11e      	b.n	80019c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b91      	ldr	r3, [pc, #580]	; (80019d0 <HAL_RCC_ClockConfig+0x260>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d910      	bls.n	80017b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b8e      	ldr	r3, [pc, #568]	; (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 020f 	bic.w	r2, r3, #15
 800179e:	498c      	ldr	r1, [pc, #560]	; (80019d0 <HAL_RCC_ClockConfig+0x260>)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b8a      	ldr	r3, [pc, #552]	; (80019d0 <HAL_RCC_ClockConfig+0x260>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e106      	b.n	80019c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d073      	beq.n	80018ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d129      	bne.n	8001820 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017cc:	4b81      	ldr	r3, [pc, #516]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0f4      	b.n	80019c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80017dc:	f000 f966 	bl	8001aac <RCC_GetSysClockFreqFromPLLSource>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4a7c      	ldr	r2, [pc, #496]	; (80019d8 <HAL_RCC_ClockConfig+0x268>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d93f      	bls.n	800186a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017ea:	4b7a      	ldr	r3, [pc, #488]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d033      	beq.n	800186a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001806:	2b00      	cmp	r3, #0
 8001808:	d12f      	bne.n	800186a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800180a:	4b72      	ldr	r3, [pc, #456]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001812:	4a70      	ldr	r2, [pc, #448]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001818:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	e024      	b.n	800186a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d107      	bne.n	8001838 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001828:	4b6a      	ldr	r3, [pc, #424]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d109      	bne.n	8001848 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0c6      	b.n	80019c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001838:	4b66      	ldr	r3, [pc, #408]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0be      	b.n	80019c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001848:	f000 f8ce 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 800184c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4a61      	ldr	r2, [pc, #388]	; (80019d8 <HAL_RCC_ClockConfig+0x268>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d909      	bls.n	800186a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001856:	4b5f      	ldr	r3, [pc, #380]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800185e:	4a5d      	ldr	r2, [pc, #372]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001864:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800186a:	4b5a      	ldr	r3, [pc, #360]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f023 0203 	bic.w	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4957      	ldr	r1, [pc, #348]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001878:	4313      	orrs	r3, r2
 800187a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800187c:	f7fe ff54 	bl	8000728 <HAL_GetTick>
 8001880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	e00a      	b.n	800189a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001884:	f7fe ff50 	bl	8000728 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e095      	b.n	80019c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	4b4e      	ldr	r3, [pc, #312]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 020c 	and.w	r2, r3, #12
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d1eb      	bne.n	8001884 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d023      	beq.n	8001900 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c4:	4b43      	ldr	r3, [pc, #268]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a42      	ldr	r2, [pc, #264]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80018ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d007      	beq.n	80018ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80018dc:	4b3d      	ldr	r3, [pc, #244]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80018e4:	4a3b      	ldr	r2, [pc, #236]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80018e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ec:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4936      	ldr	r1, [pc, #216]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
 80018fe:	e008      	b.n	8001912 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2b80      	cmp	r3, #128	; 0x80
 8001904:	d105      	bne.n	8001912 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001906:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 800190c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001910:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d21d      	bcs.n	800195c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f023 020f 	bic.w	r2, r3, #15
 8001928:	4929      	ldr	r1, [pc, #164]	; (80019d0 <HAL_RCC_ClockConfig+0x260>)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001930:	f7fe fefa 	bl	8000728 <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	e00a      	b.n	800194e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001938:	f7fe fef6 	bl	8000728 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	; 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e03b      	b.n	80019c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d1ed      	bne.n	8001938 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4917      	ldr	r1, [pc, #92]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	490f      	ldr	r1, [pc, #60]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800199a:	f000 f825 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 800199e:	4602      	mov	r2, r0
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	490c      	ldr	r1, [pc, #48]	; (80019dc <HAL_RCC_ClockConfig+0x26c>)
 80019ac:	5ccb      	ldrb	r3, [r1, r3]
 80019ae:	f003 031f 	and.w	r3, r3, #31
 80019b2:	fa22 f303 	lsr.w	r3, r2, r3
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <HAL_RCC_ClockConfig+0x270>)
 80019b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_RCC_ClockConfig+0x274>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fe66 	bl	8000690 <HAL_InitTick>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40022000 	.word	0x40022000
 80019d4:	40021000 	.word	0x40021000
 80019d8:	04c4b400 	.word	0x04c4b400
 80019dc:	08001d00 	.word	0x08001d00
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000004 	.word	0x20000004

080019e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019ee:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d102      	bne.n	8001a00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019fa:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	e047      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a00:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d102      	bne.n	8001a12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a0c:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	e03e      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a12:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	2b0c      	cmp	r3, #12
 8001a1c:	d136      	bne.n	8001a8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a1e:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a28:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3301      	adds	r3, #1
 8001a34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d10c      	bne.n	8001a56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a3c:	4a1a      	ldr	r2, [pc, #104]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a46:	68d2      	ldr	r2, [r2, #12]
 8001a48:	0a12      	lsrs	r2, r2, #8
 8001a4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
      break;
 8001a54:	e00c      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a56:	4a13      	ldr	r2, [pc, #76]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5e:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a60:	68d2      	ldr	r2, [r2, #12]
 8001a62:	0a12      	lsrs	r2, r2, #8
 8001a64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a68:	fb02 f303 	mul.w	r3, r2, r3
 8001a6c:	617b      	str	r3, [r7, #20]
      break;
 8001a6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0e5b      	lsrs	r3, r3, #25
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	e001      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a90:	693b      	ldr	r3, [r7, #16]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	371c      	adds	r7, #28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	00f42400 	.word	0x00f42400
 8001aa8:	016e3600 	.word	0x016e3600

08001aac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d10c      	bne.n	8001aea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ad0:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ada:	68d2      	ldr	r2, [r2, #12]
 8001adc:	0a12      	lsrs	r2, r2, #8
 8001ade:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
    break;
 8001ae8:	e00c      	b.n	8001b04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aea:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af2:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001af4:	68d2      	ldr	r2, [r2, #12]
 8001af6:	0a12      	lsrs	r2, r2, #8
 8001af8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	617b      	str	r3, [r7, #20]
    break;
 8001b02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0e5b      	lsrs	r3, r3, #25
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001b1e:	687b      	ldr	r3, [r7, #4]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	016e3600 	.word	0x016e3600
 8001b34:	00f42400 	.word	0x00f42400

08001b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e09d      	b.n	8001c86 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d108      	bne.n	8001b64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b5a:	d009      	beq.n	8001b70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
 8001b62:	e005      	b.n	8001b70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7fe fc4e 	bl	800042c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001bb0:	d902      	bls.n	8001bb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	e002      	b.n	8001bbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001bc6:	d007      	beq.n	8001bd8 <HAL_SPI_Init+0xa0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001bd0:	d002      	beq.n	8001bd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1a:	ea42 0103 	orr.w	r1, r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	0c1b      	lsrs	r3, r3, #16
 8001c34:	f003 0204 	and.w	r2, r3, #4
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001c54:	ea42 0103 	orr.w	r1, r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	69da      	ldr	r2, [r3, #28]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <__libc_init_array>:
 8001c90:	b570      	push	{r4, r5, r6, lr}
 8001c92:	4d0d      	ldr	r5, [pc, #52]	; (8001cc8 <__libc_init_array+0x38>)
 8001c94:	4c0d      	ldr	r4, [pc, #52]	; (8001ccc <__libc_init_array+0x3c>)
 8001c96:	1b64      	subs	r4, r4, r5
 8001c98:	10a4      	asrs	r4, r4, #2
 8001c9a:	2600      	movs	r6, #0
 8001c9c:	42a6      	cmp	r6, r4
 8001c9e:	d109      	bne.n	8001cb4 <__libc_init_array+0x24>
 8001ca0:	4d0b      	ldr	r5, [pc, #44]	; (8001cd0 <__libc_init_array+0x40>)
 8001ca2:	4c0c      	ldr	r4, [pc, #48]	; (8001cd4 <__libc_init_array+0x44>)
 8001ca4:	f000 f820 	bl	8001ce8 <_init>
 8001ca8:	1b64      	subs	r4, r4, r5
 8001caa:	10a4      	asrs	r4, r4, #2
 8001cac:	2600      	movs	r6, #0
 8001cae:	42a6      	cmp	r6, r4
 8001cb0:	d105      	bne.n	8001cbe <__libc_init_array+0x2e>
 8001cb2:	bd70      	pop	{r4, r5, r6, pc}
 8001cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cb8:	4798      	blx	r3
 8001cba:	3601      	adds	r6, #1
 8001cbc:	e7ee      	b.n	8001c9c <__libc_init_array+0xc>
 8001cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cc2:	4798      	blx	r3
 8001cc4:	3601      	adds	r6, #1
 8001cc6:	e7f2      	b.n	8001cae <__libc_init_array+0x1e>
 8001cc8:	08001d10 	.word	0x08001d10
 8001ccc:	08001d10 	.word	0x08001d10
 8001cd0:	08001d10 	.word	0x08001d10
 8001cd4:	08001d14 	.word	0x08001d14

08001cd8 <memset>:
 8001cd8:	4402      	add	r2, r0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d100      	bne.n	8001ce2 <memset+0xa>
 8001ce0:	4770      	bx	lr
 8001ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ce6:	e7f9      	b.n	8001cdc <memset+0x4>

08001ce8 <_init>:
 8001ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cea:	bf00      	nop
 8001cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cee:	bc08      	pop	{r3}
 8001cf0:	469e      	mov	lr, r3
 8001cf2:	4770      	bx	lr

08001cf4 <_fini>:
 8001cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf6:	bf00      	nop
 8001cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cfa:	bc08      	pop	{r3}
 8001cfc:	469e      	mov	lr, r3
 8001cfe:	4770      	bx	lr
