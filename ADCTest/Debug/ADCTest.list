
ADCTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e04  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800505c  0800505c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800505c  0800505c  0001505c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005064  08005064  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005064  08005064  00015064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005068  08005068  00015068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800506c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  080050dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080050dc  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010caa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002068  00000000  00000000  00030d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00032db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00033b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e4ce  00000000  00000000  000347d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f449  00000000  00000000  00052c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9c70  00000000  00000000  000620e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012bd57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c78  00000000  00000000  0012bda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004fcc 	.word	0x08004fcc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004fcc 	.word	0x08004fcc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 faf2 	bl	8000bb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f82f 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f93d 	bl	8000850 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 f8ef 	bl	80007b8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005da:	f000 f875 	bl	80006c8 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80005de:	4811      	ldr	r0, [pc, #68]	; (8000624 <main+0x60>)
 80005e0:	f000 ff82 	bl	80014e8 <HAL_ADC_Start>
	 if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK){
 80005e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005e8:	480e      	ldr	r0, [pc, #56]	; (8000624 <main+0x60>)
 80005ea:	f001 f86d 	bl	80016c8 <HAL_ADC_PollForConversion>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d104      	bne.n	80005fe <main+0x3a>
		 ad = HAL_ADC_GetValue(&hadc1);
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <main+0x60>)
 80005f6:	f001 f93f 	bl	8001878 <HAL_ADC_GetValue>
 80005fa:	4603      	mov	r3, r0
 80005fc:	60fb      	str	r3, [r7, #12]
		 //v = 3.3 * ad / 4095
	 }
	 HAL_ADC_Stop(&hadc1);
 80005fe:	4809      	ldr	r0, [pc, #36]	; (8000624 <main+0x60>)
 8000600:	f001 f82e 	bl	8001660 <HAL_ADC_Stop>

	 snprintf(buff, sizeof(buff), "%d", ad);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	4638      	mov	r0, r7
 8000608:	4a07      	ldr	r2, [pc, #28]	; (8000628 <main+0x64>)
 800060a:	210a      	movs	r1, #10
 800060c:	f004 f85c 	bl	80046c8 <sniprintf>
	 	  HAL_UART_Transmit(&huart2, buff, sizeof(buff), 100);
 8000610:	4639      	mov	r1, r7
 8000612:	2364      	movs	r3, #100	; 0x64
 8000614:	220a      	movs	r2, #10
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <main+0x68>)
 8000618:	f003 fa0a 	bl	8003a30 <HAL_UART_Transmit>
	 	  HAL_Delay(100);
 800061c:	2064      	movs	r0, #100	; 0x64
 800061e:	f000 fb39 	bl	8000c94 <HAL_Delay>
  {
 8000622:	e7dc      	b.n	80005de <main+0x1a>
 8000624:	2000008c 	.word	0x2000008c
 8000628:	08004fe4 	.word	0x08004fe4
 800062c:	200000f8 	.word	0x200000f8

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0318 	add.w	r3, r7, #24
 800063a:	2238      	movs	r2, #56	; 0x38
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f004 f83a 	bl	80046b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000652:	2000      	movs	r0, #0
 8000654:	f002 f9d4 	bl	8002a00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000662:	2340      	movs	r3, #64	; 0x40
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800066e:	2304      	movs	r3, #4
 8000670:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000672:	2355      	movs	r3, #85	; 0x55
 8000674:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fa5e 	bl	8002b48 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000692:	f000 f91d 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2303      	movs	r3, #3
 800069c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2104      	movs	r1, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fd62 	bl	8003178 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006ba:	f000 f909 	bl	80008d0 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08c      	sub	sp, #48	; 0x30
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2220      	movs	r2, #32
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 ffe9 	bl	80046b8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006e6:	4b32      	ldr	r3, [pc, #200]	; (80007b0 <MX_ADC1_Init+0xe8>)
 80006e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006ee:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <MX_ADC1_Init+0xe8>)
 80006f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f6:	4b2e      	ldr	r3, [pc, #184]	; (80007b0 <MX_ADC1_Init+0xe8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fc:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <MX_ADC1_Init+0xe8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000702:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <MX_ADC1_Init+0xe8>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000708:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <MX_ADC1_Init+0xe8>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <MX_ADC1_Init+0xe8>)
 8000710:	2204      	movs	r2, #4
 8000712:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000714:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <MX_ADC1_Init+0xe8>)
 8000716:	2200      	movs	r2, #0
 8000718:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800071a:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <MX_ADC1_Init+0xe8>)
 800071c:	2200      	movs	r2, #0
 800071e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <MX_ADC1_Init+0xe8>)
 8000722:	2201      	movs	r2, #1
 8000724:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <MX_ADC1_Init+0xe8>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072e:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <MX_ADC1_Init+0xe8>)
 8000730:	2200      	movs	r2, #0
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <MX_ADC1_Init+0xe8>)
 8000736:	2200      	movs	r2, #0
 8000738:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_ADC1_Init+0xe8>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_ADC1_Init+0xe8>)
 8000744:	2200      	movs	r2, #0
 8000746:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_ADC1_Init+0xe8>)
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000750:	4817      	ldr	r0, [pc, #92]	; (80007b0 <MX_ADC1_Init+0xe8>)
 8000752:	f000 fd3f 	bl	80011d4 <HAL_ADC_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800075c:	f000 f8b8 	bl	80008d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000768:	4619      	mov	r1, r3
 800076a:	4811      	ldr	r0, [pc, #68]	; (80007b0 <MX_ADC1_Init+0xe8>)
 800076c:	f001 fe26 	bl	80023bc <HAL_ADCEx_MultiModeConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000776:	f000 f8ab 	bl	80008d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_ADC1_Init+0xec>)
 800077c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800077e:	2306      	movs	r3, #6
 8000780:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000786:	237f      	movs	r3, #127	; 0x7f
 8000788:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800078a:	2304      	movs	r3, #4
 800078c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <MX_ADC1_Init+0xe8>)
 8000798:	f001 f87c 	bl	8001894 <HAL_ADC_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007a2:	f000 f895 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3730      	adds	r7, #48	; 0x30
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	04300002 	.word	0x04300002

080007b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_USART2_UART_Init+0x90>)
 80007be:	4a23      	ldr	r2, [pc, #140]	; (800084c <MX_USART2_UART_Init+0x94>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_USART2_UART_Init+0x90>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_USART2_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_USART2_UART_Init+0x90>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_USART2_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_USART2_UART_Init+0x90>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_USART2_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_USART2_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_USART2_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_USART2_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_USART2_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000800:	4811      	ldr	r0, [pc, #68]	; (8000848 <MX_USART2_UART_Init+0x90>)
 8000802:	f003 f8c5 	bl	8003990 <HAL_UART_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800080c:	f000 f860 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_USART2_UART_Init+0x90>)
 8000814:	f003 fe5c 	bl	80044d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800081e:	f000 f857 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000822:	2100      	movs	r1, #0
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <MX_USART2_UART_Init+0x90>)
 8000826:	f003 fe91 	bl	800454c <HAL_UARTEx_SetRxFifoThreshold>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000830:	f000 f84e 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_USART2_UART_Init+0x90>)
 8000836:	f003 fe12 	bl	800445e <HAL_UARTEx_DisableFifoMode>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000840:	f000 f846 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200000f8 	.word	0x200000f8
 800084c:	40004400 	.word	0x40004400

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_GPIO_Init+0x78>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <MX_GPIO_Init+0x78>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_GPIO_Init+0x78>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_GPIO_Init+0x78>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <MX_GPIO_Init+0x78>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_GPIO_Init+0x78>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 7180 	mov.w	r1, #256	; 0x100
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_GPIO_Init+0x7c>)
 800089e:	f002 f897 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_GPIO_Init+0x7c>)
 80008bc:	f001 ff06 	bl	80026cc <HAL_GPIO_Init>

}
 80008c0:	bf00      	nop
 80008c2:	3720      	adds	r7, #32
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48000400 	.word	0x48000400

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <HAL_MspInit+0x44>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6613      	str	r3, [r2, #96]	; 0x60
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_MspInit+0x44>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x44>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6593      	str	r3, [r2, #88]	; 0x58
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x44>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09a      	sub	sp, #104	; 0x68
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	2244      	movs	r2, #68	; 0x44
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f003 feb7 	bl	80046b8 <memset>
  if(hadc->Instance==ADC1)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000952:	d134      	bne.n	80009be <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000958:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800095a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800095e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4618      	mov	r0, r3
 8000966:	f002 fe23 	bl	80035b0 <HAL_RCCEx_PeriphCLKConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000970:	f7ff ffae 	bl	80008d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <HAL_ADC_MspInit+0xa4>)
 8000976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000978:	4a13      	ldr	r2, [pc, #76]	; (80009c8 <HAL_ADC_MspInit+0xa4>)
 800097a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800097e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_ADC_MspInit+0xa4>)
 8000982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_ADC_MspInit+0xa4>)
 800098e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000990:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <HAL_ADC_MspInit+0xa4>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_ADC_MspInit+0xa4>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009a4:	2301      	movs	r3, #1
 80009a6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a8:	2303      	movs	r3, #3
 80009aa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009b4:	4619      	mov	r1, r3
 80009b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ba:	f001 fe87 	bl	80026cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009be:	bf00      	nop
 80009c0:	3768      	adds	r7, #104	; 0x68
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000

080009cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b09a      	sub	sp, #104	; 0x68
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	2244      	movs	r2, #68	; 0x44
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f003 fe63 	bl	80046b8 <memset>
  if(huart->Instance==USART2)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a1f      	ldr	r2, [pc, #124]	; (8000a74 <HAL_UART_MspInit+0xa8>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d136      	bne.n	8000a6a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 fdd1 	bl	80035b0 <HAL_RCCEx_PeriphCLKConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a14:	f7ff ff5c 	bl	80008d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0xac>)
 8000a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1c:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <HAL_UART_MspInit+0xac>)
 8000a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a22:	6593      	str	r3, [r2, #88]	; 0x58
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_UART_MspInit+0xac>)
 8000a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0xac>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a34:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <HAL_UART_MspInit+0xac>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_UART_MspInit+0xac>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a48:	230c      	movs	r3, #12
 8000a4a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f001 fe31 	bl	80026cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3768      	adds	r7, #104	; 0x68
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40021000 	.word	0x40021000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f8c6 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad8:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <_sbrk+0x5c>)
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <_sbrk+0x60>)
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <_sbrk+0x64>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <_sbrk+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d207      	bcs.n	8000b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b00:	f003 fdb0 	bl	8004664 <__errno>
 8000b04:	4603      	mov	r3, r0
 8000b06:	220c      	movs	r2, #12
 8000b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	e009      	b.n	8000b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <_sbrk+0x64>)
 8000b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20008000 	.word	0x20008000
 8000b30:	00000400 	.word	0x00000400
 8000b34:	20000188 	.word	0x20000188
 8000b38:	200001a0 	.word	0x200001a0

08000b3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b66:	490e      	ldr	r1, [pc, #56]	; (8000ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <LoopForever+0xe>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b7c:	4c0b      	ldr	r4, [pc, #44]	; (8000bac <LoopForever+0x16>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b8a:	f7ff ffd7 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f003 fd6f 	bl	8004670 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b92:	f7ff fd17 	bl	80005c4 <main>

08000b96 <LoopForever>:

LoopForever:
    b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
  ldr   r0, =_estack
 8000b98:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ba4:	0800506c 	.word	0x0800506c
  ldr r2, =_sbss
 8000ba8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bac:	200001a0 	.word	0x200001a0

08000bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_2_IRQHandler>

08000bb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f001 fd53 	bl	8002668 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 f80e 	bl	8000be4 <HAL_InitTick>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	71fb      	strb	r3, [r7, #7]
 8000bd2:	e001      	b.n	8000bd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd4:	f7ff fe82 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd8:	79fb      	ldrb	r3, [r7, #7]

}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_InitTick+0x68>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d022      	beq.n	8000c3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_InitTick+0x6c>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <HAL_InitTick+0x68>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fd50 	bl	80026b2 <HAL_SYSTICK_Config>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d10f      	bne.n	8000c38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b0f      	cmp	r3, #15
 8000c1c:	d809      	bhi.n	8000c32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	f04f 30ff 	mov.w	r0, #4294967295
 8000c26:	f001 fd2a 	bl	800267e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_InitTick+0x70>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	e007      	b.n	8000c42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	73fb      	strb	r3, [r7, #15]
 8000c36:	e004      	b.n	8000c42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	73fb      	strb	r3, [r7, #15]
 8000c3c:	e001      	b.n	8000c42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_IncTick+0x1c>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x20>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a03      	ldr	r2, [pc, #12]	; (8000c74 <HAL_IncTick+0x1c>)
 8000c68:	6013      	str	r3, [r2, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	2000018c 	.word	0x2000018c
 8000c78:	20000008 	.word	0x20000008

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	2000018c 	.word	0x2000018c

08000c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff ffee 	bl	8000c7c <HAL_GetTick>
 8000ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cac:	d004      	beq.n	8000cb8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_Delay+0x40>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb8:	bf00      	nop
 8000cba:	f7ff ffdf 	bl	8000c7c <HAL_GetTick>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d8f7      	bhi.n	8000cba <HAL_Delay+0x26>
  {
  }
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000008 	.word	0x20000008

08000cd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	431a      	orrs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	609a      	str	r2, [r3, #8]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	3360      	adds	r3, #96	; 0x60
 8000d52:	461a      	mov	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <LL_ADC_SetOffset+0x44>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d6a:	683a      	ldr	r2, [r7, #0]
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d78:	bf00      	nop
 8000d7a:	371c      	adds	r7, #28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	03fff000 	.word	0x03fff000

08000d88 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3360      	adds	r3, #96	; 0x60
 8000d96:	461a      	mov	r2, r3
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3360      	adds	r3, #96	; 0x60
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000dde:	bf00      	nop
 8000de0:	371c      	adds	r7, #28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b087      	sub	sp, #28
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3360      	adds	r3, #96	; 0x60
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000e14:	bf00      	nop
 8000e16:	371c      	adds	r7, #28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3360      	adds	r3, #96	; 0x60
 8000e30:	461a      	mov	r2, r3
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	431a      	orrs	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000e4a:	bf00      	nop
 8000e4c:	371c      	adds	r7, #28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	615a      	str	r2, [r3, #20]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d101      	bne.n	8000e94 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e000      	b.n	8000e96 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b087      	sub	sp, #28
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3330      	adds	r3, #48	; 0x30
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	0a1b      	lsrs	r3, r3, #8
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	4413      	add	r3, r2
 8000ec0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	f003 031f 	and.w	r3, r3, #31
 8000ecc:	211f      	movs	r1, #31
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	0e9b      	lsrs	r3, r3, #26
 8000eda:	f003 011f 	and.w	r1, r3, #31
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	f003 031f 	and.w	r3, r3, #31
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000eee:	bf00      	nop
 8000ef0:	371c      	adds	r7, #28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b087      	sub	sp, #28
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3314      	adds	r3, #20
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	0e5b      	lsrs	r3, r3, #25
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	4413      	add	r3, r2
 8000f18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	0d1b      	lsrs	r3, r3, #20
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	2107      	movs	r1, #7
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	401a      	ands	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	0d1b      	lsrs	r3, r3, #20
 8000f34:	f003 031f 	and.w	r3, r3, #31
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f44:	bf00      	nop
 8000f46:	371c      	adds	r7, #28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d10a      	bne.n	8000f7a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f70:	431a      	orrs	r2, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8000f78:	e00a      	b.n	8000f90 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f86:	43db      	mvns	r3, r3
 8000f88:	401a      	ands	r2, r3
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	407f0000 	.word	0x407f0000

08000fa0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f003 031f 	and.w	r3, r3, #31
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000fe8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	6093      	str	r3, [r2, #8]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800100c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001010:	d101      	bne.n	8001016 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001034:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001038:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001060:	d101      	bne.n	8001066 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001084:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001088:	f043 0201 	orr.w	r2, r3, #1
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010b0:	f043 0202 	orr.w	r2, r3, #2
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d101      	bne.n	80010dc <LL_ADC_IsEnabled+0x18>
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <LL_ADC_IsEnabled+0x1a>
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d101      	bne.n	8001102 <LL_ADC_IsDisableOngoing+0x18>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <LL_ADC_IsDisableOngoing+0x1a>
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001120:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001124:	f043 0204 	orr.w	r2, r3, #4
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001148:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800114c:	f043 0210 	orr.w	r2, r3, #16
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b04      	cmp	r3, #4
 8001172:	d101      	bne.n	8001178 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001196:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800119a:	f043 0220 	orr.w	r2, r3, #32
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d101      	bne.n	80011c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e177      	b.n	80014de <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d109      	bne.n	8001210 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff fb91 	bl	8000924 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fef1 	bl	8000ffc <LL_ADC_IsDeepPowerDownEnabled>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fed7 	bl	8000fd8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff0c 	bl	800104c <LL_ADC_IsInternalRegulatorEnabled>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d115      	bne.n	8001266 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fef0 	bl	8001024 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001244:	4b9c      	ldr	r3, [pc, #624]	; (80014b8 <HAL_ADC_Init+0x2e4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	099b      	lsrs	r3, r3, #6
 800124a:	4a9c      	ldr	r2, [pc, #624]	; (80014bc <HAL_ADC_Init+0x2e8>)
 800124c:	fba2 2303 	umull	r2, r3, r2, r3
 8001250:	099b      	lsrs	r3, r3, #6
 8001252:	3301      	adds	r3, #1
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001258:	e002      	b.n	8001260 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	3b01      	subs	r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f9      	bne.n	800125a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff feee 	bl	800104c <LL_ADC_IsInternalRegulatorEnabled>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10d      	bne.n	8001292 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127a:	f043 0210 	orr.w	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001286:	f043 0201 	orr.w	r2, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff62 	bl	8001160 <LL_ADC_REG_IsConversionOngoing>
 800129c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f040 8110 	bne.w	80014cc <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f040 810c 	bne.w	80014cc <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012bc:	f043 0202 	orr.w	r2, r3, #2
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fefb 	bl	80010c4 <LL_ADC_IsEnabled>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d111      	bne.n	80012f8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012d8:	f7ff fef4 	bl	80010c4 <LL_ADC_IsEnabled>
 80012dc:	4604      	mov	r4, r0
 80012de:	4878      	ldr	r0, [pc, #480]	; (80014c0 <HAL_ADC_Init+0x2ec>)
 80012e0:	f7ff fef0 	bl	80010c4 <LL_ADC_IsEnabled>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4323      	orrs	r3, r4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d105      	bne.n	80012f8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	4619      	mov	r1, r3
 80012f2:	4874      	ldr	r0, [pc, #464]	; (80014c4 <HAL_ADC_Init+0x2f0>)
 80012f4:	f7ff fcf0 	bl	8000cd8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7f5b      	ldrb	r3, [r3, #29]
 80012fc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001302:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001308:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800130e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001316:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001322:	2b01      	cmp	r3, #1
 8001324:	d106      	bne.n	8001334 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	3b01      	subs	r3, #1
 800132c:	045b      	lsls	r3, r3, #17
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	2b00      	cmp	r3, #0
 800133a:	d009      	beq.n	8001350 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	4b5c      	ldr	r3, [pc, #368]	; (80014c8 <HAL_ADC_Init+0x2f4>)
 8001358:	4013      	ands	r3, r2
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	69b9      	ldr	r1, [r7, #24]
 8001360:	430b      	orrs	r3, r1
 8001362:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff feee 	bl	8001160 <LL_ADC_REG_IsConversionOngoing>
 8001384:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff0f 	bl	80011ae <LL_ADC_INJ_IsConversionOngoing>
 8001390:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d16d      	bne.n	8001474 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d16a      	bne.n	8001474 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013a2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013aa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013ba:	f023 0302 	bic.w	r3, r3, #2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	69b9      	ldr	r1, [r7, #24]
 80013c4:	430b      	orrs	r3, r1
 80013c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d017      	beq.n	8001400 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691a      	ldr	r2, [r3, #16]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80013de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80013ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6911      	ldr	r1, [r2, #16]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	430b      	orrs	r3, r1
 80013fa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80013fe:	e013      	b.n	8001428 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800140e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001420:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001424:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800142e:	2b01      	cmp	r3, #1
 8001430:	d118      	bne.n	8001464 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800143c:	f023 0304 	bic.w	r3, r3, #4
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001448:	4311      	orrs	r1, r2
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800144e:	4311      	orrs	r1, r2
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001454:	430a      	orrs	r2, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0201 	orr.w	r2, r2, #1
 8001460:	611a      	str	r2, [r3, #16]
 8001462:	e007      	b.n	8001474 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0201 	bic.w	r2, r2, #1
 8001472:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d10c      	bne.n	8001496 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f023 010f 	bic.w	r1, r3, #15
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	1e5a      	subs	r2, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	631a      	str	r2, [r3, #48]	; 0x30
 8001494:	e007      	b.n	80014a6 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 020f 	bic.w	r2, r2, #15
 80014a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014aa:	f023 0303 	bic.w	r3, r3, #3
 80014ae:	f043 0201 	orr.w	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80014b6:	e011      	b.n	80014dc <HAL_ADC_Init+0x308>
 80014b8:	20000000 	.word	0x20000000
 80014bc:	053e2d63 	.word	0x053e2d63
 80014c0:	50000100 	.word	0x50000100
 80014c4:	50000300 	.word	0x50000300
 80014c8:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d0:	f043 0210 	orr.w	r2, r3, #16
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd90      	pop	{r4, r7, pc}
 80014e6:	bf00      	nop

080014e8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014f0:	4859      	ldr	r0, [pc, #356]	; (8001658 <HAL_ADC_Start+0x170>)
 80014f2:	f7ff fd55 	bl	8000fa0 <LL_ADC_GetMultimode>
 80014f6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fe2f 	bl	8001160 <LL_ADC_REG_IsConversionOngoing>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	f040 809f 	bne.w	8001648 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_ADC_Start+0x30>
 8001514:	2302      	movs	r3, #2
 8001516:	e09a      	b.n	800164e <HAL_ADC_Start+0x166>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 fe63 	bl	80021ec <ADC_Enable>
 8001526:	4603      	mov	r3, r0
 8001528:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800152a:	7dfb      	ldrb	r3, [r7, #23]
 800152c:	2b00      	cmp	r3, #0
 800152e:	f040 8086 	bne.w	800163e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001536:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a44      	ldr	r2, [pc, #272]	; (800165c <HAL_ADC_Start+0x174>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d002      	beq.n	8001556 <HAL_ADC_Start+0x6e>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	e001      	b.n	800155a <HAL_ADC_Start+0x72>
 8001556:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	4293      	cmp	r3, r2
 8001560:	d002      	beq.n	8001568 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d105      	bne.n	8001574 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001580:	d106      	bne.n	8001590 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001586:	f023 0206 	bic.w	r2, r3, #6
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	661a      	str	r2, [r3, #96]	; 0x60
 800158e:	e002      	b.n	8001596 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	221c      	movs	r2, #28
 800159c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a2c      	ldr	r2, [pc, #176]	; (800165c <HAL_ADC_Start+0x174>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d002      	beq.n	80015b6 <HAL_ADC_Start+0xce>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e001      	b.n	80015ba <HAL_ADC_Start+0xd2>
 80015b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	4293      	cmp	r3, r2
 80015c0:	d008      	beq.n	80015d4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	2b05      	cmp	r3, #5
 80015cc:	d002      	beq.n	80015d4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	2b09      	cmp	r3, #9
 80015d2:	d114      	bne.n	80015fe <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d007      	beq.n	80015f2 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fd8a 	bl	8001110 <LL_ADC_REG_StartConversion>
 80015fc:	e026      	b.n	800164c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001602:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a13      	ldr	r2, [pc, #76]	; (800165c <HAL_ADC_Start+0x174>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d002      	beq.n	800161a <HAL_ADC_Start+0x132>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	e001      	b.n	800161e <HAL_ADC_Start+0x136>
 800161a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800161e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00f      	beq.n	800164c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001630:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001634:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	65da      	str	r2, [r3, #92]	; 0x5c
 800163c:	e006      	b.n	800164c <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001646:	e001      	b.n	800164c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001648:	2302      	movs	r3, #2
 800164a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800164c:	7dfb      	ldrb	r3, [r7, #23]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	50000300 	.word	0x50000300
 800165c:	50000100 	.word	0x50000100

08001660 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800166e:	2b01      	cmp	r3, #1
 8001670:	d101      	bne.n	8001676 <HAL_ADC_Stop+0x16>
 8001672:	2302      	movs	r3, #2
 8001674:	e023      	b.n	80016be <HAL_ADC_Stop+0x5e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800167e:	2103      	movs	r1, #3
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 fcf7 	bl	8002074 <ADC_ConversionStop>
 8001686:	4603      	mov	r3, r0
 8001688:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d111      	bne.n	80016b4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fe0d 	bl	80022b0 <ADC_Disable>
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d109      	bne.n	80016b4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	f043 0201 	orr.w	r2, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016d2:	4867      	ldr	r0, [pc, #412]	; (8001870 <HAL_ADC_PollForConversion+0x1a8>)
 80016d4:	f7ff fc64 	bl	8000fa0 <LL_ADC_GetMultimode>
 80016d8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d102      	bne.n	80016e8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80016e2:	2308      	movs	r3, #8
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	e02a      	b.n	800173e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2b05      	cmp	r3, #5
 80016f2:	d002      	beq.n	80016fa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b09      	cmp	r3, #9
 80016f8:	d111      	bne.n	800171e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d007      	beq.n	8001718 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170c:	f043 0220 	orr.w	r2, r3, #32
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e0a6      	b.n	8001866 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001718:	2304      	movs	r3, #4
 800171a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800171c:	e00f      	b.n	800173e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800171e:	4854      	ldr	r0, [pc, #336]	; (8001870 <HAL_ADC_PollForConversion+0x1a8>)
 8001720:	f7ff fc4c 	bl	8000fbc <LL_ADC_GetMultiDMATransfer>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d007      	beq.n	800173a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172e:	f043 0220 	orr.w	r2, r3, #32
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e095      	b.n	8001866 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800173a:	2304      	movs	r3, #4
 800173c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800173e:	f7ff fa9d 	bl	8000c7c <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001744:	e021      	b.n	800178a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d01d      	beq.n	800178a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800174e:	f7ff fa95 	bl	8000c7c <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d302      	bcc.n	8001764 <HAL_ADC_PollForConversion+0x9c>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d112      	bne.n	800178a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10b      	bne.n	800178a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001776:	f043 0204 	orr.w	r2, r3, #4
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e06d      	b.n	8001866 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	4013      	ands	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0d6      	beq.n	8001746 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fb67 	bl	8000e7c <LL_ADC_REG_IsTriggerSourceSWStart>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d01c      	beq.n	80017ee <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7f5b      	ldrb	r3, [r3, #29]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d118      	bne.n	80017ee <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d111      	bne.n	80017ee <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d105      	bne.n	80017ee <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a20      	ldr	r2, [pc, #128]	; (8001874 <HAL_ADC_PollForConversion+0x1ac>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d002      	beq.n	80017fe <HAL_ADC_PollForConversion+0x136>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	e001      	b.n	8001802 <HAL_ADC_PollForConversion+0x13a>
 80017fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	4293      	cmp	r3, r2
 8001808:	d008      	beq.n	800181c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b05      	cmp	r3, #5
 8001814:	d002      	beq.n	800181c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	2b09      	cmp	r3, #9
 800181a:	d104      	bne.n	8001826 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	e00d      	b.n	8001842 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <HAL_ADC_PollForConversion+0x1ac>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d002      	beq.n	8001836 <HAL_ADC_PollForConversion+0x16e>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	e001      	b.n	800183a <HAL_ADC_PollForConversion+0x172>
 8001836:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800183a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	2b08      	cmp	r3, #8
 8001846:	d104      	bne.n	8001852 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2208      	movs	r2, #8
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	e008      	b.n	8001864 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d103      	bne.n	8001864 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	220c      	movs	r2, #12
 8001862:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	50000300 	.word	0x50000300
 8001874:	50000100 	.word	0x50000100

08001878 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b0b6      	sub	sp, #216	; 0xd8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x22>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e3c8      	b.n	8002048 <HAL_ADC_ConfigChannel+0x7b4>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fc4c 	bl	8001160 <LL_ADC_REG_IsConversionOngoing>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 83ad 	bne.w	800202a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	6859      	ldr	r1, [r3, #4]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	f7ff fae0 	bl	8000ea2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fc3a 	bl	8001160 <LL_ADC_REG_IsConversionOngoing>
 80018ec:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fc5a 	bl	80011ae <LL_ADC_INJ_IsConversionOngoing>
 80018fa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 81d9 	bne.w	8001cba <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001908:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 81d4 	bne.w	8001cba <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800191a:	d10f      	bne.n	800193c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2200      	movs	r2, #0
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff fae7 	bl	8000efa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fa8e 	bl	8000e56 <LL_ADC_SetSamplingTimeCommonConfig>
 800193a:	e00e      	b.n	800195a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	6819      	ldr	r1, [r3, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	461a      	mov	r2, r3
 800194a:	f7ff fad6 	bl	8000efa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fa7e 	bl	8000e56 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	08db      	lsrs	r3, r3, #3
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	2b04      	cmp	r3, #4
 800197a:	d022      	beq.n	80019c2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	6919      	ldr	r1, [r3, #16]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800198c:	f7ff f9d8 	bl	8000d40 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	6919      	ldr	r1, [r3, #16]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	461a      	mov	r2, r3
 800199e:	f7ff fa24 	bl	8000dea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	6919      	ldr	r1, [r3, #16]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	7f1b      	ldrb	r3, [r3, #28]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d102      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x124>
 80019b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019b6:	e000      	b.n	80019ba <HAL_ADC_ConfigChannel+0x126>
 80019b8:	2300      	movs	r3, #0
 80019ba:	461a      	mov	r2, r3
 80019bc:	f7ff fa30 	bl	8000e20 <LL_ADC_SetOffsetSaturation>
 80019c0:	e17b      	b.n	8001cba <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f9dd 	bl	8000d88 <LL_ADC_GetOffsetChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10a      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x15a>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f9d2 	bl	8000d88 <LL_ADC_GetOffsetChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	0e9b      	lsrs	r3, r3, #26
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	e01e      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x198>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f9c7 	bl	8000d88 <LL_ADC_GetOffsetChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001a1c:	2320      	movs	r3, #32
 8001a1e:	e004      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001a20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d105      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1b0>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0e9b      	lsrs	r3, r3, #26
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	e018      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x1e2>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001a68:	2320      	movs	r3, #32
 8001a6a:	e004      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001a6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a70:	fab3 f383 	clz	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d106      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff f996 	bl	8000db4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f97a 	bl	8000d88 <LL_ADC_GetOffsetChannel>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10a      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x220>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f96f 	bl	8000d88 <LL_ADC_GetOffsetChannel>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	0e9b      	lsrs	r3, r3, #26
 8001aae:	f003 021f 	and.w	r2, r3, #31
 8001ab2:	e01e      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x25e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2101      	movs	r1, #1
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff f964 	bl	8000d88 <LL_ADC_GetOffsetChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001aca:	fa93 f3a3 	rbit	r3, r3
 8001ace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ad6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ada:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	e004      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d105      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x276>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	0e9b      	lsrs	r3, r3, #26
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	e018      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x2a8>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b16:	fa93 f3a3 	rbit	r3, r3
 8001b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001b2e:	2320      	movs	r3, #32
 8001b30:	e004      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001b32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d106      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2200      	movs	r2, #0
 8001b46:	2101      	movs	r1, #1
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff f933 	bl	8000db4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2102      	movs	r1, #2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff f917 	bl	8000d88 <LL_ADC_GetOffsetChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10a      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x2e6>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2102      	movs	r1, #2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f90c 	bl	8000d88 <LL_ADC_GetOffsetChannel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	0e9b      	lsrs	r3, r3, #26
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	e01e      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x324>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2102      	movs	r1, #2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f901 	bl	8000d88 <LL_ADC_GetOffsetChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b90:	fa93 f3a3 	rbit	r3, r3
 8001b94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001ba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001ba8:	2320      	movs	r3, #32
 8001baa:	e004      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001bac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d105      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x33c>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0e9b      	lsrs	r3, r3, #26
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	e016      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x36a>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001be2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001bf0:	2320      	movs	r3, #32
 8001bf2:	e004      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d106      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2200      	movs	r2, #0
 8001c08:	2102      	movs	r1, #2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f8d2 	bl	8000db4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2103      	movs	r1, #3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f8b6 	bl	8000d88 <LL_ADC_GetOffsetChannel>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10a      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x3a8>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2103      	movs	r1, #3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f8ab 	bl	8000d88 <LL_ADC_GetOffsetChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	0e9b      	lsrs	r3, r3, #26
 8001c36:	f003 021f 	and.w	r2, r3, #31
 8001c3a:	e017      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x3d8>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2103      	movs	r1, #3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f8a0 	bl	8000d88 <LL_ADC_GetOffsetChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c4e:	fa93 f3a3 	rbit	r3, r3
 8001c52:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c56:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001c5e:	2320      	movs	r3, #32
 8001c60:	e003      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c64:	fab3 f383 	clz	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d105      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x3f0>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	0e9b      	lsrs	r3, r3, #26
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	e011      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x414>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	e003      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d106      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2103      	movs	r1, #3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff f87d 	bl	8000db4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fa00 	bl	80010c4 <LL_ADC_IsEnabled>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f040 8140 	bne.w	8001f4c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	6819      	ldr	r1, [r3, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	f7ff f939 	bl	8000f50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	4a8f      	ldr	r2, [pc, #572]	; (8001f20 <HAL_ADC_ConfigChannel+0x68c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	f040 8131 	bne.w	8001f4c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10b      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x47e>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	0e9b      	lsrs	r3, r3, #26
 8001d00:	3301      	adds	r3, #1
 8001d02:	f003 031f 	and.w	r3, r3, #31
 8001d06:	2b09      	cmp	r3, #9
 8001d08:	bf94      	ite	ls
 8001d0a:	2301      	movls	r3, #1
 8001d0c:	2300      	movhi	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	e019      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x4b2>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d22:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	e003      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	2b09      	cmp	r3, #9
 8001d3e:	bf94      	ite	ls
 8001d40:	2301      	movls	r3, #1
 8001d42:	2300      	movhi	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d079      	beq.n	8001e3e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d107      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x4d2>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	0e9b      	lsrs	r3, r3, #26
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	069b      	lsls	r3, r3, #26
 8001d60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d64:	e015      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x4fe>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d76:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001d7e:	2320      	movs	r3, #32
 8001d80:	e003      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	069b      	lsls	r3, r3, #26
 8001d8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d109      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x51e>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	0e9b      	lsrs	r3, r3, #26
 8001da4:	3301      	adds	r3, #1
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	2101      	movs	r1, #1
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	e017      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x54e>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dba:	fa93 f3a3 	rbit	r3, r3
 8001dbe:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001dca:	2320      	movs	r3, #32
 8001dcc:	e003      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	2101      	movs	r1, #1
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	ea42 0103 	orr.w	r1, r2, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10a      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x574>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	0e9b      	lsrs	r3, r3, #26
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f003 021f 	and.w	r2, r3, #31
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	051b      	lsls	r3, r3, #20
 8001e06:	e018      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x5a6>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001e20:	2320      	movs	r3, #32
 8001e22:	e003      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e26:	fab3 f383 	clz	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f003 021f 	and.w	r2, r3, #31
 8001e32:	4613      	mov	r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4413      	add	r3, r2
 8001e38:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e3a:	430b      	orrs	r3, r1
 8001e3c:	e081      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d107      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x5c6>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	0e9b      	lsrs	r3, r3, #26
 8001e50:	3301      	adds	r3, #1
 8001e52:	069b      	lsls	r3, r3, #26
 8001e54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e58:	e015      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x5f2>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001e72:	2320      	movs	r3, #32
 8001e74:	e003      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	069b      	lsls	r3, r3, #26
 8001e82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x612>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	0e9b      	lsrs	r3, r3, #26
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	e017      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x642>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	61fb      	str	r3, [r7, #28]
  return result;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	e003      	b.n	8001eca <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	fab3 f383 	clz	r3, r3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	ea42 0103 	orr.w	r1, r2, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10d      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x66e>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	0e9b      	lsrs	r3, r3, #26
 8001eec:	3301      	adds	r3, #1
 8001eee:	f003 021f 	and.w	r2, r3, #31
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3b1e      	subs	r3, #30
 8001efa:	051b      	lsls	r3, r3, #20
 8001efc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f00:	e01e      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x6ac>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	613b      	str	r3, [r7, #16]
  return result;
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d104      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001f1a:	2320      	movs	r3, #32
 8001f1c:	e006      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x698>
 8001f1e:	bf00      	nop
 8001f20:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f003 021f 	and.w	r2, r3, #31
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	3b1e      	subs	r3, #30
 8001f3a:	051b      	lsls	r3, r3, #20
 8001f3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f40:	430b      	orrs	r3, r1
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	6892      	ldr	r2, [r2, #8]
 8001f46:	4619      	mov	r1, r3
 8001f48:	f7fe ffd7 	bl	8000efa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <HAL_ADC_ConfigChannel+0x7bc>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d071      	beq.n	800203c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f58:	483e      	ldr	r0, [pc, #248]	; (8002054 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f5a:	f7fe fee3 	bl	8000d24 <LL_ADC_GetCommonPathInternalCh>
 8001f5e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a3c      	ldr	r2, [pc, #240]	; (8002058 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d004      	beq.n	8001f76 <HAL_ADC_ConfigChannel+0x6e2>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a3a      	ldr	r2, [pc, #232]	; (800205c <HAL_ADC_ConfigChannel+0x7c8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d127      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d121      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f8a:	d157      	bne.n	800203c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f94:	4619      	mov	r1, r3
 8001f96:	482f      	ldr	r0, [pc, #188]	; (8002054 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f98:	f7fe feb1 	bl	8000cfe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	099b      	lsrs	r3, r3, #6
 8001fa2:	4a30      	ldr	r2, [pc, #192]	; (8002064 <HAL_ADC_ConfigChannel+0x7d0>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	099b      	lsrs	r3, r3, #6
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fb6:	e002      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f9      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fc4:	e03a      	b.n	800203c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a27      	ldr	r2, [pc, #156]	; (8002068 <HAL_ADC_ConfigChannel+0x7d4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d113      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x764>
 8001fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10d      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a22      	ldr	r2, [pc, #136]	; (800206c <HAL_ADC_ConfigChannel+0x7d8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d02a      	beq.n	800203c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fe6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4818      	ldr	r0, [pc, #96]	; (8002054 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ff2:	f7fe fe84 	bl	8000cfe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ff6:	e021      	b.n	800203c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d11c      	bne.n	800203c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002002:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d116      	bne.n	800203c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a16      	ldr	r2, [pc, #88]	; (800206c <HAL_ADC_ConfigChannel+0x7d8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d011      	beq.n	800203c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800201c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002020:	4619      	mov	r1, r3
 8002022:	480c      	ldr	r0, [pc, #48]	; (8002054 <HAL_ADC_ConfigChannel+0x7c0>)
 8002024:	f7fe fe6b 	bl	8000cfe <LL_ADC_SetCommonPathInternalCh>
 8002028:	e008      	b.n	800203c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202e:	f043 0220 	orr.w	r2, r3, #32
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002044:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002048:	4618      	mov	r0, r3
 800204a:	37d8      	adds	r7, #216	; 0xd8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	80080000 	.word	0x80080000
 8002054:	50000300 	.word	0x50000300
 8002058:	c3210000 	.word	0xc3210000
 800205c:	90c00010 	.word	0x90c00010
 8002060:	20000000 	.word	0x20000000
 8002064:	053e2d63 	.word	0x053e2d63
 8002068:	c7520000 	.word	0xc7520000
 800206c:	50000100 	.word	0x50000100
 8002070:	cb840000 	.word	0xcb840000

08002074 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff f868 	bl	8001160 <LL_ADC_REG_IsConversionOngoing>
 8002090:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff f889 	bl	80011ae <LL_ADC_INJ_IsConversionOngoing>
 800209c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d103      	bne.n	80020ac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8098 	beq.w	80021dc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d02a      	beq.n	8002110 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7f5b      	ldrb	r3, [r3, #29]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d126      	bne.n	8002110 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	7f1b      	ldrb	r3, [r3, #28]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d122      	bne.n	8002110 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80020ca:	2301      	movs	r3, #1
 80020cc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80020ce:	e014      	b.n	80020fa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	4a45      	ldr	r2, [pc, #276]	; (80021e8 <ADC_ConversionStop+0x174>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d90d      	bls.n	80020f4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	f043 0210 	orr.w	r2, r3, #16
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e074      	b.n	80021de <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	3301      	adds	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002104:	2b40      	cmp	r3, #64	; 0x40
 8002106:	d1e3      	bne.n	80020d0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2240      	movs	r2, #64	; 0x40
 800210e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d014      	beq.n	8002140 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff f820 	bl	8001160 <LL_ADC_REG_IsConversionOngoing>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00c      	beq.n	8002140 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe ffdd 	bl	80010ea <LL_ADC_IsDisableOngoing>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d104      	bne.n	8002140 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fffc 	bl	8001138 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d014      	beq.n	8002170 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff f82f 	bl	80011ae <LL_ADC_INJ_IsConversionOngoing>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00c      	beq.n	8002170 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe ffc5 	bl	80010ea <LL_ADC_IsDisableOngoing>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d104      	bne.n	8002170 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff f80b 	bl	8001186 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d005      	beq.n	8002182 <ADC_ConversionStop+0x10e>
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d105      	bne.n	8002188 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800217c:	230c      	movs	r3, #12
 800217e:	617b      	str	r3, [r7, #20]
        break;
 8002180:	e005      	b.n	800218e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002182:	2308      	movs	r3, #8
 8002184:	617b      	str	r3, [r7, #20]
        break;
 8002186:	e002      	b.n	800218e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002188:	2304      	movs	r3, #4
 800218a:	617b      	str	r3, [r7, #20]
        break;
 800218c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800218e:	f7fe fd75 	bl	8000c7c <HAL_GetTick>
 8002192:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002194:	e01b      	b.n	80021ce <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002196:	f7fe fd71 	bl	8000c7c <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	d914      	bls.n	80021ce <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00d      	beq.n	80021ce <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b6:	f043 0210 	orr.w	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c2:	f043 0201 	orr.w	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e007      	b.n	80021de <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1dc      	bne.n	8002196 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	a33fffff 	.word	0xa33fffff

080021ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe ff63 	bl	80010c4 <LL_ADC_IsEnabled>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d14d      	bne.n	80022a0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	4b28      	ldr	r3, [pc, #160]	; (80022ac <ADC_Enable+0xc0>)
 800220c:	4013      	ands	r3, r2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00d      	beq.n	800222e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002216:	f043 0210 	orr.w	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002222:	f043 0201 	orr.w	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e039      	b.n	80022a2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe ff1e 	bl	8001074 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002238:	f7fe fd20 	bl	8000c7c <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800223e:	e028      	b.n	8002292 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe ff3d 	bl	80010c4 <LL_ADC_IsEnabled>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d104      	bne.n	800225a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe ff0d 	bl	8001074 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800225a:	f7fe fd0f 	bl	8000c7c <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d914      	bls.n	8002292 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b01      	cmp	r3, #1
 8002274:	d00d      	beq.n	8002292 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227a:	f043 0210 	orr.w	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002286:	f043 0201 	orr.w	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e007      	b.n	80022a2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b01      	cmp	r3, #1
 800229e:	d1cf      	bne.n	8002240 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	8000003f 	.word	0x8000003f

080022b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe ff14 	bl	80010ea <LL_ADC_IsDisableOngoing>
 80022c2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe fefb 	bl	80010c4 <LL_ADC_IsEnabled>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d047      	beq.n	8002364 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d144      	bne.n	8002364 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030d 	and.w	r3, r3, #13
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d10c      	bne.n	8002302 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe fed5 	bl	800109c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2203      	movs	r2, #3
 80022f8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022fa:	f7fe fcbf 	bl	8000c7c <HAL_GetTick>
 80022fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002300:	e029      	b.n	8002356 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002306:	f043 0210 	orr.w	r2, r3, #16
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002312:	f043 0201 	orr.w	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e023      	b.n	8002366 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800231e:	f7fe fcad 	bl	8000c7c <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d914      	bls.n	8002356 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00d      	beq.n	8002356 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	f043 0210 	orr.w	r2, r3, #16
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e007      	b.n	8002366 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1dc      	bne.n	800231e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <LL_ADC_IsEnabled>:
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <LL_ADC_IsEnabled+0x18>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <LL_ADC_IsEnabled+0x1a>
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_REG_IsConversionOngoing>:
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d101      	bne.n	80023ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b0a1      	sub	sp, #132	; 0x84
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e08b      	b.n	80024f2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80023e2:	2300      	movs	r3, #0
 80023e4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80023e6:	2300      	movs	r3, #0
 80023e8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023f2:	d102      	bne.n	80023fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80023f4:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	e001      	b.n	80023fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10b      	bne.n	800241c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	f043 0220 	orr.w	r2, r3, #32
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e06a      	b.n	80024f2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ffb8 	bl	8002394 <LL_ADC_REG_IsConversionOngoing>
 8002424:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff ffb2 	bl	8002394 <LL_ADC_REG_IsConversionOngoing>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d14c      	bne.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002438:	2b00      	cmp	r3, #0
 800243a:	d149      	bne.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800243c:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800243e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d028      	beq.n	800249a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800245a:	035b      	lsls	r3, r3, #13
 800245c:	430b      	orrs	r3, r1
 800245e:	431a      	orrs	r2, r3
 8002460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002462:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002464:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002468:	f7ff ff81 	bl	800236e <LL_ADC_IsEnabled>
 800246c:	4604      	mov	r4, r0
 800246e:	4823      	ldr	r0, [pc, #140]	; (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002470:	f7ff ff7d 	bl	800236e <LL_ADC_IsEnabled>
 8002474:	4603      	mov	r3, r0
 8002476:	4323      	orrs	r3, r4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d133      	bne.n	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800247c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002484:	f023 030f 	bic.w	r3, r3, #15
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	6811      	ldr	r1, [r2, #0]
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	6892      	ldr	r2, [r2, #8]
 8002490:	430a      	orrs	r2, r1
 8002492:	431a      	orrs	r2, r3
 8002494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002496:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002498:	e024      	b.n	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800249a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024a6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024aa:	f7ff ff60 	bl	800236e <LL_ADC_IsEnabled>
 80024ae:	4604      	mov	r4, r0
 80024b0:	4812      	ldr	r0, [pc, #72]	; (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024b2:	f7ff ff5c 	bl	800236e <LL_ADC_IsEnabled>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4323      	orrs	r3, r4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d112      	bne.n	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024c6:	f023 030f 	bic.w	r3, r3, #15
 80024ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024cc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024ce:	e009      	b.n	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	f043 0220 	orr.w	r2, r3, #32
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80024e2:	e000      	b.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80024ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3784      	adds	r7, #132	; 0x84
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd90      	pop	{r4, r7, pc}
 80024fa:	bf00      	nop
 80024fc:	50000100 	.word	0x50000100
 8002500:	50000300 	.word	0x50000300

08002504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002520:	4013      	ands	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800252c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002536:	4a04      	ldr	r2, [pc, #16]	; (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	60d3      	str	r3, [r2, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <__NVIC_GetPriorityGrouping+0x18>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	f003 0307 	and.w	r3, r3, #7
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	; (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f1c3 0307 	rsb	r3, r3, #7
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	bf28      	it	cs
 80025da:	2304      	movcs	r3, #4
 80025dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d902      	bls.n	80025ec <NVIC_EncodePriority+0x30>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3b03      	subs	r3, #3
 80025ea:	e000      	b.n	80025ee <NVIC_EncodePriority+0x32>
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	401a      	ands	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002604:	f04f 31ff 	mov.w	r1, #4294967295
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	43d9      	mvns	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	4313      	orrs	r3, r2
         );
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002634:	d301      	bcc.n	800263a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002636:	2301      	movs	r3, #1
 8002638:	e00f      	b.n	800265a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <SysTick_Config+0x40>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002642:	210f      	movs	r1, #15
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f7ff ff8e 	bl	8002568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <SysTick_Config+0x40>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002652:	4b04      	ldr	r3, [pc, #16]	; (8002664 <SysTick_Config+0x40>)
 8002654:	2207      	movs	r2, #7
 8002656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	e000e010 	.word	0xe000e010

08002668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff47 	bl	8002504 <__NVIC_SetPriorityGrouping>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800268c:	f7ff ff5e 	bl	800254c <__NVIC_GetPriorityGrouping>
 8002690:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	6978      	ldr	r0, [r7, #20]
 8002698:	f7ff ff90 	bl	80025bc <NVIC_EncodePriority>
 800269c:	4602      	mov	r2, r0
 800269e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff5f 	bl	8002568 <__NVIC_SetPriority>
}
 80026aa:	bf00      	nop
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff ffb2 	bl	8002624 <SysTick_Config>
 80026c0:	4603      	mov	r3, r0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026da:	e15a      	b.n	8002992 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2101      	movs	r1, #1
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	4013      	ands	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 814c 	beq.w	800298c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d005      	beq.n	800270c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002708:	2b02      	cmp	r3, #2
 800270a:	d130      	bne.n	800276e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	2203      	movs	r2, #3
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002742:	2201      	movs	r2, #1
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	f003 0201 	and.w	r2, r3, #1
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b03      	cmp	r3, #3
 8002778:	d017      	beq.n	80027aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	2203      	movs	r2, #3
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d123      	bne.n	80027fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	08da      	lsrs	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3208      	adds	r2, #8
 80027be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	220f      	movs	r2, #15
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	08da      	lsrs	r2, r3, #3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3208      	adds	r2, #8
 80027f8:	6939      	ldr	r1, [r7, #16]
 80027fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0203 	and.w	r2, r3, #3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 80a6 	beq.w	800298c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002840:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <HAL_GPIO_Init+0x2e4>)
 8002842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002844:	4a5a      	ldr	r2, [pc, #360]	; (80029b0 <HAL_GPIO_Init+0x2e4>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6613      	str	r3, [r2, #96]	; 0x60
 800284c:	4b58      	ldr	r3, [pc, #352]	; (80029b0 <HAL_GPIO_Init+0x2e4>)
 800284e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002858:	4a56      	ldr	r2, [pc, #344]	; (80029b4 <HAL_GPIO_Init+0x2e8>)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	220f      	movs	r2, #15
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002882:	d01f      	beq.n	80028c4 <HAL_GPIO_Init+0x1f8>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a4c      	ldr	r2, [pc, #304]	; (80029b8 <HAL_GPIO_Init+0x2ec>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d019      	beq.n	80028c0 <HAL_GPIO_Init+0x1f4>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a4b      	ldr	r2, [pc, #300]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d013      	beq.n	80028bc <HAL_GPIO_Init+0x1f0>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a4a      	ldr	r2, [pc, #296]	; (80029c0 <HAL_GPIO_Init+0x2f4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00d      	beq.n	80028b8 <HAL_GPIO_Init+0x1ec>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a49      	ldr	r2, [pc, #292]	; (80029c4 <HAL_GPIO_Init+0x2f8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d007      	beq.n	80028b4 <HAL_GPIO_Init+0x1e8>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a48      	ldr	r2, [pc, #288]	; (80029c8 <HAL_GPIO_Init+0x2fc>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d101      	bne.n	80028b0 <HAL_GPIO_Init+0x1e4>
 80028ac:	2305      	movs	r3, #5
 80028ae:	e00a      	b.n	80028c6 <HAL_GPIO_Init+0x1fa>
 80028b0:	2306      	movs	r3, #6
 80028b2:	e008      	b.n	80028c6 <HAL_GPIO_Init+0x1fa>
 80028b4:	2304      	movs	r3, #4
 80028b6:	e006      	b.n	80028c6 <HAL_GPIO_Init+0x1fa>
 80028b8:	2303      	movs	r3, #3
 80028ba:	e004      	b.n	80028c6 <HAL_GPIO_Init+0x1fa>
 80028bc:	2302      	movs	r3, #2
 80028be:	e002      	b.n	80028c6 <HAL_GPIO_Init+0x1fa>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_GPIO_Init+0x1fa>
 80028c4:	2300      	movs	r3, #0
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	f002 0203 	and.w	r2, r2, #3
 80028cc:	0092      	lsls	r2, r2, #2
 80028ce:	4093      	lsls	r3, r2
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028d6:	4937      	ldr	r1, [pc, #220]	; (80029b4 <HAL_GPIO_Init+0x2e8>)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	3302      	adds	r3, #2
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028e4:	4b39      	ldr	r3, [pc, #228]	; (80029cc <HAL_GPIO_Init+0x300>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002908:	4a30      	ldr	r2, [pc, #192]	; (80029cc <HAL_GPIO_Init+0x300>)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800290e:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <HAL_GPIO_Init+0x300>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	43db      	mvns	r3, r3
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002932:	4a26      	ldr	r2, [pc, #152]	; (80029cc <HAL_GPIO_Init+0x300>)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002938:	4b24      	ldr	r3, [pc, #144]	; (80029cc <HAL_GPIO_Init+0x300>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	43db      	mvns	r3, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800295c:	4a1b      	ldr	r2, [pc, #108]	; (80029cc <HAL_GPIO_Init+0x300>)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002962:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <HAL_GPIO_Init+0x300>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	43db      	mvns	r3, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002986:	4a11      	ldr	r2, [pc, #68]	; (80029cc <HAL_GPIO_Init+0x300>)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	3301      	adds	r3, #1
 8002990:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	fa22 f303 	lsr.w	r3, r2, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	f47f ae9d 	bne.w	80026dc <HAL_GPIO_Init+0x10>
  }
}
 80029a2:	bf00      	nop
 80029a4:	bf00      	nop
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40010000 	.word	0x40010000
 80029b8:	48000400 	.word	0x48000400
 80029bc:	48000800 	.word	0x48000800
 80029c0:	48000c00 	.word	0x48000c00
 80029c4:	48001000 	.word	0x48001000
 80029c8:	48001400 	.word	0x48001400
 80029cc:	40010400 	.word	0x40010400

080029d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
 80029dc:	4613      	mov	r3, r2
 80029de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029e0:	787b      	ldrb	r3, [r7, #1]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029ec:	e002      	b.n	80029f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029ee:	887a      	ldrh	r2, [r7, #2]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d141      	bne.n	8002a92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a0e:	4b4b      	ldr	r3, [pc, #300]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1a:	d131      	bne.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a1c:	4b47      	ldr	r3, [pc, #284]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a22:	4a46      	ldr	r2, [pc, #280]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a2c:	4b43      	ldr	r3, [pc, #268]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a34:	4a41      	ldr	r2, [pc, #260]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a3c:	4b40      	ldr	r3, [pc, #256]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2232      	movs	r2, #50	; 0x32
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	4a3f      	ldr	r2, [pc, #252]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	0c9b      	lsrs	r3, r3, #18
 8002a4e:	3301      	adds	r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a52:	e002      	b.n	8002a5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a5a:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a66:	d102      	bne.n	8002a6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f2      	bne.n	8002a54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a6e:	4b33      	ldr	r3, [pc, #204]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7a:	d158      	bne.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e057      	b.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a80:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a86:	4a2d      	ldr	r2, [pc, #180]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a90:	e04d      	b.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a98:	d141      	bne.n	8002b1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a9a:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa6:	d131      	bne.n	8002b0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aa8:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aae:	4a23      	ldr	r2, [pc, #140]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ab8:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ac0:	4a1e      	ldr	r2, [pc, #120]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ac6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2232      	movs	r2, #50	; 0x32
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad8:	0c9b      	lsrs	r3, r3, #18
 8002ada:	3301      	adds	r3, #1
 8002adc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ade:	e002      	b.n	8002ae6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af2:	d102      	bne.n	8002afa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f2      	bne.n	8002ae0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b06:	d112      	bne.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e011      	b.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b12:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b1c:	e007      	b.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b26:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	20000000 	.word	0x20000000
 8002b44:	431bde83 	.word	0x431bde83

08002b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e306      	b.n	8003168 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d075      	beq.n	8002c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b66:	4b97      	ldr	r3, [pc, #604]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b70:	4b94      	ldr	r3, [pc, #592]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	2b0c      	cmp	r3, #12
 8002b7e:	d102      	bne.n	8002b86 <HAL_RCC_OscConfig+0x3e>
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d002      	beq.n	8002b8c <HAL_RCC_OscConfig+0x44>
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8c:	4b8d      	ldr	r3, [pc, #564]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d05b      	beq.n	8002c50 <HAL_RCC_OscConfig+0x108>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d157      	bne.n	8002c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e2e1      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bac:	d106      	bne.n	8002bbc <HAL_RCC_OscConfig+0x74>
 8002bae:	4b85      	ldr	r3, [pc, #532]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a84      	ldr	r2, [pc, #528]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	e01d      	b.n	8002bf8 <HAL_RCC_OscConfig+0xb0>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x98>
 8002bc6:	4b7f      	ldr	r3, [pc, #508]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a7e      	ldr	r2, [pc, #504]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	4b7c      	ldr	r3, [pc, #496]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7b      	ldr	r2, [pc, #492]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e00b      	b.n	8002bf8 <HAL_RCC_OscConfig+0xb0>
 8002be0:	4b78      	ldr	r3, [pc, #480]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a77      	ldr	r2, [pc, #476]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	4b75      	ldr	r3, [pc, #468]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a74      	ldr	r2, [pc, #464]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d013      	beq.n	8002c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fe f83c 	bl	8000c7c <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c08:	f7fe f838 	bl	8000c7c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	; 0x64
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e2a6      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c1a:	4b6a      	ldr	r3, [pc, #424]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0xc0>
 8002c26:	e014      	b.n	8002c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7fe f828 	bl	8000c7c <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c30:	f7fe f824 	bl	8000c7c <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e292      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c42:	4b60      	ldr	r3, [pc, #384]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0xe8>
 8002c4e:	e000      	b.n	8002c52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d075      	beq.n	8002d4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5e:	4b59      	ldr	r3, [pc, #356]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c68:	4b56      	ldr	r3, [pc, #344]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b0c      	cmp	r3, #12
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_OscConfig+0x136>
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d002      	beq.n	8002c84 <HAL_RCC_OscConfig+0x13c>
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d11f      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c84:	4b4f      	ldr	r3, [pc, #316]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_OscConfig+0x154>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e265      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9c:	4b49      	ldr	r3, [pc, #292]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	061b      	lsls	r3, r3, #24
 8002caa:	4946      	ldr	r1, [pc, #280]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cb0:	4b45      	ldr	r3, [pc, #276]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd ff95 	bl	8000be4 <HAL_InitTick>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d043      	beq.n	8002d48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e251      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d023      	beq.n	8002d14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ccc:	4b3d      	ldr	r3, [pc, #244]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a3c      	ldr	r2, [pc, #240]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fd ffd0 	bl	8000c7c <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce0:	f7fd ffcc 	bl	8000c7c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e23a      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf2:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfe:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	061b      	lsls	r3, r3, #24
 8002d0c:	492d      	ldr	r1, [pc, #180]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
 8002d12:	e01a      	b.n	8002d4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d14:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a2a      	ldr	r2, [pc, #168]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002d1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fd ffac 	bl	8000c7c <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d28:	f7fd ffa8 	bl	8000c7c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e216      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d3a:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x1e0>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d041      	beq.n	8002dda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01c      	beq.n	8002d98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d64:	4a17      	ldr	r2, [pc, #92]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6e:	f7fd ff85 	bl	8000c7c <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d76:	f7fd ff81 	bl	8000c7c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e1ef      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d88:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0ef      	beq.n	8002d76 <HAL_RCC_OscConfig+0x22e>
 8002d96:	e020      	b.n	8002dda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9e:	4a09      	ldr	r2, [pc, #36]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fd ff68 	bl	8000c7c <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dae:	e00d      	b.n	8002dcc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db0:	f7fd ff64 	bl	8000c7c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d906      	bls.n	8002dcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e1d2      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dcc:	4b8c      	ldr	r3, [pc, #560]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1ea      	bne.n	8002db0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 80a6 	beq.w	8002f34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de8:	2300      	movs	r3, #0
 8002dea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dec:	4b84      	ldr	r3, [pc, #528]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_OscConfig+0x2b4>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <HAL_RCC_OscConfig+0x2b6>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00d      	beq.n	8002e1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e02:	4b7f      	ldr	r3, [pc, #508]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	4a7e      	ldr	r2, [pc, #504]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e0e:	4b7c      	ldr	r3, [pc, #496]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e1e:	4b79      	ldr	r3, [pc, #484]	; (8003004 <HAL_RCC_OscConfig+0x4bc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d118      	bne.n	8002e5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e2a:	4b76      	ldr	r3, [pc, #472]	; (8003004 <HAL_RCC_OscConfig+0x4bc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a75      	ldr	r2, [pc, #468]	; (8003004 <HAL_RCC_OscConfig+0x4bc>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e36:	f7fd ff21 	bl	8000c7c <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3e:	f7fd ff1d 	bl	8000c7c <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e18b      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e50:	4b6c      	ldr	r3, [pc, #432]	; (8003004 <HAL_RCC_OscConfig+0x4bc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d108      	bne.n	8002e76 <HAL_RCC_OscConfig+0x32e>
 8002e64:	4b66      	ldr	r3, [pc, #408]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	4a65      	ldr	r2, [pc, #404]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e74:	e024      	b.n	8002ec0 <HAL_RCC_OscConfig+0x378>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d110      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x358>
 8002e7e:	4b60      	ldr	r3, [pc, #384]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	4a5e      	ldr	r2, [pc, #376]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002e86:	f043 0304 	orr.w	r3, r3, #4
 8002e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e8e:	4b5c      	ldr	r3, [pc, #368]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	4a5a      	ldr	r2, [pc, #360]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e9e:	e00f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x378>
 8002ea0:	4b57      	ldr	r3, [pc, #348]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	4a56      	ldr	r2, [pc, #344]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eb0:	4b53      	ldr	r3, [pc, #332]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	4a52      	ldr	r2, [pc, #328]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002eb8:	f023 0304 	bic.w	r3, r3, #4
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d016      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fd fed8 	bl	8000c7c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed0:	f7fd fed4 	bl	8000c7c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e140      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee6:	4b46      	ldr	r3, [pc, #280]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ed      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x388>
 8002ef4:	e015      	b.n	8002f22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef6:	f7fd fec1 	bl	8000c7c <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fd febd 	bl	8000c7c <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e129      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f14:	4b3a      	ldr	r3, [pc, #232]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1ed      	bne.n	8002efe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f22:	7ffb      	ldrb	r3, [r7, #31]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d105      	bne.n	8002f34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f28:	4b35      	ldr	r3, [pc, #212]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	4a34      	ldr	r2, [pc, #208]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d03c      	beq.n	8002fba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01c      	beq.n	8002f82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f48:	4b2d      	ldr	r3, [pc, #180]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f4e:	4a2c      	ldr	r2, [pc, #176]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fd fe90 	bl	8000c7c <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f60:	f7fd fe8c 	bl	8000c7c <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0fa      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f72:	4b23      	ldr	r3, [pc, #140]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ef      	beq.n	8002f60 <HAL_RCC_OscConfig+0x418>
 8002f80:	e01b      	b.n	8002fba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f82:	4b1f      	ldr	r3, [pc, #124]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f88:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002f8a:	f023 0301 	bic.w	r3, r3, #1
 8002f8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f92:	f7fd fe73 	bl	8000c7c <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f9a:	f7fd fe6f 	bl	8000c7c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0dd      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1ef      	bne.n	8002f9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80d1 	beq.w	8003166 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	f000 808b 	beq.w	80030e8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d15e      	bne.n	8003098 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a08      	ldr	r2, [pc, #32]	; (8003000 <HAL_RCC_OscConfig+0x4b8>)
 8002fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7fd fe49 	bl	8000c7c <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fec:	e00c      	b.n	8003008 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fd fe45 	bl	8000c7c <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d905      	bls.n	8003008 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e0b3      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
 8003000:	40021000 	.word	0x40021000
 8003004:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003008:	4b59      	ldr	r3, [pc, #356]	; (8003170 <HAL_RCC_OscConfig+0x628>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ec      	bne.n	8002fee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003014:	4b56      	ldr	r3, [pc, #344]	; (8003170 <HAL_RCC_OscConfig+0x628>)
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	4b56      	ldr	r3, [pc, #344]	; (8003174 <HAL_RCC_OscConfig+0x62c>)
 800301a:	4013      	ands	r3, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6a11      	ldr	r1, [r2, #32]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003024:	3a01      	subs	r2, #1
 8003026:	0112      	lsls	r2, r2, #4
 8003028:	4311      	orrs	r1, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800302e:	0212      	lsls	r2, r2, #8
 8003030:	4311      	orrs	r1, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003036:	0852      	lsrs	r2, r2, #1
 8003038:	3a01      	subs	r2, #1
 800303a:	0552      	lsls	r2, r2, #21
 800303c:	4311      	orrs	r1, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003042:	0852      	lsrs	r2, r2, #1
 8003044:	3a01      	subs	r2, #1
 8003046:	0652      	lsls	r2, r2, #25
 8003048:	4311      	orrs	r1, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800304e:	06d2      	lsls	r2, r2, #27
 8003050:	430a      	orrs	r2, r1
 8003052:	4947      	ldr	r1, [pc, #284]	; (8003170 <HAL_RCC_OscConfig+0x628>)
 8003054:	4313      	orrs	r3, r2
 8003056:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003058:	4b45      	ldr	r3, [pc, #276]	; (8003170 <HAL_RCC_OscConfig+0x628>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a44      	ldr	r2, [pc, #272]	; (8003170 <HAL_RCC_OscConfig+0x628>)
 800305e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003062:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003064:	4b42      	ldr	r3, [pc, #264]	; (8003170 <HAL_RCC_OscConfig+0x628>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4a41      	ldr	r2, [pc, #260]	; (8003170 <HAL_RCC_OscConfig+0x628>)
 800306a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fd fe04 	bl	8000c7c <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003078:	f7fd fe00 	bl	8000c7c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e06e      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800308a:	4b39      	ldr	r3, [pc, #228]	; (8003170 <HAL_RCC_OscConfig+0x628>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0x530>
 8003096:	e066      	b.n	8003166 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003098:	4b35      	ldr	r3, [pc, #212]	; (8003170 <HAL_RCC_OscConfig+0x628>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a34      	ldr	r2, [pc, #208]	; (8003170 <HAL_RCC_OscConfig+0x628>)
 800309e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030a4:	4b32      	ldr	r3, [pc, #200]	; (8003170 <HAL_RCC_OscConfig+0x628>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4a31      	ldr	r2, [pc, #196]	; (8003170 <HAL_RCC_OscConfig+0x628>)
 80030aa:	f023 0303 	bic.w	r3, r3, #3
 80030ae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030b0:	4b2f      	ldr	r3, [pc, #188]	; (8003170 <HAL_RCC_OscConfig+0x628>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4a2e      	ldr	r2, [pc, #184]	; (8003170 <HAL_RCC_OscConfig+0x628>)
 80030b6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fd fddc 	bl	8000c7c <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fd fdd8 	bl	8000c7c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e046      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030da:	4b25      	ldr	r3, [pc, #148]	; (8003170 <HAL_RCC_OscConfig+0x628>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x580>
 80030e6:	e03e      	b.n	8003166 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e039      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80030f4:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <HAL_RCC_OscConfig+0x628>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f003 0203 	and.w	r2, r3, #3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	429a      	cmp	r2, r3
 8003106:	d12c      	bne.n	8003162 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	3b01      	subs	r3, #1
 8003114:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003116:	429a      	cmp	r2, r3
 8003118:	d123      	bne.n	8003162 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003126:	429a      	cmp	r2, r3
 8003128:	d11b      	bne.n	8003162 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d113      	bne.n	8003162 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	085b      	lsrs	r3, r3, #1
 8003146:	3b01      	subs	r3, #1
 8003148:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d109      	bne.n	8003162 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	085b      	lsrs	r3, r3, #1
 800315a:	3b01      	subs	r3, #1
 800315c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d001      	beq.n	8003166 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3720      	adds	r7, #32
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	019f800c 	.word	0x019f800c

08003178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e11e      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b91      	ldr	r3, [pc, #580]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d910      	bls.n	80031c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b8e      	ldr	r3, [pc, #568]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 020f 	bic.w	r2, r3, #15
 80031a6:	498c      	ldr	r1, [pc, #560]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b8a      	ldr	r3, [pc, #552]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e106      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d073      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d129      	bne.n	8003228 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d4:	4b81      	ldr	r3, [pc, #516]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0f4      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80031e4:	f000 f99e 	bl	8003524 <RCC_GetSysClockFreqFromPLLSource>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4a7c      	ldr	r2, [pc, #496]	; (80033e0 <HAL_RCC_ClockConfig+0x268>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d93f      	bls.n	8003272 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031f2:	4b7a      	ldr	r3, [pc, #488]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003206:	2b00      	cmp	r3, #0
 8003208:	d033      	beq.n	8003272 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800320e:	2b00      	cmp	r3, #0
 8003210:	d12f      	bne.n	8003272 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003212:	4b72      	ldr	r3, [pc, #456]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800321a:	4a70      	ldr	r2, [pc, #448]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 800321c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003220:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	e024      	b.n	8003272 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d107      	bne.n	8003240 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003230:	4b6a      	ldr	r3, [pc, #424]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0c6      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003240:	4b66      	ldr	r3, [pc, #408]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0be      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003250:	f000 f8ce 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8003254:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4a61      	ldr	r2, [pc, #388]	; (80033e0 <HAL_RCC_ClockConfig+0x268>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d909      	bls.n	8003272 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800325e:	4b5f      	ldr	r3, [pc, #380]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003266:	4a5d      	ldr	r2, [pc, #372]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003272:	4b5a      	ldr	r3, [pc, #360]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4957      	ldr	r1, [pc, #348]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003284:	f7fd fcfa 	bl	8000c7c <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7fd fcf6 	bl	8000c7c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e095      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	4b4e      	ldr	r3, [pc, #312]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 020c 	and.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1eb      	bne.n	800328c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d023      	beq.n	8003308 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032cc:	4b43      	ldr	r3, [pc, #268]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a42      	ldr	r2, [pc, #264]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80032e4:	4b3d      	ldr	r3, [pc, #244]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80032ec:	4a3b      	ldr	r2, [pc, #236]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f4:	4b39      	ldr	r3, [pc, #228]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4936      	ldr	r1, [pc, #216]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003302:	4313      	orrs	r3, r2
 8003304:	608b      	str	r3, [r1, #8]
 8003306:	e008      	b.n	800331a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b80      	cmp	r3, #128	; 0x80
 800330c:	d105      	bne.n	800331a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800330e:	4b33      	ldr	r3, [pc, #204]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	4a32      	ldr	r2, [pc, #200]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003314:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003318:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800331a:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d21d      	bcs.n	8003364 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003328:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 020f 	bic.w	r2, r3, #15
 8003330:	4929      	ldr	r1, [pc, #164]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003338:	f7fd fca0 	bl	8000c7c <HAL_GetTick>
 800333c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003340:	f7fd fc9c 	bl	8000c7c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e03b      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d1ed      	bne.n	8003340 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003370:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4917      	ldr	r1, [pc, #92]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 800337e:	4313      	orrs	r3, r2
 8003380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338e:	4b13      	ldr	r3, [pc, #76]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	490f      	ldr	r1, [pc, #60]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033a2:	f000 f825 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80033a6:	4602      	mov	r2, r0
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	490c      	ldr	r1, [pc, #48]	; (80033e4 <HAL_RCC_ClockConfig+0x26c>)
 80033b4:	5ccb      	ldrb	r3, [r1, r3]
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	fa22 f303 	lsr.w	r3, r2, r3
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <HAL_RCC_ClockConfig+0x270>)
 80033c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <HAL_RCC_ClockConfig+0x274>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd fc0c 	bl	8000be4 <HAL_InitTick>
 80033cc:	4603      	mov	r3, r0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40022000 	.word	0x40022000
 80033dc:	40021000 	.word	0x40021000
 80033e0:	04c4b400 	.word	0x04c4b400
 80033e4:	08004fe8 	.word	0x08004fe8
 80033e8:	20000000 	.word	0x20000000
 80033ec:	20000004 	.word	0x20000004

080033f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033f6:	4b2c      	ldr	r3, [pc, #176]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d102      	bne.n	8003408 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003402:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	e047      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003408:	4b27      	ldr	r3, [pc, #156]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 030c 	and.w	r3, r3, #12
 8003410:	2b08      	cmp	r3, #8
 8003412:	d102      	bne.n	800341a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003414:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	e03e      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800341a:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d136      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003430:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	3301      	adds	r3, #1
 800343c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b03      	cmp	r3, #3
 8003442:	d10c      	bne.n	800345e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003444:	4a1a      	ldr	r2, [pc, #104]	; (80034b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	fbb2 f3f3 	udiv	r3, r2, r3
 800344c:	4a16      	ldr	r2, [pc, #88]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800344e:	68d2      	ldr	r2, [r2, #12]
 8003450:	0a12      	lsrs	r2, r2, #8
 8003452:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	617b      	str	r3, [r7, #20]
      break;
 800345c:	e00c      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800345e:	4a13      	ldr	r2, [pc, #76]	; (80034ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	4a10      	ldr	r2, [pc, #64]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003468:	68d2      	ldr	r2, [r2, #12]
 800346a:	0a12      	lsrs	r2, r2, #8
 800346c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003470:	fb02 f303 	mul.w	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]
      break;
 8003476:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	0e5b      	lsrs	r3, r3, #25
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	3301      	adds	r3, #1
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	e001      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003498:	693b      	ldr	r3, [r7, #16]
}
 800349a:	4618      	mov	r0, r3
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000
 80034ac:	00f42400 	.word	0x00f42400
 80034b0:	007a1200 	.word	0x007a1200

080034b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000000 	.word	0x20000000

080034cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034d0:	f7ff fff0 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4904      	ldr	r1, [pc, #16]	; (80034f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034e2:	5ccb      	ldrb	r3, [r1, r3]
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	08004ff8 	.word	0x08004ff8

080034f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034fc:	f7ff ffda 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	0adb      	lsrs	r3, r3, #11
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4904      	ldr	r1, [pc, #16]	; (8003520 <HAL_RCC_GetPCLK2Freq+0x28>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40021000 	.word	0x40021000
 8003520:	08004ff8 	.word	0x08004ff8

08003524 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800352a:	4b1e      	ldr	r3, [pc, #120]	; (80035a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	3301      	adds	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b03      	cmp	r3, #3
 8003546:	d10c      	bne.n	8003562 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003548:	4a17      	ldr	r2, [pc, #92]	; (80035a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003552:	68d2      	ldr	r2, [r2, #12]
 8003554:	0a12      	lsrs	r2, r2, #8
 8003556:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	617b      	str	r3, [r7, #20]
    break;
 8003560:	e00c      	b.n	800357c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003562:	4a12      	ldr	r2, [pc, #72]	; (80035ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	fbb2 f3f3 	udiv	r3, r2, r3
 800356a:	4a0e      	ldr	r2, [pc, #56]	; (80035a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800356c:	68d2      	ldr	r2, [r2, #12]
 800356e:	0a12      	lsrs	r2, r2, #8
 8003570:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003574:	fb02 f303 	mul.w	r3, r2, r3
 8003578:	617b      	str	r3, [r7, #20]
    break;
 800357a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800357c:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	0e5b      	lsrs	r3, r3, #25
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	3301      	adds	r3, #1
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003596:	687b      	ldr	r3, [r7, #4]
}
 8003598:	4618      	mov	r0, r3
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	40021000 	.word	0x40021000
 80035a8:	007a1200 	.word	0x007a1200
 80035ac:	00f42400 	.word	0x00f42400

080035b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035b8:	2300      	movs	r3, #0
 80035ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035bc:	2300      	movs	r3, #0
 80035be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8098 	beq.w	80036fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d2:	4b43      	ldr	r3, [pc, #268]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10d      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035de:	4b40      	ldr	r3, [pc, #256]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	4a3f      	ldr	r2, [pc, #252]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e8:	6593      	str	r3, [r2, #88]	; 0x58
 80035ea:	4b3d      	ldr	r3, [pc, #244]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f6:	2301      	movs	r3, #1
 80035f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035fa:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a39      	ldr	r2, [pc, #228]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003604:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003606:	f7fd fb39 	bl	8000c7c <HAL_GetTick>
 800360a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800360c:	e009      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360e:	f7fd fb35 	bl	8000c7c <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d902      	bls.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	74fb      	strb	r3, [r7, #19]
        break;
 8003620:	e005      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003622:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0ef      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800362e:	7cfb      	ldrb	r3, [r7, #19]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d159      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003634:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01e      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	429a      	cmp	r2, r3
 800364e:	d019      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003650:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800365c:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	4a1f      	ldr	r2, [pc, #124]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800366c:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	4a1b      	ldr	r2, [pc, #108]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800367c:	4a18      	ldr	r2, [pc, #96]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d016      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7fd faf5 	bl	8000c7c <HAL_GetTick>
 8003692:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003694:	e00b      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003696:	f7fd faf1 	bl	8000c7c <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d902      	bls.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	74fb      	strb	r3, [r7, #19]
            break;
 80036ac:	e006      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0ec      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80036bc:	7cfb      	ldrb	r3, [r7, #19]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10b      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	4903      	ldr	r1, [pc, #12]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036d8:	e008      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036da:	7cfb      	ldrb	r3, [r7, #19]
 80036dc:	74bb      	strb	r3, [r7, #18]
 80036de:	e005      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e8:	7cfb      	ldrb	r3, [r7, #19]
 80036ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ec:	7c7b      	ldrb	r3, [r7, #17]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d105      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f2:	4ba6      	ldr	r3, [pc, #664]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	4aa5      	ldr	r2, [pc, #660]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800370a:	4ba0      	ldr	r3, [pc, #640]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003710:	f023 0203 	bic.w	r2, r3, #3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	499c      	ldr	r1, [pc, #624]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800372c:	4b97      	ldr	r3, [pc, #604]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	f023 020c 	bic.w	r2, r3, #12
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	4994      	ldr	r1, [pc, #592]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800374e:	4b8f      	ldr	r3, [pc, #572]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003754:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	498b      	ldr	r1, [pc, #556]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003770:	4b86      	ldr	r3, [pc, #536]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	4983      	ldr	r1, [pc, #524]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003792:	4b7e      	ldr	r3, [pc, #504]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003798:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	497a      	ldr	r1, [pc, #488]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037b4:	4b75      	ldr	r3, [pc, #468]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	4972      	ldr	r1, [pc, #456]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037d6:	4b6d      	ldr	r3, [pc, #436]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	4969      	ldr	r1, [pc, #420]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037f8:	4b64      	ldr	r3, [pc, #400]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	4961      	ldr	r1, [pc, #388]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800381a:	4b5c      	ldr	r3, [pc, #368]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	4958      	ldr	r1, [pc, #352]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d015      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800383c:	4b53      	ldr	r3, [pc, #332]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	4950      	ldr	r1, [pc, #320]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800385a:	d105      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800385c:	4b4b      	ldr	r3, [pc, #300]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4a4a      	ldr	r2, [pc, #296]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003866:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003870:	2b00      	cmp	r3, #0
 8003872:	d015      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003874:	4b45      	ldr	r3, [pc, #276]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	4942      	ldr	r1, [pc, #264]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003892:	d105      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003894:	4b3d      	ldr	r3, [pc, #244]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a3c      	ldr	r2, [pc, #240]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800389a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800389e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d015      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038ac:	4b37      	ldr	r3, [pc, #220]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	4934      	ldr	r1, [pc, #208]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ca:	d105      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038cc:	4b2f      	ldr	r3, [pc, #188]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a2e      	ldr	r2, [pc, #184]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d015      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038e4:	4b29      	ldr	r3, [pc, #164]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f2:	4926      	ldr	r1, [pc, #152]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003902:	d105      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003904:	4b21      	ldr	r3, [pc, #132]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4a20      	ldr	r2, [pc, #128]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800390a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800390e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d015      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800391c:	4b1b      	ldr	r3, [pc, #108]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	4918      	ldr	r1, [pc, #96]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800393a:	d105      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800393c:	4b13      	ldr	r3, [pc, #76]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4a12      	ldr	r2, [pc, #72]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003946:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d015      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003954:	4b0d      	ldr	r3, [pc, #52]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	490a      	ldr	r1, [pc, #40]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003972:	d105      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4a04      	ldr	r2, [pc, #16]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800397a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003980:	7cbb      	ldrb	r3, [r7, #18]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000

08003990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e042      	b.n	8003a28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d106      	bne.n	80039ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7fd f809 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2224      	movs	r2, #36	; 0x24
 80039be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0201 	bic.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f8c2 	bl	8003b5c <UART_SetConfig>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e022      	b.n	8003a28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fb82 	bl	80040f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fc09 	bl	8004238 <UART_CheckIdleState>
 8003a26:	4603      	mov	r3, r0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	; 0x28
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	f040 8083 	bne.w	8003b52 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_UART_Transmit+0x28>
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e07b      	b.n	8003b54 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_UART_Transmit+0x3a>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e074      	b.n	8003b54 <HAL_UART_Transmit+0x124>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2221      	movs	r2, #33	; 0x21
 8003a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a82:	f7fd f8fb 	bl	8000c7c <HAL_GetTick>
 8003a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	88fa      	ldrh	r2, [r7, #6]
 8003a8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	88fa      	ldrh	r2, [r7, #6]
 8003a94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa0:	d108      	bne.n	8003ab4 <HAL_UART_Transmit+0x84>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	e003      	b.n	8003abc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003ac4:	e02c      	b.n	8003b20 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2180      	movs	r1, #128	; 0x80
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 fbfc 	bl	80042ce <UART_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e039      	b.n	8003b54 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10b      	bne.n	8003afe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003af4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	3302      	adds	r3, #2
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e007      	b.n	8003b0e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	781a      	ldrb	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1cc      	bne.n	8003ac6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2200      	movs	r2, #0
 8003b34:	2140      	movs	r1, #64	; 0x40
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 fbc9 	bl	80042ce <UART_WaitOnFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e006      	b.n	8003b54 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e000      	b.n	8003b54 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003b52:	2302      	movs	r3, #2
  }
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b60:	b08c      	sub	sp, #48	; 0x30
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	431a      	orrs	r2, r3
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4bab      	ldr	r3, [pc, #684]	; (8003e38 <UART_SetConfig+0x2dc>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b94:	430b      	orrs	r3, r1
 8003b96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4aa0      	ldr	r2, [pc, #640]	; (8003e3c <UART_SetConfig+0x2e0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003bd2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	f023 010f 	bic.w	r1, r3, #15
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a91      	ldr	r2, [pc, #580]	; (8003e40 <UART_SetConfig+0x2e4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d125      	bne.n	8003c4c <UART_SetConfig+0xf0>
 8003c00:	4b90      	ldr	r3, [pc, #576]	; (8003e44 <UART_SetConfig+0x2e8>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d81a      	bhi.n	8003c44 <UART_SetConfig+0xe8>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <UART_SetConfig+0xb8>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c25 	.word	0x08003c25
 8003c18:	08003c35 	.word	0x08003c35
 8003c1c:	08003c2d 	.word	0x08003c2d
 8003c20:	08003c3d 	.word	0x08003c3d
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c2a:	e0d6      	b.n	8003dda <UART_SetConfig+0x27e>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c32:	e0d2      	b.n	8003dda <UART_SetConfig+0x27e>
 8003c34:	2304      	movs	r3, #4
 8003c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c3a:	e0ce      	b.n	8003dda <UART_SetConfig+0x27e>
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c42:	e0ca      	b.n	8003dda <UART_SetConfig+0x27e>
 8003c44:	2310      	movs	r3, #16
 8003c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c4a:	e0c6      	b.n	8003dda <UART_SetConfig+0x27e>
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a7d      	ldr	r2, [pc, #500]	; (8003e48 <UART_SetConfig+0x2ec>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d138      	bne.n	8003cc8 <UART_SetConfig+0x16c>
 8003c56:	4b7b      	ldr	r3, [pc, #492]	; (8003e44 <UART_SetConfig+0x2e8>)
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5c:	f003 030c 	and.w	r3, r3, #12
 8003c60:	2b0c      	cmp	r3, #12
 8003c62:	d82d      	bhi.n	8003cc0 <UART_SetConfig+0x164>
 8003c64:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <UART_SetConfig+0x110>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003ca1 	.word	0x08003ca1
 8003c70:	08003cc1 	.word	0x08003cc1
 8003c74:	08003cc1 	.word	0x08003cc1
 8003c78:	08003cc1 	.word	0x08003cc1
 8003c7c:	08003cb1 	.word	0x08003cb1
 8003c80:	08003cc1 	.word	0x08003cc1
 8003c84:	08003cc1 	.word	0x08003cc1
 8003c88:	08003cc1 	.word	0x08003cc1
 8003c8c:	08003ca9 	.word	0x08003ca9
 8003c90:	08003cc1 	.word	0x08003cc1
 8003c94:	08003cc1 	.word	0x08003cc1
 8003c98:	08003cc1 	.word	0x08003cc1
 8003c9c:	08003cb9 	.word	0x08003cb9
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca6:	e098      	b.n	8003dda <UART_SetConfig+0x27e>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cae:	e094      	b.n	8003dda <UART_SetConfig+0x27e>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb6:	e090      	b.n	8003dda <UART_SetConfig+0x27e>
 8003cb8:	2308      	movs	r3, #8
 8003cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cbe:	e08c      	b.n	8003dda <UART_SetConfig+0x27e>
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc6:	e088      	b.n	8003dda <UART_SetConfig+0x27e>
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a5f      	ldr	r2, [pc, #380]	; (8003e4c <UART_SetConfig+0x2f0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d125      	bne.n	8003d1e <UART_SetConfig+0x1c2>
 8003cd2:	4b5c      	ldr	r3, [pc, #368]	; (8003e44 <UART_SetConfig+0x2e8>)
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cdc:	2b30      	cmp	r3, #48	; 0x30
 8003cde:	d016      	beq.n	8003d0e <UART_SetConfig+0x1b2>
 8003ce0:	2b30      	cmp	r3, #48	; 0x30
 8003ce2:	d818      	bhi.n	8003d16 <UART_SetConfig+0x1ba>
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d00a      	beq.n	8003cfe <UART_SetConfig+0x1a2>
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d814      	bhi.n	8003d16 <UART_SetConfig+0x1ba>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <UART_SetConfig+0x19a>
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d008      	beq.n	8003d06 <UART_SetConfig+0x1aa>
 8003cf4:	e00f      	b.n	8003d16 <UART_SetConfig+0x1ba>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cfc:	e06d      	b.n	8003dda <UART_SetConfig+0x27e>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d04:	e069      	b.n	8003dda <UART_SetConfig+0x27e>
 8003d06:	2304      	movs	r3, #4
 8003d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0c:	e065      	b.n	8003dda <UART_SetConfig+0x27e>
 8003d0e:	2308      	movs	r3, #8
 8003d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d14:	e061      	b.n	8003dda <UART_SetConfig+0x27e>
 8003d16:	2310      	movs	r3, #16
 8003d18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1c:	e05d      	b.n	8003dda <UART_SetConfig+0x27e>
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a4b      	ldr	r2, [pc, #300]	; (8003e50 <UART_SetConfig+0x2f4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d125      	bne.n	8003d74 <UART_SetConfig+0x218>
 8003d28:	4b46      	ldr	r3, [pc, #280]	; (8003e44 <UART_SetConfig+0x2e8>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d32:	2bc0      	cmp	r3, #192	; 0xc0
 8003d34:	d016      	beq.n	8003d64 <UART_SetConfig+0x208>
 8003d36:	2bc0      	cmp	r3, #192	; 0xc0
 8003d38:	d818      	bhi.n	8003d6c <UART_SetConfig+0x210>
 8003d3a:	2b80      	cmp	r3, #128	; 0x80
 8003d3c:	d00a      	beq.n	8003d54 <UART_SetConfig+0x1f8>
 8003d3e:	2b80      	cmp	r3, #128	; 0x80
 8003d40:	d814      	bhi.n	8003d6c <UART_SetConfig+0x210>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <UART_SetConfig+0x1f0>
 8003d46:	2b40      	cmp	r3, #64	; 0x40
 8003d48:	d008      	beq.n	8003d5c <UART_SetConfig+0x200>
 8003d4a:	e00f      	b.n	8003d6c <UART_SetConfig+0x210>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d52:	e042      	b.n	8003dda <UART_SetConfig+0x27e>
 8003d54:	2302      	movs	r3, #2
 8003d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d5a:	e03e      	b.n	8003dda <UART_SetConfig+0x27e>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d62:	e03a      	b.n	8003dda <UART_SetConfig+0x27e>
 8003d64:	2308      	movs	r3, #8
 8003d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d6a:	e036      	b.n	8003dda <UART_SetConfig+0x27e>
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d72:	e032      	b.n	8003dda <UART_SetConfig+0x27e>
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a30      	ldr	r2, [pc, #192]	; (8003e3c <UART_SetConfig+0x2e0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d12a      	bne.n	8003dd4 <UART_SetConfig+0x278>
 8003d7e:	4b31      	ldr	r3, [pc, #196]	; (8003e44 <UART_SetConfig+0x2e8>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d8c:	d01a      	beq.n	8003dc4 <UART_SetConfig+0x268>
 8003d8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d92:	d81b      	bhi.n	8003dcc <UART_SetConfig+0x270>
 8003d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d98:	d00c      	beq.n	8003db4 <UART_SetConfig+0x258>
 8003d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d9e:	d815      	bhi.n	8003dcc <UART_SetConfig+0x270>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <UART_SetConfig+0x250>
 8003da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da8:	d008      	beq.n	8003dbc <UART_SetConfig+0x260>
 8003daa:	e00f      	b.n	8003dcc <UART_SetConfig+0x270>
 8003dac:	2300      	movs	r3, #0
 8003dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003db2:	e012      	b.n	8003dda <UART_SetConfig+0x27e>
 8003db4:	2302      	movs	r3, #2
 8003db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dba:	e00e      	b.n	8003dda <UART_SetConfig+0x27e>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dc2:	e00a      	b.n	8003dda <UART_SetConfig+0x27e>
 8003dc4:	2308      	movs	r3, #8
 8003dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dca:	e006      	b.n	8003dda <UART_SetConfig+0x27e>
 8003dcc:	2310      	movs	r3, #16
 8003dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dd2:	e002      	b.n	8003dda <UART_SetConfig+0x27e>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <UART_SetConfig+0x2e0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	f040 80a8 	bne.w	8003f36 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003de6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d834      	bhi.n	8003e58 <UART_SetConfig+0x2fc>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <UART_SetConfig+0x298>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e19 	.word	0x08003e19
 8003df8:	08003e59 	.word	0x08003e59
 8003dfc:	08003e21 	.word	0x08003e21
 8003e00:	08003e59 	.word	0x08003e59
 8003e04:	08003e27 	.word	0x08003e27
 8003e08:	08003e59 	.word	0x08003e59
 8003e0c:	08003e59 	.word	0x08003e59
 8003e10:	08003e59 	.word	0x08003e59
 8003e14:	08003e2f 	.word	0x08003e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e18:	f7ff fb58 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 8003e1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e1e:	e021      	b.n	8003e64 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e20:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <UART_SetConfig+0x2f8>)
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e24:	e01e      	b.n	8003e64 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e26:	f7ff fae3 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8003e2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e2c:	e01a      	b.n	8003e64 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e34:	e016      	b.n	8003e64 <UART_SetConfig+0x308>
 8003e36:	bf00      	nop
 8003e38:	cfff69f3 	.word	0xcfff69f3
 8003e3c:	40008000 	.word	0x40008000
 8003e40:	40013800 	.word	0x40013800
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40004400 	.word	0x40004400
 8003e4c:	40004800 	.word	0x40004800
 8003e50:	40004c00 	.word	0x40004c00
 8003e54:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e62:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 812a 	beq.w	80040c0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	4a9e      	ldr	r2, [pc, #632]	; (80040ec <UART_SetConfig+0x590>)
 8003e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e76:	461a      	mov	r2, r3
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d305      	bcc.n	8003e9c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d903      	bls.n	8003ea4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ea2:	e10d      	b.n	80040c0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	60fa      	str	r2, [r7, #12]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	4a8e      	ldr	r2, [pc, #568]	; (80040ec <UART_SetConfig+0x590>)
 8003eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2200      	movs	r2, #0
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ec2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ec6:	f7fc f9fb 	bl	80002c0 <__aeabi_uldivmod>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4610      	mov	r0, r2
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	020b      	lsls	r3, r1, #8
 8003edc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ee0:	0202      	lsls	r2, r0, #8
 8003ee2:	6979      	ldr	r1, [r7, #20]
 8003ee4:	6849      	ldr	r1, [r1, #4]
 8003ee6:	0849      	lsrs	r1, r1, #1
 8003ee8:	2000      	movs	r0, #0
 8003eea:	460c      	mov	r4, r1
 8003eec:	4605      	mov	r5, r0
 8003eee:	eb12 0804 	adds.w	r8, r2, r4
 8003ef2:	eb43 0905 	adc.w	r9, r3, r5
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	469a      	mov	sl, r3
 8003efe:	4693      	mov	fp, r2
 8003f00:	4652      	mov	r2, sl
 8003f02:	465b      	mov	r3, fp
 8003f04:	4640      	mov	r0, r8
 8003f06:	4649      	mov	r1, r9
 8003f08:	f7fc f9da 	bl	80002c0 <__aeabi_uldivmod>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4613      	mov	r3, r2
 8003f12:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f1a:	d308      	bcc.n	8003f2e <UART_SetConfig+0x3d2>
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f22:	d204      	bcs.n	8003f2e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6a3a      	ldr	r2, [r7, #32]
 8003f2a:	60da      	str	r2, [r3, #12]
 8003f2c:	e0c8      	b.n	80040c0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f34:	e0c4      	b.n	80040c0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f3e:	d167      	bne.n	8004010 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003f40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d828      	bhi.n	8003f9a <UART_SetConfig+0x43e>
 8003f48:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <UART_SetConfig+0x3f4>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08003f75 	.word	0x08003f75
 8003f54:	08003f7d 	.word	0x08003f7d
 8003f58:	08003f85 	.word	0x08003f85
 8003f5c:	08003f9b 	.word	0x08003f9b
 8003f60:	08003f8b 	.word	0x08003f8b
 8003f64:	08003f9b 	.word	0x08003f9b
 8003f68:	08003f9b 	.word	0x08003f9b
 8003f6c:	08003f9b 	.word	0x08003f9b
 8003f70:	08003f93 	.word	0x08003f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f74:	f7ff faaa 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 8003f78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f7a:	e014      	b.n	8003fa6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f7c:	f7ff fabc 	bl	80034f8 <HAL_RCC_GetPCLK2Freq>
 8003f80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f82:	e010      	b.n	8003fa6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f84:	4b5a      	ldr	r3, [pc, #360]	; (80040f0 <UART_SetConfig+0x594>)
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f88:	e00d      	b.n	8003fa6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f8a:	f7ff fa31 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8003f8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f90:	e009      	b.n	8003fa6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f98:	e005      	b.n	8003fa6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fa4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8089 	beq.w	80040c0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	4a4e      	ldr	r2, [pc, #312]	; (80040ec <UART_SetConfig+0x590>)
 8003fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fc0:	005a      	lsls	r2, r3, #1
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	441a      	add	r2, r3
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	2b0f      	cmp	r3, #15
 8003fd8:	d916      	bls.n	8004008 <UART_SetConfig+0x4ac>
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe0:	d212      	bcs.n	8004008 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	f023 030f 	bic.w	r3, r3, #15
 8003fea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	8bfb      	ldrh	r3, [r7, #30]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	8bfa      	ldrh	r2, [r7, #30]
 8004004:	60da      	str	r2, [r3, #12]
 8004006:	e05b      	b.n	80040c0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800400e:	e057      	b.n	80040c0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004010:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004014:	2b08      	cmp	r3, #8
 8004016:	d828      	bhi.n	800406a <UART_SetConfig+0x50e>
 8004018:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <UART_SetConfig+0x4c4>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	08004045 	.word	0x08004045
 8004024:	0800404d 	.word	0x0800404d
 8004028:	08004055 	.word	0x08004055
 800402c:	0800406b 	.word	0x0800406b
 8004030:	0800405b 	.word	0x0800405b
 8004034:	0800406b 	.word	0x0800406b
 8004038:	0800406b 	.word	0x0800406b
 800403c:	0800406b 	.word	0x0800406b
 8004040:	08004063 	.word	0x08004063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004044:	f7ff fa42 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 8004048:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800404a:	e014      	b.n	8004076 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800404c:	f7ff fa54 	bl	80034f8 <HAL_RCC_GetPCLK2Freq>
 8004050:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004052:	e010      	b.n	8004076 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004054:	4b26      	ldr	r3, [pc, #152]	; (80040f0 <UART_SetConfig+0x594>)
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004058:	e00d      	b.n	8004076 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800405a:	f7ff f9c9 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 800405e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004060:	e009      	b.n	8004076 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004068:	e005      	b.n	8004076 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004074:	bf00      	nop
    }

    if (pclk != 0U)
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	2b00      	cmp	r3, #0
 800407a:	d021      	beq.n	80040c0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	4a1a      	ldr	r2, [pc, #104]	; (80040ec <UART_SetConfig+0x590>)
 8004082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004086:	461a      	mov	r2, r3
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	fbb3 f2f2 	udiv	r2, r3, r2
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	441a      	add	r2, r3
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	2b0f      	cmp	r3, #15
 80040a4:	d909      	bls.n	80040ba <UART_SetConfig+0x55e>
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ac:	d205      	bcs.n	80040ba <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60da      	str	r2, [r3, #12]
 80040b8:	e002      	b.n	80040c0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2200      	movs	r2, #0
 80040d4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2200      	movs	r2, #0
 80040da:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80040dc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3730      	adds	r7, #48	; 0x30
 80040e4:	46bd      	mov	sp, r7
 80040e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ea:	bf00      	nop
 80040ec:	08005000 	.word	0x08005000
 80040f0:	00f42400 	.word	0x00f42400

080040f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01a      	beq.n	800420a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f2:	d10a      	bne.n	800420a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	605a      	str	r2, [r3, #4]
  }
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af02      	add	r7, sp, #8
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004248:	f7fc fd18 	bl	8000c7c <HAL_GetTick>
 800424c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b08      	cmp	r3, #8
 800425a:	d10e      	bne.n	800427a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800425c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f82f 	bl	80042ce <UART_WaitOnFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e025      	b.n	80042c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b04      	cmp	r3, #4
 8004286:	d10e      	bne.n	80042a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004288:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f819 	bl	80042ce <UART_WaitOnFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e00f      	b.n	80042c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b09c      	sub	sp, #112	; 0x70
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	4613      	mov	r3, r2
 80042dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042de:	e0a9      	b.n	8004434 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e6:	f000 80a5 	beq.w	8004434 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ea:	f7fc fcc7 	bl	8000c7c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <UART_WaitOnFlagUntilTimeout+0x32>
 80042fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d140      	bne.n	8004382 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800430e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004310:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004314:	667b      	str	r3, [r7, #100]	; 0x64
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800431e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004320:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004324:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800432c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e6      	bne.n	8004300 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3308      	adds	r3, #8
 8004338:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	663b      	str	r3, [r7, #96]	; 0x60
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3308      	adds	r3, #8
 8004350:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004352:	64ba      	str	r2, [r7, #72]	; 0x48
 8004354:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e5      	bne.n	8004332 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2220      	movs	r2, #32
 800436a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e069      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d051      	beq.n	8004434 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800439a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439e:	d149      	bne.n	8004434 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	e853 3f00 	ldrex	r3, [r3]
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c8:	637b      	str	r3, [r7, #52]	; 0x34
 80043ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043d0:	e841 2300 	strex	r3, r2, [r1]
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e6      	bne.n	80043aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3308      	adds	r3, #8
 80043e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	613b      	str	r3, [r7, #16]
   return(result);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f023 0301 	bic.w	r3, r3, #1
 80043f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3308      	adds	r3, #8
 80043fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043fc:	623a      	str	r2, [r7, #32]
 80043fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	69f9      	ldr	r1, [r7, #28]
 8004402:	6a3a      	ldr	r2, [r7, #32]
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	61bb      	str	r3, [r7, #24]
   return(result);
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e5      	bne.n	80043dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e010      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69da      	ldr	r2, [r3, #28]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4013      	ands	r3, r2
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	429a      	cmp	r2, r3
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	429a      	cmp	r2, r3
 8004450:	f43f af46 	beq.w	80042e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3770      	adds	r7, #112	; 0x70
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800445e:	b480      	push	{r7}
 8004460:	b085      	sub	sp, #20
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_UARTEx_DisableFifoMode+0x16>
 8004470:	2302      	movs	r3, #2
 8004472:	e027      	b.n	80044c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2224      	movs	r2, #36	; 0x24
 8004480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0201 	bic.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80044a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e02d      	b.n	8004544 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2224      	movs	r2, #36	; 0x24
 80044f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f84f 	bl	80045c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004560:	2302      	movs	r3, #2
 8004562:	e02d      	b.n	80045c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2224      	movs	r2, #36	; 0x24
 8004570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f811 	bl	80045c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d108      	bne.n	80045ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045e8:	e031      	b.n	800464e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045ea:	2308      	movs	r3, #8
 80045ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045ee:	2308      	movs	r3, #8
 80045f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	0e5b      	lsrs	r3, r3, #25
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	0f5b      	lsrs	r3, r3, #29
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004612:	7bbb      	ldrb	r3, [r7, #14]
 8004614:	7b3a      	ldrb	r2, [r7, #12]
 8004616:	4911      	ldr	r1, [pc, #68]	; (800465c <UARTEx_SetNbDataToProcess+0x94>)
 8004618:	5c8a      	ldrb	r2, [r1, r2]
 800461a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800461e:	7b3a      	ldrb	r2, [r7, #12]
 8004620:	490f      	ldr	r1, [pc, #60]	; (8004660 <UARTEx_SetNbDataToProcess+0x98>)
 8004622:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004624:	fb93 f3f2 	sdiv	r3, r3, r2
 8004628:	b29a      	uxth	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	7b7a      	ldrb	r2, [r7, #13]
 8004634:	4909      	ldr	r1, [pc, #36]	; (800465c <UARTEx_SetNbDataToProcess+0x94>)
 8004636:	5c8a      	ldrb	r2, [r1, r2]
 8004638:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800463c:	7b7a      	ldrb	r2, [r7, #13]
 800463e:	4908      	ldr	r1, [pc, #32]	; (8004660 <UARTEx_SetNbDataToProcess+0x98>)
 8004640:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004642:	fb93 f3f2 	sdiv	r3, r3, r2
 8004646:	b29a      	uxth	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	08005018 	.word	0x08005018
 8004660:	08005020 	.word	0x08005020

08004664 <__errno>:
 8004664:	4b01      	ldr	r3, [pc, #4]	; (800466c <__errno+0x8>)
 8004666:	6818      	ldr	r0, [r3, #0]
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	2000000c 	.word	0x2000000c

08004670 <__libc_init_array>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	4d0d      	ldr	r5, [pc, #52]	; (80046a8 <__libc_init_array+0x38>)
 8004674:	4c0d      	ldr	r4, [pc, #52]	; (80046ac <__libc_init_array+0x3c>)
 8004676:	1b64      	subs	r4, r4, r5
 8004678:	10a4      	asrs	r4, r4, #2
 800467a:	2600      	movs	r6, #0
 800467c:	42a6      	cmp	r6, r4
 800467e:	d109      	bne.n	8004694 <__libc_init_array+0x24>
 8004680:	4d0b      	ldr	r5, [pc, #44]	; (80046b0 <__libc_init_array+0x40>)
 8004682:	4c0c      	ldr	r4, [pc, #48]	; (80046b4 <__libc_init_array+0x44>)
 8004684:	f000 fca2 	bl	8004fcc <_init>
 8004688:	1b64      	subs	r4, r4, r5
 800468a:	10a4      	asrs	r4, r4, #2
 800468c:	2600      	movs	r6, #0
 800468e:	42a6      	cmp	r6, r4
 8004690:	d105      	bne.n	800469e <__libc_init_array+0x2e>
 8004692:	bd70      	pop	{r4, r5, r6, pc}
 8004694:	f855 3b04 	ldr.w	r3, [r5], #4
 8004698:	4798      	blx	r3
 800469a:	3601      	adds	r6, #1
 800469c:	e7ee      	b.n	800467c <__libc_init_array+0xc>
 800469e:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a2:	4798      	blx	r3
 80046a4:	3601      	adds	r6, #1
 80046a6:	e7f2      	b.n	800468e <__libc_init_array+0x1e>
 80046a8:	08005064 	.word	0x08005064
 80046ac:	08005064 	.word	0x08005064
 80046b0:	08005064 	.word	0x08005064
 80046b4:	08005068 	.word	0x08005068

080046b8 <memset>:
 80046b8:	4402      	add	r2, r0
 80046ba:	4603      	mov	r3, r0
 80046bc:	4293      	cmp	r3, r2
 80046be:	d100      	bne.n	80046c2 <memset+0xa>
 80046c0:	4770      	bx	lr
 80046c2:	f803 1b01 	strb.w	r1, [r3], #1
 80046c6:	e7f9      	b.n	80046bc <memset+0x4>

080046c8 <sniprintf>:
 80046c8:	b40c      	push	{r2, r3}
 80046ca:	b530      	push	{r4, r5, lr}
 80046cc:	4b17      	ldr	r3, [pc, #92]	; (800472c <sniprintf+0x64>)
 80046ce:	1e0c      	subs	r4, r1, #0
 80046d0:	681d      	ldr	r5, [r3, #0]
 80046d2:	b09d      	sub	sp, #116	; 0x74
 80046d4:	da08      	bge.n	80046e8 <sniprintf+0x20>
 80046d6:	238b      	movs	r3, #139	; 0x8b
 80046d8:	602b      	str	r3, [r5, #0]
 80046da:	f04f 30ff 	mov.w	r0, #4294967295
 80046de:	b01d      	add	sp, #116	; 0x74
 80046e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046e4:	b002      	add	sp, #8
 80046e6:	4770      	bx	lr
 80046e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80046ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80046f0:	bf14      	ite	ne
 80046f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80046f6:	4623      	moveq	r3, r4
 80046f8:	9304      	str	r3, [sp, #16]
 80046fa:	9307      	str	r3, [sp, #28]
 80046fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004700:	9002      	str	r0, [sp, #8]
 8004702:	9006      	str	r0, [sp, #24]
 8004704:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004708:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800470a:	ab21      	add	r3, sp, #132	; 0x84
 800470c:	a902      	add	r1, sp, #8
 800470e:	4628      	mov	r0, r5
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	f000 f869 	bl	80047e8 <_svfiprintf_r>
 8004716:	1c43      	adds	r3, r0, #1
 8004718:	bfbc      	itt	lt
 800471a:	238b      	movlt	r3, #139	; 0x8b
 800471c:	602b      	strlt	r3, [r5, #0]
 800471e:	2c00      	cmp	r4, #0
 8004720:	d0dd      	beq.n	80046de <sniprintf+0x16>
 8004722:	9b02      	ldr	r3, [sp, #8]
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
 8004728:	e7d9      	b.n	80046de <sniprintf+0x16>
 800472a:	bf00      	nop
 800472c:	2000000c 	.word	0x2000000c

08004730 <__ssputs_r>:
 8004730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004734:	688e      	ldr	r6, [r1, #8]
 8004736:	429e      	cmp	r6, r3
 8004738:	4682      	mov	sl, r0
 800473a:	460c      	mov	r4, r1
 800473c:	4690      	mov	r8, r2
 800473e:	461f      	mov	r7, r3
 8004740:	d838      	bhi.n	80047b4 <__ssputs_r+0x84>
 8004742:	898a      	ldrh	r2, [r1, #12]
 8004744:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004748:	d032      	beq.n	80047b0 <__ssputs_r+0x80>
 800474a:	6825      	ldr	r5, [r4, #0]
 800474c:	6909      	ldr	r1, [r1, #16]
 800474e:	eba5 0901 	sub.w	r9, r5, r1
 8004752:	6965      	ldr	r5, [r4, #20]
 8004754:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004758:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800475c:	3301      	adds	r3, #1
 800475e:	444b      	add	r3, r9
 8004760:	106d      	asrs	r5, r5, #1
 8004762:	429d      	cmp	r5, r3
 8004764:	bf38      	it	cc
 8004766:	461d      	movcc	r5, r3
 8004768:	0553      	lsls	r3, r2, #21
 800476a:	d531      	bpl.n	80047d0 <__ssputs_r+0xa0>
 800476c:	4629      	mov	r1, r5
 800476e:	f000 fb63 	bl	8004e38 <_malloc_r>
 8004772:	4606      	mov	r6, r0
 8004774:	b950      	cbnz	r0, 800478c <__ssputs_r+0x5c>
 8004776:	230c      	movs	r3, #12
 8004778:	f8ca 3000 	str.w	r3, [sl]
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004782:	81a3      	strh	r3, [r4, #12]
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478c:	6921      	ldr	r1, [r4, #16]
 800478e:	464a      	mov	r2, r9
 8004790:	f000 fabe 	bl	8004d10 <memcpy>
 8004794:	89a3      	ldrh	r3, [r4, #12]
 8004796:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800479a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479e:	81a3      	strh	r3, [r4, #12]
 80047a0:	6126      	str	r6, [r4, #16]
 80047a2:	6165      	str	r5, [r4, #20]
 80047a4:	444e      	add	r6, r9
 80047a6:	eba5 0509 	sub.w	r5, r5, r9
 80047aa:	6026      	str	r6, [r4, #0]
 80047ac:	60a5      	str	r5, [r4, #8]
 80047ae:	463e      	mov	r6, r7
 80047b0:	42be      	cmp	r6, r7
 80047b2:	d900      	bls.n	80047b6 <__ssputs_r+0x86>
 80047b4:	463e      	mov	r6, r7
 80047b6:	6820      	ldr	r0, [r4, #0]
 80047b8:	4632      	mov	r2, r6
 80047ba:	4641      	mov	r1, r8
 80047bc:	f000 fab6 	bl	8004d2c <memmove>
 80047c0:	68a3      	ldr	r3, [r4, #8]
 80047c2:	1b9b      	subs	r3, r3, r6
 80047c4:	60a3      	str	r3, [r4, #8]
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	4433      	add	r3, r6
 80047ca:	6023      	str	r3, [r4, #0]
 80047cc:	2000      	movs	r0, #0
 80047ce:	e7db      	b.n	8004788 <__ssputs_r+0x58>
 80047d0:	462a      	mov	r2, r5
 80047d2:	f000 fba5 	bl	8004f20 <_realloc_r>
 80047d6:	4606      	mov	r6, r0
 80047d8:	2800      	cmp	r0, #0
 80047da:	d1e1      	bne.n	80047a0 <__ssputs_r+0x70>
 80047dc:	6921      	ldr	r1, [r4, #16]
 80047de:	4650      	mov	r0, sl
 80047e0:	f000 fabe 	bl	8004d60 <_free_r>
 80047e4:	e7c7      	b.n	8004776 <__ssputs_r+0x46>
	...

080047e8 <_svfiprintf_r>:
 80047e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ec:	4698      	mov	r8, r3
 80047ee:	898b      	ldrh	r3, [r1, #12]
 80047f0:	061b      	lsls	r3, r3, #24
 80047f2:	b09d      	sub	sp, #116	; 0x74
 80047f4:	4607      	mov	r7, r0
 80047f6:	460d      	mov	r5, r1
 80047f8:	4614      	mov	r4, r2
 80047fa:	d50e      	bpl.n	800481a <_svfiprintf_r+0x32>
 80047fc:	690b      	ldr	r3, [r1, #16]
 80047fe:	b963      	cbnz	r3, 800481a <_svfiprintf_r+0x32>
 8004800:	2140      	movs	r1, #64	; 0x40
 8004802:	f000 fb19 	bl	8004e38 <_malloc_r>
 8004806:	6028      	str	r0, [r5, #0]
 8004808:	6128      	str	r0, [r5, #16]
 800480a:	b920      	cbnz	r0, 8004816 <_svfiprintf_r+0x2e>
 800480c:	230c      	movs	r3, #12
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	f04f 30ff 	mov.w	r0, #4294967295
 8004814:	e0d1      	b.n	80049ba <_svfiprintf_r+0x1d2>
 8004816:	2340      	movs	r3, #64	; 0x40
 8004818:	616b      	str	r3, [r5, #20]
 800481a:	2300      	movs	r3, #0
 800481c:	9309      	str	r3, [sp, #36]	; 0x24
 800481e:	2320      	movs	r3, #32
 8004820:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004824:	f8cd 800c 	str.w	r8, [sp, #12]
 8004828:	2330      	movs	r3, #48	; 0x30
 800482a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049d4 <_svfiprintf_r+0x1ec>
 800482e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004832:	f04f 0901 	mov.w	r9, #1
 8004836:	4623      	mov	r3, r4
 8004838:	469a      	mov	sl, r3
 800483a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800483e:	b10a      	cbz	r2, 8004844 <_svfiprintf_r+0x5c>
 8004840:	2a25      	cmp	r2, #37	; 0x25
 8004842:	d1f9      	bne.n	8004838 <_svfiprintf_r+0x50>
 8004844:	ebba 0b04 	subs.w	fp, sl, r4
 8004848:	d00b      	beq.n	8004862 <_svfiprintf_r+0x7a>
 800484a:	465b      	mov	r3, fp
 800484c:	4622      	mov	r2, r4
 800484e:	4629      	mov	r1, r5
 8004850:	4638      	mov	r0, r7
 8004852:	f7ff ff6d 	bl	8004730 <__ssputs_r>
 8004856:	3001      	adds	r0, #1
 8004858:	f000 80aa 	beq.w	80049b0 <_svfiprintf_r+0x1c8>
 800485c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800485e:	445a      	add	r2, fp
 8004860:	9209      	str	r2, [sp, #36]	; 0x24
 8004862:	f89a 3000 	ldrb.w	r3, [sl]
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80a2 	beq.w	80049b0 <_svfiprintf_r+0x1c8>
 800486c:	2300      	movs	r3, #0
 800486e:	f04f 32ff 	mov.w	r2, #4294967295
 8004872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004876:	f10a 0a01 	add.w	sl, sl, #1
 800487a:	9304      	str	r3, [sp, #16]
 800487c:	9307      	str	r3, [sp, #28]
 800487e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004882:	931a      	str	r3, [sp, #104]	; 0x68
 8004884:	4654      	mov	r4, sl
 8004886:	2205      	movs	r2, #5
 8004888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800488c:	4851      	ldr	r0, [pc, #324]	; (80049d4 <_svfiprintf_r+0x1ec>)
 800488e:	f7fb fcc7 	bl	8000220 <memchr>
 8004892:	9a04      	ldr	r2, [sp, #16]
 8004894:	b9d8      	cbnz	r0, 80048ce <_svfiprintf_r+0xe6>
 8004896:	06d0      	lsls	r0, r2, #27
 8004898:	bf44      	itt	mi
 800489a:	2320      	movmi	r3, #32
 800489c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048a0:	0711      	lsls	r1, r2, #28
 80048a2:	bf44      	itt	mi
 80048a4:	232b      	movmi	r3, #43	; 0x2b
 80048a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048aa:	f89a 3000 	ldrb.w	r3, [sl]
 80048ae:	2b2a      	cmp	r3, #42	; 0x2a
 80048b0:	d015      	beq.n	80048de <_svfiprintf_r+0xf6>
 80048b2:	9a07      	ldr	r2, [sp, #28]
 80048b4:	4654      	mov	r4, sl
 80048b6:	2000      	movs	r0, #0
 80048b8:	f04f 0c0a 	mov.w	ip, #10
 80048bc:	4621      	mov	r1, r4
 80048be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048c2:	3b30      	subs	r3, #48	; 0x30
 80048c4:	2b09      	cmp	r3, #9
 80048c6:	d94e      	bls.n	8004966 <_svfiprintf_r+0x17e>
 80048c8:	b1b0      	cbz	r0, 80048f8 <_svfiprintf_r+0x110>
 80048ca:	9207      	str	r2, [sp, #28]
 80048cc:	e014      	b.n	80048f8 <_svfiprintf_r+0x110>
 80048ce:	eba0 0308 	sub.w	r3, r0, r8
 80048d2:	fa09 f303 	lsl.w	r3, r9, r3
 80048d6:	4313      	orrs	r3, r2
 80048d8:	9304      	str	r3, [sp, #16]
 80048da:	46a2      	mov	sl, r4
 80048dc:	e7d2      	b.n	8004884 <_svfiprintf_r+0x9c>
 80048de:	9b03      	ldr	r3, [sp, #12]
 80048e0:	1d19      	adds	r1, r3, #4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	9103      	str	r1, [sp, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bfbb      	ittet	lt
 80048ea:	425b      	neglt	r3, r3
 80048ec:	f042 0202 	orrlt.w	r2, r2, #2
 80048f0:	9307      	strge	r3, [sp, #28]
 80048f2:	9307      	strlt	r3, [sp, #28]
 80048f4:	bfb8      	it	lt
 80048f6:	9204      	strlt	r2, [sp, #16]
 80048f8:	7823      	ldrb	r3, [r4, #0]
 80048fa:	2b2e      	cmp	r3, #46	; 0x2e
 80048fc:	d10c      	bne.n	8004918 <_svfiprintf_r+0x130>
 80048fe:	7863      	ldrb	r3, [r4, #1]
 8004900:	2b2a      	cmp	r3, #42	; 0x2a
 8004902:	d135      	bne.n	8004970 <_svfiprintf_r+0x188>
 8004904:	9b03      	ldr	r3, [sp, #12]
 8004906:	1d1a      	adds	r2, r3, #4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	9203      	str	r2, [sp, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	bfb8      	it	lt
 8004910:	f04f 33ff 	movlt.w	r3, #4294967295
 8004914:	3402      	adds	r4, #2
 8004916:	9305      	str	r3, [sp, #20]
 8004918:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049e4 <_svfiprintf_r+0x1fc>
 800491c:	7821      	ldrb	r1, [r4, #0]
 800491e:	2203      	movs	r2, #3
 8004920:	4650      	mov	r0, sl
 8004922:	f7fb fc7d 	bl	8000220 <memchr>
 8004926:	b140      	cbz	r0, 800493a <_svfiprintf_r+0x152>
 8004928:	2340      	movs	r3, #64	; 0x40
 800492a:	eba0 000a 	sub.w	r0, r0, sl
 800492e:	fa03 f000 	lsl.w	r0, r3, r0
 8004932:	9b04      	ldr	r3, [sp, #16]
 8004934:	4303      	orrs	r3, r0
 8004936:	3401      	adds	r4, #1
 8004938:	9304      	str	r3, [sp, #16]
 800493a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800493e:	4826      	ldr	r0, [pc, #152]	; (80049d8 <_svfiprintf_r+0x1f0>)
 8004940:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004944:	2206      	movs	r2, #6
 8004946:	f7fb fc6b 	bl	8000220 <memchr>
 800494a:	2800      	cmp	r0, #0
 800494c:	d038      	beq.n	80049c0 <_svfiprintf_r+0x1d8>
 800494e:	4b23      	ldr	r3, [pc, #140]	; (80049dc <_svfiprintf_r+0x1f4>)
 8004950:	bb1b      	cbnz	r3, 800499a <_svfiprintf_r+0x1b2>
 8004952:	9b03      	ldr	r3, [sp, #12]
 8004954:	3307      	adds	r3, #7
 8004956:	f023 0307 	bic.w	r3, r3, #7
 800495a:	3308      	adds	r3, #8
 800495c:	9303      	str	r3, [sp, #12]
 800495e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004960:	4433      	add	r3, r6
 8004962:	9309      	str	r3, [sp, #36]	; 0x24
 8004964:	e767      	b.n	8004836 <_svfiprintf_r+0x4e>
 8004966:	fb0c 3202 	mla	r2, ip, r2, r3
 800496a:	460c      	mov	r4, r1
 800496c:	2001      	movs	r0, #1
 800496e:	e7a5      	b.n	80048bc <_svfiprintf_r+0xd4>
 8004970:	2300      	movs	r3, #0
 8004972:	3401      	adds	r4, #1
 8004974:	9305      	str	r3, [sp, #20]
 8004976:	4619      	mov	r1, r3
 8004978:	f04f 0c0a 	mov.w	ip, #10
 800497c:	4620      	mov	r0, r4
 800497e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004982:	3a30      	subs	r2, #48	; 0x30
 8004984:	2a09      	cmp	r2, #9
 8004986:	d903      	bls.n	8004990 <_svfiprintf_r+0x1a8>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0c5      	beq.n	8004918 <_svfiprintf_r+0x130>
 800498c:	9105      	str	r1, [sp, #20]
 800498e:	e7c3      	b.n	8004918 <_svfiprintf_r+0x130>
 8004990:	fb0c 2101 	mla	r1, ip, r1, r2
 8004994:	4604      	mov	r4, r0
 8004996:	2301      	movs	r3, #1
 8004998:	e7f0      	b.n	800497c <_svfiprintf_r+0x194>
 800499a:	ab03      	add	r3, sp, #12
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	462a      	mov	r2, r5
 80049a0:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <_svfiprintf_r+0x1f8>)
 80049a2:	a904      	add	r1, sp, #16
 80049a4:	4638      	mov	r0, r7
 80049a6:	f3af 8000 	nop.w
 80049aa:	1c42      	adds	r2, r0, #1
 80049ac:	4606      	mov	r6, r0
 80049ae:	d1d6      	bne.n	800495e <_svfiprintf_r+0x176>
 80049b0:	89ab      	ldrh	r3, [r5, #12]
 80049b2:	065b      	lsls	r3, r3, #25
 80049b4:	f53f af2c 	bmi.w	8004810 <_svfiprintf_r+0x28>
 80049b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049ba:	b01d      	add	sp, #116	; 0x74
 80049bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c0:	ab03      	add	r3, sp, #12
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	462a      	mov	r2, r5
 80049c6:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <_svfiprintf_r+0x1f8>)
 80049c8:	a904      	add	r1, sp, #16
 80049ca:	4638      	mov	r0, r7
 80049cc:	f000 f87a 	bl	8004ac4 <_printf_i>
 80049d0:	e7eb      	b.n	80049aa <_svfiprintf_r+0x1c2>
 80049d2:	bf00      	nop
 80049d4:	08005028 	.word	0x08005028
 80049d8:	08005032 	.word	0x08005032
 80049dc:	00000000 	.word	0x00000000
 80049e0:	08004731 	.word	0x08004731
 80049e4:	0800502e 	.word	0x0800502e

080049e8 <_printf_common>:
 80049e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049ec:	4616      	mov	r6, r2
 80049ee:	4699      	mov	r9, r3
 80049f0:	688a      	ldr	r2, [r1, #8]
 80049f2:	690b      	ldr	r3, [r1, #16]
 80049f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049f8:	4293      	cmp	r3, r2
 80049fa:	bfb8      	it	lt
 80049fc:	4613      	movlt	r3, r2
 80049fe:	6033      	str	r3, [r6, #0]
 8004a00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a04:	4607      	mov	r7, r0
 8004a06:	460c      	mov	r4, r1
 8004a08:	b10a      	cbz	r2, 8004a0e <_printf_common+0x26>
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	6033      	str	r3, [r6, #0]
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	0699      	lsls	r1, r3, #26
 8004a12:	bf42      	ittt	mi
 8004a14:	6833      	ldrmi	r3, [r6, #0]
 8004a16:	3302      	addmi	r3, #2
 8004a18:	6033      	strmi	r3, [r6, #0]
 8004a1a:	6825      	ldr	r5, [r4, #0]
 8004a1c:	f015 0506 	ands.w	r5, r5, #6
 8004a20:	d106      	bne.n	8004a30 <_printf_common+0x48>
 8004a22:	f104 0a19 	add.w	sl, r4, #25
 8004a26:	68e3      	ldr	r3, [r4, #12]
 8004a28:	6832      	ldr	r2, [r6, #0]
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	42ab      	cmp	r3, r5
 8004a2e:	dc26      	bgt.n	8004a7e <_printf_common+0x96>
 8004a30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a34:	1e13      	subs	r3, r2, #0
 8004a36:	6822      	ldr	r2, [r4, #0]
 8004a38:	bf18      	it	ne
 8004a3a:	2301      	movne	r3, #1
 8004a3c:	0692      	lsls	r2, r2, #26
 8004a3e:	d42b      	bmi.n	8004a98 <_printf_common+0xb0>
 8004a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a44:	4649      	mov	r1, r9
 8004a46:	4638      	mov	r0, r7
 8004a48:	47c0      	blx	r8
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d01e      	beq.n	8004a8c <_printf_common+0xa4>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	68e5      	ldr	r5, [r4, #12]
 8004a52:	6832      	ldr	r2, [r6, #0]
 8004a54:	f003 0306 	and.w	r3, r3, #6
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	bf08      	it	eq
 8004a5c:	1aad      	subeq	r5, r5, r2
 8004a5e:	68a3      	ldr	r3, [r4, #8]
 8004a60:	6922      	ldr	r2, [r4, #16]
 8004a62:	bf0c      	ite	eq
 8004a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a68:	2500      	movne	r5, #0
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	bfc4      	itt	gt
 8004a6e:	1a9b      	subgt	r3, r3, r2
 8004a70:	18ed      	addgt	r5, r5, r3
 8004a72:	2600      	movs	r6, #0
 8004a74:	341a      	adds	r4, #26
 8004a76:	42b5      	cmp	r5, r6
 8004a78:	d11a      	bne.n	8004ab0 <_printf_common+0xc8>
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	e008      	b.n	8004a90 <_printf_common+0xa8>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	4652      	mov	r2, sl
 8004a82:	4649      	mov	r1, r9
 8004a84:	4638      	mov	r0, r7
 8004a86:	47c0      	blx	r8
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d103      	bne.n	8004a94 <_printf_common+0xac>
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a94:	3501      	adds	r5, #1
 8004a96:	e7c6      	b.n	8004a26 <_printf_common+0x3e>
 8004a98:	18e1      	adds	r1, r4, r3
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	2030      	movs	r0, #48	; 0x30
 8004a9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004aa2:	4422      	add	r2, r4
 8004aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004aac:	3302      	adds	r3, #2
 8004aae:	e7c7      	b.n	8004a40 <_printf_common+0x58>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	4649      	mov	r1, r9
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	47c0      	blx	r8
 8004aba:	3001      	adds	r0, #1
 8004abc:	d0e6      	beq.n	8004a8c <_printf_common+0xa4>
 8004abe:	3601      	adds	r6, #1
 8004ac0:	e7d9      	b.n	8004a76 <_printf_common+0x8e>
	...

08004ac4 <_printf_i>:
 8004ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac8:	7e0f      	ldrb	r7, [r1, #24]
 8004aca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004acc:	2f78      	cmp	r7, #120	; 0x78
 8004ace:	4691      	mov	r9, r2
 8004ad0:	4680      	mov	r8, r0
 8004ad2:	460c      	mov	r4, r1
 8004ad4:	469a      	mov	sl, r3
 8004ad6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ada:	d807      	bhi.n	8004aec <_printf_i+0x28>
 8004adc:	2f62      	cmp	r7, #98	; 0x62
 8004ade:	d80a      	bhi.n	8004af6 <_printf_i+0x32>
 8004ae0:	2f00      	cmp	r7, #0
 8004ae2:	f000 80d8 	beq.w	8004c96 <_printf_i+0x1d2>
 8004ae6:	2f58      	cmp	r7, #88	; 0x58
 8004ae8:	f000 80a3 	beq.w	8004c32 <_printf_i+0x16e>
 8004aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004af4:	e03a      	b.n	8004b6c <_printf_i+0xa8>
 8004af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004afa:	2b15      	cmp	r3, #21
 8004afc:	d8f6      	bhi.n	8004aec <_printf_i+0x28>
 8004afe:	a101      	add	r1, pc, #4	; (adr r1, 8004b04 <_printf_i+0x40>)
 8004b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b04:	08004b5d 	.word	0x08004b5d
 8004b08:	08004b71 	.word	0x08004b71
 8004b0c:	08004aed 	.word	0x08004aed
 8004b10:	08004aed 	.word	0x08004aed
 8004b14:	08004aed 	.word	0x08004aed
 8004b18:	08004aed 	.word	0x08004aed
 8004b1c:	08004b71 	.word	0x08004b71
 8004b20:	08004aed 	.word	0x08004aed
 8004b24:	08004aed 	.word	0x08004aed
 8004b28:	08004aed 	.word	0x08004aed
 8004b2c:	08004aed 	.word	0x08004aed
 8004b30:	08004c7d 	.word	0x08004c7d
 8004b34:	08004ba1 	.word	0x08004ba1
 8004b38:	08004c5f 	.word	0x08004c5f
 8004b3c:	08004aed 	.word	0x08004aed
 8004b40:	08004aed 	.word	0x08004aed
 8004b44:	08004c9f 	.word	0x08004c9f
 8004b48:	08004aed 	.word	0x08004aed
 8004b4c:	08004ba1 	.word	0x08004ba1
 8004b50:	08004aed 	.word	0x08004aed
 8004b54:	08004aed 	.word	0x08004aed
 8004b58:	08004c67 	.word	0x08004c67
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	1d1a      	adds	r2, r3, #4
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	602a      	str	r2, [r5, #0]
 8004b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0a3      	b.n	8004cb8 <_printf_i+0x1f4>
 8004b70:	6820      	ldr	r0, [r4, #0]
 8004b72:	6829      	ldr	r1, [r5, #0]
 8004b74:	0606      	lsls	r6, r0, #24
 8004b76:	f101 0304 	add.w	r3, r1, #4
 8004b7a:	d50a      	bpl.n	8004b92 <_printf_i+0xce>
 8004b7c:	680e      	ldr	r6, [r1, #0]
 8004b7e:	602b      	str	r3, [r5, #0]
 8004b80:	2e00      	cmp	r6, #0
 8004b82:	da03      	bge.n	8004b8c <_printf_i+0xc8>
 8004b84:	232d      	movs	r3, #45	; 0x2d
 8004b86:	4276      	negs	r6, r6
 8004b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b8c:	485e      	ldr	r0, [pc, #376]	; (8004d08 <_printf_i+0x244>)
 8004b8e:	230a      	movs	r3, #10
 8004b90:	e019      	b.n	8004bc6 <_printf_i+0x102>
 8004b92:	680e      	ldr	r6, [r1, #0]
 8004b94:	602b      	str	r3, [r5, #0]
 8004b96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b9a:	bf18      	it	ne
 8004b9c:	b236      	sxthne	r6, r6
 8004b9e:	e7ef      	b.n	8004b80 <_printf_i+0xbc>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	6820      	ldr	r0, [r4, #0]
 8004ba4:	1d19      	adds	r1, r3, #4
 8004ba6:	6029      	str	r1, [r5, #0]
 8004ba8:	0601      	lsls	r1, r0, #24
 8004baa:	d501      	bpl.n	8004bb0 <_printf_i+0xec>
 8004bac:	681e      	ldr	r6, [r3, #0]
 8004bae:	e002      	b.n	8004bb6 <_printf_i+0xf2>
 8004bb0:	0646      	lsls	r6, r0, #25
 8004bb2:	d5fb      	bpl.n	8004bac <_printf_i+0xe8>
 8004bb4:	881e      	ldrh	r6, [r3, #0]
 8004bb6:	4854      	ldr	r0, [pc, #336]	; (8004d08 <_printf_i+0x244>)
 8004bb8:	2f6f      	cmp	r7, #111	; 0x6f
 8004bba:	bf0c      	ite	eq
 8004bbc:	2308      	moveq	r3, #8
 8004bbe:	230a      	movne	r3, #10
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bc6:	6865      	ldr	r5, [r4, #4]
 8004bc8:	60a5      	str	r5, [r4, #8]
 8004bca:	2d00      	cmp	r5, #0
 8004bcc:	bfa2      	ittt	ge
 8004bce:	6821      	ldrge	r1, [r4, #0]
 8004bd0:	f021 0104 	bicge.w	r1, r1, #4
 8004bd4:	6021      	strge	r1, [r4, #0]
 8004bd6:	b90e      	cbnz	r6, 8004bdc <_printf_i+0x118>
 8004bd8:	2d00      	cmp	r5, #0
 8004bda:	d04d      	beq.n	8004c78 <_printf_i+0x1b4>
 8004bdc:	4615      	mov	r5, r2
 8004bde:	fbb6 f1f3 	udiv	r1, r6, r3
 8004be2:	fb03 6711 	mls	r7, r3, r1, r6
 8004be6:	5dc7      	ldrb	r7, [r0, r7]
 8004be8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bec:	4637      	mov	r7, r6
 8004bee:	42bb      	cmp	r3, r7
 8004bf0:	460e      	mov	r6, r1
 8004bf2:	d9f4      	bls.n	8004bde <_printf_i+0x11a>
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d10b      	bne.n	8004c10 <_printf_i+0x14c>
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	07de      	lsls	r6, r3, #31
 8004bfc:	d508      	bpl.n	8004c10 <_printf_i+0x14c>
 8004bfe:	6923      	ldr	r3, [r4, #16]
 8004c00:	6861      	ldr	r1, [r4, #4]
 8004c02:	4299      	cmp	r1, r3
 8004c04:	bfde      	ittt	le
 8004c06:	2330      	movle	r3, #48	; 0x30
 8004c08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c10:	1b52      	subs	r2, r2, r5
 8004c12:	6122      	str	r2, [r4, #16]
 8004c14:	f8cd a000 	str.w	sl, [sp]
 8004c18:	464b      	mov	r3, r9
 8004c1a:	aa03      	add	r2, sp, #12
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	4640      	mov	r0, r8
 8004c20:	f7ff fee2 	bl	80049e8 <_printf_common>
 8004c24:	3001      	adds	r0, #1
 8004c26:	d14c      	bne.n	8004cc2 <_printf_i+0x1fe>
 8004c28:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2c:	b004      	add	sp, #16
 8004c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c32:	4835      	ldr	r0, [pc, #212]	; (8004d08 <_printf_i+0x244>)
 8004c34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c38:	6829      	ldr	r1, [r5, #0]
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c40:	6029      	str	r1, [r5, #0]
 8004c42:	061d      	lsls	r5, r3, #24
 8004c44:	d514      	bpl.n	8004c70 <_printf_i+0x1ac>
 8004c46:	07df      	lsls	r7, r3, #31
 8004c48:	bf44      	itt	mi
 8004c4a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c4e:	6023      	strmi	r3, [r4, #0]
 8004c50:	b91e      	cbnz	r6, 8004c5a <_printf_i+0x196>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	f023 0320 	bic.w	r3, r3, #32
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	2310      	movs	r3, #16
 8004c5c:	e7b0      	b.n	8004bc0 <_printf_i+0xfc>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	f043 0320 	orr.w	r3, r3, #32
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	2378      	movs	r3, #120	; 0x78
 8004c68:	4828      	ldr	r0, [pc, #160]	; (8004d0c <_printf_i+0x248>)
 8004c6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c6e:	e7e3      	b.n	8004c38 <_printf_i+0x174>
 8004c70:	0659      	lsls	r1, r3, #25
 8004c72:	bf48      	it	mi
 8004c74:	b2b6      	uxthmi	r6, r6
 8004c76:	e7e6      	b.n	8004c46 <_printf_i+0x182>
 8004c78:	4615      	mov	r5, r2
 8004c7a:	e7bb      	b.n	8004bf4 <_printf_i+0x130>
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	6826      	ldr	r6, [r4, #0]
 8004c80:	6961      	ldr	r1, [r4, #20]
 8004c82:	1d18      	adds	r0, r3, #4
 8004c84:	6028      	str	r0, [r5, #0]
 8004c86:	0635      	lsls	r5, r6, #24
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	d501      	bpl.n	8004c90 <_printf_i+0x1cc>
 8004c8c:	6019      	str	r1, [r3, #0]
 8004c8e:	e002      	b.n	8004c96 <_printf_i+0x1d2>
 8004c90:	0670      	lsls	r0, r6, #25
 8004c92:	d5fb      	bpl.n	8004c8c <_printf_i+0x1c8>
 8004c94:	8019      	strh	r1, [r3, #0]
 8004c96:	2300      	movs	r3, #0
 8004c98:	6123      	str	r3, [r4, #16]
 8004c9a:	4615      	mov	r5, r2
 8004c9c:	e7ba      	b.n	8004c14 <_printf_i+0x150>
 8004c9e:	682b      	ldr	r3, [r5, #0]
 8004ca0:	1d1a      	adds	r2, r3, #4
 8004ca2:	602a      	str	r2, [r5, #0]
 8004ca4:	681d      	ldr	r5, [r3, #0]
 8004ca6:	6862      	ldr	r2, [r4, #4]
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4628      	mov	r0, r5
 8004cac:	f7fb fab8 	bl	8000220 <memchr>
 8004cb0:	b108      	cbz	r0, 8004cb6 <_printf_i+0x1f2>
 8004cb2:	1b40      	subs	r0, r0, r5
 8004cb4:	6060      	str	r0, [r4, #4]
 8004cb6:	6863      	ldr	r3, [r4, #4]
 8004cb8:	6123      	str	r3, [r4, #16]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cc0:	e7a8      	b.n	8004c14 <_printf_i+0x150>
 8004cc2:	6923      	ldr	r3, [r4, #16]
 8004cc4:	462a      	mov	r2, r5
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	4640      	mov	r0, r8
 8004cca:	47d0      	blx	sl
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d0ab      	beq.n	8004c28 <_printf_i+0x164>
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	079b      	lsls	r3, r3, #30
 8004cd4:	d413      	bmi.n	8004cfe <_printf_i+0x23a>
 8004cd6:	68e0      	ldr	r0, [r4, #12]
 8004cd8:	9b03      	ldr	r3, [sp, #12]
 8004cda:	4298      	cmp	r0, r3
 8004cdc:	bfb8      	it	lt
 8004cde:	4618      	movlt	r0, r3
 8004ce0:	e7a4      	b.n	8004c2c <_printf_i+0x168>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	4632      	mov	r2, r6
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	4640      	mov	r0, r8
 8004cea:	47d0      	blx	sl
 8004cec:	3001      	adds	r0, #1
 8004cee:	d09b      	beq.n	8004c28 <_printf_i+0x164>
 8004cf0:	3501      	adds	r5, #1
 8004cf2:	68e3      	ldr	r3, [r4, #12]
 8004cf4:	9903      	ldr	r1, [sp, #12]
 8004cf6:	1a5b      	subs	r3, r3, r1
 8004cf8:	42ab      	cmp	r3, r5
 8004cfa:	dcf2      	bgt.n	8004ce2 <_printf_i+0x21e>
 8004cfc:	e7eb      	b.n	8004cd6 <_printf_i+0x212>
 8004cfe:	2500      	movs	r5, #0
 8004d00:	f104 0619 	add.w	r6, r4, #25
 8004d04:	e7f5      	b.n	8004cf2 <_printf_i+0x22e>
 8004d06:	bf00      	nop
 8004d08:	08005039 	.word	0x08005039
 8004d0c:	0800504a 	.word	0x0800504a

08004d10 <memcpy>:
 8004d10:	440a      	add	r2, r1
 8004d12:	4291      	cmp	r1, r2
 8004d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d18:	d100      	bne.n	8004d1c <memcpy+0xc>
 8004d1a:	4770      	bx	lr
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d26:	4291      	cmp	r1, r2
 8004d28:	d1f9      	bne.n	8004d1e <memcpy+0xe>
 8004d2a:	bd10      	pop	{r4, pc}

08004d2c <memmove>:
 8004d2c:	4288      	cmp	r0, r1
 8004d2e:	b510      	push	{r4, lr}
 8004d30:	eb01 0402 	add.w	r4, r1, r2
 8004d34:	d902      	bls.n	8004d3c <memmove+0x10>
 8004d36:	4284      	cmp	r4, r0
 8004d38:	4623      	mov	r3, r4
 8004d3a:	d807      	bhi.n	8004d4c <memmove+0x20>
 8004d3c:	1e43      	subs	r3, r0, #1
 8004d3e:	42a1      	cmp	r1, r4
 8004d40:	d008      	beq.n	8004d54 <memmove+0x28>
 8004d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d4a:	e7f8      	b.n	8004d3e <memmove+0x12>
 8004d4c:	4402      	add	r2, r0
 8004d4e:	4601      	mov	r1, r0
 8004d50:	428a      	cmp	r2, r1
 8004d52:	d100      	bne.n	8004d56 <memmove+0x2a>
 8004d54:	bd10      	pop	{r4, pc}
 8004d56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d5e:	e7f7      	b.n	8004d50 <memmove+0x24>

08004d60 <_free_r>:
 8004d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d62:	2900      	cmp	r1, #0
 8004d64:	d044      	beq.n	8004df0 <_free_r+0x90>
 8004d66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d6a:	9001      	str	r0, [sp, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d72:	bfb8      	it	lt
 8004d74:	18e4      	addlt	r4, r4, r3
 8004d76:	f000 f913 	bl	8004fa0 <__malloc_lock>
 8004d7a:	4a1e      	ldr	r2, [pc, #120]	; (8004df4 <_free_r+0x94>)
 8004d7c:	9801      	ldr	r0, [sp, #4]
 8004d7e:	6813      	ldr	r3, [r2, #0]
 8004d80:	b933      	cbnz	r3, 8004d90 <_free_r+0x30>
 8004d82:	6063      	str	r3, [r4, #4]
 8004d84:	6014      	str	r4, [r2, #0]
 8004d86:	b003      	add	sp, #12
 8004d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d8c:	f000 b90e 	b.w	8004fac <__malloc_unlock>
 8004d90:	42a3      	cmp	r3, r4
 8004d92:	d908      	bls.n	8004da6 <_free_r+0x46>
 8004d94:	6825      	ldr	r5, [r4, #0]
 8004d96:	1961      	adds	r1, r4, r5
 8004d98:	428b      	cmp	r3, r1
 8004d9a:	bf01      	itttt	eq
 8004d9c:	6819      	ldreq	r1, [r3, #0]
 8004d9e:	685b      	ldreq	r3, [r3, #4]
 8004da0:	1949      	addeq	r1, r1, r5
 8004da2:	6021      	streq	r1, [r4, #0]
 8004da4:	e7ed      	b.n	8004d82 <_free_r+0x22>
 8004da6:	461a      	mov	r2, r3
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	b10b      	cbz	r3, 8004db0 <_free_r+0x50>
 8004dac:	42a3      	cmp	r3, r4
 8004dae:	d9fa      	bls.n	8004da6 <_free_r+0x46>
 8004db0:	6811      	ldr	r1, [r2, #0]
 8004db2:	1855      	adds	r5, r2, r1
 8004db4:	42a5      	cmp	r5, r4
 8004db6:	d10b      	bne.n	8004dd0 <_free_r+0x70>
 8004db8:	6824      	ldr	r4, [r4, #0]
 8004dba:	4421      	add	r1, r4
 8004dbc:	1854      	adds	r4, r2, r1
 8004dbe:	42a3      	cmp	r3, r4
 8004dc0:	6011      	str	r1, [r2, #0]
 8004dc2:	d1e0      	bne.n	8004d86 <_free_r+0x26>
 8004dc4:	681c      	ldr	r4, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	6053      	str	r3, [r2, #4]
 8004dca:	4421      	add	r1, r4
 8004dcc:	6011      	str	r1, [r2, #0]
 8004dce:	e7da      	b.n	8004d86 <_free_r+0x26>
 8004dd0:	d902      	bls.n	8004dd8 <_free_r+0x78>
 8004dd2:	230c      	movs	r3, #12
 8004dd4:	6003      	str	r3, [r0, #0]
 8004dd6:	e7d6      	b.n	8004d86 <_free_r+0x26>
 8004dd8:	6825      	ldr	r5, [r4, #0]
 8004dda:	1961      	adds	r1, r4, r5
 8004ddc:	428b      	cmp	r3, r1
 8004dde:	bf04      	itt	eq
 8004de0:	6819      	ldreq	r1, [r3, #0]
 8004de2:	685b      	ldreq	r3, [r3, #4]
 8004de4:	6063      	str	r3, [r4, #4]
 8004de6:	bf04      	itt	eq
 8004de8:	1949      	addeq	r1, r1, r5
 8004dea:	6021      	streq	r1, [r4, #0]
 8004dec:	6054      	str	r4, [r2, #4]
 8004dee:	e7ca      	b.n	8004d86 <_free_r+0x26>
 8004df0:	b003      	add	sp, #12
 8004df2:	bd30      	pop	{r4, r5, pc}
 8004df4:	20000190 	.word	0x20000190

08004df8 <sbrk_aligned>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	4e0e      	ldr	r6, [pc, #56]	; (8004e34 <sbrk_aligned+0x3c>)
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	6831      	ldr	r1, [r6, #0]
 8004e00:	4605      	mov	r5, r0
 8004e02:	b911      	cbnz	r1, 8004e0a <sbrk_aligned+0x12>
 8004e04:	f000 f8bc 	bl	8004f80 <_sbrk_r>
 8004e08:	6030      	str	r0, [r6, #0]
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f000 f8b7 	bl	8004f80 <_sbrk_r>
 8004e12:	1c43      	adds	r3, r0, #1
 8004e14:	d00a      	beq.n	8004e2c <sbrk_aligned+0x34>
 8004e16:	1cc4      	adds	r4, r0, #3
 8004e18:	f024 0403 	bic.w	r4, r4, #3
 8004e1c:	42a0      	cmp	r0, r4
 8004e1e:	d007      	beq.n	8004e30 <sbrk_aligned+0x38>
 8004e20:	1a21      	subs	r1, r4, r0
 8004e22:	4628      	mov	r0, r5
 8004e24:	f000 f8ac 	bl	8004f80 <_sbrk_r>
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d101      	bne.n	8004e30 <sbrk_aligned+0x38>
 8004e2c:	f04f 34ff 	mov.w	r4, #4294967295
 8004e30:	4620      	mov	r0, r4
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	20000194 	.word	0x20000194

08004e38 <_malloc_r>:
 8004e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3c:	1ccd      	adds	r5, r1, #3
 8004e3e:	f025 0503 	bic.w	r5, r5, #3
 8004e42:	3508      	adds	r5, #8
 8004e44:	2d0c      	cmp	r5, #12
 8004e46:	bf38      	it	cc
 8004e48:	250c      	movcc	r5, #12
 8004e4a:	2d00      	cmp	r5, #0
 8004e4c:	4607      	mov	r7, r0
 8004e4e:	db01      	blt.n	8004e54 <_malloc_r+0x1c>
 8004e50:	42a9      	cmp	r1, r5
 8004e52:	d905      	bls.n	8004e60 <_malloc_r+0x28>
 8004e54:	230c      	movs	r3, #12
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	2600      	movs	r6, #0
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e60:	4e2e      	ldr	r6, [pc, #184]	; (8004f1c <_malloc_r+0xe4>)
 8004e62:	f000 f89d 	bl	8004fa0 <__malloc_lock>
 8004e66:	6833      	ldr	r3, [r6, #0]
 8004e68:	461c      	mov	r4, r3
 8004e6a:	bb34      	cbnz	r4, 8004eba <_malloc_r+0x82>
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	4638      	mov	r0, r7
 8004e70:	f7ff ffc2 	bl	8004df8 <sbrk_aligned>
 8004e74:	1c43      	adds	r3, r0, #1
 8004e76:	4604      	mov	r4, r0
 8004e78:	d14d      	bne.n	8004f16 <_malloc_r+0xde>
 8004e7a:	6834      	ldr	r4, [r6, #0]
 8004e7c:	4626      	mov	r6, r4
 8004e7e:	2e00      	cmp	r6, #0
 8004e80:	d140      	bne.n	8004f04 <_malloc_r+0xcc>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	4631      	mov	r1, r6
 8004e86:	4638      	mov	r0, r7
 8004e88:	eb04 0803 	add.w	r8, r4, r3
 8004e8c:	f000 f878 	bl	8004f80 <_sbrk_r>
 8004e90:	4580      	cmp	r8, r0
 8004e92:	d13a      	bne.n	8004f0a <_malloc_r+0xd2>
 8004e94:	6821      	ldr	r1, [r4, #0]
 8004e96:	3503      	adds	r5, #3
 8004e98:	1a6d      	subs	r5, r5, r1
 8004e9a:	f025 0503 	bic.w	r5, r5, #3
 8004e9e:	3508      	adds	r5, #8
 8004ea0:	2d0c      	cmp	r5, #12
 8004ea2:	bf38      	it	cc
 8004ea4:	250c      	movcc	r5, #12
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	f7ff ffa5 	bl	8004df8 <sbrk_aligned>
 8004eae:	3001      	adds	r0, #1
 8004eb0:	d02b      	beq.n	8004f0a <_malloc_r+0xd2>
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	442b      	add	r3, r5
 8004eb6:	6023      	str	r3, [r4, #0]
 8004eb8:	e00e      	b.n	8004ed8 <_malloc_r+0xa0>
 8004eba:	6822      	ldr	r2, [r4, #0]
 8004ebc:	1b52      	subs	r2, r2, r5
 8004ebe:	d41e      	bmi.n	8004efe <_malloc_r+0xc6>
 8004ec0:	2a0b      	cmp	r2, #11
 8004ec2:	d916      	bls.n	8004ef2 <_malloc_r+0xba>
 8004ec4:	1961      	adds	r1, r4, r5
 8004ec6:	42a3      	cmp	r3, r4
 8004ec8:	6025      	str	r5, [r4, #0]
 8004eca:	bf18      	it	ne
 8004ecc:	6059      	strne	r1, [r3, #4]
 8004ece:	6863      	ldr	r3, [r4, #4]
 8004ed0:	bf08      	it	eq
 8004ed2:	6031      	streq	r1, [r6, #0]
 8004ed4:	5162      	str	r2, [r4, r5]
 8004ed6:	604b      	str	r3, [r1, #4]
 8004ed8:	4638      	mov	r0, r7
 8004eda:	f104 060b 	add.w	r6, r4, #11
 8004ede:	f000 f865 	bl	8004fac <__malloc_unlock>
 8004ee2:	f026 0607 	bic.w	r6, r6, #7
 8004ee6:	1d23      	adds	r3, r4, #4
 8004ee8:	1af2      	subs	r2, r6, r3
 8004eea:	d0b6      	beq.n	8004e5a <_malloc_r+0x22>
 8004eec:	1b9b      	subs	r3, r3, r6
 8004eee:	50a3      	str	r3, [r4, r2]
 8004ef0:	e7b3      	b.n	8004e5a <_malloc_r+0x22>
 8004ef2:	6862      	ldr	r2, [r4, #4]
 8004ef4:	42a3      	cmp	r3, r4
 8004ef6:	bf0c      	ite	eq
 8004ef8:	6032      	streq	r2, [r6, #0]
 8004efa:	605a      	strne	r2, [r3, #4]
 8004efc:	e7ec      	b.n	8004ed8 <_malloc_r+0xa0>
 8004efe:	4623      	mov	r3, r4
 8004f00:	6864      	ldr	r4, [r4, #4]
 8004f02:	e7b2      	b.n	8004e6a <_malloc_r+0x32>
 8004f04:	4634      	mov	r4, r6
 8004f06:	6876      	ldr	r6, [r6, #4]
 8004f08:	e7b9      	b.n	8004e7e <_malloc_r+0x46>
 8004f0a:	230c      	movs	r3, #12
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	4638      	mov	r0, r7
 8004f10:	f000 f84c 	bl	8004fac <__malloc_unlock>
 8004f14:	e7a1      	b.n	8004e5a <_malloc_r+0x22>
 8004f16:	6025      	str	r5, [r4, #0]
 8004f18:	e7de      	b.n	8004ed8 <_malloc_r+0xa0>
 8004f1a:	bf00      	nop
 8004f1c:	20000190 	.word	0x20000190

08004f20 <_realloc_r>:
 8004f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f24:	4680      	mov	r8, r0
 8004f26:	4614      	mov	r4, r2
 8004f28:	460e      	mov	r6, r1
 8004f2a:	b921      	cbnz	r1, 8004f36 <_realloc_r+0x16>
 8004f2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f30:	4611      	mov	r1, r2
 8004f32:	f7ff bf81 	b.w	8004e38 <_malloc_r>
 8004f36:	b92a      	cbnz	r2, 8004f44 <_realloc_r+0x24>
 8004f38:	f7ff ff12 	bl	8004d60 <_free_r>
 8004f3c:	4625      	mov	r5, r4
 8004f3e:	4628      	mov	r0, r5
 8004f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f44:	f000 f838 	bl	8004fb8 <_malloc_usable_size_r>
 8004f48:	4284      	cmp	r4, r0
 8004f4a:	4607      	mov	r7, r0
 8004f4c:	d802      	bhi.n	8004f54 <_realloc_r+0x34>
 8004f4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f52:	d812      	bhi.n	8004f7a <_realloc_r+0x5a>
 8004f54:	4621      	mov	r1, r4
 8004f56:	4640      	mov	r0, r8
 8004f58:	f7ff ff6e 	bl	8004e38 <_malloc_r>
 8004f5c:	4605      	mov	r5, r0
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	d0ed      	beq.n	8004f3e <_realloc_r+0x1e>
 8004f62:	42bc      	cmp	r4, r7
 8004f64:	4622      	mov	r2, r4
 8004f66:	4631      	mov	r1, r6
 8004f68:	bf28      	it	cs
 8004f6a:	463a      	movcs	r2, r7
 8004f6c:	f7ff fed0 	bl	8004d10 <memcpy>
 8004f70:	4631      	mov	r1, r6
 8004f72:	4640      	mov	r0, r8
 8004f74:	f7ff fef4 	bl	8004d60 <_free_r>
 8004f78:	e7e1      	b.n	8004f3e <_realloc_r+0x1e>
 8004f7a:	4635      	mov	r5, r6
 8004f7c:	e7df      	b.n	8004f3e <_realloc_r+0x1e>
	...

08004f80 <_sbrk_r>:
 8004f80:	b538      	push	{r3, r4, r5, lr}
 8004f82:	4d06      	ldr	r5, [pc, #24]	; (8004f9c <_sbrk_r+0x1c>)
 8004f84:	2300      	movs	r3, #0
 8004f86:	4604      	mov	r4, r0
 8004f88:	4608      	mov	r0, r1
 8004f8a:	602b      	str	r3, [r5, #0]
 8004f8c:	f7fb fda0 	bl	8000ad0 <_sbrk>
 8004f90:	1c43      	adds	r3, r0, #1
 8004f92:	d102      	bne.n	8004f9a <_sbrk_r+0x1a>
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	b103      	cbz	r3, 8004f9a <_sbrk_r+0x1a>
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
 8004f9c:	20000198 	.word	0x20000198

08004fa0 <__malloc_lock>:
 8004fa0:	4801      	ldr	r0, [pc, #4]	; (8004fa8 <__malloc_lock+0x8>)
 8004fa2:	f000 b811 	b.w	8004fc8 <__retarget_lock_acquire_recursive>
 8004fa6:	bf00      	nop
 8004fa8:	2000019c 	.word	0x2000019c

08004fac <__malloc_unlock>:
 8004fac:	4801      	ldr	r0, [pc, #4]	; (8004fb4 <__malloc_unlock+0x8>)
 8004fae:	f000 b80c 	b.w	8004fca <__retarget_lock_release_recursive>
 8004fb2:	bf00      	nop
 8004fb4:	2000019c 	.word	0x2000019c

08004fb8 <_malloc_usable_size_r>:
 8004fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fbc:	1f18      	subs	r0, r3, #4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	bfbc      	itt	lt
 8004fc2:	580b      	ldrlt	r3, [r1, r0]
 8004fc4:	18c0      	addlt	r0, r0, r3
 8004fc6:	4770      	bx	lr

08004fc8 <__retarget_lock_acquire_recursive>:
 8004fc8:	4770      	bx	lr

08004fca <__retarget_lock_release_recursive>:
 8004fca:	4770      	bx	lr

08004fcc <_init>:
 8004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fce:	bf00      	nop
 8004fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd2:	bc08      	pop	{r3}
 8004fd4:	469e      	mov	lr, r3
 8004fd6:	4770      	bx	lr

08004fd8 <_fini>:
 8004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fda:	bf00      	nop
 8004fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fde:	bc08      	pop	{r3}
 8004fe0:	469e      	mov	lr, r3
 8004fe2:	4770      	bx	lr
