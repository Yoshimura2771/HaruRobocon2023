
DistanceSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080075a4  080075a4  000175a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007698  08007698  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007698  08007698  00017698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076a0  080076a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076a0  080076a0  000176a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076a4  080076a4  000176a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080076a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000070  08007718  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08007718  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac47  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e23  00000000  00000000  0003ace7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  0003db10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001618  00000000  00000000  0003f240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ce0  00000000  00000000  00040858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cd1  00000000  00000000  00062538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2175  00000000  00000000  0007b209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d37e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eb0  00000000  00000000  0015d3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800758c 	.word	0x0800758c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800758c 	.word	0x0800758c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b974 	b.w	8000d9c <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468e      	mov	lr, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14d      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4694      	mov	ip, r2
 8000ade:	d969      	bls.n	8000bb4 <__udivmoddi4+0xe8>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b152      	cbz	r2, 8000afc <__udivmoddi4+0x30>
 8000ae6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aea:	f1c2 0120 	rsb	r1, r2, #32
 8000aee:	fa20 f101 	lsr.w	r1, r0, r1
 8000af2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af6:	ea41 0e03 	orr.w	lr, r1, r3
 8000afa:	4094      	lsls	r4, r2
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	0c21      	lsrs	r1, r4, #16
 8000b02:	fbbe f6f8 	udiv	r6, lr, r8
 8000b06:	fa1f f78c 	uxth.w	r7, ip
 8000b0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b12:	fb06 f107 	mul.w	r1, r6, r7
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b22:	f080 811f 	bcs.w	8000d64 <__udivmoddi4+0x298>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 811c 	bls.w	8000d64 <__udivmoddi4+0x298>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 f707 	mul.w	r7, r0, r7
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x92>
 8000b48:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b50:	f080 810a 	bcs.w	8000d68 <__udivmoddi4+0x29c>
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	f240 8107 	bls.w	8000d68 <__udivmoddi4+0x29c>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	1be4      	subs	r4, r4, r7
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa4>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0xc2>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	f000 80ef 	beq.w	8000d5e <__udivmoddi4+0x292>
 8000b80:	2600      	movs	r6, #0
 8000b82:	e9c5 0100 	strd	r0, r1, [r5]
 8000b86:	4630      	mov	r0, r6
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	fab3 f683 	clz	r6, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d14a      	bne.n	8000c2c <__udivmoddi4+0x160>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xd4>
 8000b9a:	4282      	cmp	r2, r0
 8000b9c:	f200 80f9 	bhi.w	8000d92 <__udivmoddi4+0x2c6>
 8000ba0:	1a84      	subs	r4, r0, r2
 8000ba2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	469e      	mov	lr, r3
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d0e0      	beq.n	8000b70 <__udivmoddi4+0xa4>
 8000bae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb2:	e7dd      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000bb4:	b902      	cbnz	r2, 8000bb8 <__udivmoddi4+0xec>
 8000bb6:	deff      	udf	#255	; 0xff
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	f040 8092 	bne.w	8000ce6 <__udivmoddi4+0x21a>
 8000bc2:	eba1 010c 	sub.w	r1, r1, ip
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2601      	movs	r6, #1
 8000bd0:	0c20      	lsrs	r0, r4, #16
 8000bd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bde:	fb0e f003 	mul.w	r0, lr, r3
 8000be2:	4288      	cmp	r0, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x12c>
 8000be6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bea:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x12a>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2c0>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	1a09      	subs	r1, r1, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c00:	fb07 1110 	mls	r1, r7, r0, r1
 8000c04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x156>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x154>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2ca>
 8000c20:	4608      	mov	r0, r1
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c2a:	e79c      	b.n	8000b66 <__udivmoddi4+0x9a>
 8000c2c:	f1c6 0720 	rsb	r7, r6, #32
 8000c30:	40b3      	lsls	r3, r6
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c42:	431c      	orrs	r4, r3
 8000c44:	40f9      	lsrs	r1, r7
 8000c46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c52:	0c20      	lsrs	r0, r4, #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fb09 1118 	mls	r1, r9, r8, r1
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	fb08 f00e 	mul.w	r0, r8, lr
 8000c64:	4288      	cmp	r0, r1
 8000c66:	fa02 f206 	lsl.w	r2, r2, r6
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b8>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2bc>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2bc>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4461      	add	r1, ip
 8000c84:	1a09      	subs	r1, r1, r0
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c98:	458e      	cmp	lr, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1e2>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2b4>
 8000ca6:	458e      	cmp	lr, r1
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2b4>
 8000caa:	3802      	subs	r0, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cb6:	eba1 010e 	sub.w	r1, r1, lr
 8000cba:	42a1      	cmp	r1, r4
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46a6      	mov	lr, r4
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x2a4>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x2a0>
 8000cc4:	b15d      	cbz	r5, 8000cde <__udivmoddi4+0x212>
 8000cc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cca:	eb61 010e 	sbc.w	r1, r1, lr
 8000cce:	fa01 f707 	lsl.w	r7, r1, r7
 8000cd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cd6:	40f1      	lsrs	r1, r6
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	e9c5 7100 	strd	r7, r1, [r5]
 8000cde:	2600      	movs	r6, #0
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	f1c2 0320 	rsb	r3, r2, #32
 8000cea:	40d8      	lsrs	r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	4301      	orrs	r1, r0
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d04:	fb07 3610 	mls	r6, r7, r0, r3
 8000d08:	0c0b      	lsrs	r3, r1, #16
 8000d0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d12:	429e      	cmp	r6, r3
 8000d14:	fa04 f402 	lsl.w	r4, r4, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x260>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b8>
 8000d24:	429e      	cmp	r6, r3
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b8>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	b289      	uxth	r1, r1
 8000d30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d34:	fb07 3316 	mls	r3, r7, r6, r3
 8000d38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x28a>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d52:	3e02      	subs	r6, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0x104>
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e705      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e3      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6f8      	b.n	8000b5e <__udivmoddi4+0x92>
 8000d6c:	454b      	cmp	r3, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d7c:	4646      	mov	r6, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x28a>
 8000d80:	4620      	mov	r0, r4
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1e2>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b8>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x12c>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e709      	b.n	8000baa <__udivmoddi4+0xde>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x156>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	230a      	movs	r3, #10
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <_write+0x24>)
 8000db6:	f004 fd39 	bl	800582c <HAL_UART_Transmit>
	return len;
 8000dba:	687b      	ldr	r3, [r7, #4]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000208 	.word	0x20000208

08000dc8 <Filter>:

uint16_t Filter(uint16_t Val, uint16_t _Val, uint16_t gain){
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80fb      	strh	r3, [r7, #6]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	80bb      	strh	r3, [r7, #4]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	807b      	strh	r3, [r7, #2]
	return (Val*gain + _Val*(100-gain)) / 100;
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	887a      	ldrh	r2, [r7, #2]
 8000dde:	fb03 f202 	mul.w	r2, r3, r2
 8000de2:	88bb      	ldrh	r3, [r7, #4]
 8000de4:	8879      	ldrh	r1, [r7, #2]
 8000de6:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
 8000dea:	fb01 f303 	mul.w	r3, r1, r3
 8000dee:	4413      	add	r3, r2
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <Filter+0x44>)
 8000df2:	fb82 1203 	smull	r1, r2, r2, r3
 8000df6:	1152      	asrs	r2, r2, #5
 8000df8:	17db      	asrs	r3, r3, #31
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	b29b      	uxth	r3, r3
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	51eb851f 	.word	0x51eb851f

08000e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e14:	f000 fde1 	bl	80019da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e18:	f000 f80d 	bl	8000e36 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1c:	f000 fa7e 	bl	800131c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e20:	f000 fa52 	bl	80012c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e24:	f000 f9fa 	bl	800121c <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000e28:	f000 f852 	bl	8000ed0 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000e2c:	f000 f91c 	bl	8001068 <MX_FDCAN1_Init>
  MX_TIM6_Init();
 8000e30:	f000 f9ba 	bl	80011a8 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <main+0x24>

08000e36 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b094      	sub	sp, #80	; 0x50
 8000e3a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3c:	f107 0318 	add.w	r3, r7, #24
 8000e40:	2238      	movs	r2, #56	; 0x38
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f005 fb35 	bl	80064b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e58:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e5c:	f003 f90c 	bl	8004078 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6a:	2340      	movs	r3, #64	; 0x40
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e72:	2302      	movs	r3, #2
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8a:	f107 0318 	add.w	r3, r7, #24
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f003 f996 	bl	80041c0 <HAL_RCC_OscConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000e9a:	f000 fb17 	bl	80014cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f003 fc9a 	bl	80047f0 <HAL_RCC_ClockConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ec2:	f000 fb03 	bl	80014cc <Error_Handler>
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3750      	adds	r7, #80	; 0x50
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2220      	movs	r2, #32
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f005 fae9 	bl	80064b4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ee2:	4b57      	ldr	r3, [pc, #348]	; (8001040 <MX_ADC2_Init+0x170>)
 8000ee4:	4a57      	ldr	r2, [pc, #348]	; (8001044 <MX_ADC2_Init+0x174>)
 8000ee6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ee8:	4b55      	ldr	r3, [pc, #340]	; (8001040 <MX_ADC2_Init+0x170>)
 8000eea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef0:	4b53      	ldr	r3, [pc, #332]	; (8001040 <MX_ADC2_Init+0x170>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef6:	4b52      	ldr	r3, [pc, #328]	; (8001040 <MX_ADC2_Init+0x170>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000efc:	4b50      	ldr	r3, [pc, #320]	; (8001040 <MX_ADC2_Init+0x170>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f02:	4b4f      	ldr	r3, [pc, #316]	; (8001040 <MX_ADC2_Init+0x170>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f08:	4b4d      	ldr	r3, [pc, #308]	; (8001040 <MX_ADC2_Init+0x170>)
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = ENABLE;
 8000f0e:	4b4c      	ldr	r3, [pc, #304]	; (8001040 <MX_ADC2_Init+0x170>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000f14:	4b4a      	ldr	r3, [pc, #296]	; (8001040 <MX_ADC2_Init+0x170>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 6;
 8000f1a:	4b49      	ldr	r3, [pc, #292]	; (8001040 <MX_ADC2_Init+0x170>)
 8000f1c:	2206      	movs	r2, #6
 8000f1e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f20:	4b47      	ldr	r3, [pc, #284]	; (8001040 <MX_ADC2_Init+0x170>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f28:	4b45      	ldr	r3, [pc, #276]	; (8001040 <MX_ADC2_Init+0x170>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f2e:	4b44      	ldr	r3, [pc, #272]	; (8001040 <MX_ADC2_Init+0x170>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000f34:	4b42      	ldr	r3, [pc, #264]	; (8001040 <MX_ADC2_Init+0x170>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f3c:	4b40      	ldr	r3, [pc, #256]	; (8001040 <MX_ADC2_Init+0x170>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000f42:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <MX_ADC2_Init+0x170>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f4a:	483d      	ldr	r0, [pc, #244]	; (8001040 <MX_ADC2_Init+0x170>)
 8000f4c:	f000 fffe 	bl	8001f4c <HAL_ADC_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000f56:	f000 fab9 	bl	80014cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f5a:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <MX_ADC2_Init+0x178>)
 8000f5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f5e:	2306      	movs	r3, #6
 8000f60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000f62:	2304      	movs	r3, #4
 8000f64:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f66:	237f      	movs	r3, #127	; 0x7f
 8000f68:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f72:	463b      	mov	r3, r7
 8000f74:	4619      	mov	r1, r3
 8000f76:	4832      	ldr	r0, [pc, #200]	; (8001040 <MX_ADC2_Init+0x170>)
 8000f78:	f001 fa44 	bl	8002404 <HAL_ADC_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000f82:	f000 faa3 	bl	80014cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f86:	4b31      	ldr	r3, [pc, #196]	; (800104c <MX_ADC2_Init+0x17c>)
 8000f88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f8a:	230c      	movs	r3, #12
 8000f8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f8e:	463b      	mov	r3, r7
 8000f90:	4619      	mov	r1, r3
 8000f92:	482b      	ldr	r0, [pc, #172]	; (8001040 <MX_ADC2_Init+0x170>)
 8000f94:	f001 fa36 	bl	8002404 <HAL_ADC_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000f9e:	f000 fa95 	bl	80014cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <MX_ADC2_Init+0x180>)
 8000fa4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000fa6:	2312      	movs	r3, #18
 8000fa8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000faa:	463b      	mov	r3, r7
 8000fac:	4619      	mov	r1, r3
 8000fae:	4824      	ldr	r0, [pc, #144]	; (8001040 <MX_ADC2_Init+0x170>)
 8000fb0:	f001 fa28 	bl	8002404 <HAL_ADC_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 8000fba:	f000 fa87 	bl	80014cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <MX_ADC2_Init+0x184>)
 8000fc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000fc2:	2318      	movs	r3, #24
 8000fc4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4619      	mov	r1, r3
 8000fca:	481d      	ldr	r0, [pc, #116]	; (8001040 <MX_ADC2_Init+0x170>)
 8000fcc:	f001 fa1a 	bl	8002404 <HAL_ADC_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 8000fd6:	f000 fa79 	bl	80014cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <MX_ADC2_Init+0x188>)
 8000fdc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4815      	ldr	r0, [pc, #84]	; (8001040 <MX_ADC2_Init+0x170>)
 8000fea:	f001 fa0b 	bl	8002404 <HAL_ADC_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 8000ff4:	f000 fa6a 	bl	80014cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_ADC2_Init+0x18c>)
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000ffc:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001000:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	4619      	mov	r1, r3
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <MX_ADC2_Init+0x170>)
 8001008:	f001 f9fc 	bl	8002404 <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 8001012:	f000 fa5b 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001016:	217f      	movs	r1, #127	; 0x7f
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <MX_ADC2_Init+0x170>)
 800101a:	f001 ff65 	bl	8002ee8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)ADCBuff, sizeof(ADCBuff) / sizeof(ADCBuff[0]));
 800101e:	2206      	movs	r2, #6
 8001020:	490f      	ldr	r1, [pc, #60]	; (8001060 <MX_ADC2_Init+0x190>)
 8001022:	4807      	ldr	r0, [pc, #28]	; (8001040 <MX_ADC2_Init+0x170>)
 8001024:	f001 f91c 	bl	8002260 <HAL_ADC_Start_DMA>
	hdma_adc2.Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT);
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_ADC2_Init+0x194>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <MX_ADC2_Init+0x194>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 0206 	bic.w	r2, r2, #6
 8001036:	601a      	str	r2, [r3, #0]

  /* USER CODE END ADC2_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000008c 	.word	0x2000008c
 8001044:	50000100 	.word	0x50000100
 8001048:	04300002 	.word	0x04300002
 800104c:	08600004 	.word	0x08600004
 8001050:	47520000 	.word	0x47520000
 8001054:	36902000 	.word	0x36902000
 8001058:	0c900008 	.word	0x0c900008
 800105c:	10c00010 	.word	0x10c00010
 8001060:	20000298 	.word	0x20000298
 8001064:	200000f8 	.word	0x200000f8

08001068 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800106e:	4b4b      	ldr	r3, [pc, #300]	; (800119c <MX_FDCAN1_Init+0x134>)
 8001070:	4a4b      	ldr	r2, [pc, #300]	; (80011a0 <MX_FDCAN1_Init+0x138>)
 8001072:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001074:	4b49      	ldr	r3, [pc, #292]	; (800119c <MX_FDCAN1_Init+0x134>)
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800107a:	4b48      	ldr	r3, [pc, #288]	; (800119c <MX_FDCAN1_Init+0x134>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001080:	4b46      	ldr	r3, [pc, #280]	; (800119c <MX_FDCAN1_Init+0x134>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001086:	4b45      	ldr	r3, [pc, #276]	; (800119c <MX_FDCAN1_Init+0x134>)
 8001088:	2200      	movs	r2, #0
 800108a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800108c:	4b43      	ldr	r3, [pc, #268]	; (800119c <MX_FDCAN1_Init+0x134>)
 800108e:	2200      	movs	r2, #0
 8001090:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001092:	4b42      	ldr	r3, [pc, #264]	; (800119c <MX_FDCAN1_Init+0x134>)
 8001094:	2200      	movs	r2, #0
 8001096:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8001098:	4b40      	ldr	r3, [pc, #256]	; (800119c <MX_FDCAN1_Init+0x134>)
 800109a:	2205      	movs	r2, #5
 800109c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 800109e:	4b3f      	ldr	r3, [pc, #252]	; (800119c <MX_FDCAN1_Init+0x134>)
 80010a0:	2210      	movs	r2, #16
 80010a2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80010a4:	4b3d      	ldr	r3, [pc, #244]	; (800119c <MX_FDCAN1_Init+0x134>)
 80010a6:	220d      	movs	r2, #13
 80010a8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80010aa:	4b3c      	ldr	r3, [pc, #240]	; (800119c <MX_FDCAN1_Init+0x134>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80010b0:	4b3a      	ldr	r3, [pc, #232]	; (800119c <MX_FDCAN1_Init+0x134>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80010b6:	4b39      	ldr	r3, [pc, #228]	; (800119c <MX_FDCAN1_Init+0x134>)
 80010b8:	2204      	movs	r2, #4
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80010bc:	4b37      	ldr	r3, [pc, #220]	; (800119c <MX_FDCAN1_Init+0x134>)
 80010be:	2205      	movs	r2, #5
 80010c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80010c2:	4b36      	ldr	r3, [pc, #216]	; (800119c <MX_FDCAN1_Init+0x134>)
 80010c4:	2204      	movs	r2, #4
 80010c6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80010c8:	4b34      	ldr	r3, [pc, #208]	; (800119c <MX_FDCAN1_Init+0x134>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80010ce:	4b33      	ldr	r3, [pc, #204]	; (800119c <MX_FDCAN1_Init+0x134>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010d4:	4b31      	ldr	r3, [pc, #196]	; (800119c <MX_FDCAN1_Init+0x134>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80010da:	4830      	ldr	r0, [pc, #192]	; (800119c <MX_FDCAN1_Init+0x134>)
 80010dc:	f002 fae8 	bl	80036b0 <HAL_FDCAN_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80010e6:	f000 f9f1 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80010ea:	2300      	movs	r3, #0
 80010ec:	603b      	str	r3, [r7, #0]
  	sFilterConfig.FilterIndex = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80010f2:	2302      	movs	r3, #2
 80010f4:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80010f6:	2301      	movs	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterID1 = CANID_THIS;
 80010fa:	f240 3301 	movw	r3, #769	; 0x301
 80010fe:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterID2 = 0x7FF;
 8001100:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001104:	617b      	str	r3, [r7, #20]

  	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4824      	ldr	r0, [pc, #144]	; (800119c <MX_FDCAN1_Init+0x134>)
 800110c:	f002 fc2a 	bl	8003964 <HAL_FDCAN_ConfigFilter>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_FDCAN1_Init+0xb2>
  		Error_Handler();
 8001116:	f000 f9d9 	bl	80014cc <Error_Handler>
  	}
  	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 800111a:	2300      	movs	r3, #0
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2300      	movs	r3, #0
 8001120:	2202      	movs	r2, #2
 8001122:	2102      	movs	r1, #2
 8001124:	481d      	ldr	r0, [pc, #116]	; (800119c <MX_FDCAN1_Init+0x134>)
 8001126:	f002 fc77 	bl	8003a18 <HAL_FDCAN_ConfigGlobalFilter>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_FDCAN1_Init+0xcc>
  		Error_Handler();
 8001130:	f000 f9cc 	bl	80014cc <Error_Handler>
  	}

  	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001134:	4819      	ldr	r0, [pc, #100]	; (800119c <MX_FDCAN1_Init+0x134>)
 8001136:	f002 fca0 	bl	8003a7a <HAL_FDCAN_Start>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_FDCAN1_Init+0xdc>
  		Error_Handler();
 8001140:	f000 f9c4 	bl	80014cc <Error_Handler>
  	}
  	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001144:	2200      	movs	r2, #0
 8001146:	2101      	movs	r1, #1
 8001148:	4814      	ldr	r0, [pc, #80]	; (800119c <MX_FDCAN1_Init+0x134>)
 800114a:	f002 fcbe 	bl	8003aca <HAL_FDCAN_ActivateNotification>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_FDCAN1_Init+0xf0>
  	  Error_Handler();
 8001154:	f000 f9ba 	bl	80014cc <Error_Handler>
  	}

  	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_FDCAN1_Init+0x13c>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
  	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_FDCAN1_Init+0x13c>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  	TxHeader.DataLength = FDCAN_DLC_BYTES_6;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_FDCAN1_Init+0x13c>)
 8001166:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800116a:	60da      	str	r2, [r3, #12]
  	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <MX_FDCAN1_Init+0x13c>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_FDCAN1_Init+0x13c>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <MX_FDCAN1_Init+0x13c>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_FDCAN1_Init+0x13c>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
  	TxHeader.MessageMarker = 0;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <MX_FDCAN1_Init+0x13c>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
  	TxHeader.Identifier = 0x300;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_FDCAN1_Init+0x13c>)
 800118c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001190:	601a      	str	r2, [r3, #0]


  /* USER CODE END FDCAN1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000158 	.word	0x20000158
 80011a0:	40006400 	.word	0x40006400
 80011a4:	200002a4 	.word	0x200002a4

080011a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <MX_TIM6_Init+0x6c>)
 80011ba:	4a17      	ldr	r2, [pc, #92]	; (8001218 <MX_TIM6_Init+0x70>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 799;
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_TIM6_Init+0x6c>)
 80011c0:	f240 321f 	movw	r2, #799	; 0x31f
 80011c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_TIM6_Init+0x6c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_TIM6_Init+0x6c>)
 80011ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_TIM6_Init+0x6c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011da:	480e      	ldr	r0, [pc, #56]	; (8001214 <MX_TIM6_Init+0x6c>)
 80011dc:	f003 ff14 	bl	8005008 <HAL_TIM_Base_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80011e6:	f000 f971 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4807      	ldr	r0, [pc, #28]	; (8001214 <MX_TIM6_Init+0x6c>)
 80011f8:	f004 fa00 	bl	80055fc <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001202:	f000 f963 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001206:	4803      	ldr	r0, [pc, #12]	; (8001214 <MX_TIM6_Init+0x6c>)
 8001208:	f003 ff56 	bl	80050b8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM6_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200001bc 	.word	0x200001bc
 8001218:	40001000 	.word	0x40001000

0800121c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <MX_USART2_UART_Init+0xa0>)
 8001222:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <MX_USART2_UART_Init+0xa4>)
 8001224:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001226:	4b25      	ldr	r3, [pc, #148]	; (80012bc <MX_USART2_UART_Init+0xa0>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <MX_USART2_UART_Init+0xa0>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <MX_USART2_UART_Init+0xa0>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <MX_USART2_UART_Init+0xa0>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <MX_USART2_UART_Init+0xa0>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <MX_USART2_UART_Init+0xa0>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <MX_USART2_UART_Init+0xa0>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_USART2_UART_Init+0xa0>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MX_USART2_UART_Init+0xa0>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_USART2_UART_Init+0xa0>)
 8001260:	2200      	movs	r2, #0
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001264:	4815      	ldr	r0, [pc, #84]	; (80012bc <MX_USART2_UART_Init+0xa0>)
 8001266:	f004 fa91 	bl	800578c <HAL_UART_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001270:	f000 f92c 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001274:	2100      	movs	r1, #0
 8001276:	4811      	ldr	r0, [pc, #68]	; (80012bc <MX_USART2_UART_Init+0xa0>)
 8001278:	f005 f828 	bl	80062cc <HAL_UARTEx_SetTxFifoThreshold>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001282:	f000 f923 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001286:	2100      	movs	r1, #0
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <MX_USART2_UART_Init+0xa0>)
 800128a:	f005 f85d 	bl	8006348 <HAL_UARTEx_SetRxFifoThreshold>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001294:	f000 f91a 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <MX_USART2_UART_Init+0xa0>)
 800129a:	f004 ffde 	bl	800625a <HAL_UARTEx_DisableFifoMode>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012a4:	f000 f912 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  setbuf(stdout, NULL);
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_USART2_UART_Init+0xa8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f005 f91f 	bl	80064f4 <setbuf>

  /* USER CODE END USART2_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000208 	.word	0x20000208
 80012c0:	40004400 	.word	0x40004400
 80012c4:	2000000c 	.word	0x2000000c

080012c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_DMA_Init+0x50>)
 80012d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d2:	4a11      	ldr	r2, [pc, #68]	; (8001318 <MX_DMA_Init+0x50>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6493      	str	r3, [r2, #72]	; 0x48
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_DMA_Init+0x50>)
 80012dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_DMA_Init+0x50>)
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <MX_DMA_Init+0x50>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6493      	str	r3, [r2, #72]	; 0x48
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_DMA_Init+0x50>)
 80012f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	200c      	movs	r0, #12
 8001304:	f001 ff2d 	bl	8003162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001308:	200c      	movs	r0, #12
 800130a:	f001 ff44 	bl	8003196 <HAL_NVIC_EnableIRQ>

}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_GPIO_Init+0x78>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	4a17      	ldr	r2, [pc, #92]	; (8001394 <MX_GPIO_Init+0x78>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_GPIO_Init+0x78>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_GPIO_Init+0x78>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a11      	ldr	r2, [pc, #68]	; (8001394 <MX_GPIO_Init+0x78>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_GPIO_Init+0x78>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <MX_GPIO_Init+0x7c>)
 800136a:	f002 fe6d 	bl	8004048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800136e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001372:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	4619      	mov	r1, r3
 8001386:	4804      	ldr	r0, [pc, #16]	; (8001398 <MX_GPIO_Init+0x7c>)
 8001388:	f002 fcdc 	bl	8003d44 <HAL_GPIO_Init>

}
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40021000 	.word	0x40021000
 8001398:	48000400 	.word	0x48000400
 800139c:	00000000 	.word	0x00000000

080013a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013a0:	b5b0      	push	{r4, r5, r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af04      	add	r7, sp, #16
 80013a6:	6078      	str	r0, [r7, #4]
	uint8_t Distance[6] = {};
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	2300      	movs	r3, #0
 80013ae:	81bb      	strh	r3, [r7, #12]
	static uint8_t _Distance[6] = {};
	static uint8_t count = 0;
	//static uint8t _ADC
	uint8_t Gain = 30;
 80013b0:	231e      	movs	r3, #30
 80013b2:	73bb      	strb	r3, [r7, #14]

	if(htim == &htim6){
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a40      	ldr	r2, [pc, #256]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d170      	bne.n	800149e <HAL_TIM_PeriodElapsedCallback+0xfe>
		for(uint8_t i=0; i<6; i++){
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e058      	b.n	8001474 <HAL_TIM_PeriodElapsedCallback+0xd4>

				Distance[i] = (float)160000/(ADCBuff[i]*4.17 + 23.28);
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	4a3d      	ldr	r2, [pc, #244]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80013c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f8ca 	bl	8000564 <__aeabi_i2d>
 80013d0:	a335      	add	r3, pc, #212	; (adr r3, 80014a8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80013d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d6:	f7ff f92f 	bl	8000638 <__aeabi_dmul>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	a333      	add	r3, pc, #204	; (adr r3, 80014b0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f7fe ff70 	bl	80002cc <__adddf3>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	f04f 0000 	mov.w	r0, #0
 80013f4:	4932      	ldr	r1, [pc, #200]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80013f6:	f7ff fa49 	bl	800088c <__aeabi_ddiv>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	7bfc      	ldrb	r4, [r7, #15]
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fb2a 	bl	8000a5c <__aeabi_d2uiz>
 8001408:	4603      	mov	r3, r0
 800140a:	b2da      	uxtb	r2, r3
 800140c:	f104 0310 	add.w	r3, r4, #16
 8001410:	443b      	add	r3, r7
 8001412:	f803 2c08 	strb.w	r2, [r3, #-8]
				if(Distance[i] >80)Distance[i] = 80;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	3310      	adds	r3, #16
 800141a:	443b      	add	r3, r7
 800141c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001420:	2b50      	cmp	r3, #80	; 0x50
 8001422:	d905      	bls.n	8001430 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	3310      	adds	r3, #16
 8001428:	443b      	add	r3, r7
 800142a:	2250      	movs	r2, #80	; 0x50
 800142c:	f803 2c08 	strb.w	r2, [r3, #-8]
				Distance[i] = Filter(Distance[i], _Distance[i], Gain);
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	3310      	adds	r3, #16
 8001434:	443b      	add	r3, r7
 8001436:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800143a:	b298      	uxth	r0, r3
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	4a21      	ldr	r2, [pc, #132]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001440:	5cd3      	ldrb	r3, [r2, r3]
 8001442:	b29b      	uxth	r3, r3
 8001444:	7bba      	ldrb	r2, [r7, #14]
 8001446:	b292      	uxth	r2, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fcbd 	bl	8000dc8 <Filter>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	3310      	adds	r3, #16
 8001458:	443b      	add	r3, r7
 800145a:	f803 2c08 	strb.w	r2, [r3, #-8]
				_Distance[i] = Distance[i];
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	3210      	adds	r2, #16
 8001464:	443a      	add	r2, r7
 8001466:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 800146a:	4a16      	ldr	r2, [pc, #88]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800146c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0; i<6; i++){
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	3301      	adds	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	2b05      	cmp	r3, #5
 8001478:	d9a3      	bls.n	80013c2 <HAL_TIM_PeriodElapsedCallback+0x22>
			}

		//count++;

		//if(count==9){
			printf("%8d %8d %8d %8d %8d %8d\r\n", Distance[0],Distance[1],Distance[2],Distance[3],Distance[4],Distance[5]);
 800147a:	7a3b      	ldrb	r3, [r7, #8]
 800147c:	4618      	mov	r0, r3
 800147e:	7a7b      	ldrb	r3, [r7, #9]
 8001480:	461c      	mov	r4, r3
 8001482:	7abb      	ldrb	r3, [r7, #10]
 8001484:	461d      	mov	r5, r3
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	7b3a      	ldrb	r2, [r7, #12]
 800148a:	7b79      	ldrb	r1, [r7, #13]
 800148c:	9102      	str	r1, [sp, #8]
 800148e:	9201      	str	r2, [sp, #4]
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	462b      	mov	r3, r5
 8001494:	4622      	mov	r2, r4
 8001496:	4601      	mov	r1, r0
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800149a:	f005 f813 	bl	80064c4 <iprintf>
				Error_Handler();
			}*/
			//count=0;
		//}
	}
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bdb0      	pop	{r4, r5, r7, pc}
 80014a6:	bf00      	nop
 80014a8:	7ae147ae 	.word	0x7ae147ae
 80014ac:	4010ae14 	.word	0x4010ae14
 80014b0:	147ae148 	.word	0x147ae148
 80014b4:	403747ae 	.word	0x403747ae
 80014b8:	200001bc 	.word	0x200001bc
 80014bc:	20000298 	.word	0x20000298
 80014c0:	41038800 	.word	0x41038800
 80014c4:	200002c8 	.word	0x200002c8
 80014c8:	080075a4 	.word	0x080075a4

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <Error_Handler+0x8>
	...

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_MspInit+0x44>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e2:	4a0e      	ldr	r2, [pc, #56]	; (800151c <HAL_MspInit+0x44>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6613      	str	r3, [r2, #96]	; 0x60
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <HAL_MspInit+0x44>)
 80014ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_MspInit+0x44>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_MspInit+0x44>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6593      	str	r3, [r2, #88]	; 0x58
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_MspInit+0x44>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000

08001520 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b09a      	sub	sp, #104	; 0x68
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	2244      	movs	r2, #68	; 0x44
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f004 ffb7 	bl	80064b4 <memset>
  if(hadc->Instance==ADC2)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a33      	ldr	r2, [pc, #204]	; (8001618 <HAL_ADC_MspInit+0xf8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d15f      	bne.n	8001610 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001554:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001556:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800155a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	4618      	mov	r0, r3
 8001562:	f003 fb61 	bl	8004c28 <HAL_RCCEx_PeriphCLKConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800156c:	f7ff ffae 	bl	80014cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <HAL_ADC_MspInit+0xfc>)
 8001572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001574:	4a29      	ldr	r2, [pc, #164]	; (800161c <HAL_ADC_MspInit+0xfc>)
 8001576:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800157a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <HAL_ADC_MspInit+0xfc>)
 800157e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_ADC_MspInit+0xfc>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158c:	4a23      	ldr	r2, [pc, #140]	; (800161c <HAL_ADC_MspInit+0xfc>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_ADC_MspInit+0xfc>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC2_IN17
    PA5     ------> ADC2_IN13
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80015a0:	23f3      	movs	r3, #243	; 0xf3
 80015a2:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a4:	2303      	movs	r3, #3
 80015a6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015b0:	4619      	mov	r1, r3
 80015b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b6:	f002 fbc5 	bl	8003d44 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_ADC_MspInit+0x100>)
 80015bc:	4a19      	ldr	r2, [pc, #100]	; (8001624 <HAL_ADC_MspInit+0x104>)
 80015be:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_ADC_MspInit+0x100>)
 80015c2:	2224      	movs	r2, #36	; 0x24
 80015c4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_ADC_MspInit+0x100>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <HAL_ADC_MspInit+0x100>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_ADC_MspInit+0x100>)
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_ADC_MspInit+0x100>)
 80015da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015de:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_ADC_MspInit+0x100>)
 80015e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_ADC_MspInit+0x100>)
 80015ea:	2220      	movs	r2, #32
 80015ec:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_ADC_MspInit+0x100>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80015f4:	480a      	ldr	r0, [pc, #40]	; (8001620 <HAL_ADC_MspInit+0x100>)
 80015f6:	f001 fde9 	bl	80031cc <HAL_DMA_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001600:	f7ff ff64 	bl	80014cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_ADC_MspInit+0x100>)
 8001608:	655a      	str	r2, [r3, #84]	; 0x54
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <HAL_ADC_MspInit+0x100>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001610:	bf00      	nop
 8001612:	3768      	adds	r7, #104	; 0x68
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	50000100 	.word	0x50000100
 800161c:	40021000 	.word	0x40021000
 8001620:	200000f8 	.word	0x200000f8
 8001624:	4002001c 	.word	0x4002001c

08001628 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b09a      	sub	sp, #104	; 0x68
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	2244      	movs	r2, #68	; 0x44
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f004 ff33 	bl	80064b4 <memset>
  if(hfdcan->Instance==FDCAN1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a20      	ldr	r2, [pc, #128]	; (80016d4 <HAL_FDCAN_MspInit+0xac>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d139      	bne.n	80016cc <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800165e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001662:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	4618      	mov	r0, r3
 800166a:	f003 fadd 	bl	8004c28 <HAL_RCCEx_PeriphCLKConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001674:	f7ff ff2a 	bl	80014cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_FDCAN_MspInit+0xb0>)
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	4a16      	ldr	r2, [pc, #88]	; (80016d8 <HAL_FDCAN_MspInit+0xb0>)
 800167e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001682:	6593      	str	r3, [r2, #88]	; 0x58
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <HAL_FDCAN_MspInit+0xb0>)
 8001686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_FDCAN_MspInit+0xb0>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <HAL_FDCAN_MspInit+0xb0>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169c:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_FDCAN_MspInit+0xb0>)
 800169e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016ac:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80016ba:	2309      	movs	r3, #9
 80016bc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016c2:	4619      	mov	r1, r3
 80016c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c8:	f002 fb3c 	bl	8003d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80016cc:	bf00      	nop
 80016ce:	3768      	adds	r7, #104	; 0x68
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40006400 	.word	0x40006400
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <HAL_TIM_Base_MspInit+0x44>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d113      	bne.n	8001716 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016ee:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <HAL_TIM_Base_MspInit+0x48>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <HAL_TIM_Base_MspInit+0x48>)
 80016f4:	f043 0310 	orr.w	r3, r3, #16
 80016f8:	6593      	str	r3, [r2, #88]	; 0x58
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_TIM_Base_MspInit+0x48>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2036      	movs	r0, #54	; 0x36
 800170c:	f001 fd29 	bl	8003162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001710:	2036      	movs	r0, #54	; 0x36
 8001712:	f001 fd40 	bl	8003196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40001000 	.word	0x40001000
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b09a      	sub	sp, #104	; 0x68
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	2244      	movs	r2, #68	; 0x44
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f004 feb3 	bl	80064b4 <memset>
  if(huart->Instance==USART2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <HAL_UART_MspInit+0xa8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d136      	bne.n	80017c6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001758:	2302      	movs	r3, #2
 800175a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800175c:	2300      	movs	r3, #0
 800175e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4618      	mov	r0, r3
 8001766:	f003 fa5f 	bl	8004c28 <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001770:	f7ff feac 	bl	80014cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_UART_MspInit+0xac>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <HAL_UART_MspInit+0xac>)
 800177a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177e:	6593      	str	r3, [r2, #88]	; 0x58
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_UART_MspInit+0xac>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_UART_MspInit+0xac>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001790:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <HAL_UART_MspInit+0xac>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_UART_MspInit+0xac>)
 800179a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80017a4:	230c      	movs	r3, #12
 80017a6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017b4:	2307      	movs	r3, #7
 80017b6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c2:	f002 fabf 	bl	8003d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	3768      	adds	r7, #104	; 0x68
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40004400 	.word	0x40004400
 80017d4:	40021000 	.word	0x40021000

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <NMI_Handler+0x4>

080017de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <MemManage_Handler+0x4>

080017ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001824:	f000 f92c 	bl	8001a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <DMA1_Channel2_IRQHandler+0x10>)
 8001832:	f001 fdee 	bl	8003412 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200000f8 	.word	0x200000f8

08001840 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <TIM6_DAC_IRQHandler+0x10>)
 8001846:	f003 fca1 	bl	800518c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200001bc 	.word	0x200001bc

08001854 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e00a      	b.n	800187c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001866:	f3af 8000 	nop.w
 800186a:	4601      	mov	r1, r0
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	60ba      	str	r2, [r7, #8]
 8001872:	b2ca      	uxtb	r2, r1
 8001874:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbf0      	blt.n	8001866 <_read+0x12>
	}

return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_close>:
	}
	return len;
}

int _close(int file)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018b6:	605a      	str	r2, [r3, #4]
	return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_isatty>:

int _isatty(int file)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
	return 1;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
	return 0;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <_sbrk+0x5c>)
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <_sbrk+0x60>)
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <_sbrk+0x64>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <_sbrk+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d207      	bcs.n	8001938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001928:	f004 fd9a 	bl	8006460 <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e009      	b.n	800194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <_sbrk+0x64>)
 8001948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20008000 	.word	0x20008000
 8001958:	00000400 	.word	0x00000400
 800195c:	200002d0 	.word	0x200002d0
 8001960:	200002e8 	.word	0x200002e8

08001964 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <SystemInit+0x20>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <SystemInit+0x20>)
 8001970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800198a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800198c:	480d      	ldr	r0, [pc, #52]	; (80019c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800198e:	490e      	ldr	r1, [pc, #56]	; (80019c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <LoopForever+0xe>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001994:	e002      	b.n	800199c <LoopCopyDataInit>

08001996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199a:	3304      	adds	r3, #4

0800199c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800199c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a0:	d3f9      	bcc.n	8001996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a4:	4c0b      	ldr	r4, [pc, #44]	; (80019d4 <LoopForever+0x16>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a8:	e001      	b.n	80019ae <LoopFillZerobss>

080019aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ac:	3204      	adds	r2, #4

080019ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b0:	d3fb      	bcc.n	80019aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019b2:	f7ff ffd7 	bl	8001964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019b6:	f004 fd59 	bl	800646c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ba:	f7ff fa29 	bl	8000e10 <main>

080019be <LoopForever>:

LoopForever:
    b LoopForever
 80019be:	e7fe      	b.n	80019be <LoopForever>
  ldr   r0, =_estack
 80019c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019cc:	080076a8 	.word	0x080076a8
  ldr r2, =_sbss
 80019d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019d4:	200002e8 	.word	0x200002e8

080019d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <ADC1_2_IRQHandler>

080019da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f001 fbb1 	bl	800314c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ea:	2000      	movs	r0, #0
 80019ec:	f000 f80e 	bl	8001a0c <HAL_InitTick>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	71fb      	strb	r3, [r7, #7]
 80019fa:	e001      	b.n	8001a00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019fc:	f7ff fd6c 	bl	80014d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a00:	79fb      	ldrb	r3, [r7, #7]

}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_InitTick+0x68>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d022      	beq.n	8001a66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_InitTick+0x6c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <HAL_InitTick+0x68>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f001 fbbc 	bl	80031b2 <HAL_SYSTICK_Config>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10f      	bne.n	8001a60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b0f      	cmp	r3, #15
 8001a44:	d809      	bhi.n	8001a5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a46:	2200      	movs	r2, #0
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4e:	f001 fb88 	bl	8003162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <HAL_InitTick+0x70>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	e007      	b.n	8001a6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
 8001a5e:	e004      	b.n	8001a6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e001      	b.n	8001a6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000008 	.word	0x20000008
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000004 	.word	0x20000004

08001a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_IncTick+0x1c>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a03      	ldr	r2, [pc, #12]	; (8001a9c <HAL_IncTick+0x1c>)
 8001a90:	6013      	str	r3, [r2, #0]
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	200002d4 	.word	0x200002d4
 8001aa0:	20000008 	.word	0x20000008

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	200002d4 	.word	0x200002d4

08001abc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	609a      	str	r2, [r3, #8]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3360      	adds	r3, #96	; 0x60
 8001b36:	461a      	mov	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <LL_ADC_SetOffset+0x44>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	4313      	orrs	r3, r2
 8001b54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b5c:	bf00      	nop
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	03fff000 	.word	0x03fff000

08001b6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3360      	adds	r3, #96	; 0x60
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3360      	adds	r3, #96	; 0x60
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bc2:	bf00      	nop
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b087      	sub	sp, #28
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3360      	adds	r3, #96	; 0x60
 8001bde:	461a      	mov	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001bf8:	bf00      	nop
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3360      	adds	r3, #96	; 0x60
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	615a      	str	r2, [r3, #20]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b087      	sub	sp, #28
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3330      	adds	r3, #48	; 0x30
 8001c96:	461a      	mov	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	4413      	add	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	211f      	movs	r1, #31
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	401a      	ands	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	0e9b      	lsrs	r3, r3, #26
 8001cbe:	f003 011f 	and.w	r1, r3, #31
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cd2:	bf00      	nop
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b087      	sub	sp, #28
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3314      	adds	r3, #20
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	0e5b      	lsrs	r3, r3, #25
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	4413      	add	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	0d1b      	lsrs	r3, r3, #20
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	2107      	movs	r1, #7
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	401a      	ands	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	0d1b      	lsrs	r3, r3, #20
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	431a      	orrs	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d28:	bf00      	nop
 8001d2a:	371c      	adds	r7, #28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a0f      	ldr	r2, [pc, #60]	; (8001d80 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d10a      	bne.n	8001d5e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d54:	431a      	orrs	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	407f0000 	.word	0x407f0000

08001d84 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 031f 	and.w	r3, r3, #31
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001db0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6093      	str	r3, [r2, #8]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dd8:	d101      	bne.n	8001dde <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001dfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e28:	d101      	bne.n	8001e2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e50:	f043 0201 	orr.w	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e78:	f043 0202 	orr.w	r2, r3, #2
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <LL_ADC_IsEnabled+0x18>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <LL_ADC_IsEnabled+0x1a>
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d101      	bne.n	8001eca <LL_ADC_IsDisableOngoing+0x18>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <LL_ADC_IsDisableOngoing+0x1a>
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ee8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eec:	f043 0204 	orr.w	r2, r3, #4
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d101      	bne.n	8001f18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d101      	bne.n	8001f3e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e177      	b.n	8002256 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff fad3 	bl	8001520 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff19 	bl	8001dc4 <LL_ADC_IsDeepPowerDownEnabled>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d004      	beq.n	8001fa2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff feff 	bl	8001da0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ff34 	bl	8001e14 <LL_ADC_IsInternalRegulatorEnabled>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d115      	bne.n	8001fde <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ff18 	bl	8001dec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fbc:	4b9c      	ldr	r3, [pc, #624]	; (8002230 <HAL_ADC_Init+0x2e4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	099b      	lsrs	r3, r3, #6
 8001fc2:	4a9c      	ldr	r2, [pc, #624]	; (8002234 <HAL_ADC_Init+0x2e8>)
 8001fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc8:	099b      	lsrs	r3, r3, #6
 8001fca:	3301      	adds	r3, #1
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fd0:	e002      	b.n	8001fd8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f9      	bne.n	8001fd2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff16 	bl	8001e14 <LL_ADC_IsInternalRegulatorEnabled>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10d      	bne.n	800200a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	f043 0210 	orr.w	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff76 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 8002014:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 8110 	bne.w	8002244 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 810c 	bne.w	8002244 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002030:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002034:	f043 0202 	orr.w	r2, r3, #2
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff23 	bl	8001e8c <LL_ADC_IsEnabled>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d111      	bne.n	8002070 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800204c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002050:	f7ff ff1c 	bl	8001e8c <LL_ADC_IsEnabled>
 8002054:	4604      	mov	r4, r0
 8002056:	4878      	ldr	r0, [pc, #480]	; (8002238 <HAL_ADC_Init+0x2ec>)
 8002058:	f7ff ff18 	bl	8001e8c <LL_ADC_IsEnabled>
 800205c:	4603      	mov	r3, r0
 800205e:	4323      	orrs	r3, r4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d105      	bne.n	8002070 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4619      	mov	r1, r3
 800206a:	4874      	ldr	r0, [pc, #464]	; (800223c <HAL_ADC_Init+0x2f0>)
 800206c:	f7ff fd26 	bl	8001abc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7f5b      	ldrb	r3, [r3, #29]
 8002074:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800207a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002080:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002086:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800208e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800209a:	2b01      	cmp	r3, #1
 800209c:	d106      	bne.n	80020ac <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a2:	3b01      	subs	r3, #1
 80020a4:	045b      	lsls	r3, r3, #17
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d009      	beq.n	80020c8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	4b5c      	ldr	r3, [pc, #368]	; (8002240 <HAL_ADC_Init+0x2f4>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	69b9      	ldr	r1, [r7, #24]
 80020d8:	430b      	orrs	r3, r1
 80020da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff02 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 80020fc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ff0f 	bl	8001f26 <LL_ADC_INJ_IsConversionOngoing>
 8002108:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d16d      	bne.n	80021ec <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d16a      	bne.n	80021ec <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800211a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002122:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002132:	f023 0302 	bic.w	r3, r3, #2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	69b9      	ldr	r1, [r7, #24]
 800213c:	430b      	orrs	r3, r1
 800213e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d017      	beq.n	8002178 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691a      	ldr	r2, [r3, #16]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002156:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002160:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002164:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6911      	ldr	r1, [r2, #16]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	430b      	orrs	r3, r1
 8002172:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002176:	e013      	b.n	80021a0 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002186:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002198:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800219c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d118      	bne.n	80021dc <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021b4:	f023 0304 	bic.w	r3, r3, #4
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021c0:	4311      	orrs	r1, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021c6:	4311      	orrs	r1, r2
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021cc:	430a      	orrs	r2, r1
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	611a      	str	r2, [r3, #16]
 80021da:	e007      	b.n	80021ec <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d10c      	bne.n	800220e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f023 010f 	bic.w	r1, r3, #15
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	1e5a      	subs	r2, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
 800220c:	e007      	b.n	800221e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 020f 	bic.w	r2, r2, #15
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002222:	f023 0303 	bic.w	r3, r3, #3
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	65da      	str	r2, [r3, #92]	; 0x5c
 800222e:	e011      	b.n	8002254 <HAL_ADC_Init+0x308>
 8002230:	20000000 	.word	0x20000000
 8002234:	053e2d63 	.word	0x053e2d63
 8002238:	50000100 	.word	0x50000100
 800223c:	50000300 	.word	0x50000300
 8002240:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002248:	f043 0210 	orr.w	r2, r3, #16
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002254:	7ffb      	ldrb	r3, [r7, #31]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd90      	pop	{r4, r7, pc}
 800225e:	bf00      	nop

08002260 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800226c:	4851      	ldr	r0, [pc, #324]	; (80023b4 <HAL_ADC_Start_DMA+0x154>)
 800226e:	f7ff fd89 	bl	8001d84 <LL_ADC_GetMultimode>
 8002272:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fe41 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 808f 	bne.w	80023a4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_ADC_Start_DMA+0x34>
 8002290:	2302      	movs	r3, #2
 8002292:	e08a      	b.n	80023aa <HAL_ADC_Start_DMA+0x14a>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	d002      	beq.n	80022ae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	2b09      	cmp	r3, #9
 80022ac:	d173      	bne.n	8002396 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 fc98 	bl	8002be4 <ADC_Enable>
 80022b4:	4603      	mov	r3, r0
 80022b6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80022b8:	7dfb      	ldrb	r3, [r7, #23]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d166      	bne.n	800238c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a38      	ldr	r2, [pc, #224]	; (80023b8 <HAL_ADC_Start_DMA+0x158>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d002      	beq.n	80022e2 <HAL_ADC_Start_DMA+0x82>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	e001      	b.n	80022e6 <HAL_ADC_Start_DMA+0x86>
 80022e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d002      	beq.n	80022f4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002310:	f023 0206 	bic.w	r2, r3, #6
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	661a      	str	r2, [r3, #96]	; 0x60
 8002318:	e002      	b.n	8002320 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002324:	4a25      	ldr	r2, [pc, #148]	; (80023bc <HAL_ADC_Start_DMA+0x15c>)
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232c:	4a24      	ldr	r2, [pc, #144]	; (80023c0 <HAL_ADC_Start_DMA+0x160>)
 800232e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002334:	4a23      	ldr	r2, [pc, #140]	; (80023c4 <HAL_ADC_Start_DMA+0x164>)
 8002336:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	221c      	movs	r2, #28
 800233e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0210 	orr.w	r2, r2, #16
 8002356:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	3340      	adds	r3, #64	; 0x40
 8002372:	4619      	mov	r1, r3
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f000 ffd0 	bl	800331c <HAL_DMA_Start_IT>
 800237c:	4603      	mov	r3, r0
 800237e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fda7 	bl	8001ed8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800238a:	e00d      	b.n	80023a8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002394:	e008      	b.n	80023a8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80023a2:	e001      	b.n	80023a8 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023a4:	2302      	movs	r3, #2
 80023a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	50000300 	.word	0x50000300
 80023b8:	50000100 	.word	0x50000100
 80023bc:	08002d67 	.word	0x08002d67
 80023c0:	08002e3f 	.word	0x08002e3f
 80023c4:	08002e5b 	.word	0x08002e5b

080023c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b0b6      	sub	sp, #216	; 0xd8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x22>
 8002422:	2302      	movs	r3, #2
 8002424:	e3c8      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x7b4>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fd64 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 83ad 	bne.w	8002b9a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	f7ff fc1a 	bl	8001c86 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fd52 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 800245c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fd5e 	bl	8001f26 <LL_ADC_INJ_IsConversionOngoing>
 800246a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800246e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 81d9 	bne.w	800282a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002478:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800247c:	2b00      	cmp	r3, #0
 800247e:	f040 81d4 	bne.w	800282a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800248a:	d10f      	bne.n	80024ac <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2200      	movs	r2, #0
 8002496:	4619      	mov	r1, r3
 8002498:	f7ff fc21 	bl	8001cde <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fbc8 	bl	8001c3a <LL_ADC_SetSamplingTimeCommonConfig>
 80024aa:	e00e      	b.n	80024ca <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	461a      	mov	r2, r3
 80024ba:	f7ff fc10 	bl	8001cde <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fbb8 	bl	8001c3a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	08db      	lsrs	r3, r3, #3
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d022      	beq.n	8002532 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6919      	ldr	r1, [r3, #16]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024fc:	f7ff fb12 	bl	8001b24 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	6919      	ldr	r1, [r3, #16]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	461a      	mov	r2, r3
 800250e:	f7ff fb5e 	bl	8001bce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	6919      	ldr	r1, [r3, #16]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	7f1b      	ldrb	r3, [r3, #28]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d102      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x124>
 8002522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002526:	e000      	b.n	800252a <HAL_ADC_ConfigChannel+0x126>
 8002528:	2300      	movs	r3, #0
 800252a:	461a      	mov	r2, r3
 800252c:	f7ff fb6a 	bl	8001c04 <LL_ADC_SetOffsetSaturation>
 8002530:	e17b      	b.n	800282a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fb17 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 800253e:	4603      	mov	r3, r0
 8002540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <HAL_ADC_ConfigChannel+0x15a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fb0c 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	0e9b      	lsrs	r3, r3, #26
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	e01e      	b.n	800259c <HAL_ADC_ConfigChannel+0x198>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fb01 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800257c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002580:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002584:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800258c:	2320      	movs	r3, #32
 800258e:	e004      	b.n	800259a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002590:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x1b0>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0e9b      	lsrs	r3, r3, #26
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	e018      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x1e2>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80025c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80025d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e004      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80025dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d106      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2200      	movs	r2, #0
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fad0 	bl	8001b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fab4 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002604:	4603      	mov	r3, r0
 8002606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10a      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x220>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2101      	movs	r1, #1
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff faa9 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 800261a:	4603      	mov	r3, r0
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	f003 021f 	and.w	r2, r3, #31
 8002622:	e01e      	b.n	8002662 <HAL_ADC_ConfigChannel+0x25e>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2101      	movs	r1, #1
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fa9e 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002630:	4603      	mov	r3, r0
 8002632:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002646:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800264a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002652:	2320      	movs	r3, #32
 8002654:	e004      	b.n	8002660 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002656:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266a:	2b00      	cmp	r3, #0
 800266c:	d105      	bne.n	800267a <HAL_ADC_ConfigChannel+0x276>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	0e9b      	lsrs	r3, r3, #26
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	e018      	b.n	80026ac <HAL_ADC_ConfigChannel+0x2a8>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800268e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002692:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002696:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800269e:	2320      	movs	r3, #32
 80026a0:	e004      	b.n	80026ac <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80026a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d106      	bne.n	80026be <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2200      	movs	r2, #0
 80026b6:	2101      	movs	r1, #1
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fa6d 	bl	8001b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2102      	movs	r1, #2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fa51 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x2e6>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2102      	movs	r1, #2
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fa46 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	0e9b      	lsrs	r3, r3, #26
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	e01e      	b.n	8002728 <HAL_ADC_ConfigChannel+0x324>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2102      	movs	r1, #2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fa3b 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002708:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800270c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002710:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002718:	2320      	movs	r3, #32
 800271a:	e004      	b.n	8002726 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800271c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002720:	fab3 f383 	clz	r3, r3
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002730:	2b00      	cmp	r3, #0
 8002732:	d105      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x33c>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	0e9b      	lsrs	r3, r3, #26
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	e016      	b.n	800276e <HAL_ADC_ConfigChannel+0x36a>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002752:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002758:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002760:	2320      	movs	r3, #32
 8002762:	e004      	b.n	800276e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800276e:	429a      	cmp	r2, r3
 8002770:	d106      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2200      	movs	r2, #0
 8002778:	2102      	movs	r1, #2
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fa0c 	bl	8001b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2103      	movs	r1, #3
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff f9f0 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x3a8>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2103      	movs	r1, #3
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff f9e5 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80027a2:	4603      	mov	r3, r0
 80027a4:	0e9b      	lsrs	r3, r3, #26
 80027a6:	f003 021f 	and.w	r2, r3, #31
 80027aa:	e017      	b.n	80027dc <HAL_ADC_ConfigChannel+0x3d8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2103      	movs	r1, #3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff f9da 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80027b8:	4603      	mov	r3, r0
 80027ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80027c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027c6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80027c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80027ce:	2320      	movs	r3, #32
 80027d0:	e003      	b.n	80027da <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80027d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d105      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x3f0>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	0e9b      	lsrs	r3, r3, #26
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	e011      	b.n	8002818 <HAL_ADC_ConfigChannel+0x414>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002804:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800280c:	2320      	movs	r3, #32
 800280e:	e003      	b.n	8002818 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002818:	429a      	cmp	r2, r3
 800281a:	d106      	bne.n	800282a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	2103      	movs	r1, #3
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff f9b7 	bl	8001b98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fb2c 	bl	8001e8c <LL_ADC_IsEnabled>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 8140 	bne.w	8002abc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	461a      	mov	r2, r3
 800284a:	f7ff fa73 	bl	8001d34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	4a8f      	ldr	r2, [pc, #572]	; (8002a90 <HAL_ADC_ConfigChannel+0x68c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	f040 8131 	bne.w	8002abc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10b      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x47e>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	0e9b      	lsrs	r3, r3, #26
 8002870:	3301      	adds	r3, #1
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	2b09      	cmp	r3, #9
 8002878:	bf94      	ite	ls
 800287a:	2301      	movls	r3, #1
 800287c:	2300      	movhi	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	e019      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x4b2>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002890:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002892:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800289a:	2320      	movs	r3, #32
 800289c:	e003      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800289e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028a0:	fab3 f383 	clz	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	3301      	adds	r3, #1
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	2b09      	cmp	r3, #9
 80028ae:	bf94      	ite	ls
 80028b0:	2301      	movls	r3, #1
 80028b2:	2300      	movhi	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d079      	beq.n	80029ae <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d107      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x4d2>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	0e9b      	lsrs	r3, r3, #26
 80028cc:	3301      	adds	r3, #1
 80028ce:	069b      	lsls	r3, r3, #26
 80028d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028d4:	e015      	b.n	8002902 <HAL_ADC_ConfigChannel+0x4fe>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80028e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80028ee:	2320      	movs	r3, #32
 80028f0:	e003      	b.n	80028fa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80028f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	3301      	adds	r3, #1
 80028fc:	069b      	lsls	r3, r3, #26
 80028fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x51e>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	0e9b      	lsrs	r3, r3, #26
 8002914:	3301      	adds	r3, #1
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	2101      	movs	r1, #1
 800291c:	fa01 f303 	lsl.w	r3, r1, r3
 8002920:	e017      	b.n	8002952 <HAL_ADC_ConfigChannel+0x54e>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002932:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800293a:	2320      	movs	r3, #32
 800293c:	e003      	b.n	8002946 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800293e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	3301      	adds	r3, #1
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	2101      	movs	r1, #1
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	ea42 0103 	orr.w	r1, r2, r3
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x574>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	0e9b      	lsrs	r3, r3, #26
 8002968:	3301      	adds	r3, #1
 800296a:	f003 021f 	and.w	r2, r3, #31
 800296e:	4613      	mov	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	051b      	lsls	r3, r3, #20
 8002976:	e018      	b.n	80029aa <HAL_ADC_ConfigChannel+0x5a6>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002988:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800298a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002990:	2320      	movs	r3, #32
 8002992:	e003      	b.n	800299c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	3301      	adds	r3, #1
 800299e:	f003 021f 	and.w	r2, r3, #31
 80029a2:	4613      	mov	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	4413      	add	r3, r2
 80029a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029aa:	430b      	orrs	r3, r1
 80029ac:	e081      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d107      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x5c6>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	0e9b      	lsrs	r3, r3, #26
 80029c0:	3301      	adds	r3, #1
 80029c2:	069b      	lsls	r3, r3, #26
 80029c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029c8:	e015      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x5f2>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029da:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80029e2:	2320      	movs	r3, #32
 80029e4:	e003      	b.n	80029ee <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e8:	fab3 f383 	clz	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	069b      	lsls	r3, r3, #26
 80029f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x612>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	0e9b      	lsrs	r3, r3, #26
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	2101      	movs	r1, #1
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	e017      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x642>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	61fb      	str	r3, [r7, #28]
  return result;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e003      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	ea42 0103 	orr.w	r1, r2, r3
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10d      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x66e>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	0e9b      	lsrs	r3, r3, #26
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f003 021f 	and.w	r2, r3, #31
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	3b1e      	subs	r3, #30
 8002a6a:	051b      	lsls	r3, r3, #20
 8002a6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a70:	e01e      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x6ac>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	613b      	str	r3, [r7, #16]
  return result;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d104      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	e006      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x698>
 8002a8e:	bf00      	nop
 8002a90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f003 021f 	and.w	r2, r3, #31
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3b1e      	subs	r3, #30
 8002aaa:	051b      	lsls	r3, r3, #20
 8002aac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	6892      	ldr	r2, [r2, #8]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7ff f911 	bl	8001cde <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d071      	beq.n	8002bac <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ac8:	483e      	ldr	r0, [pc, #248]	; (8002bc4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002aca:	f7ff f81d 	bl	8001b08 <LL_ADC_GetCommonPathInternalCh>
 8002ace:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a3c      	ldr	r2, [pc, #240]	; (8002bc8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d004      	beq.n	8002ae6 <HAL_ADC_ConfigChannel+0x6e2>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a3a      	ldr	r2, [pc, #232]	; (8002bcc <HAL_ADC_ConfigChannel+0x7c8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d127      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ae6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d121      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002afa:	d157      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002afc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b04:	4619      	mov	r1, r3
 8002b06:	482f      	ldr	r0, [pc, #188]	; (8002bc4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b08:	f7fe ffeb 	bl	8001ae2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b0c:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	099b      	lsrs	r3, r3, #6
 8002b12:	4a30      	ldr	r2, [pc, #192]	; (8002bd4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b26:	e002      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f9      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b34:	e03a      	b.n	8002bac <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d113      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x764>
 8002b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10d      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a22      	ldr	r2, [pc, #136]	; (8002bdc <HAL_ADC_ConfigChannel+0x7d8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d02a      	beq.n	8002bac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4818      	ldr	r0, [pc, #96]	; (8002bc4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b62:	f7fe ffbe 	bl	8001ae2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b66:	e021      	b.n	8002bac <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d11c      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d116      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a16      	ldr	r2, [pc, #88]	; (8002bdc <HAL_ADC_ConfigChannel+0x7d8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d011      	beq.n	8002bac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b90:	4619      	mov	r1, r3
 8002b92:	480c      	ldr	r0, [pc, #48]	; (8002bc4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b94:	f7fe ffa5 	bl	8001ae2 <LL_ADC_SetCommonPathInternalCh>
 8002b98:	e008      	b.n	8002bac <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	f043 0220 	orr.w	r2, r3, #32
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bb4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	37d8      	adds	r7, #216	; 0xd8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	80080000 	.word	0x80080000
 8002bc4:	50000300 	.word	0x50000300
 8002bc8:	c3210000 	.word	0xc3210000
 8002bcc:	90c00010 	.word	0x90c00010
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	053e2d63 	.word	0x053e2d63
 8002bd8:	c7520000 	.word	0xc7520000
 8002bdc:	50000100 	.word	0x50000100
 8002be0:	cb840000 	.word	0xcb840000

08002be4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff f94b 	bl	8001e8c <LL_ADC_IsEnabled>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d14d      	bne.n	8002c98 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	4b28      	ldr	r3, [pc, #160]	; (8002ca4 <ADC_Enable+0xc0>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00d      	beq.n	8002c26 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	f043 0210 	orr.w	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e039      	b.n	8002c9a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff f906 	bl	8001e3c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c30:	f7fe ff38 	bl	8001aa4 <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c36:	e028      	b.n	8002c8a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff f925 	bl	8001e8c <LL_ADC_IsEnabled>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d104      	bne.n	8002c52 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff f8f5 	bl	8001e3c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c52:	f7fe ff27 	bl	8001aa4 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d914      	bls.n	8002c8a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d00d      	beq.n	8002c8a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	f043 0210 	orr.w	r2, r3, #16
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7e:	f043 0201 	orr.w	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e007      	b.n	8002c9a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d1cf      	bne.n	8002c38 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	8000003f 	.word	0x8000003f

08002ca8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff f8fc 	bl	8001eb2 <LL_ADC_IsDisableOngoing>
 8002cba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff f8e3 	bl	8001e8c <LL_ADC_IsEnabled>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d047      	beq.n	8002d5c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d144      	bne.n	8002d5c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 030d 	and.w	r3, r3, #13
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d10c      	bne.n	8002cfa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff f8bd 	bl	8001e64 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2203      	movs	r2, #3
 8002cf0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cf2:	f7fe fed7 	bl	8001aa4 <HAL_GetTick>
 8002cf6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cf8:	e029      	b.n	8002d4e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	f043 0210 	orr.w	r2, r3, #16
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0a:	f043 0201 	orr.w	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e023      	b.n	8002d5e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d16:	f7fe fec5 	bl	8001aa4 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d914      	bls.n	8002d4e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00d      	beq.n	8002d4e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d36:	f043 0210 	orr.w	r2, r3, #16
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d42:	f043 0201 	orr.w	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e007      	b.n	8002d5e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1dc      	bne.n	8002d16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d14b      	bne.n	8002e18 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d021      	beq.n	8002dde <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe ff5e 	bl	8001c60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d032      	beq.n	8002e10 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d12b      	bne.n	8002e10 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d11f      	bne.n	8002e10 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	f043 0201 	orr.w	r2, r3, #1
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ddc:	e018      	b.n	8002e10 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d111      	bne.n	8002e10 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d105      	bne.n	8002e10 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	f043 0201 	orr.w	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f7ff fad9 	bl	80023c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e16:	e00e      	b.n	8002e36 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff fae3 	bl	80023f0 <HAL_ADC_ErrorCallback>
}
 8002e2a:	e004      	b.n	8002e36 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7ff fac5 	bl	80023dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e78:	f043 0204 	orr.w	r2, r3, #4
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f7ff fab5 	bl	80023f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <LL_ADC_StartCalibration>:
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002ea0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_ADC_IsCalibrationOnGoing>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ed4:	d101      	bne.n	8002eda <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_ADCEx_Calibration_Start+0x1c>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e04d      	b.n	8002fa0 <HAL_ADCEx_Calibration_Start+0xb8>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff fecb 	bl	8002ca8 <ADC_Disable>
 8002f12:	4603      	mov	r3, r0
 8002f14:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d136      	bne.n	8002f8a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f24:	f023 0302 	bic.w	r3, r3, #2
 8002f28:	f043 0202 	orr.w	r2, r3, #2
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6839      	ldr	r1, [r7, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff ffa9 	bl	8002e8e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f3c:	e014      	b.n	8002f68 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	3301      	adds	r3, #1
 8002f42:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d90d      	bls.n	8002f68 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	f023 0312 	bic.w	r3, r3, #18
 8002f54:	f043 0210 	orr.w	r2, r3, #16
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e01b      	b.n	8002fa0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ffa7 	bl	8002ec0 <LL_ADC_IsCalibrationOnGoing>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e2      	bne.n	8002f3e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	f023 0303 	bic.w	r3, r3, #3
 8002f80:	f043 0201 	orr.w	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f88:	e005      	b.n	8002f96 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	f043 0210 	orr.w	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	0004de01 	.word	0x0004de01

08002fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fde:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	60d3      	str	r3, [r2, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <__NVIC_GetPriorityGrouping+0x18>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	0a1b      	lsrs	r3, r3, #8
 8002ffe:	f003 0307 	and.w	r3, r3, #7
}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	2b00      	cmp	r3, #0
 8003020:	db0b      	blt.n	800303a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	f003 021f 	and.w	r2, r3, #31
 8003028:	4907      	ldr	r1, [pc, #28]	; (8003048 <__NVIC_EnableIRQ+0x38>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	2001      	movs	r0, #1
 8003032:	fa00 f202 	lsl.w	r2, r0, r2
 8003036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e000e100 	.word	0xe000e100

0800304c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	6039      	str	r1, [r7, #0]
 8003056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305c:	2b00      	cmp	r3, #0
 800305e:	db0a      	blt.n	8003076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	b2da      	uxtb	r2, r3
 8003064:	490c      	ldr	r1, [pc, #48]	; (8003098 <__NVIC_SetPriority+0x4c>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	0112      	lsls	r2, r2, #4
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	440b      	add	r3, r1
 8003070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003074:	e00a      	b.n	800308c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	4908      	ldr	r1, [pc, #32]	; (800309c <__NVIC_SetPriority+0x50>)
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	3b04      	subs	r3, #4
 8003084:	0112      	lsls	r2, r2, #4
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	440b      	add	r3, r1
 800308a:	761a      	strb	r2, [r3, #24]
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000e100 	.word	0xe000e100
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b089      	sub	sp, #36	; 0x24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f1c3 0307 	rsb	r3, r3, #7
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	bf28      	it	cs
 80030be:	2304      	movcs	r3, #4
 80030c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3304      	adds	r3, #4
 80030c6:	2b06      	cmp	r3, #6
 80030c8:	d902      	bls.n	80030d0 <NVIC_EncodePriority+0x30>
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3b03      	subs	r3, #3
 80030ce:	e000      	b.n	80030d2 <NVIC_EncodePriority+0x32>
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	f04f 32ff 	mov.w	r2, #4294967295
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43da      	mvns	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	401a      	ands	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e8:	f04f 31ff 	mov.w	r1, #4294967295
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	fa01 f303 	lsl.w	r3, r1, r3
 80030f2:	43d9      	mvns	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f8:	4313      	orrs	r3, r2
         );
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3724      	adds	r7, #36	; 0x24
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3b01      	subs	r3, #1
 8003114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003118:	d301      	bcc.n	800311e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800311a:	2301      	movs	r3, #1
 800311c:	e00f      	b.n	800313e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800311e:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <SysTick_Config+0x40>)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3b01      	subs	r3, #1
 8003124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003126:	210f      	movs	r1, #15
 8003128:	f04f 30ff 	mov.w	r0, #4294967295
 800312c:	f7ff ff8e 	bl	800304c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003130:	4b05      	ldr	r3, [pc, #20]	; (8003148 <SysTick_Config+0x40>)
 8003132:	2200      	movs	r2, #0
 8003134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003136:	4b04      	ldr	r3, [pc, #16]	; (8003148 <SysTick_Config+0x40>)
 8003138:	2207      	movs	r2, #7
 800313a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	e000e010 	.word	0xe000e010

0800314c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ff29 	bl	8002fac <__NVIC_SetPriorityGrouping>
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b086      	sub	sp, #24
 8003166:	af00      	add	r7, sp, #0
 8003168:	4603      	mov	r3, r0
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
 800316e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003170:	f7ff ff40 	bl	8002ff4 <__NVIC_GetPriorityGrouping>
 8003174:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	6978      	ldr	r0, [r7, #20]
 800317c:	f7ff ff90 	bl	80030a0 <NVIC_EncodePriority>
 8003180:	4602      	mov	r2, r0
 8003182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff5f 	bl	800304c <__NVIC_SetPriority>
}
 800318e:	bf00      	nop
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff33 	bl	8003010 <__NVIC_EnableIRQ>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ffa4 	bl	8003108 <SysTick_Config>
 80031c0:	4603      	mov	r3, r0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e08d      	b.n	80032fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	4b47      	ldr	r3, [pc, #284]	; (8003304 <HAL_DMA_Init+0x138>)
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d80f      	bhi.n	800320a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	4b45      	ldr	r3, [pc, #276]	; (8003308 <HAL_DMA_Init+0x13c>)
 80031f2:	4413      	add	r3, r2
 80031f4:	4a45      	ldr	r2, [pc, #276]	; (800330c <HAL_DMA_Init+0x140>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	091b      	lsrs	r3, r3, #4
 80031fc:	009a      	lsls	r2, r3, #2
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a42      	ldr	r2, [pc, #264]	; (8003310 <HAL_DMA_Init+0x144>)
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
 8003208:	e00e      	b.n	8003228 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	4b40      	ldr	r3, [pc, #256]	; (8003314 <HAL_DMA_Init+0x148>)
 8003212:	4413      	add	r3, r2
 8003214:	4a3d      	ldr	r2, [pc, #244]	; (800330c <HAL_DMA_Init+0x140>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	091b      	lsrs	r3, r3, #4
 800321c:	009a      	lsls	r2, r3, #2
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a3c      	ldr	r2, [pc, #240]	; (8003318 <HAL_DMA_Init+0x14c>)
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800323e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003242:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800324c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003258:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003264:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f9b6 	bl	80035ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003288:	d102      	bne.n	8003290 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d010      	beq.n	80032d0 <HAL_DMA_Init+0x104>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d80c      	bhi.n	80032d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f9d6 	bl	8003668 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	e008      	b.n	80032e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40020407 	.word	0x40020407
 8003308:	bffdfff8 	.word	0xbffdfff8
 800330c:	cccccccd 	.word	0xcccccccd
 8003310:	40020000 	.word	0x40020000
 8003314:	bffdfbf8 	.word	0xbffdfbf8
 8003318:	40020400 	.word	0x40020400

0800331c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_DMA_Start_IT+0x20>
 8003338:	2302      	movs	r3, #2
 800333a:	e066      	b.n	800340a <HAL_DMA_Start_IT+0xee>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d155      	bne.n	80033fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0201 	bic.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f8fb 	bl	8003570 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 020e 	orr.w	r2, r2, #14
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	e00f      	b.n	80033b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0204 	bic.w	r2, r2, #4
 80033a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 020a 	orr.w	r2, r2, #10
 80033b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d007      	beq.n	80033d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e005      	b.n	8003408 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003404:	2302      	movs	r3, #2
 8003406:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003408:	7dfb      	ldrb	r3, [r7, #23]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	2204      	movs	r2, #4
 8003434:	409a      	lsls	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d026      	beq.n	800348c <HAL_DMA_IRQHandler+0x7a>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d021      	beq.n	800348c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d107      	bne.n	8003466 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0204 	bic.w	r2, r2, #4
 8003464:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	f003 021f 	and.w	r2, r3, #31
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	2104      	movs	r1, #4
 8003474:	fa01 f202 	lsl.w	r2, r1, r2
 8003478:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	2b00      	cmp	r3, #0
 8003480:	d071      	beq.n	8003566 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800348a:	e06c      	b.n	8003566 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	2202      	movs	r2, #2
 8003496:	409a      	lsls	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d02e      	beq.n	80034fe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d029      	beq.n	80034fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10b      	bne.n	80034d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 020a 	bic.w	r2, r2, #10
 80034c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	2102      	movs	r1, #2
 80034de:	fa01 f202 	lsl.w	r2, r1, r2
 80034e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d038      	beq.n	8003566 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80034fc:	e033      	b.n	8003566 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	2208      	movs	r2, #8
 8003508:	409a      	lsls	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4013      	ands	r3, r2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d02a      	beq.n	8003568 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d025      	beq.n	8003568 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 020e 	bic.w	r2, r2, #14
 800352a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003530:	f003 021f 	and.w	r2, r3, #31
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	2101      	movs	r1, #1
 800353a:	fa01 f202 	lsl.w	r2, r1, r2
 800353e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355a:	2b00      	cmp	r3, #0
 800355c:	d004      	beq.n	8003568 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003566:	bf00      	nop
 8003568:	bf00      	nop
}
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003586:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358c:	2b00      	cmp	r3, #0
 800358e:	d004      	beq.n	800359a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003598:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f003 021f 	and.w	r2, r3, #31
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2101      	movs	r1, #1
 80035a8:	fa01 f202 	lsl.w	r2, r1, r2
 80035ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d108      	bne.n	80035d0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035ce:	e007      	b.n	80035e0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	60da      	str	r2, [r3, #12]
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	4b16      	ldr	r3, [pc, #88]	; (8003654 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d802      	bhi.n	8003606 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003600:	4b15      	ldr	r3, [pc, #84]	; (8003658 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	e001      	b.n	800360a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003606:	4b15      	ldr	r3, [pc, #84]	; (800365c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003608:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	3b08      	subs	r3, #8
 8003616:	4a12      	ldr	r2, [pc, #72]	; (8003660 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	089b      	lsrs	r3, r3, #2
 8003626:	009a      	lsls	r2, r3, #2
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	461a      	mov	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a0b      	ldr	r2, [pc, #44]	; (8003664 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003636:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2201      	movs	r2, #1
 8003640:	409a      	lsls	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40020407 	.word	0x40020407
 8003658:	40020800 	.word	0x40020800
 800365c:	40020820 	.word	0x40020820
 8003660:	cccccccd 	.word	0xcccccccd
 8003664:	40020880 	.word	0x40020880

08003668 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	461a      	mov	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a08      	ldr	r2, [pc, #32]	; (80036ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800368a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3b01      	subs	r3, #1
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	2201      	movs	r2, #1
 8003696:	409a      	lsls	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	1000823f 	.word	0x1000823f
 80036ac:	40020940 	.word	0x40020940

080036b0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e147      	b.n	8003952 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fd ffa6 	bl	8001628 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0210 	bic.w	r2, r2, #16
 80036ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036ec:	f7fe f9da 	bl	8001aa4 <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80036f2:	e012      	b.n	800371a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80036f4:	f7fe f9d6 	bl	8001aa4 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b0a      	cmp	r3, #10
 8003700:	d90b      	bls.n	800371a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2203      	movs	r2, #3
 8003712:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e11b      	b.n	8003952 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b08      	cmp	r3, #8
 8003726:	d0e5      	beq.n	80036f4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003738:	f7fe f9b4 	bl	8001aa4 <HAL_GetTick>
 800373c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800373e:	e012      	b.n	8003766 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003740:	f7fe f9b0 	bl	8001aa4 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b0a      	cmp	r3, #10
 800374c:	d90b      	bls.n	8003766 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003752:	f043 0201 	orr.w	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2203      	movs	r2, #3
 800375e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e0f5      	b.n	8003952 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0e5      	beq.n	8003740 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0202 	orr.w	r2, r2, #2
 8003782:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a74      	ldr	r2, [pc, #464]	; (800395c <HAL_FDCAN_Init+0x2ac>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d103      	bne.n	8003796 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800378e:	4a74      	ldr	r2, [pc, #464]	; (8003960 <HAL_FDCAN_Init+0x2b0>)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7c1b      	ldrb	r3, [r3, #16]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d108      	bne.n	80037b0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699a      	ldr	r2, [r3, #24]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ac:	619a      	str	r2, [r3, #24]
 80037ae:	e007      	b.n	80037c0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037be:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7c5b      	ldrb	r3, [r3, #17]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d108      	bne.n	80037da <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037d6:	619a      	str	r2, [r3, #24]
 80037d8:	e007      	b.n	80037ea <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699a      	ldr	r2, [r3, #24]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037e8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	7c9b      	ldrb	r3, [r3, #18]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d108      	bne.n	8003804 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003800:	619a      	str	r2, [r3, #24]
 8003802:	e007      	b.n	8003814 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003812:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699a      	ldr	r2, [r3, #24]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003838:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0210 	bic.w	r2, r2, #16
 8003848:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d108      	bne.n	8003864 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699a      	ldr	r2, [r3, #24]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0204 	orr.w	r2, r2, #4
 8003860:	619a      	str	r2, [r3, #24]
 8003862:	e02c      	b.n	80038be <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d028      	beq.n	80038be <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d01c      	beq.n	80038ae <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003882:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0210 	orr.w	r2, r2, #16
 8003892:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b03      	cmp	r3, #3
 800389a:	d110      	bne.n	80038be <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0220 	orr.w	r2, r2, #32
 80038aa:	619a      	str	r2, [r3, #24]
 80038ac:	e007      	b.n	80038be <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0220 	orr.w	r2, r2, #32
 80038bc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038ce:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80038d6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	3b01      	subs	r3, #1
 80038e0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80038e6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038e8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038f2:	d115      	bne.n	8003920 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	3b01      	subs	r3, #1
 8003900:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003902:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	3b01      	subs	r3, #1
 800390a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800390c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	3b01      	subs	r3, #1
 8003916:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800391c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800391e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f9ae 	bl	8003c98 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40006400 	.word	0x40006400
 8003960:	40006500 	.word	0x40006500

08003964 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003974:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d002      	beq.n	8003982 <HAL_FDCAN_ConfigFilter+0x1e>
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d13d      	bne.n	80039fe <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d119      	bne.n	80039be <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003996:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800399e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e01d      	b.n	80039fa <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	075a      	lsls	r2, r3, #29
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	079a      	lsls	r2, r3, #30
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4413      	add	r3, r2
 80039e6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	3304      	adds	r3, #4
 80039f2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e006      	b.n	8003a0c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a02:	f043 0202 	orr.w	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
  }
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d116      	bne.n	8003a60 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a3a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	011a      	lsls	r2, r3, #4
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	431a      	orrs	r2, r3
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	431a      	orrs	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e006      	b.n	8003a6e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a64:	f043 0204 	orr.w	r2, r3, #4
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
  }
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d110      	bne.n	8003ab0 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699a      	ldr	r2, [r3, #24]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0201 	bic.w	r2, r2, #1
 8003aa4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	e006      	b.n	8003abe <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab4:	f043 0204 	orr.w	r2, r3, #4
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
  }
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b087      	sub	sp, #28
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003adc:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003ade:	7dfb      	ldrb	r3, [r7, #23]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d003      	beq.n	8003aec <HAL_FDCAN_ActivateNotification+0x22>
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	f040 80c8 	bne.w	8003c7c <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af2:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d004      	beq.n	8003b08 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d03b      	beq.n	8003b80 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d004      	beq.n	8003b1c <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d031      	beq.n	8003b80 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d004      	beq.n	8003b30 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d027      	beq.n	8003b80 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d004      	beq.n	8003b44 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01d      	beq.n	8003b80 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d004      	beq.n	8003b58 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d013      	beq.n	8003b80 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d004      	beq.n	8003b6c <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d009      	beq.n	8003b80 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00c      	beq.n	8003b90 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d107      	bne.n	8003b90 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d13b      	bne.n	8003c1c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d004      	beq.n	8003bb8 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d131      	bne.n	8003c1c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d127      	bne.n	8003c1c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d004      	beq.n	8003be0 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d11d      	bne.n	8003c1c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d004      	beq.n	8003bf4 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d113      	bne.n	8003c1c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d109      	bne.n	8003c1c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00c      	beq.n	8003c2c <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0202 	orr.w	r2, r2, #2
 8003c2a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d009      	beq.n	8003c68 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e006      	b.n	8003c8a <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c80:	f043 0202 	orr.w	r2, r3, #2
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003ca2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cb2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cba:	041a      	lsls	r2, r3, #16
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	061a      	lsls	r2, r3, #24
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	e005      	b.n	8003d26 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	3304      	adds	r3, #4
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d3f3      	bcc.n	8003d1a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003d32:	bf00      	nop
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	4000a400 	.word	0x4000a400

08003d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d52:	e15a      	b.n	800400a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	2101      	movs	r1, #1
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d60:	4013      	ands	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 814c 	beq.w	8004004 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d005      	beq.n	8003d84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d130      	bne.n	8003de6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	2203      	movs	r2, #3
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dba:	2201      	movs	r2, #1
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f003 0201 	and.w	r2, r3, #1
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d017      	beq.n	8003e22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d123      	bne.n	8003e76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	08da      	lsrs	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3208      	adds	r2, #8
 8003e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	220f      	movs	r2, #15
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	08da      	lsrs	r2, r3, #3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3208      	adds	r2, #8
 8003e70:	6939      	ldr	r1, [r7, #16]
 8003e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	2203      	movs	r2, #3
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 0203 	and.w	r2, r3, #3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80a6 	beq.w	8004004 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb8:	4b5b      	ldr	r3, [pc, #364]	; (8004028 <HAL_GPIO_Init+0x2e4>)
 8003eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebc:	4a5a      	ldr	r2, [pc, #360]	; (8004028 <HAL_GPIO_Init+0x2e4>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6613      	str	r3, [r2, #96]	; 0x60
 8003ec4:	4b58      	ldr	r3, [pc, #352]	; (8004028 <HAL_GPIO_Init+0x2e4>)
 8003ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ed0:	4a56      	ldr	r2, [pc, #344]	; (800402c <HAL_GPIO_Init+0x2e8>)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	089b      	lsrs	r3, r3, #2
 8003ed6:	3302      	adds	r3, #2
 8003ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	220f      	movs	r2, #15
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003efa:	d01f      	beq.n	8003f3c <HAL_GPIO_Init+0x1f8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a4c      	ldr	r2, [pc, #304]	; (8004030 <HAL_GPIO_Init+0x2ec>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d019      	beq.n	8003f38 <HAL_GPIO_Init+0x1f4>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a4b      	ldr	r2, [pc, #300]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d013      	beq.n	8003f34 <HAL_GPIO_Init+0x1f0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a4a      	ldr	r2, [pc, #296]	; (8004038 <HAL_GPIO_Init+0x2f4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00d      	beq.n	8003f30 <HAL_GPIO_Init+0x1ec>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a49      	ldr	r2, [pc, #292]	; (800403c <HAL_GPIO_Init+0x2f8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d007      	beq.n	8003f2c <HAL_GPIO_Init+0x1e8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a48      	ldr	r2, [pc, #288]	; (8004040 <HAL_GPIO_Init+0x2fc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d101      	bne.n	8003f28 <HAL_GPIO_Init+0x1e4>
 8003f24:	2305      	movs	r3, #5
 8003f26:	e00a      	b.n	8003f3e <HAL_GPIO_Init+0x1fa>
 8003f28:	2306      	movs	r3, #6
 8003f2a:	e008      	b.n	8003f3e <HAL_GPIO_Init+0x1fa>
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	e006      	b.n	8003f3e <HAL_GPIO_Init+0x1fa>
 8003f30:	2303      	movs	r3, #3
 8003f32:	e004      	b.n	8003f3e <HAL_GPIO_Init+0x1fa>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e002      	b.n	8003f3e <HAL_GPIO_Init+0x1fa>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <HAL_GPIO_Init+0x1fa>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	f002 0203 	and.w	r2, r2, #3
 8003f44:	0092      	lsls	r2, r2, #2
 8003f46:	4093      	lsls	r3, r2
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f4e:	4937      	ldr	r1, [pc, #220]	; (800402c <HAL_GPIO_Init+0x2e8>)
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	3302      	adds	r3, #2
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f5c:	4b39      	ldr	r3, [pc, #228]	; (8004044 <HAL_GPIO_Init+0x300>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f80:	4a30      	ldr	r2, [pc, #192]	; (8004044 <HAL_GPIO_Init+0x300>)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f86:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <HAL_GPIO_Init+0x300>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4013      	ands	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003faa:	4a26      	ldr	r2, [pc, #152]	; (8004044 <HAL_GPIO_Init+0x300>)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003fb0:	4b24      	ldr	r3, [pc, #144]	; (8004044 <HAL_GPIO_Init+0x300>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fd4:	4a1b      	ldr	r2, [pc, #108]	; (8004044 <HAL_GPIO_Init+0x300>)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fda:	4b1a      	ldr	r3, [pc, #104]	; (8004044 <HAL_GPIO_Init+0x300>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ffe:	4a11      	ldr	r2, [pc, #68]	; (8004044 <HAL_GPIO_Init+0x300>)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3301      	adds	r3, #1
 8004008:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	f47f ae9d 	bne.w	8003d54 <HAL_GPIO_Init+0x10>
  }
}
 800401a:	bf00      	nop
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40021000 	.word	0x40021000
 800402c:	40010000 	.word	0x40010000
 8004030:	48000400 	.word	0x48000400
 8004034:	48000800 	.word	0x48000800
 8004038:	48000c00 	.word	0x48000c00
 800403c:	48001000 	.word	0x48001000
 8004040:	48001400 	.word	0x48001400
 8004044:	40010400 	.word	0x40010400

08004048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]
 8004054:	4613      	mov	r3, r2
 8004056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004058:	787b      	ldrb	r3, [r7, #1]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800405e:	887a      	ldrh	r2, [r7, #2]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004064:	e002      	b.n	800406c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004066:	887a      	ldrh	r2, [r7, #2]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d141      	bne.n	800410a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004086:	4b4b      	ldr	r3, [pc, #300]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800408e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004092:	d131      	bne.n	80040f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004094:	4b47      	ldr	r3, [pc, #284]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800409a:	4a46      	ldr	r2, [pc, #280]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800409c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040a4:	4b43      	ldr	r3, [pc, #268]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040ac:	4a41      	ldr	r2, [pc, #260]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040b4:	4b40      	ldr	r3, [pc, #256]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2232      	movs	r2, #50	; 0x32
 80040ba:	fb02 f303 	mul.w	r3, r2, r3
 80040be:	4a3f      	ldr	r2, [pc, #252]	; (80041bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040c0:	fba2 2303 	umull	r2, r3, r2, r3
 80040c4:	0c9b      	lsrs	r3, r3, #18
 80040c6:	3301      	adds	r3, #1
 80040c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ca:	e002      	b.n	80040d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040d2:	4b38      	ldr	r3, [pc, #224]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040de:	d102      	bne.n	80040e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f2      	bne.n	80040cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040e6:	4b33      	ldr	r3, [pc, #204]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f2:	d158      	bne.n	80041a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e057      	b.n	80041a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040f8:	4b2e      	ldr	r3, [pc, #184]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040fe:	4a2d      	ldr	r2, [pc, #180]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004104:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004108:	e04d      	b.n	80041a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004110:	d141      	bne.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004112:	4b28      	ldr	r3, [pc, #160]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800411a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411e:	d131      	bne.n	8004184 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004120:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004126:	4a23      	ldr	r2, [pc, #140]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004130:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004138:	4a1e      	ldr	r2, [pc, #120]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800413e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004140:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2232      	movs	r2, #50	; 0x32
 8004146:	fb02 f303 	mul.w	r3, r2, r3
 800414a:	4a1c      	ldr	r2, [pc, #112]	; (80041bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	0c9b      	lsrs	r3, r3, #18
 8004152:	3301      	adds	r3, #1
 8004154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004156:	e002      	b.n	800415e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3b01      	subs	r3, #1
 800415c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800415e:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416a:	d102      	bne.n	8004172 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f2      	bne.n	8004158 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004172:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417e:	d112      	bne.n	80041a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e011      	b.n	80041a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800418a:	4a0a      	ldr	r2, [pc, #40]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004190:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004194:	e007      	b.n	80041a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004196:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800419e:	4a05      	ldr	r2, [pc, #20]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	40007000 	.word	0x40007000
 80041b8:	20000000 	.word	0x20000000
 80041bc:	431bde83 	.word	0x431bde83

080041c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e306      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d075      	beq.n	80042ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041de:	4b97      	ldr	r3, [pc, #604]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041e8:	4b94      	ldr	r3, [pc, #592]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0303 	and.w	r3, r3, #3
 80041f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b0c      	cmp	r3, #12
 80041f6:	d102      	bne.n	80041fe <HAL_RCC_OscConfig+0x3e>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d002      	beq.n	8004204 <HAL_RCC_OscConfig+0x44>
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d10b      	bne.n	800421c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004204:	4b8d      	ldr	r3, [pc, #564]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d05b      	beq.n	80042c8 <HAL_RCC_OscConfig+0x108>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d157      	bne.n	80042c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e2e1      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004224:	d106      	bne.n	8004234 <HAL_RCC_OscConfig+0x74>
 8004226:	4b85      	ldr	r3, [pc, #532]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a84      	ldr	r2, [pc, #528]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e01d      	b.n	8004270 <HAL_RCC_OscConfig+0xb0>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0x98>
 800423e:	4b7f      	ldr	r3, [pc, #508]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a7e      	ldr	r2, [pc, #504]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b7c      	ldr	r3, [pc, #496]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a7b      	ldr	r2, [pc, #492]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0xb0>
 8004258:	4b78      	ldr	r3, [pc, #480]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a77      	ldr	r2, [pc, #476]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 800425e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b75      	ldr	r3, [pc, #468]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a74      	ldr	r2, [pc, #464]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 800426a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7fd fc14 	bl	8001aa4 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004280:	f7fd fc10 	bl	8001aa4 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	; 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e2a6      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004292:	4b6a      	ldr	r3, [pc, #424]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0xc0>
 800429e:	e014      	b.n	80042ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fd fc00 	bl	8001aa4 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fd fbfc 	bl	8001aa4 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e292      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ba:	4b60      	ldr	r3, [pc, #384]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0xe8>
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d075      	beq.n	80043c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d6:	4b59      	ldr	r3, [pc, #356]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e0:	4b56      	ldr	r3, [pc, #344]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	d102      	bne.n	80042f6 <HAL_RCC_OscConfig+0x136>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d002      	beq.n	80042fc <HAL_RCC_OscConfig+0x13c>
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d11f      	bne.n	800433c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042fc:	4b4f      	ldr	r3, [pc, #316]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_RCC_OscConfig+0x154>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e265      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004314:	4b49      	ldr	r3, [pc, #292]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	061b      	lsls	r3, r3, #24
 8004322:	4946      	ldr	r1, [pc, #280]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004324:	4313      	orrs	r3, r2
 8004326:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004328:	4b45      	ldr	r3, [pc, #276]	; (8004440 <HAL_RCC_OscConfig+0x280>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f7fd fb6d 	bl	8001a0c <HAL_InitTick>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d043      	beq.n	80043c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e251      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d023      	beq.n	800438c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004344:	4b3d      	ldr	r3, [pc, #244]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a3c      	ldr	r2, [pc, #240]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 800434a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fd fba8 	bl	8001aa4 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004358:	f7fd fba4 	bl	8001aa4 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e23a      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800436a:	4b34      	ldr	r3, [pc, #208]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004376:	4b31      	ldr	r3, [pc, #196]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	061b      	lsls	r3, r3, #24
 8004384:	492d      	ldr	r1, [pc, #180]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004386:	4313      	orrs	r3, r2
 8004388:	604b      	str	r3, [r1, #4]
 800438a:	e01a      	b.n	80043c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438c:	4b2b      	ldr	r3, [pc, #172]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a2a      	ldr	r2, [pc, #168]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fd fb84 	bl	8001aa4 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a0:	f7fd fb80 	bl	8001aa4 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e216      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043b2:	4b22      	ldr	r3, [pc, #136]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x1e0>
 80043be:	e000      	b.n	80043c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d041      	beq.n	8004452 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d01c      	beq.n	8004410 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d6:	4b19      	ldr	r3, [pc, #100]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 80043d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043dc:	4a17      	ldr	r2, [pc, #92]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e6:	f7fd fb5d 	bl	8001aa4 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ee:	f7fd fb59 	bl	8001aa4 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e1ef      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004400:	4b0e      	ldr	r3, [pc, #56]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0ef      	beq.n	80043ee <HAL_RCC_OscConfig+0x22e>
 800440e:	e020      	b.n	8004452 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004416:	4a09      	ldr	r2, [pc, #36]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7fd fb40 	bl	8001aa4 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004426:	e00d      	b.n	8004444 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004428:	f7fd fb3c 	bl	8001aa4 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d906      	bls.n	8004444 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e1d2      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
 800443a:	bf00      	nop
 800443c:	40021000 	.word	0x40021000
 8004440:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004444:	4b8c      	ldr	r3, [pc, #560]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1ea      	bne.n	8004428 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80a6 	beq.w	80045ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004460:	2300      	movs	r3, #0
 8004462:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004464:	4b84      	ldr	r3, [pc, #528]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_RCC_OscConfig+0x2b4>
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <HAL_RCC_OscConfig+0x2b6>
 8004474:	2300      	movs	r3, #0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447a:	4b7f      	ldr	r3, [pc, #508]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800447c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447e:	4a7e      	ldr	r2, [pc, #504]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004484:	6593      	str	r3, [r2, #88]	; 0x58
 8004486:	4b7c      	ldr	r3, [pc, #496]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004492:	2301      	movs	r3, #1
 8004494:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004496:	4b79      	ldr	r3, [pc, #484]	; (800467c <HAL_RCC_OscConfig+0x4bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d118      	bne.n	80044d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044a2:	4b76      	ldr	r3, [pc, #472]	; (800467c <HAL_RCC_OscConfig+0x4bc>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a75      	ldr	r2, [pc, #468]	; (800467c <HAL_RCC_OscConfig+0x4bc>)
 80044a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ae:	f7fd faf9 	bl	8001aa4 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b6:	f7fd faf5 	bl	8001aa4 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e18b      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c8:	4b6c      	ldr	r3, [pc, #432]	; (800467c <HAL_RCC_OscConfig+0x4bc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d108      	bne.n	80044ee <HAL_RCC_OscConfig+0x32e>
 80044dc:	4b66      	ldr	r3, [pc, #408]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	4a65      	ldr	r2, [pc, #404]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ec:	e024      	b.n	8004538 <HAL_RCC_OscConfig+0x378>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b05      	cmp	r3, #5
 80044f4:	d110      	bne.n	8004518 <HAL_RCC_OscConfig+0x358>
 80044f6:	4b60      	ldr	r3, [pc, #384]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80044f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fc:	4a5e      	ldr	r2, [pc, #376]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80044fe:	f043 0304 	orr.w	r3, r3, #4
 8004502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004506:	4b5c      	ldr	r3, [pc, #368]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450c:	4a5a      	ldr	r2, [pc, #360]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004516:	e00f      	b.n	8004538 <HAL_RCC_OscConfig+0x378>
 8004518:	4b57      	ldr	r3, [pc, #348]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	4a56      	ldr	r2, [pc, #344]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004520:	f023 0301 	bic.w	r3, r3, #1
 8004524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004528:	4b53      	ldr	r3, [pc, #332]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452e:	4a52      	ldr	r2, [pc, #328]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004530:	f023 0304 	bic.w	r3, r3, #4
 8004534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d016      	beq.n	800456e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7fd fab0 	bl	8001aa4 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004546:	e00a      	b.n	800455e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f7fd faac 	bl	8001aa4 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	; 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e140      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800455e:	4b46      	ldr	r3, [pc, #280]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0ed      	beq.n	8004548 <HAL_RCC_OscConfig+0x388>
 800456c:	e015      	b.n	800459a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456e:	f7fd fa99 	bl	8001aa4 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004574:	e00a      	b.n	800458c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004576:	f7fd fa95 	bl	8001aa4 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	f241 3288 	movw	r2, #5000	; 0x1388
 8004584:	4293      	cmp	r3, r2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e129      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800458c:	4b3a      	ldr	r3, [pc, #232]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1ed      	bne.n	8004576 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800459a:	7ffb      	ldrb	r3, [r7, #31]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d105      	bne.n	80045ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a0:	4b35      	ldr	r3, [pc, #212]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	4a34      	ldr	r2, [pc, #208]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d03c      	beq.n	8004632 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01c      	beq.n	80045fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045c0:	4b2d      	ldr	r3, [pc, #180]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045c6:	4a2c      	ldr	r2, [pc, #176]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d0:	f7fd fa68 	bl	8001aa4 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045d8:	f7fd fa64 	bl	8001aa4 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e0fa      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045ea:	4b23      	ldr	r3, [pc, #140]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0ef      	beq.n	80045d8 <HAL_RCC_OscConfig+0x418>
 80045f8:	e01b      	b.n	8004632 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045fa:	4b1f      	ldr	r3, [pc, #124]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004600:	4a1d      	ldr	r2, [pc, #116]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004602:	f023 0301 	bic.w	r3, r3, #1
 8004606:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fd fa4b 	bl	8001aa4 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004612:	f7fd fa47 	bl	8001aa4 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e0dd      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004624:	4b14      	ldr	r3, [pc, #80]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004626:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1ef      	bne.n	8004612 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80d1 	beq.w	80047de <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800463c:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b0c      	cmp	r3, #12
 8004646:	f000 808b 	beq.w	8004760 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d15e      	bne.n	8004710 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004652:	4b09      	ldr	r3, [pc, #36]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a08      	ldr	r2, [pc, #32]	; (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004658:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800465c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465e:	f7fd fa21 	bl	8001aa4 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004664:	e00c      	b.n	8004680 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004666:	f7fd fa1d 	bl	8001aa4 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d905      	bls.n	8004680 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e0b3      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
 8004678:	40021000 	.word	0x40021000
 800467c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004680:	4b59      	ldr	r3, [pc, #356]	; (80047e8 <HAL_RCC_OscConfig+0x628>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1ec      	bne.n	8004666 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800468c:	4b56      	ldr	r3, [pc, #344]	; (80047e8 <HAL_RCC_OscConfig+0x628>)
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	4b56      	ldr	r3, [pc, #344]	; (80047ec <HAL_RCC_OscConfig+0x62c>)
 8004692:	4013      	ands	r3, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6a11      	ldr	r1, [r2, #32]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800469c:	3a01      	subs	r2, #1
 800469e:	0112      	lsls	r2, r2, #4
 80046a0:	4311      	orrs	r1, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80046a6:	0212      	lsls	r2, r2, #8
 80046a8:	4311      	orrs	r1, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046ae:	0852      	lsrs	r2, r2, #1
 80046b0:	3a01      	subs	r2, #1
 80046b2:	0552      	lsls	r2, r2, #21
 80046b4:	4311      	orrs	r1, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046ba:	0852      	lsrs	r2, r2, #1
 80046bc:	3a01      	subs	r2, #1
 80046be:	0652      	lsls	r2, r2, #25
 80046c0:	4311      	orrs	r1, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046c6:	06d2      	lsls	r2, r2, #27
 80046c8:	430a      	orrs	r2, r1
 80046ca:	4947      	ldr	r1, [pc, #284]	; (80047e8 <HAL_RCC_OscConfig+0x628>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d0:	4b45      	ldr	r3, [pc, #276]	; (80047e8 <HAL_RCC_OscConfig+0x628>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a44      	ldr	r2, [pc, #272]	; (80047e8 <HAL_RCC_OscConfig+0x628>)
 80046d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046dc:	4b42      	ldr	r3, [pc, #264]	; (80047e8 <HAL_RCC_OscConfig+0x628>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4a41      	ldr	r2, [pc, #260]	; (80047e8 <HAL_RCC_OscConfig+0x628>)
 80046e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fd f9dc 	bl	8001aa4 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f0:	f7fd f9d8 	bl	8001aa4 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e06e      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004702:	4b39      	ldr	r3, [pc, #228]	; (80047e8 <HAL_RCC_OscConfig+0x628>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x530>
 800470e:	e066      	b.n	80047de <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004710:	4b35      	ldr	r3, [pc, #212]	; (80047e8 <HAL_RCC_OscConfig+0x628>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a34      	ldr	r2, [pc, #208]	; (80047e8 <HAL_RCC_OscConfig+0x628>)
 8004716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800471a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800471c:	4b32      	ldr	r3, [pc, #200]	; (80047e8 <HAL_RCC_OscConfig+0x628>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4a31      	ldr	r2, [pc, #196]	; (80047e8 <HAL_RCC_OscConfig+0x628>)
 8004722:	f023 0303 	bic.w	r3, r3, #3
 8004726:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004728:	4b2f      	ldr	r3, [pc, #188]	; (80047e8 <HAL_RCC_OscConfig+0x628>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4a2e      	ldr	r2, [pc, #184]	; (80047e8 <HAL_RCC_OscConfig+0x628>)
 800472e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004736:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004738:	f7fd f9b4 	bl	8001aa4 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004740:	f7fd f9b0 	bl	8001aa4 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e046      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004752:	4b25      	ldr	r3, [pc, #148]	; (80047e8 <HAL_RCC_OscConfig+0x628>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x580>
 800475e:	e03e      	b.n	80047de <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e039      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800476c:	4b1e      	ldr	r3, [pc, #120]	; (80047e8 <HAL_RCC_OscConfig+0x628>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f003 0203 	and.w	r2, r3, #3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	429a      	cmp	r2, r3
 800477e:	d12c      	bne.n	80047da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	3b01      	subs	r3, #1
 800478c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d123      	bne.n	80047da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800479e:	429a      	cmp	r2, r3
 80047a0:	d11b      	bne.n	80047da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d113      	bne.n	80047da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	3b01      	subs	r3, #1
 80047c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d109      	bne.n	80047da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d0:	085b      	lsrs	r3, r3, #1
 80047d2:	3b01      	subs	r3, #1
 80047d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d001      	beq.n	80047de <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40021000 	.word	0x40021000
 80047ec:	019f800c 	.word	0x019f800c

080047f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e11e      	b.n	8004a46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004808:	4b91      	ldr	r3, [pc, #580]	; (8004a50 <HAL_RCC_ClockConfig+0x260>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d910      	bls.n	8004838 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004816:	4b8e      	ldr	r3, [pc, #568]	; (8004a50 <HAL_RCC_ClockConfig+0x260>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f023 020f 	bic.w	r2, r3, #15
 800481e:	498c      	ldr	r1, [pc, #560]	; (8004a50 <HAL_RCC_ClockConfig+0x260>)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	4313      	orrs	r3, r2
 8004824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004826:	4b8a      	ldr	r3, [pc, #552]	; (8004a50 <HAL_RCC_ClockConfig+0x260>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e106      	b.n	8004a46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d073      	beq.n	800492c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b03      	cmp	r3, #3
 800484a:	d129      	bne.n	80048a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800484c:	4b81      	ldr	r3, [pc, #516]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0f4      	b.n	8004a46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800485c:	f000 f99e 	bl	8004b9c <RCC_GetSysClockFreqFromPLLSource>
 8004860:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4a7c      	ldr	r2, [pc, #496]	; (8004a58 <HAL_RCC_ClockConfig+0x268>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d93f      	bls.n	80048ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800486a:	4b7a      	ldr	r3, [pc, #488]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800487e:	2b00      	cmp	r3, #0
 8004880:	d033      	beq.n	80048ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004886:	2b00      	cmp	r3, #0
 8004888:	d12f      	bne.n	80048ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800488a:	4b72      	ldr	r3, [pc, #456]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004892:	4a70      	ldr	r2, [pc, #448]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 8004894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004898:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	e024      	b.n	80048ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d107      	bne.n	80048b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048a8:	4b6a      	ldr	r3, [pc, #424]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d109      	bne.n	80048c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0c6      	b.n	8004a46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048b8:	4b66      	ldr	r3, [pc, #408]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0be      	b.n	8004a46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048c8:	f000 f8ce 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 80048cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4a61      	ldr	r2, [pc, #388]	; (8004a58 <HAL_RCC_ClockConfig+0x268>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d909      	bls.n	80048ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048d6:	4b5f      	ldr	r3, [pc, #380]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048de:	4a5d      	ldr	r2, [pc, #372]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 80048e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048e6:	2380      	movs	r3, #128	; 0x80
 80048e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048ea:	4b5a      	ldr	r3, [pc, #360]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f023 0203 	bic.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	4957      	ldr	r1, [pc, #348]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048fc:	f7fd f8d2 	bl	8001aa4 <HAL_GetTick>
 8004900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004902:	e00a      	b.n	800491a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004904:	f7fd f8ce 	bl	8001aa4 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e095      	b.n	8004a46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	4b4e      	ldr	r3, [pc, #312]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 020c 	and.w	r2, r3, #12
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	429a      	cmp	r2, r3
 800492a:	d1eb      	bne.n	8004904 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d023      	beq.n	8004980 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004944:	4b43      	ldr	r3, [pc, #268]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4a42      	ldr	r2, [pc, #264]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 800494a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800494e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d007      	beq.n	800496c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800495c:	4b3d      	ldr	r3, [pc, #244]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004964:	4a3b      	ldr	r2, [pc, #236]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 8004966:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800496a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800496c:	4b39      	ldr	r3, [pc, #228]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	4936      	ldr	r1, [pc, #216]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
 800497e:	e008      	b.n	8004992 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2b80      	cmp	r3, #128	; 0x80
 8004984:	d105      	bne.n	8004992 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004986:	4b33      	ldr	r3, [pc, #204]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	4a32      	ldr	r2, [pc, #200]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 800498c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004990:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004992:	4b2f      	ldr	r3, [pc, #188]	; (8004a50 <HAL_RCC_ClockConfig+0x260>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d21d      	bcs.n	80049dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a0:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <HAL_RCC_ClockConfig+0x260>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f023 020f 	bic.w	r2, r3, #15
 80049a8:	4929      	ldr	r1, [pc, #164]	; (8004a50 <HAL_RCC_ClockConfig+0x260>)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049b0:	f7fd f878 	bl	8001aa4 <HAL_GetTick>
 80049b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b6:	e00a      	b.n	80049ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b8:	f7fd f874 	bl	8001aa4 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e03b      	b.n	8004a46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <HAL_RCC_ClockConfig+0x260>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1ed      	bne.n	80049b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e8:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4917      	ldr	r1, [pc, #92]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a06:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	490f      	ldr	r1, [pc, #60]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a1a:	f000 f825 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <HAL_RCC_ClockConfig+0x264>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	490c      	ldr	r1, [pc, #48]	; (8004a5c <HAL_RCC_ClockConfig+0x26c>)
 8004a2c:	5ccb      	ldrb	r3, [r1, r3]
 8004a2e:	f003 031f 	and.w	r3, r3, #31
 8004a32:	fa22 f303 	lsr.w	r3, r2, r3
 8004a36:	4a0a      	ldr	r2, [pc, #40]	; (8004a60 <HAL_RCC_ClockConfig+0x270>)
 8004a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <HAL_RCC_ClockConfig+0x274>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fc ffe4 	bl	8001a0c <HAL_InitTick>
 8004a44:	4603      	mov	r3, r0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40022000 	.word	0x40022000
 8004a54:	40021000 	.word	0x40021000
 8004a58:	04c4b400 	.word	0x04c4b400
 8004a5c:	080075c0 	.word	0x080075c0
 8004a60:	20000000 	.word	0x20000000
 8004a64:	20000004 	.word	0x20000004

08004a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a6e:	4b2c      	ldr	r3, [pc, #176]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d102      	bne.n	8004a80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a7a:	4b2a      	ldr	r3, [pc, #168]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	e047      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a80:	4b27      	ldr	r3, [pc, #156]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d102      	bne.n	8004a92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a8c:	4b26      	ldr	r3, [pc, #152]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	e03e      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a92:	4b23      	ldr	r3, [pc, #140]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	2b0c      	cmp	r3, #12
 8004a9c:	d136      	bne.n	8004b0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a9e:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004aa8:	4b1d      	ldr	r3, [pc, #116]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d10c      	bne.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004abc:	4a1a      	ldr	r2, [pc, #104]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	4a16      	ldr	r2, [pc, #88]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ac6:	68d2      	ldr	r2, [r2, #12]
 8004ac8:	0a12      	lsrs	r2, r2, #8
 8004aca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ace:	fb02 f303 	mul.w	r3, r2, r3
 8004ad2:	617b      	str	r3, [r7, #20]
      break;
 8004ad4:	e00c      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ad6:	4a13      	ldr	r2, [pc, #76]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ade:	4a10      	ldr	r2, [pc, #64]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ae0:	68d2      	ldr	r2, [r2, #12]
 8004ae2:	0a12      	lsrs	r2, r2, #8
 8004ae4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ae8:	fb02 f303 	mul.w	r3, r2, r3
 8004aec:	617b      	str	r3, [r7, #20]
      break;
 8004aee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	0e5b      	lsrs	r3, r3, #25
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	3301      	adds	r3, #1
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	e001      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b10:	693b      	ldr	r3, [r7, #16]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40021000 	.word	0x40021000
 8004b24:	00f42400 	.word	0x00f42400
 8004b28:	007a1200 	.word	0x007a1200

08004b2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b32:	681b      	ldr	r3, [r3, #0]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000000 	.word	0x20000000

08004b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b48:	f7ff fff0 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	0a1b      	lsrs	r3, r3, #8
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	4904      	ldr	r1, [pc, #16]	; (8004b6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b5a:	5ccb      	ldrb	r3, [r1, r3]
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	080075d0 	.word	0x080075d0

08004b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b74:	f7ff ffda 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	0adb      	lsrs	r3, r3, #11
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	4904      	ldr	r1, [pc, #16]	; (8004b98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b86:	5ccb      	ldrb	r3, [r1, r3]
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40021000 	.word	0x40021000
 8004b98:	080075d0 	.word	0x080075d0

08004b9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ba2:	4b1e      	ldr	r3, [pc, #120]	; (8004c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bac:	4b1b      	ldr	r3, [pc, #108]	; (8004c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d10c      	bne.n	8004bda <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bc0:	4a17      	ldr	r2, [pc, #92]	; (8004c20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	4a14      	ldr	r2, [pc, #80]	; (8004c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bca:	68d2      	ldr	r2, [r2, #12]
 8004bcc:	0a12      	lsrs	r2, r2, #8
 8004bce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bd2:	fb02 f303 	mul.w	r3, r2, r3
 8004bd6:	617b      	str	r3, [r7, #20]
    break;
 8004bd8:	e00c      	b.n	8004bf4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bda:	4a12      	ldr	r2, [pc, #72]	; (8004c24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be2:	4a0e      	ldr	r2, [pc, #56]	; (8004c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004be4:	68d2      	ldr	r2, [r2, #12]
 8004be6:	0a12      	lsrs	r2, r2, #8
 8004be8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bec:	fb02 f303 	mul.w	r3, r2, r3
 8004bf0:	617b      	str	r3, [r7, #20]
    break;
 8004bf2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bf4:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	0e5b      	lsrs	r3, r3, #25
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	3301      	adds	r3, #1
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c0e:	687b      	ldr	r3, [r7, #4]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	007a1200 	.word	0x007a1200
 8004c24:	00f42400 	.word	0x00f42400

08004c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c30:	2300      	movs	r3, #0
 8004c32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c34:	2300      	movs	r3, #0
 8004c36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8098 	beq.w	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c46:	2300      	movs	r3, #0
 8004c48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c4a:	4b43      	ldr	r3, [pc, #268]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10d      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c56:	4b40      	ldr	r3, [pc, #256]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5a:	4a3f      	ldr	r2, [pc, #252]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c60:	6593      	str	r3, [r2, #88]	; 0x58
 8004c62:	4b3d      	ldr	r3, [pc, #244]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c72:	4b3a      	ldr	r3, [pc, #232]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a39      	ldr	r2, [pc, #228]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c7e:	f7fc ff11 	bl	8001aa4 <HAL_GetTick>
 8004c82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c84:	e009      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c86:	f7fc ff0d 	bl	8001aa4 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d902      	bls.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	74fb      	strb	r3, [r7, #19]
        break;
 8004c98:	e005      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c9a:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0ef      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ca6:	7cfb      	ldrb	r3, [r7, #19]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d159      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cac:	4b2a      	ldr	r3, [pc, #168]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d01e      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d019      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cc8:	4b23      	ldr	r3, [pc, #140]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cd4:	4b20      	ldr	r3, [pc, #128]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cda:	4a1f      	ldr	r2, [pc, #124]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ce4:	4b1c      	ldr	r3, [pc, #112]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	4a1b      	ldr	r2, [pc, #108]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cf4:	4a18      	ldr	r2, [pc, #96]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d016      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d06:	f7fc fecd 	bl	8001aa4 <HAL_GetTick>
 8004d0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d0c:	e00b      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0e:	f7fc fec9 	bl	8001aa4 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d902      	bls.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	74fb      	strb	r3, [r7, #19]
            break;
 8004d24:	e006      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d26:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0ec      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d34:	7cfb      	ldrb	r3, [r7, #19]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10b      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d3a:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	4903      	ldr	r1, [pc, #12]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d50:	e008      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d52:	7cfb      	ldrb	r3, [r7, #19]
 8004d54:	74bb      	strb	r3, [r7, #18]
 8004d56:	e005      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d60:	7cfb      	ldrb	r3, [r7, #19]
 8004d62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d64:	7c7b      	ldrb	r3, [r7, #17]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d105      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d6a:	4ba6      	ldr	r3, [pc, #664]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6e:	4aa5      	ldr	r2, [pc, #660]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d82:	4ba0      	ldr	r3, [pc, #640]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d88:	f023 0203 	bic.w	r2, r3, #3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	499c      	ldr	r1, [pc, #624]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004da4:	4b97      	ldr	r3, [pc, #604]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004daa:	f023 020c 	bic.w	r2, r3, #12
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	4994      	ldr	r1, [pc, #592]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dc6:	4b8f      	ldr	r3, [pc, #572]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dcc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	498b      	ldr	r1, [pc, #556]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00a      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004de8:	4b86      	ldr	r3, [pc, #536]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	4983      	ldr	r1, [pc, #524]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0320 	and.w	r3, r3, #32
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e0a:	4b7e      	ldr	r3, [pc, #504]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	497a      	ldr	r1, [pc, #488]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e2c:	4b75      	ldr	r3, [pc, #468]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	4972      	ldr	r1, [pc, #456]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e4e:	4b6d      	ldr	r3, [pc, #436]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	4969      	ldr	r1, [pc, #420]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e70:	4b64      	ldr	r3, [pc, #400]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	4961      	ldr	r1, [pc, #388]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e92:	4b5c      	ldr	r3, [pc, #368]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	4958      	ldr	r1, [pc, #352]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d015      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eb4:	4b53      	ldr	r3, [pc, #332]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	4950      	ldr	r1, [pc, #320]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ed2:	d105      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed4:	4b4b      	ldr	r3, [pc, #300]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4a4a      	ldr	r2, [pc, #296]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ede:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d015      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004eec:	4b45      	ldr	r3, [pc, #276]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	4942      	ldr	r1, [pc, #264]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f0a:	d105      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f0c:	4b3d      	ldr	r3, [pc, #244]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4a3c      	ldr	r2, [pc, #240]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f16:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d015      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f24:	4b37      	ldr	r3, [pc, #220]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	4934      	ldr	r1, [pc, #208]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f42:	d105      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f44:	4b2f      	ldr	r3, [pc, #188]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4a2e      	ldr	r2, [pc, #184]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d015      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f5c:	4b29      	ldr	r3, [pc, #164]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6a:	4926      	ldr	r1, [pc, #152]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f7a:	d105      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f7c:	4b21      	ldr	r3, [pc, #132]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	4a20      	ldr	r2, [pc, #128]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d015      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f94:	4b1b      	ldr	r3, [pc, #108]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa2:	4918      	ldr	r1, [pc, #96]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fb4:	4b13      	ldr	r3, [pc, #76]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4a12      	ldr	r2, [pc, #72]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fbe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d015      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fcc:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fda:	490a      	ldr	r1, [pc, #40]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4a04      	ldr	r2, [pc, #16]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ff8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40021000 	.word	0x40021000

08005008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e049      	b.n	80050ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d106      	bne.n	8005034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7fc fb54 	bl	80016dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f000 fa48 	bl	80054dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d001      	beq.n	80050d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e04a      	b.n	8005166 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a21      	ldr	r2, [pc, #132]	; (8005174 <HAL_TIM_Base_Start_IT+0xbc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d018      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x6c>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fa:	d013      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x6c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1d      	ldr	r2, [pc, #116]	; (8005178 <HAL_TIM_Base_Start_IT+0xc0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00e      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x6c>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1c      	ldr	r2, [pc, #112]	; (800517c <HAL_TIM_Base_Start_IT+0xc4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d009      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x6c>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1a      	ldr	r2, [pc, #104]	; (8005180 <HAL_TIM_Base_Start_IT+0xc8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d004      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x6c>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a19      	ldr	r2, [pc, #100]	; (8005184 <HAL_TIM_Base_Start_IT+0xcc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d115      	bne.n	8005150 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	4b17      	ldr	r3, [pc, #92]	; (8005188 <HAL_TIM_Base_Start_IT+0xd0>)
 800512c:	4013      	ands	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b06      	cmp	r3, #6
 8005134:	d015      	beq.n	8005162 <HAL_TIM_Base_Start_IT+0xaa>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513c:	d011      	beq.n	8005162 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0201 	orr.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514e:	e008      	b.n	8005162 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e000      	b.n	8005164 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005162:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40012c00 	.word	0x40012c00
 8005178:	40000400 	.word	0x40000400
 800517c:	40000800 	.word	0x40000800
 8005180:	40013400 	.word	0x40013400
 8005184:	40014000 	.word	0x40014000
 8005188:	00010007 	.word	0x00010007

0800518c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d122      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d11b      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0202 	mvn.w	r2, #2
 80051b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f965 	bl	800549e <HAL_TIM_IC_CaptureCallback>
 80051d4:	e005      	b.n	80051e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f957 	bl	800548a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f968 	bl	80054b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d122      	bne.n	800523c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b04      	cmp	r3, #4
 8005202:	d11b      	bne.n	800523c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0204 	mvn.w	r2, #4
 800520c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2202      	movs	r2, #2
 8005212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f93b 	bl	800549e <HAL_TIM_IC_CaptureCallback>
 8005228:	e005      	b.n	8005236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f92d 	bl	800548a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f93e 	bl	80054b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b08      	cmp	r3, #8
 8005248:	d122      	bne.n	8005290 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b08      	cmp	r3, #8
 8005256:	d11b      	bne.n	8005290 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0208 	mvn.w	r2, #8
 8005260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2204      	movs	r2, #4
 8005266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f911 	bl	800549e <HAL_TIM_IC_CaptureCallback>
 800527c:	e005      	b.n	800528a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f903 	bl	800548a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f914 	bl	80054b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b10      	cmp	r3, #16
 800529c:	d122      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	d11b      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0210 	mvn.w	r2, #16
 80052b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2208      	movs	r2, #8
 80052ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f8e7 	bl	800549e <HAL_TIM_IC_CaptureCallback>
 80052d0:	e005      	b.n	80052de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f8d9 	bl	800548a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f8ea 	bl	80054b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d10e      	bne.n	8005310 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d107      	bne.n	8005310 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0201 	mvn.w	r2, #1
 8005308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fc f848 	bl	80013a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531a:	2b80      	cmp	r3, #128	; 0x80
 800531c:	d10e      	bne.n	800533c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005328:	2b80      	cmp	r3, #128	; 0x80
 800532a:	d107      	bne.n	800533c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f9ec 	bl	8005714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534a:	d10e      	bne.n	800536a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005356:	2b80      	cmp	r3, #128	; 0x80
 8005358:	d107      	bne.n	800536a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f9df 	bl	8005728 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d10e      	bne.n	8005396 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005382:	2b40      	cmp	r3, #64	; 0x40
 8005384:	d107      	bne.n	8005396 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800538e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f898 	bl	80054c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d10e      	bne.n	80053c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	d107      	bne.n	80053c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f06f 0220 	mvn.w	r2, #32
 80053ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f99f 	bl	8005700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d0:	d10f      	bne.n	80053f2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053e0:	d107      	bne.n	80053f2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80053ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f9a5 	bl	800573c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005400:	d10f      	bne.n	8005422 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800540c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005410:	d107      	bne.n	8005422 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800541a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f997 	bl	8005750 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800542c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005430:	d10f      	bne.n	8005452 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800543c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005440:	d107      	bne.n	8005452 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800544a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f989 	bl	8005764 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800545c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005460:	d10f      	bne.n	8005482 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800546c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005470:	d107      	bne.n	8005482 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800547a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f97b 	bl	8005778 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005482:	bf00      	nop
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
	...

080054dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a3c      	ldr	r2, [pc, #240]	; (80055e0 <TIM_Base_SetConfig+0x104>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00f      	beq.n	8005514 <TIM_Base_SetConfig+0x38>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fa:	d00b      	beq.n	8005514 <TIM_Base_SetConfig+0x38>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a39      	ldr	r2, [pc, #228]	; (80055e4 <TIM_Base_SetConfig+0x108>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d007      	beq.n	8005514 <TIM_Base_SetConfig+0x38>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a38      	ldr	r2, [pc, #224]	; (80055e8 <TIM_Base_SetConfig+0x10c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d003      	beq.n	8005514 <TIM_Base_SetConfig+0x38>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a37      	ldr	r2, [pc, #220]	; (80055ec <TIM_Base_SetConfig+0x110>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d108      	bne.n	8005526 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2d      	ldr	r2, [pc, #180]	; (80055e0 <TIM_Base_SetConfig+0x104>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d01b      	beq.n	8005566 <TIM_Base_SetConfig+0x8a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005534:	d017      	beq.n	8005566 <TIM_Base_SetConfig+0x8a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2a      	ldr	r2, [pc, #168]	; (80055e4 <TIM_Base_SetConfig+0x108>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d013      	beq.n	8005566 <TIM_Base_SetConfig+0x8a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a29      	ldr	r2, [pc, #164]	; (80055e8 <TIM_Base_SetConfig+0x10c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00f      	beq.n	8005566 <TIM_Base_SetConfig+0x8a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a28      	ldr	r2, [pc, #160]	; (80055ec <TIM_Base_SetConfig+0x110>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00b      	beq.n	8005566 <TIM_Base_SetConfig+0x8a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a27      	ldr	r2, [pc, #156]	; (80055f0 <TIM_Base_SetConfig+0x114>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d007      	beq.n	8005566 <TIM_Base_SetConfig+0x8a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a26      	ldr	r2, [pc, #152]	; (80055f4 <TIM_Base_SetConfig+0x118>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d003      	beq.n	8005566 <TIM_Base_SetConfig+0x8a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a25      	ldr	r2, [pc, #148]	; (80055f8 <TIM_Base_SetConfig+0x11c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d108      	bne.n	8005578 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a10      	ldr	r2, [pc, #64]	; (80055e0 <TIM_Base_SetConfig+0x104>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00f      	beq.n	80055c4 <TIM_Base_SetConfig+0xe8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a11      	ldr	r2, [pc, #68]	; (80055ec <TIM_Base_SetConfig+0x110>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00b      	beq.n	80055c4 <TIM_Base_SetConfig+0xe8>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a10      	ldr	r2, [pc, #64]	; (80055f0 <TIM_Base_SetConfig+0x114>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d007      	beq.n	80055c4 <TIM_Base_SetConfig+0xe8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a0f      	ldr	r2, [pc, #60]	; (80055f4 <TIM_Base_SetConfig+0x118>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d003      	beq.n	80055c4 <TIM_Base_SetConfig+0xe8>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a0e      	ldr	r2, [pc, #56]	; (80055f8 <TIM_Base_SetConfig+0x11c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d103      	bne.n	80055cc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	615a      	str	r2, [r3, #20]
}
 80055d2:	bf00      	nop
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800
 80055ec:	40013400 	.word	0x40013400
 80055f0:	40014000 	.word	0x40014000
 80055f4:	40014400 	.word	0x40014400
 80055f8:	40014800 	.word	0x40014800

080055fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005610:	2302      	movs	r3, #2
 8005612:	e065      	b.n	80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a2c      	ldr	r2, [pc, #176]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d004      	beq.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a2b      	ldr	r2, [pc, #172]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d108      	bne.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800564e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005664:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1b      	ldr	r2, [pc, #108]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d018      	beq.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800568a:	d013      	beq.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a18      	ldr	r2, [pc, #96]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00e      	beq.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a17      	ldr	r2, [pc, #92]	; (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d009      	beq.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a12      	ldr	r2, [pc, #72]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d004      	beq.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a13      	ldr	r2, [pc, #76]	; (80056fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d10c      	bne.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	40012c00 	.word	0x40012c00
 80056f0:	40013400 	.word	0x40013400
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40014000 	.word	0x40014000

08005700 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e042      	b.n	8005824 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d106      	bne.n	80057b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7fb ffb9 	bl	8001728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2224      	movs	r2, #36	; 0x24
 80057ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0201 	bic.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f8c2 	bl	8005958 <UART_SetConfig>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e022      	b.n	8005824 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fb82 	bl	8005ef0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800580a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fc09 	bl	8006034 <UART_CheckIdleState>
 8005822:	4603      	mov	r3, r0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08a      	sub	sp, #40	; 0x28
 8005830:	af02      	add	r7, sp, #8
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	4613      	mov	r3, r2
 800583a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005842:	2b20      	cmp	r3, #32
 8005844:	f040 8083 	bne.w	800594e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <HAL_UART_Transmit+0x28>
 800584e:	88fb      	ldrh	r3, [r7, #6]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e07b      	b.n	8005950 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800585e:	2b01      	cmp	r3, #1
 8005860:	d101      	bne.n	8005866 <HAL_UART_Transmit+0x3a>
 8005862:	2302      	movs	r3, #2
 8005864:	e074      	b.n	8005950 <HAL_UART_Transmit+0x124>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2221      	movs	r2, #33	; 0x21
 800587a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800587e:	f7fc f911 	bl	8001aa4 <HAL_GetTick>
 8005882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	88fa      	ldrh	r2, [r7, #6]
 8005888:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	88fa      	ldrh	r2, [r7, #6]
 8005890:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800589c:	d108      	bne.n	80058b0 <HAL_UART_Transmit+0x84>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d104      	bne.n	80058b0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	e003      	b.n	80058b8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80058c0:	e02c      	b.n	800591c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2200      	movs	r2, #0
 80058ca:	2180      	movs	r1, #128	; 0x80
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fbfc 	bl	80060ca <UART_WaitOnFlagUntilTimeout>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e039      	b.n	8005950 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10b      	bne.n	80058fa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	3302      	adds	r3, #2
 80058f6:	61bb      	str	r3, [r7, #24]
 80058f8:	e007      	b.n	800590a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	781a      	ldrb	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	3301      	adds	r3, #1
 8005908:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1cc      	bne.n	80058c2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2200      	movs	r2, #0
 8005930:	2140      	movs	r1, #64	; 0x40
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 fbc9 	bl	80060ca <UART_WaitOnFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e006      	b.n	8005950 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	e000      	b.n	8005950 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800594e:	2302      	movs	r3, #2
  }
}
 8005950:	4618      	mov	r0, r3
 8005952:	3720      	adds	r7, #32
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800595c:	b08c      	sub	sp, #48	; 0x30
 800595e:	af00      	add	r7, sp, #0
 8005960:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	431a      	orrs	r2, r3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	431a      	orrs	r2, r3
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	4313      	orrs	r3, r2
 800597e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	4bab      	ldr	r3, [pc, #684]	; (8005c34 <UART_SetConfig+0x2dc>)
 8005988:	4013      	ands	r3, r2
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	6812      	ldr	r2, [r2, #0]
 800598e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005990:	430b      	orrs	r3, r1
 8005992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4aa0      	ldr	r2, [pc, #640]	; (8005c38 <UART_SetConfig+0x2e0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d004      	beq.n	80059c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059c0:	4313      	orrs	r3, r2
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80059ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	6812      	ldr	r2, [r2, #0]
 80059d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059d8:	430b      	orrs	r3, r1
 80059da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	f023 010f 	bic.w	r1, r3, #15
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a91      	ldr	r2, [pc, #580]	; (8005c3c <UART_SetConfig+0x2e4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d125      	bne.n	8005a48 <UART_SetConfig+0xf0>
 80059fc:	4b90      	ldr	r3, [pc, #576]	; (8005c40 <UART_SetConfig+0x2e8>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d81a      	bhi.n	8005a40 <UART_SetConfig+0xe8>
 8005a0a:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <UART_SetConfig+0xb8>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005a21 	.word	0x08005a21
 8005a14:	08005a31 	.word	0x08005a31
 8005a18:	08005a29 	.word	0x08005a29
 8005a1c:	08005a39 	.word	0x08005a39
 8005a20:	2301      	movs	r3, #1
 8005a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a26:	e0d6      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a2e:	e0d2      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005a30:	2304      	movs	r3, #4
 8005a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a36:	e0ce      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005a38:	2308      	movs	r3, #8
 8005a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a3e:	e0ca      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005a40:	2310      	movs	r3, #16
 8005a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a46:	e0c6      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a7d      	ldr	r2, [pc, #500]	; (8005c44 <UART_SetConfig+0x2ec>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d138      	bne.n	8005ac4 <UART_SetConfig+0x16c>
 8005a52:	4b7b      	ldr	r3, [pc, #492]	; (8005c40 <UART_SetConfig+0x2e8>)
 8005a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a58:	f003 030c 	and.w	r3, r3, #12
 8005a5c:	2b0c      	cmp	r3, #12
 8005a5e:	d82d      	bhi.n	8005abc <UART_SetConfig+0x164>
 8005a60:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <UART_SetConfig+0x110>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a9d 	.word	0x08005a9d
 8005a6c:	08005abd 	.word	0x08005abd
 8005a70:	08005abd 	.word	0x08005abd
 8005a74:	08005abd 	.word	0x08005abd
 8005a78:	08005aad 	.word	0x08005aad
 8005a7c:	08005abd 	.word	0x08005abd
 8005a80:	08005abd 	.word	0x08005abd
 8005a84:	08005abd 	.word	0x08005abd
 8005a88:	08005aa5 	.word	0x08005aa5
 8005a8c:	08005abd 	.word	0x08005abd
 8005a90:	08005abd 	.word	0x08005abd
 8005a94:	08005abd 	.word	0x08005abd
 8005a98:	08005ab5 	.word	0x08005ab5
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aa2:	e098      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aaa:	e094      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005aac:	2304      	movs	r3, #4
 8005aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ab2:	e090      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005ab4:	2308      	movs	r3, #8
 8005ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aba:	e08c      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005abc:	2310      	movs	r3, #16
 8005abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ac2:	e088      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a5f      	ldr	r2, [pc, #380]	; (8005c48 <UART_SetConfig+0x2f0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d125      	bne.n	8005b1a <UART_SetConfig+0x1c2>
 8005ace:	4b5c      	ldr	r3, [pc, #368]	; (8005c40 <UART_SetConfig+0x2e8>)
 8005ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ad8:	2b30      	cmp	r3, #48	; 0x30
 8005ada:	d016      	beq.n	8005b0a <UART_SetConfig+0x1b2>
 8005adc:	2b30      	cmp	r3, #48	; 0x30
 8005ade:	d818      	bhi.n	8005b12 <UART_SetConfig+0x1ba>
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	d00a      	beq.n	8005afa <UART_SetConfig+0x1a2>
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d814      	bhi.n	8005b12 <UART_SetConfig+0x1ba>
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <UART_SetConfig+0x19a>
 8005aec:	2b10      	cmp	r3, #16
 8005aee:	d008      	beq.n	8005b02 <UART_SetConfig+0x1aa>
 8005af0:	e00f      	b.n	8005b12 <UART_SetConfig+0x1ba>
 8005af2:	2300      	movs	r3, #0
 8005af4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005af8:	e06d      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005afa:	2302      	movs	r3, #2
 8005afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b00:	e069      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005b02:	2304      	movs	r3, #4
 8005b04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b08:	e065      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005b0a:	2308      	movs	r3, #8
 8005b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b10:	e061      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005b12:	2310      	movs	r3, #16
 8005b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b18:	e05d      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a4b      	ldr	r2, [pc, #300]	; (8005c4c <UART_SetConfig+0x2f4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d125      	bne.n	8005b70 <UART_SetConfig+0x218>
 8005b24:	4b46      	ldr	r3, [pc, #280]	; (8005c40 <UART_SetConfig+0x2e8>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b2e:	2bc0      	cmp	r3, #192	; 0xc0
 8005b30:	d016      	beq.n	8005b60 <UART_SetConfig+0x208>
 8005b32:	2bc0      	cmp	r3, #192	; 0xc0
 8005b34:	d818      	bhi.n	8005b68 <UART_SetConfig+0x210>
 8005b36:	2b80      	cmp	r3, #128	; 0x80
 8005b38:	d00a      	beq.n	8005b50 <UART_SetConfig+0x1f8>
 8005b3a:	2b80      	cmp	r3, #128	; 0x80
 8005b3c:	d814      	bhi.n	8005b68 <UART_SetConfig+0x210>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <UART_SetConfig+0x1f0>
 8005b42:	2b40      	cmp	r3, #64	; 0x40
 8005b44:	d008      	beq.n	8005b58 <UART_SetConfig+0x200>
 8005b46:	e00f      	b.n	8005b68 <UART_SetConfig+0x210>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b4e:	e042      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005b50:	2302      	movs	r3, #2
 8005b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b56:	e03e      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005b58:	2304      	movs	r3, #4
 8005b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b5e:	e03a      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005b60:	2308      	movs	r3, #8
 8005b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b66:	e036      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005b68:	2310      	movs	r3, #16
 8005b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b6e:	e032      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a30      	ldr	r2, [pc, #192]	; (8005c38 <UART_SetConfig+0x2e0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d12a      	bne.n	8005bd0 <UART_SetConfig+0x278>
 8005b7a:	4b31      	ldr	r3, [pc, #196]	; (8005c40 <UART_SetConfig+0x2e8>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b88:	d01a      	beq.n	8005bc0 <UART_SetConfig+0x268>
 8005b8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b8e:	d81b      	bhi.n	8005bc8 <UART_SetConfig+0x270>
 8005b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b94:	d00c      	beq.n	8005bb0 <UART_SetConfig+0x258>
 8005b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9a:	d815      	bhi.n	8005bc8 <UART_SetConfig+0x270>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <UART_SetConfig+0x250>
 8005ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba4:	d008      	beq.n	8005bb8 <UART_SetConfig+0x260>
 8005ba6:	e00f      	b.n	8005bc8 <UART_SetConfig+0x270>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bae:	e012      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bb6:	e00e      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bbe:	e00a      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005bc0:	2308      	movs	r3, #8
 8005bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bc6:	e006      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005bc8:	2310      	movs	r3, #16
 8005bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bce:	e002      	b.n	8005bd6 <UART_SetConfig+0x27e>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a17      	ldr	r2, [pc, #92]	; (8005c38 <UART_SetConfig+0x2e0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	f040 80a8 	bne.w	8005d32 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005be2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d834      	bhi.n	8005c54 <UART_SetConfig+0x2fc>
 8005bea:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <UART_SetConfig+0x298>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c15 	.word	0x08005c15
 8005bf4:	08005c55 	.word	0x08005c55
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c55 	.word	0x08005c55
 8005c00:	08005c23 	.word	0x08005c23
 8005c04:	08005c55 	.word	0x08005c55
 8005c08:	08005c55 	.word	0x08005c55
 8005c0c:	08005c55 	.word	0x08005c55
 8005c10:	08005c2b 	.word	0x08005c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c14:	f7fe ff96 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 8005c18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c1a:	e021      	b.n	8005c60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c1c:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <UART_SetConfig+0x2f8>)
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c20:	e01e      	b.n	8005c60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c22:	f7fe ff21 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 8005c26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c28:	e01a      	b.n	8005c60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c30:	e016      	b.n	8005c60 <UART_SetConfig+0x308>
 8005c32:	bf00      	nop
 8005c34:	cfff69f3 	.word	0xcfff69f3
 8005c38:	40008000 	.word	0x40008000
 8005c3c:	40013800 	.word	0x40013800
 8005c40:	40021000 	.word	0x40021000
 8005c44:	40004400 	.word	0x40004400
 8005c48:	40004800 	.word	0x40004800
 8005c4c:	40004c00 	.word	0x40004c00
 8005c50:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 812a 	beq.w	8005ebc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	4a9e      	ldr	r2, [pc, #632]	; (8005ee8 <UART_SetConfig+0x590>)
 8005c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c72:	461a      	mov	r2, r3
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c7a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	4613      	mov	r3, r2
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	4413      	add	r3, r2
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d305      	bcc.n	8005c98 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d903      	bls.n	8005ca0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c9e:	e10d      	b.n	8005ebc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	60bb      	str	r3, [r7, #8]
 8005ca6:	60fa      	str	r2, [r7, #12]
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	4a8e      	ldr	r2, [pc, #568]	; (8005ee8 <UART_SetConfig+0x590>)
 8005cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	607a      	str	r2, [r7, #4]
 8005cba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cc2:	f7fa feeb 	bl	8000a9c <__aeabi_uldivmod>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4610      	mov	r0, r2
 8005ccc:	4619      	mov	r1, r3
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	f04f 0300 	mov.w	r3, #0
 8005cd6:	020b      	lsls	r3, r1, #8
 8005cd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005cdc:	0202      	lsls	r2, r0, #8
 8005cde:	6979      	ldr	r1, [r7, #20]
 8005ce0:	6849      	ldr	r1, [r1, #4]
 8005ce2:	0849      	lsrs	r1, r1, #1
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	4605      	mov	r5, r0
 8005cea:	eb12 0804 	adds.w	r8, r2, r4
 8005cee:	eb43 0905 	adc.w	r9, r3, r5
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	469a      	mov	sl, r3
 8005cfa:	4693      	mov	fp, r2
 8005cfc:	4652      	mov	r2, sl
 8005cfe:	465b      	mov	r3, fp
 8005d00:	4640      	mov	r0, r8
 8005d02:	4649      	mov	r1, r9
 8005d04:	f7fa feca 	bl	8000a9c <__aeabi_uldivmod>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d16:	d308      	bcc.n	8005d2a <UART_SetConfig+0x3d2>
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d1e:	d204      	bcs.n	8005d2a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6a3a      	ldr	r2, [r7, #32]
 8005d26:	60da      	str	r2, [r3, #12]
 8005d28:	e0c8      	b.n	8005ebc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d30:	e0c4      	b.n	8005ebc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d3a:	d167      	bne.n	8005e0c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005d3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d828      	bhi.n	8005d96 <UART_SetConfig+0x43e>
 8005d44:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <UART_SetConfig+0x3f4>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d79 	.word	0x08005d79
 8005d54:	08005d81 	.word	0x08005d81
 8005d58:	08005d97 	.word	0x08005d97
 8005d5c:	08005d87 	.word	0x08005d87
 8005d60:	08005d97 	.word	0x08005d97
 8005d64:	08005d97 	.word	0x08005d97
 8005d68:	08005d97 	.word	0x08005d97
 8005d6c:	08005d8f 	.word	0x08005d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d70:	f7fe fee8 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 8005d74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d76:	e014      	b.n	8005da2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d78:	f7fe fefa 	bl	8004b70 <HAL_RCC_GetPCLK2Freq>
 8005d7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d7e:	e010      	b.n	8005da2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d80:	4b5a      	ldr	r3, [pc, #360]	; (8005eec <UART_SetConfig+0x594>)
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d84:	e00d      	b.n	8005da2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d86:	f7fe fe6f 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 8005d8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d8c:	e009      	b.n	8005da2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d94:	e005      	b.n	8005da2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005da0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 8089 	beq.w	8005ebc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	4a4e      	ldr	r2, [pc, #312]	; (8005ee8 <UART_SetConfig+0x590>)
 8005db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005db4:	461a      	mov	r2, r3
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dbc:	005a      	lsls	r2, r3, #1
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	085b      	lsrs	r3, r3, #1
 8005dc4:	441a      	add	r2, r3
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	2b0f      	cmp	r3, #15
 8005dd4:	d916      	bls.n	8005e04 <UART_SetConfig+0x4ac>
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ddc:	d212      	bcs.n	8005e04 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f023 030f 	bic.w	r3, r3, #15
 8005de6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	8bfb      	ldrh	r3, [r7, #30]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	8bfa      	ldrh	r2, [r7, #30]
 8005e00:	60da      	str	r2, [r3, #12]
 8005e02:	e05b      	b.n	8005ebc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e0a:	e057      	b.n	8005ebc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d828      	bhi.n	8005e66 <UART_SetConfig+0x50e>
 8005e14:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <UART_SetConfig+0x4c4>)
 8005e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1a:	bf00      	nop
 8005e1c:	08005e41 	.word	0x08005e41
 8005e20:	08005e49 	.word	0x08005e49
 8005e24:	08005e51 	.word	0x08005e51
 8005e28:	08005e67 	.word	0x08005e67
 8005e2c:	08005e57 	.word	0x08005e57
 8005e30:	08005e67 	.word	0x08005e67
 8005e34:	08005e67 	.word	0x08005e67
 8005e38:	08005e67 	.word	0x08005e67
 8005e3c:	08005e5f 	.word	0x08005e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e40:	f7fe fe80 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 8005e44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e46:	e014      	b.n	8005e72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e48:	f7fe fe92 	bl	8004b70 <HAL_RCC_GetPCLK2Freq>
 8005e4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e4e:	e010      	b.n	8005e72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e50:	4b26      	ldr	r3, [pc, #152]	; (8005eec <UART_SetConfig+0x594>)
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e54:	e00d      	b.n	8005e72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e56:	f7fe fe07 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 8005e5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e5c:	e009      	b.n	8005e72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e64:	e005      	b.n	8005e72 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e70:	bf00      	nop
    }

    if (pclk != 0U)
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d021      	beq.n	8005ebc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	4a1a      	ldr	r2, [pc, #104]	; (8005ee8 <UART_SetConfig+0x590>)
 8005e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e82:	461a      	mov	r2, r3
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	441a      	add	r2, r3
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	2b0f      	cmp	r3, #15
 8005ea0:	d909      	bls.n	8005eb6 <UART_SetConfig+0x55e>
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea8:	d205      	bcs.n	8005eb6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60da      	str	r2, [r3, #12]
 8005eb4:	e002      	b.n	8005ebc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005ed8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3730      	adds	r7, #48	; 0x30
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ee6:	bf00      	nop
 8005ee8:	080075d8 	.word	0x080075d8
 8005eec:	00f42400 	.word	0x00f42400

08005ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01a      	beq.n	8006006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fee:	d10a      	bne.n	8006006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	605a      	str	r2, [r3, #4]
  }
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af02      	add	r7, sp, #8
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006044:	f7fb fd2e 	bl	8001aa4 <HAL_GetTick>
 8006048:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b08      	cmp	r3, #8
 8006056:	d10e      	bne.n	8006076 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f82f 	bl	80060ca <UART_WaitOnFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e025      	b.n	80060c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b04      	cmp	r3, #4
 8006082:	d10e      	bne.n	80060a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f819 	bl	80060ca <UART_WaitOnFlagUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e00f      	b.n	80060c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b09c      	sub	sp, #112	; 0x70
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	603b      	str	r3, [r7, #0]
 80060d6:	4613      	mov	r3, r2
 80060d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060da:	e0a9      	b.n	8006230 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e2:	f000 80a5 	beq.w	8006230 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e6:	f7fb fcdd 	bl	8001aa4 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d302      	bcc.n	80060fc <UART_WaitOnFlagUntilTimeout+0x32>
 80060f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d140      	bne.n	800617e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800610a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006110:	667b      	str	r3, [r7, #100]	; 0x64
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800611a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800611c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006120:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e6      	bne.n	80060fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3308      	adds	r3, #8
 8006134:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006138:	e853 3f00 	ldrex	r3, [r3]
 800613c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	f023 0301 	bic.w	r3, r3, #1
 8006144:	663b      	str	r3, [r7, #96]	; 0x60
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3308      	adds	r3, #8
 800614c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800614e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006150:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800615c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e5      	bne.n	800612e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2220      	movs	r2, #32
 8006166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e069      	b.n	8006252 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d051      	beq.n	8006230 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800619a:	d149      	bne.n	8006230 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c4:	637b      	str	r3, [r7, #52]	; 0x34
 80061c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e6      	bne.n	80061a6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3308      	adds	r3, #8
 80061de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	613b      	str	r3, [r7, #16]
   return(result);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f023 0301 	bic.w	r3, r3, #1
 80061ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3308      	adds	r3, #8
 80061f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061f8:	623a      	str	r2, [r7, #32]
 80061fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	69f9      	ldr	r1, [r7, #28]
 80061fe:	6a3a      	ldr	r2, [r7, #32]
 8006200:	e841 2300 	strex	r3, r2, [r1]
 8006204:	61bb      	str	r3, [r7, #24]
   return(result);
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e5      	bne.n	80061d8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2220      	movs	r2, #32
 8006210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2220      	movs	r2, #32
 8006218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2220      	movs	r2, #32
 8006220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e010      	b.n	8006252 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69da      	ldr	r2, [r3, #28]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	4013      	ands	r3, r2
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	429a      	cmp	r2, r3
 800623e:	bf0c      	ite	eq
 8006240:	2301      	moveq	r3, #1
 8006242:	2300      	movne	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	461a      	mov	r2, r3
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	429a      	cmp	r2, r3
 800624c:	f43f af46 	beq.w	80060dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3770      	adds	r7, #112	; 0x70
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800625a:	b480      	push	{r7}
 800625c:	b085      	sub	sp, #20
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_UARTEx_DisableFifoMode+0x16>
 800626c:	2302      	movs	r3, #2
 800626e:	e027      	b.n	80062c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2224      	movs	r2, #36	; 0x24
 800627c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800629e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e02d      	b.n	8006340 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2224      	movs	r2, #36	; 0x24
 80062f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0201 	bic.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f84f 	bl	80063c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2220      	movs	r2, #32
 8006332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800635c:	2302      	movs	r3, #2
 800635e:	e02d      	b.n	80063bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2224      	movs	r2, #36	; 0x24
 800636c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0201 	bic.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f811 	bl	80063c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d108      	bne.n	80063e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063e4:	e031      	b.n	800644a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063e6:	2308      	movs	r3, #8
 80063e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063ea:	2308      	movs	r3, #8
 80063ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	0e5b      	lsrs	r3, r3, #25
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	0f5b      	lsrs	r3, r3, #29
 8006406:	b2db      	uxtb	r3, r3
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800640e:	7bbb      	ldrb	r3, [r7, #14]
 8006410:	7b3a      	ldrb	r2, [r7, #12]
 8006412:	4911      	ldr	r1, [pc, #68]	; (8006458 <UARTEx_SetNbDataToProcess+0x94>)
 8006414:	5c8a      	ldrb	r2, [r1, r2]
 8006416:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800641a:	7b3a      	ldrb	r2, [r7, #12]
 800641c:	490f      	ldr	r1, [pc, #60]	; (800645c <UARTEx_SetNbDataToProcess+0x98>)
 800641e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006420:	fb93 f3f2 	sdiv	r3, r3, r2
 8006424:	b29a      	uxth	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	7b7a      	ldrb	r2, [r7, #13]
 8006430:	4909      	ldr	r1, [pc, #36]	; (8006458 <UARTEx_SetNbDataToProcess+0x94>)
 8006432:	5c8a      	ldrb	r2, [r1, r2]
 8006434:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006438:	7b7a      	ldrb	r2, [r7, #13]
 800643a:	4908      	ldr	r1, [pc, #32]	; (800645c <UARTEx_SetNbDataToProcess+0x98>)
 800643c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800643e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006442:	b29a      	uxth	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800644a:	bf00      	nop
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	080075f0 	.word	0x080075f0
 800645c:	080075f8 	.word	0x080075f8

08006460 <__errno>:
 8006460:	4b01      	ldr	r3, [pc, #4]	; (8006468 <__errno+0x8>)
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	2000000c 	.word	0x2000000c

0800646c <__libc_init_array>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	4d0d      	ldr	r5, [pc, #52]	; (80064a4 <__libc_init_array+0x38>)
 8006470:	4c0d      	ldr	r4, [pc, #52]	; (80064a8 <__libc_init_array+0x3c>)
 8006472:	1b64      	subs	r4, r4, r5
 8006474:	10a4      	asrs	r4, r4, #2
 8006476:	2600      	movs	r6, #0
 8006478:	42a6      	cmp	r6, r4
 800647a:	d109      	bne.n	8006490 <__libc_init_array+0x24>
 800647c:	4d0b      	ldr	r5, [pc, #44]	; (80064ac <__libc_init_array+0x40>)
 800647e:	4c0c      	ldr	r4, [pc, #48]	; (80064b0 <__libc_init_array+0x44>)
 8006480:	f001 f884 	bl	800758c <_init>
 8006484:	1b64      	subs	r4, r4, r5
 8006486:	10a4      	asrs	r4, r4, #2
 8006488:	2600      	movs	r6, #0
 800648a:	42a6      	cmp	r6, r4
 800648c:	d105      	bne.n	800649a <__libc_init_array+0x2e>
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	f855 3b04 	ldr.w	r3, [r5], #4
 8006494:	4798      	blx	r3
 8006496:	3601      	adds	r6, #1
 8006498:	e7ee      	b.n	8006478 <__libc_init_array+0xc>
 800649a:	f855 3b04 	ldr.w	r3, [r5], #4
 800649e:	4798      	blx	r3
 80064a0:	3601      	adds	r6, #1
 80064a2:	e7f2      	b.n	800648a <__libc_init_array+0x1e>
 80064a4:	080076a0 	.word	0x080076a0
 80064a8:	080076a0 	.word	0x080076a0
 80064ac:	080076a0 	.word	0x080076a0
 80064b0:	080076a4 	.word	0x080076a4

080064b4 <memset>:
 80064b4:	4402      	add	r2, r0
 80064b6:	4603      	mov	r3, r0
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d100      	bne.n	80064be <memset+0xa>
 80064bc:	4770      	bx	lr
 80064be:	f803 1b01 	strb.w	r1, [r3], #1
 80064c2:	e7f9      	b.n	80064b8 <memset+0x4>

080064c4 <iprintf>:
 80064c4:	b40f      	push	{r0, r1, r2, r3}
 80064c6:	4b0a      	ldr	r3, [pc, #40]	; (80064f0 <iprintf+0x2c>)
 80064c8:	b513      	push	{r0, r1, r4, lr}
 80064ca:	681c      	ldr	r4, [r3, #0]
 80064cc:	b124      	cbz	r4, 80064d8 <iprintf+0x14>
 80064ce:	69a3      	ldr	r3, [r4, #24]
 80064d0:	b913      	cbnz	r3, 80064d8 <iprintf+0x14>
 80064d2:	4620      	mov	r0, r4
 80064d4:	f000 f9f6 	bl	80068c4 <__sinit>
 80064d8:	ab05      	add	r3, sp, #20
 80064da:	9a04      	ldr	r2, [sp, #16]
 80064dc:	68a1      	ldr	r1, [r4, #8]
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	4620      	mov	r0, r4
 80064e2:	f000 fc07 	bl	8006cf4 <_vfiprintf_r>
 80064e6:	b002      	add	sp, #8
 80064e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064ec:	b004      	add	sp, #16
 80064ee:	4770      	bx	lr
 80064f0:	2000000c 	.word	0x2000000c

080064f4 <setbuf>:
 80064f4:	2900      	cmp	r1, #0
 80064f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064fa:	bf0c      	ite	eq
 80064fc:	2202      	moveq	r2, #2
 80064fe:	2200      	movne	r2, #0
 8006500:	f000 b800 	b.w	8006504 <setvbuf>

08006504 <setvbuf>:
 8006504:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006508:	461d      	mov	r5, r3
 800650a:	4b5d      	ldr	r3, [pc, #372]	; (8006680 <setvbuf+0x17c>)
 800650c:	681f      	ldr	r7, [r3, #0]
 800650e:	4604      	mov	r4, r0
 8006510:	460e      	mov	r6, r1
 8006512:	4690      	mov	r8, r2
 8006514:	b127      	cbz	r7, 8006520 <setvbuf+0x1c>
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	b913      	cbnz	r3, 8006520 <setvbuf+0x1c>
 800651a:	4638      	mov	r0, r7
 800651c:	f000 f9d2 	bl	80068c4 <__sinit>
 8006520:	4b58      	ldr	r3, [pc, #352]	; (8006684 <setvbuf+0x180>)
 8006522:	429c      	cmp	r4, r3
 8006524:	d167      	bne.n	80065f6 <setvbuf+0xf2>
 8006526:	687c      	ldr	r4, [r7, #4]
 8006528:	f1b8 0f02 	cmp.w	r8, #2
 800652c:	d006      	beq.n	800653c <setvbuf+0x38>
 800652e:	f1b8 0f01 	cmp.w	r8, #1
 8006532:	f200 809f 	bhi.w	8006674 <setvbuf+0x170>
 8006536:	2d00      	cmp	r5, #0
 8006538:	f2c0 809c 	blt.w	8006674 <setvbuf+0x170>
 800653c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800653e:	07db      	lsls	r3, r3, #31
 8006540:	d405      	bmi.n	800654e <setvbuf+0x4a>
 8006542:	89a3      	ldrh	r3, [r4, #12]
 8006544:	0598      	lsls	r0, r3, #22
 8006546:	d402      	bmi.n	800654e <setvbuf+0x4a>
 8006548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800654a:	f000 fa59 	bl	8006a00 <__retarget_lock_acquire_recursive>
 800654e:	4621      	mov	r1, r4
 8006550:	4638      	mov	r0, r7
 8006552:	f000 f923 	bl	800679c <_fflush_r>
 8006556:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006558:	b141      	cbz	r1, 800656c <setvbuf+0x68>
 800655a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800655e:	4299      	cmp	r1, r3
 8006560:	d002      	beq.n	8006568 <setvbuf+0x64>
 8006562:	4638      	mov	r0, r7
 8006564:	f000 fabc 	bl	8006ae0 <_free_r>
 8006568:	2300      	movs	r3, #0
 800656a:	6363      	str	r3, [r4, #52]	; 0x34
 800656c:	2300      	movs	r3, #0
 800656e:	61a3      	str	r3, [r4, #24]
 8006570:	6063      	str	r3, [r4, #4]
 8006572:	89a3      	ldrh	r3, [r4, #12]
 8006574:	0619      	lsls	r1, r3, #24
 8006576:	d503      	bpl.n	8006580 <setvbuf+0x7c>
 8006578:	6921      	ldr	r1, [r4, #16]
 800657a:	4638      	mov	r0, r7
 800657c:	f000 fab0 	bl	8006ae0 <_free_r>
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	f1b8 0f02 	cmp.w	r8, #2
 800658e:	81a3      	strh	r3, [r4, #12]
 8006590:	d06c      	beq.n	800666c <setvbuf+0x168>
 8006592:	ab01      	add	r3, sp, #4
 8006594:	466a      	mov	r2, sp
 8006596:	4621      	mov	r1, r4
 8006598:	4638      	mov	r0, r7
 800659a:	f000 fa33 	bl	8006a04 <__swhatbuf_r>
 800659e:	89a3      	ldrh	r3, [r4, #12]
 80065a0:	4318      	orrs	r0, r3
 80065a2:	81a0      	strh	r0, [r4, #12]
 80065a4:	2d00      	cmp	r5, #0
 80065a6:	d130      	bne.n	800660a <setvbuf+0x106>
 80065a8:	9d00      	ldr	r5, [sp, #0]
 80065aa:	4628      	mov	r0, r5
 80065ac:	f000 fa90 	bl	8006ad0 <malloc>
 80065b0:	4606      	mov	r6, r0
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d155      	bne.n	8006662 <setvbuf+0x15e>
 80065b6:	f8dd 9000 	ldr.w	r9, [sp]
 80065ba:	45a9      	cmp	r9, r5
 80065bc:	d14a      	bne.n	8006654 <setvbuf+0x150>
 80065be:	f04f 35ff 	mov.w	r5, #4294967295
 80065c2:	2200      	movs	r2, #0
 80065c4:	60a2      	str	r2, [r4, #8]
 80065c6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80065ca:	6022      	str	r2, [r4, #0]
 80065cc:	6122      	str	r2, [r4, #16]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065d4:	6162      	str	r2, [r4, #20]
 80065d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065d8:	f043 0302 	orr.w	r3, r3, #2
 80065dc:	07d2      	lsls	r2, r2, #31
 80065de:	81a3      	strh	r3, [r4, #12]
 80065e0:	d405      	bmi.n	80065ee <setvbuf+0xea>
 80065e2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80065e6:	d102      	bne.n	80065ee <setvbuf+0xea>
 80065e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ea:	f000 fa0a 	bl	8006a02 <__retarget_lock_release_recursive>
 80065ee:	4628      	mov	r0, r5
 80065f0:	b003      	add	sp, #12
 80065f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065f6:	4b24      	ldr	r3, [pc, #144]	; (8006688 <setvbuf+0x184>)
 80065f8:	429c      	cmp	r4, r3
 80065fa:	d101      	bne.n	8006600 <setvbuf+0xfc>
 80065fc:	68bc      	ldr	r4, [r7, #8]
 80065fe:	e793      	b.n	8006528 <setvbuf+0x24>
 8006600:	4b22      	ldr	r3, [pc, #136]	; (800668c <setvbuf+0x188>)
 8006602:	429c      	cmp	r4, r3
 8006604:	bf08      	it	eq
 8006606:	68fc      	ldreq	r4, [r7, #12]
 8006608:	e78e      	b.n	8006528 <setvbuf+0x24>
 800660a:	2e00      	cmp	r6, #0
 800660c:	d0cd      	beq.n	80065aa <setvbuf+0xa6>
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	b913      	cbnz	r3, 8006618 <setvbuf+0x114>
 8006612:	4638      	mov	r0, r7
 8006614:	f000 f956 	bl	80068c4 <__sinit>
 8006618:	f1b8 0f01 	cmp.w	r8, #1
 800661c:	bf08      	it	eq
 800661e:	89a3      	ldrheq	r3, [r4, #12]
 8006620:	6026      	str	r6, [r4, #0]
 8006622:	bf04      	itt	eq
 8006624:	f043 0301 	orreq.w	r3, r3, #1
 8006628:	81a3      	strheq	r3, [r4, #12]
 800662a:	89a2      	ldrh	r2, [r4, #12]
 800662c:	f012 0308 	ands.w	r3, r2, #8
 8006630:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006634:	d01c      	beq.n	8006670 <setvbuf+0x16c>
 8006636:	07d3      	lsls	r3, r2, #31
 8006638:	bf41      	itttt	mi
 800663a:	2300      	movmi	r3, #0
 800663c:	426d      	negmi	r5, r5
 800663e:	60a3      	strmi	r3, [r4, #8]
 8006640:	61a5      	strmi	r5, [r4, #24]
 8006642:	bf58      	it	pl
 8006644:	60a5      	strpl	r5, [r4, #8]
 8006646:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006648:	f015 0501 	ands.w	r5, r5, #1
 800664c:	d115      	bne.n	800667a <setvbuf+0x176>
 800664e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006652:	e7c8      	b.n	80065e6 <setvbuf+0xe2>
 8006654:	4648      	mov	r0, r9
 8006656:	f000 fa3b 	bl	8006ad0 <malloc>
 800665a:	4606      	mov	r6, r0
 800665c:	2800      	cmp	r0, #0
 800665e:	d0ae      	beq.n	80065be <setvbuf+0xba>
 8006660:	464d      	mov	r5, r9
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006668:	81a3      	strh	r3, [r4, #12]
 800666a:	e7d0      	b.n	800660e <setvbuf+0x10a>
 800666c:	2500      	movs	r5, #0
 800666e:	e7a8      	b.n	80065c2 <setvbuf+0xbe>
 8006670:	60a3      	str	r3, [r4, #8]
 8006672:	e7e8      	b.n	8006646 <setvbuf+0x142>
 8006674:	f04f 35ff 	mov.w	r5, #4294967295
 8006678:	e7b9      	b.n	80065ee <setvbuf+0xea>
 800667a:	2500      	movs	r5, #0
 800667c:	e7b7      	b.n	80065ee <setvbuf+0xea>
 800667e:	bf00      	nop
 8006680:	2000000c 	.word	0x2000000c
 8006684:	08007624 	.word	0x08007624
 8006688:	08007644 	.word	0x08007644
 800668c:	08007604 	.word	0x08007604

08006690 <__sflush_r>:
 8006690:	898a      	ldrh	r2, [r1, #12]
 8006692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006696:	4605      	mov	r5, r0
 8006698:	0710      	lsls	r0, r2, #28
 800669a:	460c      	mov	r4, r1
 800669c:	d458      	bmi.n	8006750 <__sflush_r+0xc0>
 800669e:	684b      	ldr	r3, [r1, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	dc05      	bgt.n	80066b0 <__sflush_r+0x20>
 80066a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	dc02      	bgt.n	80066b0 <__sflush_r+0x20>
 80066aa:	2000      	movs	r0, #0
 80066ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066b2:	2e00      	cmp	r6, #0
 80066b4:	d0f9      	beq.n	80066aa <__sflush_r+0x1a>
 80066b6:	2300      	movs	r3, #0
 80066b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066bc:	682f      	ldr	r7, [r5, #0]
 80066be:	602b      	str	r3, [r5, #0]
 80066c0:	d032      	beq.n	8006728 <__sflush_r+0x98>
 80066c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	075a      	lsls	r2, r3, #29
 80066c8:	d505      	bpl.n	80066d6 <__sflush_r+0x46>
 80066ca:	6863      	ldr	r3, [r4, #4]
 80066cc:	1ac0      	subs	r0, r0, r3
 80066ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066d0:	b10b      	cbz	r3, 80066d6 <__sflush_r+0x46>
 80066d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066d4:	1ac0      	subs	r0, r0, r3
 80066d6:	2300      	movs	r3, #0
 80066d8:	4602      	mov	r2, r0
 80066da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066dc:	6a21      	ldr	r1, [r4, #32]
 80066de:	4628      	mov	r0, r5
 80066e0:	47b0      	blx	r6
 80066e2:	1c43      	adds	r3, r0, #1
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	d106      	bne.n	80066f6 <__sflush_r+0x66>
 80066e8:	6829      	ldr	r1, [r5, #0]
 80066ea:	291d      	cmp	r1, #29
 80066ec:	d82c      	bhi.n	8006748 <__sflush_r+0xb8>
 80066ee:	4a2a      	ldr	r2, [pc, #168]	; (8006798 <__sflush_r+0x108>)
 80066f0:	40ca      	lsrs	r2, r1
 80066f2:	07d6      	lsls	r6, r2, #31
 80066f4:	d528      	bpl.n	8006748 <__sflush_r+0xb8>
 80066f6:	2200      	movs	r2, #0
 80066f8:	6062      	str	r2, [r4, #4]
 80066fa:	04d9      	lsls	r1, r3, #19
 80066fc:	6922      	ldr	r2, [r4, #16]
 80066fe:	6022      	str	r2, [r4, #0]
 8006700:	d504      	bpl.n	800670c <__sflush_r+0x7c>
 8006702:	1c42      	adds	r2, r0, #1
 8006704:	d101      	bne.n	800670a <__sflush_r+0x7a>
 8006706:	682b      	ldr	r3, [r5, #0]
 8006708:	b903      	cbnz	r3, 800670c <__sflush_r+0x7c>
 800670a:	6560      	str	r0, [r4, #84]	; 0x54
 800670c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800670e:	602f      	str	r7, [r5, #0]
 8006710:	2900      	cmp	r1, #0
 8006712:	d0ca      	beq.n	80066aa <__sflush_r+0x1a>
 8006714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006718:	4299      	cmp	r1, r3
 800671a:	d002      	beq.n	8006722 <__sflush_r+0x92>
 800671c:	4628      	mov	r0, r5
 800671e:	f000 f9df 	bl	8006ae0 <_free_r>
 8006722:	2000      	movs	r0, #0
 8006724:	6360      	str	r0, [r4, #52]	; 0x34
 8006726:	e7c1      	b.n	80066ac <__sflush_r+0x1c>
 8006728:	6a21      	ldr	r1, [r4, #32]
 800672a:	2301      	movs	r3, #1
 800672c:	4628      	mov	r0, r5
 800672e:	47b0      	blx	r6
 8006730:	1c41      	adds	r1, r0, #1
 8006732:	d1c7      	bne.n	80066c4 <__sflush_r+0x34>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0c4      	beq.n	80066c4 <__sflush_r+0x34>
 800673a:	2b1d      	cmp	r3, #29
 800673c:	d001      	beq.n	8006742 <__sflush_r+0xb2>
 800673e:	2b16      	cmp	r3, #22
 8006740:	d101      	bne.n	8006746 <__sflush_r+0xb6>
 8006742:	602f      	str	r7, [r5, #0]
 8006744:	e7b1      	b.n	80066aa <__sflush_r+0x1a>
 8006746:	89a3      	ldrh	r3, [r4, #12]
 8006748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800674c:	81a3      	strh	r3, [r4, #12]
 800674e:	e7ad      	b.n	80066ac <__sflush_r+0x1c>
 8006750:	690f      	ldr	r7, [r1, #16]
 8006752:	2f00      	cmp	r7, #0
 8006754:	d0a9      	beq.n	80066aa <__sflush_r+0x1a>
 8006756:	0793      	lsls	r3, r2, #30
 8006758:	680e      	ldr	r6, [r1, #0]
 800675a:	bf08      	it	eq
 800675c:	694b      	ldreq	r3, [r1, #20]
 800675e:	600f      	str	r7, [r1, #0]
 8006760:	bf18      	it	ne
 8006762:	2300      	movne	r3, #0
 8006764:	eba6 0807 	sub.w	r8, r6, r7
 8006768:	608b      	str	r3, [r1, #8]
 800676a:	f1b8 0f00 	cmp.w	r8, #0
 800676e:	dd9c      	ble.n	80066aa <__sflush_r+0x1a>
 8006770:	6a21      	ldr	r1, [r4, #32]
 8006772:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006774:	4643      	mov	r3, r8
 8006776:	463a      	mov	r2, r7
 8006778:	4628      	mov	r0, r5
 800677a:	47b0      	blx	r6
 800677c:	2800      	cmp	r0, #0
 800677e:	dc06      	bgt.n	800678e <__sflush_r+0xfe>
 8006780:	89a3      	ldrh	r3, [r4, #12]
 8006782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006786:	81a3      	strh	r3, [r4, #12]
 8006788:	f04f 30ff 	mov.w	r0, #4294967295
 800678c:	e78e      	b.n	80066ac <__sflush_r+0x1c>
 800678e:	4407      	add	r7, r0
 8006790:	eba8 0800 	sub.w	r8, r8, r0
 8006794:	e7e9      	b.n	800676a <__sflush_r+0xda>
 8006796:	bf00      	nop
 8006798:	20400001 	.word	0x20400001

0800679c <_fflush_r>:
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	690b      	ldr	r3, [r1, #16]
 80067a0:	4605      	mov	r5, r0
 80067a2:	460c      	mov	r4, r1
 80067a4:	b913      	cbnz	r3, 80067ac <_fflush_r+0x10>
 80067a6:	2500      	movs	r5, #0
 80067a8:	4628      	mov	r0, r5
 80067aa:	bd38      	pop	{r3, r4, r5, pc}
 80067ac:	b118      	cbz	r0, 80067b6 <_fflush_r+0x1a>
 80067ae:	6983      	ldr	r3, [r0, #24]
 80067b0:	b90b      	cbnz	r3, 80067b6 <_fflush_r+0x1a>
 80067b2:	f000 f887 	bl	80068c4 <__sinit>
 80067b6:	4b14      	ldr	r3, [pc, #80]	; (8006808 <_fflush_r+0x6c>)
 80067b8:	429c      	cmp	r4, r3
 80067ba:	d11b      	bne.n	80067f4 <_fflush_r+0x58>
 80067bc:	686c      	ldr	r4, [r5, #4]
 80067be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0ef      	beq.n	80067a6 <_fflush_r+0xa>
 80067c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067c8:	07d0      	lsls	r0, r2, #31
 80067ca:	d404      	bmi.n	80067d6 <_fflush_r+0x3a>
 80067cc:	0599      	lsls	r1, r3, #22
 80067ce:	d402      	bmi.n	80067d6 <_fflush_r+0x3a>
 80067d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067d2:	f000 f915 	bl	8006a00 <__retarget_lock_acquire_recursive>
 80067d6:	4628      	mov	r0, r5
 80067d8:	4621      	mov	r1, r4
 80067da:	f7ff ff59 	bl	8006690 <__sflush_r>
 80067de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067e0:	07da      	lsls	r2, r3, #31
 80067e2:	4605      	mov	r5, r0
 80067e4:	d4e0      	bmi.n	80067a8 <_fflush_r+0xc>
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	059b      	lsls	r3, r3, #22
 80067ea:	d4dd      	bmi.n	80067a8 <_fflush_r+0xc>
 80067ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ee:	f000 f908 	bl	8006a02 <__retarget_lock_release_recursive>
 80067f2:	e7d9      	b.n	80067a8 <_fflush_r+0xc>
 80067f4:	4b05      	ldr	r3, [pc, #20]	; (800680c <_fflush_r+0x70>)
 80067f6:	429c      	cmp	r4, r3
 80067f8:	d101      	bne.n	80067fe <_fflush_r+0x62>
 80067fa:	68ac      	ldr	r4, [r5, #8]
 80067fc:	e7df      	b.n	80067be <_fflush_r+0x22>
 80067fe:	4b04      	ldr	r3, [pc, #16]	; (8006810 <_fflush_r+0x74>)
 8006800:	429c      	cmp	r4, r3
 8006802:	bf08      	it	eq
 8006804:	68ec      	ldreq	r4, [r5, #12]
 8006806:	e7da      	b.n	80067be <_fflush_r+0x22>
 8006808:	08007624 	.word	0x08007624
 800680c:	08007644 	.word	0x08007644
 8006810:	08007604 	.word	0x08007604

08006814 <std>:
 8006814:	2300      	movs	r3, #0
 8006816:	b510      	push	{r4, lr}
 8006818:	4604      	mov	r4, r0
 800681a:	e9c0 3300 	strd	r3, r3, [r0]
 800681e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006822:	6083      	str	r3, [r0, #8]
 8006824:	8181      	strh	r1, [r0, #12]
 8006826:	6643      	str	r3, [r0, #100]	; 0x64
 8006828:	81c2      	strh	r2, [r0, #14]
 800682a:	6183      	str	r3, [r0, #24]
 800682c:	4619      	mov	r1, r3
 800682e:	2208      	movs	r2, #8
 8006830:	305c      	adds	r0, #92	; 0x5c
 8006832:	f7ff fe3f 	bl	80064b4 <memset>
 8006836:	4b05      	ldr	r3, [pc, #20]	; (800684c <std+0x38>)
 8006838:	6263      	str	r3, [r4, #36]	; 0x24
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <std+0x3c>)
 800683c:	62a3      	str	r3, [r4, #40]	; 0x28
 800683e:	4b05      	ldr	r3, [pc, #20]	; (8006854 <std+0x40>)
 8006840:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006842:	4b05      	ldr	r3, [pc, #20]	; (8006858 <std+0x44>)
 8006844:	6224      	str	r4, [r4, #32]
 8006846:	6323      	str	r3, [r4, #48]	; 0x30
 8006848:	bd10      	pop	{r4, pc}
 800684a:	bf00      	nop
 800684c:	0800729d 	.word	0x0800729d
 8006850:	080072bf 	.word	0x080072bf
 8006854:	080072f7 	.word	0x080072f7
 8006858:	0800731b 	.word	0x0800731b

0800685c <_cleanup_r>:
 800685c:	4901      	ldr	r1, [pc, #4]	; (8006864 <_cleanup_r+0x8>)
 800685e:	f000 b8af 	b.w	80069c0 <_fwalk_reent>
 8006862:	bf00      	nop
 8006864:	0800679d 	.word	0x0800679d

08006868 <__sfmoreglue>:
 8006868:	b570      	push	{r4, r5, r6, lr}
 800686a:	2268      	movs	r2, #104	; 0x68
 800686c:	1e4d      	subs	r5, r1, #1
 800686e:	4355      	muls	r5, r2
 8006870:	460e      	mov	r6, r1
 8006872:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006876:	f000 f99f 	bl	8006bb8 <_malloc_r>
 800687a:	4604      	mov	r4, r0
 800687c:	b140      	cbz	r0, 8006890 <__sfmoreglue+0x28>
 800687e:	2100      	movs	r1, #0
 8006880:	e9c0 1600 	strd	r1, r6, [r0]
 8006884:	300c      	adds	r0, #12
 8006886:	60a0      	str	r0, [r4, #8]
 8006888:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800688c:	f7ff fe12 	bl	80064b4 <memset>
 8006890:	4620      	mov	r0, r4
 8006892:	bd70      	pop	{r4, r5, r6, pc}

08006894 <__sfp_lock_acquire>:
 8006894:	4801      	ldr	r0, [pc, #4]	; (800689c <__sfp_lock_acquire+0x8>)
 8006896:	f000 b8b3 	b.w	8006a00 <__retarget_lock_acquire_recursive>
 800689a:	bf00      	nop
 800689c:	200002d9 	.word	0x200002d9

080068a0 <__sfp_lock_release>:
 80068a0:	4801      	ldr	r0, [pc, #4]	; (80068a8 <__sfp_lock_release+0x8>)
 80068a2:	f000 b8ae 	b.w	8006a02 <__retarget_lock_release_recursive>
 80068a6:	bf00      	nop
 80068a8:	200002d9 	.word	0x200002d9

080068ac <__sinit_lock_acquire>:
 80068ac:	4801      	ldr	r0, [pc, #4]	; (80068b4 <__sinit_lock_acquire+0x8>)
 80068ae:	f000 b8a7 	b.w	8006a00 <__retarget_lock_acquire_recursive>
 80068b2:	bf00      	nop
 80068b4:	200002da 	.word	0x200002da

080068b8 <__sinit_lock_release>:
 80068b8:	4801      	ldr	r0, [pc, #4]	; (80068c0 <__sinit_lock_release+0x8>)
 80068ba:	f000 b8a2 	b.w	8006a02 <__retarget_lock_release_recursive>
 80068be:	bf00      	nop
 80068c0:	200002da 	.word	0x200002da

080068c4 <__sinit>:
 80068c4:	b510      	push	{r4, lr}
 80068c6:	4604      	mov	r4, r0
 80068c8:	f7ff fff0 	bl	80068ac <__sinit_lock_acquire>
 80068cc:	69a3      	ldr	r3, [r4, #24]
 80068ce:	b11b      	cbz	r3, 80068d8 <__sinit+0x14>
 80068d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d4:	f7ff bff0 	b.w	80068b8 <__sinit_lock_release>
 80068d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068dc:	6523      	str	r3, [r4, #80]	; 0x50
 80068de:	4b13      	ldr	r3, [pc, #76]	; (800692c <__sinit+0x68>)
 80068e0:	4a13      	ldr	r2, [pc, #76]	; (8006930 <__sinit+0x6c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80068e6:	42a3      	cmp	r3, r4
 80068e8:	bf04      	itt	eq
 80068ea:	2301      	moveq	r3, #1
 80068ec:	61a3      	streq	r3, [r4, #24]
 80068ee:	4620      	mov	r0, r4
 80068f0:	f000 f820 	bl	8006934 <__sfp>
 80068f4:	6060      	str	r0, [r4, #4]
 80068f6:	4620      	mov	r0, r4
 80068f8:	f000 f81c 	bl	8006934 <__sfp>
 80068fc:	60a0      	str	r0, [r4, #8]
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 f818 	bl	8006934 <__sfp>
 8006904:	2200      	movs	r2, #0
 8006906:	60e0      	str	r0, [r4, #12]
 8006908:	2104      	movs	r1, #4
 800690a:	6860      	ldr	r0, [r4, #4]
 800690c:	f7ff ff82 	bl	8006814 <std>
 8006910:	68a0      	ldr	r0, [r4, #8]
 8006912:	2201      	movs	r2, #1
 8006914:	2109      	movs	r1, #9
 8006916:	f7ff ff7d 	bl	8006814 <std>
 800691a:	68e0      	ldr	r0, [r4, #12]
 800691c:	2202      	movs	r2, #2
 800691e:	2112      	movs	r1, #18
 8006920:	f7ff ff78 	bl	8006814 <std>
 8006924:	2301      	movs	r3, #1
 8006926:	61a3      	str	r3, [r4, #24]
 8006928:	e7d2      	b.n	80068d0 <__sinit+0xc>
 800692a:	bf00      	nop
 800692c:	08007600 	.word	0x08007600
 8006930:	0800685d 	.word	0x0800685d

08006934 <__sfp>:
 8006934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006936:	4607      	mov	r7, r0
 8006938:	f7ff ffac 	bl	8006894 <__sfp_lock_acquire>
 800693c:	4b1e      	ldr	r3, [pc, #120]	; (80069b8 <__sfp+0x84>)
 800693e:	681e      	ldr	r6, [r3, #0]
 8006940:	69b3      	ldr	r3, [r6, #24]
 8006942:	b913      	cbnz	r3, 800694a <__sfp+0x16>
 8006944:	4630      	mov	r0, r6
 8006946:	f7ff ffbd 	bl	80068c4 <__sinit>
 800694a:	3648      	adds	r6, #72	; 0x48
 800694c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006950:	3b01      	subs	r3, #1
 8006952:	d503      	bpl.n	800695c <__sfp+0x28>
 8006954:	6833      	ldr	r3, [r6, #0]
 8006956:	b30b      	cbz	r3, 800699c <__sfp+0x68>
 8006958:	6836      	ldr	r6, [r6, #0]
 800695a:	e7f7      	b.n	800694c <__sfp+0x18>
 800695c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006960:	b9d5      	cbnz	r5, 8006998 <__sfp+0x64>
 8006962:	4b16      	ldr	r3, [pc, #88]	; (80069bc <__sfp+0x88>)
 8006964:	60e3      	str	r3, [r4, #12]
 8006966:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800696a:	6665      	str	r5, [r4, #100]	; 0x64
 800696c:	f000 f847 	bl	80069fe <__retarget_lock_init_recursive>
 8006970:	f7ff ff96 	bl	80068a0 <__sfp_lock_release>
 8006974:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006978:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800697c:	6025      	str	r5, [r4, #0]
 800697e:	61a5      	str	r5, [r4, #24]
 8006980:	2208      	movs	r2, #8
 8006982:	4629      	mov	r1, r5
 8006984:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006988:	f7ff fd94 	bl	80064b4 <memset>
 800698c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006990:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006994:	4620      	mov	r0, r4
 8006996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006998:	3468      	adds	r4, #104	; 0x68
 800699a:	e7d9      	b.n	8006950 <__sfp+0x1c>
 800699c:	2104      	movs	r1, #4
 800699e:	4638      	mov	r0, r7
 80069a0:	f7ff ff62 	bl	8006868 <__sfmoreglue>
 80069a4:	4604      	mov	r4, r0
 80069a6:	6030      	str	r0, [r6, #0]
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d1d5      	bne.n	8006958 <__sfp+0x24>
 80069ac:	f7ff ff78 	bl	80068a0 <__sfp_lock_release>
 80069b0:	230c      	movs	r3, #12
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	e7ee      	b.n	8006994 <__sfp+0x60>
 80069b6:	bf00      	nop
 80069b8:	08007600 	.word	0x08007600
 80069bc:	ffff0001 	.word	0xffff0001

080069c0 <_fwalk_reent>:
 80069c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069c4:	4606      	mov	r6, r0
 80069c6:	4688      	mov	r8, r1
 80069c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069cc:	2700      	movs	r7, #0
 80069ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069d2:	f1b9 0901 	subs.w	r9, r9, #1
 80069d6:	d505      	bpl.n	80069e4 <_fwalk_reent+0x24>
 80069d8:	6824      	ldr	r4, [r4, #0]
 80069da:	2c00      	cmp	r4, #0
 80069dc:	d1f7      	bne.n	80069ce <_fwalk_reent+0xe>
 80069de:	4638      	mov	r0, r7
 80069e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069e4:	89ab      	ldrh	r3, [r5, #12]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d907      	bls.n	80069fa <_fwalk_reent+0x3a>
 80069ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069ee:	3301      	adds	r3, #1
 80069f0:	d003      	beq.n	80069fa <_fwalk_reent+0x3a>
 80069f2:	4629      	mov	r1, r5
 80069f4:	4630      	mov	r0, r6
 80069f6:	47c0      	blx	r8
 80069f8:	4307      	orrs	r7, r0
 80069fa:	3568      	adds	r5, #104	; 0x68
 80069fc:	e7e9      	b.n	80069d2 <_fwalk_reent+0x12>

080069fe <__retarget_lock_init_recursive>:
 80069fe:	4770      	bx	lr

08006a00 <__retarget_lock_acquire_recursive>:
 8006a00:	4770      	bx	lr

08006a02 <__retarget_lock_release_recursive>:
 8006a02:	4770      	bx	lr

08006a04 <__swhatbuf_r>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	460e      	mov	r6, r1
 8006a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a0c:	2900      	cmp	r1, #0
 8006a0e:	b096      	sub	sp, #88	; 0x58
 8006a10:	4614      	mov	r4, r2
 8006a12:	461d      	mov	r5, r3
 8006a14:	da08      	bge.n	8006a28 <__swhatbuf_r+0x24>
 8006a16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	602a      	str	r2, [r5, #0]
 8006a1e:	061a      	lsls	r2, r3, #24
 8006a20:	d410      	bmi.n	8006a44 <__swhatbuf_r+0x40>
 8006a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a26:	e00e      	b.n	8006a46 <__swhatbuf_r+0x42>
 8006a28:	466a      	mov	r2, sp
 8006a2a:	f000 fd5d 	bl	80074e8 <_fstat_r>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	dbf1      	blt.n	8006a16 <__swhatbuf_r+0x12>
 8006a32:	9a01      	ldr	r2, [sp, #4]
 8006a34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a3c:	425a      	negs	r2, r3
 8006a3e:	415a      	adcs	r2, r3
 8006a40:	602a      	str	r2, [r5, #0]
 8006a42:	e7ee      	b.n	8006a22 <__swhatbuf_r+0x1e>
 8006a44:	2340      	movs	r3, #64	; 0x40
 8006a46:	2000      	movs	r0, #0
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	b016      	add	sp, #88	; 0x58
 8006a4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a50 <__smakebuf_r>:
 8006a50:	898b      	ldrh	r3, [r1, #12]
 8006a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a54:	079d      	lsls	r5, r3, #30
 8006a56:	4606      	mov	r6, r0
 8006a58:	460c      	mov	r4, r1
 8006a5a:	d507      	bpl.n	8006a6c <__smakebuf_r+0x1c>
 8006a5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	6123      	str	r3, [r4, #16]
 8006a64:	2301      	movs	r3, #1
 8006a66:	6163      	str	r3, [r4, #20]
 8006a68:	b002      	add	sp, #8
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
 8006a6c:	ab01      	add	r3, sp, #4
 8006a6e:	466a      	mov	r2, sp
 8006a70:	f7ff ffc8 	bl	8006a04 <__swhatbuf_r>
 8006a74:	9900      	ldr	r1, [sp, #0]
 8006a76:	4605      	mov	r5, r0
 8006a78:	4630      	mov	r0, r6
 8006a7a:	f000 f89d 	bl	8006bb8 <_malloc_r>
 8006a7e:	b948      	cbnz	r0, 8006a94 <__smakebuf_r+0x44>
 8006a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a84:	059a      	lsls	r2, r3, #22
 8006a86:	d4ef      	bmi.n	8006a68 <__smakebuf_r+0x18>
 8006a88:	f023 0303 	bic.w	r3, r3, #3
 8006a8c:	f043 0302 	orr.w	r3, r3, #2
 8006a90:	81a3      	strh	r3, [r4, #12]
 8006a92:	e7e3      	b.n	8006a5c <__smakebuf_r+0xc>
 8006a94:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <__smakebuf_r+0x7c>)
 8006a96:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	6020      	str	r0, [r4, #0]
 8006a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	9b00      	ldr	r3, [sp, #0]
 8006aa4:	6163      	str	r3, [r4, #20]
 8006aa6:	9b01      	ldr	r3, [sp, #4]
 8006aa8:	6120      	str	r0, [r4, #16]
 8006aaa:	b15b      	cbz	r3, 8006ac4 <__smakebuf_r+0x74>
 8006aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	f000 fd2b 	bl	800750c <_isatty_r>
 8006ab6:	b128      	cbz	r0, 8006ac4 <__smakebuf_r+0x74>
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	f023 0303 	bic.w	r3, r3, #3
 8006abe:	f043 0301 	orr.w	r3, r3, #1
 8006ac2:	81a3      	strh	r3, [r4, #12]
 8006ac4:	89a0      	ldrh	r0, [r4, #12]
 8006ac6:	4305      	orrs	r5, r0
 8006ac8:	81a5      	strh	r5, [r4, #12]
 8006aca:	e7cd      	b.n	8006a68 <__smakebuf_r+0x18>
 8006acc:	0800685d 	.word	0x0800685d

08006ad0 <malloc>:
 8006ad0:	4b02      	ldr	r3, [pc, #8]	; (8006adc <malloc+0xc>)
 8006ad2:	4601      	mov	r1, r0
 8006ad4:	6818      	ldr	r0, [r3, #0]
 8006ad6:	f000 b86f 	b.w	8006bb8 <_malloc_r>
 8006ada:	bf00      	nop
 8006adc:	2000000c 	.word	0x2000000c

08006ae0 <_free_r>:
 8006ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ae2:	2900      	cmp	r1, #0
 8006ae4:	d044      	beq.n	8006b70 <_free_r+0x90>
 8006ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aea:	9001      	str	r0, [sp, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f1a1 0404 	sub.w	r4, r1, #4
 8006af2:	bfb8      	it	lt
 8006af4:	18e4      	addlt	r4, r4, r3
 8006af6:	f000 fd2b 	bl	8007550 <__malloc_lock>
 8006afa:	4a1e      	ldr	r2, [pc, #120]	; (8006b74 <_free_r+0x94>)
 8006afc:	9801      	ldr	r0, [sp, #4]
 8006afe:	6813      	ldr	r3, [r2, #0]
 8006b00:	b933      	cbnz	r3, 8006b10 <_free_r+0x30>
 8006b02:	6063      	str	r3, [r4, #4]
 8006b04:	6014      	str	r4, [r2, #0]
 8006b06:	b003      	add	sp, #12
 8006b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b0c:	f000 bd26 	b.w	800755c <__malloc_unlock>
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	d908      	bls.n	8006b26 <_free_r+0x46>
 8006b14:	6825      	ldr	r5, [r4, #0]
 8006b16:	1961      	adds	r1, r4, r5
 8006b18:	428b      	cmp	r3, r1
 8006b1a:	bf01      	itttt	eq
 8006b1c:	6819      	ldreq	r1, [r3, #0]
 8006b1e:	685b      	ldreq	r3, [r3, #4]
 8006b20:	1949      	addeq	r1, r1, r5
 8006b22:	6021      	streq	r1, [r4, #0]
 8006b24:	e7ed      	b.n	8006b02 <_free_r+0x22>
 8006b26:	461a      	mov	r2, r3
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	b10b      	cbz	r3, 8006b30 <_free_r+0x50>
 8006b2c:	42a3      	cmp	r3, r4
 8006b2e:	d9fa      	bls.n	8006b26 <_free_r+0x46>
 8006b30:	6811      	ldr	r1, [r2, #0]
 8006b32:	1855      	adds	r5, r2, r1
 8006b34:	42a5      	cmp	r5, r4
 8006b36:	d10b      	bne.n	8006b50 <_free_r+0x70>
 8006b38:	6824      	ldr	r4, [r4, #0]
 8006b3a:	4421      	add	r1, r4
 8006b3c:	1854      	adds	r4, r2, r1
 8006b3e:	42a3      	cmp	r3, r4
 8006b40:	6011      	str	r1, [r2, #0]
 8006b42:	d1e0      	bne.n	8006b06 <_free_r+0x26>
 8006b44:	681c      	ldr	r4, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	6053      	str	r3, [r2, #4]
 8006b4a:	4421      	add	r1, r4
 8006b4c:	6011      	str	r1, [r2, #0]
 8006b4e:	e7da      	b.n	8006b06 <_free_r+0x26>
 8006b50:	d902      	bls.n	8006b58 <_free_r+0x78>
 8006b52:	230c      	movs	r3, #12
 8006b54:	6003      	str	r3, [r0, #0]
 8006b56:	e7d6      	b.n	8006b06 <_free_r+0x26>
 8006b58:	6825      	ldr	r5, [r4, #0]
 8006b5a:	1961      	adds	r1, r4, r5
 8006b5c:	428b      	cmp	r3, r1
 8006b5e:	bf04      	itt	eq
 8006b60:	6819      	ldreq	r1, [r3, #0]
 8006b62:	685b      	ldreq	r3, [r3, #4]
 8006b64:	6063      	str	r3, [r4, #4]
 8006b66:	bf04      	itt	eq
 8006b68:	1949      	addeq	r1, r1, r5
 8006b6a:	6021      	streq	r1, [r4, #0]
 8006b6c:	6054      	str	r4, [r2, #4]
 8006b6e:	e7ca      	b.n	8006b06 <_free_r+0x26>
 8006b70:	b003      	add	sp, #12
 8006b72:	bd30      	pop	{r4, r5, pc}
 8006b74:	200002dc 	.word	0x200002dc

08006b78 <sbrk_aligned>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	4e0e      	ldr	r6, [pc, #56]	; (8006bb4 <sbrk_aligned+0x3c>)
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	6831      	ldr	r1, [r6, #0]
 8006b80:	4605      	mov	r5, r0
 8006b82:	b911      	cbnz	r1, 8006b8a <sbrk_aligned+0x12>
 8006b84:	f000 fb7a 	bl	800727c <_sbrk_r>
 8006b88:	6030      	str	r0, [r6, #0]
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	f000 fb75 	bl	800727c <_sbrk_r>
 8006b92:	1c43      	adds	r3, r0, #1
 8006b94:	d00a      	beq.n	8006bac <sbrk_aligned+0x34>
 8006b96:	1cc4      	adds	r4, r0, #3
 8006b98:	f024 0403 	bic.w	r4, r4, #3
 8006b9c:	42a0      	cmp	r0, r4
 8006b9e:	d007      	beq.n	8006bb0 <sbrk_aligned+0x38>
 8006ba0:	1a21      	subs	r1, r4, r0
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f000 fb6a 	bl	800727c <_sbrk_r>
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d101      	bne.n	8006bb0 <sbrk_aligned+0x38>
 8006bac:	f04f 34ff 	mov.w	r4, #4294967295
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	bd70      	pop	{r4, r5, r6, pc}
 8006bb4:	200002e0 	.word	0x200002e0

08006bb8 <_malloc_r>:
 8006bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bbc:	1ccd      	adds	r5, r1, #3
 8006bbe:	f025 0503 	bic.w	r5, r5, #3
 8006bc2:	3508      	adds	r5, #8
 8006bc4:	2d0c      	cmp	r5, #12
 8006bc6:	bf38      	it	cc
 8006bc8:	250c      	movcc	r5, #12
 8006bca:	2d00      	cmp	r5, #0
 8006bcc:	4607      	mov	r7, r0
 8006bce:	db01      	blt.n	8006bd4 <_malloc_r+0x1c>
 8006bd0:	42a9      	cmp	r1, r5
 8006bd2:	d905      	bls.n	8006be0 <_malloc_r+0x28>
 8006bd4:	230c      	movs	r3, #12
 8006bd6:	603b      	str	r3, [r7, #0]
 8006bd8:	2600      	movs	r6, #0
 8006bda:	4630      	mov	r0, r6
 8006bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006be0:	4e2e      	ldr	r6, [pc, #184]	; (8006c9c <_malloc_r+0xe4>)
 8006be2:	f000 fcb5 	bl	8007550 <__malloc_lock>
 8006be6:	6833      	ldr	r3, [r6, #0]
 8006be8:	461c      	mov	r4, r3
 8006bea:	bb34      	cbnz	r4, 8006c3a <_malloc_r+0x82>
 8006bec:	4629      	mov	r1, r5
 8006bee:	4638      	mov	r0, r7
 8006bf0:	f7ff ffc2 	bl	8006b78 <sbrk_aligned>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	d14d      	bne.n	8006c96 <_malloc_r+0xde>
 8006bfa:	6834      	ldr	r4, [r6, #0]
 8006bfc:	4626      	mov	r6, r4
 8006bfe:	2e00      	cmp	r6, #0
 8006c00:	d140      	bne.n	8006c84 <_malloc_r+0xcc>
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	4631      	mov	r1, r6
 8006c06:	4638      	mov	r0, r7
 8006c08:	eb04 0803 	add.w	r8, r4, r3
 8006c0c:	f000 fb36 	bl	800727c <_sbrk_r>
 8006c10:	4580      	cmp	r8, r0
 8006c12:	d13a      	bne.n	8006c8a <_malloc_r+0xd2>
 8006c14:	6821      	ldr	r1, [r4, #0]
 8006c16:	3503      	adds	r5, #3
 8006c18:	1a6d      	subs	r5, r5, r1
 8006c1a:	f025 0503 	bic.w	r5, r5, #3
 8006c1e:	3508      	adds	r5, #8
 8006c20:	2d0c      	cmp	r5, #12
 8006c22:	bf38      	it	cc
 8006c24:	250c      	movcc	r5, #12
 8006c26:	4629      	mov	r1, r5
 8006c28:	4638      	mov	r0, r7
 8006c2a:	f7ff ffa5 	bl	8006b78 <sbrk_aligned>
 8006c2e:	3001      	adds	r0, #1
 8006c30:	d02b      	beq.n	8006c8a <_malloc_r+0xd2>
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	442b      	add	r3, r5
 8006c36:	6023      	str	r3, [r4, #0]
 8006c38:	e00e      	b.n	8006c58 <_malloc_r+0xa0>
 8006c3a:	6822      	ldr	r2, [r4, #0]
 8006c3c:	1b52      	subs	r2, r2, r5
 8006c3e:	d41e      	bmi.n	8006c7e <_malloc_r+0xc6>
 8006c40:	2a0b      	cmp	r2, #11
 8006c42:	d916      	bls.n	8006c72 <_malloc_r+0xba>
 8006c44:	1961      	adds	r1, r4, r5
 8006c46:	42a3      	cmp	r3, r4
 8006c48:	6025      	str	r5, [r4, #0]
 8006c4a:	bf18      	it	ne
 8006c4c:	6059      	strne	r1, [r3, #4]
 8006c4e:	6863      	ldr	r3, [r4, #4]
 8006c50:	bf08      	it	eq
 8006c52:	6031      	streq	r1, [r6, #0]
 8006c54:	5162      	str	r2, [r4, r5]
 8006c56:	604b      	str	r3, [r1, #4]
 8006c58:	4638      	mov	r0, r7
 8006c5a:	f104 060b 	add.w	r6, r4, #11
 8006c5e:	f000 fc7d 	bl	800755c <__malloc_unlock>
 8006c62:	f026 0607 	bic.w	r6, r6, #7
 8006c66:	1d23      	adds	r3, r4, #4
 8006c68:	1af2      	subs	r2, r6, r3
 8006c6a:	d0b6      	beq.n	8006bda <_malloc_r+0x22>
 8006c6c:	1b9b      	subs	r3, r3, r6
 8006c6e:	50a3      	str	r3, [r4, r2]
 8006c70:	e7b3      	b.n	8006bda <_malloc_r+0x22>
 8006c72:	6862      	ldr	r2, [r4, #4]
 8006c74:	42a3      	cmp	r3, r4
 8006c76:	bf0c      	ite	eq
 8006c78:	6032      	streq	r2, [r6, #0]
 8006c7a:	605a      	strne	r2, [r3, #4]
 8006c7c:	e7ec      	b.n	8006c58 <_malloc_r+0xa0>
 8006c7e:	4623      	mov	r3, r4
 8006c80:	6864      	ldr	r4, [r4, #4]
 8006c82:	e7b2      	b.n	8006bea <_malloc_r+0x32>
 8006c84:	4634      	mov	r4, r6
 8006c86:	6876      	ldr	r6, [r6, #4]
 8006c88:	e7b9      	b.n	8006bfe <_malloc_r+0x46>
 8006c8a:	230c      	movs	r3, #12
 8006c8c:	603b      	str	r3, [r7, #0]
 8006c8e:	4638      	mov	r0, r7
 8006c90:	f000 fc64 	bl	800755c <__malloc_unlock>
 8006c94:	e7a1      	b.n	8006bda <_malloc_r+0x22>
 8006c96:	6025      	str	r5, [r4, #0]
 8006c98:	e7de      	b.n	8006c58 <_malloc_r+0xa0>
 8006c9a:	bf00      	nop
 8006c9c:	200002dc 	.word	0x200002dc

08006ca0 <__sfputc_r>:
 8006ca0:	6893      	ldr	r3, [r2, #8]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	b410      	push	{r4}
 8006ca8:	6093      	str	r3, [r2, #8]
 8006caa:	da08      	bge.n	8006cbe <__sfputc_r+0x1e>
 8006cac:	6994      	ldr	r4, [r2, #24]
 8006cae:	42a3      	cmp	r3, r4
 8006cb0:	db01      	blt.n	8006cb6 <__sfputc_r+0x16>
 8006cb2:	290a      	cmp	r1, #10
 8006cb4:	d103      	bne.n	8006cbe <__sfputc_r+0x1e>
 8006cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cba:	f000 bb33 	b.w	8007324 <__swbuf_r>
 8006cbe:	6813      	ldr	r3, [r2, #0]
 8006cc0:	1c58      	adds	r0, r3, #1
 8006cc2:	6010      	str	r0, [r2, #0]
 8006cc4:	7019      	strb	r1, [r3, #0]
 8006cc6:	4608      	mov	r0, r1
 8006cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <__sfputs_r>:
 8006cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd0:	4606      	mov	r6, r0
 8006cd2:	460f      	mov	r7, r1
 8006cd4:	4614      	mov	r4, r2
 8006cd6:	18d5      	adds	r5, r2, r3
 8006cd8:	42ac      	cmp	r4, r5
 8006cda:	d101      	bne.n	8006ce0 <__sfputs_r+0x12>
 8006cdc:	2000      	movs	r0, #0
 8006cde:	e007      	b.n	8006cf0 <__sfputs_r+0x22>
 8006ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce4:	463a      	mov	r2, r7
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f7ff ffda 	bl	8006ca0 <__sfputc_r>
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	d1f3      	bne.n	8006cd8 <__sfputs_r+0xa>
 8006cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cf4 <_vfiprintf_r>:
 8006cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf8:	460d      	mov	r5, r1
 8006cfa:	b09d      	sub	sp, #116	; 0x74
 8006cfc:	4614      	mov	r4, r2
 8006cfe:	4698      	mov	r8, r3
 8006d00:	4606      	mov	r6, r0
 8006d02:	b118      	cbz	r0, 8006d0c <_vfiprintf_r+0x18>
 8006d04:	6983      	ldr	r3, [r0, #24]
 8006d06:	b90b      	cbnz	r3, 8006d0c <_vfiprintf_r+0x18>
 8006d08:	f7ff fddc 	bl	80068c4 <__sinit>
 8006d0c:	4b89      	ldr	r3, [pc, #548]	; (8006f34 <_vfiprintf_r+0x240>)
 8006d0e:	429d      	cmp	r5, r3
 8006d10:	d11b      	bne.n	8006d4a <_vfiprintf_r+0x56>
 8006d12:	6875      	ldr	r5, [r6, #4]
 8006d14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d16:	07d9      	lsls	r1, r3, #31
 8006d18:	d405      	bmi.n	8006d26 <_vfiprintf_r+0x32>
 8006d1a:	89ab      	ldrh	r3, [r5, #12]
 8006d1c:	059a      	lsls	r2, r3, #22
 8006d1e:	d402      	bmi.n	8006d26 <_vfiprintf_r+0x32>
 8006d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d22:	f7ff fe6d 	bl	8006a00 <__retarget_lock_acquire_recursive>
 8006d26:	89ab      	ldrh	r3, [r5, #12]
 8006d28:	071b      	lsls	r3, r3, #28
 8006d2a:	d501      	bpl.n	8006d30 <_vfiprintf_r+0x3c>
 8006d2c:	692b      	ldr	r3, [r5, #16]
 8006d2e:	b9eb      	cbnz	r3, 8006d6c <_vfiprintf_r+0x78>
 8006d30:	4629      	mov	r1, r5
 8006d32:	4630      	mov	r0, r6
 8006d34:	f000 fb5a 	bl	80073ec <__swsetup_r>
 8006d38:	b1c0      	cbz	r0, 8006d6c <_vfiprintf_r+0x78>
 8006d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d3c:	07dc      	lsls	r4, r3, #31
 8006d3e:	d50e      	bpl.n	8006d5e <_vfiprintf_r+0x6a>
 8006d40:	f04f 30ff 	mov.w	r0, #4294967295
 8006d44:	b01d      	add	sp, #116	; 0x74
 8006d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4a:	4b7b      	ldr	r3, [pc, #492]	; (8006f38 <_vfiprintf_r+0x244>)
 8006d4c:	429d      	cmp	r5, r3
 8006d4e:	d101      	bne.n	8006d54 <_vfiprintf_r+0x60>
 8006d50:	68b5      	ldr	r5, [r6, #8]
 8006d52:	e7df      	b.n	8006d14 <_vfiprintf_r+0x20>
 8006d54:	4b79      	ldr	r3, [pc, #484]	; (8006f3c <_vfiprintf_r+0x248>)
 8006d56:	429d      	cmp	r5, r3
 8006d58:	bf08      	it	eq
 8006d5a:	68f5      	ldreq	r5, [r6, #12]
 8006d5c:	e7da      	b.n	8006d14 <_vfiprintf_r+0x20>
 8006d5e:	89ab      	ldrh	r3, [r5, #12]
 8006d60:	0598      	lsls	r0, r3, #22
 8006d62:	d4ed      	bmi.n	8006d40 <_vfiprintf_r+0x4c>
 8006d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d66:	f7ff fe4c 	bl	8006a02 <__retarget_lock_release_recursive>
 8006d6a:	e7e9      	b.n	8006d40 <_vfiprintf_r+0x4c>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d70:	2320      	movs	r3, #32
 8006d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d7a:	2330      	movs	r3, #48	; 0x30
 8006d7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f40 <_vfiprintf_r+0x24c>
 8006d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d84:	f04f 0901 	mov.w	r9, #1
 8006d88:	4623      	mov	r3, r4
 8006d8a:	469a      	mov	sl, r3
 8006d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d90:	b10a      	cbz	r2, 8006d96 <_vfiprintf_r+0xa2>
 8006d92:	2a25      	cmp	r2, #37	; 0x25
 8006d94:	d1f9      	bne.n	8006d8a <_vfiprintf_r+0x96>
 8006d96:	ebba 0b04 	subs.w	fp, sl, r4
 8006d9a:	d00b      	beq.n	8006db4 <_vfiprintf_r+0xc0>
 8006d9c:	465b      	mov	r3, fp
 8006d9e:	4622      	mov	r2, r4
 8006da0:	4629      	mov	r1, r5
 8006da2:	4630      	mov	r0, r6
 8006da4:	f7ff ff93 	bl	8006cce <__sfputs_r>
 8006da8:	3001      	adds	r0, #1
 8006daa:	f000 80aa 	beq.w	8006f02 <_vfiprintf_r+0x20e>
 8006dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006db0:	445a      	add	r2, fp
 8006db2:	9209      	str	r2, [sp, #36]	; 0x24
 8006db4:	f89a 3000 	ldrb.w	r3, [sl]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 80a2 	beq.w	8006f02 <_vfiprintf_r+0x20e>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dc8:	f10a 0a01 	add.w	sl, sl, #1
 8006dcc:	9304      	str	r3, [sp, #16]
 8006dce:	9307      	str	r3, [sp, #28]
 8006dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8006dd6:	4654      	mov	r4, sl
 8006dd8:	2205      	movs	r2, #5
 8006dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dde:	4858      	ldr	r0, [pc, #352]	; (8006f40 <_vfiprintf_r+0x24c>)
 8006de0:	f7f9 fa1e 	bl	8000220 <memchr>
 8006de4:	9a04      	ldr	r2, [sp, #16]
 8006de6:	b9d8      	cbnz	r0, 8006e20 <_vfiprintf_r+0x12c>
 8006de8:	06d1      	lsls	r1, r2, #27
 8006dea:	bf44      	itt	mi
 8006dec:	2320      	movmi	r3, #32
 8006dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006df2:	0713      	lsls	r3, r2, #28
 8006df4:	bf44      	itt	mi
 8006df6:	232b      	movmi	r3, #43	; 0x2b
 8006df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8006e00:	2b2a      	cmp	r3, #42	; 0x2a
 8006e02:	d015      	beq.n	8006e30 <_vfiprintf_r+0x13c>
 8006e04:	9a07      	ldr	r2, [sp, #28]
 8006e06:	4654      	mov	r4, sl
 8006e08:	2000      	movs	r0, #0
 8006e0a:	f04f 0c0a 	mov.w	ip, #10
 8006e0e:	4621      	mov	r1, r4
 8006e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e14:	3b30      	subs	r3, #48	; 0x30
 8006e16:	2b09      	cmp	r3, #9
 8006e18:	d94e      	bls.n	8006eb8 <_vfiprintf_r+0x1c4>
 8006e1a:	b1b0      	cbz	r0, 8006e4a <_vfiprintf_r+0x156>
 8006e1c:	9207      	str	r2, [sp, #28]
 8006e1e:	e014      	b.n	8006e4a <_vfiprintf_r+0x156>
 8006e20:	eba0 0308 	sub.w	r3, r0, r8
 8006e24:	fa09 f303 	lsl.w	r3, r9, r3
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	9304      	str	r3, [sp, #16]
 8006e2c:	46a2      	mov	sl, r4
 8006e2e:	e7d2      	b.n	8006dd6 <_vfiprintf_r+0xe2>
 8006e30:	9b03      	ldr	r3, [sp, #12]
 8006e32:	1d19      	adds	r1, r3, #4
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	9103      	str	r1, [sp, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	bfbb      	ittet	lt
 8006e3c:	425b      	neglt	r3, r3
 8006e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8006e42:	9307      	strge	r3, [sp, #28]
 8006e44:	9307      	strlt	r3, [sp, #28]
 8006e46:	bfb8      	it	lt
 8006e48:	9204      	strlt	r2, [sp, #16]
 8006e4a:	7823      	ldrb	r3, [r4, #0]
 8006e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e4e:	d10c      	bne.n	8006e6a <_vfiprintf_r+0x176>
 8006e50:	7863      	ldrb	r3, [r4, #1]
 8006e52:	2b2a      	cmp	r3, #42	; 0x2a
 8006e54:	d135      	bne.n	8006ec2 <_vfiprintf_r+0x1ce>
 8006e56:	9b03      	ldr	r3, [sp, #12]
 8006e58:	1d1a      	adds	r2, r3, #4
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	9203      	str	r2, [sp, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bfb8      	it	lt
 8006e62:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e66:	3402      	adds	r4, #2
 8006e68:	9305      	str	r3, [sp, #20]
 8006e6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f50 <_vfiprintf_r+0x25c>
 8006e6e:	7821      	ldrb	r1, [r4, #0]
 8006e70:	2203      	movs	r2, #3
 8006e72:	4650      	mov	r0, sl
 8006e74:	f7f9 f9d4 	bl	8000220 <memchr>
 8006e78:	b140      	cbz	r0, 8006e8c <_vfiprintf_r+0x198>
 8006e7a:	2340      	movs	r3, #64	; 0x40
 8006e7c:	eba0 000a 	sub.w	r0, r0, sl
 8006e80:	fa03 f000 	lsl.w	r0, r3, r0
 8006e84:	9b04      	ldr	r3, [sp, #16]
 8006e86:	4303      	orrs	r3, r0
 8006e88:	3401      	adds	r4, #1
 8006e8a:	9304      	str	r3, [sp, #16]
 8006e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e90:	482c      	ldr	r0, [pc, #176]	; (8006f44 <_vfiprintf_r+0x250>)
 8006e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e96:	2206      	movs	r2, #6
 8006e98:	f7f9 f9c2 	bl	8000220 <memchr>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d03f      	beq.n	8006f20 <_vfiprintf_r+0x22c>
 8006ea0:	4b29      	ldr	r3, [pc, #164]	; (8006f48 <_vfiprintf_r+0x254>)
 8006ea2:	bb1b      	cbnz	r3, 8006eec <_vfiprintf_r+0x1f8>
 8006ea4:	9b03      	ldr	r3, [sp, #12]
 8006ea6:	3307      	adds	r3, #7
 8006ea8:	f023 0307 	bic.w	r3, r3, #7
 8006eac:	3308      	adds	r3, #8
 8006eae:	9303      	str	r3, [sp, #12]
 8006eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb2:	443b      	add	r3, r7
 8006eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb6:	e767      	b.n	8006d88 <_vfiprintf_r+0x94>
 8006eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	2001      	movs	r0, #1
 8006ec0:	e7a5      	b.n	8006e0e <_vfiprintf_r+0x11a>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	3401      	adds	r4, #1
 8006ec6:	9305      	str	r3, [sp, #20]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	f04f 0c0a 	mov.w	ip, #10
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ed4:	3a30      	subs	r2, #48	; 0x30
 8006ed6:	2a09      	cmp	r2, #9
 8006ed8:	d903      	bls.n	8006ee2 <_vfiprintf_r+0x1ee>
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d0c5      	beq.n	8006e6a <_vfiprintf_r+0x176>
 8006ede:	9105      	str	r1, [sp, #20]
 8006ee0:	e7c3      	b.n	8006e6a <_vfiprintf_r+0x176>
 8006ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e7f0      	b.n	8006ece <_vfiprintf_r+0x1da>
 8006eec:	ab03      	add	r3, sp, #12
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	462a      	mov	r2, r5
 8006ef2:	4b16      	ldr	r3, [pc, #88]	; (8006f4c <_vfiprintf_r+0x258>)
 8006ef4:	a904      	add	r1, sp, #16
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f3af 8000 	nop.w
 8006efc:	4607      	mov	r7, r0
 8006efe:	1c78      	adds	r0, r7, #1
 8006f00:	d1d6      	bne.n	8006eb0 <_vfiprintf_r+0x1bc>
 8006f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f04:	07d9      	lsls	r1, r3, #31
 8006f06:	d405      	bmi.n	8006f14 <_vfiprintf_r+0x220>
 8006f08:	89ab      	ldrh	r3, [r5, #12]
 8006f0a:	059a      	lsls	r2, r3, #22
 8006f0c:	d402      	bmi.n	8006f14 <_vfiprintf_r+0x220>
 8006f0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f10:	f7ff fd77 	bl	8006a02 <__retarget_lock_release_recursive>
 8006f14:	89ab      	ldrh	r3, [r5, #12]
 8006f16:	065b      	lsls	r3, r3, #25
 8006f18:	f53f af12 	bmi.w	8006d40 <_vfiprintf_r+0x4c>
 8006f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f1e:	e711      	b.n	8006d44 <_vfiprintf_r+0x50>
 8006f20:	ab03      	add	r3, sp, #12
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	462a      	mov	r2, r5
 8006f26:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <_vfiprintf_r+0x258>)
 8006f28:	a904      	add	r1, sp, #16
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f000 f880 	bl	8007030 <_printf_i>
 8006f30:	e7e4      	b.n	8006efc <_vfiprintf_r+0x208>
 8006f32:	bf00      	nop
 8006f34:	08007624 	.word	0x08007624
 8006f38:	08007644 	.word	0x08007644
 8006f3c:	08007604 	.word	0x08007604
 8006f40:	08007664 	.word	0x08007664
 8006f44:	0800766e 	.word	0x0800766e
 8006f48:	00000000 	.word	0x00000000
 8006f4c:	08006ccf 	.word	0x08006ccf
 8006f50:	0800766a 	.word	0x0800766a

08006f54 <_printf_common>:
 8006f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f58:	4616      	mov	r6, r2
 8006f5a:	4699      	mov	r9, r3
 8006f5c:	688a      	ldr	r2, [r1, #8]
 8006f5e:	690b      	ldr	r3, [r1, #16]
 8006f60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f64:	4293      	cmp	r3, r2
 8006f66:	bfb8      	it	lt
 8006f68:	4613      	movlt	r3, r2
 8006f6a:	6033      	str	r3, [r6, #0]
 8006f6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f70:	4607      	mov	r7, r0
 8006f72:	460c      	mov	r4, r1
 8006f74:	b10a      	cbz	r2, 8006f7a <_printf_common+0x26>
 8006f76:	3301      	adds	r3, #1
 8006f78:	6033      	str	r3, [r6, #0]
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	0699      	lsls	r1, r3, #26
 8006f7e:	bf42      	ittt	mi
 8006f80:	6833      	ldrmi	r3, [r6, #0]
 8006f82:	3302      	addmi	r3, #2
 8006f84:	6033      	strmi	r3, [r6, #0]
 8006f86:	6825      	ldr	r5, [r4, #0]
 8006f88:	f015 0506 	ands.w	r5, r5, #6
 8006f8c:	d106      	bne.n	8006f9c <_printf_common+0x48>
 8006f8e:	f104 0a19 	add.w	sl, r4, #25
 8006f92:	68e3      	ldr	r3, [r4, #12]
 8006f94:	6832      	ldr	r2, [r6, #0]
 8006f96:	1a9b      	subs	r3, r3, r2
 8006f98:	42ab      	cmp	r3, r5
 8006f9a:	dc26      	bgt.n	8006fea <_printf_common+0x96>
 8006f9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fa0:	1e13      	subs	r3, r2, #0
 8006fa2:	6822      	ldr	r2, [r4, #0]
 8006fa4:	bf18      	it	ne
 8006fa6:	2301      	movne	r3, #1
 8006fa8:	0692      	lsls	r2, r2, #26
 8006faa:	d42b      	bmi.n	8007004 <_printf_common+0xb0>
 8006fac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	47c0      	blx	r8
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d01e      	beq.n	8006ff8 <_printf_common+0xa4>
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	68e5      	ldr	r5, [r4, #12]
 8006fbe:	6832      	ldr	r2, [r6, #0]
 8006fc0:	f003 0306 	and.w	r3, r3, #6
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	bf08      	it	eq
 8006fc8:	1aad      	subeq	r5, r5, r2
 8006fca:	68a3      	ldr	r3, [r4, #8]
 8006fcc:	6922      	ldr	r2, [r4, #16]
 8006fce:	bf0c      	ite	eq
 8006fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fd4:	2500      	movne	r5, #0
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	bfc4      	itt	gt
 8006fda:	1a9b      	subgt	r3, r3, r2
 8006fdc:	18ed      	addgt	r5, r5, r3
 8006fde:	2600      	movs	r6, #0
 8006fe0:	341a      	adds	r4, #26
 8006fe2:	42b5      	cmp	r5, r6
 8006fe4:	d11a      	bne.n	800701c <_printf_common+0xc8>
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	e008      	b.n	8006ffc <_printf_common+0xa8>
 8006fea:	2301      	movs	r3, #1
 8006fec:	4652      	mov	r2, sl
 8006fee:	4649      	mov	r1, r9
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	47c0      	blx	r8
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d103      	bne.n	8007000 <_printf_common+0xac>
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007000:	3501      	adds	r5, #1
 8007002:	e7c6      	b.n	8006f92 <_printf_common+0x3e>
 8007004:	18e1      	adds	r1, r4, r3
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	2030      	movs	r0, #48	; 0x30
 800700a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800700e:	4422      	add	r2, r4
 8007010:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007014:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007018:	3302      	adds	r3, #2
 800701a:	e7c7      	b.n	8006fac <_printf_common+0x58>
 800701c:	2301      	movs	r3, #1
 800701e:	4622      	mov	r2, r4
 8007020:	4649      	mov	r1, r9
 8007022:	4638      	mov	r0, r7
 8007024:	47c0      	blx	r8
 8007026:	3001      	adds	r0, #1
 8007028:	d0e6      	beq.n	8006ff8 <_printf_common+0xa4>
 800702a:	3601      	adds	r6, #1
 800702c:	e7d9      	b.n	8006fe2 <_printf_common+0x8e>
	...

08007030 <_printf_i>:
 8007030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007034:	7e0f      	ldrb	r7, [r1, #24]
 8007036:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007038:	2f78      	cmp	r7, #120	; 0x78
 800703a:	4691      	mov	r9, r2
 800703c:	4680      	mov	r8, r0
 800703e:	460c      	mov	r4, r1
 8007040:	469a      	mov	sl, r3
 8007042:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007046:	d807      	bhi.n	8007058 <_printf_i+0x28>
 8007048:	2f62      	cmp	r7, #98	; 0x62
 800704a:	d80a      	bhi.n	8007062 <_printf_i+0x32>
 800704c:	2f00      	cmp	r7, #0
 800704e:	f000 80d8 	beq.w	8007202 <_printf_i+0x1d2>
 8007052:	2f58      	cmp	r7, #88	; 0x58
 8007054:	f000 80a3 	beq.w	800719e <_printf_i+0x16e>
 8007058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800705c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007060:	e03a      	b.n	80070d8 <_printf_i+0xa8>
 8007062:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007066:	2b15      	cmp	r3, #21
 8007068:	d8f6      	bhi.n	8007058 <_printf_i+0x28>
 800706a:	a101      	add	r1, pc, #4	; (adr r1, 8007070 <_printf_i+0x40>)
 800706c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007070:	080070c9 	.word	0x080070c9
 8007074:	080070dd 	.word	0x080070dd
 8007078:	08007059 	.word	0x08007059
 800707c:	08007059 	.word	0x08007059
 8007080:	08007059 	.word	0x08007059
 8007084:	08007059 	.word	0x08007059
 8007088:	080070dd 	.word	0x080070dd
 800708c:	08007059 	.word	0x08007059
 8007090:	08007059 	.word	0x08007059
 8007094:	08007059 	.word	0x08007059
 8007098:	08007059 	.word	0x08007059
 800709c:	080071e9 	.word	0x080071e9
 80070a0:	0800710d 	.word	0x0800710d
 80070a4:	080071cb 	.word	0x080071cb
 80070a8:	08007059 	.word	0x08007059
 80070ac:	08007059 	.word	0x08007059
 80070b0:	0800720b 	.word	0x0800720b
 80070b4:	08007059 	.word	0x08007059
 80070b8:	0800710d 	.word	0x0800710d
 80070bc:	08007059 	.word	0x08007059
 80070c0:	08007059 	.word	0x08007059
 80070c4:	080071d3 	.word	0x080071d3
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	1d1a      	adds	r2, r3, #4
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	602a      	str	r2, [r5, #0]
 80070d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070d8:	2301      	movs	r3, #1
 80070da:	e0a3      	b.n	8007224 <_printf_i+0x1f4>
 80070dc:	6820      	ldr	r0, [r4, #0]
 80070de:	6829      	ldr	r1, [r5, #0]
 80070e0:	0606      	lsls	r6, r0, #24
 80070e2:	f101 0304 	add.w	r3, r1, #4
 80070e6:	d50a      	bpl.n	80070fe <_printf_i+0xce>
 80070e8:	680e      	ldr	r6, [r1, #0]
 80070ea:	602b      	str	r3, [r5, #0]
 80070ec:	2e00      	cmp	r6, #0
 80070ee:	da03      	bge.n	80070f8 <_printf_i+0xc8>
 80070f0:	232d      	movs	r3, #45	; 0x2d
 80070f2:	4276      	negs	r6, r6
 80070f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070f8:	485e      	ldr	r0, [pc, #376]	; (8007274 <_printf_i+0x244>)
 80070fa:	230a      	movs	r3, #10
 80070fc:	e019      	b.n	8007132 <_printf_i+0x102>
 80070fe:	680e      	ldr	r6, [r1, #0]
 8007100:	602b      	str	r3, [r5, #0]
 8007102:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007106:	bf18      	it	ne
 8007108:	b236      	sxthne	r6, r6
 800710a:	e7ef      	b.n	80070ec <_printf_i+0xbc>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	6820      	ldr	r0, [r4, #0]
 8007110:	1d19      	adds	r1, r3, #4
 8007112:	6029      	str	r1, [r5, #0]
 8007114:	0601      	lsls	r1, r0, #24
 8007116:	d501      	bpl.n	800711c <_printf_i+0xec>
 8007118:	681e      	ldr	r6, [r3, #0]
 800711a:	e002      	b.n	8007122 <_printf_i+0xf2>
 800711c:	0646      	lsls	r6, r0, #25
 800711e:	d5fb      	bpl.n	8007118 <_printf_i+0xe8>
 8007120:	881e      	ldrh	r6, [r3, #0]
 8007122:	4854      	ldr	r0, [pc, #336]	; (8007274 <_printf_i+0x244>)
 8007124:	2f6f      	cmp	r7, #111	; 0x6f
 8007126:	bf0c      	ite	eq
 8007128:	2308      	moveq	r3, #8
 800712a:	230a      	movne	r3, #10
 800712c:	2100      	movs	r1, #0
 800712e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007132:	6865      	ldr	r5, [r4, #4]
 8007134:	60a5      	str	r5, [r4, #8]
 8007136:	2d00      	cmp	r5, #0
 8007138:	bfa2      	ittt	ge
 800713a:	6821      	ldrge	r1, [r4, #0]
 800713c:	f021 0104 	bicge.w	r1, r1, #4
 8007140:	6021      	strge	r1, [r4, #0]
 8007142:	b90e      	cbnz	r6, 8007148 <_printf_i+0x118>
 8007144:	2d00      	cmp	r5, #0
 8007146:	d04d      	beq.n	80071e4 <_printf_i+0x1b4>
 8007148:	4615      	mov	r5, r2
 800714a:	fbb6 f1f3 	udiv	r1, r6, r3
 800714e:	fb03 6711 	mls	r7, r3, r1, r6
 8007152:	5dc7      	ldrb	r7, [r0, r7]
 8007154:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007158:	4637      	mov	r7, r6
 800715a:	42bb      	cmp	r3, r7
 800715c:	460e      	mov	r6, r1
 800715e:	d9f4      	bls.n	800714a <_printf_i+0x11a>
 8007160:	2b08      	cmp	r3, #8
 8007162:	d10b      	bne.n	800717c <_printf_i+0x14c>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	07de      	lsls	r6, r3, #31
 8007168:	d508      	bpl.n	800717c <_printf_i+0x14c>
 800716a:	6923      	ldr	r3, [r4, #16]
 800716c:	6861      	ldr	r1, [r4, #4]
 800716e:	4299      	cmp	r1, r3
 8007170:	bfde      	ittt	le
 8007172:	2330      	movle	r3, #48	; 0x30
 8007174:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007178:	f105 35ff 	addle.w	r5, r5, #4294967295
 800717c:	1b52      	subs	r2, r2, r5
 800717e:	6122      	str	r2, [r4, #16]
 8007180:	f8cd a000 	str.w	sl, [sp]
 8007184:	464b      	mov	r3, r9
 8007186:	aa03      	add	r2, sp, #12
 8007188:	4621      	mov	r1, r4
 800718a:	4640      	mov	r0, r8
 800718c:	f7ff fee2 	bl	8006f54 <_printf_common>
 8007190:	3001      	adds	r0, #1
 8007192:	d14c      	bne.n	800722e <_printf_i+0x1fe>
 8007194:	f04f 30ff 	mov.w	r0, #4294967295
 8007198:	b004      	add	sp, #16
 800719a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719e:	4835      	ldr	r0, [pc, #212]	; (8007274 <_printf_i+0x244>)
 80071a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071a4:	6829      	ldr	r1, [r5, #0]
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80071ac:	6029      	str	r1, [r5, #0]
 80071ae:	061d      	lsls	r5, r3, #24
 80071b0:	d514      	bpl.n	80071dc <_printf_i+0x1ac>
 80071b2:	07df      	lsls	r7, r3, #31
 80071b4:	bf44      	itt	mi
 80071b6:	f043 0320 	orrmi.w	r3, r3, #32
 80071ba:	6023      	strmi	r3, [r4, #0]
 80071bc:	b91e      	cbnz	r6, 80071c6 <_printf_i+0x196>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	f023 0320 	bic.w	r3, r3, #32
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	2310      	movs	r3, #16
 80071c8:	e7b0      	b.n	800712c <_printf_i+0xfc>
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	f043 0320 	orr.w	r3, r3, #32
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	2378      	movs	r3, #120	; 0x78
 80071d4:	4828      	ldr	r0, [pc, #160]	; (8007278 <_printf_i+0x248>)
 80071d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071da:	e7e3      	b.n	80071a4 <_printf_i+0x174>
 80071dc:	0659      	lsls	r1, r3, #25
 80071de:	bf48      	it	mi
 80071e0:	b2b6      	uxthmi	r6, r6
 80071e2:	e7e6      	b.n	80071b2 <_printf_i+0x182>
 80071e4:	4615      	mov	r5, r2
 80071e6:	e7bb      	b.n	8007160 <_printf_i+0x130>
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	6826      	ldr	r6, [r4, #0]
 80071ec:	6961      	ldr	r1, [r4, #20]
 80071ee:	1d18      	adds	r0, r3, #4
 80071f0:	6028      	str	r0, [r5, #0]
 80071f2:	0635      	lsls	r5, r6, #24
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	d501      	bpl.n	80071fc <_printf_i+0x1cc>
 80071f8:	6019      	str	r1, [r3, #0]
 80071fa:	e002      	b.n	8007202 <_printf_i+0x1d2>
 80071fc:	0670      	lsls	r0, r6, #25
 80071fe:	d5fb      	bpl.n	80071f8 <_printf_i+0x1c8>
 8007200:	8019      	strh	r1, [r3, #0]
 8007202:	2300      	movs	r3, #0
 8007204:	6123      	str	r3, [r4, #16]
 8007206:	4615      	mov	r5, r2
 8007208:	e7ba      	b.n	8007180 <_printf_i+0x150>
 800720a:	682b      	ldr	r3, [r5, #0]
 800720c:	1d1a      	adds	r2, r3, #4
 800720e:	602a      	str	r2, [r5, #0]
 8007210:	681d      	ldr	r5, [r3, #0]
 8007212:	6862      	ldr	r2, [r4, #4]
 8007214:	2100      	movs	r1, #0
 8007216:	4628      	mov	r0, r5
 8007218:	f7f9 f802 	bl	8000220 <memchr>
 800721c:	b108      	cbz	r0, 8007222 <_printf_i+0x1f2>
 800721e:	1b40      	subs	r0, r0, r5
 8007220:	6060      	str	r0, [r4, #4]
 8007222:	6863      	ldr	r3, [r4, #4]
 8007224:	6123      	str	r3, [r4, #16]
 8007226:	2300      	movs	r3, #0
 8007228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800722c:	e7a8      	b.n	8007180 <_printf_i+0x150>
 800722e:	6923      	ldr	r3, [r4, #16]
 8007230:	462a      	mov	r2, r5
 8007232:	4649      	mov	r1, r9
 8007234:	4640      	mov	r0, r8
 8007236:	47d0      	blx	sl
 8007238:	3001      	adds	r0, #1
 800723a:	d0ab      	beq.n	8007194 <_printf_i+0x164>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	079b      	lsls	r3, r3, #30
 8007240:	d413      	bmi.n	800726a <_printf_i+0x23a>
 8007242:	68e0      	ldr	r0, [r4, #12]
 8007244:	9b03      	ldr	r3, [sp, #12]
 8007246:	4298      	cmp	r0, r3
 8007248:	bfb8      	it	lt
 800724a:	4618      	movlt	r0, r3
 800724c:	e7a4      	b.n	8007198 <_printf_i+0x168>
 800724e:	2301      	movs	r3, #1
 8007250:	4632      	mov	r2, r6
 8007252:	4649      	mov	r1, r9
 8007254:	4640      	mov	r0, r8
 8007256:	47d0      	blx	sl
 8007258:	3001      	adds	r0, #1
 800725a:	d09b      	beq.n	8007194 <_printf_i+0x164>
 800725c:	3501      	adds	r5, #1
 800725e:	68e3      	ldr	r3, [r4, #12]
 8007260:	9903      	ldr	r1, [sp, #12]
 8007262:	1a5b      	subs	r3, r3, r1
 8007264:	42ab      	cmp	r3, r5
 8007266:	dcf2      	bgt.n	800724e <_printf_i+0x21e>
 8007268:	e7eb      	b.n	8007242 <_printf_i+0x212>
 800726a:	2500      	movs	r5, #0
 800726c:	f104 0619 	add.w	r6, r4, #25
 8007270:	e7f5      	b.n	800725e <_printf_i+0x22e>
 8007272:	bf00      	nop
 8007274:	08007675 	.word	0x08007675
 8007278:	08007686 	.word	0x08007686

0800727c <_sbrk_r>:
 800727c:	b538      	push	{r3, r4, r5, lr}
 800727e:	4d06      	ldr	r5, [pc, #24]	; (8007298 <_sbrk_r+0x1c>)
 8007280:	2300      	movs	r3, #0
 8007282:	4604      	mov	r4, r0
 8007284:	4608      	mov	r0, r1
 8007286:	602b      	str	r3, [r5, #0]
 8007288:	f7fa fb36 	bl	80018f8 <_sbrk>
 800728c:	1c43      	adds	r3, r0, #1
 800728e:	d102      	bne.n	8007296 <_sbrk_r+0x1a>
 8007290:	682b      	ldr	r3, [r5, #0]
 8007292:	b103      	cbz	r3, 8007296 <_sbrk_r+0x1a>
 8007294:	6023      	str	r3, [r4, #0]
 8007296:	bd38      	pop	{r3, r4, r5, pc}
 8007298:	200002e4 	.word	0x200002e4

0800729c <__sread>:
 800729c:	b510      	push	{r4, lr}
 800729e:	460c      	mov	r4, r1
 80072a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072a4:	f000 f960 	bl	8007568 <_read_r>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	bfab      	itete	ge
 80072ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072ae:	89a3      	ldrhlt	r3, [r4, #12]
 80072b0:	181b      	addge	r3, r3, r0
 80072b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072b6:	bfac      	ite	ge
 80072b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80072ba:	81a3      	strhlt	r3, [r4, #12]
 80072bc:	bd10      	pop	{r4, pc}

080072be <__swrite>:
 80072be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c2:	461f      	mov	r7, r3
 80072c4:	898b      	ldrh	r3, [r1, #12]
 80072c6:	05db      	lsls	r3, r3, #23
 80072c8:	4605      	mov	r5, r0
 80072ca:	460c      	mov	r4, r1
 80072cc:	4616      	mov	r6, r2
 80072ce:	d505      	bpl.n	80072dc <__swrite+0x1e>
 80072d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d4:	2302      	movs	r3, #2
 80072d6:	2200      	movs	r2, #0
 80072d8:	f000 f928 	bl	800752c <_lseek_r>
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072e6:	81a3      	strh	r3, [r4, #12]
 80072e8:	4632      	mov	r2, r6
 80072ea:	463b      	mov	r3, r7
 80072ec:	4628      	mov	r0, r5
 80072ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072f2:	f000 b869 	b.w	80073c8 <_write_r>

080072f6 <__sseek>:
 80072f6:	b510      	push	{r4, lr}
 80072f8:	460c      	mov	r4, r1
 80072fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072fe:	f000 f915 	bl	800752c <_lseek_r>
 8007302:	1c43      	adds	r3, r0, #1
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	bf15      	itete	ne
 8007308:	6560      	strne	r0, [r4, #84]	; 0x54
 800730a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800730e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007312:	81a3      	strheq	r3, [r4, #12]
 8007314:	bf18      	it	ne
 8007316:	81a3      	strhne	r3, [r4, #12]
 8007318:	bd10      	pop	{r4, pc}

0800731a <__sclose>:
 800731a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800731e:	f000 b8d3 	b.w	80074c8 <_close_r>
	...

08007324 <__swbuf_r>:
 8007324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007326:	460e      	mov	r6, r1
 8007328:	4614      	mov	r4, r2
 800732a:	4605      	mov	r5, r0
 800732c:	b118      	cbz	r0, 8007336 <__swbuf_r+0x12>
 800732e:	6983      	ldr	r3, [r0, #24]
 8007330:	b90b      	cbnz	r3, 8007336 <__swbuf_r+0x12>
 8007332:	f7ff fac7 	bl	80068c4 <__sinit>
 8007336:	4b21      	ldr	r3, [pc, #132]	; (80073bc <__swbuf_r+0x98>)
 8007338:	429c      	cmp	r4, r3
 800733a:	d12b      	bne.n	8007394 <__swbuf_r+0x70>
 800733c:	686c      	ldr	r4, [r5, #4]
 800733e:	69a3      	ldr	r3, [r4, #24]
 8007340:	60a3      	str	r3, [r4, #8]
 8007342:	89a3      	ldrh	r3, [r4, #12]
 8007344:	071a      	lsls	r2, r3, #28
 8007346:	d52f      	bpl.n	80073a8 <__swbuf_r+0x84>
 8007348:	6923      	ldr	r3, [r4, #16]
 800734a:	b36b      	cbz	r3, 80073a8 <__swbuf_r+0x84>
 800734c:	6923      	ldr	r3, [r4, #16]
 800734e:	6820      	ldr	r0, [r4, #0]
 8007350:	1ac0      	subs	r0, r0, r3
 8007352:	6963      	ldr	r3, [r4, #20]
 8007354:	b2f6      	uxtb	r6, r6
 8007356:	4283      	cmp	r3, r0
 8007358:	4637      	mov	r7, r6
 800735a:	dc04      	bgt.n	8007366 <__swbuf_r+0x42>
 800735c:	4621      	mov	r1, r4
 800735e:	4628      	mov	r0, r5
 8007360:	f7ff fa1c 	bl	800679c <_fflush_r>
 8007364:	bb30      	cbnz	r0, 80073b4 <__swbuf_r+0x90>
 8007366:	68a3      	ldr	r3, [r4, #8]
 8007368:	3b01      	subs	r3, #1
 800736a:	60a3      	str	r3, [r4, #8]
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	6022      	str	r2, [r4, #0]
 8007372:	701e      	strb	r6, [r3, #0]
 8007374:	6963      	ldr	r3, [r4, #20]
 8007376:	3001      	adds	r0, #1
 8007378:	4283      	cmp	r3, r0
 800737a:	d004      	beq.n	8007386 <__swbuf_r+0x62>
 800737c:	89a3      	ldrh	r3, [r4, #12]
 800737e:	07db      	lsls	r3, r3, #31
 8007380:	d506      	bpl.n	8007390 <__swbuf_r+0x6c>
 8007382:	2e0a      	cmp	r6, #10
 8007384:	d104      	bne.n	8007390 <__swbuf_r+0x6c>
 8007386:	4621      	mov	r1, r4
 8007388:	4628      	mov	r0, r5
 800738a:	f7ff fa07 	bl	800679c <_fflush_r>
 800738e:	b988      	cbnz	r0, 80073b4 <__swbuf_r+0x90>
 8007390:	4638      	mov	r0, r7
 8007392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007394:	4b0a      	ldr	r3, [pc, #40]	; (80073c0 <__swbuf_r+0x9c>)
 8007396:	429c      	cmp	r4, r3
 8007398:	d101      	bne.n	800739e <__swbuf_r+0x7a>
 800739a:	68ac      	ldr	r4, [r5, #8]
 800739c:	e7cf      	b.n	800733e <__swbuf_r+0x1a>
 800739e:	4b09      	ldr	r3, [pc, #36]	; (80073c4 <__swbuf_r+0xa0>)
 80073a0:	429c      	cmp	r4, r3
 80073a2:	bf08      	it	eq
 80073a4:	68ec      	ldreq	r4, [r5, #12]
 80073a6:	e7ca      	b.n	800733e <__swbuf_r+0x1a>
 80073a8:	4621      	mov	r1, r4
 80073aa:	4628      	mov	r0, r5
 80073ac:	f000 f81e 	bl	80073ec <__swsetup_r>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d0cb      	beq.n	800734c <__swbuf_r+0x28>
 80073b4:	f04f 37ff 	mov.w	r7, #4294967295
 80073b8:	e7ea      	b.n	8007390 <__swbuf_r+0x6c>
 80073ba:	bf00      	nop
 80073bc:	08007624 	.word	0x08007624
 80073c0:	08007644 	.word	0x08007644
 80073c4:	08007604 	.word	0x08007604

080073c8 <_write_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	4d07      	ldr	r5, [pc, #28]	; (80073e8 <_write_r+0x20>)
 80073cc:	4604      	mov	r4, r0
 80073ce:	4608      	mov	r0, r1
 80073d0:	4611      	mov	r1, r2
 80073d2:	2200      	movs	r2, #0
 80073d4:	602a      	str	r2, [r5, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	f7f9 fce2 	bl	8000da0 <_write>
 80073dc:	1c43      	adds	r3, r0, #1
 80073de:	d102      	bne.n	80073e6 <_write_r+0x1e>
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	b103      	cbz	r3, 80073e6 <_write_r+0x1e>
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	bd38      	pop	{r3, r4, r5, pc}
 80073e8:	200002e4 	.word	0x200002e4

080073ec <__swsetup_r>:
 80073ec:	4b32      	ldr	r3, [pc, #200]	; (80074b8 <__swsetup_r+0xcc>)
 80073ee:	b570      	push	{r4, r5, r6, lr}
 80073f0:	681d      	ldr	r5, [r3, #0]
 80073f2:	4606      	mov	r6, r0
 80073f4:	460c      	mov	r4, r1
 80073f6:	b125      	cbz	r5, 8007402 <__swsetup_r+0x16>
 80073f8:	69ab      	ldr	r3, [r5, #24]
 80073fa:	b913      	cbnz	r3, 8007402 <__swsetup_r+0x16>
 80073fc:	4628      	mov	r0, r5
 80073fe:	f7ff fa61 	bl	80068c4 <__sinit>
 8007402:	4b2e      	ldr	r3, [pc, #184]	; (80074bc <__swsetup_r+0xd0>)
 8007404:	429c      	cmp	r4, r3
 8007406:	d10f      	bne.n	8007428 <__swsetup_r+0x3c>
 8007408:	686c      	ldr	r4, [r5, #4]
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007410:	0719      	lsls	r1, r3, #28
 8007412:	d42c      	bmi.n	800746e <__swsetup_r+0x82>
 8007414:	06dd      	lsls	r5, r3, #27
 8007416:	d411      	bmi.n	800743c <__swsetup_r+0x50>
 8007418:	2309      	movs	r3, #9
 800741a:	6033      	str	r3, [r6, #0]
 800741c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007420:	81a3      	strh	r3, [r4, #12]
 8007422:	f04f 30ff 	mov.w	r0, #4294967295
 8007426:	e03e      	b.n	80074a6 <__swsetup_r+0xba>
 8007428:	4b25      	ldr	r3, [pc, #148]	; (80074c0 <__swsetup_r+0xd4>)
 800742a:	429c      	cmp	r4, r3
 800742c:	d101      	bne.n	8007432 <__swsetup_r+0x46>
 800742e:	68ac      	ldr	r4, [r5, #8]
 8007430:	e7eb      	b.n	800740a <__swsetup_r+0x1e>
 8007432:	4b24      	ldr	r3, [pc, #144]	; (80074c4 <__swsetup_r+0xd8>)
 8007434:	429c      	cmp	r4, r3
 8007436:	bf08      	it	eq
 8007438:	68ec      	ldreq	r4, [r5, #12]
 800743a:	e7e6      	b.n	800740a <__swsetup_r+0x1e>
 800743c:	0758      	lsls	r0, r3, #29
 800743e:	d512      	bpl.n	8007466 <__swsetup_r+0x7a>
 8007440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007442:	b141      	cbz	r1, 8007456 <__swsetup_r+0x6a>
 8007444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007448:	4299      	cmp	r1, r3
 800744a:	d002      	beq.n	8007452 <__swsetup_r+0x66>
 800744c:	4630      	mov	r0, r6
 800744e:	f7ff fb47 	bl	8006ae0 <_free_r>
 8007452:	2300      	movs	r3, #0
 8007454:	6363      	str	r3, [r4, #52]	; 0x34
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800745c:	81a3      	strh	r3, [r4, #12]
 800745e:	2300      	movs	r3, #0
 8007460:	6063      	str	r3, [r4, #4]
 8007462:	6923      	ldr	r3, [r4, #16]
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	f043 0308 	orr.w	r3, r3, #8
 800746c:	81a3      	strh	r3, [r4, #12]
 800746e:	6923      	ldr	r3, [r4, #16]
 8007470:	b94b      	cbnz	r3, 8007486 <__swsetup_r+0x9a>
 8007472:	89a3      	ldrh	r3, [r4, #12]
 8007474:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800747c:	d003      	beq.n	8007486 <__swsetup_r+0x9a>
 800747e:	4621      	mov	r1, r4
 8007480:	4630      	mov	r0, r6
 8007482:	f7ff fae5 	bl	8006a50 <__smakebuf_r>
 8007486:	89a0      	ldrh	r0, [r4, #12]
 8007488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800748c:	f010 0301 	ands.w	r3, r0, #1
 8007490:	d00a      	beq.n	80074a8 <__swsetup_r+0xbc>
 8007492:	2300      	movs	r3, #0
 8007494:	60a3      	str	r3, [r4, #8]
 8007496:	6963      	ldr	r3, [r4, #20]
 8007498:	425b      	negs	r3, r3
 800749a:	61a3      	str	r3, [r4, #24]
 800749c:	6923      	ldr	r3, [r4, #16]
 800749e:	b943      	cbnz	r3, 80074b2 <__swsetup_r+0xc6>
 80074a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074a4:	d1ba      	bne.n	800741c <__swsetup_r+0x30>
 80074a6:	bd70      	pop	{r4, r5, r6, pc}
 80074a8:	0781      	lsls	r1, r0, #30
 80074aa:	bf58      	it	pl
 80074ac:	6963      	ldrpl	r3, [r4, #20]
 80074ae:	60a3      	str	r3, [r4, #8]
 80074b0:	e7f4      	b.n	800749c <__swsetup_r+0xb0>
 80074b2:	2000      	movs	r0, #0
 80074b4:	e7f7      	b.n	80074a6 <__swsetup_r+0xba>
 80074b6:	bf00      	nop
 80074b8:	2000000c 	.word	0x2000000c
 80074bc:	08007624 	.word	0x08007624
 80074c0:	08007644 	.word	0x08007644
 80074c4:	08007604 	.word	0x08007604

080074c8 <_close_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4d06      	ldr	r5, [pc, #24]	; (80074e4 <_close_r+0x1c>)
 80074cc:	2300      	movs	r3, #0
 80074ce:	4604      	mov	r4, r0
 80074d0:	4608      	mov	r0, r1
 80074d2:	602b      	str	r3, [r5, #0]
 80074d4:	f7fa f9db 	bl	800188e <_close>
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	d102      	bne.n	80074e2 <_close_r+0x1a>
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	b103      	cbz	r3, 80074e2 <_close_r+0x1a>
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	bd38      	pop	{r3, r4, r5, pc}
 80074e4:	200002e4 	.word	0x200002e4

080074e8 <_fstat_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	4d07      	ldr	r5, [pc, #28]	; (8007508 <_fstat_r+0x20>)
 80074ec:	2300      	movs	r3, #0
 80074ee:	4604      	mov	r4, r0
 80074f0:	4608      	mov	r0, r1
 80074f2:	4611      	mov	r1, r2
 80074f4:	602b      	str	r3, [r5, #0]
 80074f6:	f7fa f9d6 	bl	80018a6 <_fstat>
 80074fa:	1c43      	adds	r3, r0, #1
 80074fc:	d102      	bne.n	8007504 <_fstat_r+0x1c>
 80074fe:	682b      	ldr	r3, [r5, #0]
 8007500:	b103      	cbz	r3, 8007504 <_fstat_r+0x1c>
 8007502:	6023      	str	r3, [r4, #0]
 8007504:	bd38      	pop	{r3, r4, r5, pc}
 8007506:	bf00      	nop
 8007508:	200002e4 	.word	0x200002e4

0800750c <_isatty_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	4d06      	ldr	r5, [pc, #24]	; (8007528 <_isatty_r+0x1c>)
 8007510:	2300      	movs	r3, #0
 8007512:	4604      	mov	r4, r0
 8007514:	4608      	mov	r0, r1
 8007516:	602b      	str	r3, [r5, #0]
 8007518:	f7fa f9d5 	bl	80018c6 <_isatty>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d102      	bne.n	8007526 <_isatty_r+0x1a>
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	b103      	cbz	r3, 8007526 <_isatty_r+0x1a>
 8007524:	6023      	str	r3, [r4, #0]
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	200002e4 	.word	0x200002e4

0800752c <_lseek_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	4d07      	ldr	r5, [pc, #28]	; (800754c <_lseek_r+0x20>)
 8007530:	4604      	mov	r4, r0
 8007532:	4608      	mov	r0, r1
 8007534:	4611      	mov	r1, r2
 8007536:	2200      	movs	r2, #0
 8007538:	602a      	str	r2, [r5, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	f7fa f9ce 	bl	80018dc <_lseek>
 8007540:	1c43      	adds	r3, r0, #1
 8007542:	d102      	bne.n	800754a <_lseek_r+0x1e>
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	b103      	cbz	r3, 800754a <_lseek_r+0x1e>
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	200002e4 	.word	0x200002e4

08007550 <__malloc_lock>:
 8007550:	4801      	ldr	r0, [pc, #4]	; (8007558 <__malloc_lock+0x8>)
 8007552:	f7ff ba55 	b.w	8006a00 <__retarget_lock_acquire_recursive>
 8007556:	bf00      	nop
 8007558:	200002d8 	.word	0x200002d8

0800755c <__malloc_unlock>:
 800755c:	4801      	ldr	r0, [pc, #4]	; (8007564 <__malloc_unlock+0x8>)
 800755e:	f7ff ba50 	b.w	8006a02 <__retarget_lock_release_recursive>
 8007562:	bf00      	nop
 8007564:	200002d8 	.word	0x200002d8

08007568 <_read_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4d07      	ldr	r5, [pc, #28]	; (8007588 <_read_r+0x20>)
 800756c:	4604      	mov	r4, r0
 800756e:	4608      	mov	r0, r1
 8007570:	4611      	mov	r1, r2
 8007572:	2200      	movs	r2, #0
 8007574:	602a      	str	r2, [r5, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	f7fa f96c 	bl	8001854 <_read>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_read_r+0x1e>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_read_r+0x1e>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	200002e4 	.word	0x200002e4

0800758c <_init>:
 800758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758e:	bf00      	nop
 8007590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007592:	bc08      	pop	{r3}
 8007594:	469e      	mov	lr, r3
 8007596:	4770      	bx	lr

08007598 <_fini>:
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	bf00      	nop
 800759c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759e:	bc08      	pop	{r3}
 80075a0:	469e      	mov	lr, r3
 80075a2:	4770      	bx	lr
