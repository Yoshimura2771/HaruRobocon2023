
DMA_ADCTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000588c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005a6c  08005a6c  00015a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b48  08005b48  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b48  08005b48  00015b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b50  08005b50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b50  08005b50  00015b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08005bc8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08005bc8  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a1d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002558  00000000  00000000  00032abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00035018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00035ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fd10  00000000  00000000  00036cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d5c  00000000  00000000  000569c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd8ce  00000000  00000000  0006771c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134fea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004610  00000000  00000000  0013503c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005a54 	.word	0x08005a54

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005a54 	.word	0x08005a54

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <main+0x74>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 fa6c 	bl	8004ab0 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fc01 	bl	8000dde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f836 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f9ae 	bl	8000940 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e4:	f000 f982 	bl	80008ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f934 	bl	8000854 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80005ec:	f000 f87a 	bl	80006e4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  //adc_test();
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80005f0:	217f      	movs	r1, #127	; 0x7f
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <main+0x78>)
 80005f4:	f001 fe7a 	bl	80022ec <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)gu_dma, 7);
 80005f8:	2207      	movs	r2, #7
 80005fa:	4911      	ldr	r1, [pc, #68]	; (8000640 <main+0x7c>)
 80005fc:	480f      	ldr	r0, [pc, #60]	; (800063c <main+0x78>)
 80005fe:	f001 f831 	bl	8001664 <HAL_ADC_Start_DMA>
	  	  /*for(int i=0; i<7; i++){
	  			//DMABuf[i] = gu_dma[i+1];
	  			printf("Sensor%d: %ld", i, gu_dma[i+1]);
	  	  }*/
	  	  //printf("hello world");
	  for(int i=0; i<7; i++){
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	e012      	b.n	800062e <main+0x6a>
	  	snprintf(buff, sizeof(buff), "%d", gu_dma[i+1]);
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3301      	adds	r3, #1
 800060c:	4a0c      	ldr	r2, [pc, #48]	; (8000640 <main+0x7c>)
 800060e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000612:	4638      	mov	r0, r7
 8000614:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <main+0x80>)
 8000616:	210a      	movs	r1, #10
 8000618:	f004 fb18 	bl	8004c4c <sniprintf>
	  	HAL_UART_Transmit(&huart2, buff, sizeof(buff), 100);
 800061c:	4639      	mov	r1, r7
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	220a      	movs	r2, #10
 8000622:	4809      	ldr	r0, [pc, #36]	; (8000648 <main+0x84>)
 8000624:	f003 fbf8 	bl	8003e18 <HAL_UART_Transmit>
	  for(int i=0; i<7; i++){
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	3301      	adds	r3, #1
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	2b06      	cmp	r3, #6
 8000632:	dde9      	ble.n	8000608 <main+0x44>
 8000634:	e7e5      	b.n	8000602 <main+0x3e>
 8000636:	bf00      	nop
 8000638:	2000000c 	.word	0x2000000c
 800063c:	2000008c 	.word	0x2000008c
 8000640:	200001e8 	.word	0x200001e8
 8000644:	08005a6c 	.word	0x08005a6c
 8000648:	20000158 	.word	0x20000158

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0318 	add.w	r3, r7, #24
 8000656:	2238      	movs	r2, #56	; 0x38
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f004 fa20 	bl	8004aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800066e:	2000      	movs	r0, #0
 8000670:	f002 fbba 	bl	8002de8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067e:	2340      	movs	r3, #64	; 0x40
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800068a:	2304      	movs	r3, #4
 800068c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800068e:	2355      	movs	r3, #85	; 0x55
 8000690:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fc44 	bl	8002f30 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006ae:	f000 f987 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2303      	movs	r3, #3
 80006b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2104      	movs	r1, #4
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 ff48 	bl	8003560 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006d6:	f000 f973 	bl	80009c0 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2220      	movs	r2, #32
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 f9d5 	bl	8004aa0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006f6:	4b4f      	ldr	r3, [pc, #316]	; (8000834 <MX_ADC2_Init+0x150>)
 80006f8:	4a4f      	ldr	r2, [pc, #316]	; (8000838 <MX_ADC2_Init+0x154>)
 80006fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006fc:	4b4d      	ldr	r3, [pc, #308]	; (8000834 <MX_ADC2_Init+0x150>)
 80006fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000702:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000704:	4b4b      	ldr	r3, [pc, #300]	; (8000834 <MX_ADC2_Init+0x150>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070a:	4b4a      	ldr	r3, [pc, #296]	; (8000834 <MX_ADC2_Init+0x150>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000710:	4b48      	ldr	r3, [pc, #288]	; (8000834 <MX_ADC2_Init+0x150>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000716:	4b47      	ldr	r3, [pc, #284]	; (8000834 <MX_ADC2_Init+0x150>)
 8000718:	2201      	movs	r2, #1
 800071a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071c:	4b45      	ldr	r3, [pc, #276]	; (8000834 <MX_ADC2_Init+0x150>)
 800071e:	2204      	movs	r2, #4
 8000720:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000722:	4b44      	ldr	r3, [pc, #272]	; (8000834 <MX_ADC2_Init+0x150>)
 8000724:	2200      	movs	r2, #0
 8000726:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000728:	4b42      	ldr	r3, [pc, #264]	; (8000834 <MX_ADC2_Init+0x150>)
 800072a:	2201      	movs	r2, #1
 800072c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 6;
 800072e:	4b41      	ldr	r3, [pc, #260]	; (8000834 <MX_ADC2_Init+0x150>)
 8000730:	2206      	movs	r2, #6
 8000732:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000734:	4b3f      	ldr	r3, [pc, #252]	; (8000834 <MX_ADC2_Init+0x150>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073c:	4b3d      	ldr	r3, [pc, #244]	; (8000834 <MX_ADC2_Init+0x150>)
 800073e:	2200      	movs	r2, #0
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000742:	4b3c      	ldr	r3, [pc, #240]	; (8000834 <MX_ADC2_Init+0x150>)
 8000744:	2200      	movs	r2, #0
 8000746:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000748:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <MX_ADC2_Init+0x150>)
 800074a:	2201      	movs	r2, #1
 800074c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000750:	4b38      	ldr	r3, [pc, #224]	; (8000834 <MX_ADC2_Init+0x150>)
 8000752:	2200      	movs	r2, #0
 8000754:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000756:	4b37      	ldr	r3, [pc, #220]	; (8000834 <MX_ADC2_Init+0x150>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800075e:	4835      	ldr	r0, [pc, #212]	; (8000834 <MX_ADC2_Init+0x150>)
 8000760:	f000 fdf6 	bl	8001350 <HAL_ADC_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800076a:	f000 f929 	bl	80009c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800076e:	4b33      	ldr	r3, [pc, #204]	; (800083c <MX_ADC2_Init+0x158>)
 8000770:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000772:	2306      	movs	r3, #6
 8000774:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800077a:	237f      	movs	r3, #127	; 0x7f
 800077c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800077e:	2304      	movs	r3, #4
 8000780:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	482a      	ldr	r0, [pc, #168]	; (8000834 <MX_ADC2_Init+0x150>)
 800078c:	f001 f83c 	bl	8001808 <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000796:	f000 f913 	bl	80009c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800079a:	4b29      	ldr	r3, [pc, #164]	; (8000840 <MX_ADC2_Init+0x15c>)
 800079c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800079e:	230c      	movs	r3, #12
 80007a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007a2:	463b      	mov	r3, r7
 80007a4:	4619      	mov	r1, r3
 80007a6:	4823      	ldr	r0, [pc, #140]	; (8000834 <MX_ADC2_Init+0x150>)
 80007a8:	f001 f82e 	bl	8001808 <HAL_ADC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80007b2:	f000 f905 	bl	80009c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_ADC2_Init+0x160>)
 80007b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007ba:	2312      	movs	r3, #18
 80007bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	4619      	mov	r1, r3
 80007c2:	481c      	ldr	r0, [pc, #112]	; (8000834 <MX_ADC2_Init+0x150>)
 80007c4:	f001 f820 	bl	8001808 <HAL_ADC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80007ce:	f000 f8f7 	bl	80009c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_ADC2_Init+0x164>)
 80007d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80007d6:	2318      	movs	r3, #24
 80007d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007da:	463b      	mov	r3, r7
 80007dc:	4619      	mov	r1, r3
 80007de:	4815      	ldr	r0, [pc, #84]	; (8000834 <MX_ADC2_Init+0x150>)
 80007e0:	f001 f812 	bl	8001808 <HAL_ADC_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 80007ea:	f000 f8e9 	bl	80009c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_ADC2_Init+0x168>)
 80007f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80007f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	4619      	mov	r1, r3
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <MX_ADC2_Init+0x150>)
 80007fe:	f001 f803 	bl	8001808 <HAL_ADC_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 8000808:	f000 f8da 	bl	80009c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_ADC2_Init+0x16c>)
 800080e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000810:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000814:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	4619      	mov	r1, r3
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <MX_ADC2_Init+0x150>)
 800081c:	f000 fff4 	bl	8001808 <HAL_ADC_ConfigChannel>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 8000826:	f000 f8cb 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	3720      	adds	r7, #32
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000008c 	.word	0x2000008c
 8000838:	50000100 	.word	0x50000100
 800083c:	04300002 	.word	0x04300002
 8000840:	08600004 	.word	0x08600004
 8000844:	0c900008 	.word	0x0c900008
 8000848:	10c00010 	.word	0x10c00010
 800084c:	36902000 	.word	0x36902000
 8000850:	47520000 	.word	0x47520000

08000854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 800085a:	4a23      	ldr	r2, [pc, #140]	; (80008e8 <MX_USART2_UART_Init+0x94>)
 800085c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089c:	4811      	ldr	r0, [pc, #68]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 800089e:	f003 fa6b 	bl	8003d78 <HAL_UART_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008a8:	f000 f88a 	bl	80009c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 80008b0:	f004 f802 	bl	80048b8 <HAL_UARTEx_SetTxFifoThreshold>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ba:	f000 f881 	bl	80009c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4808      	ldr	r0, [pc, #32]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 80008c2:	f004 f837 	bl	8004934 <HAL_UARTEx_SetRxFifoThreshold>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008cc:	f000 f878 	bl	80009c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 80008d2:	f003 ffb8 	bl	8004846 <HAL_UARTEx_DisableFifoMode>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008dc:	f000 f870 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000158 	.word	0x20000158
 80008e8:	40004400 	.word	0x40004400

080008ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_DMA_Init+0x50>)
 80008f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008f6:	4a11      	ldr	r2, [pc, #68]	; (800093c <MX_DMA_Init+0x50>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6493      	str	r3, [r2, #72]	; 0x48
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_DMA_Init+0x50>)
 8000900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_DMA_Init+0x50>)
 800090c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800090e:	4a0b      	ldr	r2, [pc, #44]	; (800093c <MX_DMA_Init+0x50>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6493      	str	r3, [r2, #72]	; 0x48
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_DMA_Init+0x50>)
 8000918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	200b      	movs	r0, #11
 8000928:	f001 fe1d 	bl	8002566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800092c:	200b      	movs	r0, #11
 800092e:	f001 fe34 	bl	800259a <HAL_NVIC_EnableIRQ>

}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_GPIO_Init+0x78>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <MX_GPIO_Init+0x78>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_GPIO_Init+0x78>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_GPIO_Init+0x78>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a11      	ldr	r2, [pc, #68]	; (80009b8 <MX_GPIO_Init+0x78>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_GPIO_Init+0x78>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098c:	480b      	ldr	r0, [pc, #44]	; (80009bc <MX_GPIO_Init+0x7c>)
 800098e:	f002 fa13 	bl	8002db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_GPIO_Init+0x7c>)
 80009ac:	f002 f882 	bl	8002ab4 <HAL_GPIO_Init>

}
 80009b0:	bf00      	nop
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021000 	.word	0x40021000
 80009bc:	48000400 	.word	0x48000400

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <Error_Handler+0x8>
	...

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_MspInit+0x44>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_MspInit+0x44>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6613      	str	r3, [r2, #96]	; 0x60
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_MspInit+0x44>)
 80009e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x44>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x44>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6593      	str	r3, [r2, #88]	; 0x58
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x44>)
 80009f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b09a      	sub	sp, #104	; 0x68
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	2244      	movs	r2, #68	; 0x44
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f004 f833 	bl	8004aa0 <memset>
  if(hadc->Instance==ADC2)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a34      	ldr	r2, [pc, #208]	; (8000b10 <HAL_ADC_MspInit+0xfc>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d160      	bne.n	8000b06 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a48:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a4a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4618      	mov	r0, r3
 8000a56:	f002 ff9f 	bl	8003998 <HAL_RCCEx_PeriphCLKConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a60:	f7ff ffae 	bl	80009c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a64:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <HAL_ADC_MspInit+0x100>)
 8000a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a68:	4a2a      	ldr	r2, [pc, #168]	; (8000b14 <HAL_ADC_MspInit+0x100>)
 8000a6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <HAL_ADC_MspInit+0x100>)
 8000a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <HAL_ADC_MspInit+0x100>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a80:	4a24      	ldr	r2, [pc, #144]	; (8000b14 <HAL_ADC_MspInit+0x100>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a88:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <HAL_ADC_MspInit+0x100>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC2_IN17
    PA5     ------> ADC2_IN13
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000a94:	23f3      	movs	r3, #243	; 0xf3
 8000a96:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aaa:	f002 f803 	bl	8002ab4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <HAL_ADC_MspInit+0x104>)
 8000ab0:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <HAL_ADC_MspInit+0x108>)
 8000ab2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_ADC_MspInit+0x104>)
 8000ab6:	2224      	movs	r2, #36	; 0x24
 8000ab8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <HAL_ADC_MspInit+0x104>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_ADC_MspInit+0x104>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <HAL_ADC_MspInit+0x104>)
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_ADC_MspInit+0x104>)
 8000ace:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ad2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_ADC_MspInit+0x104>)
 8000ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ada:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_ADC_MspInit+0x104>)
 8000ade:	2220      	movs	r2, #32
 8000ae0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_ADC_MspInit+0x104>)
 8000ae4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ae8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000aea:	480b      	ldr	r0, [pc, #44]	; (8000b18 <HAL_ADC_MspInit+0x104>)
 8000aec:	f001 fd70 	bl	80025d0 <HAL_DMA_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8000af6:	f7ff ff63 	bl	80009c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_ADC_MspInit+0x104>)
 8000afe:	655a      	str	r2, [r3, #84]	; 0x54
 8000b00:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <HAL_ADC_MspInit+0x104>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000b06:	bf00      	nop
 8000b08:	3768      	adds	r7, #104	; 0x68
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	50000100 	.word	0x50000100
 8000b14:	40021000 	.word	0x40021000
 8000b18:	200000f8 	.word	0x200000f8
 8000b1c:	40020008 	.word	0x40020008

08000b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b09a      	sub	sp, #104	; 0x68
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	2244      	movs	r2, #68	; 0x44
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 ffad 	bl	8004aa0 <memset>
  if(huart->Instance==USART2)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <HAL_UART_MspInit+0xa8>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d136      	bne.n	8000bbe <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f002 ff1b 	bl	8003998 <HAL_RCCEx_PeriphCLKConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b68:	f7ff ff2a 	bl	80009c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_UART_MspInit+0xac>)
 8000b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b70:	4a16      	ldr	r2, [pc, #88]	; (8000bcc <HAL_UART_MspInit+0xac>)
 8000b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b76:	6593      	str	r3, [r2, #88]	; 0x58
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <HAL_UART_MspInit+0xac>)
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_UART_MspInit+0xac>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b88:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <HAL_UART_MspInit+0xac>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_UART_MspInit+0xac>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bac:	2307      	movs	r3, #7
 8000bae:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f001 ff7b 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3768      	adds	r7, #104	; 0x68
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40004400 	.word	0x40004400
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f932 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <DMA1_Channel1_IRQHandler+0x10>)
 8000c2a:	f001 fdf4 	bl	8002816 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200000f8 	.word	0x200000f8

08000c38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e00a      	b.n	8000c60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c4a:	f3af 8000 	nop.w
 8000c4e:	4601      	mov	r1, r0
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	b2ca      	uxtb	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbf0      	blt.n	8000c4a <_read+0x12>
	}

return len;
 8000c68:	687b      	ldr	r3, [r7, #4]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	60f8      	str	r0, [r7, #12]
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	e009      	b.n	8000c98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	60ba      	str	r2, [r7, #8]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	3301      	adds	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dbf1      	blt.n	8000c84 <_write+0x12>
	}
	return len;
 8000ca0:	687b      	ldr	r3, [r7, #4]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <_close>:

int _close(int file)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	return -1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd2:	605a      	str	r2, [r3, #4]
	return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b085      	sub	sp, #20
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
	return 0;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d207      	bcs.n	8000d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d2c:	f003 fe8e 	bl	8004a4c <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	220c      	movs	r2, #12
 8000d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	e009      	b.n	8000d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <_sbrk+0x64>)
 8000d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20008000 	.word	0x20008000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	20000204 	.word	0x20000204
 8000d64:	20000220 	.word	0x20000220

08000d68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d92:	490e      	ldr	r1, [pc, #56]	; (8000dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d94:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <LoopForever+0xe>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da8:	4c0b      	ldr	r4, [pc, #44]	; (8000dd8 <LoopForever+0x16>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000db6:	f7ff ffd7 	bl	8000d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f003 fe4d 	bl	8004a58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dbe:	f7ff fc01 	bl	80005c4 <main>

08000dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
  ldr   r0, =_estack
 8000dc4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dd0:	08005b58 	.word	0x08005b58
  ldr r2, =_sbss
 8000dd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dd8:	2000021c 	.word	0x2000021c

08000ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_2_IRQHandler>

08000dde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de4:	2300      	movs	r3, #0
 8000de6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f001 fbb1 	bl	8002550 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 f80e 	bl	8000e10 <HAL_InitTick>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	e001      	b.n	8000e04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e00:	f7ff fde4 	bl	80009cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e04:	79fb      	ldrb	r3, [r7, #7]

}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_InitTick+0x68>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d022      	beq.n	8000e6a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_InitTick+0x6c>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <HAL_InitTick+0x68>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f001 fbbc 	bl	80025b6 <HAL_SYSTICK_Config>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d10f      	bne.n	8000e64 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b0f      	cmp	r3, #15
 8000e48:	d809      	bhi.n	8000e5e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e52:	f001 fb88 	bl	8002566 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_InitTick+0x70>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	e007      	b.n	8000e6e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	e004      	b.n	8000e6e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e001      	b.n	8000e6e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_IncTick+0x1c>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a03      	ldr	r2, [pc, #12]	; (8000ea0 <HAL_IncTick+0x1c>)
 8000e94:	6013      	str	r3, [r2, #0]
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	20000208 	.word	0x20000208
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000208 	.word	0x20000208

08000ec0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	609a      	str	r2, [r3, #8]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3360      	adds	r3, #96	; 0x60
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <LL_ADC_SetOffset+0x44>)
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	4313      	orrs	r3, r2
 8000f58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f60:	bf00      	nop
 8000f62:	371c      	adds	r7, #28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	03fff000 	.word	0x03fff000

08000f70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3360      	adds	r3, #96	; 0x60
 8000f7e:	461a      	mov	r2, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3360      	adds	r3, #96	; 0x60
 8000fac:	461a      	mov	r2, r3
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fc6:	bf00      	nop
 8000fc8:	371c      	adds	r7, #28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b087      	sub	sp, #28
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3360      	adds	r3, #96	; 0x60
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000ffc:	bf00      	nop
 8000ffe:	371c      	adds	r7, #28
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3360      	adds	r3, #96	; 0x60
 8001018:	461a      	mov	r2, r3
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	431a      	orrs	r2, r3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001032:	bf00      	nop
 8001034:	371c      	adds	r7, #28
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	615a      	str	r2, [r3, #20]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800108a:	b480      	push	{r7}
 800108c:	b087      	sub	sp, #28
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3330      	adds	r3, #48	; 0x30
 800109a:	461a      	mov	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	0a1b      	lsrs	r3, r3, #8
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	4413      	add	r3, r2
 80010a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	f003 031f 	and.w	r3, r3, #31
 80010b4:	211f      	movs	r1, #31
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	401a      	ands	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	0e9b      	lsrs	r3, r3, #26
 80010c2:	f003 011f 	and.w	r1, r3, #31
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	f003 031f 	and.w	r3, r3, #31
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	431a      	orrs	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010d6:	bf00      	nop
 80010d8:	371c      	adds	r7, #28
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b087      	sub	sp, #28
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	3314      	adds	r3, #20
 80010f2:	461a      	mov	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	0e5b      	lsrs	r3, r3, #25
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	4413      	add	r3, r2
 8001100:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	0d1b      	lsrs	r3, r3, #20
 800110a:	f003 031f 	and.w	r3, r3, #31
 800110e:	2107      	movs	r1, #7
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	401a      	ands	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	0d1b      	lsrs	r3, r3, #20
 800111c:	f003 031f 	and.w	r3, r3, #31
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	431a      	orrs	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800112c:	bf00      	nop
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d10a      	bne.n	8001162 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001158:	431a      	orrs	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001160:	e00a      	b.n	8001178 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800116e:	43db      	mvns	r3, r3
 8001170:	401a      	ands	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	407f0000 	.word	0x407f0000

08001188 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 031f 	and.w	r3, r3, #31
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6093      	str	r3, [r2, #8]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011dc:	d101      	bne.n	80011e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001200:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001204:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800122c:	d101      	bne.n	8001232 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001250:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001254:	f043 0201 	orr.w	r2, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001278:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800127c:	f043 0202 	orr.w	r2, r3, #2
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <LL_ADC_IsEnabled+0x18>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <LL_ADC_IsEnabled+0x1a>
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d101      	bne.n	80012ce <LL_ADC_IsDisableOngoing+0x18>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <LL_ADC_IsDisableOngoing+0x1a>
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012f0:	f043 0204 	orr.w	r2, r3, #4
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b04      	cmp	r3, #4
 8001316:	d101      	bne.n	800131c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b08      	cmp	r3, #8
 800133c:	d101      	bne.n	8001342 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e177      	b.n	800165a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001374:	2b00      	cmp	r3, #0
 8001376:	d109      	bne.n	800138c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fb4b 	bl	8000a14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff19 	bl	80011c8 <LL_ADC_IsDeepPowerDownEnabled>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d004      	beq.n	80013a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff feff 	bl	80011a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ff34 	bl	8001218 <LL_ADC_IsInternalRegulatorEnabled>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d115      	bne.n	80013e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff18 	bl	80011f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013c0:	4b9c      	ldr	r3, [pc, #624]	; (8001634 <HAL_ADC_Init+0x2e4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	099b      	lsrs	r3, r3, #6
 80013c6:	4a9c      	ldr	r2, [pc, #624]	; (8001638 <HAL_ADC_Init+0x2e8>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	099b      	lsrs	r3, r3, #6
 80013ce:	3301      	adds	r3, #1
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013d4:	e002      	b.n	80013dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3b01      	subs	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f9      	bne.n	80013d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff16 	bl	8001218 <LL_ADC_IsInternalRegulatorEnabled>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10d      	bne.n	800140e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f6:	f043 0210 	orr.w	r2, r3, #16
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001402:	f043 0201 	orr.w	r2, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff76 	bl	8001304 <LL_ADC_REG_IsConversionOngoing>
 8001418:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2b00      	cmp	r3, #0
 8001424:	f040 8110 	bne.w	8001648 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f040 810c 	bne.w	8001648 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001434:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001438:	f043 0202 	orr.w	r2, r3, #2
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff23 	bl	8001290 <LL_ADC_IsEnabled>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d111      	bne.n	8001474 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001450:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001454:	f7ff ff1c 	bl	8001290 <LL_ADC_IsEnabled>
 8001458:	4604      	mov	r4, r0
 800145a:	4878      	ldr	r0, [pc, #480]	; (800163c <HAL_ADC_Init+0x2ec>)
 800145c:	f7ff ff18 	bl	8001290 <LL_ADC_IsEnabled>
 8001460:	4603      	mov	r3, r0
 8001462:	4323      	orrs	r3, r4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d105      	bne.n	8001474 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4619      	mov	r1, r3
 800146e:	4874      	ldr	r0, [pc, #464]	; (8001640 <HAL_ADC_Init+0x2f0>)
 8001470:	f7ff fd26 	bl	8000ec0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7f5b      	ldrb	r3, [r3, #29]
 8001478:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800147e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001484:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800148a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001492:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d106      	bne.n	80014b0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a6:	3b01      	subs	r3, #1
 80014a8:	045b      	lsls	r3, r3, #17
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d009      	beq.n	80014cc <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	4b5c      	ldr	r3, [pc, #368]	; (8001644 <HAL_ADC_Init+0x2f4>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	69b9      	ldr	r1, [r7, #24]
 80014dc:	430b      	orrs	r3, r1
 80014de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff02 	bl	8001304 <LL_ADC_REG_IsConversionOngoing>
 8001500:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff0f 	bl	800132a <LL_ADC_INJ_IsConversionOngoing>
 800150c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d16d      	bne.n	80015f0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d16a      	bne.n	80015f0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800151e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001526:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001536:	f023 0302 	bic.w	r3, r3, #2
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	69b9      	ldr	r1, [r7, #24]
 8001540:	430b      	orrs	r3, r1
 8001542:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d017      	beq.n	800157c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	691a      	ldr	r2, [r3, #16]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800155a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001564:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001568:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6911      	ldr	r1, [r2, #16]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	430b      	orrs	r3, r1
 8001576:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800157a:	e013      	b.n	80015a4 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800158a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800159c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d118      	bne.n	80015e0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015b8:	f023 0304 	bic.w	r3, r3, #4
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015c4:	4311      	orrs	r1, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80015ca:	4311      	orrs	r1, r2
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015d0:	430a      	orrs	r2, r1
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	611a      	str	r2, [r3, #16]
 80015de:	e007      	b.n	80015f0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691a      	ldr	r2, [r3, #16]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0201 	bic.w	r2, r2, #1
 80015ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10c      	bne.n	8001612 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f023 010f 	bic.w	r1, r3, #15
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	1e5a      	subs	r2, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	631a      	str	r2, [r3, #48]	; 0x30
 8001610:	e007      	b.n	8001622 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 020f 	bic.w	r2, r2, #15
 8001620:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001626:	f023 0303 	bic.w	r3, r3, #3
 800162a:	f043 0201 	orr.w	r2, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	65da      	str	r2, [r3, #92]	; 0x5c
 8001632:	e011      	b.n	8001658 <HAL_ADC_Init+0x308>
 8001634:	20000000 	.word	0x20000000
 8001638:	053e2d63 	.word	0x053e2d63
 800163c:	50000100 	.word	0x50000100
 8001640:	50000300 	.word	0x50000300
 8001644:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	f043 0210 	orr.w	r2, r3, #16
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001658:	7ffb      	ldrb	r3, [r7, #31]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3724      	adds	r7, #36	; 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd90      	pop	{r4, r7, pc}
 8001662:	bf00      	nop

08001664 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001670:	4851      	ldr	r0, [pc, #324]	; (80017b8 <HAL_ADC_Start_DMA+0x154>)
 8001672:	f7ff fd89 	bl	8001188 <LL_ADC_GetMultimode>
 8001676:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fe41 	bl	8001304 <LL_ADC_REG_IsConversionOngoing>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	f040 808f 	bne.w	80017a8 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_ADC_Start_DMA+0x34>
 8001694:	2302      	movs	r3, #2
 8001696:	e08a      	b.n	80017ae <HAL_ADC_Start_DMA+0x14a>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d002      	beq.n	80016b2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2b09      	cmp	r3, #9
 80016b0:	d173      	bne.n	800179a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 fc98 	bl	8001fe8 <ADC_Enable>
 80016b8:	4603      	mov	r3, r0
 80016ba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d166      	bne.n	8001790 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a38      	ldr	r2, [pc, #224]	; (80017bc <HAL_ADC_Start_DMA+0x158>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <HAL_ADC_Start_DMA+0x82>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	e001      	b.n	80016ea <HAL_ADC_Start_DMA+0x86>
 80016e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d002      	beq.n	80016f8 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001714:	f023 0206 	bic.w	r2, r3, #6
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	661a      	str	r2, [r3, #96]	; 0x60
 800171c:	e002      	b.n	8001724 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001728:	4a25      	ldr	r2, [pc, #148]	; (80017c0 <HAL_ADC_Start_DMA+0x15c>)
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001730:	4a24      	ldr	r2, [pc, #144]	; (80017c4 <HAL_ADC_Start_DMA+0x160>)
 8001732:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001738:	4a23      	ldr	r2, [pc, #140]	; (80017c8 <HAL_ADC_Start_DMA+0x164>)
 800173a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	221c      	movs	r2, #28
 8001742:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0210 	orr.w	r2, r2, #16
 800175a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3340      	adds	r3, #64	; 0x40
 8001776:	4619      	mov	r1, r3
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f000 ffd0 	bl	8002720 <HAL_DMA_Start_IT>
 8001780:	4603      	mov	r3, r0
 8001782:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fda7 	bl	80012dc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800178e:	e00d      	b.n	80017ac <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001798:	e008      	b.n	80017ac <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80017a6:	e001      	b.n	80017ac <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017a8:	2302      	movs	r3, #2
 80017aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	50000300 	.word	0x50000300
 80017bc:	50000100 	.word	0x50000100
 80017c0:	0800216b 	.word	0x0800216b
 80017c4:	08002243 	.word	0x08002243
 80017c8:	0800225f 	.word	0x0800225f

080017cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b0b6      	sub	sp, #216	; 0xd8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_ADC_ConfigChannel+0x22>
 8001826:	2302      	movs	r3, #2
 8001828:	e3c8      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x7b4>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fd64 	bl	8001304 <LL_ADC_REG_IsConversionOngoing>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 83ad 	bne.w	8001f9e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	f7ff fc1a 	bl	800108a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fd52 	bl	8001304 <LL_ADC_REG_IsConversionOngoing>
 8001860:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fd5e 	bl	800132a <LL_ADC_INJ_IsConversionOngoing>
 800186e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001872:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001876:	2b00      	cmp	r3, #0
 8001878:	f040 81d9 	bne.w	8001c2e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800187c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001880:	2b00      	cmp	r3, #0
 8001882:	f040 81d4 	bne.w	8001c2e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800188e:	d10f      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2200      	movs	r2, #0
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff fc21 	bl	80010e2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fbc8 	bl	800103e <LL_ADC_SetSamplingTimeCommonConfig>
 80018ae:	e00e      	b.n	80018ce <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	6819      	ldr	r1, [r3, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	461a      	mov	r2, r3
 80018be:	f7ff fc10 	bl	80010e2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fbb8 	bl	800103e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d022      	beq.n	8001936 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6818      	ldr	r0, [r3, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6919      	ldr	r1, [r3, #16]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001900:	f7ff fb12 	bl	8000f28 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	6919      	ldr	r1, [r3, #16]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	461a      	mov	r2, r3
 8001912:	f7ff fb5e 	bl	8000fd2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	6919      	ldr	r1, [r3, #16]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	7f1b      	ldrb	r3, [r3, #28]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d102      	bne.n	800192c <HAL_ADC_ConfigChannel+0x124>
 8001926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800192a:	e000      	b.n	800192e <HAL_ADC_ConfigChannel+0x126>
 800192c:	2300      	movs	r3, #0
 800192e:	461a      	mov	r2, r3
 8001930:	f7ff fb6a 	bl	8001008 <LL_ADC_SetOffsetSaturation>
 8001934:	e17b      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fb17 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10a      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x15a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fb0c 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001958:	4603      	mov	r3, r0
 800195a:	0e9b      	lsrs	r3, r3, #26
 800195c:	f003 021f 	and.w	r2, r3, #31
 8001960:	e01e      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x198>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fb01 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 800196e:	4603      	mov	r3, r0
 8001970:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001980:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001984:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001988:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001990:	2320      	movs	r3, #32
 8001992:	e004      	b.n	800199e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001994:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d105      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1b0>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0e9b      	lsrs	r3, r3, #26
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	e018      	b.n	80019ea <HAL_ADC_ConfigChannel+0x1e2>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80019dc:	2320      	movs	r3, #32
 80019de:	e004      	b.n	80019ea <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80019e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d106      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fad0 	bl	8000f9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2101      	movs	r1, #1
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fab4 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10a      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x220>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2101      	movs	r1, #1
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff faa9 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	0e9b      	lsrs	r3, r3, #26
 8001a22:	f003 021f 	and.w	r2, r3, #31
 8001a26:	e01e      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x25e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fa9e 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001a56:	2320      	movs	r3, #32
 8001a58:	e004      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001a5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d105      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x276>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	0e9b      	lsrs	r3, r3, #26
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	e018      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x2a8>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001aa2:	2320      	movs	r3, #32
 8001aa4:	e004      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001aa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d106      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2101      	movs	r1, #1
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fa6d 	bl	8000f9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fa51 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10a      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x2e6>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2102      	movs	r1, #2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fa46 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	0e9b      	lsrs	r3, r3, #26
 8001ae8:	f003 021f 	and.w	r2, r3, #31
 8001aec:	e01e      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x324>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2102      	movs	r1, #2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fa3b 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	e004      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001b20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x33c>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0e9b      	lsrs	r3, r3, #26
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	e016      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x36a>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001b64:	2320      	movs	r3, #32
 8001b66:	e004      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b6c:	fab3 f383 	clz	r3, r3
 8001b70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d106      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fa0c 	bl	8000f9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2103      	movs	r1, #3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff f9f0 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10a      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x3a8>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2103      	movs	r1, #3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff f9e5 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	0e9b      	lsrs	r3, r3, #26
 8001baa:	f003 021f 	and.w	r2, r3, #31
 8001bae:	e017      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x3d8>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2103      	movs	r1, #3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f9da 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bc2:	fa93 f3a3 	rbit	r3, r3
 8001bc6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bca:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	e003      	b.n	8001bde <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001bd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d105      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x3f0>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0e9b      	lsrs	r3, r3, #26
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	e011      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x414>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c08:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001c10:	2320      	movs	r3, #32
 8001c12:	e003      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d106      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2200      	movs	r2, #0
 8001c26:	2103      	movs	r1, #3
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f9b7 	bl	8000f9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fb2c 	bl	8001290 <LL_ADC_IsEnabled>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f040 8140 	bne.w	8001ec0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	6819      	ldr	r1, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	f7ff fa73 	bl	8001138 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	4a8f      	ldr	r2, [pc, #572]	; (8001e94 <HAL_ADC_ConfigChannel+0x68c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	f040 8131 	bne.w	8001ec0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10b      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x47e>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0e9b      	lsrs	r3, r3, #26
 8001c74:	3301      	adds	r3, #1
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	2b09      	cmp	r3, #9
 8001c7c:	bf94      	ite	ls
 8001c7e:	2301      	movls	r3, #1
 8001c80:	2300      	movhi	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	e019      	b.n	8001cba <HAL_ADC_ConfigChannel+0x4b2>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c96:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001c9e:	2320      	movs	r3, #32
 8001ca0:	e003      	b.n	8001caa <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ca4:	fab3 f383 	clz	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	3301      	adds	r3, #1
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	2b09      	cmp	r3, #9
 8001cb2:	bf94      	ite	ls
 8001cb4:	2301      	movls	r3, #1
 8001cb6:	2300      	movhi	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d079      	beq.n	8001db2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d107      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x4d2>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	0e9b      	lsrs	r3, r3, #26
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	069b      	lsls	r3, r3, #26
 8001cd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cd8:	e015      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x4fe>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cea:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001cf2:	2320      	movs	r3, #32
 8001cf4:	e003      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf8:	fab3 f383 	clz	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	3301      	adds	r3, #1
 8001d00:	069b      	lsls	r3, r3, #26
 8001d02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x51e>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	0e9b      	lsrs	r3, r3, #26
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	2101      	movs	r1, #1
 8001d20:	fa01 f303 	lsl.w	r3, r1, r3
 8001d24:	e017      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x54e>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d36:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001d3e:	2320      	movs	r3, #32
 8001d40:	e003      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	ea42 0103 	orr.w	r1, r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10a      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x574>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	0e9b      	lsrs	r3, r3, #26
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f003 021f 	and.w	r2, r3, #31
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	051b      	lsls	r3, r3, #20
 8001d7a:	e018      	b.n	8001dae <HAL_ADC_ConfigChannel+0x5a6>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001d94:	2320      	movs	r3, #32
 8001d96:	e003      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	f003 021f 	and.w	r2, r3, #31
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dae:	430b      	orrs	r3, r1
 8001db0:	e081      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d107      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x5c6>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	0e9b      	lsrs	r3, r3, #26
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	069b      	lsls	r3, r3, #26
 8001dc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dcc:	e015      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x5f2>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dde:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001de6:	2320      	movs	r3, #32
 8001de8:	e003      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	3301      	adds	r3, #1
 8001df4:	069b      	lsls	r3, r3, #26
 8001df6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x612>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	0e9b      	lsrs	r3, r3, #26
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	2101      	movs	r1, #1
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	e017      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x642>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	61fb      	str	r3, [r7, #28]
  return result;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001e32:	2320      	movs	r3, #32
 8001e34:	e003      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	2101      	movs	r1, #1
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	ea42 0103 	orr.w	r1, r2, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10d      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x66e>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	0e9b      	lsrs	r3, r3, #26
 8001e60:	3301      	adds	r3, #1
 8001e62:	f003 021f 	and.w	r2, r3, #31
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b1e      	subs	r3, #30
 8001e6e:	051b      	lsls	r3, r3, #20
 8001e70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e74:	e01e      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x6ac>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	613b      	str	r3, [r7, #16]
  return result;
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d104      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	e006      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x698>
 8001e92:	bf00      	nop
 8001e94:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f003 021f 	and.w	r2, r3, #31
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b1e      	subs	r3, #30
 8001eae:	051b      	lsls	r3, r3, #20
 8001eb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	6892      	ldr	r2, [r2, #8]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f7ff f911 	bl	80010e2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d071      	beq.n	8001fb0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ecc:	483e      	ldr	r0, [pc, #248]	; (8001fc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ece:	f7ff f81d 	bl	8000f0c <LL_ADC_GetCommonPathInternalCh>
 8001ed2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a3c      	ldr	r2, [pc, #240]	; (8001fcc <HAL_ADC_ConfigChannel+0x7c4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d004      	beq.n	8001eea <HAL_ADC_ConfigChannel+0x6e2>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a3a      	ldr	r2, [pc, #232]	; (8001fd0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d127      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001eea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d121      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001efe:	d157      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f08:	4619      	mov	r1, r3
 8001f0a:	482f      	ldr	r0, [pc, #188]	; (8001fc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f0c:	f7fe ffeb 	bl	8000ee6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f10:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	4a30      	ldr	r2, [pc, #192]	; (8001fd8 <HAL_ADC_ConfigChannel+0x7d0>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	099b      	lsrs	r3, r3, #6
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f2a:	e002      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f9      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f38:	e03a      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a27      	ldr	r2, [pc, #156]	; (8001fdc <HAL_ADC_ConfigChannel+0x7d4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d113      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x764>
 8001f44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10d      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d02a      	beq.n	8001fb0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f62:	4619      	mov	r1, r3
 8001f64:	4818      	ldr	r0, [pc, #96]	; (8001fc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f66:	f7fe ffbe 	bl	8000ee6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f6a:	e021      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1c      	ldr	r2, [pc, #112]	; (8001fe4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d11c      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d116      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d011      	beq.n	8001fb0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f94:	4619      	mov	r1, r3
 8001f96:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f98:	f7fe ffa5 	bl	8000ee6 <LL_ADC_SetCommonPathInternalCh>
 8001f9c:	e008      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa2:	f043 0220 	orr.w	r2, r3, #32
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001fb8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	37d8      	adds	r7, #216	; 0xd8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	80080000 	.word	0x80080000
 8001fc8:	50000300 	.word	0x50000300
 8001fcc:	c3210000 	.word	0xc3210000
 8001fd0:	90c00010 	.word	0x90c00010
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	053e2d63 	.word	0x053e2d63
 8001fdc:	c7520000 	.word	0xc7520000
 8001fe0:	50000100 	.word	0x50000100
 8001fe4:	cb840000 	.word	0xcb840000

08001fe8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff f94b 	bl	8001290 <LL_ADC_IsEnabled>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d14d      	bne.n	800209c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <ADC_Enable+0xc0>)
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00d      	beq.n	800202a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002012:	f043 0210 	orr.w	r2, r3, #16
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800201e:	f043 0201 	orr.w	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e039      	b.n	800209e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff f906 	bl	8001240 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002034:	f7fe ff38 	bl	8000ea8 <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800203a:	e028      	b.n	800208e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff f925 	bl	8001290 <LL_ADC_IsEnabled>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d104      	bne.n	8002056 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff f8f5 	bl	8001240 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002056:	f7fe ff27 	bl	8000ea8 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d914      	bls.n	800208e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b01      	cmp	r3, #1
 8002070:	d00d      	beq.n	800208e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002076:	f043 0210 	orr.w	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e007      	b.n	800209e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b01      	cmp	r3, #1
 800209a:	d1cf      	bne.n	800203c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	8000003f 	.word	0x8000003f

080020ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff f8fc 	bl	80012b6 <LL_ADC_IsDisableOngoing>
 80020be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff f8e3 	bl	8001290 <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d047      	beq.n	8002160 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d144      	bne.n	8002160 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 030d 	and.w	r3, r3, #13
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d10c      	bne.n	80020fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff f8bd 	bl	8001268 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2203      	movs	r2, #3
 80020f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020f6:	f7fe fed7 	bl	8000ea8 <HAL_GetTick>
 80020fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020fc:	e029      	b.n	8002152 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002102:	f043 0210 	orr.w	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210e:	f043 0201 	orr.w	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e023      	b.n	8002162 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800211a:	f7fe fec5 	bl	8000ea8 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d914      	bls.n	8002152 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00d      	beq.n	8002152 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213a:	f043 0210 	orr.w	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002146:	f043 0201 	orr.w	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e007      	b.n	8002162 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1dc      	bne.n	800211a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002180:	2b00      	cmp	r3, #0
 8002182:	d14b      	bne.n	800221c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002188:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d021      	beq.n	80021e2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe ff5e 	bl	8001064 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d032      	beq.n	8002214 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d12b      	bne.n	8002214 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d11f      	bne.n	8002214 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	f043 0201 	orr.w	r2, r3, #1
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	65da      	str	r2, [r3, #92]	; 0x5c
 80021e0:	e018      	b.n	8002214 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d111      	bne.n	8002214 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	f043 0201 	orr.w	r2, r3, #1
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7ff fad9 	bl	80017cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800221a:	e00e      	b.n	800223a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f7ff fae3 	bl	80017f4 <HAL_ADC_ErrorCallback>
}
 800222e:	e004      	b.n	800223a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	4798      	blx	r3
}
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f7ff fac5 	bl	80017e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227c:	f043 0204 	orr.w	r2, r3, #4
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f7ff fab5 	bl	80017f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <LL_ADC_StartCalibration>:
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80022a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	609a      	str	r2, [r3, #8]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_ADC_IsCalibrationOnGoing>:
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022d8:	d101      	bne.n	80022de <LL_ADC_IsCalibrationOnGoing+0x1a>
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_ADCEx_Calibration_Start+0x1c>
 8002304:	2302      	movs	r3, #2
 8002306:	e04d      	b.n	80023a4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff fecb 	bl	80020ac <ADC_Disable>
 8002316:	4603      	mov	r3, r0
 8002318:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d136      	bne.n	800238e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002328:	f023 0302 	bic.w	r3, r3, #2
 800232c:	f043 0202 	orr.w	r2, r3, #2
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ffa9 	bl	8002292 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002340:	e014      	b.n	800236c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	3301      	adds	r3, #1
 8002346:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4a18      	ldr	r2, [pc, #96]	; (80023ac <HAL_ADCEx_Calibration_Start+0xc0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d90d      	bls.n	800236c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	f023 0312 	bic.w	r3, r3, #18
 8002358:	f043 0210 	orr.w	r2, r3, #16
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e01b      	b.n	80023a4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ffa7 	bl	80022c4 <LL_ADC_IsCalibrationOnGoing>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1e2      	bne.n	8002342 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	f023 0303 	bic.w	r3, r3, #3
 8002384:	f043 0201 	orr.w	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	65da      	str	r2, [r3, #92]	; 0x5c
 800238c:	e005      	b.n	800239a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002392:	f043 0210 	orr.w	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	0004de01 	.word	0x0004de01

080023b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023cc:	4013      	ands	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e2:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	60d3      	str	r3, [r2, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <__NVIC_GetPriorityGrouping+0x18>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 0307 	and.w	r3, r3, #7
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	2b00      	cmp	r3, #0
 8002424:	db0b      	blt.n	800243e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4907      	ldr	r1, [pc, #28]	; (800244c <__NVIC_EnableIRQ+0x38>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2001      	movs	r0, #1
 8002436:	fa00 f202 	lsl.w	r2, r0, r2
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000e100 	.word	0xe000e100

08002450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	6039      	str	r1, [r7, #0]
 800245a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	2b00      	cmp	r3, #0
 8002462:	db0a      	blt.n	800247a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	b2da      	uxtb	r2, r3
 8002468:	490c      	ldr	r1, [pc, #48]	; (800249c <__NVIC_SetPriority+0x4c>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	0112      	lsls	r2, r2, #4
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	440b      	add	r3, r1
 8002474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002478:	e00a      	b.n	8002490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4908      	ldr	r1, [pc, #32]	; (80024a0 <__NVIC_SetPriority+0x50>)
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	3b04      	subs	r3, #4
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	440b      	add	r3, r1
 800248e:	761a      	strb	r2, [r3, #24]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000e100 	.word	0xe000e100
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f1c3 0307 	rsb	r3, r3, #7
 80024be:	2b04      	cmp	r3, #4
 80024c0:	bf28      	it	cs
 80024c2:	2304      	movcs	r3, #4
 80024c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d902      	bls.n	80024d4 <NVIC_EncodePriority+0x30>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3b03      	subs	r3, #3
 80024d2:	e000      	b.n	80024d6 <NVIC_EncodePriority+0x32>
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	401a      	ands	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	43d9      	mvns	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	4313      	orrs	r3, r2
         );
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3724      	adds	r7, #36	; 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3b01      	subs	r3, #1
 8002518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800251c:	d301      	bcc.n	8002522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800251e:	2301      	movs	r3, #1
 8002520:	e00f      	b.n	8002542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002522:	4a0a      	ldr	r2, [pc, #40]	; (800254c <SysTick_Config+0x40>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800252a:	210f      	movs	r1, #15
 800252c:	f04f 30ff 	mov.w	r0, #4294967295
 8002530:	f7ff ff8e 	bl	8002450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <SysTick_Config+0x40>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <SysTick_Config+0x40>)
 800253c:	2207      	movs	r2, #7
 800253e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	e000e010 	.word	0xe000e010

08002550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ff29 	bl	80023b0 <__NVIC_SetPriorityGrouping>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b086      	sub	sp, #24
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002574:	f7ff ff40 	bl	80023f8 <__NVIC_GetPriorityGrouping>
 8002578:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	6978      	ldr	r0, [r7, #20]
 8002580:	f7ff ff90 	bl	80024a4 <NVIC_EncodePriority>
 8002584:	4602      	mov	r2, r0
 8002586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff5f 	bl	8002450 <__NVIC_SetPriority>
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff33 	bl	8002414 <__NVIC_EnableIRQ>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ffa4 	bl	800250c <SysTick_Config>
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e08d      	b.n	80026fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_DMA_Init+0x138>)
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d80f      	bhi.n	800260e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b45      	ldr	r3, [pc, #276]	; (800270c <HAL_DMA_Init+0x13c>)
 80025f6:	4413      	add	r3, r2
 80025f8:	4a45      	ldr	r2, [pc, #276]	; (8002710 <HAL_DMA_Init+0x140>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	009a      	lsls	r2, r3, #2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a42      	ldr	r2, [pc, #264]	; (8002714 <HAL_DMA_Init+0x144>)
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
 800260c:	e00e      	b.n	800262c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	4b40      	ldr	r3, [pc, #256]	; (8002718 <HAL_DMA_Init+0x148>)
 8002616:	4413      	add	r3, r2
 8002618:	4a3d      	ldr	r2, [pc, #244]	; (8002710 <HAL_DMA_Init+0x140>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	009a      	lsls	r2, r3, #2
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a3c      	ldr	r2, [pc, #240]	; (800271c <HAL_DMA_Init+0x14c>)
 800262a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002646:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800265c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f9b6 	bl	80029f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800268c:	d102      	bne.n	8002694 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d010      	beq.n	80026d4 <HAL_DMA_Init+0x104>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d80c      	bhi.n	80026d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f9d6 	bl	8002a6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	e008      	b.n	80026e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40020407 	.word	0x40020407
 800270c:	bffdfff8 	.word	0xbffdfff8
 8002710:	cccccccd 	.word	0xcccccccd
 8002714:	40020000 	.word	0x40020000
 8002718:	bffdfbf8 	.word	0xbffdfbf8
 800271c:	40020400 	.word	0x40020400

08002720 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_DMA_Start_IT+0x20>
 800273c:	2302      	movs	r3, #2
 800273e:	e066      	b.n	800280e <HAL_DMA_Start_IT+0xee>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d155      	bne.n	8002800 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0201 	bic.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f8fb 	bl	8002974 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 020e 	orr.w	r2, r2, #14
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	e00f      	b.n	80027b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0204 	bic.w	r2, r2, #4
 80027a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 020a 	orr.w	r2, r2, #10
 80027b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0201 	orr.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e005      	b.n	800280c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002808:	2302      	movs	r3, #2
 800280a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800280c:	7dfb      	ldrb	r3, [r7, #23]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	2204      	movs	r2, #4
 8002838:	409a      	lsls	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d026      	beq.n	8002890 <HAL_DMA_IRQHandler+0x7a>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d021      	beq.n	8002890 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b00      	cmp	r3, #0
 8002858:	d107      	bne.n	800286a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0204 	bic.w	r2, r2, #4
 8002868:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f003 021f 	and.w	r2, r3, #31
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	2104      	movs	r1, #4
 8002878:	fa01 f202 	lsl.w	r2, r1, r2
 800287c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	2b00      	cmp	r3, #0
 8002884:	d071      	beq.n	800296a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800288e:	e06c      	b.n	800296a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	2202      	movs	r2, #2
 800289a:	409a      	lsls	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d02e      	beq.n	8002902 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d029      	beq.n	8002902 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 020a 	bic.w	r2, r2, #10
 80028ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	2102      	movs	r1, #2
 80028e2:	fa01 f202 	lsl.w	r2, r1, r2
 80028e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d038      	beq.n	800296a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002900:	e033      	b.n	800296a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	2208      	movs	r2, #8
 800290c:	409a      	lsls	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4013      	ands	r3, r2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d02a      	beq.n	800296c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d025      	beq.n	800296c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 020e 	bic.w	r2, r2, #14
 800292e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	f003 021f 	and.w	r2, r3, #31
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	2101      	movs	r1, #1
 800293e:	fa01 f202 	lsl.w	r2, r1, r2
 8002942:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295e:	2b00      	cmp	r3, #0
 8002960:	d004      	beq.n	800296c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800296a:	bf00      	nop
 800296c:	bf00      	nop
}
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800298a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	2b00      	cmp	r3, #0
 8002992:	d004      	beq.n	800299e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800299c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f003 021f 	and.w	r2, r3, #31
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	2101      	movs	r1, #1
 80029ac:	fa01 f202 	lsl.w	r2, r1, r2
 80029b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b10      	cmp	r3, #16
 80029c0:	d108      	bne.n	80029d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029d2:	e007      	b.n	80029e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	60da      	str	r2, [r3, #12]
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d802      	bhi.n	8002a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002a04:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	e001      	b.n	8002a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002a0a:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002a0c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	3b08      	subs	r3, #8
 8002a1a:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	009a      	lsls	r2, r3, #2
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4413      	add	r3, r2
 8002a30:	461a      	mov	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002a3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	2201      	movs	r2, #1
 8002a44:	409a      	lsls	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40020407 	.word	0x40020407
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	40020820 	.word	0x40020820
 8002a64:	cccccccd 	.word	0xcccccccd
 8002a68:	40020880 	.word	0x40020880

08002a6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	461a      	mov	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a8e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	2201      	movs	r2, #1
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	1000823f 	.word	0x1000823f
 8002ab0:	40020940 	.word	0x40020940

08002ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ac2:	e15a      	b.n	8002d7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2101      	movs	r1, #1
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 814c 	beq.w	8002d74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d005      	beq.n	8002af4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d130      	bne.n	8002b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	f003 0201 	and.w	r2, r3, #1
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d017      	beq.n	8002b92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d123      	bne.n	8002be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	08da      	lsrs	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3208      	adds	r2, #8
 8002ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	220f      	movs	r2, #15
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	6939      	ldr	r1, [r7, #16]
 8002be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 0203 	and.w	r2, r3, #3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80a6 	beq.w	8002d74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c28:	4b5b      	ldr	r3, [pc, #364]	; (8002d98 <HAL_GPIO_Init+0x2e4>)
 8002c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2c:	4a5a      	ldr	r2, [pc, #360]	; (8002d98 <HAL_GPIO_Init+0x2e4>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6613      	str	r3, [r2, #96]	; 0x60
 8002c34:	4b58      	ldr	r3, [pc, #352]	; (8002d98 <HAL_GPIO_Init+0x2e4>)
 8002c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c40:	4a56      	ldr	r2, [pc, #344]	; (8002d9c <HAL_GPIO_Init+0x2e8>)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	089b      	lsrs	r3, r3, #2
 8002c46:	3302      	adds	r3, #2
 8002c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	220f      	movs	r2, #15
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c6a:	d01f      	beq.n	8002cac <HAL_GPIO_Init+0x1f8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a4c      	ldr	r2, [pc, #304]	; (8002da0 <HAL_GPIO_Init+0x2ec>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d019      	beq.n	8002ca8 <HAL_GPIO_Init+0x1f4>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a4b      	ldr	r2, [pc, #300]	; (8002da4 <HAL_GPIO_Init+0x2f0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d013      	beq.n	8002ca4 <HAL_GPIO_Init+0x1f0>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a4a      	ldr	r2, [pc, #296]	; (8002da8 <HAL_GPIO_Init+0x2f4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00d      	beq.n	8002ca0 <HAL_GPIO_Init+0x1ec>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a49      	ldr	r2, [pc, #292]	; (8002dac <HAL_GPIO_Init+0x2f8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d007      	beq.n	8002c9c <HAL_GPIO_Init+0x1e8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a48      	ldr	r2, [pc, #288]	; (8002db0 <HAL_GPIO_Init+0x2fc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d101      	bne.n	8002c98 <HAL_GPIO_Init+0x1e4>
 8002c94:	2305      	movs	r3, #5
 8002c96:	e00a      	b.n	8002cae <HAL_GPIO_Init+0x1fa>
 8002c98:	2306      	movs	r3, #6
 8002c9a:	e008      	b.n	8002cae <HAL_GPIO_Init+0x1fa>
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	e006      	b.n	8002cae <HAL_GPIO_Init+0x1fa>
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e004      	b.n	8002cae <HAL_GPIO_Init+0x1fa>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e002      	b.n	8002cae <HAL_GPIO_Init+0x1fa>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <HAL_GPIO_Init+0x1fa>
 8002cac:	2300      	movs	r3, #0
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	f002 0203 	and.w	r2, r2, #3
 8002cb4:	0092      	lsls	r2, r2, #2
 8002cb6:	4093      	lsls	r3, r2
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cbe:	4937      	ldr	r1, [pc, #220]	; (8002d9c <HAL_GPIO_Init+0x2e8>)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	089b      	lsrs	r3, r3, #2
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ccc:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cf0:	4a30      	ldr	r2, [pc, #192]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4013      	ands	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d1a:	4a26      	ldr	r2, [pc, #152]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002d20:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d44:	4a1b      	ldr	r2, [pc, #108]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d4a:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4013      	ands	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d6e:	4a11      	ldr	r2, [pc, #68]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	3301      	adds	r3, #1
 8002d78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f47f ae9d 	bne.w	8002ac4 <HAL_GPIO_Init+0x10>
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	bf00      	nop
 8002d8e:	371c      	adds	r7, #28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	48000400 	.word	0x48000400
 8002da4:	48000800 	.word	0x48000800
 8002da8:	48000c00 	.word	0x48000c00
 8002dac:	48001000 	.word	0x48001000
 8002db0:	48001400 	.word	0x48001400
 8002db4:	40010400 	.word	0x40010400

08002db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	807b      	strh	r3, [r7, #2]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dc8:	787b      	ldrb	r3, [r7, #1]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dce:	887a      	ldrh	r2, [r7, #2]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dd4:	e002      	b.n	8002ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d141      	bne.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002df6:	4b4b      	ldr	r3, [pc, #300]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e02:	d131      	bne.n	8002e68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e04:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e0a:	4a46      	ldr	r2, [pc, #280]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e14:	4b43      	ldr	r3, [pc, #268]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e1c:	4a41      	ldr	r2, [pc, #260]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e24:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2232      	movs	r2, #50	; 0x32
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	4a3f      	ldr	r2, [pc, #252]	; (8002f2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e30:	fba2 2303 	umull	r2, r3, r2, r3
 8002e34:	0c9b      	lsrs	r3, r3, #18
 8002e36:	3301      	adds	r3, #1
 8002e38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e3a:	e002      	b.n	8002e42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e42:	4b38      	ldr	r3, [pc, #224]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e4e:	d102      	bne.n	8002e56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f2      	bne.n	8002e3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e56:	4b33      	ldr	r3, [pc, #204]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e62:	d158      	bne.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e057      	b.n	8002f18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e68:	4b2e      	ldr	r3, [pc, #184]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e6e:	4a2d      	ldr	r2, [pc, #180]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e78:	e04d      	b.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e80:	d141      	bne.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e82:	4b28      	ldr	r3, [pc, #160]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8e:	d131      	bne.n	8002ef4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e90:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e96:	4a23      	ldr	r2, [pc, #140]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ea0:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ea8:	4a1e      	ldr	r2, [pc, #120]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2232      	movs	r2, #50	; 0x32
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	0c9b      	lsrs	r3, r3, #18
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ec6:	e002      	b.n	8002ece <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eda:	d102      	bne.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f2      	bne.n	8002ec8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eee:	d112      	bne.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e011      	b.n	8002f18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002efa:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f04:	e007      	b.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f06:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40007000 	.word	0x40007000
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	431bde83 	.word	0x431bde83

08002f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e306      	b.n	8003550 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d075      	beq.n	800303a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4e:	4b97      	ldr	r3, [pc, #604]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f58:	4b94      	ldr	r3, [pc, #592]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	2b0c      	cmp	r3, #12
 8002f66:	d102      	bne.n	8002f6e <HAL_RCC_OscConfig+0x3e>
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d002      	beq.n	8002f74 <HAL_RCC_OscConfig+0x44>
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d10b      	bne.n	8002f8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f74:	4b8d      	ldr	r3, [pc, #564]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d05b      	beq.n	8003038 <HAL_RCC_OscConfig+0x108>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d157      	bne.n	8003038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e2e1      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f94:	d106      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x74>
 8002f96:	4b85      	ldr	r3, [pc, #532]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a84      	ldr	r2, [pc, #528]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8002f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e01d      	b.n	8002fe0 <HAL_RCC_OscConfig+0xb0>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x98>
 8002fae:	4b7f      	ldr	r3, [pc, #508]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a7e      	ldr	r2, [pc, #504]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8002fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	4b7c      	ldr	r3, [pc, #496]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a7b      	ldr	r2, [pc, #492]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8002fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0xb0>
 8002fc8:	4b78      	ldr	r3, [pc, #480]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a77      	ldr	r2, [pc, #476]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8002fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	4b75      	ldr	r3, [pc, #468]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a74      	ldr	r2, [pc, #464]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8002fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d013      	beq.n	8003010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fd ff5e 	bl	8000ea8 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fd ff5a 	bl	8000ea8 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e2a6      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003002:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0xc0>
 800300e:	e014      	b.n	800303a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fd ff4a 	bl	8000ea8 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003018:	f7fd ff46 	bl	8000ea8 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	; 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e292      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800302a:	4b60      	ldr	r3, [pc, #384]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0xe8>
 8003036:	e000      	b.n	800303a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d075      	beq.n	8003132 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003046:	4b59      	ldr	r3, [pc, #356]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003050:	4b56      	ldr	r3, [pc, #344]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b0c      	cmp	r3, #12
 800305e:	d102      	bne.n	8003066 <HAL_RCC_OscConfig+0x136>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d002      	beq.n	800306c <HAL_RCC_OscConfig+0x13c>
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b04      	cmp	r3, #4
 800306a:	d11f      	bne.n	80030ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800306c:	4b4f      	ldr	r3, [pc, #316]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_RCC_OscConfig+0x154>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e265      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003084:	4b49      	ldr	r3, [pc, #292]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	061b      	lsls	r3, r3, #24
 8003092:	4946      	ldr	r1, [pc, #280]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003098:	4b45      	ldr	r3, [pc, #276]	; (80031b0 <HAL_RCC_OscConfig+0x280>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd feb7 	bl	8000e10 <HAL_InitTick>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d043      	beq.n	8003130 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e251      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d023      	beq.n	80030fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b4:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a3c      	ldr	r2, [pc, #240]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 80030ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fd fef2 	bl	8000ea8 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fd feee 	bl	8000ea8 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e23a      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030da:	4b34      	ldr	r3, [pc, #208]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e6:	4b31      	ldr	r3, [pc, #196]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	061b      	lsls	r3, r3, #24
 80030f4:	492d      	ldr	r1, [pc, #180]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	604b      	str	r3, [r1, #4]
 80030fa:	e01a      	b.n	8003132 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030fc:	4b2b      	ldr	r3, [pc, #172]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a2a      	ldr	r2, [pc, #168]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8003102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7fd fece 	bl	8000ea8 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003110:	f7fd feca 	bl	8000ea8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e216      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003122:	4b22      	ldr	r3, [pc, #136]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x1e0>
 800312e:	e000      	b.n	8003132 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003130:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d041      	beq.n	80031c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01c      	beq.n	8003180 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003146:	4b19      	ldr	r3, [pc, #100]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8003148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314c:	4a17      	ldr	r2, [pc, #92]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003156:	f7fd fea7 	bl	8000ea8 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315e:	f7fd fea3 	bl	8000ea8 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e1ef      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003170:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8003172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0ef      	beq.n	800315e <HAL_RCC_OscConfig+0x22e>
 800317e:	e020      	b.n	80031c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8003182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003186:	4a09      	ldr	r2, [pc, #36]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003190:	f7fd fe8a 	bl	8000ea8 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003196:	e00d      	b.n	80031b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003198:	f7fd fe86 	bl	8000ea8 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d906      	bls.n	80031b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e1d2      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000
 80031b0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031b4:	4b8c      	ldr	r3, [pc, #560]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 80031b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1ea      	bne.n	8003198 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 80a6 	beq.w	800331c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d0:	2300      	movs	r3, #0
 80031d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031d4:	4b84      	ldr	r3, [pc, #528]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_OscConfig+0x2b4>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <HAL_RCC_OscConfig+0x2b6>
 80031e4:	2300      	movs	r3, #0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00d      	beq.n	8003206 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ea:	4b7f      	ldr	r3, [pc, #508]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	4a7e      	ldr	r2, [pc, #504]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 80031f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6593      	str	r3, [r2, #88]	; 0x58
 80031f6:	4b7c      	ldr	r3, [pc, #496]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003202:	2301      	movs	r3, #1
 8003204:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003206:	4b79      	ldr	r3, [pc, #484]	; (80033ec <HAL_RCC_OscConfig+0x4bc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d118      	bne.n	8003244 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003212:	4b76      	ldr	r3, [pc, #472]	; (80033ec <HAL_RCC_OscConfig+0x4bc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a75      	ldr	r2, [pc, #468]	; (80033ec <HAL_RCC_OscConfig+0x4bc>)
 8003218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800321e:	f7fd fe43 	bl	8000ea8 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003226:	f7fd fe3f 	bl	8000ea8 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e18b      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003238:	4b6c      	ldr	r3, [pc, #432]	; (80033ec <HAL_RCC_OscConfig+0x4bc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d108      	bne.n	800325e <HAL_RCC_OscConfig+0x32e>
 800324c:	4b66      	ldr	r3, [pc, #408]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	4a65      	ldr	r2, [pc, #404]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800325c:	e024      	b.n	80032a8 <HAL_RCC_OscConfig+0x378>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b05      	cmp	r3, #5
 8003264:	d110      	bne.n	8003288 <HAL_RCC_OscConfig+0x358>
 8003266:	4b60      	ldr	r3, [pc, #384]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	4a5e      	ldr	r2, [pc, #376]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 800326e:	f043 0304 	orr.w	r3, r3, #4
 8003272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003276:	4b5c      	ldr	r3, [pc, #368]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 8003278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327c:	4a5a      	ldr	r2, [pc, #360]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003286:	e00f      	b.n	80032a8 <HAL_RCC_OscConfig+0x378>
 8003288:	4b57      	ldr	r3, [pc, #348]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	4a56      	ldr	r2, [pc, #344]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003298:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	4a52      	ldr	r2, [pc, #328]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 80032a0:	f023 0304 	bic.w	r3, r3, #4
 80032a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d016      	beq.n	80032de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7fd fdfa 	bl	8000ea8 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b8:	f7fd fdf6 	bl	8000ea8 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e140      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ce:	4b46      	ldr	r3, [pc, #280]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 80032d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0ed      	beq.n	80032b8 <HAL_RCC_OscConfig+0x388>
 80032dc:	e015      	b.n	800330a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032de:	f7fd fde3 	bl	8000ea8 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7fd fddf 	bl	8000ea8 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e129      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032fc:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ed      	bne.n	80032e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800330a:	7ffb      	ldrb	r3, [r7, #31]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d105      	bne.n	800331c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003310:	4b35      	ldr	r3, [pc, #212]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	4a34      	ldr	r2, [pc, #208]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 8003316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d03c      	beq.n	80033a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01c      	beq.n	800336a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003330:	4b2d      	ldr	r3, [pc, #180]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 8003332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003336:	4a2c      	ldr	r2, [pc, #176]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f7fd fdb2 	bl	8000ea8 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003348:	f7fd fdae 	bl	8000ea8 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e0fa      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800335a:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 800335c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ef      	beq.n	8003348 <HAL_RCC_OscConfig+0x418>
 8003368:	e01b      	b.n	80033a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800336a:	4b1f      	ldr	r3, [pc, #124]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 800336c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003370:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 8003372:	f023 0301 	bic.w	r3, r3, #1
 8003376:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fd fd95 	bl	8000ea8 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003382:	f7fd fd91 	bl	8000ea8 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e0dd      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003394:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 8003396:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1ef      	bne.n	8003382 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80d1 	beq.w	800354e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 030c 	and.w	r3, r3, #12
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	f000 808b 	beq.w	80034d0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d15e      	bne.n	8003480 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a08      	ldr	r2, [pc, #32]	; (80033e8 <HAL_RCC_OscConfig+0x4b8>)
 80033c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7fd fd6b 	bl	8000ea8 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d4:	e00c      	b.n	80033f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fd fd67 	bl	8000ea8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d905      	bls.n	80033f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e0b3      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f0:	4b59      	ldr	r3, [pc, #356]	; (8003558 <HAL_RCC_OscConfig+0x628>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1ec      	bne.n	80033d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033fc:	4b56      	ldr	r3, [pc, #344]	; (8003558 <HAL_RCC_OscConfig+0x628>)
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	4b56      	ldr	r3, [pc, #344]	; (800355c <HAL_RCC_OscConfig+0x62c>)
 8003402:	4013      	ands	r3, r2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6a11      	ldr	r1, [r2, #32]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800340c:	3a01      	subs	r2, #1
 800340e:	0112      	lsls	r2, r2, #4
 8003410:	4311      	orrs	r1, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003416:	0212      	lsls	r2, r2, #8
 8003418:	4311      	orrs	r1, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800341e:	0852      	lsrs	r2, r2, #1
 8003420:	3a01      	subs	r2, #1
 8003422:	0552      	lsls	r2, r2, #21
 8003424:	4311      	orrs	r1, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800342a:	0852      	lsrs	r2, r2, #1
 800342c:	3a01      	subs	r2, #1
 800342e:	0652      	lsls	r2, r2, #25
 8003430:	4311      	orrs	r1, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003436:	06d2      	lsls	r2, r2, #27
 8003438:	430a      	orrs	r2, r1
 800343a:	4947      	ldr	r1, [pc, #284]	; (8003558 <HAL_RCC_OscConfig+0x628>)
 800343c:	4313      	orrs	r3, r2
 800343e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003440:	4b45      	ldr	r3, [pc, #276]	; (8003558 <HAL_RCC_OscConfig+0x628>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a44      	ldr	r2, [pc, #272]	; (8003558 <HAL_RCC_OscConfig+0x628>)
 8003446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800344a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800344c:	4b42      	ldr	r3, [pc, #264]	; (8003558 <HAL_RCC_OscConfig+0x628>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4a41      	ldr	r2, [pc, #260]	; (8003558 <HAL_RCC_OscConfig+0x628>)
 8003452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003456:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fd fd26 	bl	8000ea8 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003460:	f7fd fd22 	bl	8000ea8 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e06e      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003472:	4b39      	ldr	r3, [pc, #228]	; (8003558 <HAL_RCC_OscConfig+0x628>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0x530>
 800347e:	e066      	b.n	800354e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003480:	4b35      	ldr	r3, [pc, #212]	; (8003558 <HAL_RCC_OscConfig+0x628>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a34      	ldr	r2, [pc, #208]	; (8003558 <HAL_RCC_OscConfig+0x628>)
 8003486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800348a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800348c:	4b32      	ldr	r3, [pc, #200]	; (8003558 <HAL_RCC_OscConfig+0x628>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4a31      	ldr	r2, [pc, #196]	; (8003558 <HAL_RCC_OscConfig+0x628>)
 8003492:	f023 0303 	bic.w	r3, r3, #3
 8003496:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003498:	4b2f      	ldr	r3, [pc, #188]	; (8003558 <HAL_RCC_OscConfig+0x628>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4a2e      	ldr	r2, [pc, #184]	; (8003558 <HAL_RCC_OscConfig+0x628>)
 800349e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80034a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fd fcfe 	bl	8000ea8 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fd fcfa 	bl	8000ea8 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e046      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c2:	4b25      	ldr	r3, [pc, #148]	; (8003558 <HAL_RCC_OscConfig+0x628>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x580>
 80034ce:	e03e      	b.n	800354e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e039      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80034dc:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <HAL_RCC_OscConfig+0x628>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f003 0203 	and.w	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d12c      	bne.n	800354a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	3b01      	subs	r3, #1
 80034fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d123      	bne.n	800354a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d11b      	bne.n	800354a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800351e:	429a      	cmp	r2, r3
 8003520:	d113      	bne.n	800354a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	3b01      	subs	r3, #1
 8003530:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d109      	bne.n	800354a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	085b      	lsrs	r3, r3, #1
 8003542:	3b01      	subs	r3, #1
 8003544:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d001      	beq.n	800354e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3720      	adds	r7, #32
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000
 800355c:	019f800c 	.word	0x019f800c

08003560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e11e      	b.n	80037b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003578:	4b91      	ldr	r3, [pc, #580]	; (80037c0 <HAL_RCC_ClockConfig+0x260>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d910      	bls.n	80035a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b8e      	ldr	r3, [pc, #568]	; (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 020f 	bic.w	r2, r3, #15
 800358e:	498c      	ldr	r1, [pc, #560]	; (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b8a      	ldr	r3, [pc, #552]	; (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e106      	b.n	80037b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d073      	beq.n	800369c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d129      	bne.n	8003610 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035bc:	4b81      	ldr	r3, [pc, #516]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0f4      	b.n	80037b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80035cc:	f000 f99e 	bl	800390c <RCC_GetSysClockFreqFromPLLSource>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4a7c      	ldr	r2, [pc, #496]	; (80037c8 <HAL_RCC_ClockConfig+0x268>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d93f      	bls.n	800365a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035da:	4b7a      	ldr	r3, [pc, #488]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d033      	beq.n	800365a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d12f      	bne.n	800365a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035fa:	4b72      	ldr	r3, [pc, #456]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003602:	4a70      	ldr	r2, [pc, #448]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003608:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	e024      	b.n	800365a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d107      	bne.n	8003628 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003618:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d109      	bne.n	8003638 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0c6      	b.n	80037b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003628:	4b66      	ldr	r3, [pc, #408]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0be      	b.n	80037b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003638:	f000 f8ce 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 800363c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4a61      	ldr	r2, [pc, #388]	; (80037c8 <HAL_RCC_ClockConfig+0x268>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d909      	bls.n	800365a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003646:	4b5f      	ldr	r3, [pc, #380]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364e:	4a5d      	ldr	r2, [pc, #372]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003654:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003656:	2380      	movs	r3, #128	; 0x80
 8003658:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800365a:	4b5a      	ldr	r3, [pc, #360]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f023 0203 	bic.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4957      	ldr	r1, [pc, #348]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003668:	4313      	orrs	r3, r2
 800366a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366c:	f7fd fc1c 	bl	8000ea8 <HAL_GetTick>
 8003670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003672:	e00a      	b.n	800368a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003674:	f7fd fc18 	bl	8000ea8 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e095      	b.n	80037b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	4b4e      	ldr	r3, [pc, #312]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 020c 	and.w	r2, r3, #12
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	429a      	cmp	r2, r3
 800369a:	d1eb      	bne.n	8003674 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d023      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036b4:	4b43      	ldr	r3, [pc, #268]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a42      	ldr	r2, [pc, #264]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80036ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80036cc:	4b3d      	ldr	r3, [pc, #244]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036d4:	4a3b      	ldr	r2, [pc, #236]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80036d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036dc:	4b39      	ldr	r3, [pc, #228]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4936      	ldr	r1, [pc, #216]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
 80036ee:	e008      	b.n	8003702 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2b80      	cmp	r3, #128	; 0x80
 80036f4:	d105      	bne.n	8003702 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036f6:	4b33      	ldr	r3, [pc, #204]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	4a32      	ldr	r2, [pc, #200]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 80036fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003700:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003702:	4b2f      	ldr	r3, [pc, #188]	; (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d21d      	bcs.n	800374c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f023 020f 	bic.w	r2, r3, #15
 8003718:	4929      	ldr	r1, [pc, #164]	; (80037c0 <HAL_RCC_ClockConfig+0x260>)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003720:	f7fd fbc2 	bl	8000ea8 <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003726:	e00a      	b.n	800373e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003728:	f7fd fbbe 	bl	8000ea8 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	; 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e03b      	b.n	80037b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d1ed      	bne.n	8003728 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003758:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4917      	ldr	r1, [pc, #92]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003776:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	490f      	ldr	r1, [pc, #60]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800378a:	f000 f825 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 800378e:	4602      	mov	r2, r0
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	490c      	ldr	r1, [pc, #48]	; (80037cc <HAL_RCC_ClockConfig+0x26c>)
 800379c:	5ccb      	ldrb	r3, [r1, r3]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	fa22 f303 	lsr.w	r3, r2, r3
 80037a6:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <HAL_RCC_ClockConfig+0x270>)
 80037a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_RCC_ClockConfig+0x274>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fd fb2e 	bl	8000e10 <HAL_InitTick>
 80037b4:	4603      	mov	r3, r0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40022000 	.word	0x40022000
 80037c4:	40021000 	.word	0x40021000
 80037c8:	04c4b400 	.word	0x04c4b400
 80037cc:	08005a70 	.word	0x08005a70
 80037d0:	20000000 	.word	0x20000000
 80037d4:	20000004 	.word	0x20000004

080037d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80037de:	4b2c      	ldr	r3, [pc, #176]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d102      	bne.n	80037f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037ea:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	e047      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037f0:	4b27      	ldr	r3, [pc, #156]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d102      	bne.n	8003802 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037fc:	4b26      	ldr	r3, [pc, #152]	; (8003898 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	e03e      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003802:	4b23      	ldr	r3, [pc, #140]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d136      	bne.n	800387c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800380e:	4b20      	ldr	r3, [pc, #128]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003818:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	3301      	adds	r3, #1
 8003824:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b03      	cmp	r3, #3
 800382a:	d10c      	bne.n	8003846 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800382c:	4a1a      	ldr	r2, [pc, #104]	; (8003898 <HAL_RCC_GetSysClockFreq+0xc0>)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	fbb2 f3f3 	udiv	r3, r2, r3
 8003834:	4a16      	ldr	r2, [pc, #88]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003836:	68d2      	ldr	r2, [r2, #12]
 8003838:	0a12      	lsrs	r2, r2, #8
 800383a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	617b      	str	r3, [r7, #20]
      break;
 8003844:	e00c      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003846:	4a13      	ldr	r2, [pc, #76]	; (8003894 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	fbb2 f3f3 	udiv	r3, r2, r3
 800384e:	4a10      	ldr	r2, [pc, #64]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003850:	68d2      	ldr	r2, [r2, #12]
 8003852:	0a12      	lsrs	r2, r2, #8
 8003854:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003858:	fb02 f303 	mul.w	r3, r2, r3
 800385c:	617b      	str	r3, [r7, #20]
      break;
 800385e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	0e5b      	lsrs	r3, r3, #25
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	3301      	adds	r3, #1
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	e001      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003880:	693b      	ldr	r3, [r7, #16]
}
 8003882:	4618      	mov	r0, r3
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	00f42400 	.word	0x00f42400
 8003898:	007a1200 	.word	0x007a1200

0800389c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a0:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20000000 	.word	0x20000000

080038b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038b8:	f7ff fff0 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4904      	ldr	r1, [pc, #16]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	08005a80 	.word	0x08005a80

080038e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038e4:	f7ff ffda 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	0adb      	lsrs	r3, r3, #11
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	4904      	ldr	r1, [pc, #16]	; (8003908 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003900:	4618      	mov	r0, r3
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40021000 	.word	0x40021000
 8003908:	08005a80 	.word	0x08005a80

0800390c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003912:	4b1e      	ldr	r3, [pc, #120]	; (800398c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800391c:	4b1b      	ldr	r3, [pc, #108]	; (800398c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	3301      	adds	r3, #1
 8003928:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d10c      	bne.n	800394a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003930:	4a17      	ldr	r2, [pc, #92]	; (8003990 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	4a14      	ldr	r2, [pc, #80]	; (800398c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800393a:	68d2      	ldr	r2, [r2, #12]
 800393c:	0a12      	lsrs	r2, r2, #8
 800393e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	617b      	str	r3, [r7, #20]
    break;
 8003948:	e00c      	b.n	8003964 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800394a:	4a12      	ldr	r2, [pc, #72]	; (8003994 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003952:	4a0e      	ldr	r2, [pc, #56]	; (800398c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003954:	68d2      	ldr	r2, [r2, #12]
 8003956:	0a12      	lsrs	r2, r2, #8
 8003958:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]
    break;
 8003962:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003964:	4b09      	ldr	r3, [pc, #36]	; (800398c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	0e5b      	lsrs	r3, r3, #25
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	3301      	adds	r3, #1
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800397e:	687b      	ldr	r3, [r7, #4]
}
 8003980:	4618      	mov	r0, r3
 8003982:	371c      	adds	r7, #28
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	40021000 	.word	0x40021000
 8003990:	007a1200 	.word	0x007a1200
 8003994:	00f42400 	.word	0x00f42400

08003998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039a0:	2300      	movs	r3, #0
 80039a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039a4:	2300      	movs	r3, #0
 80039a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8098 	beq.w	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b6:	2300      	movs	r3, #0
 80039b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ba:	4b43      	ldr	r3, [pc, #268]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10d      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c6:	4b40      	ldr	r3, [pc, #256]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ca:	4a3f      	ldr	r2, [pc, #252]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d0:	6593      	str	r3, [r2, #88]	; 0x58
 80039d2:	4b3d      	ldr	r3, [pc, #244]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039de:	2301      	movs	r3, #1
 80039e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039e2:	4b3a      	ldr	r3, [pc, #232]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a39      	ldr	r2, [pc, #228]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039ee:	f7fd fa5b 	bl	8000ea8 <HAL_GetTick>
 80039f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039f4:	e009      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f6:	f7fd fa57 	bl	8000ea8 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d902      	bls.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	74fb      	strb	r3, [r7, #19]
        break;
 8003a08:	e005      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a0a:	4b30      	ldr	r3, [pc, #192]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0ef      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a16:	7cfb      	ldrb	r3, [r7, #19]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d159      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a1c:	4b2a      	ldr	r3, [pc, #168]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d01e      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d019      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a38:	4b23      	ldr	r3, [pc, #140]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a44:	4b20      	ldr	r3, [pc, #128]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4a:	4a1f      	ldr	r2, [pc, #124]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a54:	4b1c      	ldr	r3, [pc, #112]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5a:	4a1b      	ldr	r2, [pc, #108]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a64:	4a18      	ldr	r2, [pc, #96]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d016      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fd fa17 	bl	8000ea8 <HAL_GetTick>
 8003a7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a7c:	e00b      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fd fa13 	bl	8000ea8 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d902      	bls.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	74fb      	strb	r3, [r7, #19]
            break;
 8003a94:	e006      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a96:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0ec      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10b      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	4903      	ldr	r1, [pc, #12]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ac2:	7cfb      	ldrb	r3, [r7, #19]
 8003ac4:	74bb      	strb	r3, [r7, #18]
 8003ac6:	e005      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ad4:	7c7b      	ldrb	r3, [r7, #17]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d105      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ada:	4ba6      	ldr	r3, [pc, #664]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ade:	4aa5      	ldr	r2, [pc, #660]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003af2:	4ba0      	ldr	r3, [pc, #640]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af8:	f023 0203 	bic.w	r2, r3, #3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	499c      	ldr	r1, [pc, #624]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b14:	4b97      	ldr	r3, [pc, #604]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	f023 020c 	bic.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	4994      	ldr	r1, [pc, #592]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b36:	4b8f      	ldr	r3, [pc, #572]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	498b      	ldr	r1, [pc, #556]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b58:	4b86      	ldr	r3, [pc, #536]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	4983      	ldr	r1, [pc, #524]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b7a:	4b7e      	ldr	r3, [pc, #504]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	497a      	ldr	r1, [pc, #488]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b9c:	4b75      	ldr	r3, [pc, #468]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	4972      	ldr	r1, [pc, #456]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bbe:	4b6d      	ldr	r3, [pc, #436]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	4969      	ldr	r1, [pc, #420]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003be0:	4b64      	ldr	r3, [pc, #400]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	4961      	ldr	r1, [pc, #388]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c02:	4b5c      	ldr	r3, [pc, #368]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	4958      	ldr	r1, [pc, #352]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d015      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c24:	4b53      	ldr	r3, [pc, #332]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c32:	4950      	ldr	r1, [pc, #320]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c42:	d105      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c44:	4b4b      	ldr	r3, [pc, #300]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4a4a      	ldr	r2, [pc, #296]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d015      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c5c:	4b45      	ldr	r3, [pc, #276]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	4942      	ldr	r1, [pc, #264]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7a:	d105      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c7c:	4b3d      	ldr	r3, [pc, #244]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4a3c      	ldr	r2, [pc, #240]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c86:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d015      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c94:	4b37      	ldr	r3, [pc, #220]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4934      	ldr	r1, [pc, #208]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cb2:	d105      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cb4:	4b2f      	ldr	r3, [pc, #188]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4a2e      	ldr	r2, [pc, #184]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cbe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d015      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ccc:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cda:	4926      	ldr	r1, [pc, #152]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cea:	d105      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cec:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4a20      	ldr	r2, [pc, #128]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cf6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d015      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d04:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	4918      	ldr	r1, [pc, #96]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d22:	d105      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d24:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d015      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d3c:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4a:	490a      	ldr	r1, [pc, #40]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a04      	ldr	r2, [pc, #16]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d68:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40021000 	.word	0x40021000

08003d78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e042      	b.n	8003e10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d106      	bne.n	8003da2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7fc febf 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2224      	movs	r2, #36	; 0x24
 8003da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0201 	bic.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f8c2 	bl	8003f44 <UART_SetConfig>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e022      	b.n	8003e10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fb82 	bl	80044dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003de6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003df6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fc09 	bl	8004620 <UART_CheckIdleState>
 8003e0e:	4603      	mov	r3, r0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	4613      	mov	r3, r2
 8003e26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	f040 8083 	bne.w	8003f3a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_UART_Transmit+0x28>
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e07b      	b.n	8003f3c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Transmit+0x3a>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e074      	b.n	8003f3c <HAL_UART_Transmit+0x124>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2221      	movs	r2, #33	; 0x21
 8003e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e6a:	f7fd f81d 	bl	8000ea8 <HAL_GetTick>
 8003e6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	88fa      	ldrh	r2, [r7, #6]
 8003e74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	88fa      	ldrh	r2, [r7, #6]
 8003e7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e88:	d108      	bne.n	8003e9c <HAL_UART_Transmit+0x84>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d104      	bne.n	8003e9c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	e003      	b.n	8003ea4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003eac:	e02c      	b.n	8003f08 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2180      	movs	r1, #128	; 0x80
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 fbfc 	bl	80046b6 <UART_WaitOnFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e039      	b.n	8003f3c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10b      	bne.n	8003ee6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003edc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	61bb      	str	r3, [r7, #24]
 8003ee4:	e007      	b.n	8003ef6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	781a      	ldrb	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1cc      	bne.n	8003eae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2140      	movs	r1, #64	; 0x40
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 fbc9 	bl	80046b6 <UART_WaitOnFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e006      	b.n	8003f3c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e000      	b.n	8003f3c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003f3a:	2302      	movs	r3, #2
  }
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f48:	b08c      	sub	sp, #48	; 0x30
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4bab      	ldr	r3, [pc, #684]	; (8004220 <UART_SetConfig+0x2dc>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	6812      	ldr	r2, [r2, #0]
 8003f7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4aa0      	ldr	r2, [pc, #640]	; (8004224 <UART_SetConfig+0x2e0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fac:	4313      	orrs	r3, r2
 8003fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003fba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	f023 010f 	bic.w	r1, r3, #15
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a91      	ldr	r2, [pc, #580]	; (8004228 <UART_SetConfig+0x2e4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d125      	bne.n	8004034 <UART_SetConfig+0xf0>
 8003fe8:	4b90      	ldr	r3, [pc, #576]	; (800422c <UART_SetConfig+0x2e8>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d81a      	bhi.n	800402c <UART_SetConfig+0xe8>
 8003ff6:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <UART_SetConfig+0xb8>)
 8003ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffc:	0800400d 	.word	0x0800400d
 8004000:	0800401d 	.word	0x0800401d
 8004004:	08004015 	.word	0x08004015
 8004008:	08004025 	.word	0x08004025
 800400c:	2301      	movs	r3, #1
 800400e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004012:	e0d6      	b.n	80041c2 <UART_SetConfig+0x27e>
 8004014:	2302      	movs	r3, #2
 8004016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800401a:	e0d2      	b.n	80041c2 <UART_SetConfig+0x27e>
 800401c:	2304      	movs	r3, #4
 800401e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004022:	e0ce      	b.n	80041c2 <UART_SetConfig+0x27e>
 8004024:	2308      	movs	r3, #8
 8004026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800402a:	e0ca      	b.n	80041c2 <UART_SetConfig+0x27e>
 800402c:	2310      	movs	r3, #16
 800402e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004032:	e0c6      	b.n	80041c2 <UART_SetConfig+0x27e>
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a7d      	ldr	r2, [pc, #500]	; (8004230 <UART_SetConfig+0x2ec>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d138      	bne.n	80040b0 <UART_SetConfig+0x16c>
 800403e:	4b7b      	ldr	r3, [pc, #492]	; (800422c <UART_SetConfig+0x2e8>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b0c      	cmp	r3, #12
 800404a:	d82d      	bhi.n	80040a8 <UART_SetConfig+0x164>
 800404c:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <UART_SetConfig+0x110>)
 800404e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004052:	bf00      	nop
 8004054:	08004089 	.word	0x08004089
 8004058:	080040a9 	.word	0x080040a9
 800405c:	080040a9 	.word	0x080040a9
 8004060:	080040a9 	.word	0x080040a9
 8004064:	08004099 	.word	0x08004099
 8004068:	080040a9 	.word	0x080040a9
 800406c:	080040a9 	.word	0x080040a9
 8004070:	080040a9 	.word	0x080040a9
 8004074:	08004091 	.word	0x08004091
 8004078:	080040a9 	.word	0x080040a9
 800407c:	080040a9 	.word	0x080040a9
 8004080:	080040a9 	.word	0x080040a9
 8004084:	080040a1 	.word	0x080040a1
 8004088:	2300      	movs	r3, #0
 800408a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800408e:	e098      	b.n	80041c2 <UART_SetConfig+0x27e>
 8004090:	2302      	movs	r3, #2
 8004092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004096:	e094      	b.n	80041c2 <UART_SetConfig+0x27e>
 8004098:	2304      	movs	r3, #4
 800409a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800409e:	e090      	b.n	80041c2 <UART_SetConfig+0x27e>
 80040a0:	2308      	movs	r3, #8
 80040a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040a6:	e08c      	b.n	80041c2 <UART_SetConfig+0x27e>
 80040a8:	2310      	movs	r3, #16
 80040aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ae:	e088      	b.n	80041c2 <UART_SetConfig+0x27e>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a5f      	ldr	r2, [pc, #380]	; (8004234 <UART_SetConfig+0x2f0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d125      	bne.n	8004106 <UART_SetConfig+0x1c2>
 80040ba:	4b5c      	ldr	r3, [pc, #368]	; (800422c <UART_SetConfig+0x2e8>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040c4:	2b30      	cmp	r3, #48	; 0x30
 80040c6:	d016      	beq.n	80040f6 <UART_SetConfig+0x1b2>
 80040c8:	2b30      	cmp	r3, #48	; 0x30
 80040ca:	d818      	bhi.n	80040fe <UART_SetConfig+0x1ba>
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	d00a      	beq.n	80040e6 <UART_SetConfig+0x1a2>
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d814      	bhi.n	80040fe <UART_SetConfig+0x1ba>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <UART_SetConfig+0x19a>
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d008      	beq.n	80040ee <UART_SetConfig+0x1aa>
 80040dc:	e00f      	b.n	80040fe <UART_SetConfig+0x1ba>
 80040de:	2300      	movs	r3, #0
 80040e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040e4:	e06d      	b.n	80041c2 <UART_SetConfig+0x27e>
 80040e6:	2302      	movs	r3, #2
 80040e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ec:	e069      	b.n	80041c2 <UART_SetConfig+0x27e>
 80040ee:	2304      	movs	r3, #4
 80040f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040f4:	e065      	b.n	80041c2 <UART_SetConfig+0x27e>
 80040f6:	2308      	movs	r3, #8
 80040f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040fc:	e061      	b.n	80041c2 <UART_SetConfig+0x27e>
 80040fe:	2310      	movs	r3, #16
 8004100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004104:	e05d      	b.n	80041c2 <UART_SetConfig+0x27e>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a4b      	ldr	r2, [pc, #300]	; (8004238 <UART_SetConfig+0x2f4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d125      	bne.n	800415c <UART_SetConfig+0x218>
 8004110:	4b46      	ldr	r3, [pc, #280]	; (800422c <UART_SetConfig+0x2e8>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800411a:	2bc0      	cmp	r3, #192	; 0xc0
 800411c:	d016      	beq.n	800414c <UART_SetConfig+0x208>
 800411e:	2bc0      	cmp	r3, #192	; 0xc0
 8004120:	d818      	bhi.n	8004154 <UART_SetConfig+0x210>
 8004122:	2b80      	cmp	r3, #128	; 0x80
 8004124:	d00a      	beq.n	800413c <UART_SetConfig+0x1f8>
 8004126:	2b80      	cmp	r3, #128	; 0x80
 8004128:	d814      	bhi.n	8004154 <UART_SetConfig+0x210>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <UART_SetConfig+0x1f0>
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d008      	beq.n	8004144 <UART_SetConfig+0x200>
 8004132:	e00f      	b.n	8004154 <UART_SetConfig+0x210>
 8004134:	2300      	movs	r3, #0
 8004136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800413a:	e042      	b.n	80041c2 <UART_SetConfig+0x27e>
 800413c:	2302      	movs	r3, #2
 800413e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004142:	e03e      	b.n	80041c2 <UART_SetConfig+0x27e>
 8004144:	2304      	movs	r3, #4
 8004146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800414a:	e03a      	b.n	80041c2 <UART_SetConfig+0x27e>
 800414c:	2308      	movs	r3, #8
 800414e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004152:	e036      	b.n	80041c2 <UART_SetConfig+0x27e>
 8004154:	2310      	movs	r3, #16
 8004156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800415a:	e032      	b.n	80041c2 <UART_SetConfig+0x27e>
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a30      	ldr	r2, [pc, #192]	; (8004224 <UART_SetConfig+0x2e0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d12a      	bne.n	80041bc <UART_SetConfig+0x278>
 8004166:	4b31      	ldr	r3, [pc, #196]	; (800422c <UART_SetConfig+0x2e8>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004170:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004174:	d01a      	beq.n	80041ac <UART_SetConfig+0x268>
 8004176:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800417a:	d81b      	bhi.n	80041b4 <UART_SetConfig+0x270>
 800417c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004180:	d00c      	beq.n	800419c <UART_SetConfig+0x258>
 8004182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004186:	d815      	bhi.n	80041b4 <UART_SetConfig+0x270>
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <UART_SetConfig+0x250>
 800418c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004190:	d008      	beq.n	80041a4 <UART_SetConfig+0x260>
 8004192:	e00f      	b.n	80041b4 <UART_SetConfig+0x270>
 8004194:	2300      	movs	r3, #0
 8004196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800419a:	e012      	b.n	80041c2 <UART_SetConfig+0x27e>
 800419c:	2302      	movs	r3, #2
 800419e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041a2:	e00e      	b.n	80041c2 <UART_SetConfig+0x27e>
 80041a4:	2304      	movs	r3, #4
 80041a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041aa:	e00a      	b.n	80041c2 <UART_SetConfig+0x27e>
 80041ac:	2308      	movs	r3, #8
 80041ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041b2:	e006      	b.n	80041c2 <UART_SetConfig+0x27e>
 80041b4:	2310      	movs	r3, #16
 80041b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ba:	e002      	b.n	80041c2 <UART_SetConfig+0x27e>
 80041bc:	2310      	movs	r3, #16
 80041be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a17      	ldr	r2, [pc, #92]	; (8004224 <UART_SetConfig+0x2e0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	f040 80a8 	bne.w	800431e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d834      	bhi.n	8004240 <UART_SetConfig+0x2fc>
 80041d6:	a201      	add	r2, pc, #4	; (adr r2, 80041dc <UART_SetConfig+0x298>)
 80041d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041dc:	08004201 	.word	0x08004201
 80041e0:	08004241 	.word	0x08004241
 80041e4:	08004209 	.word	0x08004209
 80041e8:	08004241 	.word	0x08004241
 80041ec:	0800420f 	.word	0x0800420f
 80041f0:	08004241 	.word	0x08004241
 80041f4:	08004241 	.word	0x08004241
 80041f8:	08004241 	.word	0x08004241
 80041fc:	08004217 	.word	0x08004217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004200:	f7ff fb58 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8004204:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004206:	e021      	b.n	800424c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004208:	4b0c      	ldr	r3, [pc, #48]	; (800423c <UART_SetConfig+0x2f8>)
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800420c:	e01e      	b.n	800424c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800420e:	f7ff fae3 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8004212:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004214:	e01a      	b.n	800424c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800421c:	e016      	b.n	800424c <UART_SetConfig+0x308>
 800421e:	bf00      	nop
 8004220:	cfff69f3 	.word	0xcfff69f3
 8004224:	40008000 	.word	0x40008000
 8004228:	40013800 	.word	0x40013800
 800422c:	40021000 	.word	0x40021000
 8004230:	40004400 	.word	0x40004400
 8004234:	40004800 	.word	0x40004800
 8004238:	40004c00 	.word	0x40004c00
 800423c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800424a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 812a 	beq.w	80044a8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	4a9e      	ldr	r2, [pc, #632]	; (80044d4 <UART_SetConfig+0x590>)
 800425a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800425e:	461a      	mov	r2, r3
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	fbb3 f3f2 	udiv	r3, r3, r2
 8004266:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	4413      	add	r3, r2
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	429a      	cmp	r2, r3
 8004276:	d305      	bcc.n	8004284 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	429a      	cmp	r2, r3
 8004282:	d903      	bls.n	800428c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800428a:	e10d      	b.n	80044a8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	2200      	movs	r2, #0
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	60fa      	str	r2, [r7, #12]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	4a8e      	ldr	r2, [pc, #568]	; (80044d4 <UART_SetConfig+0x590>)
 800429a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2200      	movs	r2, #0
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	607a      	str	r2, [r7, #4]
 80042a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042ae:	f7fc f807 	bl	80002c0 <__aeabi_uldivmod>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4610      	mov	r0, r2
 80042b8:	4619      	mov	r1, r3
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	020b      	lsls	r3, r1, #8
 80042c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80042c8:	0202      	lsls	r2, r0, #8
 80042ca:	6979      	ldr	r1, [r7, #20]
 80042cc:	6849      	ldr	r1, [r1, #4]
 80042ce:	0849      	lsrs	r1, r1, #1
 80042d0:	2000      	movs	r0, #0
 80042d2:	460c      	mov	r4, r1
 80042d4:	4605      	mov	r5, r0
 80042d6:	eb12 0804 	adds.w	r8, r2, r4
 80042da:	eb43 0905 	adc.w	r9, r3, r5
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	469a      	mov	sl, r3
 80042e6:	4693      	mov	fp, r2
 80042e8:	4652      	mov	r2, sl
 80042ea:	465b      	mov	r3, fp
 80042ec:	4640      	mov	r0, r8
 80042ee:	4649      	mov	r1, r9
 80042f0:	f7fb ffe6 	bl	80002c0 <__aeabi_uldivmod>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4613      	mov	r3, r2
 80042fa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004302:	d308      	bcc.n	8004316 <UART_SetConfig+0x3d2>
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800430a:	d204      	bcs.n	8004316 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6a3a      	ldr	r2, [r7, #32]
 8004312:	60da      	str	r2, [r3, #12]
 8004314:	e0c8      	b.n	80044a8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800431c:	e0c4      	b.n	80044a8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004326:	d167      	bne.n	80043f8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004328:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800432c:	2b08      	cmp	r3, #8
 800432e:	d828      	bhi.n	8004382 <UART_SetConfig+0x43e>
 8004330:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <UART_SetConfig+0x3f4>)
 8004332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004336:	bf00      	nop
 8004338:	0800435d 	.word	0x0800435d
 800433c:	08004365 	.word	0x08004365
 8004340:	0800436d 	.word	0x0800436d
 8004344:	08004383 	.word	0x08004383
 8004348:	08004373 	.word	0x08004373
 800434c:	08004383 	.word	0x08004383
 8004350:	08004383 	.word	0x08004383
 8004354:	08004383 	.word	0x08004383
 8004358:	0800437b 	.word	0x0800437b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800435c:	f7ff faaa 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8004360:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004362:	e014      	b.n	800438e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004364:	f7ff fabc 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 8004368:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800436a:	e010      	b.n	800438e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800436c:	4b5a      	ldr	r3, [pc, #360]	; (80044d8 <UART_SetConfig+0x594>)
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004370:	e00d      	b.n	800438e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004372:	f7ff fa31 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8004376:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004378:	e009      	b.n	800438e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004380:	e005      	b.n	800438e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800438c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8089 	beq.w	80044a8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	4a4e      	ldr	r2, [pc, #312]	; (80044d4 <UART_SetConfig+0x590>)
 800439c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043a0:	461a      	mov	r2, r3
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80043a8:	005a      	lsls	r2, r3, #1
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	085b      	lsrs	r3, r3, #1
 80043b0:	441a      	add	r2, r3
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	2b0f      	cmp	r3, #15
 80043c0:	d916      	bls.n	80043f0 <UART_SetConfig+0x4ac>
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c8:	d212      	bcs.n	80043f0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f023 030f 	bic.w	r3, r3, #15
 80043d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	b29b      	uxth	r3, r3
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	b29a      	uxth	r2, r3
 80043e0:	8bfb      	ldrh	r3, [r7, #30]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	8bfa      	ldrh	r2, [r7, #30]
 80043ec:	60da      	str	r2, [r3, #12]
 80043ee:	e05b      	b.n	80044a8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80043f6:	e057      	b.n	80044a8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d828      	bhi.n	8004452 <UART_SetConfig+0x50e>
 8004400:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <UART_SetConfig+0x4c4>)
 8004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004406:	bf00      	nop
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004435 	.word	0x08004435
 8004410:	0800443d 	.word	0x0800443d
 8004414:	08004453 	.word	0x08004453
 8004418:	08004443 	.word	0x08004443
 800441c:	08004453 	.word	0x08004453
 8004420:	08004453 	.word	0x08004453
 8004424:	08004453 	.word	0x08004453
 8004428:	0800444b 	.word	0x0800444b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800442c:	f7ff fa42 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8004430:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004432:	e014      	b.n	800445e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004434:	f7ff fa54 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 8004438:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800443a:	e010      	b.n	800445e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800443c:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <UART_SetConfig+0x594>)
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004440:	e00d      	b.n	800445e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004442:	f7ff f9c9 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8004446:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004448:	e009      	b.n	800445e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800444a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004450:	e005      	b.n	800445e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800445c:	bf00      	nop
    }

    if (pclk != 0U)
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	d021      	beq.n	80044a8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	4a1a      	ldr	r2, [pc, #104]	; (80044d4 <UART_SetConfig+0x590>)
 800446a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800446e:	461a      	mov	r2, r3
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	fbb3 f2f2 	udiv	r2, r3, r2
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	441a      	add	r2, r3
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	fbb2 f3f3 	udiv	r3, r2, r3
 8004486:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	2b0f      	cmp	r3, #15
 800448c:	d909      	bls.n	80044a2 <UART_SetConfig+0x55e>
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004494:	d205      	bcs.n	80044a2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	b29a      	uxth	r2, r3
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60da      	str	r2, [r3, #12]
 80044a0:	e002      	b.n	80044a8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2200      	movs	r2, #0
 80044bc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2200      	movs	r2, #0
 80044c2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80044c4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3730      	adds	r7, #48	; 0x30
 80044cc:	46bd      	mov	sp, r7
 80044ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044d2:	bf00      	nop
 80044d4:	08005a88 	.word	0x08005a88
 80044d8:	00f42400 	.word	0x00f42400

080044dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01a      	beq.n	80045f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045da:	d10a      	bne.n	80045f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	605a      	str	r2, [r3, #4]
  }
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af02      	add	r7, sp, #8
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004630:	f7fc fc3a 	bl	8000ea8 <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b08      	cmp	r3, #8
 8004642:	d10e      	bne.n	8004662 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f82f 	bl	80046b6 <UART_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e025      	b.n	80046ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b04      	cmp	r3, #4
 800466e:	d10e      	bne.n	800468e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004670:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f819 	bl	80046b6 <UART_WaitOnFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e00f      	b.n	80046ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b09c      	sub	sp, #112	; 0x70
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	4613      	mov	r3, r2
 80046c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c6:	e0a9      	b.n	800481c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ce:	f000 80a5 	beq.w	800481c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d2:	f7fc fbe9 	bl	8000ea8 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046de:	429a      	cmp	r2, r3
 80046e0:	d302      	bcc.n	80046e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80046e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d140      	bne.n	800476a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046fc:	667b      	str	r3, [r7, #100]	; 0x64
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	461a      	mov	r2, r3
 8004704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004706:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004708:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800470c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800470e:	e841 2300 	strex	r3, r2, [r1]
 8004712:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1e6      	bne.n	80046e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3308      	adds	r3, #8
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800472a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	663b      	str	r3, [r7, #96]	; 0x60
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3308      	adds	r3, #8
 8004738:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800473a:	64ba      	str	r2, [r7, #72]	; 0x48
 800473c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e5      	bne.n	800471a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e069      	b.n	800483e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d051      	beq.n	800481c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004786:	d149      	bne.n	800481c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004790:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	e853 3f00 	ldrex	r3, [r3]
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	461a      	mov	r2, r3
 80047ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b0:	637b      	str	r3, [r7, #52]	; 0x34
 80047b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047b8:	e841 2300 	strex	r3, r2, [r1]
 80047bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1e6      	bne.n	8004792 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3308      	adds	r3, #8
 80047ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	e853 3f00 	ldrex	r3, [r3]
 80047d2:	613b      	str	r3, [r7, #16]
   return(result);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f023 0301 	bic.w	r3, r3, #1
 80047da:	66bb      	str	r3, [r7, #104]	; 0x68
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3308      	adds	r3, #8
 80047e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047e4:	623a      	str	r2, [r7, #32]
 80047e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	69f9      	ldr	r1, [r7, #28]
 80047ea:	6a3a      	ldr	r2, [r7, #32]
 80047ec:	e841 2300 	strex	r3, r2, [r1]
 80047f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e5      	bne.n	80047c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e010      	b.n	800483e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69da      	ldr	r2, [r3, #28]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4013      	ands	r3, r2
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	429a      	cmp	r2, r3
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	461a      	mov	r2, r3
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	429a      	cmp	r2, r3
 8004838:	f43f af46 	beq.w	80046c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3770      	adds	r7, #112	; 0x70
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_UARTEx_DisableFifoMode+0x16>
 8004858:	2302      	movs	r3, #2
 800485a:	e027      	b.n	80048ac <HAL_UARTEx_DisableFifoMode+0x66>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2224      	movs	r2, #36	; 0x24
 8004868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800488a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e02d      	b.n	800492c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2224      	movs	r2, #36	; 0x24
 80048dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f84f 	bl	80049b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004948:	2302      	movs	r3, #2
 800494a:	e02d      	b.n	80049a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2224      	movs	r2, #36	; 0x24
 8004958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0201 	bic.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f811 	bl	80049b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d108      	bne.n	80049d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80049d0:	e031      	b.n	8004a36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80049d2:	2308      	movs	r3, #8
 80049d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80049d6:	2308      	movs	r3, #8
 80049d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	0e5b      	lsrs	r3, r3, #25
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	0f5b      	lsrs	r3, r3, #29
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049fa:	7bbb      	ldrb	r3, [r7, #14]
 80049fc:	7b3a      	ldrb	r2, [r7, #12]
 80049fe:	4911      	ldr	r1, [pc, #68]	; (8004a44 <UARTEx_SetNbDataToProcess+0x94>)
 8004a00:	5c8a      	ldrb	r2, [r1, r2]
 8004a02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a06:	7b3a      	ldrb	r2, [r7, #12]
 8004a08:	490f      	ldr	r1, [pc, #60]	; (8004a48 <UARTEx_SetNbDataToProcess+0x98>)
 8004a0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	7b7a      	ldrb	r2, [r7, #13]
 8004a1c:	4909      	ldr	r1, [pc, #36]	; (8004a44 <UARTEx_SetNbDataToProcess+0x94>)
 8004a1e:	5c8a      	ldrb	r2, [r1, r2]
 8004a20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a24:	7b7a      	ldrb	r2, [r7, #13]
 8004a26:	4908      	ldr	r1, [pc, #32]	; (8004a48 <UARTEx_SetNbDataToProcess+0x98>)
 8004a28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	08005aa0 	.word	0x08005aa0
 8004a48:	08005aa8 	.word	0x08005aa8

08004a4c <__errno>:
 8004a4c:	4b01      	ldr	r3, [pc, #4]	; (8004a54 <__errno+0x8>)
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	2000000c 	.word	0x2000000c

08004a58 <__libc_init_array>:
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	4d0d      	ldr	r5, [pc, #52]	; (8004a90 <__libc_init_array+0x38>)
 8004a5c:	4c0d      	ldr	r4, [pc, #52]	; (8004a94 <__libc_init_array+0x3c>)
 8004a5e:	1b64      	subs	r4, r4, r5
 8004a60:	10a4      	asrs	r4, r4, #2
 8004a62:	2600      	movs	r6, #0
 8004a64:	42a6      	cmp	r6, r4
 8004a66:	d109      	bne.n	8004a7c <__libc_init_array+0x24>
 8004a68:	4d0b      	ldr	r5, [pc, #44]	; (8004a98 <__libc_init_array+0x40>)
 8004a6a:	4c0c      	ldr	r4, [pc, #48]	; (8004a9c <__libc_init_array+0x44>)
 8004a6c:	f000 fff2 	bl	8005a54 <_init>
 8004a70:	1b64      	subs	r4, r4, r5
 8004a72:	10a4      	asrs	r4, r4, #2
 8004a74:	2600      	movs	r6, #0
 8004a76:	42a6      	cmp	r6, r4
 8004a78:	d105      	bne.n	8004a86 <__libc_init_array+0x2e>
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}
 8004a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a80:	4798      	blx	r3
 8004a82:	3601      	adds	r6, #1
 8004a84:	e7ee      	b.n	8004a64 <__libc_init_array+0xc>
 8004a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8a:	4798      	blx	r3
 8004a8c:	3601      	adds	r6, #1
 8004a8e:	e7f2      	b.n	8004a76 <__libc_init_array+0x1e>
 8004a90:	08005b50 	.word	0x08005b50
 8004a94:	08005b50 	.word	0x08005b50
 8004a98:	08005b50 	.word	0x08005b50
 8004a9c:	08005b54 	.word	0x08005b54

08004aa0 <memset>:
 8004aa0:	4402      	add	r2, r0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d100      	bne.n	8004aaa <memset+0xa>
 8004aa8:	4770      	bx	lr
 8004aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8004aae:	e7f9      	b.n	8004aa4 <memset+0x4>

08004ab0 <setbuf>:
 8004ab0:	2900      	cmp	r1, #0
 8004ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2202      	moveq	r2, #2
 8004aba:	2200      	movne	r2, #0
 8004abc:	f000 b800 	b.w	8004ac0 <setvbuf>

08004ac0 <setvbuf>:
 8004ac0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ac4:	461d      	mov	r5, r3
 8004ac6:	4b5d      	ldr	r3, [pc, #372]	; (8004c3c <setvbuf+0x17c>)
 8004ac8:	681f      	ldr	r7, [r3, #0]
 8004aca:	4604      	mov	r4, r0
 8004acc:	460e      	mov	r6, r1
 8004ace:	4690      	mov	r8, r2
 8004ad0:	b127      	cbz	r7, 8004adc <setvbuf+0x1c>
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	b913      	cbnz	r3, 8004adc <setvbuf+0x1c>
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	f000 fa06 	bl	8004ee8 <__sinit>
 8004adc:	4b58      	ldr	r3, [pc, #352]	; (8004c40 <setvbuf+0x180>)
 8004ade:	429c      	cmp	r4, r3
 8004ae0:	d167      	bne.n	8004bb2 <setvbuf+0xf2>
 8004ae2:	687c      	ldr	r4, [r7, #4]
 8004ae4:	f1b8 0f02 	cmp.w	r8, #2
 8004ae8:	d006      	beq.n	8004af8 <setvbuf+0x38>
 8004aea:	f1b8 0f01 	cmp.w	r8, #1
 8004aee:	f200 809f 	bhi.w	8004c30 <setvbuf+0x170>
 8004af2:	2d00      	cmp	r5, #0
 8004af4:	f2c0 809c 	blt.w	8004c30 <setvbuf+0x170>
 8004af8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004afa:	07db      	lsls	r3, r3, #31
 8004afc:	d405      	bmi.n	8004b0a <setvbuf+0x4a>
 8004afe:	89a3      	ldrh	r3, [r4, #12]
 8004b00:	0598      	lsls	r0, r3, #22
 8004b02:	d402      	bmi.n	8004b0a <setvbuf+0x4a>
 8004b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b06:	f000 fa8d 	bl	8005024 <__retarget_lock_acquire_recursive>
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	4638      	mov	r0, r7
 8004b0e:	f000 f957 	bl	8004dc0 <_fflush_r>
 8004b12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b14:	b141      	cbz	r1, 8004b28 <setvbuf+0x68>
 8004b16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b1a:	4299      	cmp	r1, r3
 8004b1c:	d002      	beq.n	8004b24 <setvbuf+0x64>
 8004b1e:	4638      	mov	r0, r7
 8004b20:	f000 fab0 	bl	8005084 <_free_r>
 8004b24:	2300      	movs	r3, #0
 8004b26:	6363      	str	r3, [r4, #52]	; 0x34
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61a3      	str	r3, [r4, #24]
 8004b2c:	6063      	str	r3, [r4, #4]
 8004b2e:	89a3      	ldrh	r3, [r4, #12]
 8004b30:	0619      	lsls	r1, r3, #24
 8004b32:	d503      	bpl.n	8004b3c <setvbuf+0x7c>
 8004b34:	6921      	ldr	r1, [r4, #16]
 8004b36:	4638      	mov	r0, r7
 8004b38:	f000 faa4 	bl	8005084 <_free_r>
 8004b3c:	89a3      	ldrh	r3, [r4, #12]
 8004b3e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004b42:	f023 0303 	bic.w	r3, r3, #3
 8004b46:	f1b8 0f02 	cmp.w	r8, #2
 8004b4a:	81a3      	strh	r3, [r4, #12]
 8004b4c:	d06c      	beq.n	8004c28 <setvbuf+0x168>
 8004b4e:	ab01      	add	r3, sp, #4
 8004b50:	466a      	mov	r2, sp
 8004b52:	4621      	mov	r1, r4
 8004b54:	4638      	mov	r0, r7
 8004b56:	f000 fa67 	bl	8005028 <__swhatbuf_r>
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	4318      	orrs	r0, r3
 8004b5e:	81a0      	strh	r0, [r4, #12]
 8004b60:	2d00      	cmp	r5, #0
 8004b62:	d130      	bne.n	8004bc6 <setvbuf+0x106>
 8004b64:	9d00      	ldr	r5, [sp, #0]
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 fa84 	bl	8005074 <malloc>
 8004b6c:	4606      	mov	r6, r0
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	d155      	bne.n	8004c1e <setvbuf+0x15e>
 8004b72:	f8dd 9000 	ldr.w	r9, [sp]
 8004b76:	45a9      	cmp	r9, r5
 8004b78:	d14a      	bne.n	8004c10 <setvbuf+0x150>
 8004b7a:	f04f 35ff 	mov.w	r5, #4294967295
 8004b7e:	2200      	movs	r2, #0
 8004b80:	60a2      	str	r2, [r4, #8]
 8004b82:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004b86:	6022      	str	r2, [r4, #0]
 8004b88:	6122      	str	r2, [r4, #16]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b90:	6162      	str	r2, [r4, #20]
 8004b92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b94:	f043 0302 	orr.w	r3, r3, #2
 8004b98:	07d2      	lsls	r2, r2, #31
 8004b9a:	81a3      	strh	r3, [r4, #12]
 8004b9c:	d405      	bmi.n	8004baa <setvbuf+0xea>
 8004b9e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004ba2:	d102      	bne.n	8004baa <setvbuf+0xea>
 8004ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ba6:	f000 fa3e 	bl	8005026 <__retarget_lock_release_recursive>
 8004baa:	4628      	mov	r0, r5
 8004bac:	b003      	add	sp, #12
 8004bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bb2:	4b24      	ldr	r3, [pc, #144]	; (8004c44 <setvbuf+0x184>)
 8004bb4:	429c      	cmp	r4, r3
 8004bb6:	d101      	bne.n	8004bbc <setvbuf+0xfc>
 8004bb8:	68bc      	ldr	r4, [r7, #8]
 8004bba:	e793      	b.n	8004ae4 <setvbuf+0x24>
 8004bbc:	4b22      	ldr	r3, [pc, #136]	; (8004c48 <setvbuf+0x188>)
 8004bbe:	429c      	cmp	r4, r3
 8004bc0:	bf08      	it	eq
 8004bc2:	68fc      	ldreq	r4, [r7, #12]
 8004bc4:	e78e      	b.n	8004ae4 <setvbuf+0x24>
 8004bc6:	2e00      	cmp	r6, #0
 8004bc8:	d0cd      	beq.n	8004b66 <setvbuf+0xa6>
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	b913      	cbnz	r3, 8004bd4 <setvbuf+0x114>
 8004bce:	4638      	mov	r0, r7
 8004bd0:	f000 f98a 	bl	8004ee8 <__sinit>
 8004bd4:	f1b8 0f01 	cmp.w	r8, #1
 8004bd8:	bf08      	it	eq
 8004bda:	89a3      	ldrheq	r3, [r4, #12]
 8004bdc:	6026      	str	r6, [r4, #0]
 8004bde:	bf04      	itt	eq
 8004be0:	f043 0301 	orreq.w	r3, r3, #1
 8004be4:	81a3      	strheq	r3, [r4, #12]
 8004be6:	89a2      	ldrh	r2, [r4, #12]
 8004be8:	f012 0308 	ands.w	r3, r2, #8
 8004bec:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004bf0:	d01c      	beq.n	8004c2c <setvbuf+0x16c>
 8004bf2:	07d3      	lsls	r3, r2, #31
 8004bf4:	bf41      	itttt	mi
 8004bf6:	2300      	movmi	r3, #0
 8004bf8:	426d      	negmi	r5, r5
 8004bfa:	60a3      	strmi	r3, [r4, #8]
 8004bfc:	61a5      	strmi	r5, [r4, #24]
 8004bfe:	bf58      	it	pl
 8004c00:	60a5      	strpl	r5, [r4, #8]
 8004c02:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004c04:	f015 0501 	ands.w	r5, r5, #1
 8004c08:	d115      	bne.n	8004c36 <setvbuf+0x176>
 8004c0a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004c0e:	e7c8      	b.n	8004ba2 <setvbuf+0xe2>
 8004c10:	4648      	mov	r0, r9
 8004c12:	f000 fa2f 	bl	8005074 <malloc>
 8004c16:	4606      	mov	r6, r0
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	d0ae      	beq.n	8004b7a <setvbuf+0xba>
 8004c1c:	464d      	mov	r5, r9
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c24:	81a3      	strh	r3, [r4, #12]
 8004c26:	e7d0      	b.n	8004bca <setvbuf+0x10a>
 8004c28:	2500      	movs	r5, #0
 8004c2a:	e7a8      	b.n	8004b7e <setvbuf+0xbe>
 8004c2c:	60a3      	str	r3, [r4, #8]
 8004c2e:	e7e8      	b.n	8004c02 <setvbuf+0x142>
 8004c30:	f04f 35ff 	mov.w	r5, #4294967295
 8004c34:	e7b9      	b.n	8004baa <setvbuf+0xea>
 8004c36:	2500      	movs	r5, #0
 8004c38:	e7b7      	b.n	8004baa <setvbuf+0xea>
 8004c3a:	bf00      	nop
 8004c3c:	2000000c 	.word	0x2000000c
 8004c40:	08005ad4 	.word	0x08005ad4
 8004c44:	08005af4 	.word	0x08005af4
 8004c48:	08005ab4 	.word	0x08005ab4

08004c4c <sniprintf>:
 8004c4c:	b40c      	push	{r2, r3}
 8004c4e:	b530      	push	{r4, r5, lr}
 8004c50:	4b17      	ldr	r3, [pc, #92]	; (8004cb0 <sniprintf+0x64>)
 8004c52:	1e0c      	subs	r4, r1, #0
 8004c54:	681d      	ldr	r5, [r3, #0]
 8004c56:	b09d      	sub	sp, #116	; 0x74
 8004c58:	da08      	bge.n	8004c6c <sniprintf+0x20>
 8004c5a:	238b      	movs	r3, #139	; 0x8b
 8004c5c:	602b      	str	r3, [r5, #0]
 8004c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c62:	b01d      	add	sp, #116	; 0x74
 8004c64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c68:	b002      	add	sp, #8
 8004c6a:	4770      	bx	lr
 8004c6c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004c70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004c74:	bf14      	ite	ne
 8004c76:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004c7a:	4623      	moveq	r3, r4
 8004c7c:	9304      	str	r3, [sp, #16]
 8004c7e:	9307      	str	r3, [sp, #28]
 8004c80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c84:	9002      	str	r0, [sp, #8]
 8004c86:	9006      	str	r0, [sp, #24]
 8004c88:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c8e:	ab21      	add	r3, sp, #132	; 0x84
 8004c90:	a902      	add	r1, sp, #8
 8004c92:	4628      	mov	r0, r5
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	f000 fb31 	bl	80052fc <_svfiprintf_r>
 8004c9a:	1c43      	adds	r3, r0, #1
 8004c9c:	bfbc      	itt	lt
 8004c9e:	238b      	movlt	r3, #139	; 0x8b
 8004ca0:	602b      	strlt	r3, [r5, #0]
 8004ca2:	2c00      	cmp	r4, #0
 8004ca4:	d0dd      	beq.n	8004c62 <sniprintf+0x16>
 8004ca6:	9b02      	ldr	r3, [sp, #8]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]
 8004cac:	e7d9      	b.n	8004c62 <sniprintf+0x16>
 8004cae:	bf00      	nop
 8004cb0:	2000000c 	.word	0x2000000c

08004cb4 <__sflush_r>:
 8004cb4:	898a      	ldrh	r2, [r1, #12]
 8004cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cba:	4605      	mov	r5, r0
 8004cbc:	0710      	lsls	r0, r2, #28
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	d458      	bmi.n	8004d74 <__sflush_r+0xc0>
 8004cc2:	684b      	ldr	r3, [r1, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	dc05      	bgt.n	8004cd4 <__sflush_r+0x20>
 8004cc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	dc02      	bgt.n	8004cd4 <__sflush_r+0x20>
 8004cce:	2000      	movs	r0, #0
 8004cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cd6:	2e00      	cmp	r6, #0
 8004cd8:	d0f9      	beq.n	8004cce <__sflush_r+0x1a>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ce0:	682f      	ldr	r7, [r5, #0]
 8004ce2:	602b      	str	r3, [r5, #0]
 8004ce4:	d032      	beq.n	8004d4c <__sflush_r+0x98>
 8004ce6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	075a      	lsls	r2, r3, #29
 8004cec:	d505      	bpl.n	8004cfa <__sflush_r+0x46>
 8004cee:	6863      	ldr	r3, [r4, #4]
 8004cf0:	1ac0      	subs	r0, r0, r3
 8004cf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cf4:	b10b      	cbz	r3, 8004cfa <__sflush_r+0x46>
 8004cf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cf8:	1ac0      	subs	r0, r0, r3
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d00:	6a21      	ldr	r1, [r4, #32]
 8004d02:	4628      	mov	r0, r5
 8004d04:	47b0      	blx	r6
 8004d06:	1c43      	adds	r3, r0, #1
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	d106      	bne.n	8004d1a <__sflush_r+0x66>
 8004d0c:	6829      	ldr	r1, [r5, #0]
 8004d0e:	291d      	cmp	r1, #29
 8004d10:	d82c      	bhi.n	8004d6c <__sflush_r+0xb8>
 8004d12:	4a2a      	ldr	r2, [pc, #168]	; (8004dbc <__sflush_r+0x108>)
 8004d14:	40ca      	lsrs	r2, r1
 8004d16:	07d6      	lsls	r6, r2, #31
 8004d18:	d528      	bpl.n	8004d6c <__sflush_r+0xb8>
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	6062      	str	r2, [r4, #4]
 8004d1e:	04d9      	lsls	r1, r3, #19
 8004d20:	6922      	ldr	r2, [r4, #16]
 8004d22:	6022      	str	r2, [r4, #0]
 8004d24:	d504      	bpl.n	8004d30 <__sflush_r+0x7c>
 8004d26:	1c42      	adds	r2, r0, #1
 8004d28:	d101      	bne.n	8004d2e <__sflush_r+0x7a>
 8004d2a:	682b      	ldr	r3, [r5, #0]
 8004d2c:	b903      	cbnz	r3, 8004d30 <__sflush_r+0x7c>
 8004d2e:	6560      	str	r0, [r4, #84]	; 0x54
 8004d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d32:	602f      	str	r7, [r5, #0]
 8004d34:	2900      	cmp	r1, #0
 8004d36:	d0ca      	beq.n	8004cce <__sflush_r+0x1a>
 8004d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d3c:	4299      	cmp	r1, r3
 8004d3e:	d002      	beq.n	8004d46 <__sflush_r+0x92>
 8004d40:	4628      	mov	r0, r5
 8004d42:	f000 f99f 	bl	8005084 <_free_r>
 8004d46:	2000      	movs	r0, #0
 8004d48:	6360      	str	r0, [r4, #52]	; 0x34
 8004d4a:	e7c1      	b.n	8004cd0 <__sflush_r+0x1c>
 8004d4c:	6a21      	ldr	r1, [r4, #32]
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4628      	mov	r0, r5
 8004d52:	47b0      	blx	r6
 8004d54:	1c41      	adds	r1, r0, #1
 8004d56:	d1c7      	bne.n	8004ce8 <__sflush_r+0x34>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0c4      	beq.n	8004ce8 <__sflush_r+0x34>
 8004d5e:	2b1d      	cmp	r3, #29
 8004d60:	d001      	beq.n	8004d66 <__sflush_r+0xb2>
 8004d62:	2b16      	cmp	r3, #22
 8004d64:	d101      	bne.n	8004d6a <__sflush_r+0xb6>
 8004d66:	602f      	str	r7, [r5, #0]
 8004d68:	e7b1      	b.n	8004cce <__sflush_r+0x1a>
 8004d6a:	89a3      	ldrh	r3, [r4, #12]
 8004d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d70:	81a3      	strh	r3, [r4, #12]
 8004d72:	e7ad      	b.n	8004cd0 <__sflush_r+0x1c>
 8004d74:	690f      	ldr	r7, [r1, #16]
 8004d76:	2f00      	cmp	r7, #0
 8004d78:	d0a9      	beq.n	8004cce <__sflush_r+0x1a>
 8004d7a:	0793      	lsls	r3, r2, #30
 8004d7c:	680e      	ldr	r6, [r1, #0]
 8004d7e:	bf08      	it	eq
 8004d80:	694b      	ldreq	r3, [r1, #20]
 8004d82:	600f      	str	r7, [r1, #0]
 8004d84:	bf18      	it	ne
 8004d86:	2300      	movne	r3, #0
 8004d88:	eba6 0807 	sub.w	r8, r6, r7
 8004d8c:	608b      	str	r3, [r1, #8]
 8004d8e:	f1b8 0f00 	cmp.w	r8, #0
 8004d92:	dd9c      	ble.n	8004cce <__sflush_r+0x1a>
 8004d94:	6a21      	ldr	r1, [r4, #32]
 8004d96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d98:	4643      	mov	r3, r8
 8004d9a:	463a      	mov	r2, r7
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	47b0      	blx	r6
 8004da0:	2800      	cmp	r0, #0
 8004da2:	dc06      	bgt.n	8004db2 <__sflush_r+0xfe>
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004daa:	81a3      	strh	r3, [r4, #12]
 8004dac:	f04f 30ff 	mov.w	r0, #4294967295
 8004db0:	e78e      	b.n	8004cd0 <__sflush_r+0x1c>
 8004db2:	4407      	add	r7, r0
 8004db4:	eba8 0800 	sub.w	r8, r8, r0
 8004db8:	e7e9      	b.n	8004d8e <__sflush_r+0xda>
 8004dba:	bf00      	nop
 8004dbc:	20400001 	.word	0x20400001

08004dc0 <_fflush_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	690b      	ldr	r3, [r1, #16]
 8004dc4:	4605      	mov	r5, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	b913      	cbnz	r3, 8004dd0 <_fflush_r+0x10>
 8004dca:	2500      	movs	r5, #0
 8004dcc:	4628      	mov	r0, r5
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	b118      	cbz	r0, 8004dda <_fflush_r+0x1a>
 8004dd2:	6983      	ldr	r3, [r0, #24]
 8004dd4:	b90b      	cbnz	r3, 8004dda <_fflush_r+0x1a>
 8004dd6:	f000 f887 	bl	8004ee8 <__sinit>
 8004dda:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <_fflush_r+0x6c>)
 8004ddc:	429c      	cmp	r4, r3
 8004dde:	d11b      	bne.n	8004e18 <_fflush_r+0x58>
 8004de0:	686c      	ldr	r4, [r5, #4]
 8004de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0ef      	beq.n	8004dca <_fflush_r+0xa>
 8004dea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004dec:	07d0      	lsls	r0, r2, #31
 8004dee:	d404      	bmi.n	8004dfa <_fflush_r+0x3a>
 8004df0:	0599      	lsls	r1, r3, #22
 8004df2:	d402      	bmi.n	8004dfa <_fflush_r+0x3a>
 8004df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004df6:	f000 f915 	bl	8005024 <__retarget_lock_acquire_recursive>
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	f7ff ff59 	bl	8004cb4 <__sflush_r>
 8004e02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e04:	07da      	lsls	r2, r3, #31
 8004e06:	4605      	mov	r5, r0
 8004e08:	d4e0      	bmi.n	8004dcc <_fflush_r+0xc>
 8004e0a:	89a3      	ldrh	r3, [r4, #12]
 8004e0c:	059b      	lsls	r3, r3, #22
 8004e0e:	d4dd      	bmi.n	8004dcc <_fflush_r+0xc>
 8004e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e12:	f000 f908 	bl	8005026 <__retarget_lock_release_recursive>
 8004e16:	e7d9      	b.n	8004dcc <_fflush_r+0xc>
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <_fflush_r+0x70>)
 8004e1a:	429c      	cmp	r4, r3
 8004e1c:	d101      	bne.n	8004e22 <_fflush_r+0x62>
 8004e1e:	68ac      	ldr	r4, [r5, #8]
 8004e20:	e7df      	b.n	8004de2 <_fflush_r+0x22>
 8004e22:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <_fflush_r+0x74>)
 8004e24:	429c      	cmp	r4, r3
 8004e26:	bf08      	it	eq
 8004e28:	68ec      	ldreq	r4, [r5, #12]
 8004e2a:	e7da      	b.n	8004de2 <_fflush_r+0x22>
 8004e2c:	08005ad4 	.word	0x08005ad4
 8004e30:	08005af4 	.word	0x08005af4
 8004e34:	08005ab4 	.word	0x08005ab4

08004e38 <std>:
 8004e38:	2300      	movs	r3, #0
 8004e3a:	b510      	push	{r4, lr}
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e46:	6083      	str	r3, [r0, #8]
 8004e48:	8181      	strh	r1, [r0, #12]
 8004e4a:	6643      	str	r3, [r0, #100]	; 0x64
 8004e4c:	81c2      	strh	r2, [r0, #14]
 8004e4e:	6183      	str	r3, [r0, #24]
 8004e50:	4619      	mov	r1, r3
 8004e52:	2208      	movs	r2, #8
 8004e54:	305c      	adds	r0, #92	; 0x5c
 8004e56:	f7ff fe23 	bl	8004aa0 <memset>
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <std+0x38>)
 8004e5c:	6263      	str	r3, [r4, #36]	; 0x24
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <std+0x3c>)
 8004e60:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <std+0x40>)
 8004e64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e66:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <std+0x44>)
 8004e68:	6224      	str	r4, [r4, #32]
 8004e6a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e6c:	bd10      	pop	{r4, pc}
 8004e6e:	bf00      	nop
 8004e70:	08005845 	.word	0x08005845
 8004e74:	08005867 	.word	0x08005867
 8004e78:	0800589f 	.word	0x0800589f
 8004e7c:	080058c3 	.word	0x080058c3

08004e80 <_cleanup_r>:
 8004e80:	4901      	ldr	r1, [pc, #4]	; (8004e88 <_cleanup_r+0x8>)
 8004e82:	f000 b8af 	b.w	8004fe4 <_fwalk_reent>
 8004e86:	bf00      	nop
 8004e88:	08004dc1 	.word	0x08004dc1

08004e8c <__sfmoreglue>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	2268      	movs	r2, #104	; 0x68
 8004e90:	1e4d      	subs	r5, r1, #1
 8004e92:	4355      	muls	r5, r2
 8004e94:	460e      	mov	r6, r1
 8004e96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e9a:	f000 f95f 	bl	800515c <_malloc_r>
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	b140      	cbz	r0, 8004eb4 <__sfmoreglue+0x28>
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ea8:	300c      	adds	r0, #12
 8004eaa:	60a0      	str	r0, [r4, #8]
 8004eac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004eb0:	f7ff fdf6 	bl	8004aa0 <memset>
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}

08004eb8 <__sfp_lock_acquire>:
 8004eb8:	4801      	ldr	r0, [pc, #4]	; (8004ec0 <__sfp_lock_acquire+0x8>)
 8004eba:	f000 b8b3 	b.w	8005024 <__retarget_lock_acquire_recursive>
 8004ebe:	bf00      	nop
 8004ec0:	2000020d 	.word	0x2000020d

08004ec4 <__sfp_lock_release>:
 8004ec4:	4801      	ldr	r0, [pc, #4]	; (8004ecc <__sfp_lock_release+0x8>)
 8004ec6:	f000 b8ae 	b.w	8005026 <__retarget_lock_release_recursive>
 8004eca:	bf00      	nop
 8004ecc:	2000020d 	.word	0x2000020d

08004ed0 <__sinit_lock_acquire>:
 8004ed0:	4801      	ldr	r0, [pc, #4]	; (8004ed8 <__sinit_lock_acquire+0x8>)
 8004ed2:	f000 b8a7 	b.w	8005024 <__retarget_lock_acquire_recursive>
 8004ed6:	bf00      	nop
 8004ed8:	2000020e 	.word	0x2000020e

08004edc <__sinit_lock_release>:
 8004edc:	4801      	ldr	r0, [pc, #4]	; (8004ee4 <__sinit_lock_release+0x8>)
 8004ede:	f000 b8a2 	b.w	8005026 <__retarget_lock_release_recursive>
 8004ee2:	bf00      	nop
 8004ee4:	2000020e 	.word	0x2000020e

08004ee8 <__sinit>:
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	4604      	mov	r4, r0
 8004eec:	f7ff fff0 	bl	8004ed0 <__sinit_lock_acquire>
 8004ef0:	69a3      	ldr	r3, [r4, #24]
 8004ef2:	b11b      	cbz	r3, 8004efc <__sinit+0x14>
 8004ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef8:	f7ff bff0 	b.w	8004edc <__sinit_lock_release>
 8004efc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f00:	6523      	str	r3, [r4, #80]	; 0x50
 8004f02:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <__sinit+0x68>)
 8004f04:	4a13      	ldr	r2, [pc, #76]	; (8004f54 <__sinit+0x6c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f0a:	42a3      	cmp	r3, r4
 8004f0c:	bf04      	itt	eq
 8004f0e:	2301      	moveq	r3, #1
 8004f10:	61a3      	streq	r3, [r4, #24]
 8004f12:	4620      	mov	r0, r4
 8004f14:	f000 f820 	bl	8004f58 <__sfp>
 8004f18:	6060      	str	r0, [r4, #4]
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f000 f81c 	bl	8004f58 <__sfp>
 8004f20:	60a0      	str	r0, [r4, #8]
 8004f22:	4620      	mov	r0, r4
 8004f24:	f000 f818 	bl	8004f58 <__sfp>
 8004f28:	2200      	movs	r2, #0
 8004f2a:	60e0      	str	r0, [r4, #12]
 8004f2c:	2104      	movs	r1, #4
 8004f2e:	6860      	ldr	r0, [r4, #4]
 8004f30:	f7ff ff82 	bl	8004e38 <std>
 8004f34:	68a0      	ldr	r0, [r4, #8]
 8004f36:	2201      	movs	r2, #1
 8004f38:	2109      	movs	r1, #9
 8004f3a:	f7ff ff7d 	bl	8004e38 <std>
 8004f3e:	68e0      	ldr	r0, [r4, #12]
 8004f40:	2202      	movs	r2, #2
 8004f42:	2112      	movs	r1, #18
 8004f44:	f7ff ff78 	bl	8004e38 <std>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	61a3      	str	r3, [r4, #24]
 8004f4c:	e7d2      	b.n	8004ef4 <__sinit+0xc>
 8004f4e:	bf00      	nop
 8004f50:	08005ab0 	.word	0x08005ab0
 8004f54:	08004e81 	.word	0x08004e81

08004f58 <__sfp>:
 8004f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5a:	4607      	mov	r7, r0
 8004f5c:	f7ff ffac 	bl	8004eb8 <__sfp_lock_acquire>
 8004f60:	4b1e      	ldr	r3, [pc, #120]	; (8004fdc <__sfp+0x84>)
 8004f62:	681e      	ldr	r6, [r3, #0]
 8004f64:	69b3      	ldr	r3, [r6, #24]
 8004f66:	b913      	cbnz	r3, 8004f6e <__sfp+0x16>
 8004f68:	4630      	mov	r0, r6
 8004f6a:	f7ff ffbd 	bl	8004ee8 <__sinit>
 8004f6e:	3648      	adds	r6, #72	; 0x48
 8004f70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	d503      	bpl.n	8004f80 <__sfp+0x28>
 8004f78:	6833      	ldr	r3, [r6, #0]
 8004f7a:	b30b      	cbz	r3, 8004fc0 <__sfp+0x68>
 8004f7c:	6836      	ldr	r6, [r6, #0]
 8004f7e:	e7f7      	b.n	8004f70 <__sfp+0x18>
 8004f80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f84:	b9d5      	cbnz	r5, 8004fbc <__sfp+0x64>
 8004f86:	4b16      	ldr	r3, [pc, #88]	; (8004fe0 <__sfp+0x88>)
 8004f88:	60e3      	str	r3, [r4, #12]
 8004f8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f8e:	6665      	str	r5, [r4, #100]	; 0x64
 8004f90:	f000 f847 	bl	8005022 <__retarget_lock_init_recursive>
 8004f94:	f7ff ff96 	bl	8004ec4 <__sfp_lock_release>
 8004f98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004fa0:	6025      	str	r5, [r4, #0]
 8004fa2:	61a5      	str	r5, [r4, #24]
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fac:	f7ff fd78 	bl	8004aa0 <memset>
 8004fb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fb8:	4620      	mov	r0, r4
 8004fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fbc:	3468      	adds	r4, #104	; 0x68
 8004fbe:	e7d9      	b.n	8004f74 <__sfp+0x1c>
 8004fc0:	2104      	movs	r1, #4
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	f7ff ff62 	bl	8004e8c <__sfmoreglue>
 8004fc8:	4604      	mov	r4, r0
 8004fca:	6030      	str	r0, [r6, #0]
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d1d5      	bne.n	8004f7c <__sfp+0x24>
 8004fd0:	f7ff ff78 	bl	8004ec4 <__sfp_lock_release>
 8004fd4:	230c      	movs	r3, #12
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	e7ee      	b.n	8004fb8 <__sfp+0x60>
 8004fda:	bf00      	nop
 8004fdc:	08005ab0 	.word	0x08005ab0
 8004fe0:	ffff0001 	.word	0xffff0001

08004fe4 <_fwalk_reent>:
 8004fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fe8:	4606      	mov	r6, r0
 8004fea:	4688      	mov	r8, r1
 8004fec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ff0:	2700      	movs	r7, #0
 8004ff2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ff6:	f1b9 0901 	subs.w	r9, r9, #1
 8004ffa:	d505      	bpl.n	8005008 <_fwalk_reent+0x24>
 8004ffc:	6824      	ldr	r4, [r4, #0]
 8004ffe:	2c00      	cmp	r4, #0
 8005000:	d1f7      	bne.n	8004ff2 <_fwalk_reent+0xe>
 8005002:	4638      	mov	r0, r7
 8005004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005008:	89ab      	ldrh	r3, [r5, #12]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d907      	bls.n	800501e <_fwalk_reent+0x3a>
 800500e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005012:	3301      	adds	r3, #1
 8005014:	d003      	beq.n	800501e <_fwalk_reent+0x3a>
 8005016:	4629      	mov	r1, r5
 8005018:	4630      	mov	r0, r6
 800501a:	47c0      	blx	r8
 800501c:	4307      	orrs	r7, r0
 800501e:	3568      	adds	r5, #104	; 0x68
 8005020:	e7e9      	b.n	8004ff6 <_fwalk_reent+0x12>

08005022 <__retarget_lock_init_recursive>:
 8005022:	4770      	bx	lr

08005024 <__retarget_lock_acquire_recursive>:
 8005024:	4770      	bx	lr

08005026 <__retarget_lock_release_recursive>:
 8005026:	4770      	bx	lr

08005028 <__swhatbuf_r>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	460e      	mov	r6, r1
 800502c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005030:	2900      	cmp	r1, #0
 8005032:	b096      	sub	sp, #88	; 0x58
 8005034:	4614      	mov	r4, r2
 8005036:	461d      	mov	r5, r3
 8005038:	da08      	bge.n	800504c <__swhatbuf_r+0x24>
 800503a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	602a      	str	r2, [r5, #0]
 8005042:	061a      	lsls	r2, r3, #24
 8005044:	d410      	bmi.n	8005068 <__swhatbuf_r+0x40>
 8005046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800504a:	e00e      	b.n	800506a <__swhatbuf_r+0x42>
 800504c:	466a      	mov	r2, sp
 800504e:	f000 fc5f 	bl	8005910 <_fstat_r>
 8005052:	2800      	cmp	r0, #0
 8005054:	dbf1      	blt.n	800503a <__swhatbuf_r+0x12>
 8005056:	9a01      	ldr	r2, [sp, #4]
 8005058:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800505c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005060:	425a      	negs	r2, r3
 8005062:	415a      	adcs	r2, r3
 8005064:	602a      	str	r2, [r5, #0]
 8005066:	e7ee      	b.n	8005046 <__swhatbuf_r+0x1e>
 8005068:	2340      	movs	r3, #64	; 0x40
 800506a:	2000      	movs	r0, #0
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	b016      	add	sp, #88	; 0x58
 8005070:	bd70      	pop	{r4, r5, r6, pc}
	...

08005074 <malloc>:
 8005074:	4b02      	ldr	r3, [pc, #8]	; (8005080 <malloc+0xc>)
 8005076:	4601      	mov	r1, r0
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	f000 b86f 	b.w	800515c <_malloc_r>
 800507e:	bf00      	nop
 8005080:	2000000c 	.word	0x2000000c

08005084 <_free_r>:
 8005084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005086:	2900      	cmp	r1, #0
 8005088:	d044      	beq.n	8005114 <_free_r+0x90>
 800508a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800508e:	9001      	str	r0, [sp, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f1a1 0404 	sub.w	r4, r1, #4
 8005096:	bfb8      	it	lt
 8005098:	18e4      	addlt	r4, r4, r3
 800509a:	f000 fc85 	bl	80059a8 <__malloc_lock>
 800509e:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <_free_r+0x94>)
 80050a0:	9801      	ldr	r0, [sp, #4]
 80050a2:	6813      	ldr	r3, [r2, #0]
 80050a4:	b933      	cbnz	r3, 80050b4 <_free_r+0x30>
 80050a6:	6063      	str	r3, [r4, #4]
 80050a8:	6014      	str	r4, [r2, #0]
 80050aa:	b003      	add	sp, #12
 80050ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050b0:	f000 bc80 	b.w	80059b4 <__malloc_unlock>
 80050b4:	42a3      	cmp	r3, r4
 80050b6:	d908      	bls.n	80050ca <_free_r+0x46>
 80050b8:	6825      	ldr	r5, [r4, #0]
 80050ba:	1961      	adds	r1, r4, r5
 80050bc:	428b      	cmp	r3, r1
 80050be:	bf01      	itttt	eq
 80050c0:	6819      	ldreq	r1, [r3, #0]
 80050c2:	685b      	ldreq	r3, [r3, #4]
 80050c4:	1949      	addeq	r1, r1, r5
 80050c6:	6021      	streq	r1, [r4, #0]
 80050c8:	e7ed      	b.n	80050a6 <_free_r+0x22>
 80050ca:	461a      	mov	r2, r3
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	b10b      	cbz	r3, 80050d4 <_free_r+0x50>
 80050d0:	42a3      	cmp	r3, r4
 80050d2:	d9fa      	bls.n	80050ca <_free_r+0x46>
 80050d4:	6811      	ldr	r1, [r2, #0]
 80050d6:	1855      	adds	r5, r2, r1
 80050d8:	42a5      	cmp	r5, r4
 80050da:	d10b      	bne.n	80050f4 <_free_r+0x70>
 80050dc:	6824      	ldr	r4, [r4, #0]
 80050de:	4421      	add	r1, r4
 80050e0:	1854      	adds	r4, r2, r1
 80050e2:	42a3      	cmp	r3, r4
 80050e4:	6011      	str	r1, [r2, #0]
 80050e6:	d1e0      	bne.n	80050aa <_free_r+0x26>
 80050e8:	681c      	ldr	r4, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	6053      	str	r3, [r2, #4]
 80050ee:	4421      	add	r1, r4
 80050f0:	6011      	str	r1, [r2, #0]
 80050f2:	e7da      	b.n	80050aa <_free_r+0x26>
 80050f4:	d902      	bls.n	80050fc <_free_r+0x78>
 80050f6:	230c      	movs	r3, #12
 80050f8:	6003      	str	r3, [r0, #0]
 80050fa:	e7d6      	b.n	80050aa <_free_r+0x26>
 80050fc:	6825      	ldr	r5, [r4, #0]
 80050fe:	1961      	adds	r1, r4, r5
 8005100:	428b      	cmp	r3, r1
 8005102:	bf04      	itt	eq
 8005104:	6819      	ldreq	r1, [r3, #0]
 8005106:	685b      	ldreq	r3, [r3, #4]
 8005108:	6063      	str	r3, [r4, #4]
 800510a:	bf04      	itt	eq
 800510c:	1949      	addeq	r1, r1, r5
 800510e:	6021      	streq	r1, [r4, #0]
 8005110:	6054      	str	r4, [r2, #4]
 8005112:	e7ca      	b.n	80050aa <_free_r+0x26>
 8005114:	b003      	add	sp, #12
 8005116:	bd30      	pop	{r4, r5, pc}
 8005118:	20000210 	.word	0x20000210

0800511c <sbrk_aligned>:
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	4e0e      	ldr	r6, [pc, #56]	; (8005158 <sbrk_aligned+0x3c>)
 8005120:	460c      	mov	r4, r1
 8005122:	6831      	ldr	r1, [r6, #0]
 8005124:	4605      	mov	r5, r0
 8005126:	b911      	cbnz	r1, 800512e <sbrk_aligned+0x12>
 8005128:	f000 fb7c 	bl	8005824 <_sbrk_r>
 800512c:	6030      	str	r0, [r6, #0]
 800512e:	4621      	mov	r1, r4
 8005130:	4628      	mov	r0, r5
 8005132:	f000 fb77 	bl	8005824 <_sbrk_r>
 8005136:	1c43      	adds	r3, r0, #1
 8005138:	d00a      	beq.n	8005150 <sbrk_aligned+0x34>
 800513a:	1cc4      	adds	r4, r0, #3
 800513c:	f024 0403 	bic.w	r4, r4, #3
 8005140:	42a0      	cmp	r0, r4
 8005142:	d007      	beq.n	8005154 <sbrk_aligned+0x38>
 8005144:	1a21      	subs	r1, r4, r0
 8005146:	4628      	mov	r0, r5
 8005148:	f000 fb6c 	bl	8005824 <_sbrk_r>
 800514c:	3001      	adds	r0, #1
 800514e:	d101      	bne.n	8005154 <sbrk_aligned+0x38>
 8005150:	f04f 34ff 	mov.w	r4, #4294967295
 8005154:	4620      	mov	r0, r4
 8005156:	bd70      	pop	{r4, r5, r6, pc}
 8005158:	20000214 	.word	0x20000214

0800515c <_malloc_r>:
 800515c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005160:	1ccd      	adds	r5, r1, #3
 8005162:	f025 0503 	bic.w	r5, r5, #3
 8005166:	3508      	adds	r5, #8
 8005168:	2d0c      	cmp	r5, #12
 800516a:	bf38      	it	cc
 800516c:	250c      	movcc	r5, #12
 800516e:	2d00      	cmp	r5, #0
 8005170:	4607      	mov	r7, r0
 8005172:	db01      	blt.n	8005178 <_malloc_r+0x1c>
 8005174:	42a9      	cmp	r1, r5
 8005176:	d905      	bls.n	8005184 <_malloc_r+0x28>
 8005178:	230c      	movs	r3, #12
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	2600      	movs	r6, #0
 800517e:	4630      	mov	r0, r6
 8005180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005184:	4e2e      	ldr	r6, [pc, #184]	; (8005240 <_malloc_r+0xe4>)
 8005186:	f000 fc0f 	bl	80059a8 <__malloc_lock>
 800518a:	6833      	ldr	r3, [r6, #0]
 800518c:	461c      	mov	r4, r3
 800518e:	bb34      	cbnz	r4, 80051de <_malloc_r+0x82>
 8005190:	4629      	mov	r1, r5
 8005192:	4638      	mov	r0, r7
 8005194:	f7ff ffc2 	bl	800511c <sbrk_aligned>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	4604      	mov	r4, r0
 800519c:	d14d      	bne.n	800523a <_malloc_r+0xde>
 800519e:	6834      	ldr	r4, [r6, #0]
 80051a0:	4626      	mov	r6, r4
 80051a2:	2e00      	cmp	r6, #0
 80051a4:	d140      	bne.n	8005228 <_malloc_r+0xcc>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	4631      	mov	r1, r6
 80051aa:	4638      	mov	r0, r7
 80051ac:	eb04 0803 	add.w	r8, r4, r3
 80051b0:	f000 fb38 	bl	8005824 <_sbrk_r>
 80051b4:	4580      	cmp	r8, r0
 80051b6:	d13a      	bne.n	800522e <_malloc_r+0xd2>
 80051b8:	6821      	ldr	r1, [r4, #0]
 80051ba:	3503      	adds	r5, #3
 80051bc:	1a6d      	subs	r5, r5, r1
 80051be:	f025 0503 	bic.w	r5, r5, #3
 80051c2:	3508      	adds	r5, #8
 80051c4:	2d0c      	cmp	r5, #12
 80051c6:	bf38      	it	cc
 80051c8:	250c      	movcc	r5, #12
 80051ca:	4629      	mov	r1, r5
 80051cc:	4638      	mov	r0, r7
 80051ce:	f7ff ffa5 	bl	800511c <sbrk_aligned>
 80051d2:	3001      	adds	r0, #1
 80051d4:	d02b      	beq.n	800522e <_malloc_r+0xd2>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	442b      	add	r3, r5
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	e00e      	b.n	80051fc <_malloc_r+0xa0>
 80051de:	6822      	ldr	r2, [r4, #0]
 80051e0:	1b52      	subs	r2, r2, r5
 80051e2:	d41e      	bmi.n	8005222 <_malloc_r+0xc6>
 80051e4:	2a0b      	cmp	r2, #11
 80051e6:	d916      	bls.n	8005216 <_malloc_r+0xba>
 80051e8:	1961      	adds	r1, r4, r5
 80051ea:	42a3      	cmp	r3, r4
 80051ec:	6025      	str	r5, [r4, #0]
 80051ee:	bf18      	it	ne
 80051f0:	6059      	strne	r1, [r3, #4]
 80051f2:	6863      	ldr	r3, [r4, #4]
 80051f4:	bf08      	it	eq
 80051f6:	6031      	streq	r1, [r6, #0]
 80051f8:	5162      	str	r2, [r4, r5]
 80051fa:	604b      	str	r3, [r1, #4]
 80051fc:	4638      	mov	r0, r7
 80051fe:	f104 060b 	add.w	r6, r4, #11
 8005202:	f000 fbd7 	bl	80059b4 <__malloc_unlock>
 8005206:	f026 0607 	bic.w	r6, r6, #7
 800520a:	1d23      	adds	r3, r4, #4
 800520c:	1af2      	subs	r2, r6, r3
 800520e:	d0b6      	beq.n	800517e <_malloc_r+0x22>
 8005210:	1b9b      	subs	r3, r3, r6
 8005212:	50a3      	str	r3, [r4, r2]
 8005214:	e7b3      	b.n	800517e <_malloc_r+0x22>
 8005216:	6862      	ldr	r2, [r4, #4]
 8005218:	42a3      	cmp	r3, r4
 800521a:	bf0c      	ite	eq
 800521c:	6032      	streq	r2, [r6, #0]
 800521e:	605a      	strne	r2, [r3, #4]
 8005220:	e7ec      	b.n	80051fc <_malloc_r+0xa0>
 8005222:	4623      	mov	r3, r4
 8005224:	6864      	ldr	r4, [r4, #4]
 8005226:	e7b2      	b.n	800518e <_malloc_r+0x32>
 8005228:	4634      	mov	r4, r6
 800522a:	6876      	ldr	r6, [r6, #4]
 800522c:	e7b9      	b.n	80051a2 <_malloc_r+0x46>
 800522e:	230c      	movs	r3, #12
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	4638      	mov	r0, r7
 8005234:	f000 fbbe 	bl	80059b4 <__malloc_unlock>
 8005238:	e7a1      	b.n	800517e <_malloc_r+0x22>
 800523a:	6025      	str	r5, [r4, #0]
 800523c:	e7de      	b.n	80051fc <_malloc_r+0xa0>
 800523e:	bf00      	nop
 8005240:	20000210 	.word	0x20000210

08005244 <__ssputs_r>:
 8005244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005248:	688e      	ldr	r6, [r1, #8]
 800524a:	429e      	cmp	r6, r3
 800524c:	4682      	mov	sl, r0
 800524e:	460c      	mov	r4, r1
 8005250:	4690      	mov	r8, r2
 8005252:	461f      	mov	r7, r3
 8005254:	d838      	bhi.n	80052c8 <__ssputs_r+0x84>
 8005256:	898a      	ldrh	r2, [r1, #12]
 8005258:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800525c:	d032      	beq.n	80052c4 <__ssputs_r+0x80>
 800525e:	6825      	ldr	r5, [r4, #0]
 8005260:	6909      	ldr	r1, [r1, #16]
 8005262:	eba5 0901 	sub.w	r9, r5, r1
 8005266:	6965      	ldr	r5, [r4, #20]
 8005268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800526c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005270:	3301      	adds	r3, #1
 8005272:	444b      	add	r3, r9
 8005274:	106d      	asrs	r5, r5, #1
 8005276:	429d      	cmp	r5, r3
 8005278:	bf38      	it	cc
 800527a:	461d      	movcc	r5, r3
 800527c:	0553      	lsls	r3, r2, #21
 800527e:	d531      	bpl.n	80052e4 <__ssputs_r+0xa0>
 8005280:	4629      	mov	r1, r5
 8005282:	f7ff ff6b 	bl	800515c <_malloc_r>
 8005286:	4606      	mov	r6, r0
 8005288:	b950      	cbnz	r0, 80052a0 <__ssputs_r+0x5c>
 800528a:	230c      	movs	r3, #12
 800528c:	f8ca 3000 	str.w	r3, [sl]
 8005290:	89a3      	ldrh	r3, [r4, #12]
 8005292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005296:	81a3      	strh	r3, [r4, #12]
 8005298:	f04f 30ff 	mov.w	r0, #4294967295
 800529c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a0:	6921      	ldr	r1, [r4, #16]
 80052a2:	464a      	mov	r2, r9
 80052a4:	f000 fb58 	bl	8005958 <memcpy>
 80052a8:	89a3      	ldrh	r3, [r4, #12]
 80052aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b2:	81a3      	strh	r3, [r4, #12]
 80052b4:	6126      	str	r6, [r4, #16]
 80052b6:	6165      	str	r5, [r4, #20]
 80052b8:	444e      	add	r6, r9
 80052ba:	eba5 0509 	sub.w	r5, r5, r9
 80052be:	6026      	str	r6, [r4, #0]
 80052c0:	60a5      	str	r5, [r4, #8]
 80052c2:	463e      	mov	r6, r7
 80052c4:	42be      	cmp	r6, r7
 80052c6:	d900      	bls.n	80052ca <__ssputs_r+0x86>
 80052c8:	463e      	mov	r6, r7
 80052ca:	6820      	ldr	r0, [r4, #0]
 80052cc:	4632      	mov	r2, r6
 80052ce:	4641      	mov	r1, r8
 80052d0:	f000 fb50 	bl	8005974 <memmove>
 80052d4:	68a3      	ldr	r3, [r4, #8]
 80052d6:	1b9b      	subs	r3, r3, r6
 80052d8:	60a3      	str	r3, [r4, #8]
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	4433      	add	r3, r6
 80052de:	6023      	str	r3, [r4, #0]
 80052e0:	2000      	movs	r0, #0
 80052e2:	e7db      	b.n	800529c <__ssputs_r+0x58>
 80052e4:	462a      	mov	r2, r5
 80052e6:	f000 fb6b 	bl	80059c0 <_realloc_r>
 80052ea:	4606      	mov	r6, r0
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d1e1      	bne.n	80052b4 <__ssputs_r+0x70>
 80052f0:	6921      	ldr	r1, [r4, #16]
 80052f2:	4650      	mov	r0, sl
 80052f4:	f7ff fec6 	bl	8005084 <_free_r>
 80052f8:	e7c7      	b.n	800528a <__ssputs_r+0x46>
	...

080052fc <_svfiprintf_r>:
 80052fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005300:	4698      	mov	r8, r3
 8005302:	898b      	ldrh	r3, [r1, #12]
 8005304:	061b      	lsls	r3, r3, #24
 8005306:	b09d      	sub	sp, #116	; 0x74
 8005308:	4607      	mov	r7, r0
 800530a:	460d      	mov	r5, r1
 800530c:	4614      	mov	r4, r2
 800530e:	d50e      	bpl.n	800532e <_svfiprintf_r+0x32>
 8005310:	690b      	ldr	r3, [r1, #16]
 8005312:	b963      	cbnz	r3, 800532e <_svfiprintf_r+0x32>
 8005314:	2140      	movs	r1, #64	; 0x40
 8005316:	f7ff ff21 	bl	800515c <_malloc_r>
 800531a:	6028      	str	r0, [r5, #0]
 800531c:	6128      	str	r0, [r5, #16]
 800531e:	b920      	cbnz	r0, 800532a <_svfiprintf_r+0x2e>
 8005320:	230c      	movs	r3, #12
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	f04f 30ff 	mov.w	r0, #4294967295
 8005328:	e0d1      	b.n	80054ce <_svfiprintf_r+0x1d2>
 800532a:	2340      	movs	r3, #64	; 0x40
 800532c:	616b      	str	r3, [r5, #20]
 800532e:	2300      	movs	r3, #0
 8005330:	9309      	str	r3, [sp, #36]	; 0x24
 8005332:	2320      	movs	r3, #32
 8005334:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005338:	f8cd 800c 	str.w	r8, [sp, #12]
 800533c:	2330      	movs	r3, #48	; 0x30
 800533e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80054e8 <_svfiprintf_r+0x1ec>
 8005342:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005346:	f04f 0901 	mov.w	r9, #1
 800534a:	4623      	mov	r3, r4
 800534c:	469a      	mov	sl, r3
 800534e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005352:	b10a      	cbz	r2, 8005358 <_svfiprintf_r+0x5c>
 8005354:	2a25      	cmp	r2, #37	; 0x25
 8005356:	d1f9      	bne.n	800534c <_svfiprintf_r+0x50>
 8005358:	ebba 0b04 	subs.w	fp, sl, r4
 800535c:	d00b      	beq.n	8005376 <_svfiprintf_r+0x7a>
 800535e:	465b      	mov	r3, fp
 8005360:	4622      	mov	r2, r4
 8005362:	4629      	mov	r1, r5
 8005364:	4638      	mov	r0, r7
 8005366:	f7ff ff6d 	bl	8005244 <__ssputs_r>
 800536a:	3001      	adds	r0, #1
 800536c:	f000 80aa 	beq.w	80054c4 <_svfiprintf_r+0x1c8>
 8005370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005372:	445a      	add	r2, fp
 8005374:	9209      	str	r2, [sp, #36]	; 0x24
 8005376:	f89a 3000 	ldrb.w	r3, [sl]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80a2 	beq.w	80054c4 <_svfiprintf_r+0x1c8>
 8005380:	2300      	movs	r3, #0
 8005382:	f04f 32ff 	mov.w	r2, #4294967295
 8005386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800538a:	f10a 0a01 	add.w	sl, sl, #1
 800538e:	9304      	str	r3, [sp, #16]
 8005390:	9307      	str	r3, [sp, #28]
 8005392:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005396:	931a      	str	r3, [sp, #104]	; 0x68
 8005398:	4654      	mov	r4, sl
 800539a:	2205      	movs	r2, #5
 800539c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a0:	4851      	ldr	r0, [pc, #324]	; (80054e8 <_svfiprintf_r+0x1ec>)
 80053a2:	f7fa ff3d 	bl	8000220 <memchr>
 80053a6:	9a04      	ldr	r2, [sp, #16]
 80053a8:	b9d8      	cbnz	r0, 80053e2 <_svfiprintf_r+0xe6>
 80053aa:	06d0      	lsls	r0, r2, #27
 80053ac:	bf44      	itt	mi
 80053ae:	2320      	movmi	r3, #32
 80053b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053b4:	0711      	lsls	r1, r2, #28
 80053b6:	bf44      	itt	mi
 80053b8:	232b      	movmi	r3, #43	; 0x2b
 80053ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053be:	f89a 3000 	ldrb.w	r3, [sl]
 80053c2:	2b2a      	cmp	r3, #42	; 0x2a
 80053c4:	d015      	beq.n	80053f2 <_svfiprintf_r+0xf6>
 80053c6:	9a07      	ldr	r2, [sp, #28]
 80053c8:	4654      	mov	r4, sl
 80053ca:	2000      	movs	r0, #0
 80053cc:	f04f 0c0a 	mov.w	ip, #10
 80053d0:	4621      	mov	r1, r4
 80053d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053d6:	3b30      	subs	r3, #48	; 0x30
 80053d8:	2b09      	cmp	r3, #9
 80053da:	d94e      	bls.n	800547a <_svfiprintf_r+0x17e>
 80053dc:	b1b0      	cbz	r0, 800540c <_svfiprintf_r+0x110>
 80053de:	9207      	str	r2, [sp, #28]
 80053e0:	e014      	b.n	800540c <_svfiprintf_r+0x110>
 80053e2:	eba0 0308 	sub.w	r3, r0, r8
 80053e6:	fa09 f303 	lsl.w	r3, r9, r3
 80053ea:	4313      	orrs	r3, r2
 80053ec:	9304      	str	r3, [sp, #16]
 80053ee:	46a2      	mov	sl, r4
 80053f0:	e7d2      	b.n	8005398 <_svfiprintf_r+0x9c>
 80053f2:	9b03      	ldr	r3, [sp, #12]
 80053f4:	1d19      	adds	r1, r3, #4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	9103      	str	r1, [sp, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bfbb      	ittet	lt
 80053fe:	425b      	neglt	r3, r3
 8005400:	f042 0202 	orrlt.w	r2, r2, #2
 8005404:	9307      	strge	r3, [sp, #28]
 8005406:	9307      	strlt	r3, [sp, #28]
 8005408:	bfb8      	it	lt
 800540a:	9204      	strlt	r2, [sp, #16]
 800540c:	7823      	ldrb	r3, [r4, #0]
 800540e:	2b2e      	cmp	r3, #46	; 0x2e
 8005410:	d10c      	bne.n	800542c <_svfiprintf_r+0x130>
 8005412:	7863      	ldrb	r3, [r4, #1]
 8005414:	2b2a      	cmp	r3, #42	; 0x2a
 8005416:	d135      	bne.n	8005484 <_svfiprintf_r+0x188>
 8005418:	9b03      	ldr	r3, [sp, #12]
 800541a:	1d1a      	adds	r2, r3, #4
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	9203      	str	r2, [sp, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	bfb8      	it	lt
 8005424:	f04f 33ff 	movlt.w	r3, #4294967295
 8005428:	3402      	adds	r4, #2
 800542a:	9305      	str	r3, [sp, #20]
 800542c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80054f8 <_svfiprintf_r+0x1fc>
 8005430:	7821      	ldrb	r1, [r4, #0]
 8005432:	2203      	movs	r2, #3
 8005434:	4650      	mov	r0, sl
 8005436:	f7fa fef3 	bl	8000220 <memchr>
 800543a:	b140      	cbz	r0, 800544e <_svfiprintf_r+0x152>
 800543c:	2340      	movs	r3, #64	; 0x40
 800543e:	eba0 000a 	sub.w	r0, r0, sl
 8005442:	fa03 f000 	lsl.w	r0, r3, r0
 8005446:	9b04      	ldr	r3, [sp, #16]
 8005448:	4303      	orrs	r3, r0
 800544a:	3401      	adds	r4, #1
 800544c:	9304      	str	r3, [sp, #16]
 800544e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005452:	4826      	ldr	r0, [pc, #152]	; (80054ec <_svfiprintf_r+0x1f0>)
 8005454:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005458:	2206      	movs	r2, #6
 800545a:	f7fa fee1 	bl	8000220 <memchr>
 800545e:	2800      	cmp	r0, #0
 8005460:	d038      	beq.n	80054d4 <_svfiprintf_r+0x1d8>
 8005462:	4b23      	ldr	r3, [pc, #140]	; (80054f0 <_svfiprintf_r+0x1f4>)
 8005464:	bb1b      	cbnz	r3, 80054ae <_svfiprintf_r+0x1b2>
 8005466:	9b03      	ldr	r3, [sp, #12]
 8005468:	3307      	adds	r3, #7
 800546a:	f023 0307 	bic.w	r3, r3, #7
 800546e:	3308      	adds	r3, #8
 8005470:	9303      	str	r3, [sp, #12]
 8005472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005474:	4433      	add	r3, r6
 8005476:	9309      	str	r3, [sp, #36]	; 0x24
 8005478:	e767      	b.n	800534a <_svfiprintf_r+0x4e>
 800547a:	fb0c 3202 	mla	r2, ip, r2, r3
 800547e:	460c      	mov	r4, r1
 8005480:	2001      	movs	r0, #1
 8005482:	e7a5      	b.n	80053d0 <_svfiprintf_r+0xd4>
 8005484:	2300      	movs	r3, #0
 8005486:	3401      	adds	r4, #1
 8005488:	9305      	str	r3, [sp, #20]
 800548a:	4619      	mov	r1, r3
 800548c:	f04f 0c0a 	mov.w	ip, #10
 8005490:	4620      	mov	r0, r4
 8005492:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005496:	3a30      	subs	r2, #48	; 0x30
 8005498:	2a09      	cmp	r2, #9
 800549a:	d903      	bls.n	80054a4 <_svfiprintf_r+0x1a8>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0c5      	beq.n	800542c <_svfiprintf_r+0x130>
 80054a0:	9105      	str	r1, [sp, #20]
 80054a2:	e7c3      	b.n	800542c <_svfiprintf_r+0x130>
 80054a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80054a8:	4604      	mov	r4, r0
 80054aa:	2301      	movs	r3, #1
 80054ac:	e7f0      	b.n	8005490 <_svfiprintf_r+0x194>
 80054ae:	ab03      	add	r3, sp, #12
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	462a      	mov	r2, r5
 80054b4:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <_svfiprintf_r+0x1f8>)
 80054b6:	a904      	add	r1, sp, #16
 80054b8:	4638      	mov	r0, r7
 80054ba:	f3af 8000 	nop.w
 80054be:	1c42      	adds	r2, r0, #1
 80054c0:	4606      	mov	r6, r0
 80054c2:	d1d6      	bne.n	8005472 <_svfiprintf_r+0x176>
 80054c4:	89ab      	ldrh	r3, [r5, #12]
 80054c6:	065b      	lsls	r3, r3, #25
 80054c8:	f53f af2c 	bmi.w	8005324 <_svfiprintf_r+0x28>
 80054cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054ce:	b01d      	add	sp, #116	; 0x74
 80054d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d4:	ab03      	add	r3, sp, #12
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	462a      	mov	r2, r5
 80054da:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <_svfiprintf_r+0x1f8>)
 80054dc:	a904      	add	r1, sp, #16
 80054de:	4638      	mov	r0, r7
 80054e0:	f000 f87a 	bl	80055d8 <_printf_i>
 80054e4:	e7eb      	b.n	80054be <_svfiprintf_r+0x1c2>
 80054e6:	bf00      	nop
 80054e8:	08005b14 	.word	0x08005b14
 80054ec:	08005b1e 	.word	0x08005b1e
 80054f0:	00000000 	.word	0x00000000
 80054f4:	08005245 	.word	0x08005245
 80054f8:	08005b1a 	.word	0x08005b1a

080054fc <_printf_common>:
 80054fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005500:	4616      	mov	r6, r2
 8005502:	4699      	mov	r9, r3
 8005504:	688a      	ldr	r2, [r1, #8]
 8005506:	690b      	ldr	r3, [r1, #16]
 8005508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800550c:	4293      	cmp	r3, r2
 800550e:	bfb8      	it	lt
 8005510:	4613      	movlt	r3, r2
 8005512:	6033      	str	r3, [r6, #0]
 8005514:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005518:	4607      	mov	r7, r0
 800551a:	460c      	mov	r4, r1
 800551c:	b10a      	cbz	r2, 8005522 <_printf_common+0x26>
 800551e:	3301      	adds	r3, #1
 8005520:	6033      	str	r3, [r6, #0]
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	0699      	lsls	r1, r3, #26
 8005526:	bf42      	ittt	mi
 8005528:	6833      	ldrmi	r3, [r6, #0]
 800552a:	3302      	addmi	r3, #2
 800552c:	6033      	strmi	r3, [r6, #0]
 800552e:	6825      	ldr	r5, [r4, #0]
 8005530:	f015 0506 	ands.w	r5, r5, #6
 8005534:	d106      	bne.n	8005544 <_printf_common+0x48>
 8005536:	f104 0a19 	add.w	sl, r4, #25
 800553a:	68e3      	ldr	r3, [r4, #12]
 800553c:	6832      	ldr	r2, [r6, #0]
 800553e:	1a9b      	subs	r3, r3, r2
 8005540:	42ab      	cmp	r3, r5
 8005542:	dc26      	bgt.n	8005592 <_printf_common+0x96>
 8005544:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005548:	1e13      	subs	r3, r2, #0
 800554a:	6822      	ldr	r2, [r4, #0]
 800554c:	bf18      	it	ne
 800554e:	2301      	movne	r3, #1
 8005550:	0692      	lsls	r2, r2, #26
 8005552:	d42b      	bmi.n	80055ac <_printf_common+0xb0>
 8005554:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005558:	4649      	mov	r1, r9
 800555a:	4638      	mov	r0, r7
 800555c:	47c0      	blx	r8
 800555e:	3001      	adds	r0, #1
 8005560:	d01e      	beq.n	80055a0 <_printf_common+0xa4>
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	68e5      	ldr	r5, [r4, #12]
 8005566:	6832      	ldr	r2, [r6, #0]
 8005568:	f003 0306 	and.w	r3, r3, #6
 800556c:	2b04      	cmp	r3, #4
 800556e:	bf08      	it	eq
 8005570:	1aad      	subeq	r5, r5, r2
 8005572:	68a3      	ldr	r3, [r4, #8]
 8005574:	6922      	ldr	r2, [r4, #16]
 8005576:	bf0c      	ite	eq
 8005578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800557c:	2500      	movne	r5, #0
 800557e:	4293      	cmp	r3, r2
 8005580:	bfc4      	itt	gt
 8005582:	1a9b      	subgt	r3, r3, r2
 8005584:	18ed      	addgt	r5, r5, r3
 8005586:	2600      	movs	r6, #0
 8005588:	341a      	adds	r4, #26
 800558a:	42b5      	cmp	r5, r6
 800558c:	d11a      	bne.n	80055c4 <_printf_common+0xc8>
 800558e:	2000      	movs	r0, #0
 8005590:	e008      	b.n	80055a4 <_printf_common+0xa8>
 8005592:	2301      	movs	r3, #1
 8005594:	4652      	mov	r2, sl
 8005596:	4649      	mov	r1, r9
 8005598:	4638      	mov	r0, r7
 800559a:	47c0      	blx	r8
 800559c:	3001      	adds	r0, #1
 800559e:	d103      	bne.n	80055a8 <_printf_common+0xac>
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295
 80055a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a8:	3501      	adds	r5, #1
 80055aa:	e7c6      	b.n	800553a <_printf_common+0x3e>
 80055ac:	18e1      	adds	r1, r4, r3
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	2030      	movs	r0, #48	; 0x30
 80055b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055b6:	4422      	add	r2, r4
 80055b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055c0:	3302      	adds	r3, #2
 80055c2:	e7c7      	b.n	8005554 <_printf_common+0x58>
 80055c4:	2301      	movs	r3, #1
 80055c6:	4622      	mov	r2, r4
 80055c8:	4649      	mov	r1, r9
 80055ca:	4638      	mov	r0, r7
 80055cc:	47c0      	blx	r8
 80055ce:	3001      	adds	r0, #1
 80055d0:	d0e6      	beq.n	80055a0 <_printf_common+0xa4>
 80055d2:	3601      	adds	r6, #1
 80055d4:	e7d9      	b.n	800558a <_printf_common+0x8e>
	...

080055d8 <_printf_i>:
 80055d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055dc:	7e0f      	ldrb	r7, [r1, #24]
 80055de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055e0:	2f78      	cmp	r7, #120	; 0x78
 80055e2:	4691      	mov	r9, r2
 80055e4:	4680      	mov	r8, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	469a      	mov	sl, r3
 80055ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055ee:	d807      	bhi.n	8005600 <_printf_i+0x28>
 80055f0:	2f62      	cmp	r7, #98	; 0x62
 80055f2:	d80a      	bhi.n	800560a <_printf_i+0x32>
 80055f4:	2f00      	cmp	r7, #0
 80055f6:	f000 80d8 	beq.w	80057aa <_printf_i+0x1d2>
 80055fa:	2f58      	cmp	r7, #88	; 0x58
 80055fc:	f000 80a3 	beq.w	8005746 <_printf_i+0x16e>
 8005600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005604:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005608:	e03a      	b.n	8005680 <_printf_i+0xa8>
 800560a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800560e:	2b15      	cmp	r3, #21
 8005610:	d8f6      	bhi.n	8005600 <_printf_i+0x28>
 8005612:	a101      	add	r1, pc, #4	; (adr r1, 8005618 <_printf_i+0x40>)
 8005614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005618:	08005671 	.word	0x08005671
 800561c:	08005685 	.word	0x08005685
 8005620:	08005601 	.word	0x08005601
 8005624:	08005601 	.word	0x08005601
 8005628:	08005601 	.word	0x08005601
 800562c:	08005601 	.word	0x08005601
 8005630:	08005685 	.word	0x08005685
 8005634:	08005601 	.word	0x08005601
 8005638:	08005601 	.word	0x08005601
 800563c:	08005601 	.word	0x08005601
 8005640:	08005601 	.word	0x08005601
 8005644:	08005791 	.word	0x08005791
 8005648:	080056b5 	.word	0x080056b5
 800564c:	08005773 	.word	0x08005773
 8005650:	08005601 	.word	0x08005601
 8005654:	08005601 	.word	0x08005601
 8005658:	080057b3 	.word	0x080057b3
 800565c:	08005601 	.word	0x08005601
 8005660:	080056b5 	.word	0x080056b5
 8005664:	08005601 	.word	0x08005601
 8005668:	08005601 	.word	0x08005601
 800566c:	0800577b 	.word	0x0800577b
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	1d1a      	adds	r2, r3, #4
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	602a      	str	r2, [r5, #0]
 8005678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800567c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005680:	2301      	movs	r3, #1
 8005682:	e0a3      	b.n	80057cc <_printf_i+0x1f4>
 8005684:	6820      	ldr	r0, [r4, #0]
 8005686:	6829      	ldr	r1, [r5, #0]
 8005688:	0606      	lsls	r6, r0, #24
 800568a:	f101 0304 	add.w	r3, r1, #4
 800568e:	d50a      	bpl.n	80056a6 <_printf_i+0xce>
 8005690:	680e      	ldr	r6, [r1, #0]
 8005692:	602b      	str	r3, [r5, #0]
 8005694:	2e00      	cmp	r6, #0
 8005696:	da03      	bge.n	80056a0 <_printf_i+0xc8>
 8005698:	232d      	movs	r3, #45	; 0x2d
 800569a:	4276      	negs	r6, r6
 800569c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056a0:	485e      	ldr	r0, [pc, #376]	; (800581c <_printf_i+0x244>)
 80056a2:	230a      	movs	r3, #10
 80056a4:	e019      	b.n	80056da <_printf_i+0x102>
 80056a6:	680e      	ldr	r6, [r1, #0]
 80056a8:	602b      	str	r3, [r5, #0]
 80056aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056ae:	bf18      	it	ne
 80056b0:	b236      	sxthne	r6, r6
 80056b2:	e7ef      	b.n	8005694 <_printf_i+0xbc>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	6820      	ldr	r0, [r4, #0]
 80056b8:	1d19      	adds	r1, r3, #4
 80056ba:	6029      	str	r1, [r5, #0]
 80056bc:	0601      	lsls	r1, r0, #24
 80056be:	d501      	bpl.n	80056c4 <_printf_i+0xec>
 80056c0:	681e      	ldr	r6, [r3, #0]
 80056c2:	e002      	b.n	80056ca <_printf_i+0xf2>
 80056c4:	0646      	lsls	r6, r0, #25
 80056c6:	d5fb      	bpl.n	80056c0 <_printf_i+0xe8>
 80056c8:	881e      	ldrh	r6, [r3, #0]
 80056ca:	4854      	ldr	r0, [pc, #336]	; (800581c <_printf_i+0x244>)
 80056cc:	2f6f      	cmp	r7, #111	; 0x6f
 80056ce:	bf0c      	ite	eq
 80056d0:	2308      	moveq	r3, #8
 80056d2:	230a      	movne	r3, #10
 80056d4:	2100      	movs	r1, #0
 80056d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056da:	6865      	ldr	r5, [r4, #4]
 80056dc:	60a5      	str	r5, [r4, #8]
 80056de:	2d00      	cmp	r5, #0
 80056e0:	bfa2      	ittt	ge
 80056e2:	6821      	ldrge	r1, [r4, #0]
 80056e4:	f021 0104 	bicge.w	r1, r1, #4
 80056e8:	6021      	strge	r1, [r4, #0]
 80056ea:	b90e      	cbnz	r6, 80056f0 <_printf_i+0x118>
 80056ec:	2d00      	cmp	r5, #0
 80056ee:	d04d      	beq.n	800578c <_printf_i+0x1b4>
 80056f0:	4615      	mov	r5, r2
 80056f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80056f6:	fb03 6711 	mls	r7, r3, r1, r6
 80056fa:	5dc7      	ldrb	r7, [r0, r7]
 80056fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005700:	4637      	mov	r7, r6
 8005702:	42bb      	cmp	r3, r7
 8005704:	460e      	mov	r6, r1
 8005706:	d9f4      	bls.n	80056f2 <_printf_i+0x11a>
 8005708:	2b08      	cmp	r3, #8
 800570a:	d10b      	bne.n	8005724 <_printf_i+0x14c>
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	07de      	lsls	r6, r3, #31
 8005710:	d508      	bpl.n	8005724 <_printf_i+0x14c>
 8005712:	6923      	ldr	r3, [r4, #16]
 8005714:	6861      	ldr	r1, [r4, #4]
 8005716:	4299      	cmp	r1, r3
 8005718:	bfde      	ittt	le
 800571a:	2330      	movle	r3, #48	; 0x30
 800571c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005720:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005724:	1b52      	subs	r2, r2, r5
 8005726:	6122      	str	r2, [r4, #16]
 8005728:	f8cd a000 	str.w	sl, [sp]
 800572c:	464b      	mov	r3, r9
 800572e:	aa03      	add	r2, sp, #12
 8005730:	4621      	mov	r1, r4
 8005732:	4640      	mov	r0, r8
 8005734:	f7ff fee2 	bl	80054fc <_printf_common>
 8005738:	3001      	adds	r0, #1
 800573a:	d14c      	bne.n	80057d6 <_printf_i+0x1fe>
 800573c:	f04f 30ff 	mov.w	r0, #4294967295
 8005740:	b004      	add	sp, #16
 8005742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005746:	4835      	ldr	r0, [pc, #212]	; (800581c <_printf_i+0x244>)
 8005748:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800574c:	6829      	ldr	r1, [r5, #0]
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	f851 6b04 	ldr.w	r6, [r1], #4
 8005754:	6029      	str	r1, [r5, #0]
 8005756:	061d      	lsls	r5, r3, #24
 8005758:	d514      	bpl.n	8005784 <_printf_i+0x1ac>
 800575a:	07df      	lsls	r7, r3, #31
 800575c:	bf44      	itt	mi
 800575e:	f043 0320 	orrmi.w	r3, r3, #32
 8005762:	6023      	strmi	r3, [r4, #0]
 8005764:	b91e      	cbnz	r6, 800576e <_printf_i+0x196>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	f023 0320 	bic.w	r3, r3, #32
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	2310      	movs	r3, #16
 8005770:	e7b0      	b.n	80056d4 <_printf_i+0xfc>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	f043 0320 	orr.w	r3, r3, #32
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	2378      	movs	r3, #120	; 0x78
 800577c:	4828      	ldr	r0, [pc, #160]	; (8005820 <_printf_i+0x248>)
 800577e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005782:	e7e3      	b.n	800574c <_printf_i+0x174>
 8005784:	0659      	lsls	r1, r3, #25
 8005786:	bf48      	it	mi
 8005788:	b2b6      	uxthmi	r6, r6
 800578a:	e7e6      	b.n	800575a <_printf_i+0x182>
 800578c:	4615      	mov	r5, r2
 800578e:	e7bb      	b.n	8005708 <_printf_i+0x130>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	6826      	ldr	r6, [r4, #0]
 8005794:	6961      	ldr	r1, [r4, #20]
 8005796:	1d18      	adds	r0, r3, #4
 8005798:	6028      	str	r0, [r5, #0]
 800579a:	0635      	lsls	r5, r6, #24
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	d501      	bpl.n	80057a4 <_printf_i+0x1cc>
 80057a0:	6019      	str	r1, [r3, #0]
 80057a2:	e002      	b.n	80057aa <_printf_i+0x1d2>
 80057a4:	0670      	lsls	r0, r6, #25
 80057a6:	d5fb      	bpl.n	80057a0 <_printf_i+0x1c8>
 80057a8:	8019      	strh	r1, [r3, #0]
 80057aa:	2300      	movs	r3, #0
 80057ac:	6123      	str	r3, [r4, #16]
 80057ae:	4615      	mov	r5, r2
 80057b0:	e7ba      	b.n	8005728 <_printf_i+0x150>
 80057b2:	682b      	ldr	r3, [r5, #0]
 80057b4:	1d1a      	adds	r2, r3, #4
 80057b6:	602a      	str	r2, [r5, #0]
 80057b8:	681d      	ldr	r5, [r3, #0]
 80057ba:	6862      	ldr	r2, [r4, #4]
 80057bc:	2100      	movs	r1, #0
 80057be:	4628      	mov	r0, r5
 80057c0:	f7fa fd2e 	bl	8000220 <memchr>
 80057c4:	b108      	cbz	r0, 80057ca <_printf_i+0x1f2>
 80057c6:	1b40      	subs	r0, r0, r5
 80057c8:	6060      	str	r0, [r4, #4]
 80057ca:	6863      	ldr	r3, [r4, #4]
 80057cc:	6123      	str	r3, [r4, #16]
 80057ce:	2300      	movs	r3, #0
 80057d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057d4:	e7a8      	b.n	8005728 <_printf_i+0x150>
 80057d6:	6923      	ldr	r3, [r4, #16]
 80057d8:	462a      	mov	r2, r5
 80057da:	4649      	mov	r1, r9
 80057dc:	4640      	mov	r0, r8
 80057de:	47d0      	blx	sl
 80057e0:	3001      	adds	r0, #1
 80057e2:	d0ab      	beq.n	800573c <_printf_i+0x164>
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	079b      	lsls	r3, r3, #30
 80057e8:	d413      	bmi.n	8005812 <_printf_i+0x23a>
 80057ea:	68e0      	ldr	r0, [r4, #12]
 80057ec:	9b03      	ldr	r3, [sp, #12]
 80057ee:	4298      	cmp	r0, r3
 80057f0:	bfb8      	it	lt
 80057f2:	4618      	movlt	r0, r3
 80057f4:	e7a4      	b.n	8005740 <_printf_i+0x168>
 80057f6:	2301      	movs	r3, #1
 80057f8:	4632      	mov	r2, r6
 80057fa:	4649      	mov	r1, r9
 80057fc:	4640      	mov	r0, r8
 80057fe:	47d0      	blx	sl
 8005800:	3001      	adds	r0, #1
 8005802:	d09b      	beq.n	800573c <_printf_i+0x164>
 8005804:	3501      	adds	r5, #1
 8005806:	68e3      	ldr	r3, [r4, #12]
 8005808:	9903      	ldr	r1, [sp, #12]
 800580a:	1a5b      	subs	r3, r3, r1
 800580c:	42ab      	cmp	r3, r5
 800580e:	dcf2      	bgt.n	80057f6 <_printf_i+0x21e>
 8005810:	e7eb      	b.n	80057ea <_printf_i+0x212>
 8005812:	2500      	movs	r5, #0
 8005814:	f104 0619 	add.w	r6, r4, #25
 8005818:	e7f5      	b.n	8005806 <_printf_i+0x22e>
 800581a:	bf00      	nop
 800581c:	08005b25 	.word	0x08005b25
 8005820:	08005b36 	.word	0x08005b36

08005824 <_sbrk_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	4d06      	ldr	r5, [pc, #24]	; (8005840 <_sbrk_r+0x1c>)
 8005828:	2300      	movs	r3, #0
 800582a:	4604      	mov	r4, r0
 800582c:	4608      	mov	r0, r1
 800582e:	602b      	str	r3, [r5, #0]
 8005830:	f7fb fa64 	bl	8000cfc <_sbrk>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <_sbrk_r+0x1a>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	b103      	cbz	r3, 800583e <_sbrk_r+0x1a>
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	20000218 	.word	0x20000218

08005844 <__sread>:
 8005844:	b510      	push	{r4, lr}
 8005846:	460c      	mov	r4, r1
 8005848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800584c:	f000 f8e8 	bl	8005a20 <_read_r>
 8005850:	2800      	cmp	r0, #0
 8005852:	bfab      	itete	ge
 8005854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005856:	89a3      	ldrhlt	r3, [r4, #12]
 8005858:	181b      	addge	r3, r3, r0
 800585a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800585e:	bfac      	ite	ge
 8005860:	6563      	strge	r3, [r4, #84]	; 0x54
 8005862:	81a3      	strhlt	r3, [r4, #12]
 8005864:	bd10      	pop	{r4, pc}

08005866 <__swrite>:
 8005866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800586a:	461f      	mov	r7, r3
 800586c:	898b      	ldrh	r3, [r1, #12]
 800586e:	05db      	lsls	r3, r3, #23
 8005870:	4605      	mov	r5, r0
 8005872:	460c      	mov	r4, r1
 8005874:	4616      	mov	r6, r2
 8005876:	d505      	bpl.n	8005884 <__swrite+0x1e>
 8005878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800587c:	2302      	movs	r3, #2
 800587e:	2200      	movs	r2, #0
 8005880:	f000 f858 	bl	8005934 <_lseek_r>
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800588a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800588e:	81a3      	strh	r3, [r4, #12]
 8005890:	4632      	mov	r2, r6
 8005892:	463b      	mov	r3, r7
 8005894:	4628      	mov	r0, r5
 8005896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800589a:	f000 b817 	b.w	80058cc <_write_r>

0800589e <__sseek>:
 800589e:	b510      	push	{r4, lr}
 80058a0:	460c      	mov	r4, r1
 80058a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a6:	f000 f845 	bl	8005934 <_lseek_r>
 80058aa:	1c43      	adds	r3, r0, #1
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	bf15      	itete	ne
 80058b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80058b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058ba:	81a3      	strheq	r3, [r4, #12]
 80058bc:	bf18      	it	ne
 80058be:	81a3      	strhne	r3, [r4, #12]
 80058c0:	bd10      	pop	{r4, pc}

080058c2 <__sclose>:
 80058c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c6:	f000 b813 	b.w	80058f0 <_close_r>
	...

080058cc <_write_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	4d07      	ldr	r5, [pc, #28]	; (80058ec <_write_r+0x20>)
 80058d0:	4604      	mov	r4, r0
 80058d2:	4608      	mov	r0, r1
 80058d4:	4611      	mov	r1, r2
 80058d6:	2200      	movs	r2, #0
 80058d8:	602a      	str	r2, [r5, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	f7fb f9c9 	bl	8000c72 <_write>
 80058e0:	1c43      	adds	r3, r0, #1
 80058e2:	d102      	bne.n	80058ea <_write_r+0x1e>
 80058e4:	682b      	ldr	r3, [r5, #0]
 80058e6:	b103      	cbz	r3, 80058ea <_write_r+0x1e>
 80058e8:	6023      	str	r3, [r4, #0]
 80058ea:	bd38      	pop	{r3, r4, r5, pc}
 80058ec:	20000218 	.word	0x20000218

080058f0 <_close_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	4d06      	ldr	r5, [pc, #24]	; (800590c <_close_r+0x1c>)
 80058f4:	2300      	movs	r3, #0
 80058f6:	4604      	mov	r4, r0
 80058f8:	4608      	mov	r0, r1
 80058fa:	602b      	str	r3, [r5, #0]
 80058fc:	f7fb f9d5 	bl	8000caa <_close>
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	d102      	bne.n	800590a <_close_r+0x1a>
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	b103      	cbz	r3, 800590a <_close_r+0x1a>
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	20000218 	.word	0x20000218

08005910 <_fstat_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4d07      	ldr	r5, [pc, #28]	; (8005930 <_fstat_r+0x20>)
 8005914:	2300      	movs	r3, #0
 8005916:	4604      	mov	r4, r0
 8005918:	4608      	mov	r0, r1
 800591a:	4611      	mov	r1, r2
 800591c:	602b      	str	r3, [r5, #0]
 800591e:	f7fb f9d0 	bl	8000cc2 <_fstat>
 8005922:	1c43      	adds	r3, r0, #1
 8005924:	d102      	bne.n	800592c <_fstat_r+0x1c>
 8005926:	682b      	ldr	r3, [r5, #0]
 8005928:	b103      	cbz	r3, 800592c <_fstat_r+0x1c>
 800592a:	6023      	str	r3, [r4, #0]
 800592c:	bd38      	pop	{r3, r4, r5, pc}
 800592e:	bf00      	nop
 8005930:	20000218 	.word	0x20000218

08005934 <_lseek_r>:
 8005934:	b538      	push	{r3, r4, r5, lr}
 8005936:	4d07      	ldr	r5, [pc, #28]	; (8005954 <_lseek_r+0x20>)
 8005938:	4604      	mov	r4, r0
 800593a:	4608      	mov	r0, r1
 800593c:	4611      	mov	r1, r2
 800593e:	2200      	movs	r2, #0
 8005940:	602a      	str	r2, [r5, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	f7fb f9cd 	bl	8000ce2 <_lseek>
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	d102      	bne.n	8005952 <_lseek_r+0x1e>
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	b103      	cbz	r3, 8005952 <_lseek_r+0x1e>
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	bd38      	pop	{r3, r4, r5, pc}
 8005954:	20000218 	.word	0x20000218

08005958 <memcpy>:
 8005958:	440a      	add	r2, r1
 800595a:	4291      	cmp	r1, r2
 800595c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005960:	d100      	bne.n	8005964 <memcpy+0xc>
 8005962:	4770      	bx	lr
 8005964:	b510      	push	{r4, lr}
 8005966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800596a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800596e:	4291      	cmp	r1, r2
 8005970:	d1f9      	bne.n	8005966 <memcpy+0xe>
 8005972:	bd10      	pop	{r4, pc}

08005974 <memmove>:
 8005974:	4288      	cmp	r0, r1
 8005976:	b510      	push	{r4, lr}
 8005978:	eb01 0402 	add.w	r4, r1, r2
 800597c:	d902      	bls.n	8005984 <memmove+0x10>
 800597e:	4284      	cmp	r4, r0
 8005980:	4623      	mov	r3, r4
 8005982:	d807      	bhi.n	8005994 <memmove+0x20>
 8005984:	1e43      	subs	r3, r0, #1
 8005986:	42a1      	cmp	r1, r4
 8005988:	d008      	beq.n	800599c <memmove+0x28>
 800598a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800598e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005992:	e7f8      	b.n	8005986 <memmove+0x12>
 8005994:	4402      	add	r2, r0
 8005996:	4601      	mov	r1, r0
 8005998:	428a      	cmp	r2, r1
 800599a:	d100      	bne.n	800599e <memmove+0x2a>
 800599c:	bd10      	pop	{r4, pc}
 800599e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059a6:	e7f7      	b.n	8005998 <memmove+0x24>

080059a8 <__malloc_lock>:
 80059a8:	4801      	ldr	r0, [pc, #4]	; (80059b0 <__malloc_lock+0x8>)
 80059aa:	f7ff bb3b 	b.w	8005024 <__retarget_lock_acquire_recursive>
 80059ae:	bf00      	nop
 80059b0:	2000020c 	.word	0x2000020c

080059b4 <__malloc_unlock>:
 80059b4:	4801      	ldr	r0, [pc, #4]	; (80059bc <__malloc_unlock+0x8>)
 80059b6:	f7ff bb36 	b.w	8005026 <__retarget_lock_release_recursive>
 80059ba:	bf00      	nop
 80059bc:	2000020c 	.word	0x2000020c

080059c0 <_realloc_r>:
 80059c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c4:	4680      	mov	r8, r0
 80059c6:	4614      	mov	r4, r2
 80059c8:	460e      	mov	r6, r1
 80059ca:	b921      	cbnz	r1, 80059d6 <_realloc_r+0x16>
 80059cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059d0:	4611      	mov	r1, r2
 80059d2:	f7ff bbc3 	b.w	800515c <_malloc_r>
 80059d6:	b92a      	cbnz	r2, 80059e4 <_realloc_r+0x24>
 80059d8:	f7ff fb54 	bl	8005084 <_free_r>
 80059dc:	4625      	mov	r5, r4
 80059de:	4628      	mov	r0, r5
 80059e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059e4:	f000 f82e 	bl	8005a44 <_malloc_usable_size_r>
 80059e8:	4284      	cmp	r4, r0
 80059ea:	4607      	mov	r7, r0
 80059ec:	d802      	bhi.n	80059f4 <_realloc_r+0x34>
 80059ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059f2:	d812      	bhi.n	8005a1a <_realloc_r+0x5a>
 80059f4:	4621      	mov	r1, r4
 80059f6:	4640      	mov	r0, r8
 80059f8:	f7ff fbb0 	bl	800515c <_malloc_r>
 80059fc:	4605      	mov	r5, r0
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d0ed      	beq.n	80059de <_realloc_r+0x1e>
 8005a02:	42bc      	cmp	r4, r7
 8005a04:	4622      	mov	r2, r4
 8005a06:	4631      	mov	r1, r6
 8005a08:	bf28      	it	cs
 8005a0a:	463a      	movcs	r2, r7
 8005a0c:	f7ff ffa4 	bl	8005958 <memcpy>
 8005a10:	4631      	mov	r1, r6
 8005a12:	4640      	mov	r0, r8
 8005a14:	f7ff fb36 	bl	8005084 <_free_r>
 8005a18:	e7e1      	b.n	80059de <_realloc_r+0x1e>
 8005a1a:	4635      	mov	r5, r6
 8005a1c:	e7df      	b.n	80059de <_realloc_r+0x1e>
	...

08005a20 <_read_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4d07      	ldr	r5, [pc, #28]	; (8005a40 <_read_r+0x20>)
 8005a24:	4604      	mov	r4, r0
 8005a26:	4608      	mov	r0, r1
 8005a28:	4611      	mov	r1, r2
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	602a      	str	r2, [r5, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f7fb f902 	bl	8000c38 <_read>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d102      	bne.n	8005a3e <_read_r+0x1e>
 8005a38:	682b      	ldr	r3, [r5, #0]
 8005a3a:	b103      	cbz	r3, 8005a3e <_read_r+0x1e>
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	bd38      	pop	{r3, r4, r5, pc}
 8005a40:	20000218 	.word	0x20000218

08005a44 <_malloc_usable_size_r>:
 8005a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a48:	1f18      	subs	r0, r3, #4
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	bfbc      	itt	lt
 8005a4e:	580b      	ldrlt	r3, [r1, r0]
 8005a50:	18c0      	addlt	r0, r0, r3
 8005a52:	4770      	bx	lr

08005a54 <_init>:
 8005a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a56:	bf00      	nop
 8005a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5a:	bc08      	pop	{r3}
 8005a5c:	469e      	mov	lr, r3
 8005a5e:	4770      	bx	lr

08005a60 <_fini>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	bf00      	nop
 8005a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a66:	bc08      	pop	{r3}
 8005a68:	469e      	mov	lr, r3
 8005a6a:	4770      	bx	lr
