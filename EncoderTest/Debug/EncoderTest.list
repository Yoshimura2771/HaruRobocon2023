
EncoderTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a70  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003c50  08003c50  00013c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc8  08003cc8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003cc8  08003cc8  00013cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cd0  08003cd0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cd0  08003cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08003d48  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08003d48  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119d2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000208a  00000000  00000000  00031a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00033b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  00034a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e473  00000000  00000000  00035958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bdc  00000000  00000000  00053dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6195  00000000  00000000  000659a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012bb3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000463c  00000000  00000000  0012bb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003c38 	.word	0x08003c38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08003c38 	.word	0x08003c38

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <read_encoder_value>:

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int16_t read_encoder_value(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
	uint16_t enc_buff = TIM1->CNT;
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <read_encoder_value+0x24>)
 80005cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ce:	80fb      	strh	r3, [r7, #6]
	TIM1->CNT = 0;
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <read_encoder_value+0x24>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	625a      	str	r2, [r3, #36]	; 0x24
	return (int16_t)enc_buff;
 80005d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40012c00 	.word	0x40012c00

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int32_t count = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fabc 	bl	8000b72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f827 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f917 	bl	8000830 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000602:	f000 f8c9 	bl	8000798 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000606:	f000 f86d 	bl	80006e4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800060a:	213c      	movs	r1, #60	; 0x3c
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <main+0x54>)
 800060e:	f001 fe2f 	bl	8002270 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count+=read_encoder_value();
 8000612:	f7ff ffd7 	bl	80005c4 <read_encoder_value>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	4413      	add	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
	  snprintf(buff, sizeof(buff), "%ld", count);
 8000620:	1d38      	adds	r0, r7, #4
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <main+0x58>)
 8000626:	2108      	movs	r1, #8
 8000628:	f002 fe84 	bl	8003334 <sniprintf>
	  HAL_UART_Transmit(&huart2, buff, sizeof(buff), 100);
 800062c:	1d39      	adds	r1, r7, #4
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	2208      	movs	r2, #8
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <main+0x5c>)
 8000634:	f002 f832 	bl	800269c <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000638:	2064      	movs	r0, #100	; 0x64
 800063a:	f000 fb0b 	bl	8000c54 <HAL_Delay>
	  count+=read_encoder_value();
 800063e:	e7e8      	b.n	8000612 <main+0x26>
 8000640:	2000008c 	.word	0x2000008c
 8000644:	08003c50 	.word	0x08003c50
 8000648:	200000d8 	.word	0x200000d8

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0318 	add.w	r3, r7, #24
 8000656:	2238      	movs	r2, #56	; 0x38
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f002 fe62 	bl	8003324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800066e:	2000      	movs	r0, #0
 8000670:	f000 fd90 	bl	8001194 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067e:	2340      	movs	r3, #64	; 0x40
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800068a:	2304      	movs	r3, #4
 800068c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800068e:	2355      	movs	r3, #85	; 0x55
 8000690:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fe1a 	bl	80012dc <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006ae:	f000 f8ff 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2303      	movs	r3, #3
 80006b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2104      	movs	r1, #4
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 f91e 	bl	800190c <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006d6:	f000 f8eb 	bl	80008b0 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2224      	movs	r2, #36	; 0x24
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fe16 	bl	8003324 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f8:	463b      	mov	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <MX_TIM1_Init+0xac>)
 8000704:	4a23      	ldr	r2, [pc, #140]	; (8000794 <MX_TIM1_Init+0xb0>)
 8000706:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <MX_TIM1_Init+0xac>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <MX_TIM1_Init+0xac>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <MX_TIM1_Init+0xac>)
 8000716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800071a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_TIM1_Init+0xac>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_TIM1_Init+0xac>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_TIM1_Init+0xac>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800072e:	2303      	movs	r3, #3
 8000730:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000736:	2301      	movs	r3, #1
 8000738:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000742:	2300      	movs	r3, #0
 8000744:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000746:	2301      	movs	r3, #1
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	480d      	ldr	r0, [pc, #52]	; (8000790 <MX_TIM1_Init+0xac>)
 800075a:	f001 fce3 	bl	8002124 <HAL_TIM_Encoder_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000764:	f000 f8a4 	bl	80008b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000774:	463b      	mov	r3, r7
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_TIM1_Init+0xac>)
 800077a:	f001 febd 	bl	80024f8 <HAL_TIMEx_MasterConfigSynchronization>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000784:	f000 f894 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	3730      	adds	r7, #48	; 0x30
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000008c 	.word	0x2000008c
 8000794:	40012c00 	.word	0x40012c00

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <MX_USART2_UART_Init+0x90>)
 800079e:	4a23      	ldr	r2, [pc, #140]	; (800082c <MX_USART2_UART_Init+0x94>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e0:	4811      	ldr	r0, [pc, #68]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007e2:	f001 ff0b 	bl	80025fc <HAL_UART_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007ec:	f000 f860 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f0:	2100      	movs	r1, #0
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007f4:	f002 fca2 	bl	800313c <HAL_UARTEx_SetTxFifoThreshold>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007fe:	f000 f857 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000802:	2100      	movs	r1, #0
 8000804:	4808      	ldr	r0, [pc, #32]	; (8000828 <MX_USART2_UART_Init+0x90>)
 8000806:	f002 fcd7 	bl	80031b8 <HAL_UARTEx_SetRxFifoThreshold>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000810:	f000 f84e 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_USART2_UART_Init+0x90>)
 8000816:	f002 fc58 	bl	80030ca <HAL_UARTEx_DisableFifoMode>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000820:	f000 f846 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000d8 	.word	0x200000d8
 800082c:	40004400 	.word	0x40004400

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_GPIO_Init+0x78>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <MX_GPIO_Init+0x78>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_GPIO_Init+0x78>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_GPIO_Init+0x78>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <MX_GPIO_Init+0x78>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_GPIO_Init+0x78>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087c:	480b      	ldr	r0, [pc, #44]	; (80008ac <MX_GPIO_Init+0x7c>)
 800087e:	f000 fc71 	bl	8001164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_GPIO_Init+0x7c>)
 800089c:	f000 fae0 	bl	8000e60 <HAL_GPIO_Init>

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000
 80008ac:	48000400 	.word	0x48000400

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <Error_Handler+0x8>
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <HAL_MspInit+0x44>)
 80008c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c6:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <HAL_MspInit+0x44>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6613      	str	r3, [r2, #96]	; 0x60
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <HAL_MspInit+0x44>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_MspInit+0x44>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <HAL_MspInit+0x44>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e4:	6593      	str	r3, [r2, #88]	; 0x58
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_MspInit+0x44>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a18      	ldr	r2, [pc, #96]	; (8000984 <HAL_TIM_Encoder_MspInit+0x80>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d129      	bne.n	800097a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_TIM_Encoder_MspInit+0x84>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	4a17      	ldr	r2, [pc, #92]	; (8000988 <HAL_TIM_Encoder_MspInit+0x84>)
 800092c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000930:	6613      	str	r3, [r2, #96]	; 0x60
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_TIM_Encoder_MspInit+0x84>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_TIM_Encoder_MspInit+0x84>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4a11      	ldr	r2, [pc, #68]	; (8000988 <HAL_TIM_Encoder_MspInit+0x84>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_TIM_Encoder_MspInit+0x84>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000956:	f44f 7340 	mov.w	r3, #768	; 0x300
 800095a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000968:	2306      	movs	r3, #6
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000976:	f000 fa73 	bl	8000e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40012c00 	.word	0x40012c00
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b09a      	sub	sp, #104	; 0x68
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	2244      	movs	r2, #68	; 0x44
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f002 fcb9 	bl	8003324 <memset>
  if(huart->Instance==USART2)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a1f      	ldr	r2, [pc, #124]	; (8000a34 <HAL_UART_MspInit+0xa8>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d136      	bne.n	8000a2a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009bc:	2302      	movs	r3, #2
 80009be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 f9bb 	bl	8001d44 <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009d4:	f7ff ff6c 	bl	80008b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <HAL_UART_MspInit+0xac>)
 80009da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009dc:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <HAL_UART_MspInit+0xac>)
 80009de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e2:	6593      	str	r3, [r2, #88]	; 0x58
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <HAL_UART_MspInit+0xac>)
 80009e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_UART_MspInit+0xac>)
 80009f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f4:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <HAL_UART_MspInit+0xac>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fc:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_UART_MspInit+0xac>)
 80009fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a08:	230c      	movs	r3, #12
 8000a0a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a18:	2307      	movs	r3, #7
 8000a1a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a20:	4619      	mov	r1, r3
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a26:	f000 fa1b 	bl	8000e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3768      	adds	r7, #104	; 0x68
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40004400 	.word	0x40004400
 8000a38:	40021000 	.word	0x40021000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f8c6 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a98:	4a14      	ldr	r2, [pc, #80]	; (8000aec <_sbrk+0x5c>)
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <_sbrk+0x60>)
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d102      	bne.n	8000ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <_sbrk+0x64>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <_sbrk+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d207      	bcs.n	8000ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac0:	f002 fc06 	bl	80032d0 <__errno>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	e009      	b.n	8000ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <_sbrk+0x64>)
 8000ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20008000 	.word	0x20008000
 8000af0:	00000400 	.word	0x00000400
 8000af4:	20000168 	.word	0x20000168
 8000af8:	20000180 	.word	0x20000180

08000afc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <SystemInit+0x20>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <SystemInit+0x20>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b24:	480d      	ldr	r0, [pc, #52]	; (8000b5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b26:	490e      	ldr	r1, [pc, #56]	; (8000b60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b28:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <LoopForever+0xe>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b3c:	4c0b      	ldr	r4, [pc, #44]	; (8000b6c <LoopForever+0x16>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b4a:	f7ff ffd7 	bl	8000afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f002 fbc5 	bl	80032dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b52:	f7ff fd4b 	bl	80005ec <main>

08000b56 <LoopForever>:

LoopForever:
    b LoopForever
 8000b56:	e7fe      	b.n	8000b56 <LoopForever>
  ldr   r0, =_estack
 8000b58:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b64:	08003cd8 	.word	0x08003cd8
  ldr r2, =_sbss
 8000b68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b6c:	20000180 	.word	0x20000180

08000b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC1_2_IRQHandler>

08000b72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f93d 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 f80e 	bl	8000ba4 <HAL_InitTick>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d002      	beq.n	8000b94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	e001      	b.n	8000b98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b94:	f7ff fe92 	bl	80008bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b98:	79fb      	ldrb	r3, [r7, #7]

}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <HAL_InitTick+0x68>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d022      	beq.n	8000bfe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_InitTick+0x6c>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <HAL_InitTick+0x68>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f93a 	bl	8000e46 <HAL_SYSTICK_Config>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d10f      	bne.n	8000bf8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b0f      	cmp	r3, #15
 8000bdc:	d809      	bhi.n	8000bf2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bde:	2200      	movs	r2, #0
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	f04f 30ff 	mov.w	r0, #4294967295
 8000be6:	f000 f914 	bl	8000e12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <HAL_InitTick+0x70>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	e007      	b.n	8000c02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	73fb      	strb	r3, [r7, #15]
 8000bf6:	e004      	b.n	8000c02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e001      	b.n	8000c02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000000 	.word	0x20000000
 8000c14:	20000004 	.word	0x20000004

08000c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x1c>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_IncTick+0x20>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <HAL_IncTick+0x1c>)
 8000c28:	6013      	str	r3, [r2, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	2000016c 	.word	0x2000016c
 8000c38:	20000008 	.word	0x20000008

08000c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	2000016c 	.word	0x2000016c

08000c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	f7ff ffee 	bl	8000c3c <HAL_GetTick>
 8000c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c6c:	d004      	beq.n	8000c78 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_Delay+0x40>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	4413      	add	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c78:	bf00      	nop
 8000c7a:	f7ff ffdf 	bl	8000c3c <HAL_GetTick>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d8f7      	bhi.n	8000c7a <HAL_Delay+0x26>
  {
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000008 	.word	0x20000008

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc8:	d301      	bcc.n	8000dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <SysTick_Config+0x40>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f7ff ff8e 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SysTick_Config+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SysTick_Config+0x40>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff47 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff5e 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff90 	bl	8000d50 <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5f 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ffb2 	bl	8000db8 <SysTick_Config>
 8000e54:	4603      	mov	r3, r0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e6e:	e15a      	b.n	8001126 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	2101      	movs	r1, #1
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 814c 	beq.w	8001120 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d005      	beq.n	8000ea0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d130      	bne.n	8000f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	091b      	lsrs	r3, r3, #4
 8000eec:	f003 0201 	and.w	r2, r3, #1
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d017      	beq.n	8000f3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d123      	bne.n	8000f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	691a      	ldr	r2, [r3, #16]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	6939      	ldr	r1, [r7, #16]
 8000f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0203 	and.w	r2, r3, #3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 80a6 	beq.w	8001120 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd4:	4b5b      	ldr	r3, [pc, #364]	; (8001144 <HAL_GPIO_Init+0x2e4>)
 8000fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd8:	4a5a      	ldr	r2, [pc, #360]	; (8001144 <HAL_GPIO_Init+0x2e4>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe0:	4b58      	ldr	r3, [pc, #352]	; (8001144 <HAL_GPIO_Init+0x2e4>)
 8000fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fec:	4a56      	ldr	r2, [pc, #344]	; (8001148 <HAL_GPIO_Init+0x2e8>)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001016:	d01f      	beq.n	8001058 <HAL_GPIO_Init+0x1f8>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a4c      	ldr	r2, [pc, #304]	; (800114c <HAL_GPIO_Init+0x2ec>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d019      	beq.n	8001054 <HAL_GPIO_Init+0x1f4>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a4b      	ldr	r2, [pc, #300]	; (8001150 <HAL_GPIO_Init+0x2f0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d013      	beq.n	8001050 <HAL_GPIO_Init+0x1f0>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a4a      	ldr	r2, [pc, #296]	; (8001154 <HAL_GPIO_Init+0x2f4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d00d      	beq.n	800104c <HAL_GPIO_Init+0x1ec>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a49      	ldr	r2, [pc, #292]	; (8001158 <HAL_GPIO_Init+0x2f8>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d007      	beq.n	8001048 <HAL_GPIO_Init+0x1e8>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a48      	ldr	r2, [pc, #288]	; (800115c <HAL_GPIO_Init+0x2fc>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d101      	bne.n	8001044 <HAL_GPIO_Init+0x1e4>
 8001040:	2305      	movs	r3, #5
 8001042:	e00a      	b.n	800105a <HAL_GPIO_Init+0x1fa>
 8001044:	2306      	movs	r3, #6
 8001046:	e008      	b.n	800105a <HAL_GPIO_Init+0x1fa>
 8001048:	2304      	movs	r3, #4
 800104a:	e006      	b.n	800105a <HAL_GPIO_Init+0x1fa>
 800104c:	2303      	movs	r3, #3
 800104e:	e004      	b.n	800105a <HAL_GPIO_Init+0x1fa>
 8001050:	2302      	movs	r3, #2
 8001052:	e002      	b.n	800105a <HAL_GPIO_Init+0x1fa>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <HAL_GPIO_Init+0x1fa>
 8001058:	2300      	movs	r3, #0
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	f002 0203 	and.w	r2, r2, #3
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	4093      	lsls	r3, r2
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800106a:	4937      	ldr	r1, [pc, #220]	; (8001148 <HAL_GPIO_Init+0x2e8>)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001078:	4b39      	ldr	r3, [pc, #228]	; (8001160 <HAL_GPIO_Init+0x300>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800109c:	4a30      	ldr	r2, [pc, #192]	; (8001160 <HAL_GPIO_Init+0x300>)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010a2:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <HAL_GPIO_Init+0x300>)
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010c6:	4a26      	ldr	r2, [pc, #152]	; (8001160 <HAL_GPIO_Init+0x300>)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010cc:	4b24      	ldr	r3, [pc, #144]	; (8001160 <HAL_GPIO_Init+0x300>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010f0:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <HAL_GPIO_Init+0x300>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <HAL_GPIO_Init+0x300>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800111a:	4a11      	ldr	r2, [pc, #68]	; (8001160 <HAL_GPIO_Init+0x300>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa22 f303 	lsr.w	r3, r2, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	f47f ae9d 	bne.w	8000e70 <HAL_GPIO_Init+0x10>
  }
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40021000 	.word	0x40021000
 8001148:	40010000 	.word	0x40010000
 800114c:	48000400 	.word	0x48000400
 8001150:	48000800 	.word	0x48000800
 8001154:	48000c00 	.word	0x48000c00
 8001158:	48001000 	.word	0x48001000
 800115c:	48001400 	.word	0x48001400
 8001160:	40010400 	.word	0x40010400

08001164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]
 8001170:	4613      	mov	r3, r2
 8001172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001174:	787b      	ldrb	r3, [r7, #1]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001180:	e002      	b.n	8001188 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d141      	bne.n	8001226 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011a2:	4b4b      	ldr	r3, [pc, #300]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ae:	d131      	bne.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011b0:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011b6:	4a46      	ldr	r2, [pc, #280]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c0:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011c8:	4a41      	ldr	r2, [pc, #260]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011d0:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2232      	movs	r2, #50	; 0x32
 80011d6:	fb02 f303 	mul.w	r3, r2, r3
 80011da:	4a3f      	ldr	r2, [pc, #252]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	0c9b      	lsrs	r3, r3, #18
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e6:	e002      	b.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011ee:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fa:	d102      	bne.n	8001202 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f2      	bne.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001202:	4b33      	ldr	r3, [pc, #204]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800120e:	d158      	bne.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e057      	b.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001214:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800121a:	4a2d      	ldr	r2, [pc, #180]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001220:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001224:	e04d      	b.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800122c:	d141      	bne.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800122e:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123a:	d131      	bne.n	80012a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001242:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001254:	4a1e      	ldr	r2, [pc, #120]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2232      	movs	r2, #50	; 0x32
 8001262:	fb02 f303 	mul.w	r3, r2, r3
 8001266:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001268:	fba2 2303 	umull	r2, r3, r2, r3
 800126c:	0c9b      	lsrs	r3, r3, #18
 800126e:	3301      	adds	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001272:	e002      	b.n	800127a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3b01      	subs	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001286:	d102      	bne.n	800128e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f2      	bne.n	8001274 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129a:	d112      	bne.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e011      	b.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012b0:	e007      	b.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40007000 	.word	0x40007000
 80012d4:	20000000 	.word	0x20000000
 80012d8:	431bde83 	.word	0x431bde83

080012dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e306      	b.n	80018fc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d075      	beq.n	80013e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012fa:	4b97      	ldr	r3, [pc, #604]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001304:	4b94      	ldr	r3, [pc, #592]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	2b0c      	cmp	r3, #12
 8001312:	d102      	bne.n	800131a <HAL_RCC_OscConfig+0x3e>
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2b03      	cmp	r3, #3
 8001318:	d002      	beq.n	8001320 <HAL_RCC_OscConfig+0x44>
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	2b08      	cmp	r3, #8
 800131e:	d10b      	bne.n	8001338 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001320:	4b8d      	ldr	r3, [pc, #564]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d05b      	beq.n	80013e4 <HAL_RCC_OscConfig+0x108>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d157      	bne.n	80013e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e2e1      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001340:	d106      	bne.n	8001350 <HAL_RCC_OscConfig+0x74>
 8001342:	4b85      	ldr	r3, [pc, #532]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a84      	ldr	r2, [pc, #528]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e01d      	b.n	800138c <HAL_RCC_OscConfig+0xb0>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0x98>
 800135a:	4b7f      	ldr	r3, [pc, #508]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a7e      	ldr	r2, [pc, #504]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 8001360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b7c      	ldr	r3, [pc, #496]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a7b      	ldr	r2, [pc, #492]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 800136c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	e00b      	b.n	800138c <HAL_RCC_OscConfig+0xb0>
 8001374:	4b78      	ldr	r3, [pc, #480]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a77      	ldr	r2, [pc, #476]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 800137a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b75      	ldr	r3, [pc, #468]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a74      	ldr	r2, [pc, #464]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 8001386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d013      	beq.n	80013bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fc52 	bl	8000c3c <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800139c:	f7ff fc4e 	bl	8000c3c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b64      	cmp	r3, #100	; 0x64
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e2a6      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ae:	4b6a      	ldr	r3, [pc, #424]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0xc0>
 80013ba:	e014      	b.n	80013e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff fc3e 	bl	8000c3c <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fc3a 	bl	8000c3c <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e292      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013d6:	4b60      	ldr	r3, [pc, #384]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0xe8>
 80013e2:	e000      	b.n	80013e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d075      	beq.n	80014de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f2:	4b59      	ldr	r3, [pc, #356]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013fc:	4b56      	ldr	r3, [pc, #344]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	2b0c      	cmp	r3, #12
 800140a:	d102      	bne.n	8001412 <HAL_RCC_OscConfig+0x136>
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d002      	beq.n	8001418 <HAL_RCC_OscConfig+0x13c>
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b04      	cmp	r3, #4
 8001416:	d11f      	bne.n	8001458 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001418:	4b4f      	ldr	r3, [pc, #316]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <HAL_RCC_OscConfig+0x154>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e265      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001430:	4b49      	ldr	r3, [pc, #292]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	061b      	lsls	r3, r3, #24
 800143e:	4946      	ldr	r1, [pc, #280]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 8001440:	4313      	orrs	r3, r2
 8001442:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001444:	4b45      	ldr	r3, [pc, #276]	; (800155c <HAL_RCC_OscConfig+0x280>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fbab 	bl	8000ba4 <HAL_InitTick>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d043      	beq.n	80014dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e251      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d023      	beq.n	80014a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001460:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a3c      	ldr	r2, [pc, #240]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 8001466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fbe6 	bl	8000c3c <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001474:	f7ff fbe2 	bl	8000c3c <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e23a      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001486:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	061b      	lsls	r3, r3, #24
 80014a0:	492d      	ldr	r1, [pc, #180]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]
 80014a6:	e01a      	b.n	80014de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a2a      	ldr	r2, [pc, #168]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 80014ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff fbc2 	bl	8000c3c <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014bc:	f7ff fbbe 	bl	8000c3c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e216      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x1e0>
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d041      	beq.n	800156e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d01c      	beq.n	800152c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 80014f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f8:	4a17      	ldr	r2, [pc, #92]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001502:	f7ff fb9b 	bl	8000c3c <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150a:	f7ff fb97 	bl	8000c3c <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e1ef      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 800151e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0ef      	beq.n	800150a <HAL_RCC_OscConfig+0x22e>
 800152a:	e020      	b.n	800156e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 800152e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_RCC_OscConfig+0x27c>)
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153c:	f7ff fb7e 	bl	8000c3c <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001542:	e00d      	b.n	8001560 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fb7a 	bl	8000c3c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d906      	bls.n	8001560 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e1d2      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001560:	4b8c      	ldr	r3, [pc, #560]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 8001562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1ea      	bne.n	8001544 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80a6 	beq.w	80016c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157c:	2300      	movs	r3, #0
 800157e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001580:	4b84      	ldr	r3, [pc, #528]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 8001582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_OscConfig+0x2b4>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x2b6>
 8001590:	2300      	movs	r3, #0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00d      	beq.n	80015b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b7f      	ldr	r3, [pc, #508]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	4a7e      	ldr	r2, [pc, #504]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6593      	str	r3, [r2, #88]	; 0x58
 80015a2:	4b7c      	ldr	r3, [pc, #496]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015ae:	2301      	movs	r3, #1
 80015b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b2:	4b79      	ldr	r3, [pc, #484]	; (8001798 <HAL_RCC_OscConfig+0x4bc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d118      	bne.n	80015f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015be:	4b76      	ldr	r3, [pc, #472]	; (8001798 <HAL_RCC_OscConfig+0x4bc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a75      	ldr	r2, [pc, #468]	; (8001798 <HAL_RCC_OscConfig+0x4bc>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fb37 	bl	8000c3c <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d2:	f7ff fb33 	bl	8000c3c <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e18b      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e4:	4b6c      	ldr	r3, [pc, #432]	; (8001798 <HAL_RCC_OscConfig+0x4bc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d108      	bne.n	800160a <HAL_RCC_OscConfig+0x32e>
 80015f8:	4b66      	ldr	r3, [pc, #408]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 80015fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015fe:	4a65      	ldr	r2, [pc, #404]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001608:	e024      	b.n	8001654 <HAL_RCC_OscConfig+0x378>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d110      	bne.n	8001634 <HAL_RCC_OscConfig+0x358>
 8001612:	4b60      	ldr	r3, [pc, #384]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 8001614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001618:	4a5e      	ldr	r2, [pc, #376]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001622:	4b5c      	ldr	r3, [pc, #368]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 8001624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001628:	4a5a      	ldr	r2, [pc, #360]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001632:	e00f      	b.n	8001654 <HAL_RCC_OscConfig+0x378>
 8001634:	4b57      	ldr	r3, [pc, #348]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 8001636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163a:	4a56      	ldr	r2, [pc, #344]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001644:	4b53      	ldr	r3, [pc, #332]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 8001646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164a:	4a52      	ldr	r2, [pc, #328]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 800164c:	f023 0304 	bic.w	r3, r3, #4
 8001650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d016      	beq.n	800168a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165c:	f7ff faee 	bl	8000c3c <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001662:	e00a      	b.n	800167a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001664:	f7ff faea 	bl	8000c3c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e140      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800167a:	4b46      	ldr	r3, [pc, #280]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 800167c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0ed      	beq.n	8001664 <HAL_RCC_OscConfig+0x388>
 8001688:	e015      	b.n	80016b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168a:	f7ff fad7 	bl	8000c3c <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001690:	e00a      	b.n	80016a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f7ff fad3 	bl	8000c3c <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e129      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016a8:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1ed      	bne.n	8001692 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016b6:	7ffb      	ldrb	r3, [r7, #31]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d105      	bne.n	80016c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016bc:	4b35      	ldr	r3, [pc, #212]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c0:	4a34      	ldr	r2, [pc, #208]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 80016c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0320 	and.w	r3, r3, #32
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d03c      	beq.n	800174e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01c      	beq.n	8001716 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016dc:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 80016de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016e2:	4a2c      	ldr	r2, [pc, #176]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ec:	f7ff faa6 	bl	8000c3c <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016f4:	f7ff faa2 	bl	8000c3c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e0fa      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001706:	4b23      	ldr	r3, [pc, #140]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 8001708:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0ef      	beq.n	80016f4 <HAL_RCC_OscConfig+0x418>
 8001714:	e01b      	b.n	800174e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001716:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 8001718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800171c:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001726:	f7ff fa89 	bl	8000c3c <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800172e:	f7ff fa85 	bl	8000c3c <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e0dd      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 8001742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1ef      	bne.n	800172e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 80d1 	beq.w	80018fa <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b0c      	cmp	r3, #12
 8001762:	f000 808b 	beq.w	800187c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d15e      	bne.n	800182c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HAL_RCC_OscConfig+0x4b8>)
 8001774:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177a:	f7ff fa5f 	bl	8000c3c <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001780:	e00c      	b.n	800179c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001782:	f7ff fa5b 	bl	8000c3c <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d905      	bls.n	800179c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e0b3      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
 8001794:	40021000 	.word	0x40021000
 8001798:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179c:	4b59      	ldr	r3, [pc, #356]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ec      	bne.n	8001782 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a8:	4b56      	ldr	r3, [pc, #344]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	4b56      	ldr	r3, [pc, #344]	; (8001908 <HAL_RCC_OscConfig+0x62c>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6a11      	ldr	r1, [r2, #32]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017b8:	3a01      	subs	r2, #1
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	4311      	orrs	r1, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80017c2:	0212      	lsls	r2, r2, #8
 80017c4:	4311      	orrs	r1, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017ca:	0852      	lsrs	r2, r2, #1
 80017cc:	3a01      	subs	r2, #1
 80017ce:	0552      	lsls	r2, r2, #21
 80017d0:	4311      	orrs	r1, r2
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017d6:	0852      	lsrs	r2, r2, #1
 80017d8:	3a01      	subs	r2, #1
 80017da:	0652      	lsls	r2, r2, #25
 80017dc:	4311      	orrs	r1, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017e2:	06d2      	lsls	r2, r2, #27
 80017e4:	430a      	orrs	r2, r1
 80017e6:	4947      	ldr	r1, [pc, #284]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ec:	4b45      	ldr	r3, [pc, #276]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a44      	ldr	r2, [pc, #272]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 80017f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017f8:	4b42      	ldr	r3, [pc, #264]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4a41      	ldr	r2, [pc, #260]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 80017fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001802:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7ff fa1a 	bl	8000c3c <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff fa16 	bl	8000c3c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e06e      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800181e:	4b39      	ldr	r3, [pc, #228]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0x530>
 800182a:	e066      	b.n	80018fa <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182c:	4b35      	ldr	r3, [pc, #212]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a34      	ldr	r2, [pc, #208]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 8001832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001836:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001838:	4b32      	ldr	r3, [pc, #200]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	4a31      	ldr	r2, [pc, #196]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 800183e:	f023 0303 	bic.w	r3, r3, #3
 8001842:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001844:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4a2e      	ldr	r2, [pc, #184]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 800184a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800184e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001852:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff f9f2 	bl	8000c3c <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff f9ee 	bl	8000c3c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e046      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186e:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x580>
 800187a:	e03e      	b.n	80018fa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e039      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <HAL_RCC_OscConfig+0x628>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f003 0203 	and.w	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	429a      	cmp	r2, r3
 800189a:	d12c      	bne.n	80018f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	3b01      	subs	r3, #1
 80018a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d123      	bne.n	80018f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d11b      	bne.n	80018f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d113      	bne.n	80018f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	085b      	lsrs	r3, r3, #1
 80018da:	3b01      	subs	r3, #1
 80018dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d109      	bne.n	80018f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ec:	085b      	lsrs	r3, r3, #1
 80018ee:	3b01      	subs	r3, #1
 80018f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d001      	beq.n	80018fa <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40021000 	.word	0x40021000
 8001908:	019f800c 	.word	0x019f800c

0800190c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e11e      	b.n	8001b62 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b91      	ldr	r3, [pc, #580]	; (8001b6c <HAL_RCC_ClockConfig+0x260>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d910      	bls.n	8001954 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b8e      	ldr	r3, [pc, #568]	; (8001b6c <HAL_RCC_ClockConfig+0x260>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 020f 	bic.w	r2, r3, #15
 800193a:	498c      	ldr	r1, [pc, #560]	; (8001b6c <HAL_RCC_ClockConfig+0x260>)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b8a      	ldr	r3, [pc, #552]	; (8001b6c <HAL_RCC_ClockConfig+0x260>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e106      	b.n	8001b62 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d073      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d129      	bne.n	80019bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001968:	4b81      	ldr	r3, [pc, #516]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0f4      	b.n	8001b62 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001978:	f000 f99e 	bl	8001cb8 <RCC_GetSysClockFreqFromPLLSource>
 800197c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4a7c      	ldr	r2, [pc, #496]	; (8001b74 <HAL_RCC_ClockConfig+0x268>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d93f      	bls.n	8001a06 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001986:	4b7a      	ldr	r3, [pc, #488]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800199a:	2b00      	cmp	r3, #0
 800199c:	d033      	beq.n	8001a06 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d12f      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019a6:	4b72      	ldr	r3, [pc, #456]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ae:	4a70      	ldr	r2, [pc, #448]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 80019b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e024      	b.n	8001a06 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c4:	4b6a      	ldr	r3, [pc, #424]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d109      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0c6      	b.n	8001b62 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d4:	4b66      	ldr	r3, [pc, #408]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0be      	b.n	8001b62 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80019e4:	f000 f8ce 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4a61      	ldr	r2, [pc, #388]	; (8001b74 <HAL_RCC_ClockConfig+0x268>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d909      	bls.n	8001a06 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019f2:	4b5f      	ldr	r3, [pc, #380]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019fa:	4a5d      	ldr	r2, [pc, #372]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 80019fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a00:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a06:	4b5a      	ldr	r3, [pc, #360]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f023 0203 	bic.w	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4957      	ldr	r1, [pc, #348]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a18:	f7ff f910 	bl	8000c3c <HAL_GetTick>
 8001a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a20:	f7ff f90c 	bl	8000c3c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e095      	b.n	8001b62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	4b4e      	ldr	r3, [pc, #312]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 020c 	and.w	r2, r3, #12
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d1eb      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d023      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a60:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4a42      	ldr	r2, [pc, #264]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001a66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a6a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d007      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a78:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001a80:	4a3b      	ldr	r2, [pc, #236]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001a82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4936      	ldr	r1, [pc, #216]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2b80      	cmp	r3, #128	; 0x80
 8001aa0:	d105      	bne.n	8001aae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001aa2:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	4a32      	ldr	r2, [pc, #200]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001aa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aae:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <HAL_RCC_ClockConfig+0x260>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d21d      	bcs.n	8001af8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abc:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <HAL_RCC_ClockConfig+0x260>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 020f 	bic.w	r2, r3, #15
 8001ac4:	4929      	ldr	r1, [pc, #164]	; (8001b6c <HAL_RCC_ClockConfig+0x260>)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001acc:	f7ff f8b6 	bl	8000c3c <HAL_GetTick>
 8001ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad4:	f7ff f8b2 	bl	8000c3c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e03b      	b.n	8001b62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <HAL_RCC_ClockConfig+0x260>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d1ed      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4917      	ldr	r1, [pc, #92]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	490f      	ldr	r1, [pc, #60]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b36:	f000 f825 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_RCC_ClockConfig+0x264>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	490c      	ldr	r1, [pc, #48]	; (8001b78 <HAL_RCC_ClockConfig+0x26c>)
 8001b48:	5ccb      	ldrb	r3, [r1, r3]
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <HAL_RCC_ClockConfig+0x270>)
 8001b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_RCC_ClockConfig+0x274>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f822 	bl	8000ba4 <HAL_InitTick>
 8001b60:	4603      	mov	r3, r0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40022000 	.word	0x40022000
 8001b70:	40021000 	.word	0x40021000
 8001b74:	04c4b400 	.word	0x04c4b400
 8001b78:	08003c54 	.word	0x08003c54
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000004 	.word	0x20000004

08001b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b8a:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d102      	bne.n	8001b9c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b96:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	e047      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d102      	bne.n	8001bae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ba8:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	e03e      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bae:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d136      	bne.n	8001c28 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3301      	adds	r3, #1
 8001bd0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d10c      	bne.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bd8:	4a1a      	ldr	r2, [pc, #104]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be0:	4a16      	ldr	r2, [pc, #88]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be2:	68d2      	ldr	r2, [r2, #12]
 8001be4:	0a12      	lsrs	r2, r2, #8
 8001be6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
      break;
 8001bf0:	e00c      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bf2:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	4a10      	ldr	r2, [pc, #64]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bfc:	68d2      	ldr	r2, [r2, #12]
 8001bfe:	0a12      	lsrs	r2, r2, #8
 8001c00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c04:	fb02 f303 	mul.w	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
      break;
 8001c0a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0e5b      	lsrs	r3, r3, #25
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	3301      	adds	r3, #1
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	e001      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c2c:	693b      	ldr	r3, [r7, #16]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	00f42400 	.word	0x00f42400
 8001c44:	007a1200 	.word	0x007a1200

08001c48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000000 	.word	0x20000000

08001c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c64:	f7ff fff0 	bl	8001c48 <HAL_RCC_GetHCLKFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4904      	ldr	r1, [pc, #16]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08003c64 	.word	0x08003c64

08001c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c90:	f7ff ffda 	bl	8001c48 <HAL_RCC_GetHCLKFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0adb      	lsrs	r3, r3, #11
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4904      	ldr	r1, [pc, #16]	; (8001cb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	08003c64 	.word	0x08003c64

08001cb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d10c      	bne.n	8001cf6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cdc:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ce6:	68d2      	ldr	r2, [r2, #12]
 8001ce8:	0a12      	lsrs	r2, r2, #8
 8001cea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	617b      	str	r3, [r7, #20]
    break;
 8001cf4:	e00c      	b.n	8001d10 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cf6:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d00:	68d2      	ldr	r2, [r2, #12]
 8001d02:	0a12      	lsrs	r2, r2, #8
 8001d04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d08:	fb02 f303 	mul.w	r3, r2, r3
 8001d0c:	617b      	str	r3, [r7, #20]
    break;
 8001d0e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0e5b      	lsrs	r3, r3, #25
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d2a:	687b      	ldr	r3, [r7, #4]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	007a1200 	.word	0x007a1200
 8001d40:	00f42400 	.word	0x00f42400

08001d44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d50:	2300      	movs	r3, #0
 8001d52:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 8098 	beq.w	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d66:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10d      	bne.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	4b40      	ldr	r3, [pc, #256]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	4a3f      	ldr	r2, [pc, #252]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d8e:	4b3a      	ldr	r3, [pc, #232]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a39      	ldr	r2, [pc, #228]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d9a:	f7fe ff4f 	bl	8000c3c <HAL_GetTick>
 8001d9e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001da0:	e009      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7fe ff4b 	bl	8000c3c <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d902      	bls.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	74fb      	strb	r3, [r7, #19]
        break;
 8001db4:	e005      	b.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001db6:	4b30      	ldr	r3, [pc, #192]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0ef      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001dc2:	7cfb      	ldrb	r3, [r7, #19]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d159      	bne.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d01e      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d019      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001de4:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001df0:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df6:	4a1f      	ldr	r2, [pc, #124]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e00:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e06:	4a1b      	ldr	r2, [pc, #108]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e10:	4a18      	ldr	r2, [pc, #96]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d016      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7fe ff0b 	bl	8000c3c <HAL_GetTick>
 8001e26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e28:	e00b      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7fe ff07 	bl	8000c3c <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d902      	bls.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	74fb      	strb	r3, [r7, #19]
            break;
 8001e40:	e006      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ec      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e50:	7cfb      	ldrb	r3, [r7, #19]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10b      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	4903      	ldr	r1, [pc, #12]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e6c:	e008      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e6e:	7cfb      	ldrb	r3, [r7, #19]
 8001e70:	74bb      	strb	r3, [r7, #18]
 8001e72:	e005      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e7c:	7cfb      	ldrb	r3, [r7, #19]
 8001e7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e80:	7c7b      	ldrb	r3, [r7, #17]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d105      	bne.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e86:	4ba6      	ldr	r3, [pc, #664]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	4aa5      	ldr	r2, [pc, #660]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e9e:	4ba0      	ldr	r3, [pc, #640]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea4:	f023 0203 	bic.w	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	499c      	ldr	r1, [pc, #624]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ec0:	4b97      	ldr	r3, [pc, #604]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec6:	f023 020c 	bic.w	r2, r3, #12
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	4994      	ldr	r1, [pc, #592]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ee2:	4b8f      	ldr	r3, [pc, #572]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	498b      	ldr	r1, [pc, #556]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00a      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f04:	4b86      	ldr	r3, [pc, #536]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	4983      	ldr	r1, [pc, #524]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f26:	4b7e      	ldr	r3, [pc, #504]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	497a      	ldr	r1, [pc, #488]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f48:	4b75      	ldr	r3, [pc, #468]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	4972      	ldr	r1, [pc, #456]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f6a:	4b6d      	ldr	r3, [pc, #436]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	4969      	ldr	r1, [pc, #420]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f8c:	4b64      	ldr	r3, [pc, #400]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4961      	ldr	r1, [pc, #388]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fae:	4b5c      	ldr	r3, [pc, #368]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	4958      	ldr	r1, [pc, #352]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d015      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fd0:	4b53      	ldr	r3, [pc, #332]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	4950      	ldr	r1, [pc, #320]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fee:	d105      	bne.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ff0:	4b4b      	ldr	r3, [pc, #300]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a4a      	ldr	r2, [pc, #296]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ffa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002004:	2b00      	cmp	r3, #0
 8002006:	d015      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002008:	4b45      	ldr	r3, [pc, #276]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	4942      	ldr	r1, [pc, #264]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002018:	4313      	orrs	r3, r2
 800201a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002026:	d105      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002028:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4a3c      	ldr	r2, [pc, #240]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800202e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002032:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d015      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002040:	4b37      	ldr	r3, [pc, #220]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4934      	ldr	r1, [pc, #208]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800205e:	d105      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002060:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4a2e      	ldr	r2, [pc, #184]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800206a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d015      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002078:	4b29      	ldr	r3, [pc, #164]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002086:	4926      	ldr	r1, [pc, #152]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002092:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002096:	d105      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002098:	4b21      	ldr	r3, [pc, #132]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4a20      	ldr	r2, [pc, #128]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d015      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	4918      	ldr	r1, [pc, #96]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020ce:	d105      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a12      	ldr	r2, [pc, #72]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d015      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f6:	490a      	ldr	r1, [pc, #40]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002106:	d105      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a04      	ldr	r2, [pc, #16]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002112:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002114:	7cbb      	ldrb	r3, [r7, #18]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000

08002124 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e097      	b.n	8002268 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d106      	bne.n	8002152 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7fe fbd9 	bl	8000904 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2202      	movs	r2, #2
 8002156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002168:	f023 0307 	bic.w	r3, r3, #7
 800216c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3304      	adds	r3, #4
 8002176:	4619      	mov	r1, r3
 8002178:	4610      	mov	r0, r2
 800217a:	f000 f907 	bl	800238c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4313      	orrs	r3, r2
 800219e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	4313      	orrs	r3, r2
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80021c4:	f023 030c 	bic.w	r3, r3, #12
 80021c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	4313      	orrs	r3, r2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	011a      	lsls	r2, r3, #4
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	031b      	lsls	r3, r3, #12
 80021f4:	4313      	orrs	r3, r2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002202:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800220a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	4313      	orrs	r3, r2
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002280:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002288:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002290:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002298:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d110      	bne.n	80022c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d102      	bne.n	80022ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80022a6:	7b7b      	ldrb	r3, [r7, #13]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d001      	beq.n	80022b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e069      	b.n	8002384 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022c0:	e031      	b.n	8002326 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d110      	bne.n	80022ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80022c8:	7bbb      	ldrb	r3, [r7, #14]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d102      	bne.n	80022d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80022ce:	7b3b      	ldrb	r3, [r7, #12]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d001      	beq.n	80022d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e055      	b.n	8002384 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022e8:	e01d      	b.n	8002326 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d108      	bne.n	8002302 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80022f0:	7bbb      	ldrb	r3, [r7, #14]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d105      	bne.n	8002302 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80022f6:	7b7b      	ldrb	r3, [r7, #13]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d102      	bne.n	8002302 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80022fc:	7b3b      	ldrb	r3, [r7, #12]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d001      	beq.n	8002306 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e03e      	b.n	8002384 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2202      	movs	r2, #2
 8002312:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2202      	movs	r2, #2
 800231a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2202      	movs	r2, #2
 8002322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_TIM_Encoder_Start+0xc4>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b04      	cmp	r3, #4
 8002330:	d008      	beq.n	8002344 <HAL_TIM_Encoder_Start+0xd4>
 8002332:	e00f      	b.n	8002354 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2201      	movs	r2, #1
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f000 f8b5 	bl	80024ac <TIM_CCxChannelCmd>
      break;
 8002342:	e016      	b.n	8002372 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2201      	movs	r2, #1
 800234a:	2104      	movs	r1, #4
 800234c:	4618      	mov	r0, r3
 800234e:	f000 f8ad 	bl	80024ac <TIM_CCxChannelCmd>
      break;
 8002352:	e00e      	b.n	8002372 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2201      	movs	r2, #1
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f000 f8a5 	bl	80024ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2201      	movs	r2, #1
 8002368:	2104      	movs	r1, #4
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f89e 	bl	80024ac <TIM_CCxChannelCmd>
      break;
 8002370:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a3c      	ldr	r2, [pc, #240]	; (8002490 <TIM_Base_SetConfig+0x104>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00f      	beq.n	80023c4 <TIM_Base_SetConfig+0x38>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023aa:	d00b      	beq.n	80023c4 <TIM_Base_SetConfig+0x38>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a39      	ldr	r2, [pc, #228]	; (8002494 <TIM_Base_SetConfig+0x108>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d007      	beq.n	80023c4 <TIM_Base_SetConfig+0x38>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a38      	ldr	r2, [pc, #224]	; (8002498 <TIM_Base_SetConfig+0x10c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d003      	beq.n	80023c4 <TIM_Base_SetConfig+0x38>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a37      	ldr	r2, [pc, #220]	; (800249c <TIM_Base_SetConfig+0x110>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d108      	bne.n	80023d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a2d      	ldr	r2, [pc, #180]	; (8002490 <TIM_Base_SetConfig+0x104>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d01b      	beq.n	8002416 <TIM_Base_SetConfig+0x8a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e4:	d017      	beq.n	8002416 <TIM_Base_SetConfig+0x8a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a2a      	ldr	r2, [pc, #168]	; (8002494 <TIM_Base_SetConfig+0x108>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <TIM_Base_SetConfig+0x8a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a29      	ldr	r2, [pc, #164]	; (8002498 <TIM_Base_SetConfig+0x10c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00f      	beq.n	8002416 <TIM_Base_SetConfig+0x8a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a28      	ldr	r2, [pc, #160]	; (800249c <TIM_Base_SetConfig+0x110>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00b      	beq.n	8002416 <TIM_Base_SetConfig+0x8a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <TIM_Base_SetConfig+0x114>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <TIM_Base_SetConfig+0x8a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a26      	ldr	r2, [pc, #152]	; (80024a4 <TIM_Base_SetConfig+0x118>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d003      	beq.n	8002416 <TIM_Base_SetConfig+0x8a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a25      	ldr	r2, [pc, #148]	; (80024a8 <TIM_Base_SetConfig+0x11c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d108      	bne.n	8002428 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800241c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a10      	ldr	r2, [pc, #64]	; (8002490 <TIM_Base_SetConfig+0x104>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d00f      	beq.n	8002474 <TIM_Base_SetConfig+0xe8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a11      	ldr	r2, [pc, #68]	; (800249c <TIM_Base_SetConfig+0x110>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00b      	beq.n	8002474 <TIM_Base_SetConfig+0xe8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a10      	ldr	r2, [pc, #64]	; (80024a0 <TIM_Base_SetConfig+0x114>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d007      	beq.n	8002474 <TIM_Base_SetConfig+0xe8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <TIM_Base_SetConfig+0x118>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d003      	beq.n	8002474 <TIM_Base_SetConfig+0xe8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a0e      	ldr	r2, [pc, #56]	; (80024a8 <TIM_Base_SetConfig+0x11c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d103      	bne.n	800247c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	615a      	str	r2, [r3, #20]
}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40012c00 	.word	0x40012c00
 8002494:	40000400 	.word	0x40000400
 8002498:	40000800 	.word	0x40000800
 800249c:	40013400 	.word	0x40013400
 80024a0:	40014000 	.word	0x40014000
 80024a4:	40014400 	.word	0x40014400
 80024a8:	40014800 	.word	0x40014800

080024ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	2201      	movs	r2, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a1a      	ldr	r2, [r3, #32]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	401a      	ands	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a1a      	ldr	r2, [r3, #32]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	431a      	orrs	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	621a      	str	r2, [r3, #32]
}
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800250c:	2302      	movs	r3, #2
 800250e:	e065      	b.n	80025dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a2c      	ldr	r2, [pc, #176]	; (80025e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d004      	beq.n	8002544 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a2b      	ldr	r2, [pc, #172]	; (80025ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d108      	bne.n	8002556 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800254a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800255c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002560:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d018      	beq.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002586:	d013      	beq.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a18      	ldr	r2, [pc, #96]	; (80025f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00e      	beq.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d009      	beq.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a12      	ldr	r2, [pc, #72]	; (80025ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d004      	beq.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d10c      	bne.n	80025ca <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	40012c00 	.word	0x40012c00
 80025ec:	40013400 	.word	0x40013400
 80025f0:	40000400 	.word	0x40000400
 80025f4:	40000800 	.word	0x40000800
 80025f8:	40014000 	.word	0x40014000

080025fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e042      	b.n	8002694 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002614:	2b00      	cmp	r3, #0
 8002616:	d106      	bne.n	8002626 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7fe f9b3 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2224      	movs	r2, #36	; 0x24
 800262a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f8c2 	bl	80027c8 <UART_SetConfig>
 8002644:	4603      	mov	r3, r0
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e022      	b.n	8002694 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fb82 	bl	8002d60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800266a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800267a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fc09 	bl	8002ea4 <UART_CheckIdleState>
 8002692:	4603      	mov	r3, r0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	603b      	str	r3, [r7, #0]
 80026a8:	4613      	mov	r3, r2
 80026aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	f040 8083 	bne.w	80027be <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_UART_Transmit+0x28>
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e07b      	b.n	80027c0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_UART_Transmit+0x3a>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e074      	b.n	80027c0 <HAL_UART_Transmit+0x124>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2221      	movs	r2, #33	; 0x21
 80026ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ee:	f7fe faa5 	bl	8000c3c <HAL_GetTick>
 80026f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	88fa      	ldrh	r2, [r7, #6]
 80026f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	88fa      	ldrh	r2, [r7, #6]
 8002700:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270c:	d108      	bne.n	8002720 <HAL_UART_Transmit+0x84>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d104      	bne.n	8002720 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	e003      	b.n	8002728 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002730:	e02c      	b.n	800278c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2200      	movs	r2, #0
 800273a:	2180      	movs	r1, #128	; 0x80
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fbfc 	bl	8002f3a <UART_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e039      	b.n	80027c0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10b      	bne.n	800276a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002760:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	3302      	adds	r3, #2
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	e007      	b.n	800277a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	781a      	ldrb	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	3301      	adds	r3, #1
 8002778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002780:	b29b      	uxth	r3, r3
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1cc      	bne.n	8002732 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2200      	movs	r2, #0
 80027a0:	2140      	movs	r1, #64	; 0x40
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fbc9 	bl	8002f3a <UART_WaitOnFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e006      	b.n	80027c0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e000      	b.n	80027c0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80027be:	2302      	movs	r3, #2
  }
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027cc:	b08c      	sub	sp, #48	; 0x30
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	431a      	orrs	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	4bab      	ldr	r3, [pc, #684]	; (8002aa4 <UART_SetConfig+0x2dc>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002800:	430b      	orrs	r3, r1
 8002802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4aa0      	ldr	r2, [pc, #640]	; (8002aa8 <UART_SetConfig+0x2e0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d004      	beq.n	8002834 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002830:	4313      	orrs	r3, r2
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800283e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002848:	430b      	orrs	r3, r1
 800284a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	f023 010f 	bic.w	r1, r3, #15
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a91      	ldr	r2, [pc, #580]	; (8002aac <UART_SetConfig+0x2e4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d125      	bne.n	80028b8 <UART_SetConfig+0xf0>
 800286c:	4b90      	ldr	r3, [pc, #576]	; (8002ab0 <UART_SetConfig+0x2e8>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b03      	cmp	r3, #3
 8002878:	d81a      	bhi.n	80028b0 <UART_SetConfig+0xe8>
 800287a:	a201      	add	r2, pc, #4	; (adr r2, 8002880 <UART_SetConfig+0xb8>)
 800287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002880:	08002891 	.word	0x08002891
 8002884:	080028a1 	.word	0x080028a1
 8002888:	08002899 	.word	0x08002899
 800288c:	080028a9 	.word	0x080028a9
 8002890:	2301      	movs	r3, #1
 8002892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002896:	e0d6      	b.n	8002a46 <UART_SetConfig+0x27e>
 8002898:	2302      	movs	r3, #2
 800289a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800289e:	e0d2      	b.n	8002a46 <UART_SetConfig+0x27e>
 80028a0:	2304      	movs	r3, #4
 80028a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028a6:	e0ce      	b.n	8002a46 <UART_SetConfig+0x27e>
 80028a8:	2308      	movs	r3, #8
 80028aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028ae:	e0ca      	b.n	8002a46 <UART_SetConfig+0x27e>
 80028b0:	2310      	movs	r3, #16
 80028b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028b6:	e0c6      	b.n	8002a46 <UART_SetConfig+0x27e>
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a7d      	ldr	r2, [pc, #500]	; (8002ab4 <UART_SetConfig+0x2ec>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d138      	bne.n	8002934 <UART_SetConfig+0x16c>
 80028c2:	4b7b      	ldr	r3, [pc, #492]	; (8002ab0 <UART_SetConfig+0x2e8>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b0c      	cmp	r3, #12
 80028ce:	d82d      	bhi.n	800292c <UART_SetConfig+0x164>
 80028d0:	a201      	add	r2, pc, #4	; (adr r2, 80028d8 <UART_SetConfig+0x110>)
 80028d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d6:	bf00      	nop
 80028d8:	0800290d 	.word	0x0800290d
 80028dc:	0800292d 	.word	0x0800292d
 80028e0:	0800292d 	.word	0x0800292d
 80028e4:	0800292d 	.word	0x0800292d
 80028e8:	0800291d 	.word	0x0800291d
 80028ec:	0800292d 	.word	0x0800292d
 80028f0:	0800292d 	.word	0x0800292d
 80028f4:	0800292d 	.word	0x0800292d
 80028f8:	08002915 	.word	0x08002915
 80028fc:	0800292d 	.word	0x0800292d
 8002900:	0800292d 	.word	0x0800292d
 8002904:	0800292d 	.word	0x0800292d
 8002908:	08002925 	.word	0x08002925
 800290c:	2300      	movs	r3, #0
 800290e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002912:	e098      	b.n	8002a46 <UART_SetConfig+0x27e>
 8002914:	2302      	movs	r3, #2
 8002916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800291a:	e094      	b.n	8002a46 <UART_SetConfig+0x27e>
 800291c:	2304      	movs	r3, #4
 800291e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002922:	e090      	b.n	8002a46 <UART_SetConfig+0x27e>
 8002924:	2308      	movs	r3, #8
 8002926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800292a:	e08c      	b.n	8002a46 <UART_SetConfig+0x27e>
 800292c:	2310      	movs	r3, #16
 800292e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002932:	e088      	b.n	8002a46 <UART_SetConfig+0x27e>
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a5f      	ldr	r2, [pc, #380]	; (8002ab8 <UART_SetConfig+0x2f0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d125      	bne.n	800298a <UART_SetConfig+0x1c2>
 800293e:	4b5c      	ldr	r3, [pc, #368]	; (8002ab0 <UART_SetConfig+0x2e8>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002944:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002948:	2b30      	cmp	r3, #48	; 0x30
 800294a:	d016      	beq.n	800297a <UART_SetConfig+0x1b2>
 800294c:	2b30      	cmp	r3, #48	; 0x30
 800294e:	d818      	bhi.n	8002982 <UART_SetConfig+0x1ba>
 8002950:	2b20      	cmp	r3, #32
 8002952:	d00a      	beq.n	800296a <UART_SetConfig+0x1a2>
 8002954:	2b20      	cmp	r3, #32
 8002956:	d814      	bhi.n	8002982 <UART_SetConfig+0x1ba>
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <UART_SetConfig+0x19a>
 800295c:	2b10      	cmp	r3, #16
 800295e:	d008      	beq.n	8002972 <UART_SetConfig+0x1aa>
 8002960:	e00f      	b.n	8002982 <UART_SetConfig+0x1ba>
 8002962:	2300      	movs	r3, #0
 8002964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002968:	e06d      	b.n	8002a46 <UART_SetConfig+0x27e>
 800296a:	2302      	movs	r3, #2
 800296c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002970:	e069      	b.n	8002a46 <UART_SetConfig+0x27e>
 8002972:	2304      	movs	r3, #4
 8002974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002978:	e065      	b.n	8002a46 <UART_SetConfig+0x27e>
 800297a:	2308      	movs	r3, #8
 800297c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002980:	e061      	b.n	8002a46 <UART_SetConfig+0x27e>
 8002982:	2310      	movs	r3, #16
 8002984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002988:	e05d      	b.n	8002a46 <UART_SetConfig+0x27e>
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a4b      	ldr	r2, [pc, #300]	; (8002abc <UART_SetConfig+0x2f4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d125      	bne.n	80029e0 <UART_SetConfig+0x218>
 8002994:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <UART_SetConfig+0x2e8>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800299e:	2bc0      	cmp	r3, #192	; 0xc0
 80029a0:	d016      	beq.n	80029d0 <UART_SetConfig+0x208>
 80029a2:	2bc0      	cmp	r3, #192	; 0xc0
 80029a4:	d818      	bhi.n	80029d8 <UART_SetConfig+0x210>
 80029a6:	2b80      	cmp	r3, #128	; 0x80
 80029a8:	d00a      	beq.n	80029c0 <UART_SetConfig+0x1f8>
 80029aa:	2b80      	cmp	r3, #128	; 0x80
 80029ac:	d814      	bhi.n	80029d8 <UART_SetConfig+0x210>
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <UART_SetConfig+0x1f0>
 80029b2:	2b40      	cmp	r3, #64	; 0x40
 80029b4:	d008      	beq.n	80029c8 <UART_SetConfig+0x200>
 80029b6:	e00f      	b.n	80029d8 <UART_SetConfig+0x210>
 80029b8:	2300      	movs	r3, #0
 80029ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029be:	e042      	b.n	8002a46 <UART_SetConfig+0x27e>
 80029c0:	2302      	movs	r3, #2
 80029c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029c6:	e03e      	b.n	8002a46 <UART_SetConfig+0x27e>
 80029c8:	2304      	movs	r3, #4
 80029ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029ce:	e03a      	b.n	8002a46 <UART_SetConfig+0x27e>
 80029d0:	2308      	movs	r3, #8
 80029d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029d6:	e036      	b.n	8002a46 <UART_SetConfig+0x27e>
 80029d8:	2310      	movs	r3, #16
 80029da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029de:	e032      	b.n	8002a46 <UART_SetConfig+0x27e>
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a30      	ldr	r2, [pc, #192]	; (8002aa8 <UART_SetConfig+0x2e0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d12a      	bne.n	8002a40 <UART_SetConfig+0x278>
 80029ea:	4b31      	ldr	r3, [pc, #196]	; (8002ab0 <UART_SetConfig+0x2e8>)
 80029ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029f8:	d01a      	beq.n	8002a30 <UART_SetConfig+0x268>
 80029fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029fe:	d81b      	bhi.n	8002a38 <UART_SetConfig+0x270>
 8002a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a04:	d00c      	beq.n	8002a20 <UART_SetConfig+0x258>
 8002a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a0a:	d815      	bhi.n	8002a38 <UART_SetConfig+0x270>
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <UART_SetConfig+0x250>
 8002a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a14:	d008      	beq.n	8002a28 <UART_SetConfig+0x260>
 8002a16:	e00f      	b.n	8002a38 <UART_SetConfig+0x270>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a1e:	e012      	b.n	8002a46 <UART_SetConfig+0x27e>
 8002a20:	2302      	movs	r3, #2
 8002a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a26:	e00e      	b.n	8002a46 <UART_SetConfig+0x27e>
 8002a28:	2304      	movs	r3, #4
 8002a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a2e:	e00a      	b.n	8002a46 <UART_SetConfig+0x27e>
 8002a30:	2308      	movs	r3, #8
 8002a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a36:	e006      	b.n	8002a46 <UART_SetConfig+0x27e>
 8002a38:	2310      	movs	r3, #16
 8002a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a3e:	e002      	b.n	8002a46 <UART_SetConfig+0x27e>
 8002a40:	2310      	movs	r3, #16
 8002a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a17      	ldr	r2, [pc, #92]	; (8002aa8 <UART_SetConfig+0x2e0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	f040 80a8 	bne.w	8002ba2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d834      	bhi.n	8002ac4 <UART_SetConfig+0x2fc>
 8002a5a:	a201      	add	r2, pc, #4	; (adr r2, 8002a60 <UART_SetConfig+0x298>)
 8002a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a60:	08002a85 	.word	0x08002a85
 8002a64:	08002ac5 	.word	0x08002ac5
 8002a68:	08002a8d 	.word	0x08002a8d
 8002a6c:	08002ac5 	.word	0x08002ac5
 8002a70:	08002a93 	.word	0x08002a93
 8002a74:	08002ac5 	.word	0x08002ac5
 8002a78:	08002ac5 	.word	0x08002ac5
 8002a7c:	08002ac5 	.word	0x08002ac5
 8002a80:	08002a9b 	.word	0x08002a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a84:	f7ff f8ec 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8002a88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a8a:	e021      	b.n	8002ad0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <UART_SetConfig+0x2f8>)
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a90:	e01e      	b.n	8002ad0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a92:	f7ff f877 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8002a96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a98:	e01a      	b.n	8002ad0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002aa0:	e016      	b.n	8002ad0 <UART_SetConfig+0x308>
 8002aa2:	bf00      	nop
 8002aa4:	cfff69f3 	.word	0xcfff69f3
 8002aa8:	40008000 	.word	0x40008000
 8002aac:	40013800 	.word	0x40013800
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40004400 	.word	0x40004400
 8002ab8:	40004800 	.word	0x40004800
 8002abc:	40004c00 	.word	0x40004c00
 8002ac0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002ace:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 812a 	beq.w	8002d2c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	4a9e      	ldr	r2, [pc, #632]	; (8002d58 <UART_SetConfig+0x590>)
 8002ade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d305      	bcc.n	8002b08 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d903      	bls.n	8002b10 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002b0e:	e10d      	b.n	8002d2c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	2200      	movs	r2, #0
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	60fa      	str	r2, [r7, #12]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	4a8e      	ldr	r2, [pc, #568]	; (8002d58 <UART_SetConfig+0x590>)
 8002b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2200      	movs	r2, #0
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b32:	f7fd fbc5 	bl	80002c0 <__aeabi_uldivmod>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	020b      	lsls	r3, r1, #8
 8002b48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002b4c:	0202      	lsls	r2, r0, #8
 8002b4e:	6979      	ldr	r1, [r7, #20]
 8002b50:	6849      	ldr	r1, [r1, #4]
 8002b52:	0849      	lsrs	r1, r1, #1
 8002b54:	2000      	movs	r0, #0
 8002b56:	460c      	mov	r4, r1
 8002b58:	4605      	mov	r5, r0
 8002b5a:	eb12 0804 	adds.w	r8, r2, r4
 8002b5e:	eb43 0905 	adc.w	r9, r3, r5
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	469a      	mov	sl, r3
 8002b6a:	4693      	mov	fp, r2
 8002b6c:	4652      	mov	r2, sl
 8002b6e:	465b      	mov	r3, fp
 8002b70:	4640      	mov	r0, r8
 8002b72:	4649      	mov	r1, r9
 8002b74:	f7fd fba4 	bl	80002c0 <__aeabi_uldivmod>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b86:	d308      	bcc.n	8002b9a <UART_SetConfig+0x3d2>
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b8e:	d204      	bcs.n	8002b9a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6a3a      	ldr	r2, [r7, #32]
 8002b96:	60da      	str	r2, [r3, #12]
 8002b98:	e0c8      	b.n	8002d2c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002ba0:	e0c4      	b.n	8002d2c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002baa:	d167      	bne.n	8002c7c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002bac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d828      	bhi.n	8002c06 <UART_SetConfig+0x43e>
 8002bb4:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <UART_SetConfig+0x3f4>)
 8002bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bba:	bf00      	nop
 8002bbc:	08002be1 	.word	0x08002be1
 8002bc0:	08002be9 	.word	0x08002be9
 8002bc4:	08002bf1 	.word	0x08002bf1
 8002bc8:	08002c07 	.word	0x08002c07
 8002bcc:	08002bf7 	.word	0x08002bf7
 8002bd0:	08002c07 	.word	0x08002c07
 8002bd4:	08002c07 	.word	0x08002c07
 8002bd8:	08002c07 	.word	0x08002c07
 8002bdc:	08002bff 	.word	0x08002bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002be0:	f7ff f83e 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8002be4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002be6:	e014      	b.n	8002c12 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002be8:	f7ff f850 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8002bec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002bee:	e010      	b.n	8002c12 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bf0:	4b5a      	ldr	r3, [pc, #360]	; (8002d5c <UART_SetConfig+0x594>)
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002bf4:	e00d      	b.n	8002c12 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bf6:	f7fe ffc5 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8002bfa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002bfc:	e009      	b.n	8002c12 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c04:	e005      	b.n	8002c12 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002c10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8089 	beq.w	8002d2c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	4a4e      	ldr	r2, [pc, #312]	; (8002d58 <UART_SetConfig+0x590>)
 8002c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c24:	461a      	mov	r2, r3
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c2c:	005a      	lsls	r2, r3, #1
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	085b      	lsrs	r3, r3, #1
 8002c34:	441a      	add	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	2b0f      	cmp	r3, #15
 8002c44:	d916      	bls.n	8002c74 <UART_SetConfig+0x4ac>
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4c:	d212      	bcs.n	8002c74 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f023 030f 	bic.w	r3, r3, #15
 8002c56:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	085b      	lsrs	r3, r3, #1
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	8bfb      	ldrh	r3, [r7, #30]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	8bfa      	ldrh	r2, [r7, #30]
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	e05b      	b.n	8002d2c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002c7a:	e057      	b.n	8002d2c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d828      	bhi.n	8002cd6 <UART_SetConfig+0x50e>
 8002c84:	a201      	add	r2, pc, #4	; (adr r2, 8002c8c <UART_SetConfig+0x4c4>)
 8002c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8a:	bf00      	nop
 8002c8c:	08002cb1 	.word	0x08002cb1
 8002c90:	08002cb9 	.word	0x08002cb9
 8002c94:	08002cc1 	.word	0x08002cc1
 8002c98:	08002cd7 	.word	0x08002cd7
 8002c9c:	08002cc7 	.word	0x08002cc7
 8002ca0:	08002cd7 	.word	0x08002cd7
 8002ca4:	08002cd7 	.word	0x08002cd7
 8002ca8:	08002cd7 	.word	0x08002cd7
 8002cac:	08002ccf 	.word	0x08002ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cb0:	f7fe ffd6 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8002cb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002cb6:	e014      	b.n	8002ce2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cb8:	f7fe ffe8 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8002cbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002cbe:	e010      	b.n	8002ce2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cc0:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <UART_SetConfig+0x594>)
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002cc4:	e00d      	b.n	8002ce2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cc6:	f7fe ff5d 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8002cca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ccc:	e009      	b.n	8002ce2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002cd4:	e005      	b.n	8002ce2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002ce0:	bf00      	nop
    }

    if (pclk != 0U)
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d021      	beq.n	8002d2c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	4a1a      	ldr	r2, [pc, #104]	; (8002d58 <UART_SetConfig+0x590>)
 8002cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	085b      	lsrs	r3, r3, #1
 8002d00:	441a      	add	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	2b0f      	cmp	r3, #15
 8002d10:	d909      	bls.n	8002d26 <UART_SetConfig+0x55e>
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d18:	d205      	bcs.n	8002d26 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60da      	str	r2, [r3, #12]
 8002d24:	e002      	b.n	8002d2c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2200      	movs	r2, #0
 8002d46:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002d48:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3730      	adds	r7, #48	; 0x30
 8002d50:	46bd      	mov	sp, r7
 8002d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d56:	bf00      	nop
 8002d58:	08003c6c 	.word	0x08003c6c
 8002d5c:	00f42400 	.word	0x00f42400

08002d60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01a      	beq.n	8002e76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e5e:	d10a      	bne.n	8002e76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	605a      	str	r2, [r3, #4]
  }
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002eb4:	f7fd fec2 	bl	8000c3c <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d10e      	bne.n	8002ee6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ec8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f82f 	bl	8002f3a <UART_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e025      	b.n	8002f32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d10e      	bne.n	8002f12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f819 	bl	8002f3a <UART_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e00f      	b.n	8002f32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b09c      	sub	sp, #112	; 0x70
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	4613      	mov	r3, r2
 8002f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4a:	e0a9      	b.n	80030a0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f52:	f000 80a5 	beq.w	80030a0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f56:	f7fd fe71 	bl	8000c3c <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <UART_WaitOnFlagUntilTimeout+0x32>
 8002f66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d140      	bne.n	8002fee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f80:	667b      	str	r3, [r7, #100]	; 0x64
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f8c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f92:	e841 2300 	strex	r3, r2, [r1]
 8002f96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1e6      	bne.n	8002f6c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	663b      	str	r3, [r7, #96]	; 0x60
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3308      	adds	r3, #8
 8002fbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8002fc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002fc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fc6:	e841 2300 	strex	r3, r2, [r1]
 8002fca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e5      	bne.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e069      	b.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d051      	beq.n	80030a0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800300a:	d149      	bne.n	80030a0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003014:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	e853 3f00 	ldrex	r3, [r3]
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800302a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
 8003036:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003038:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800303a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800303c:	e841 2300 	strex	r3, r2, [r1]
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1e6      	bne.n	8003016 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3308      	adds	r3, #8
 800304e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	e853 3f00 	ldrex	r3, [r3]
 8003056:	613b      	str	r3, [r7, #16]
   return(result);
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f023 0301 	bic.w	r3, r3, #1
 800305e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3308      	adds	r3, #8
 8003066:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003068:	623a      	str	r2, [r7, #32]
 800306a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306c:	69f9      	ldr	r1, [r7, #28]
 800306e:	6a3a      	ldr	r2, [r7, #32]
 8003070:	e841 2300 	strex	r3, r2, [r1]
 8003074:	61bb      	str	r3, [r7, #24]
   return(result);
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e5      	bne.n	8003048 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e010      	b.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69da      	ldr	r2, [r3, #28]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4013      	ands	r3, r2
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	f43f af46 	beq.w	8002f4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3770      	adds	r7, #112	; 0x70
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80030dc:	2302      	movs	r3, #2
 80030de:	e027      	b.n	8003130 <HAL_UARTEx_DisableFifoMode+0x66>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2224      	movs	r2, #36	; 0x24
 80030ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800310e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003150:	2302      	movs	r3, #2
 8003152:	e02d      	b.n	80031b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2224      	movs	r2, #36	; 0x24
 8003160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f84f 	bl	8003234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e02d      	b.n	800322c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2224      	movs	r2, #36	; 0x24
 80031dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f811 	bl	8003234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003240:	2b00      	cmp	r3, #0
 8003242:	d108      	bne.n	8003256 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003254:	e031      	b.n	80032ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003256:	2308      	movs	r3, #8
 8003258:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800325a:	2308      	movs	r3, #8
 800325c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	0e5b      	lsrs	r3, r3, #25
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	0f5b      	lsrs	r3, r3, #29
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800327e:	7bbb      	ldrb	r3, [r7, #14]
 8003280:	7b3a      	ldrb	r2, [r7, #12]
 8003282:	4911      	ldr	r1, [pc, #68]	; (80032c8 <UARTEx_SetNbDataToProcess+0x94>)
 8003284:	5c8a      	ldrb	r2, [r1, r2]
 8003286:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800328a:	7b3a      	ldrb	r2, [r7, #12]
 800328c:	490f      	ldr	r1, [pc, #60]	; (80032cc <UARTEx_SetNbDataToProcess+0x98>)
 800328e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003290:	fb93 f3f2 	sdiv	r3, r3, r2
 8003294:	b29a      	uxth	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	7b7a      	ldrb	r2, [r7, #13]
 80032a0:	4909      	ldr	r1, [pc, #36]	; (80032c8 <UARTEx_SetNbDataToProcess+0x94>)
 80032a2:	5c8a      	ldrb	r2, [r1, r2]
 80032a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80032a8:	7b7a      	ldrb	r2, [r7, #13]
 80032aa:	4908      	ldr	r1, [pc, #32]	; (80032cc <UARTEx_SetNbDataToProcess+0x98>)
 80032ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80032ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	08003c84 	.word	0x08003c84
 80032cc:	08003c8c 	.word	0x08003c8c

080032d0 <__errno>:
 80032d0:	4b01      	ldr	r3, [pc, #4]	; (80032d8 <__errno+0x8>)
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	2000000c 	.word	0x2000000c

080032dc <__libc_init_array>:
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	4d0d      	ldr	r5, [pc, #52]	; (8003314 <__libc_init_array+0x38>)
 80032e0:	4c0d      	ldr	r4, [pc, #52]	; (8003318 <__libc_init_array+0x3c>)
 80032e2:	1b64      	subs	r4, r4, r5
 80032e4:	10a4      	asrs	r4, r4, #2
 80032e6:	2600      	movs	r6, #0
 80032e8:	42a6      	cmp	r6, r4
 80032ea:	d109      	bne.n	8003300 <__libc_init_array+0x24>
 80032ec:	4d0b      	ldr	r5, [pc, #44]	; (800331c <__libc_init_array+0x40>)
 80032ee:	4c0c      	ldr	r4, [pc, #48]	; (8003320 <__libc_init_array+0x44>)
 80032f0:	f000 fca2 	bl	8003c38 <_init>
 80032f4:	1b64      	subs	r4, r4, r5
 80032f6:	10a4      	asrs	r4, r4, #2
 80032f8:	2600      	movs	r6, #0
 80032fa:	42a6      	cmp	r6, r4
 80032fc:	d105      	bne.n	800330a <__libc_init_array+0x2e>
 80032fe:	bd70      	pop	{r4, r5, r6, pc}
 8003300:	f855 3b04 	ldr.w	r3, [r5], #4
 8003304:	4798      	blx	r3
 8003306:	3601      	adds	r6, #1
 8003308:	e7ee      	b.n	80032e8 <__libc_init_array+0xc>
 800330a:	f855 3b04 	ldr.w	r3, [r5], #4
 800330e:	4798      	blx	r3
 8003310:	3601      	adds	r6, #1
 8003312:	e7f2      	b.n	80032fa <__libc_init_array+0x1e>
 8003314:	08003cd0 	.word	0x08003cd0
 8003318:	08003cd0 	.word	0x08003cd0
 800331c:	08003cd0 	.word	0x08003cd0
 8003320:	08003cd4 	.word	0x08003cd4

08003324 <memset>:
 8003324:	4402      	add	r2, r0
 8003326:	4603      	mov	r3, r0
 8003328:	4293      	cmp	r3, r2
 800332a:	d100      	bne.n	800332e <memset+0xa>
 800332c:	4770      	bx	lr
 800332e:	f803 1b01 	strb.w	r1, [r3], #1
 8003332:	e7f9      	b.n	8003328 <memset+0x4>

08003334 <sniprintf>:
 8003334:	b40c      	push	{r2, r3}
 8003336:	b530      	push	{r4, r5, lr}
 8003338:	4b17      	ldr	r3, [pc, #92]	; (8003398 <sniprintf+0x64>)
 800333a:	1e0c      	subs	r4, r1, #0
 800333c:	681d      	ldr	r5, [r3, #0]
 800333e:	b09d      	sub	sp, #116	; 0x74
 8003340:	da08      	bge.n	8003354 <sniprintf+0x20>
 8003342:	238b      	movs	r3, #139	; 0x8b
 8003344:	602b      	str	r3, [r5, #0]
 8003346:	f04f 30ff 	mov.w	r0, #4294967295
 800334a:	b01d      	add	sp, #116	; 0x74
 800334c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003350:	b002      	add	sp, #8
 8003352:	4770      	bx	lr
 8003354:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003358:	f8ad 3014 	strh.w	r3, [sp, #20]
 800335c:	bf14      	ite	ne
 800335e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003362:	4623      	moveq	r3, r4
 8003364:	9304      	str	r3, [sp, #16]
 8003366:	9307      	str	r3, [sp, #28]
 8003368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800336c:	9002      	str	r0, [sp, #8]
 800336e:	9006      	str	r0, [sp, #24]
 8003370:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003374:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003376:	ab21      	add	r3, sp, #132	; 0x84
 8003378:	a902      	add	r1, sp, #8
 800337a:	4628      	mov	r0, r5
 800337c:	9301      	str	r3, [sp, #4]
 800337e:	f000 f869 	bl	8003454 <_svfiprintf_r>
 8003382:	1c43      	adds	r3, r0, #1
 8003384:	bfbc      	itt	lt
 8003386:	238b      	movlt	r3, #139	; 0x8b
 8003388:	602b      	strlt	r3, [r5, #0]
 800338a:	2c00      	cmp	r4, #0
 800338c:	d0dd      	beq.n	800334a <sniprintf+0x16>
 800338e:	9b02      	ldr	r3, [sp, #8]
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	e7d9      	b.n	800334a <sniprintf+0x16>
 8003396:	bf00      	nop
 8003398:	2000000c 	.word	0x2000000c

0800339c <__ssputs_r>:
 800339c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033a0:	688e      	ldr	r6, [r1, #8]
 80033a2:	429e      	cmp	r6, r3
 80033a4:	4682      	mov	sl, r0
 80033a6:	460c      	mov	r4, r1
 80033a8:	4690      	mov	r8, r2
 80033aa:	461f      	mov	r7, r3
 80033ac:	d838      	bhi.n	8003420 <__ssputs_r+0x84>
 80033ae:	898a      	ldrh	r2, [r1, #12]
 80033b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033b4:	d032      	beq.n	800341c <__ssputs_r+0x80>
 80033b6:	6825      	ldr	r5, [r4, #0]
 80033b8:	6909      	ldr	r1, [r1, #16]
 80033ba:	eba5 0901 	sub.w	r9, r5, r1
 80033be:	6965      	ldr	r5, [r4, #20]
 80033c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033c8:	3301      	adds	r3, #1
 80033ca:	444b      	add	r3, r9
 80033cc:	106d      	asrs	r5, r5, #1
 80033ce:	429d      	cmp	r5, r3
 80033d0:	bf38      	it	cc
 80033d2:	461d      	movcc	r5, r3
 80033d4:	0553      	lsls	r3, r2, #21
 80033d6:	d531      	bpl.n	800343c <__ssputs_r+0xa0>
 80033d8:	4629      	mov	r1, r5
 80033da:	f000 fb63 	bl	8003aa4 <_malloc_r>
 80033de:	4606      	mov	r6, r0
 80033e0:	b950      	cbnz	r0, 80033f8 <__ssputs_r+0x5c>
 80033e2:	230c      	movs	r3, #12
 80033e4:	f8ca 3000 	str.w	r3, [sl]
 80033e8:	89a3      	ldrh	r3, [r4, #12]
 80033ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ee:	81a3      	strh	r3, [r4, #12]
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f8:	6921      	ldr	r1, [r4, #16]
 80033fa:	464a      	mov	r2, r9
 80033fc:	f000 fabe 	bl	800397c <memcpy>
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340a:	81a3      	strh	r3, [r4, #12]
 800340c:	6126      	str	r6, [r4, #16]
 800340e:	6165      	str	r5, [r4, #20]
 8003410:	444e      	add	r6, r9
 8003412:	eba5 0509 	sub.w	r5, r5, r9
 8003416:	6026      	str	r6, [r4, #0]
 8003418:	60a5      	str	r5, [r4, #8]
 800341a:	463e      	mov	r6, r7
 800341c:	42be      	cmp	r6, r7
 800341e:	d900      	bls.n	8003422 <__ssputs_r+0x86>
 8003420:	463e      	mov	r6, r7
 8003422:	6820      	ldr	r0, [r4, #0]
 8003424:	4632      	mov	r2, r6
 8003426:	4641      	mov	r1, r8
 8003428:	f000 fab6 	bl	8003998 <memmove>
 800342c:	68a3      	ldr	r3, [r4, #8]
 800342e:	1b9b      	subs	r3, r3, r6
 8003430:	60a3      	str	r3, [r4, #8]
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	4433      	add	r3, r6
 8003436:	6023      	str	r3, [r4, #0]
 8003438:	2000      	movs	r0, #0
 800343a:	e7db      	b.n	80033f4 <__ssputs_r+0x58>
 800343c:	462a      	mov	r2, r5
 800343e:	f000 fba5 	bl	8003b8c <_realloc_r>
 8003442:	4606      	mov	r6, r0
 8003444:	2800      	cmp	r0, #0
 8003446:	d1e1      	bne.n	800340c <__ssputs_r+0x70>
 8003448:	6921      	ldr	r1, [r4, #16]
 800344a:	4650      	mov	r0, sl
 800344c:	f000 fabe 	bl	80039cc <_free_r>
 8003450:	e7c7      	b.n	80033e2 <__ssputs_r+0x46>
	...

08003454 <_svfiprintf_r>:
 8003454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003458:	4698      	mov	r8, r3
 800345a:	898b      	ldrh	r3, [r1, #12]
 800345c:	061b      	lsls	r3, r3, #24
 800345e:	b09d      	sub	sp, #116	; 0x74
 8003460:	4607      	mov	r7, r0
 8003462:	460d      	mov	r5, r1
 8003464:	4614      	mov	r4, r2
 8003466:	d50e      	bpl.n	8003486 <_svfiprintf_r+0x32>
 8003468:	690b      	ldr	r3, [r1, #16]
 800346a:	b963      	cbnz	r3, 8003486 <_svfiprintf_r+0x32>
 800346c:	2140      	movs	r1, #64	; 0x40
 800346e:	f000 fb19 	bl	8003aa4 <_malloc_r>
 8003472:	6028      	str	r0, [r5, #0]
 8003474:	6128      	str	r0, [r5, #16]
 8003476:	b920      	cbnz	r0, 8003482 <_svfiprintf_r+0x2e>
 8003478:	230c      	movs	r3, #12
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	e0d1      	b.n	8003626 <_svfiprintf_r+0x1d2>
 8003482:	2340      	movs	r3, #64	; 0x40
 8003484:	616b      	str	r3, [r5, #20]
 8003486:	2300      	movs	r3, #0
 8003488:	9309      	str	r3, [sp, #36]	; 0x24
 800348a:	2320      	movs	r3, #32
 800348c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003490:	f8cd 800c 	str.w	r8, [sp, #12]
 8003494:	2330      	movs	r3, #48	; 0x30
 8003496:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003640 <_svfiprintf_r+0x1ec>
 800349a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800349e:	f04f 0901 	mov.w	r9, #1
 80034a2:	4623      	mov	r3, r4
 80034a4:	469a      	mov	sl, r3
 80034a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034aa:	b10a      	cbz	r2, 80034b0 <_svfiprintf_r+0x5c>
 80034ac:	2a25      	cmp	r2, #37	; 0x25
 80034ae:	d1f9      	bne.n	80034a4 <_svfiprintf_r+0x50>
 80034b0:	ebba 0b04 	subs.w	fp, sl, r4
 80034b4:	d00b      	beq.n	80034ce <_svfiprintf_r+0x7a>
 80034b6:	465b      	mov	r3, fp
 80034b8:	4622      	mov	r2, r4
 80034ba:	4629      	mov	r1, r5
 80034bc:	4638      	mov	r0, r7
 80034be:	f7ff ff6d 	bl	800339c <__ssputs_r>
 80034c2:	3001      	adds	r0, #1
 80034c4:	f000 80aa 	beq.w	800361c <_svfiprintf_r+0x1c8>
 80034c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034ca:	445a      	add	r2, fp
 80034cc:	9209      	str	r2, [sp, #36]	; 0x24
 80034ce:	f89a 3000 	ldrb.w	r3, [sl]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80a2 	beq.w	800361c <_svfiprintf_r+0x1c8>
 80034d8:	2300      	movs	r3, #0
 80034da:	f04f 32ff 	mov.w	r2, #4294967295
 80034de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034e2:	f10a 0a01 	add.w	sl, sl, #1
 80034e6:	9304      	str	r3, [sp, #16]
 80034e8:	9307      	str	r3, [sp, #28]
 80034ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034ee:	931a      	str	r3, [sp, #104]	; 0x68
 80034f0:	4654      	mov	r4, sl
 80034f2:	2205      	movs	r2, #5
 80034f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f8:	4851      	ldr	r0, [pc, #324]	; (8003640 <_svfiprintf_r+0x1ec>)
 80034fa:	f7fc fe91 	bl	8000220 <memchr>
 80034fe:	9a04      	ldr	r2, [sp, #16]
 8003500:	b9d8      	cbnz	r0, 800353a <_svfiprintf_r+0xe6>
 8003502:	06d0      	lsls	r0, r2, #27
 8003504:	bf44      	itt	mi
 8003506:	2320      	movmi	r3, #32
 8003508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800350c:	0711      	lsls	r1, r2, #28
 800350e:	bf44      	itt	mi
 8003510:	232b      	movmi	r3, #43	; 0x2b
 8003512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003516:	f89a 3000 	ldrb.w	r3, [sl]
 800351a:	2b2a      	cmp	r3, #42	; 0x2a
 800351c:	d015      	beq.n	800354a <_svfiprintf_r+0xf6>
 800351e:	9a07      	ldr	r2, [sp, #28]
 8003520:	4654      	mov	r4, sl
 8003522:	2000      	movs	r0, #0
 8003524:	f04f 0c0a 	mov.w	ip, #10
 8003528:	4621      	mov	r1, r4
 800352a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800352e:	3b30      	subs	r3, #48	; 0x30
 8003530:	2b09      	cmp	r3, #9
 8003532:	d94e      	bls.n	80035d2 <_svfiprintf_r+0x17e>
 8003534:	b1b0      	cbz	r0, 8003564 <_svfiprintf_r+0x110>
 8003536:	9207      	str	r2, [sp, #28]
 8003538:	e014      	b.n	8003564 <_svfiprintf_r+0x110>
 800353a:	eba0 0308 	sub.w	r3, r0, r8
 800353e:	fa09 f303 	lsl.w	r3, r9, r3
 8003542:	4313      	orrs	r3, r2
 8003544:	9304      	str	r3, [sp, #16]
 8003546:	46a2      	mov	sl, r4
 8003548:	e7d2      	b.n	80034f0 <_svfiprintf_r+0x9c>
 800354a:	9b03      	ldr	r3, [sp, #12]
 800354c:	1d19      	adds	r1, r3, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	9103      	str	r1, [sp, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	bfbb      	ittet	lt
 8003556:	425b      	neglt	r3, r3
 8003558:	f042 0202 	orrlt.w	r2, r2, #2
 800355c:	9307      	strge	r3, [sp, #28]
 800355e:	9307      	strlt	r3, [sp, #28]
 8003560:	bfb8      	it	lt
 8003562:	9204      	strlt	r2, [sp, #16]
 8003564:	7823      	ldrb	r3, [r4, #0]
 8003566:	2b2e      	cmp	r3, #46	; 0x2e
 8003568:	d10c      	bne.n	8003584 <_svfiprintf_r+0x130>
 800356a:	7863      	ldrb	r3, [r4, #1]
 800356c:	2b2a      	cmp	r3, #42	; 0x2a
 800356e:	d135      	bne.n	80035dc <_svfiprintf_r+0x188>
 8003570:	9b03      	ldr	r3, [sp, #12]
 8003572:	1d1a      	adds	r2, r3, #4
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	9203      	str	r2, [sp, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	bfb8      	it	lt
 800357c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003580:	3402      	adds	r4, #2
 8003582:	9305      	str	r3, [sp, #20]
 8003584:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003650 <_svfiprintf_r+0x1fc>
 8003588:	7821      	ldrb	r1, [r4, #0]
 800358a:	2203      	movs	r2, #3
 800358c:	4650      	mov	r0, sl
 800358e:	f7fc fe47 	bl	8000220 <memchr>
 8003592:	b140      	cbz	r0, 80035a6 <_svfiprintf_r+0x152>
 8003594:	2340      	movs	r3, #64	; 0x40
 8003596:	eba0 000a 	sub.w	r0, r0, sl
 800359a:	fa03 f000 	lsl.w	r0, r3, r0
 800359e:	9b04      	ldr	r3, [sp, #16]
 80035a0:	4303      	orrs	r3, r0
 80035a2:	3401      	adds	r4, #1
 80035a4:	9304      	str	r3, [sp, #16]
 80035a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035aa:	4826      	ldr	r0, [pc, #152]	; (8003644 <_svfiprintf_r+0x1f0>)
 80035ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035b0:	2206      	movs	r2, #6
 80035b2:	f7fc fe35 	bl	8000220 <memchr>
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d038      	beq.n	800362c <_svfiprintf_r+0x1d8>
 80035ba:	4b23      	ldr	r3, [pc, #140]	; (8003648 <_svfiprintf_r+0x1f4>)
 80035bc:	bb1b      	cbnz	r3, 8003606 <_svfiprintf_r+0x1b2>
 80035be:	9b03      	ldr	r3, [sp, #12]
 80035c0:	3307      	adds	r3, #7
 80035c2:	f023 0307 	bic.w	r3, r3, #7
 80035c6:	3308      	adds	r3, #8
 80035c8:	9303      	str	r3, [sp, #12]
 80035ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035cc:	4433      	add	r3, r6
 80035ce:	9309      	str	r3, [sp, #36]	; 0x24
 80035d0:	e767      	b.n	80034a2 <_svfiprintf_r+0x4e>
 80035d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80035d6:	460c      	mov	r4, r1
 80035d8:	2001      	movs	r0, #1
 80035da:	e7a5      	b.n	8003528 <_svfiprintf_r+0xd4>
 80035dc:	2300      	movs	r3, #0
 80035de:	3401      	adds	r4, #1
 80035e0:	9305      	str	r3, [sp, #20]
 80035e2:	4619      	mov	r1, r3
 80035e4:	f04f 0c0a 	mov.w	ip, #10
 80035e8:	4620      	mov	r0, r4
 80035ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035ee:	3a30      	subs	r2, #48	; 0x30
 80035f0:	2a09      	cmp	r2, #9
 80035f2:	d903      	bls.n	80035fc <_svfiprintf_r+0x1a8>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0c5      	beq.n	8003584 <_svfiprintf_r+0x130>
 80035f8:	9105      	str	r1, [sp, #20]
 80035fa:	e7c3      	b.n	8003584 <_svfiprintf_r+0x130>
 80035fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003600:	4604      	mov	r4, r0
 8003602:	2301      	movs	r3, #1
 8003604:	e7f0      	b.n	80035e8 <_svfiprintf_r+0x194>
 8003606:	ab03      	add	r3, sp, #12
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	462a      	mov	r2, r5
 800360c:	4b0f      	ldr	r3, [pc, #60]	; (800364c <_svfiprintf_r+0x1f8>)
 800360e:	a904      	add	r1, sp, #16
 8003610:	4638      	mov	r0, r7
 8003612:	f3af 8000 	nop.w
 8003616:	1c42      	adds	r2, r0, #1
 8003618:	4606      	mov	r6, r0
 800361a:	d1d6      	bne.n	80035ca <_svfiprintf_r+0x176>
 800361c:	89ab      	ldrh	r3, [r5, #12]
 800361e:	065b      	lsls	r3, r3, #25
 8003620:	f53f af2c 	bmi.w	800347c <_svfiprintf_r+0x28>
 8003624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003626:	b01d      	add	sp, #116	; 0x74
 8003628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800362c:	ab03      	add	r3, sp, #12
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	462a      	mov	r2, r5
 8003632:	4b06      	ldr	r3, [pc, #24]	; (800364c <_svfiprintf_r+0x1f8>)
 8003634:	a904      	add	r1, sp, #16
 8003636:	4638      	mov	r0, r7
 8003638:	f000 f87a 	bl	8003730 <_printf_i>
 800363c:	e7eb      	b.n	8003616 <_svfiprintf_r+0x1c2>
 800363e:	bf00      	nop
 8003640:	08003c94 	.word	0x08003c94
 8003644:	08003c9e 	.word	0x08003c9e
 8003648:	00000000 	.word	0x00000000
 800364c:	0800339d 	.word	0x0800339d
 8003650:	08003c9a 	.word	0x08003c9a

08003654 <_printf_common>:
 8003654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003658:	4616      	mov	r6, r2
 800365a:	4699      	mov	r9, r3
 800365c:	688a      	ldr	r2, [r1, #8]
 800365e:	690b      	ldr	r3, [r1, #16]
 8003660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003664:	4293      	cmp	r3, r2
 8003666:	bfb8      	it	lt
 8003668:	4613      	movlt	r3, r2
 800366a:	6033      	str	r3, [r6, #0]
 800366c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003670:	4607      	mov	r7, r0
 8003672:	460c      	mov	r4, r1
 8003674:	b10a      	cbz	r2, 800367a <_printf_common+0x26>
 8003676:	3301      	adds	r3, #1
 8003678:	6033      	str	r3, [r6, #0]
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	0699      	lsls	r1, r3, #26
 800367e:	bf42      	ittt	mi
 8003680:	6833      	ldrmi	r3, [r6, #0]
 8003682:	3302      	addmi	r3, #2
 8003684:	6033      	strmi	r3, [r6, #0]
 8003686:	6825      	ldr	r5, [r4, #0]
 8003688:	f015 0506 	ands.w	r5, r5, #6
 800368c:	d106      	bne.n	800369c <_printf_common+0x48>
 800368e:	f104 0a19 	add.w	sl, r4, #25
 8003692:	68e3      	ldr	r3, [r4, #12]
 8003694:	6832      	ldr	r2, [r6, #0]
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	42ab      	cmp	r3, r5
 800369a:	dc26      	bgt.n	80036ea <_printf_common+0x96>
 800369c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036a0:	1e13      	subs	r3, r2, #0
 80036a2:	6822      	ldr	r2, [r4, #0]
 80036a4:	bf18      	it	ne
 80036a6:	2301      	movne	r3, #1
 80036a8:	0692      	lsls	r2, r2, #26
 80036aa:	d42b      	bmi.n	8003704 <_printf_common+0xb0>
 80036ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036b0:	4649      	mov	r1, r9
 80036b2:	4638      	mov	r0, r7
 80036b4:	47c0      	blx	r8
 80036b6:	3001      	adds	r0, #1
 80036b8:	d01e      	beq.n	80036f8 <_printf_common+0xa4>
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	68e5      	ldr	r5, [r4, #12]
 80036be:	6832      	ldr	r2, [r6, #0]
 80036c0:	f003 0306 	and.w	r3, r3, #6
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	bf08      	it	eq
 80036c8:	1aad      	subeq	r5, r5, r2
 80036ca:	68a3      	ldr	r3, [r4, #8]
 80036cc:	6922      	ldr	r2, [r4, #16]
 80036ce:	bf0c      	ite	eq
 80036d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036d4:	2500      	movne	r5, #0
 80036d6:	4293      	cmp	r3, r2
 80036d8:	bfc4      	itt	gt
 80036da:	1a9b      	subgt	r3, r3, r2
 80036dc:	18ed      	addgt	r5, r5, r3
 80036de:	2600      	movs	r6, #0
 80036e0:	341a      	adds	r4, #26
 80036e2:	42b5      	cmp	r5, r6
 80036e4:	d11a      	bne.n	800371c <_printf_common+0xc8>
 80036e6:	2000      	movs	r0, #0
 80036e8:	e008      	b.n	80036fc <_printf_common+0xa8>
 80036ea:	2301      	movs	r3, #1
 80036ec:	4652      	mov	r2, sl
 80036ee:	4649      	mov	r1, r9
 80036f0:	4638      	mov	r0, r7
 80036f2:	47c0      	blx	r8
 80036f4:	3001      	adds	r0, #1
 80036f6:	d103      	bne.n	8003700 <_printf_common+0xac>
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003700:	3501      	adds	r5, #1
 8003702:	e7c6      	b.n	8003692 <_printf_common+0x3e>
 8003704:	18e1      	adds	r1, r4, r3
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	2030      	movs	r0, #48	; 0x30
 800370a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800370e:	4422      	add	r2, r4
 8003710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003718:	3302      	adds	r3, #2
 800371a:	e7c7      	b.n	80036ac <_printf_common+0x58>
 800371c:	2301      	movs	r3, #1
 800371e:	4622      	mov	r2, r4
 8003720:	4649      	mov	r1, r9
 8003722:	4638      	mov	r0, r7
 8003724:	47c0      	blx	r8
 8003726:	3001      	adds	r0, #1
 8003728:	d0e6      	beq.n	80036f8 <_printf_common+0xa4>
 800372a:	3601      	adds	r6, #1
 800372c:	e7d9      	b.n	80036e2 <_printf_common+0x8e>
	...

08003730 <_printf_i>:
 8003730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003734:	7e0f      	ldrb	r7, [r1, #24]
 8003736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003738:	2f78      	cmp	r7, #120	; 0x78
 800373a:	4691      	mov	r9, r2
 800373c:	4680      	mov	r8, r0
 800373e:	460c      	mov	r4, r1
 8003740:	469a      	mov	sl, r3
 8003742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003746:	d807      	bhi.n	8003758 <_printf_i+0x28>
 8003748:	2f62      	cmp	r7, #98	; 0x62
 800374a:	d80a      	bhi.n	8003762 <_printf_i+0x32>
 800374c:	2f00      	cmp	r7, #0
 800374e:	f000 80d8 	beq.w	8003902 <_printf_i+0x1d2>
 8003752:	2f58      	cmp	r7, #88	; 0x58
 8003754:	f000 80a3 	beq.w	800389e <_printf_i+0x16e>
 8003758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800375c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003760:	e03a      	b.n	80037d8 <_printf_i+0xa8>
 8003762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003766:	2b15      	cmp	r3, #21
 8003768:	d8f6      	bhi.n	8003758 <_printf_i+0x28>
 800376a:	a101      	add	r1, pc, #4	; (adr r1, 8003770 <_printf_i+0x40>)
 800376c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003770:	080037c9 	.word	0x080037c9
 8003774:	080037dd 	.word	0x080037dd
 8003778:	08003759 	.word	0x08003759
 800377c:	08003759 	.word	0x08003759
 8003780:	08003759 	.word	0x08003759
 8003784:	08003759 	.word	0x08003759
 8003788:	080037dd 	.word	0x080037dd
 800378c:	08003759 	.word	0x08003759
 8003790:	08003759 	.word	0x08003759
 8003794:	08003759 	.word	0x08003759
 8003798:	08003759 	.word	0x08003759
 800379c:	080038e9 	.word	0x080038e9
 80037a0:	0800380d 	.word	0x0800380d
 80037a4:	080038cb 	.word	0x080038cb
 80037a8:	08003759 	.word	0x08003759
 80037ac:	08003759 	.word	0x08003759
 80037b0:	0800390b 	.word	0x0800390b
 80037b4:	08003759 	.word	0x08003759
 80037b8:	0800380d 	.word	0x0800380d
 80037bc:	08003759 	.word	0x08003759
 80037c0:	08003759 	.word	0x08003759
 80037c4:	080038d3 	.word	0x080038d3
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	1d1a      	adds	r2, r3, #4
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	602a      	str	r2, [r5, #0]
 80037d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037d8:	2301      	movs	r3, #1
 80037da:	e0a3      	b.n	8003924 <_printf_i+0x1f4>
 80037dc:	6820      	ldr	r0, [r4, #0]
 80037de:	6829      	ldr	r1, [r5, #0]
 80037e0:	0606      	lsls	r6, r0, #24
 80037e2:	f101 0304 	add.w	r3, r1, #4
 80037e6:	d50a      	bpl.n	80037fe <_printf_i+0xce>
 80037e8:	680e      	ldr	r6, [r1, #0]
 80037ea:	602b      	str	r3, [r5, #0]
 80037ec:	2e00      	cmp	r6, #0
 80037ee:	da03      	bge.n	80037f8 <_printf_i+0xc8>
 80037f0:	232d      	movs	r3, #45	; 0x2d
 80037f2:	4276      	negs	r6, r6
 80037f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037f8:	485e      	ldr	r0, [pc, #376]	; (8003974 <_printf_i+0x244>)
 80037fa:	230a      	movs	r3, #10
 80037fc:	e019      	b.n	8003832 <_printf_i+0x102>
 80037fe:	680e      	ldr	r6, [r1, #0]
 8003800:	602b      	str	r3, [r5, #0]
 8003802:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003806:	bf18      	it	ne
 8003808:	b236      	sxthne	r6, r6
 800380a:	e7ef      	b.n	80037ec <_printf_i+0xbc>
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	6820      	ldr	r0, [r4, #0]
 8003810:	1d19      	adds	r1, r3, #4
 8003812:	6029      	str	r1, [r5, #0]
 8003814:	0601      	lsls	r1, r0, #24
 8003816:	d501      	bpl.n	800381c <_printf_i+0xec>
 8003818:	681e      	ldr	r6, [r3, #0]
 800381a:	e002      	b.n	8003822 <_printf_i+0xf2>
 800381c:	0646      	lsls	r6, r0, #25
 800381e:	d5fb      	bpl.n	8003818 <_printf_i+0xe8>
 8003820:	881e      	ldrh	r6, [r3, #0]
 8003822:	4854      	ldr	r0, [pc, #336]	; (8003974 <_printf_i+0x244>)
 8003824:	2f6f      	cmp	r7, #111	; 0x6f
 8003826:	bf0c      	ite	eq
 8003828:	2308      	moveq	r3, #8
 800382a:	230a      	movne	r3, #10
 800382c:	2100      	movs	r1, #0
 800382e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003832:	6865      	ldr	r5, [r4, #4]
 8003834:	60a5      	str	r5, [r4, #8]
 8003836:	2d00      	cmp	r5, #0
 8003838:	bfa2      	ittt	ge
 800383a:	6821      	ldrge	r1, [r4, #0]
 800383c:	f021 0104 	bicge.w	r1, r1, #4
 8003840:	6021      	strge	r1, [r4, #0]
 8003842:	b90e      	cbnz	r6, 8003848 <_printf_i+0x118>
 8003844:	2d00      	cmp	r5, #0
 8003846:	d04d      	beq.n	80038e4 <_printf_i+0x1b4>
 8003848:	4615      	mov	r5, r2
 800384a:	fbb6 f1f3 	udiv	r1, r6, r3
 800384e:	fb03 6711 	mls	r7, r3, r1, r6
 8003852:	5dc7      	ldrb	r7, [r0, r7]
 8003854:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003858:	4637      	mov	r7, r6
 800385a:	42bb      	cmp	r3, r7
 800385c:	460e      	mov	r6, r1
 800385e:	d9f4      	bls.n	800384a <_printf_i+0x11a>
 8003860:	2b08      	cmp	r3, #8
 8003862:	d10b      	bne.n	800387c <_printf_i+0x14c>
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	07de      	lsls	r6, r3, #31
 8003868:	d508      	bpl.n	800387c <_printf_i+0x14c>
 800386a:	6923      	ldr	r3, [r4, #16]
 800386c:	6861      	ldr	r1, [r4, #4]
 800386e:	4299      	cmp	r1, r3
 8003870:	bfde      	ittt	le
 8003872:	2330      	movle	r3, #48	; 0x30
 8003874:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003878:	f105 35ff 	addle.w	r5, r5, #4294967295
 800387c:	1b52      	subs	r2, r2, r5
 800387e:	6122      	str	r2, [r4, #16]
 8003880:	f8cd a000 	str.w	sl, [sp]
 8003884:	464b      	mov	r3, r9
 8003886:	aa03      	add	r2, sp, #12
 8003888:	4621      	mov	r1, r4
 800388a:	4640      	mov	r0, r8
 800388c:	f7ff fee2 	bl	8003654 <_printf_common>
 8003890:	3001      	adds	r0, #1
 8003892:	d14c      	bne.n	800392e <_printf_i+0x1fe>
 8003894:	f04f 30ff 	mov.w	r0, #4294967295
 8003898:	b004      	add	sp, #16
 800389a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800389e:	4835      	ldr	r0, [pc, #212]	; (8003974 <_printf_i+0x244>)
 80038a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038a4:	6829      	ldr	r1, [r5, #0]
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80038ac:	6029      	str	r1, [r5, #0]
 80038ae:	061d      	lsls	r5, r3, #24
 80038b0:	d514      	bpl.n	80038dc <_printf_i+0x1ac>
 80038b2:	07df      	lsls	r7, r3, #31
 80038b4:	bf44      	itt	mi
 80038b6:	f043 0320 	orrmi.w	r3, r3, #32
 80038ba:	6023      	strmi	r3, [r4, #0]
 80038bc:	b91e      	cbnz	r6, 80038c6 <_printf_i+0x196>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	f023 0320 	bic.w	r3, r3, #32
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	2310      	movs	r3, #16
 80038c8:	e7b0      	b.n	800382c <_printf_i+0xfc>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	f043 0320 	orr.w	r3, r3, #32
 80038d0:	6023      	str	r3, [r4, #0]
 80038d2:	2378      	movs	r3, #120	; 0x78
 80038d4:	4828      	ldr	r0, [pc, #160]	; (8003978 <_printf_i+0x248>)
 80038d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038da:	e7e3      	b.n	80038a4 <_printf_i+0x174>
 80038dc:	0659      	lsls	r1, r3, #25
 80038de:	bf48      	it	mi
 80038e0:	b2b6      	uxthmi	r6, r6
 80038e2:	e7e6      	b.n	80038b2 <_printf_i+0x182>
 80038e4:	4615      	mov	r5, r2
 80038e6:	e7bb      	b.n	8003860 <_printf_i+0x130>
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	6826      	ldr	r6, [r4, #0]
 80038ec:	6961      	ldr	r1, [r4, #20]
 80038ee:	1d18      	adds	r0, r3, #4
 80038f0:	6028      	str	r0, [r5, #0]
 80038f2:	0635      	lsls	r5, r6, #24
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	d501      	bpl.n	80038fc <_printf_i+0x1cc>
 80038f8:	6019      	str	r1, [r3, #0]
 80038fa:	e002      	b.n	8003902 <_printf_i+0x1d2>
 80038fc:	0670      	lsls	r0, r6, #25
 80038fe:	d5fb      	bpl.n	80038f8 <_printf_i+0x1c8>
 8003900:	8019      	strh	r1, [r3, #0]
 8003902:	2300      	movs	r3, #0
 8003904:	6123      	str	r3, [r4, #16]
 8003906:	4615      	mov	r5, r2
 8003908:	e7ba      	b.n	8003880 <_printf_i+0x150>
 800390a:	682b      	ldr	r3, [r5, #0]
 800390c:	1d1a      	adds	r2, r3, #4
 800390e:	602a      	str	r2, [r5, #0]
 8003910:	681d      	ldr	r5, [r3, #0]
 8003912:	6862      	ldr	r2, [r4, #4]
 8003914:	2100      	movs	r1, #0
 8003916:	4628      	mov	r0, r5
 8003918:	f7fc fc82 	bl	8000220 <memchr>
 800391c:	b108      	cbz	r0, 8003922 <_printf_i+0x1f2>
 800391e:	1b40      	subs	r0, r0, r5
 8003920:	6060      	str	r0, [r4, #4]
 8003922:	6863      	ldr	r3, [r4, #4]
 8003924:	6123      	str	r3, [r4, #16]
 8003926:	2300      	movs	r3, #0
 8003928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800392c:	e7a8      	b.n	8003880 <_printf_i+0x150>
 800392e:	6923      	ldr	r3, [r4, #16]
 8003930:	462a      	mov	r2, r5
 8003932:	4649      	mov	r1, r9
 8003934:	4640      	mov	r0, r8
 8003936:	47d0      	blx	sl
 8003938:	3001      	adds	r0, #1
 800393a:	d0ab      	beq.n	8003894 <_printf_i+0x164>
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	079b      	lsls	r3, r3, #30
 8003940:	d413      	bmi.n	800396a <_printf_i+0x23a>
 8003942:	68e0      	ldr	r0, [r4, #12]
 8003944:	9b03      	ldr	r3, [sp, #12]
 8003946:	4298      	cmp	r0, r3
 8003948:	bfb8      	it	lt
 800394a:	4618      	movlt	r0, r3
 800394c:	e7a4      	b.n	8003898 <_printf_i+0x168>
 800394e:	2301      	movs	r3, #1
 8003950:	4632      	mov	r2, r6
 8003952:	4649      	mov	r1, r9
 8003954:	4640      	mov	r0, r8
 8003956:	47d0      	blx	sl
 8003958:	3001      	adds	r0, #1
 800395a:	d09b      	beq.n	8003894 <_printf_i+0x164>
 800395c:	3501      	adds	r5, #1
 800395e:	68e3      	ldr	r3, [r4, #12]
 8003960:	9903      	ldr	r1, [sp, #12]
 8003962:	1a5b      	subs	r3, r3, r1
 8003964:	42ab      	cmp	r3, r5
 8003966:	dcf2      	bgt.n	800394e <_printf_i+0x21e>
 8003968:	e7eb      	b.n	8003942 <_printf_i+0x212>
 800396a:	2500      	movs	r5, #0
 800396c:	f104 0619 	add.w	r6, r4, #25
 8003970:	e7f5      	b.n	800395e <_printf_i+0x22e>
 8003972:	bf00      	nop
 8003974:	08003ca5 	.word	0x08003ca5
 8003978:	08003cb6 	.word	0x08003cb6

0800397c <memcpy>:
 800397c:	440a      	add	r2, r1
 800397e:	4291      	cmp	r1, r2
 8003980:	f100 33ff 	add.w	r3, r0, #4294967295
 8003984:	d100      	bne.n	8003988 <memcpy+0xc>
 8003986:	4770      	bx	lr
 8003988:	b510      	push	{r4, lr}
 800398a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800398e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003992:	4291      	cmp	r1, r2
 8003994:	d1f9      	bne.n	800398a <memcpy+0xe>
 8003996:	bd10      	pop	{r4, pc}

08003998 <memmove>:
 8003998:	4288      	cmp	r0, r1
 800399a:	b510      	push	{r4, lr}
 800399c:	eb01 0402 	add.w	r4, r1, r2
 80039a0:	d902      	bls.n	80039a8 <memmove+0x10>
 80039a2:	4284      	cmp	r4, r0
 80039a4:	4623      	mov	r3, r4
 80039a6:	d807      	bhi.n	80039b8 <memmove+0x20>
 80039a8:	1e43      	subs	r3, r0, #1
 80039aa:	42a1      	cmp	r1, r4
 80039ac:	d008      	beq.n	80039c0 <memmove+0x28>
 80039ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039b6:	e7f8      	b.n	80039aa <memmove+0x12>
 80039b8:	4402      	add	r2, r0
 80039ba:	4601      	mov	r1, r0
 80039bc:	428a      	cmp	r2, r1
 80039be:	d100      	bne.n	80039c2 <memmove+0x2a>
 80039c0:	bd10      	pop	{r4, pc}
 80039c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039ca:	e7f7      	b.n	80039bc <memmove+0x24>

080039cc <_free_r>:
 80039cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039ce:	2900      	cmp	r1, #0
 80039d0:	d044      	beq.n	8003a5c <_free_r+0x90>
 80039d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039d6:	9001      	str	r0, [sp, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f1a1 0404 	sub.w	r4, r1, #4
 80039de:	bfb8      	it	lt
 80039e0:	18e4      	addlt	r4, r4, r3
 80039e2:	f000 f913 	bl	8003c0c <__malloc_lock>
 80039e6:	4a1e      	ldr	r2, [pc, #120]	; (8003a60 <_free_r+0x94>)
 80039e8:	9801      	ldr	r0, [sp, #4]
 80039ea:	6813      	ldr	r3, [r2, #0]
 80039ec:	b933      	cbnz	r3, 80039fc <_free_r+0x30>
 80039ee:	6063      	str	r3, [r4, #4]
 80039f0:	6014      	str	r4, [r2, #0]
 80039f2:	b003      	add	sp, #12
 80039f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039f8:	f000 b90e 	b.w	8003c18 <__malloc_unlock>
 80039fc:	42a3      	cmp	r3, r4
 80039fe:	d908      	bls.n	8003a12 <_free_r+0x46>
 8003a00:	6825      	ldr	r5, [r4, #0]
 8003a02:	1961      	adds	r1, r4, r5
 8003a04:	428b      	cmp	r3, r1
 8003a06:	bf01      	itttt	eq
 8003a08:	6819      	ldreq	r1, [r3, #0]
 8003a0a:	685b      	ldreq	r3, [r3, #4]
 8003a0c:	1949      	addeq	r1, r1, r5
 8003a0e:	6021      	streq	r1, [r4, #0]
 8003a10:	e7ed      	b.n	80039ee <_free_r+0x22>
 8003a12:	461a      	mov	r2, r3
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	b10b      	cbz	r3, 8003a1c <_free_r+0x50>
 8003a18:	42a3      	cmp	r3, r4
 8003a1a:	d9fa      	bls.n	8003a12 <_free_r+0x46>
 8003a1c:	6811      	ldr	r1, [r2, #0]
 8003a1e:	1855      	adds	r5, r2, r1
 8003a20:	42a5      	cmp	r5, r4
 8003a22:	d10b      	bne.n	8003a3c <_free_r+0x70>
 8003a24:	6824      	ldr	r4, [r4, #0]
 8003a26:	4421      	add	r1, r4
 8003a28:	1854      	adds	r4, r2, r1
 8003a2a:	42a3      	cmp	r3, r4
 8003a2c:	6011      	str	r1, [r2, #0]
 8003a2e:	d1e0      	bne.n	80039f2 <_free_r+0x26>
 8003a30:	681c      	ldr	r4, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	6053      	str	r3, [r2, #4]
 8003a36:	4421      	add	r1, r4
 8003a38:	6011      	str	r1, [r2, #0]
 8003a3a:	e7da      	b.n	80039f2 <_free_r+0x26>
 8003a3c:	d902      	bls.n	8003a44 <_free_r+0x78>
 8003a3e:	230c      	movs	r3, #12
 8003a40:	6003      	str	r3, [r0, #0]
 8003a42:	e7d6      	b.n	80039f2 <_free_r+0x26>
 8003a44:	6825      	ldr	r5, [r4, #0]
 8003a46:	1961      	adds	r1, r4, r5
 8003a48:	428b      	cmp	r3, r1
 8003a4a:	bf04      	itt	eq
 8003a4c:	6819      	ldreq	r1, [r3, #0]
 8003a4e:	685b      	ldreq	r3, [r3, #4]
 8003a50:	6063      	str	r3, [r4, #4]
 8003a52:	bf04      	itt	eq
 8003a54:	1949      	addeq	r1, r1, r5
 8003a56:	6021      	streq	r1, [r4, #0]
 8003a58:	6054      	str	r4, [r2, #4]
 8003a5a:	e7ca      	b.n	80039f2 <_free_r+0x26>
 8003a5c:	b003      	add	sp, #12
 8003a5e:	bd30      	pop	{r4, r5, pc}
 8003a60:	20000170 	.word	0x20000170

08003a64 <sbrk_aligned>:
 8003a64:	b570      	push	{r4, r5, r6, lr}
 8003a66:	4e0e      	ldr	r6, [pc, #56]	; (8003aa0 <sbrk_aligned+0x3c>)
 8003a68:	460c      	mov	r4, r1
 8003a6a:	6831      	ldr	r1, [r6, #0]
 8003a6c:	4605      	mov	r5, r0
 8003a6e:	b911      	cbnz	r1, 8003a76 <sbrk_aligned+0x12>
 8003a70:	f000 f8bc 	bl	8003bec <_sbrk_r>
 8003a74:	6030      	str	r0, [r6, #0]
 8003a76:	4621      	mov	r1, r4
 8003a78:	4628      	mov	r0, r5
 8003a7a:	f000 f8b7 	bl	8003bec <_sbrk_r>
 8003a7e:	1c43      	adds	r3, r0, #1
 8003a80:	d00a      	beq.n	8003a98 <sbrk_aligned+0x34>
 8003a82:	1cc4      	adds	r4, r0, #3
 8003a84:	f024 0403 	bic.w	r4, r4, #3
 8003a88:	42a0      	cmp	r0, r4
 8003a8a:	d007      	beq.n	8003a9c <sbrk_aligned+0x38>
 8003a8c:	1a21      	subs	r1, r4, r0
 8003a8e:	4628      	mov	r0, r5
 8003a90:	f000 f8ac 	bl	8003bec <_sbrk_r>
 8003a94:	3001      	adds	r0, #1
 8003a96:	d101      	bne.n	8003a9c <sbrk_aligned+0x38>
 8003a98:	f04f 34ff 	mov.w	r4, #4294967295
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	bd70      	pop	{r4, r5, r6, pc}
 8003aa0:	20000174 	.word	0x20000174

08003aa4 <_malloc_r>:
 8003aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa8:	1ccd      	adds	r5, r1, #3
 8003aaa:	f025 0503 	bic.w	r5, r5, #3
 8003aae:	3508      	adds	r5, #8
 8003ab0:	2d0c      	cmp	r5, #12
 8003ab2:	bf38      	it	cc
 8003ab4:	250c      	movcc	r5, #12
 8003ab6:	2d00      	cmp	r5, #0
 8003ab8:	4607      	mov	r7, r0
 8003aba:	db01      	blt.n	8003ac0 <_malloc_r+0x1c>
 8003abc:	42a9      	cmp	r1, r5
 8003abe:	d905      	bls.n	8003acc <_malloc_r+0x28>
 8003ac0:	230c      	movs	r3, #12
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	2600      	movs	r6, #0
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003acc:	4e2e      	ldr	r6, [pc, #184]	; (8003b88 <_malloc_r+0xe4>)
 8003ace:	f000 f89d 	bl	8003c0c <__malloc_lock>
 8003ad2:	6833      	ldr	r3, [r6, #0]
 8003ad4:	461c      	mov	r4, r3
 8003ad6:	bb34      	cbnz	r4, 8003b26 <_malloc_r+0x82>
 8003ad8:	4629      	mov	r1, r5
 8003ada:	4638      	mov	r0, r7
 8003adc:	f7ff ffc2 	bl	8003a64 <sbrk_aligned>
 8003ae0:	1c43      	adds	r3, r0, #1
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	d14d      	bne.n	8003b82 <_malloc_r+0xde>
 8003ae6:	6834      	ldr	r4, [r6, #0]
 8003ae8:	4626      	mov	r6, r4
 8003aea:	2e00      	cmp	r6, #0
 8003aec:	d140      	bne.n	8003b70 <_malloc_r+0xcc>
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	4631      	mov	r1, r6
 8003af2:	4638      	mov	r0, r7
 8003af4:	eb04 0803 	add.w	r8, r4, r3
 8003af8:	f000 f878 	bl	8003bec <_sbrk_r>
 8003afc:	4580      	cmp	r8, r0
 8003afe:	d13a      	bne.n	8003b76 <_malloc_r+0xd2>
 8003b00:	6821      	ldr	r1, [r4, #0]
 8003b02:	3503      	adds	r5, #3
 8003b04:	1a6d      	subs	r5, r5, r1
 8003b06:	f025 0503 	bic.w	r5, r5, #3
 8003b0a:	3508      	adds	r5, #8
 8003b0c:	2d0c      	cmp	r5, #12
 8003b0e:	bf38      	it	cc
 8003b10:	250c      	movcc	r5, #12
 8003b12:	4629      	mov	r1, r5
 8003b14:	4638      	mov	r0, r7
 8003b16:	f7ff ffa5 	bl	8003a64 <sbrk_aligned>
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d02b      	beq.n	8003b76 <_malloc_r+0xd2>
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	442b      	add	r3, r5
 8003b22:	6023      	str	r3, [r4, #0]
 8003b24:	e00e      	b.n	8003b44 <_malloc_r+0xa0>
 8003b26:	6822      	ldr	r2, [r4, #0]
 8003b28:	1b52      	subs	r2, r2, r5
 8003b2a:	d41e      	bmi.n	8003b6a <_malloc_r+0xc6>
 8003b2c:	2a0b      	cmp	r2, #11
 8003b2e:	d916      	bls.n	8003b5e <_malloc_r+0xba>
 8003b30:	1961      	adds	r1, r4, r5
 8003b32:	42a3      	cmp	r3, r4
 8003b34:	6025      	str	r5, [r4, #0]
 8003b36:	bf18      	it	ne
 8003b38:	6059      	strne	r1, [r3, #4]
 8003b3a:	6863      	ldr	r3, [r4, #4]
 8003b3c:	bf08      	it	eq
 8003b3e:	6031      	streq	r1, [r6, #0]
 8003b40:	5162      	str	r2, [r4, r5]
 8003b42:	604b      	str	r3, [r1, #4]
 8003b44:	4638      	mov	r0, r7
 8003b46:	f104 060b 	add.w	r6, r4, #11
 8003b4a:	f000 f865 	bl	8003c18 <__malloc_unlock>
 8003b4e:	f026 0607 	bic.w	r6, r6, #7
 8003b52:	1d23      	adds	r3, r4, #4
 8003b54:	1af2      	subs	r2, r6, r3
 8003b56:	d0b6      	beq.n	8003ac6 <_malloc_r+0x22>
 8003b58:	1b9b      	subs	r3, r3, r6
 8003b5a:	50a3      	str	r3, [r4, r2]
 8003b5c:	e7b3      	b.n	8003ac6 <_malloc_r+0x22>
 8003b5e:	6862      	ldr	r2, [r4, #4]
 8003b60:	42a3      	cmp	r3, r4
 8003b62:	bf0c      	ite	eq
 8003b64:	6032      	streq	r2, [r6, #0]
 8003b66:	605a      	strne	r2, [r3, #4]
 8003b68:	e7ec      	b.n	8003b44 <_malloc_r+0xa0>
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	6864      	ldr	r4, [r4, #4]
 8003b6e:	e7b2      	b.n	8003ad6 <_malloc_r+0x32>
 8003b70:	4634      	mov	r4, r6
 8003b72:	6876      	ldr	r6, [r6, #4]
 8003b74:	e7b9      	b.n	8003aea <_malloc_r+0x46>
 8003b76:	230c      	movs	r3, #12
 8003b78:	603b      	str	r3, [r7, #0]
 8003b7a:	4638      	mov	r0, r7
 8003b7c:	f000 f84c 	bl	8003c18 <__malloc_unlock>
 8003b80:	e7a1      	b.n	8003ac6 <_malloc_r+0x22>
 8003b82:	6025      	str	r5, [r4, #0]
 8003b84:	e7de      	b.n	8003b44 <_malloc_r+0xa0>
 8003b86:	bf00      	nop
 8003b88:	20000170 	.word	0x20000170

08003b8c <_realloc_r>:
 8003b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b90:	4680      	mov	r8, r0
 8003b92:	4614      	mov	r4, r2
 8003b94:	460e      	mov	r6, r1
 8003b96:	b921      	cbnz	r1, 8003ba2 <_realloc_r+0x16>
 8003b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	f7ff bf81 	b.w	8003aa4 <_malloc_r>
 8003ba2:	b92a      	cbnz	r2, 8003bb0 <_realloc_r+0x24>
 8003ba4:	f7ff ff12 	bl	80039cc <_free_r>
 8003ba8:	4625      	mov	r5, r4
 8003baa:	4628      	mov	r0, r5
 8003bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bb0:	f000 f838 	bl	8003c24 <_malloc_usable_size_r>
 8003bb4:	4284      	cmp	r4, r0
 8003bb6:	4607      	mov	r7, r0
 8003bb8:	d802      	bhi.n	8003bc0 <_realloc_r+0x34>
 8003bba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003bbe:	d812      	bhi.n	8003be6 <_realloc_r+0x5a>
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	f7ff ff6e 	bl	8003aa4 <_malloc_r>
 8003bc8:	4605      	mov	r5, r0
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d0ed      	beq.n	8003baa <_realloc_r+0x1e>
 8003bce:	42bc      	cmp	r4, r7
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	4631      	mov	r1, r6
 8003bd4:	bf28      	it	cs
 8003bd6:	463a      	movcs	r2, r7
 8003bd8:	f7ff fed0 	bl	800397c <memcpy>
 8003bdc:	4631      	mov	r1, r6
 8003bde:	4640      	mov	r0, r8
 8003be0:	f7ff fef4 	bl	80039cc <_free_r>
 8003be4:	e7e1      	b.n	8003baa <_realloc_r+0x1e>
 8003be6:	4635      	mov	r5, r6
 8003be8:	e7df      	b.n	8003baa <_realloc_r+0x1e>
	...

08003bec <_sbrk_r>:
 8003bec:	b538      	push	{r3, r4, r5, lr}
 8003bee:	4d06      	ldr	r5, [pc, #24]	; (8003c08 <_sbrk_r+0x1c>)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	602b      	str	r3, [r5, #0]
 8003bf8:	f7fc ff4a 	bl	8000a90 <_sbrk>
 8003bfc:	1c43      	adds	r3, r0, #1
 8003bfe:	d102      	bne.n	8003c06 <_sbrk_r+0x1a>
 8003c00:	682b      	ldr	r3, [r5, #0]
 8003c02:	b103      	cbz	r3, 8003c06 <_sbrk_r+0x1a>
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	bd38      	pop	{r3, r4, r5, pc}
 8003c08:	20000178 	.word	0x20000178

08003c0c <__malloc_lock>:
 8003c0c:	4801      	ldr	r0, [pc, #4]	; (8003c14 <__malloc_lock+0x8>)
 8003c0e:	f000 b811 	b.w	8003c34 <__retarget_lock_acquire_recursive>
 8003c12:	bf00      	nop
 8003c14:	2000017c 	.word	0x2000017c

08003c18 <__malloc_unlock>:
 8003c18:	4801      	ldr	r0, [pc, #4]	; (8003c20 <__malloc_unlock+0x8>)
 8003c1a:	f000 b80c 	b.w	8003c36 <__retarget_lock_release_recursive>
 8003c1e:	bf00      	nop
 8003c20:	2000017c 	.word	0x2000017c

08003c24 <_malloc_usable_size_r>:
 8003c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c28:	1f18      	subs	r0, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bfbc      	itt	lt
 8003c2e:	580b      	ldrlt	r3, [r1, r0]
 8003c30:	18c0      	addlt	r0, r0, r3
 8003c32:	4770      	bx	lr

08003c34 <__retarget_lock_acquire_recursive>:
 8003c34:	4770      	bx	lr

08003c36 <__retarget_lock_release_recursive>:
 8003c36:	4770      	bx	lr

08003c38 <_init>:
 8003c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3a:	bf00      	nop
 8003c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3e:	bc08      	pop	{r3}
 8003c40:	469e      	mov	lr, r3
 8003c42:	4770      	bx	lr

08003c44 <_fini>:
 8003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c46:	bf00      	nop
 8003c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4a:	bc08      	pop	{r3}
 8003c4c:	469e      	mov	lr, r3
 8003c4e:	4770      	bx	lr
