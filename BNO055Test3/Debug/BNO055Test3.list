
BNO055Test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007338  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08007518  08007518  00017518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800797c  0800797c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800797c  0800797c  0001797c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007984  08007984  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007984  08007984  00017984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007988  08007988  00017988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800798c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200001dc  08007b68  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08007b68  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffbb  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209c  00000000  00000000  000301c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00032268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  00032f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e2c6  00000000  00000000  00033b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010304  00000000  00000000  00051e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bae25  00000000  00000000  0006215a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011cf7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004754  00000000  00000000  0011cfd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007500 	.word	0x08007500

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08007500 	.word	0x08007500

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	b092      	sub	sp, #72	; 0x48
 8000f00:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f02:	f000 fc96 	bl	8001832 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f06:	f000 f8b1 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0a:	f000 f987 	bl	800121c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f0e:	f000 f939 	bl	8001184 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f12:	f000 f8f7 	bl	8001104 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BNO055_Init();
 8000f16:	f000 f9c1 	bl	800129c <BNO055_Init>

  uint8_t Rxbuffer[6]={};
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8000f1e:	2300      	movs	r3, #0
 8000f20:	86bb      	strh	r3, [r7, #52]	; 0x34
  //uint8_t buff[20];
  float euler[3];
  uint8_t i;
  uint8_t Rxbuff;

  char eulerheader[3][10] = {"x", "y", "z"};
 8000f22:	4b4d      	ldr	r3, [pc, #308]	; (8001058 <main+0x15c>)
 8000f24:	1d3c      	adds	r4, r7, #4
 8000f26:	461d      	mov	r5, r3
 8000f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f30:	c407      	stmia	r4!, {r0, r1, r2}
 8000f32:	8023      	strh	r3, [r4, #0]


  HAL_I2C_Mem_Read(&hi2c1, 0x28 << 1, 0x3A, I2C_MEMADD_SIZE_8BIT, &Rxbuff, 1, 100);
 8000f34:	2364      	movs	r3, #100	; 0x64
 8000f36:	9302      	str	r3, [sp, #8]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2301      	movs	r3, #1
 8000f44:	223a      	movs	r2, #58	; 0x3a
 8000f46:	2150      	movs	r1, #80	; 0x50
 8000f48:	4844      	ldr	r0, [pc, #272]	; (800105c <main+0x160>)
 8000f4a:	f001 f927 	bl	800219c <HAL_I2C_Mem_Read>
	print_int(Rxbuff, "Error");
 8000f4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f52:	4943      	ldr	r1, [pc, #268]	; (8001060 <main+0x164>)
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 fa07 	bl	8001368 <print_int>

	HAL_I2C_Mem_Read(&hi2c1, 0x28 << 1, 0x00, I2C_MEMADD_SIZE_8BIT, &Rxbuff, 1, 100);
 8000f5a:	2364      	movs	r3, #100	; 0x64
 8000f5c:	9302      	str	r3, [sp, #8]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	9301      	str	r3, [sp, #4]
 8000f62:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2150      	movs	r1, #80	; 0x50
 8000f6e:	483b      	ldr	r0, [pc, #236]	; (800105c <main+0x160>)
 8000f70:	f001 f914 	bl	800219c <HAL_I2C_Mem_Read>
	print_int(Rxbuff, "ID");
 8000f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f78:	493a      	ldr	r1, [pc, #232]	; (8001064 <main+0x168>)
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f9f4 	bl	8001368 <print_int>

	HAL_I2C_Mem_Read(&hi2c1, 0x28 << 1, 0x34, I2C_MEMADD_SIZE_8BIT, &Rxbuff, 1, 100);
 8000f80:	2364      	movs	r3, #100	; 0x64
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	2301      	movs	r3, #1
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	2234      	movs	r2, #52	; 0x34
 8000f92:	2150      	movs	r1, #80	; 0x50
 8000f94:	4831      	ldr	r0, [pc, #196]	; (800105c <main+0x160>)
 8000f96:	f001 f901 	bl	800219c <HAL_I2C_Mem_Read>
	print_int(Rxbuff, "Temp");
 8000f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f9e:	4932      	ldr	r1, [pc, #200]	; (8001068 <main+0x16c>)
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f9e1 	bl	8001368 <print_int>
	HAL_Delay(5000);
 8000fa6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000faa:	f000 fcb3 	bl	8001914 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_I2C_Mem_Read(&hi2c1, BNO_ADDRESS << 1, 0x1A, I2C_MEMADD_SIZE_8BIT, Rxbuffer, 6, 100);
 8000fae:	2364      	movs	r3, #100	; 0x64
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	2306      	movs	r3, #6
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	221a      	movs	r2, #26
 8000fc0:	2150      	movs	r1, #80	; 0x50
 8000fc2:	4826      	ldr	r0, [pc, #152]	; (800105c <main+0x160>)
 8000fc4:	f001 f8ea 	bl	800219c <HAL_I2C_Mem_Read>
	  	  for(i=0; i<3; i++){
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000fce:	e03a      	b.n	8001046 <main+0x14a>
	  		  euler[i] = (float)((Rxbuffer[i*2+1] << 8) | Rxbuffer[i*2])/16;
 8000fd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	3338      	adds	r3, #56	; 0x38
 8000fda:	443b      	add	r3, r7
 8000fdc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000fe6:	0052      	lsls	r2, r2, #1
 8000fe8:	3238      	adds	r2, #56	; 0x38
 8000fea:	443a      	add	r2, r7
 8000fec:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ffa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ffe:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	3338      	adds	r3, #56	; 0x38
 800100a:	443b      	add	r3, r7
 800100c:	3b14      	subs	r3, #20
 800100e:	edc3 7a00 	vstr	s15, [r3]
	  		  print_float(euler[i], eulerheader[i]);
 8001012:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	3338      	adds	r3, #56	; 0x38
 800101a:	443b      	add	r3, r7
 800101c:	3b14      	subs	r3, #20
 800101e:	edd3 7a00 	vldr	s15, [r3]
 8001022:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001026:	1d39      	adds	r1, r7, #4
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	440b      	add	r3, r1
 8001032:	4618      	mov	r0, r3
 8001034:	eeb0 0a67 	vmov.f32	s0, s15
 8001038:	f000 f9b4 	bl	80013a4 <print_float>
	  	  for(i=0; i<3; i++){
 800103c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001040:	3301      	adds	r3, #1
 8001042:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001046:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800104a:	2b02      	cmp	r3, #2
 800104c:	d9c0      	bls.n	8000fd0 <main+0xd4>

	  	  }
	  HAL_Delay(1000);
 800104e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001052:	f000 fc5f 	bl	8001914 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, BNO_ADDRESS << 1, 0x1A, I2C_MEMADD_SIZE_8BIT, Rxbuffer, 6, 100);
 8001056:	e7aa      	b.n	8000fae <main+0xb2>
 8001058:	0800752c 	.word	0x0800752c
 800105c:	200001f8 	.word	0x200001f8
 8001060:	08007518 	.word	0x08007518
 8001064:	08007520 	.word	0x08007520
 8001068:	08007524 	.word	0x08007524

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	; 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	2238      	movs	r2, #56	; 0x38
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fb42 	bl	8004704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800108e:	2000      	movs	r0, #0
 8001090:	f001 fcdc 	bl	8002a4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001094:	2302      	movs	r3, #2
 8001096:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109e:	2340      	movs	r3, #64	; 0x40
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a2:	2302      	movs	r3, #2
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a6:	2302      	movs	r3, #2
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010aa:	2304      	movs	r3, #4
 80010ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010ae:	2355      	movs	r3, #85	; 0x55
 80010b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b2:	2302      	movs	r3, #2
 80010b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	4618      	mov	r0, r3
 80010c4:	f001 fd66 	bl	8002b94 <HAL_RCC_OscConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010ce:	f000 f98d 	bl	80013ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d2:	230f      	movs	r3, #15
 80010d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d6:	2303      	movs	r3, #3
 80010d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2104      	movs	r1, #4
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 f86a 	bl	80031c4 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010f6:	f000 f979 	bl	80013ec <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3750      	adds	r7, #80	; 0x50
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <MX_I2C1_Init+0x74>)
 800110a:	4a1c      	ldr	r2, [pc, #112]	; (800117c <MX_I2C1_Init+0x78>)
 800110c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_I2C1_Init+0x74>)
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <MX_I2C1_Init+0x7c>)
 8001112:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MX_I2C1_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_I2C1_Init+0x74>)
 800111c:	2201      	movs	r2, #1
 800111e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_I2C1_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_I2C1_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_I2C1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_I2C1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_I2C1_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800113e:	480e      	ldr	r0, [pc, #56]	; (8001178 <MX_I2C1_Init+0x74>)
 8001140:	f000 fe88 	bl	8001e54 <HAL_I2C_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800114a:	f000 f94f 	bl	80013ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800114e:	2100      	movs	r1, #0
 8001150:	4809      	ldr	r0, [pc, #36]	; (8001178 <MX_I2C1_Init+0x74>)
 8001152:	f001 fbe3 	bl	800291c <HAL_I2CEx_ConfigAnalogFilter>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800115c:	f000 f946 	bl	80013ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001160:	2100      	movs	r1, #0
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_I2C1_Init+0x74>)
 8001164:	f001 fc25 	bl	80029b2 <HAL_I2CEx_ConfigDigitalFilter>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800116e:	f000 f93d 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200001f8 	.word	0x200001f8
 800117c:	40005400 	.word	0x40005400
 8001180:	10802d9b 	.word	0x10802d9b

08001184 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <MX_USART2_UART_Init+0x90>)
 800118a:	4a23      	ldr	r2, [pc, #140]	; (8001218 <MX_USART2_UART_Init+0x94>)
 800118c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <MX_USART2_UART_Init+0x90>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <MX_USART2_UART_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <MX_USART2_UART_Init+0x90>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011cc:	4811      	ldr	r0, [pc, #68]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011ce:	f002 fc05 	bl	80039dc <HAL_UART_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011d8:	f000 f908 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011dc:	2100      	movs	r1, #0
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011e0:	f003 f99c 	bl	800451c <HAL_UARTEx_SetTxFifoThreshold>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011ea:	f000 f8ff 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ee:	2100      	movs	r1, #0
 80011f0:	4808      	ldr	r0, [pc, #32]	; (8001214 <MX_USART2_UART_Init+0x90>)
 80011f2:	f003 f9d1 	bl	8004598 <HAL_UARTEx_SetRxFifoThreshold>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011fc:	f000 f8f6 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_USART2_UART_Init+0x90>)
 8001202:	f003 f952 	bl	80044aa <HAL_UARTEx_DisableFifoMode>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800120c:	f000 f8ee 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000244 	.word	0x20000244
 8001218:	40004400 	.word	0x40004400

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_GPIO_Init+0x78>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a17      	ldr	r2, [pc, #92]	; (8001294 <MX_GPIO_Init+0x78>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <MX_GPIO_Init+0x78>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_GPIO_Init+0x78>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a11      	ldr	r2, [pc, #68]	; (8001294 <MX_GPIO_Init+0x78>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_GPIO_Init+0x78>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <MX_GPIO_Init+0x7c>)
 800126a:	f000 fddb 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800126e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	4619      	mov	r1, r3
 8001286:	4804      	ldr	r0, [pc, #16]	; (8001298 <MX_GPIO_Init+0x7c>)
 8001288:	f000 fc4a 	bl	8001b20 <HAL_GPIO_Init>

}
 800128c:	bf00      	nop
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000
 8001298:	48000400 	.word	0x48000400

0800129c <BNO055_Init>:

/* USER CODE BEGIN 4 */
void BNO055_Init(){
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af04      	add	r7, sp, #16
	HAL_Delay(700);
 80012a2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80012a6:	f000 fb35 	bl	8001914 <HAL_Delay>


	//Txbuff = 0x20;
	//HAL_I2C_Mem_Write(&hi2c1, 0x28 << 1, 0x3F, I2C_MEMADD_SIZE_8BIT, &Txbuff, 1, 100); //system trigger

	Txbuff = 0x00;
 80012aa:	2300      	movs	r3, #0
 80012ac:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x28 << 1, 0x3E, I2C_MEMADD_SIZE_8BIT, &Txbuff, 1, 100); //power mode
 80012ae:	2364      	movs	r3, #100	; 0x64
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	223e      	movs	r2, #62	; 0x3e
 80012be:	2150      	movs	r1, #80	; 0x50
 80012c0:	4825      	ldr	r0, [pc, #148]	; (8001358 <BNO055_Init+0xbc>)
 80012c2:	f000 fe57 	bl	8001f74 <HAL_I2C_Mem_Write>

	Txbuff = 0x0C;
 80012c6:	230c      	movs	r3, #12
 80012c8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x28 << 1, 0x3D, I2C_MEMADD_SIZE_8BIT, &Txbuff, 1, 100);//using Nine Degree of Freedom mode
 80012ca:	2364      	movs	r3, #100	; 0x64
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	2301      	movs	r3, #1
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	223d      	movs	r2, #61	; 0x3d
 80012da:	2150      	movs	r1, #80	; 0x50
 80012dc:	481e      	ldr	r0, [pc, #120]	; (8001358 <BNO055_Init+0xbc>)
 80012de:	f000 fe49 	bl	8001f74 <HAL_I2C_Mem_Write>




	HAL_I2C_Mem_Read(&hi2c1, 0x28 << 1, 0x3A, I2C_MEMADD_SIZE_8BIT, &Rxbuff, 1, 100);
 80012e2:	2364      	movs	r3, #100	; 0x64
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	1dbb      	adds	r3, r7, #6
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	223a      	movs	r2, #58	; 0x3a
 80012f2:	2150      	movs	r1, #80	; 0x50
 80012f4:	4818      	ldr	r0, [pc, #96]	; (8001358 <BNO055_Init+0xbc>)
 80012f6:	f000 ff51 	bl	800219c <HAL_I2C_Mem_Read>
	print_int(Rxbuff, "Error");
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	4917      	ldr	r1, [pc, #92]	; (800135c <BNO055_Init+0xc0>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f832 	bl	8001368 <print_int>

	HAL_I2C_Mem_Read(&hi2c1, 0x28 << 1, 0x00, I2C_MEMADD_SIZE_8BIT, &Rxbuff, 1, 100);
 8001304:	2364      	movs	r3, #100	; 0x64
 8001306:	9302      	str	r3, [sp, #8]
 8001308:	2301      	movs	r3, #1
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	1dbb      	adds	r3, r7, #6
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2301      	movs	r3, #1
 8001312:	2200      	movs	r2, #0
 8001314:	2150      	movs	r1, #80	; 0x50
 8001316:	4810      	ldr	r0, [pc, #64]	; (8001358 <BNO055_Init+0xbc>)
 8001318:	f000 ff40 	bl	800219c <HAL_I2C_Mem_Read>
	print_int(Rxbuff, "ID");
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	4910      	ldr	r1, [pc, #64]	; (8001360 <BNO055_Init+0xc4>)
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f821 	bl	8001368 <print_int>

	HAL_I2C_Mem_Read(&hi2c1, 0x28 << 1, 0x34, I2C_MEMADD_SIZE_8BIT, &Rxbuff, 1, 100);
 8001326:	2364      	movs	r3, #100	; 0x64
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	2301      	movs	r3, #1
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	1dbb      	adds	r3, r7, #6
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2301      	movs	r3, #1
 8001334:	2234      	movs	r2, #52	; 0x34
 8001336:	2150      	movs	r1, #80	; 0x50
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <BNO055_Init+0xbc>)
 800133a:	f000 ff2f 	bl	800219c <HAL_I2C_Mem_Read>
	print_int(Rxbuff, "Temp");
 800133e:	79bb      	ldrb	r3, [r7, #6]
 8001340:	4908      	ldr	r1, [pc, #32]	; (8001364 <BNO055_Init+0xc8>)
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f810 	bl	8001368 <print_int>


	//print_int(30, "testing");
	HAL_Delay(100);
 8001348:	2064      	movs	r0, #100	; 0x64
 800134a:	f000 fae3 	bl	8001914 <HAL_Delay>


}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200001f8 	.word	0x200001f8
 800135c:	08007518 	.word	0x08007518
 8001360:	08007520 	.word	0x08007520
 8001364:	08007524 	.word	0x08007524

08001368 <print_int>:

void print_int(int num, char header[]){
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af02      	add	r7, sp, #8
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]

	char message[20];
	snprintf(message, sizeof(message), "%s: %d\r\n", header, num);
 8001372:	f107 000c 	add.w	r0, r7, #12
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <print_int+0x34>)
 800137e:	2114      	movs	r1, #20
 8001380:	f003 fe32 	bl	8004fe8 <sniprintf>
	HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 8001384:	f107 010c 	add.w	r1, r7, #12
 8001388:	2364      	movs	r3, #100	; 0x64
 800138a:	2214      	movs	r2, #20
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <print_int+0x38>)
 800138e:	f002 fb75 	bl	8003a7c <HAL_UART_Transmit>
}
 8001392:	bf00      	nop
 8001394:	3720      	adds	r7, #32
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	0800754c 	.word	0x0800754c
 80013a0:	20000244 	.word	0x20000244

080013a4 <print_float>:

void print_float(float num, char header[]){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80013ae:	6038      	str	r0, [r7, #0]

	char message[20];
	snprintf(message, sizeof(message), "%s: %f\r\n", header, num);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff f8f1 	bl	8000598 <__aeabi_f2d>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	f107 000c 	add.w	r0, r7, #12
 80013be:	e9cd 2300 	strd	r2, r3, [sp]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <print_float+0x40>)
 80013c6:	2114      	movs	r1, #20
 80013c8:	f003 fe0e 	bl	8004fe8 <sniprintf>
	HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 80013cc:	f107 010c 	add.w	r1, r7, #12
 80013d0:	2364      	movs	r3, #100	; 0x64
 80013d2:	2214      	movs	r2, #20
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <print_float+0x44>)
 80013d6:	f002 fb51 	bl	8003a7c <HAL_UART_Transmit>
}
 80013da:	bf00      	nop
 80013dc:	3720      	adds	r7, #32
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	08007558 	.word	0x08007558
 80013e8:	20000244 	.word	0x20000244

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <Error_Handler+0x8>
	...

080013f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_MspInit+0x44>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001402:	4a0e      	ldr	r2, [pc, #56]	; (800143c <HAL_MspInit+0x44>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6613      	str	r3, [r2, #96]	; 0x60
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <HAL_MspInit+0x44>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_MspInit+0x44>)
 8001418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_MspInit+0x44>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	6593      	str	r3, [r2, #88]	; 0x58
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_MspInit+0x44>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000

08001440 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b09c      	sub	sp, #112	; 0x70
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	2244      	movs	r2, #68	; 0x44
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f003 f94f 	bl	8004704 <memset>
  if(hi2c->Instance==I2C1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a2d      	ldr	r2, [pc, #180]	; (8001520 <HAL_I2C_MspInit+0xe0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d153      	bne.n	8001518 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001470:	2340      	movs	r3, #64	; 0x40
 8001472:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001474:	2300      	movs	r3, #0
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001478:	f107 0318 	add.w	r3, r7, #24
 800147c:	4618      	mov	r0, r3
 800147e:	f002 f8bd 	bl	80035fc <HAL_RCCEx_PeriphCLKConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001488:	f7ff ffb0 	bl	80013ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148c:	4b25      	ldr	r3, [pc, #148]	; (8001524 <HAL_I2C_MspInit+0xe4>)
 800148e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001490:	4a24      	ldr	r2, [pc, #144]	; (8001524 <HAL_I2C_MspInit+0xe4>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001498:	4b22      	ldr	r3, [pc, #136]	; (8001524 <HAL_I2C_MspInit+0xe4>)
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <HAL_I2C_MspInit+0xe4>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a8:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <HAL_I2C_MspInit+0xe4>)
 80014aa:	f043 0302 	orr.w	r3, r3, #2
 80014ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b0:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_I2C_MspInit+0xe4>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c2:	2312      	movs	r3, #18
 80014c4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ce:	2304      	movs	r3, #4
 80014d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f000 fb20 	bl	8001b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e4:	2312      	movs	r3, #18
 80014e6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f0:	2304      	movs	r3, #4
 80014f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014f8:	4619      	mov	r1, r3
 80014fa:	480b      	ldr	r0, [pc, #44]	; (8001528 <HAL_I2C_MspInit+0xe8>)
 80014fc:	f000 fb10 	bl	8001b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_I2C_MspInit+0xe4>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_I2C_MspInit+0xe4>)
 8001506:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800150a:	6593      	str	r3, [r2, #88]	; 0x58
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_I2C_MspInit+0xe4>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001518:	bf00      	nop
 800151a:	3770      	adds	r7, #112	; 0x70
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40005400 	.word	0x40005400
 8001524:	40021000 	.word	0x40021000
 8001528:	48000400 	.word	0x48000400

0800152c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b09a      	sub	sp, #104	; 0x68
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	2244      	movs	r2, #68	; 0x44
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f003 f8d9 	bl	8004704 <memset>
  if(huart->Instance==USART2)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a1f      	ldr	r2, [pc, #124]	; (80015d4 <HAL_UART_MspInit+0xa8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d136      	bne.n	80015ca <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800155c:	2302      	movs	r3, #2
 800155e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	4618      	mov	r0, r3
 800156a:	f002 f847 	bl	80035fc <HAL_RCCEx_PeriphCLKConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001574:	f7ff ff3a 	bl	80013ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_UART_MspInit+0xac>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157c:	4a16      	ldr	r2, [pc, #88]	; (80015d8 <HAL_UART_MspInit+0xac>)
 800157e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001582:	6593      	str	r3, [r2, #88]	; 0x58
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_UART_MspInit+0xac>)
 8001586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_UART_MspInit+0xac>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_UART_MspInit+0xac>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_UART_MspInit+0xac>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80015a8:	230c      	movs	r3, #12
 80015aa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b8:	2307      	movs	r3, #7
 80015ba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015c0:	4619      	mov	r1, r3
 80015c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c6:	f000 faab 	bl	8001b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3768      	adds	r7, #104	; 0x68
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40004400 	.word	0x40004400
 80015d8:	40021000 	.word	0x40021000

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <NMI_Handler+0x4>

080015e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MemManage_Handler+0x4>

080015ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001628:	f000 f956 	bl	80018d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
	return 1;
 8001634:	2301      	movs	r3, #1
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_kill>:

int _kill(int pid, int sig)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800164a:	f003 f831 	bl	80046b0 <__errno>
 800164e:	4603      	mov	r3, r0
 8001650:	2216      	movs	r2, #22
 8001652:	601a      	str	r2, [r3, #0]
	return -1;
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_exit>:

void _exit (int status)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001668:	f04f 31ff 	mov.w	r1, #4294967295
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ffe7 	bl	8001640 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001672:	e7fe      	b.n	8001672 <_exit+0x12>

08001674 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e00a      	b.n	800169c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001686:	f3af 8000 	nop.w
 800168a:	4601      	mov	r1, r0
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	60ba      	str	r2, [r7, #8]
 8001692:	b2ca      	uxtb	r2, r1
 8001694:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dbf0      	blt.n	8001686 <_read+0x12>
	}

return len;
 80016a4:	687b      	ldr	r3, [r7, #4]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e009      	b.n	80016d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	60ba      	str	r2, [r7, #8]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dbf1      	blt.n	80016c0 <_write+0x12>
	}
	return len;
 80016dc:	687b      	ldr	r3, [r7, #4]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_close>:

int _close(int file)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
	return -1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800170e:	605a      	str	r2, [r3, #4]
	return 0;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <_isatty>:

int _isatty(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	return 1;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
	return 0;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001758:	4a14      	ldr	r2, [pc, #80]	; (80017ac <_sbrk+0x5c>)
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <_sbrk+0x60>)
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <_sbrk+0x64>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <_sbrk+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001780:	f002 ff96 	bl	80046b0 <__errno>
 8001784:	4603      	mov	r3, r0
 8001786:	220c      	movs	r2, #12
 8001788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e009      	b.n	80017a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <_sbrk+0x64>)
 80017a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20008000 	.word	0x20008000
 80017b0:	00000400 	.word	0x00000400
 80017b4:	200002d4 	.word	0x200002d4
 80017b8:	200002f0 	.word	0x200002f0

080017bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e4:	480d      	ldr	r0, [pc, #52]	; (800181c <LoopForever+0x6>)
  ldr r1, =_edata
 80017e6:	490e      	ldr	r1, [pc, #56]	; (8001820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017e8:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <LoopForever+0xe>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017fc:	4c0b      	ldr	r4, [pc, #44]	; (800182c <LoopForever+0x16>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800180a:	f7ff ffd7 	bl	80017bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f002 ff55 	bl	80046bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001812:	f7ff fb73 	bl	8000efc <main>

08001816 <LoopForever>:

LoopForever:
    b LoopForever
 8001816:	e7fe      	b.n	8001816 <LoopForever>
  ldr   r0, =_estack
 8001818:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001824:	0800798c 	.word	0x0800798c
  ldr r2, =_sbss
 8001828:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800182c:	200002ec 	.word	0x200002ec

08001830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC1_2_IRQHandler>

08001832 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f93d 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001842:	2000      	movs	r0, #0
 8001844:	f000 f80e 	bl	8001864 <HAL_InitTick>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	71fb      	strb	r3, [r7, #7]
 8001852:	e001      	b.n	8001858 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001854:	f7ff fdd0 	bl	80013f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001858:	79fb      	ldrb	r3, [r7, #7]

}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_InitTick+0x68>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d022      	beq.n	80018be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_InitTick+0x6c>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_InitTick+0x68>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001884:	fbb1 f3f3 	udiv	r3, r1, r3
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	4618      	mov	r0, r3
 800188e:	f000 f93a 	bl	8001b06 <HAL_SYSTICK_Config>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10f      	bne.n	80018b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b0f      	cmp	r3, #15
 800189c:	d809      	bhi.n	80018b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189e:	2200      	movs	r2, #0
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	f04f 30ff 	mov.w	r0, #4294967295
 80018a6:	f000 f914 	bl	8001ad2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_InitTick+0x70>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	e007      	b.n	80018c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
 80018b6:	e004      	b.n	80018c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
 80018bc:	e001      	b.n	80018c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000008 	.word	0x20000008
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000004 	.word	0x20000004

080018d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_IncTick+0x1c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_IncTick+0x20>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a03      	ldr	r2, [pc, #12]	; (80018f4 <HAL_IncTick+0x1c>)
 80018e8:	6013      	str	r3, [r2, #0]
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	200002d8 	.word	0x200002d8
 80018f8:	20000008 	.word	0x20000008

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	200002d8 	.word	0x200002d8

08001914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff ffee 	bl	80018fc <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192c:	d004      	beq.n	8001938 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_Delay+0x40>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4413      	add	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001938:	bf00      	nop
 800193a:	f7ff ffdf 	bl	80018fc <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	429a      	cmp	r2, r3
 8001948:	d8f7      	bhi.n	800193a <HAL_Delay+0x26>
  {
  }
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000008 	.word	0x20000008

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	; (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	; (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	; 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f7ff ff8e 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff47 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae0:	f7ff ff5e 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001ae4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	6978      	ldr	r0, [r7, #20]
 8001aec:	f7ff ff90 	bl	8001a10 <NVIC_EncodePriority>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff5f 	bl	80019bc <__NVIC_SetPriority>
}
 8001afe:	bf00      	nop
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffb2 	bl	8001a78 <SysTick_Config>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b2e:	e15a      	b.n	8001de6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 814c 	beq.w	8001de0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d005      	beq.n	8001b60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d130      	bne.n	8001bc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b96:	2201      	movs	r2, #1
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	f003 0201 	and.w	r2, r3, #1
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d017      	beq.n	8001bfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	2203      	movs	r2, #3
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d123      	bne.n	8001c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	08da      	lsrs	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3208      	adds	r2, #8
 8001c4c:	6939      	ldr	r1, [r7, #16]
 8001c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0203 	and.w	r2, r3, #3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80a6 	beq.w	8001de0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c94:	4b5b      	ldr	r3, [pc, #364]	; (8001e04 <HAL_GPIO_Init+0x2e4>)
 8001c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c98:	4a5a      	ldr	r2, [pc, #360]	; (8001e04 <HAL_GPIO_Init+0x2e4>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6613      	str	r3, [r2, #96]	; 0x60
 8001ca0:	4b58      	ldr	r3, [pc, #352]	; (8001e04 <HAL_GPIO_Init+0x2e4>)
 8001ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cac:	4a56      	ldr	r2, [pc, #344]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cd6:	d01f      	beq.n	8001d18 <HAL_GPIO_Init+0x1f8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a4c      	ldr	r2, [pc, #304]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d019      	beq.n	8001d14 <HAL_GPIO_Init+0x1f4>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a4b      	ldr	r2, [pc, #300]	; (8001e10 <HAL_GPIO_Init+0x2f0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d013      	beq.n	8001d10 <HAL_GPIO_Init+0x1f0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a4a      	ldr	r2, [pc, #296]	; (8001e14 <HAL_GPIO_Init+0x2f4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00d      	beq.n	8001d0c <HAL_GPIO_Init+0x1ec>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a49      	ldr	r2, [pc, #292]	; (8001e18 <HAL_GPIO_Init+0x2f8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d007      	beq.n	8001d08 <HAL_GPIO_Init+0x1e8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a48      	ldr	r2, [pc, #288]	; (8001e1c <HAL_GPIO_Init+0x2fc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d101      	bne.n	8001d04 <HAL_GPIO_Init+0x1e4>
 8001d00:	2305      	movs	r3, #5
 8001d02:	e00a      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d04:	2306      	movs	r3, #6
 8001d06:	e008      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d08:	2304      	movs	r3, #4
 8001d0a:	e006      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e004      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e002      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	f002 0203 	and.w	r2, r2, #3
 8001d20:	0092      	lsls	r2, r2, #2
 8001d22:	4093      	lsls	r3, r2
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d2a:	4937      	ldr	r1, [pc, #220]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d38:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d5c:	4a30      	ldr	r2, [pc, #192]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d62:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d86:	4a26      	ldr	r2, [pc, #152]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d8c:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001db0:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dda:	4a11      	ldr	r2, [pc, #68]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3301      	adds	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f47f ae9d 	bne.w	8001b30 <HAL_GPIO_Init+0x10>
  }
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40010000 	.word	0x40010000
 8001e0c:	48000400 	.word	0x48000400
 8001e10:	48000800 	.word	0x48000800
 8001e14:	48000c00 	.word	0x48000c00
 8001e18:	48001000 	.word	0x48001000
 8001e1c:	48001400 	.word	0x48001400
 8001e20:	40010400 	.word	0x40010400

08001e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e34:	787b      	ldrb	r3, [r7, #1]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e40:	e002      	b.n	8001e48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e081      	b.n	8001f6a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d106      	bne.n	8001e80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fae0 	bl	8001440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2224      	movs	r2, #36	; 0x24
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ea4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d107      	bne.n	8001ece <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	e006      	b.n	8001edc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001eda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d104      	bne.n	8001eee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69d9      	ldr	r1, [r3, #28]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1a      	ldr	r2, [r3, #32]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2220      	movs	r2, #32
 8001f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	4608      	mov	r0, r1
 8001f7e:	4611      	mov	r1, r2
 8001f80:	461a      	mov	r2, r3
 8001f82:	4603      	mov	r3, r0
 8001f84:	817b      	strh	r3, [r7, #10]
 8001f86:	460b      	mov	r3, r1
 8001f88:	813b      	strh	r3, [r7, #8]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	f040 80f9 	bne.w	800218e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_I2C_Mem_Write+0x34>
 8001fa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0ed      	b.n	8002190 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_I2C_Mem_Write+0x4e>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e0e6      	b.n	8002190 <HAL_I2C_Mem_Write+0x21c>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fca:	f7ff fc97 	bl	80018fc <HAL_GetTick>
 8001fce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2319      	movs	r3, #25
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fac3 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0d1      	b.n	8002190 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2221      	movs	r2, #33	; 0x21
 8001ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2240      	movs	r2, #64	; 0x40
 8001ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a3a      	ldr	r2, [r7, #32]
 8002006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800200c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002014:	88f8      	ldrh	r0, [r7, #6]
 8002016:	893a      	ldrh	r2, [r7, #8]
 8002018:	8979      	ldrh	r1, [r7, #10]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	4603      	mov	r3, r0
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 f9d3 	bl	80023d0 <I2C_RequestMemoryWrite>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0a9      	b.n	8002190 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002040:	b29b      	uxth	r3, r3
 8002042:	2bff      	cmp	r3, #255	; 0xff
 8002044:	d90e      	bls.n	8002064 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	22ff      	movs	r2, #255	; 0xff
 800204a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	b2da      	uxtb	r2, r3
 8002052:	8979      	ldrh	r1, [r7, #10]
 8002054:	2300      	movs	r3, #0
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 fc2b 	bl	80028b8 <I2C_TransferConfig>
 8002062:	e00f      	b.n	8002084 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002072:	b2da      	uxtb	r2, r3
 8002074:	8979      	ldrh	r1, [r7, #10]
 8002076:	2300      	movs	r3, #0
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 fc1a 	bl	80028b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 faad 	bl	80025e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e07b      	b.n	8002190 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c0:	3b01      	subs	r3, #1
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d034      	beq.n	800213c <HAL_I2C_Mem_Write+0x1c8>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d130      	bne.n	800213c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e0:	2200      	movs	r2, #0
 80020e2:	2180      	movs	r1, #128	; 0x80
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 fa3f 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e04d      	b.n	8002190 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2bff      	cmp	r3, #255	; 0xff
 80020fc:	d90e      	bls.n	800211c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	22ff      	movs	r2, #255	; 0xff
 8002102:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002108:	b2da      	uxtb	r2, r3
 800210a:	8979      	ldrh	r1, [r7, #10]
 800210c:	2300      	movs	r3, #0
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fbcf 	bl	80028b8 <I2C_TransferConfig>
 800211a:	e00f      	b.n	800213c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212a:	b2da      	uxtb	r2, r3
 800212c:	8979      	ldrh	r1, [r7, #10]
 800212e:	2300      	movs	r3, #0
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fbbe 	bl	80028b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d19e      	bne.n	8002084 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fa8c 	bl	8002668 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e01a      	b.n	8002190 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2220      	movs	r2, #32
 8002160:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_I2C_Mem_Write+0x224>)
 800216e:	400b      	ands	r3, r1
 8002170:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2220      	movs	r2, #32
 8002176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	e000      	b.n	8002190 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800218e:	2302      	movs	r3, #2
  }
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	fe00e800 	.word	0xfe00e800

0800219c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	4608      	mov	r0, r1
 80021a6:	4611      	mov	r1, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	4603      	mov	r3, r0
 80021ac:	817b      	strh	r3, [r7, #10]
 80021ae:	460b      	mov	r3, r1
 80021b0:	813b      	strh	r3, [r7, #8]
 80021b2:	4613      	mov	r3, r2
 80021b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b20      	cmp	r3, #32
 80021c0:	f040 80fd 	bne.w	80023be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_I2C_Mem_Read+0x34>
 80021ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0f1      	b.n	80023c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_I2C_Mem_Read+0x4e>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e0ea      	b.n	80023c0 <HAL_I2C_Mem_Read+0x224>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021f2:	f7ff fb83 	bl	80018fc <HAL_GetTick>
 80021f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	2319      	movs	r3, #25
 80021fe:	2201      	movs	r2, #1
 8002200:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f9af 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0d5      	b.n	80023c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2222      	movs	r2, #34	; 0x22
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2240      	movs	r2, #64	; 0x40
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a3a      	ldr	r2, [r7, #32]
 800222e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002234:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800223c:	88f8      	ldrh	r0, [r7, #6]
 800223e:	893a      	ldrh	r2, [r7, #8]
 8002240:	8979      	ldrh	r1, [r7, #10]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	4603      	mov	r3, r0
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f913 	bl	8002478 <I2C_RequestMemoryRead>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0ad      	b.n	80023c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	2bff      	cmp	r3, #255	; 0xff
 800226c:	d90e      	bls.n	800228c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	22ff      	movs	r2, #255	; 0xff
 8002272:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	b2da      	uxtb	r2, r3
 800227a:	8979      	ldrh	r1, [r7, #10]
 800227c:	4b52      	ldr	r3, [pc, #328]	; (80023c8 <HAL_I2C_Mem_Read+0x22c>)
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 fb17 	bl	80028b8 <I2C_TransferConfig>
 800228a:	e00f      	b.n	80022ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229a:	b2da      	uxtb	r2, r3
 800229c:	8979      	ldrh	r1, [r7, #10]
 800229e:	4b4a      	ldr	r3, [pc, #296]	; (80023c8 <HAL_I2C_Mem_Read+0x22c>)
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fb06 	bl	80028b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b2:	2200      	movs	r2, #0
 80022b4:	2104      	movs	r1, #4
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f956 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e07c      	b.n	80023c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d034      	beq.n	800236c <HAL_I2C_Mem_Read+0x1d0>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	2b00      	cmp	r3, #0
 8002308:	d130      	bne.n	800236c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	2200      	movs	r2, #0
 8002312:	2180      	movs	r1, #128	; 0x80
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f927 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e04d      	b.n	80023c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	2bff      	cmp	r3, #255	; 0xff
 800232c:	d90e      	bls.n	800234c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	22ff      	movs	r2, #255	; 0xff
 8002332:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	b2da      	uxtb	r2, r3
 800233a:	8979      	ldrh	r1, [r7, #10]
 800233c:	2300      	movs	r3, #0
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fab7 	bl	80028b8 <I2C_TransferConfig>
 800234a:	e00f      	b.n	800236c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	b2da      	uxtb	r2, r3
 800235c:	8979      	ldrh	r1, [r7, #10]
 800235e:	2300      	movs	r3, #0
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 faa6 	bl	80028b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d19a      	bne.n	80022ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f974 	bl	8002668 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e01a      	b.n	80023c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2220      	movs	r2, #32
 8002390:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_I2C_Mem_Read+0x230>)
 800239e:	400b      	ands	r3, r1
 80023a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e000      	b.n	80023c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80023be:	2302      	movs	r3, #2
  }
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	80002400 	.word	0x80002400
 80023cc:	fe00e800 	.word	0xfe00e800

080023d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	4608      	mov	r0, r1
 80023da:	4611      	mov	r1, r2
 80023dc:	461a      	mov	r2, r3
 80023de:	4603      	mov	r3, r0
 80023e0:	817b      	strh	r3, [r7, #10]
 80023e2:	460b      	mov	r3, r1
 80023e4:	813b      	strh	r3, [r7, #8]
 80023e6:	4613      	mov	r3, r2
 80023e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80023ea:	88fb      	ldrh	r3, [r7, #6]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	8979      	ldrh	r1, [r7, #10]
 80023f0:	4b20      	ldr	r3, [pc, #128]	; (8002474 <I2C_RequestMemoryWrite+0xa4>)
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fa5d 	bl	80028b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	69b9      	ldr	r1, [r7, #24]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f8f0 	bl	80025e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e02c      	b.n	800246c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002418:	893b      	ldrh	r3, [r7, #8]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	629a      	str	r2, [r3, #40]	; 0x28
 8002422:	e015      	b.n	8002450 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002424:	893b      	ldrh	r3, [r7, #8]
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	b29b      	uxth	r3, r3
 800242a:	b2da      	uxtb	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	69b9      	ldr	r1, [r7, #24]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f8d6 	bl	80025e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e012      	b.n	800246c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002446:	893b      	ldrh	r3, [r7, #8]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2200      	movs	r2, #0
 8002458:	2180      	movs	r1, #128	; 0x80
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f884 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	80002000 	.word	0x80002000

08002478 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	4608      	mov	r0, r1
 8002482:	4611      	mov	r1, r2
 8002484:	461a      	mov	r2, r3
 8002486:	4603      	mov	r3, r0
 8002488:	817b      	strh	r3, [r7, #10]
 800248a:	460b      	mov	r3, r1
 800248c:	813b      	strh	r3, [r7, #8]
 800248e:	4613      	mov	r3, r2
 8002490:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	8979      	ldrh	r1, [r7, #10]
 8002498:	4b20      	ldr	r3, [pc, #128]	; (800251c <I2C_RequestMemoryRead+0xa4>)
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2300      	movs	r3, #0
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fa0a 	bl	80028b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	69b9      	ldr	r1, [r7, #24]
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f89d 	bl	80025e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e02c      	b.n	8002512 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024be:	893b      	ldrh	r3, [r7, #8]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
 80024c8:	e015      	b.n	80024f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024ca:	893b      	ldrh	r3, [r7, #8]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d8:	69fa      	ldr	r2, [r7, #28]
 80024da:	69b9      	ldr	r1, [r7, #24]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f883 	bl	80025e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e012      	b.n	8002512 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024ec:	893b      	ldrh	r3, [r7, #8]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2140      	movs	r1, #64	; 0x40
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f831 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	80002000 	.word	0x80002000

08002520 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b02      	cmp	r3, #2
 8002534:	d103      	bne.n	800253e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2200      	movs	r2, #0
 800253c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d007      	beq.n	800255c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	619a      	str	r2, [r3, #24]
  }
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002578:	e022      	b.n	80025c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d01e      	beq.n	80025c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002582:	f7ff f9bb 	bl	80018fc <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d302      	bcc.n	8002598 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d113      	bne.n	80025c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	f043 0220 	orr.w	r2, r3, #32
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e00f      	b.n	80025e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699a      	ldr	r2, [r3, #24]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	4013      	ands	r3, r2
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d0cd      	beq.n	800257a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025f4:	e02c      	b.n	8002650 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f870 	bl	80026e0 <I2C_IsErrorOccurred>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e02a      	b.n	8002660 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d01e      	beq.n	8002650 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002612:	f7ff f973 	bl	80018fc <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	d302      	bcc.n	8002628 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d113      	bne.n	8002650 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262c:	f043 0220 	orr.w	r2, r3, #32
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e007      	b.n	8002660 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b02      	cmp	r3, #2
 800265c:	d1cb      	bne.n	80025f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002674:	e028      	b.n	80026c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f830 	bl	80026e0 <I2C_IsErrorOccurred>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e026      	b.n	80026d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268a:	f7ff f937 	bl	80018fc <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	429a      	cmp	r2, r3
 8002698:	d302      	bcc.n	80026a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d113      	bne.n	80026c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	f043 0220 	orr.w	r2, r3, #32
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e007      	b.n	80026d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d1cf      	bne.n	8002676 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2b00      	cmp	r3, #0
 800270a:	d075      	beq.n	80027f8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2210      	movs	r2, #16
 8002712:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002714:	e056      	b.n	80027c4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d052      	beq.n	80027c4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800271e:	f7ff f8ed 	bl	80018fc <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	429a      	cmp	r2, r3
 800272c:	d302      	bcc.n	8002734 <I2C_IsErrorOccurred+0x54>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d147      	bne.n	80027c4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002746:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002756:	d12e      	bne.n	80027b6 <I2C_IsErrorOccurred+0xd6>
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800275e:	d02a      	beq.n	80027b6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	2b20      	cmp	r3, #32
 8002764:	d027      	beq.n	80027b6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002774:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002776:	f7ff f8c1 	bl	80018fc <HAL_GetTick>
 800277a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800277c:	e01b      	b.n	80027b6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800277e:	f7ff f8bd 	bl	80018fc <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b19      	cmp	r3, #25
 800278a:	d914      	bls.n	80027b6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	f043 0220 	orr.w	r2, r3, #32
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d1dc      	bne.n	800277e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d003      	beq.n	80027da <I2C_IsErrorOccurred+0xfa>
 80027d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d09d      	beq.n	8002716 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80027da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d103      	bne.n	80027ea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2220      	movs	r2, #32
 80027e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00b      	beq.n	8002822 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800281a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00b      	beq.n	8002844 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	f043 0308 	orr.w	r3, r3, #8
 8002832:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800283c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800285e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800286a:	2b00      	cmp	r3, #0
 800286c:	d01c      	beq.n	80028a8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f7ff fe56 	bl	8002520 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6859      	ldr	r1, [r3, #4]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <I2C_IsErrorOccurred+0x1d4>)
 8002880:	400b      	ands	r3, r1
 8002882:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	431a      	orrs	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80028a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3728      	adds	r7, #40	; 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	fe00e800 	.word	0xfe00e800

080028b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	817b      	strh	r3, [r7, #10]
 80028c6:	4613      	mov	r3, r2
 80028c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028ca:	897b      	ldrh	r3, [r7, #10]
 80028cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028d0:	7a7b      	ldrb	r3, [r7, #9]
 80028d2:	041b      	lsls	r3, r3, #16
 80028d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028d8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028e6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	0d5b      	lsrs	r3, r3, #21
 80028f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <I2C_TransferConfig+0x60>)
 80028f8:	430b      	orrs	r3, r1
 80028fa:	43db      	mvns	r3, r3
 80028fc:	ea02 0103 	and.w	r1, r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	03ff63ff 	.word	0x03ff63ff

0800291c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b20      	cmp	r3, #32
 8002930:	d138      	bne.n	80029a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800293c:	2302      	movs	r3, #2
 800293e:	e032      	b.n	80029a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2224      	movs	r2, #36	; 0x24
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800296e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6819      	ldr	r1, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	e000      	b.n	80029a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
  }
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b085      	sub	sp, #20
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	d139      	bne.n	8002a3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e033      	b.n	8002a3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2224      	movs	r2, #36	; 0x24
 80029e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0201 	bic.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e000      	b.n	8002a3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
  }
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d141      	bne.n	8002ade <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a5a:	4b4b      	ldr	r3, [pc, #300]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a66:	d131      	bne.n	8002acc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a68:	4b47      	ldr	r3, [pc, #284]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a6e:	4a46      	ldr	r2, [pc, #280]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a78:	4b43      	ldr	r3, [pc, #268]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a80:	4a41      	ldr	r2, [pc, #260]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a88:	4b40      	ldr	r3, [pc, #256]	; (8002b8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2232      	movs	r2, #50	; 0x32
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	4a3f      	ldr	r2, [pc, #252]	; (8002b90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a94:	fba2 2303 	umull	r2, r3, r2, r3
 8002a98:	0c9b      	lsrs	r3, r3, #18
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a9e:	e002      	b.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aa6:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab2:	d102      	bne.n	8002aba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f2      	bne.n	8002aa0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aba:	4b33      	ldr	r3, [pc, #204]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac6:	d158      	bne.n	8002b7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e057      	b.n	8002b7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002acc:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ad2:	4a2d      	ldr	r2, [pc, #180]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ad8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002adc:	e04d      	b.n	8002b7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae4:	d141      	bne.n	8002b6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ae6:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af2:	d131      	bne.n	8002b58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002af4:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002afa:	4a23      	ldr	r2, [pc, #140]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b04:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b0c:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2232      	movs	r2, #50	; 0x32
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	0c9b      	lsrs	r3, r3, #18
 8002b26:	3301      	adds	r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b2a:	e002      	b.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3e:	d102      	bne.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f2      	bne.n	8002b2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b52:	d112      	bne.n	8002b7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e011      	b.n	8002b7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b5e:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b68:	e007      	b.n	8002b7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b72:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	431bde83 	.word	0x431bde83

08002b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e306      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d075      	beq.n	8002c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bb2:	4b97      	ldr	r3, [pc, #604]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bbc:	4b94      	ldr	r3, [pc, #592]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b0c      	cmp	r3, #12
 8002bca:	d102      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x3e>
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d002      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x44>
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd8:	4b8d      	ldr	r3, [pc, #564]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d05b      	beq.n	8002c9c <HAL_RCC_OscConfig+0x108>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d157      	bne.n	8002c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e2e1      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCC_OscConfig+0x74>
 8002bfa:	4b85      	ldr	r3, [pc, #532]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a84      	ldr	r2, [pc, #528]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e01d      	b.n	8002c44 <HAL_RCC_OscConfig+0xb0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x98>
 8002c12:	4b7f      	ldr	r3, [pc, #508]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a7e      	ldr	r2, [pc, #504]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b7c      	ldr	r3, [pc, #496]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a7b      	ldr	r2, [pc, #492]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e00b      	b.n	8002c44 <HAL_RCC_OscConfig+0xb0>
 8002c2c:	4b78      	ldr	r3, [pc, #480]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a77      	ldr	r2, [pc, #476]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b75      	ldr	r3, [pc, #468]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a74      	ldr	r2, [pc, #464]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d013      	beq.n	8002c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fe56 	bl	80018fc <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c54:	f7fe fe52 	bl	80018fc <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e2a6      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c66:	4b6a      	ldr	r3, [pc, #424]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0xc0>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe fe42 	bl	80018fc <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fe3e 	bl	80018fc <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e292      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c8e:	4b60      	ldr	r3, [pc, #384]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0xe8>
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d075      	beq.n	8002d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002caa:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cb4:	4b56      	ldr	r3, [pc, #344]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	2b0c      	cmp	r3, #12
 8002cc2:	d102      	bne.n	8002cca <HAL_RCC_OscConfig+0x136>
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d002      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x13c>
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d11f      	bne.n	8002d10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd0:	4b4f      	ldr	r3, [pc, #316]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x154>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e265      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce8:	4b49      	ldr	r3, [pc, #292]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	061b      	lsls	r3, r3, #24
 8002cf6:	4946      	ldr	r1, [pc, #280]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cfc:	4b45      	ldr	r3, [pc, #276]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe fdaf 	bl	8001864 <HAL_InitTick>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d043      	beq.n	8002d94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e251      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d023      	beq.n	8002d60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d18:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a3c      	ldr	r2, [pc, #240]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe fdea 	bl	80018fc <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2c:	f7fe fde6 	bl	80018fc <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e23a      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d3e:	4b34      	ldr	r3, [pc, #208]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4a:	4b31      	ldr	r3, [pc, #196]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	061b      	lsls	r3, r3, #24
 8002d58:	492d      	ldr	r1, [pc, #180]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	604b      	str	r3, [r1, #4]
 8002d5e:	e01a      	b.n	8002d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d60:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a2a      	ldr	r2, [pc, #168]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002d66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fdc6 	bl	80018fc <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d74:	f7fe fdc2 	bl	80018fc <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e216      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d86:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x1e0>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d041      	beq.n	8002e26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d01c      	beq.n	8002de4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002daa:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db0:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7fe fd9f 	bl	80018fc <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc2:	f7fe fd9b 	bl	80018fc <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1ef      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0ef      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x22e>
 8002de2:	e020      	b.n	8002e26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de4:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dea:	4a09      	ldr	r2, [pc, #36]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df4:	f7fe fd82 	bl	80018fc <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dfa:	e00d      	b.n	8002e18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfc:	f7fe fd7e 	bl	80018fc <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d906      	bls.n	8002e18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e1d2      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e18:	4b8c      	ldr	r3, [pc, #560]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1ea      	bne.n	8002dfc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80a6 	beq.w	8002f80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e34:	2300      	movs	r3, #0
 8002e36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e38:	4b84      	ldr	r3, [pc, #528]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_OscConfig+0x2b4>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_RCC_OscConfig+0x2b6>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	4b7f      	ldr	r3, [pc, #508]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	4a7e      	ldr	r2, [pc, #504]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e58:	6593      	str	r3, [r2, #88]	; 0x58
 8002e5a:	4b7c      	ldr	r3, [pc, #496]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e66:	2301      	movs	r3, #1
 8002e68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6a:	4b79      	ldr	r3, [pc, #484]	; (8003050 <HAL_RCC_OscConfig+0x4bc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d118      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e76:	4b76      	ldr	r3, [pc, #472]	; (8003050 <HAL_RCC_OscConfig+0x4bc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a75      	ldr	r2, [pc, #468]	; (8003050 <HAL_RCC_OscConfig+0x4bc>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e82:	f7fe fd3b 	bl	80018fc <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8a:	f7fe fd37 	bl	80018fc <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e18b      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9c:	4b6c      	ldr	r3, [pc, #432]	; (8003050 <HAL_RCC_OscConfig+0x4bc>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d108      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x32e>
 8002eb0:	4b66      	ldr	r3, [pc, #408]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	4a65      	ldr	r2, [pc, #404]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec0:	e024      	b.n	8002f0c <HAL_RCC_OscConfig+0x378>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b05      	cmp	r3, #5
 8002ec8:	d110      	bne.n	8002eec <HAL_RCC_OscConfig+0x358>
 8002eca:	4b60      	ldr	r3, [pc, #384]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed0:	4a5e      	ldr	r2, [pc, #376]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002ed2:	f043 0304 	orr.w	r3, r3, #4
 8002ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eda:	4b5c      	ldr	r3, [pc, #368]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	4a5a      	ldr	r2, [pc, #360]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eea:	e00f      	b.n	8002f0c <HAL_RCC_OscConfig+0x378>
 8002eec:	4b57      	ldr	r3, [pc, #348]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	4a56      	ldr	r2, [pc, #344]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002efc:	4b53      	ldr	r3, [pc, #332]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	4a52      	ldr	r2, [pc, #328]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d016      	beq.n	8002f42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7fe fcf2 	bl	80018fc <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fcee 	bl	80018fc <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e140      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f32:	4b46      	ldr	r3, [pc, #280]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ed      	beq.n	8002f1c <HAL_RCC_OscConfig+0x388>
 8002f40:	e015      	b.n	8002f6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f42:	f7fe fcdb 	bl	80018fc <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7fe fcd7 	bl	80018fc <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e129      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f60:	4b3a      	ldr	r3, [pc, #232]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1ed      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f6e:	7ffb      	ldrb	r3, [r7, #31]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4b35      	ldr	r3, [pc, #212]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f78:	4a34      	ldr	r2, [pc, #208]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d03c      	beq.n	8003006 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01c      	beq.n	8002fce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f94:	4b2d      	ldr	r3, [pc, #180]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f9a:	4a2c      	ldr	r2, [pc, #176]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7fe fcaa 	bl	80018fc <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fac:	f7fe fca6 	bl	80018fc <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e0fa      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fbe:	4b23      	ldr	r3, [pc, #140]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0ef      	beq.n	8002fac <HAL_RCC_OscConfig+0x418>
 8002fcc:	e01b      	b.n	8003006 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fce:	4b1f      	ldr	r3, [pc, #124]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fd4:	4a1d      	ldr	r2, [pc, #116]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fde:	f7fe fc8d 	bl	80018fc <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fe6:	f7fe fc89 	bl	80018fc <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e0dd      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ff8:	4b14      	ldr	r3, [pc, #80]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8002ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1ef      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 80d1 	beq.w	80031b2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003010:	4b0e      	ldr	r3, [pc, #56]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b0c      	cmp	r3, #12
 800301a:	f000 808b 	beq.w	8003134 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d15e      	bne.n	80030e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003026:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a08      	ldr	r2, [pc, #32]	; (800304c <HAL_RCC_OscConfig+0x4b8>)
 800302c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7fe fc63 	bl	80018fc <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003038:	e00c      	b.n	8003054 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303a:	f7fe fc5f 	bl	80018fc <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d905      	bls.n	8003054 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e0b3      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
 800304c:	40021000 	.word	0x40021000
 8003050:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003054:	4b59      	ldr	r3, [pc, #356]	; (80031bc <HAL_RCC_OscConfig+0x628>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1ec      	bne.n	800303a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003060:	4b56      	ldr	r3, [pc, #344]	; (80031bc <HAL_RCC_OscConfig+0x628>)
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	4b56      	ldr	r3, [pc, #344]	; (80031c0 <HAL_RCC_OscConfig+0x62c>)
 8003066:	4013      	ands	r3, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6a11      	ldr	r1, [r2, #32]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003070:	3a01      	subs	r2, #1
 8003072:	0112      	lsls	r2, r2, #4
 8003074:	4311      	orrs	r1, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800307a:	0212      	lsls	r2, r2, #8
 800307c:	4311      	orrs	r1, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003082:	0852      	lsrs	r2, r2, #1
 8003084:	3a01      	subs	r2, #1
 8003086:	0552      	lsls	r2, r2, #21
 8003088:	4311      	orrs	r1, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800308e:	0852      	lsrs	r2, r2, #1
 8003090:	3a01      	subs	r2, #1
 8003092:	0652      	lsls	r2, r2, #25
 8003094:	4311      	orrs	r1, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800309a:	06d2      	lsls	r2, r2, #27
 800309c:	430a      	orrs	r2, r1
 800309e:	4947      	ldr	r1, [pc, #284]	; (80031bc <HAL_RCC_OscConfig+0x628>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a4:	4b45      	ldr	r3, [pc, #276]	; (80031bc <HAL_RCC_OscConfig+0x628>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a44      	ldr	r2, [pc, #272]	; (80031bc <HAL_RCC_OscConfig+0x628>)
 80030aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030b0:	4b42      	ldr	r3, [pc, #264]	; (80031bc <HAL_RCC_OscConfig+0x628>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4a41      	ldr	r2, [pc, #260]	; (80031bc <HAL_RCC_OscConfig+0x628>)
 80030b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fe fc1e 	bl	80018fc <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fe fc1a 	bl	80018fc <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e06e      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d6:	4b39      	ldr	r3, [pc, #228]	; (80031bc <HAL_RCC_OscConfig+0x628>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0x530>
 80030e2:	e066      	b.n	80031b2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e4:	4b35      	ldr	r3, [pc, #212]	; (80031bc <HAL_RCC_OscConfig+0x628>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a34      	ldr	r2, [pc, #208]	; (80031bc <HAL_RCC_OscConfig+0x628>)
 80030ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030f0:	4b32      	ldr	r3, [pc, #200]	; (80031bc <HAL_RCC_OscConfig+0x628>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	4a31      	ldr	r2, [pc, #196]	; (80031bc <HAL_RCC_OscConfig+0x628>)
 80030f6:	f023 0303 	bic.w	r3, r3, #3
 80030fa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030fc:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <HAL_RCC_OscConfig+0x628>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4a2e      	ldr	r2, [pc, #184]	; (80031bc <HAL_RCC_OscConfig+0x628>)
 8003102:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7fe fbf6 	bl	80018fc <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7fe fbf2 	bl	80018fc <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e046      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003126:	4b25      	ldr	r3, [pc, #148]	; (80031bc <HAL_RCC_OscConfig+0x628>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x580>
 8003132:	e03e      	b.n	80031b2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e039      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003140:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <HAL_RCC_OscConfig+0x628>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f003 0203 	and.w	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	429a      	cmp	r2, r3
 8003152:	d12c      	bne.n	80031ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	3b01      	subs	r3, #1
 8003160:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d123      	bne.n	80031ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d11b      	bne.n	80031ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d113      	bne.n	80031ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	085b      	lsrs	r3, r3, #1
 8003192:	3b01      	subs	r3, #1
 8003194:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003196:	429a      	cmp	r2, r3
 8003198:	d109      	bne.n	80031ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a4:	085b      	lsrs	r3, r3, #1
 80031a6:	3b01      	subs	r3, #1
 80031a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3720      	adds	r7, #32
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	019f800c 	.word	0x019f800c

080031c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e11e      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b91      	ldr	r3, [pc, #580]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d910      	bls.n	800320c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b8e      	ldr	r3, [pc, #568]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 020f 	bic.w	r2, r3, #15
 80031f2:	498c      	ldr	r1, [pc, #560]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b8a      	ldr	r3, [pc, #552]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e106      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d073      	beq.n	8003300 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d129      	bne.n	8003274 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003220:	4b81      	ldr	r3, [pc, #516]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0f4      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003230:	f000 f99e 	bl	8003570 <RCC_GetSysClockFreqFromPLLSource>
 8003234:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4a7c      	ldr	r2, [pc, #496]	; (800342c <HAL_RCC_ClockConfig+0x268>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d93f      	bls.n	80032be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800323e:	4b7a      	ldr	r3, [pc, #488]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003252:	2b00      	cmp	r3, #0
 8003254:	d033      	beq.n	80032be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800325a:	2b00      	cmp	r3, #0
 800325c:	d12f      	bne.n	80032be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800325e:	4b72      	ldr	r3, [pc, #456]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003266:	4a70      	ldr	r2, [pc, #448]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	e024      	b.n	80032be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d107      	bne.n	800328c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800327c:	4b6a      	ldr	r3, [pc, #424]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0c6      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800328c:	4b66      	ldr	r3, [pc, #408]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0be      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800329c:	f000 f8ce 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4a61      	ldr	r2, [pc, #388]	; (800342c <HAL_RCC_ClockConfig+0x268>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d909      	bls.n	80032be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032aa:	4b5f      	ldr	r3, [pc, #380]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032b2:	4a5d      	ldr	r2, [pc, #372]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80032b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b5a      	ldr	r3, [pc, #360]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4957      	ldr	r1, [pc, #348]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d0:	f7fe fb14 	bl	80018fc <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7fe fb10 	bl	80018fc <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e095      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b4e      	ldr	r3, [pc, #312]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d023      	beq.n	8003354 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003318:	4b43      	ldr	r3, [pc, #268]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4a42      	ldr	r2, [pc, #264]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 800331e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003322:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003330:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003338:	4a3b      	ldr	r2, [pc, #236]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 800333a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800333e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003340:	4b39      	ldr	r3, [pc, #228]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4936      	ldr	r1, [pc, #216]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
 8003352:	e008      	b.n	8003366 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b80      	cmp	r3, #128	; 0x80
 8003358:	d105      	bne.n	8003366 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800335a:	4b33      	ldr	r3, [pc, #204]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	4a32      	ldr	r2, [pc, #200]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003360:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003364:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003366:	4b2f      	ldr	r3, [pc, #188]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d21d      	bcs.n	80033b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003374:	4b2b      	ldr	r3, [pc, #172]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f023 020f 	bic.w	r2, r3, #15
 800337c:	4929      	ldr	r1, [pc, #164]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003384:	f7fe faba 	bl	80018fc <HAL_GetTick>
 8003388:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	e00a      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338c:	f7fe fab6 	bl	80018fc <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	; 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e03b      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a2:	4b20      	ldr	r3, [pc, #128]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d1ed      	bne.n	800338c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033bc:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4917      	ldr	r1, [pc, #92]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033da:	4b13      	ldr	r3, [pc, #76]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	490f      	ldr	r1, [pc, #60]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033ee:	f000 f825 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80033f2:	4602      	mov	r2, r0
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <HAL_RCC_ClockConfig+0x264>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	490c      	ldr	r1, [pc, #48]	; (8003430 <HAL_RCC_ClockConfig+0x26c>)
 8003400:	5ccb      	ldrb	r3, [r1, r3]
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	fa22 f303 	lsr.w	r3, r2, r3
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <HAL_RCC_ClockConfig+0x270>)
 800340c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_RCC_ClockConfig+0x274>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe fa26 	bl	8001864 <HAL_InitTick>
 8003418:	4603      	mov	r3, r0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40022000 	.word	0x40022000
 8003428:	40021000 	.word	0x40021000
 800342c:	04c4b400 	.word	0x04c4b400
 8003430:	08007564 	.word	0x08007564
 8003434:	20000000 	.word	0x20000000
 8003438:	20000004 	.word	0x20000004

0800343c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003442:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b04      	cmp	r3, #4
 800344c:	d102      	bne.n	8003454 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800344e:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	e047      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003454:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b08      	cmp	r3, #8
 800345e:	d102      	bne.n	8003466 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003460:	4b26      	ldr	r3, [pc, #152]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	e03e      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003466:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d136      	bne.n	80034e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800347c:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	3301      	adds	r3, #1
 8003488:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d10c      	bne.n	80034aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003490:	4a1a      	ldr	r2, [pc, #104]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	4a16      	ldr	r2, [pc, #88]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800349a:	68d2      	ldr	r2, [r2, #12]
 800349c:	0a12      	lsrs	r2, r2, #8
 800349e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	617b      	str	r3, [r7, #20]
      break;
 80034a8:	e00c      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034aa:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	4a10      	ldr	r2, [pc, #64]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b4:	68d2      	ldr	r2, [r2, #12]
 80034b6:	0a12      	lsrs	r2, r2, #8
 80034b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]
      break;
 80034c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	0e5b      	lsrs	r3, r3, #25
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	3301      	adds	r3, #1
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	e001      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034e4:	693b      	ldr	r3, [r7, #16]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	00f42400 	.word	0x00f42400
 80034fc:	007a1200 	.word	0x007a1200

08003500 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <HAL_RCC_GetHCLKFreq+0x14>)
 8003506:	681b      	ldr	r3, [r3, #0]
}
 8003508:	4618      	mov	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	20000000 	.word	0x20000000

08003518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800351c:	f7ff fff0 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 8003520:	4602      	mov	r2, r0
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	0a1b      	lsrs	r3, r3, #8
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	4904      	ldr	r1, [pc, #16]	; (8003540 <HAL_RCC_GetPCLK1Freq+0x28>)
 800352e:	5ccb      	ldrb	r3, [r1, r3]
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	08007574 	.word	0x08007574

08003544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003548:	f7ff ffda 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	0adb      	lsrs	r3, r3, #11
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4904      	ldr	r1, [pc, #16]	; (800356c <HAL_RCC_GetPCLK2Freq+0x28>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	08007574 	.word	0x08007574

08003570 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003576:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003580:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	3301      	adds	r3, #1
 800358c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	2b03      	cmp	r3, #3
 8003592:	d10c      	bne.n	80035ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003594:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	fbb2 f3f3 	udiv	r3, r2, r3
 800359c:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800359e:	68d2      	ldr	r2, [r2, #12]
 80035a0:	0a12      	lsrs	r2, r2, #8
 80035a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035a6:	fb02 f303 	mul.w	r3, r2, r3
 80035aa:	617b      	str	r3, [r7, #20]
    break;
 80035ac:	e00c      	b.n	80035c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035ae:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b6:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035b8:	68d2      	ldr	r2, [r2, #12]
 80035ba:	0a12      	lsrs	r2, r2, #8
 80035bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035c0:	fb02 f303 	mul.w	r3, r2, r3
 80035c4:	617b      	str	r3, [r7, #20]
    break;
 80035c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	0e5b      	lsrs	r3, r3, #25
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	3301      	adds	r3, #1
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035e2:	687b      	ldr	r3, [r7, #4]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	40021000 	.word	0x40021000
 80035f4:	007a1200 	.word	0x007a1200
 80035f8:	00f42400 	.word	0x00f42400

080035fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003604:	2300      	movs	r3, #0
 8003606:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003608:	2300      	movs	r3, #0
 800360a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8098 	beq.w	800374a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361e:	4b43      	ldr	r3, [pc, #268]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10d      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	4b40      	ldr	r3, [pc, #256]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	4a3f      	ldr	r2, [pc, #252]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003634:	6593      	str	r3, [r2, #88]	; 0x58
 8003636:	4b3d      	ldr	r3, [pc, #244]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003642:	2301      	movs	r3, #1
 8003644:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003646:	4b3a      	ldr	r3, [pc, #232]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a39      	ldr	r2, [pc, #228]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003652:	f7fe f953 	bl	80018fc <HAL_GetTick>
 8003656:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003658:	e009      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365a:	f7fe f94f 	bl	80018fc <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d902      	bls.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	74fb      	strb	r3, [r7, #19]
        break;
 800366c:	e005      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800366e:	4b30      	ldr	r3, [pc, #192]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0ef      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d159      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003680:	4b2a      	ldr	r3, [pc, #168]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01e      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	429a      	cmp	r2, r3
 800369a:	d019      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800369c:	4b23      	ldr	r3, [pc, #140]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036a8:	4b20      	ldr	r3, [pc, #128]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	4a1f      	ldr	r2, [pc, #124]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036b8:	4b1c      	ldr	r3, [pc, #112]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	4a1b      	ldr	r2, [pc, #108]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036c8:	4a18      	ldr	r2, [pc, #96]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d016      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036da:	f7fe f90f 	bl	80018fc <HAL_GetTick>
 80036de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e0:	e00b      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fe f90b 	bl	80018fc <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d902      	bls.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	74fb      	strb	r3, [r7, #19]
            break;
 80036f8:	e006      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036fa:	4b0c      	ldr	r3, [pc, #48]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ec      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800370e:	4b07      	ldr	r3, [pc, #28]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	4903      	ldr	r1, [pc, #12]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003724:	e008      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	74bb      	strb	r3, [r7, #18]
 800372a:	e005      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800372c:	40021000 	.word	0x40021000
 8003730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003738:	7c7b      	ldrb	r3, [r7, #17]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d105      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373e:	4ba6      	ldr	r3, [pc, #664]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	4aa5      	ldr	r2, [pc, #660]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003748:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003756:	4ba0      	ldr	r3, [pc, #640]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	f023 0203 	bic.w	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	499c      	ldr	r1, [pc, #624]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003778:	4b97      	ldr	r3, [pc, #604]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	f023 020c 	bic.w	r2, r3, #12
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	4994      	ldr	r1, [pc, #592]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800379a:	4b8f      	ldr	r3, [pc, #572]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	498b      	ldr	r1, [pc, #556]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037bc:	4b86      	ldr	r3, [pc, #536]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	4983      	ldr	r1, [pc, #524]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037de:	4b7e      	ldr	r3, [pc, #504]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	497a      	ldr	r1, [pc, #488]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003800:	4b75      	ldr	r3, [pc, #468]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	4972      	ldr	r1, [pc, #456]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003822:	4b6d      	ldr	r3, [pc, #436]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	4969      	ldr	r1, [pc, #420]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003844:	4b64      	ldr	r3, [pc, #400]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	4961      	ldr	r1, [pc, #388]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003866:	4b5c      	ldr	r3, [pc, #368]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	4958      	ldr	r1, [pc, #352]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003884:	2b00      	cmp	r3, #0
 8003886:	d015      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003888:	4b53      	ldr	r3, [pc, #332]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	4950      	ldr	r1, [pc, #320]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a6:	d105      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a8:	4b4b      	ldr	r3, [pc, #300]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a4a      	ldr	r2, [pc, #296]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d015      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038c0:	4b45      	ldr	r3, [pc, #276]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	4942      	ldr	r1, [pc, #264]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038de:	d105      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e0:	4b3d      	ldr	r3, [pc, #244]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4a3c      	ldr	r2, [pc, #240]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d015      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038f8:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	4934      	ldr	r1, [pc, #208]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003916:	d105      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003918:	4b2f      	ldr	r3, [pc, #188]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a2e      	ldr	r2, [pc, #184]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800391e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003922:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d015      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003930:	4b29      	ldr	r3, [pc, #164]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393e:	4926      	ldr	r1, [pc, #152]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800394e:	d105      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003950:	4b21      	ldr	r3, [pc, #132]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4a20      	ldr	r2, [pc, #128]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800395a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d015      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003968:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	4918      	ldr	r1, [pc, #96]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003986:	d105      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003988:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4a12      	ldr	r2, [pc, #72]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800398e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003992:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d015      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	490a      	ldr	r1, [pc, #40]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039be:	d105      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4a04      	ldr	r2, [pc, #16]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80039cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000

080039dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e042      	b.n	8003a74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d106      	bne.n	8003a06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7fd fd93 	bl	800152c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2224      	movs	r2, #36	; 0x24
 8003a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0201 	bic.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f8c2 	bl	8003ba8 <UART_SetConfig>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e022      	b.n	8003a74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fb82 	bl	8004140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fc09 	bl	8004284 <UART_CheckIdleState>
 8003a72:	4603      	mov	r3, r0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	; 0x28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	f040 8083 	bne.w	8003b9e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_UART_Transmit+0x28>
 8003a9e:	88fb      	ldrh	r3, [r7, #6]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e07b      	b.n	8003ba0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_UART_Transmit+0x3a>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e074      	b.n	8003ba0 <HAL_UART_Transmit+0x124>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2221      	movs	r2, #33	; 0x21
 8003aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ace:	f7fd ff15 	bl	80018fc <HAL_GetTick>
 8003ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aec:	d108      	bne.n	8003b00 <HAL_UART_Transmit+0x84>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d104      	bne.n	8003b00 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	e003      	b.n	8003b08 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003b10:	e02c      	b.n	8003b6c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2180      	movs	r1, #128	; 0x80
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 fbfc 	bl	800431a <UART_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e039      	b.n	8003ba0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10b      	bne.n	8003b4a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	3302      	adds	r3, #2
 8003b46:	61bb      	str	r3, [r7, #24]
 8003b48:	e007      	b.n	8003b5a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	781a      	ldrb	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	3301      	adds	r3, #1
 8003b58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1cc      	bne.n	8003b12 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2140      	movs	r1, #64	; 0x40
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fbc9 	bl	800431a <UART_WaitOnFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e006      	b.n	8003ba0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e000      	b.n	8003ba0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003b9e:	2302      	movs	r3, #2
  }
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3720      	adds	r7, #32
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bac:	b08c      	sub	sp, #48	; 0x30
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4bab      	ldr	r3, [pc, #684]	; (8003e84 <UART_SetConfig+0x2dc>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4aa0      	ldr	r2, [pc, #640]	; (8003e88 <UART_SetConfig+0x2e0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d004      	beq.n	8003c14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c10:	4313      	orrs	r3, r2
 8003c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003c1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	f023 010f 	bic.w	r1, r3, #15
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a91      	ldr	r2, [pc, #580]	; (8003e8c <UART_SetConfig+0x2e4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d125      	bne.n	8003c98 <UART_SetConfig+0xf0>
 8003c4c:	4b90      	ldr	r3, [pc, #576]	; (8003e90 <UART_SetConfig+0x2e8>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d81a      	bhi.n	8003c90 <UART_SetConfig+0xe8>
 8003c5a:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <UART_SetConfig+0xb8>)
 8003c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c60:	08003c71 	.word	0x08003c71
 8003c64:	08003c81 	.word	0x08003c81
 8003c68:	08003c79 	.word	0x08003c79
 8003c6c:	08003c89 	.word	0x08003c89
 8003c70:	2301      	movs	r3, #1
 8003c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c76:	e0d6      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7e:	e0d2      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003c80:	2304      	movs	r3, #4
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c86:	e0ce      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003c88:	2308      	movs	r3, #8
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c8e:	e0ca      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003c90:	2310      	movs	r3, #16
 8003c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c96:	e0c6      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a7d      	ldr	r2, [pc, #500]	; (8003e94 <UART_SetConfig+0x2ec>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d138      	bne.n	8003d14 <UART_SetConfig+0x16c>
 8003ca2:	4b7b      	ldr	r3, [pc, #492]	; (8003e90 <UART_SetConfig+0x2e8>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	d82d      	bhi.n	8003d0c <UART_SetConfig+0x164>
 8003cb0:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <UART_SetConfig+0x110>)
 8003cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb6:	bf00      	nop
 8003cb8:	08003ced 	.word	0x08003ced
 8003cbc:	08003d0d 	.word	0x08003d0d
 8003cc0:	08003d0d 	.word	0x08003d0d
 8003cc4:	08003d0d 	.word	0x08003d0d
 8003cc8:	08003cfd 	.word	0x08003cfd
 8003ccc:	08003d0d 	.word	0x08003d0d
 8003cd0:	08003d0d 	.word	0x08003d0d
 8003cd4:	08003d0d 	.word	0x08003d0d
 8003cd8:	08003cf5 	.word	0x08003cf5
 8003cdc:	08003d0d 	.word	0x08003d0d
 8003ce0:	08003d0d 	.word	0x08003d0d
 8003ce4:	08003d0d 	.word	0x08003d0d
 8003ce8:	08003d05 	.word	0x08003d05
 8003cec:	2300      	movs	r3, #0
 8003cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf2:	e098      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cfa:	e094      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d02:	e090      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003d04:	2308      	movs	r3, #8
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0a:	e08c      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d12:	e088      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a5f      	ldr	r2, [pc, #380]	; (8003e98 <UART_SetConfig+0x2f0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d125      	bne.n	8003d6a <UART_SetConfig+0x1c2>
 8003d1e:	4b5c      	ldr	r3, [pc, #368]	; (8003e90 <UART_SetConfig+0x2e8>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d28:	2b30      	cmp	r3, #48	; 0x30
 8003d2a:	d016      	beq.n	8003d5a <UART_SetConfig+0x1b2>
 8003d2c:	2b30      	cmp	r3, #48	; 0x30
 8003d2e:	d818      	bhi.n	8003d62 <UART_SetConfig+0x1ba>
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d00a      	beq.n	8003d4a <UART_SetConfig+0x1a2>
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d814      	bhi.n	8003d62 <UART_SetConfig+0x1ba>
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <UART_SetConfig+0x19a>
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	d008      	beq.n	8003d52 <UART_SetConfig+0x1aa>
 8003d40:	e00f      	b.n	8003d62 <UART_SetConfig+0x1ba>
 8003d42:	2300      	movs	r3, #0
 8003d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d48:	e06d      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d50:	e069      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003d52:	2304      	movs	r3, #4
 8003d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d58:	e065      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d60:	e061      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003d62:	2310      	movs	r3, #16
 8003d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d68:	e05d      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a4b      	ldr	r2, [pc, #300]	; (8003e9c <UART_SetConfig+0x2f4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d125      	bne.n	8003dc0 <UART_SetConfig+0x218>
 8003d74:	4b46      	ldr	r3, [pc, #280]	; (8003e90 <UART_SetConfig+0x2e8>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d80:	d016      	beq.n	8003db0 <UART_SetConfig+0x208>
 8003d82:	2bc0      	cmp	r3, #192	; 0xc0
 8003d84:	d818      	bhi.n	8003db8 <UART_SetConfig+0x210>
 8003d86:	2b80      	cmp	r3, #128	; 0x80
 8003d88:	d00a      	beq.n	8003da0 <UART_SetConfig+0x1f8>
 8003d8a:	2b80      	cmp	r3, #128	; 0x80
 8003d8c:	d814      	bhi.n	8003db8 <UART_SetConfig+0x210>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <UART_SetConfig+0x1f0>
 8003d92:	2b40      	cmp	r3, #64	; 0x40
 8003d94:	d008      	beq.n	8003da8 <UART_SetConfig+0x200>
 8003d96:	e00f      	b.n	8003db8 <UART_SetConfig+0x210>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d9e:	e042      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003da0:	2302      	movs	r3, #2
 8003da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da6:	e03e      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003da8:	2304      	movs	r3, #4
 8003daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dae:	e03a      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003db0:	2308      	movs	r3, #8
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003db6:	e036      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003db8:	2310      	movs	r3, #16
 8003dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dbe:	e032      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a30      	ldr	r2, [pc, #192]	; (8003e88 <UART_SetConfig+0x2e0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d12a      	bne.n	8003e20 <UART_SetConfig+0x278>
 8003dca:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <UART_SetConfig+0x2e8>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dd8:	d01a      	beq.n	8003e10 <UART_SetConfig+0x268>
 8003dda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dde:	d81b      	bhi.n	8003e18 <UART_SetConfig+0x270>
 8003de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003de4:	d00c      	beq.n	8003e00 <UART_SetConfig+0x258>
 8003de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dea:	d815      	bhi.n	8003e18 <UART_SetConfig+0x270>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <UART_SetConfig+0x250>
 8003df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df4:	d008      	beq.n	8003e08 <UART_SetConfig+0x260>
 8003df6:	e00f      	b.n	8003e18 <UART_SetConfig+0x270>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dfe:	e012      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003e00:	2302      	movs	r3, #2
 8003e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e06:	e00e      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e0e:	e00a      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003e10:	2308      	movs	r3, #8
 8003e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e16:	e006      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003e18:	2310      	movs	r3, #16
 8003e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e1e:	e002      	b.n	8003e26 <UART_SetConfig+0x27e>
 8003e20:	2310      	movs	r3, #16
 8003e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a17      	ldr	r2, [pc, #92]	; (8003e88 <UART_SetConfig+0x2e0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	f040 80a8 	bne.w	8003f82 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d834      	bhi.n	8003ea4 <UART_SetConfig+0x2fc>
 8003e3a:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <UART_SetConfig+0x298>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003e65 	.word	0x08003e65
 8003e44:	08003ea5 	.word	0x08003ea5
 8003e48:	08003e6d 	.word	0x08003e6d
 8003e4c:	08003ea5 	.word	0x08003ea5
 8003e50:	08003e73 	.word	0x08003e73
 8003e54:	08003ea5 	.word	0x08003ea5
 8003e58:	08003ea5 	.word	0x08003ea5
 8003e5c:	08003ea5 	.word	0x08003ea5
 8003e60:	08003e7b 	.word	0x08003e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e64:	f7ff fb58 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 8003e68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e6a:	e021      	b.n	8003eb0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <UART_SetConfig+0x2f8>)
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e70:	e01e      	b.n	8003eb0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e72:	f7ff fae3 	bl	800343c <HAL_RCC_GetSysClockFreq>
 8003e76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e78:	e01a      	b.n	8003eb0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e80:	e016      	b.n	8003eb0 <UART_SetConfig+0x308>
 8003e82:	bf00      	nop
 8003e84:	cfff69f3 	.word	0xcfff69f3
 8003e88:	40008000 	.word	0x40008000
 8003e8c:	40013800 	.word	0x40013800
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40004400 	.word	0x40004400
 8003e98:	40004800 	.word	0x40004800
 8003e9c:	40004c00 	.word	0x40004c00
 8003ea0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003eae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 812a 	beq.w	800410c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	4a9e      	ldr	r2, [pc, #632]	; (8004138 <UART_SetConfig+0x590>)
 8003ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	4413      	add	r3, r2
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d305      	bcc.n	8003ee8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d903      	bls.n	8003ef0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003eee:	e10d      	b.n	800410c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	60fa      	str	r2, [r7, #12]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	4a8e      	ldr	r2, [pc, #568]	; (8004138 <UART_SetConfig+0x590>)
 8003efe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2200      	movs	r2, #0
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f12:	f7fc fe71 	bl	8000bf8 <__aeabi_uldivmod>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	020b      	lsls	r3, r1, #8
 8003f28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f2c:	0202      	lsls	r2, r0, #8
 8003f2e:	6979      	ldr	r1, [r7, #20]
 8003f30:	6849      	ldr	r1, [r1, #4]
 8003f32:	0849      	lsrs	r1, r1, #1
 8003f34:	2000      	movs	r0, #0
 8003f36:	460c      	mov	r4, r1
 8003f38:	4605      	mov	r5, r0
 8003f3a:	eb12 0804 	adds.w	r8, r2, r4
 8003f3e:	eb43 0905 	adc.w	r9, r3, r5
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	469a      	mov	sl, r3
 8003f4a:	4693      	mov	fp, r2
 8003f4c:	4652      	mov	r2, sl
 8003f4e:	465b      	mov	r3, fp
 8003f50:	4640      	mov	r0, r8
 8003f52:	4649      	mov	r1, r9
 8003f54:	f7fc fe50 	bl	8000bf8 <__aeabi_uldivmod>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f66:	d308      	bcc.n	8003f7a <UART_SetConfig+0x3d2>
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f6e:	d204      	bcs.n	8003f7a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6a3a      	ldr	r2, [r7, #32]
 8003f76:	60da      	str	r2, [r3, #12]
 8003f78:	e0c8      	b.n	800410c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f80:	e0c4      	b.n	800410c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8a:	d167      	bne.n	800405c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003f8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d828      	bhi.n	8003fe6 <UART_SetConfig+0x43e>
 8003f94:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <UART_SetConfig+0x3f4>)
 8003f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9a:	bf00      	nop
 8003f9c:	08003fc1 	.word	0x08003fc1
 8003fa0:	08003fc9 	.word	0x08003fc9
 8003fa4:	08003fd1 	.word	0x08003fd1
 8003fa8:	08003fe7 	.word	0x08003fe7
 8003fac:	08003fd7 	.word	0x08003fd7
 8003fb0:	08003fe7 	.word	0x08003fe7
 8003fb4:	08003fe7 	.word	0x08003fe7
 8003fb8:	08003fe7 	.word	0x08003fe7
 8003fbc:	08003fdf 	.word	0x08003fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc0:	f7ff faaa 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 8003fc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fc6:	e014      	b.n	8003ff2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc8:	f7ff fabc 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 8003fcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fce:	e010      	b.n	8003ff2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd0:	4b5a      	ldr	r3, [pc, #360]	; (800413c <UART_SetConfig+0x594>)
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fd4:	e00d      	b.n	8003ff2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd6:	f7ff fa31 	bl	800343c <HAL_RCC_GetSysClockFreq>
 8003fda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fdc:	e009      	b.n	8003ff2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fe4:	e005      	b.n	8003ff2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8089 	beq.w	800410c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	4a4e      	ldr	r2, [pc, #312]	; (8004138 <UART_SetConfig+0x590>)
 8004000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004004:	461a      	mov	r2, r3
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	fbb3 f3f2 	udiv	r3, r3, r2
 800400c:	005a      	lsls	r2, r3, #1
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	085b      	lsrs	r3, r3, #1
 8004014:	441a      	add	r2, r3
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	fbb2 f3f3 	udiv	r3, r2, r3
 800401e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	2b0f      	cmp	r3, #15
 8004024:	d916      	bls.n	8004054 <UART_SetConfig+0x4ac>
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402c:	d212      	bcs.n	8004054 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	b29b      	uxth	r3, r3
 8004032:	f023 030f 	bic.w	r3, r3, #15
 8004036:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	b29b      	uxth	r3, r3
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	b29a      	uxth	r2, r3
 8004044:	8bfb      	ldrh	r3, [r7, #30]
 8004046:	4313      	orrs	r3, r2
 8004048:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	8bfa      	ldrh	r2, [r7, #30]
 8004050:	60da      	str	r2, [r3, #12]
 8004052:	e05b      	b.n	800410c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800405a:	e057      	b.n	800410c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800405c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004060:	2b08      	cmp	r3, #8
 8004062:	d828      	bhi.n	80040b6 <UART_SetConfig+0x50e>
 8004064:	a201      	add	r2, pc, #4	; (adr r2, 800406c <UART_SetConfig+0x4c4>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	08004091 	.word	0x08004091
 8004070:	08004099 	.word	0x08004099
 8004074:	080040a1 	.word	0x080040a1
 8004078:	080040b7 	.word	0x080040b7
 800407c:	080040a7 	.word	0x080040a7
 8004080:	080040b7 	.word	0x080040b7
 8004084:	080040b7 	.word	0x080040b7
 8004088:	080040b7 	.word	0x080040b7
 800408c:	080040af 	.word	0x080040af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7ff fa42 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 8004094:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004096:	e014      	b.n	80040c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004098:	f7ff fa54 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 800409c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800409e:	e010      	b.n	80040c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a0:	4b26      	ldr	r3, [pc, #152]	; (800413c <UART_SetConfig+0x594>)
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040a4:	e00d      	b.n	80040c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a6:	f7ff f9c9 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80040aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040ac:	e009      	b.n	80040c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040b4:	e005      	b.n	80040c2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040c0:	bf00      	nop
    }

    if (pclk != 0U)
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d021      	beq.n	800410c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	4a1a      	ldr	r2, [pc, #104]	; (8004138 <UART_SetConfig+0x590>)
 80040ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040d2:	461a      	mov	r2, r3
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	441a      	add	r2, r3
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	2b0f      	cmp	r3, #15
 80040f0:	d909      	bls.n	8004106 <UART_SetConfig+0x55e>
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f8:	d205      	bcs.n	8004106 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60da      	str	r2, [r3, #12]
 8004104:	e002      	b.n	800410c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2201      	movs	r2, #1
 8004110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2201      	movs	r2, #1
 8004118:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2200      	movs	r2, #0
 8004120:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2200      	movs	r2, #0
 8004126:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004128:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800412c:	4618      	mov	r0, r3
 800412e:	3730      	adds	r7, #48	; 0x30
 8004130:	46bd      	mov	sp, r7
 8004132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004136:	bf00      	nop
 8004138:	0800757c 	.word	0x0800757c
 800413c:	00f42400 	.word	0x00f42400

08004140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01a      	beq.n	8004256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800423e:	d10a      	bne.n	8004256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	605a      	str	r2, [r3, #4]
  }
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af02      	add	r7, sp, #8
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004294:	f7fd fb32 	bl	80018fc <HAL_GetTick>
 8004298:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d10e      	bne.n	80042c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f82f 	bl	800431a <UART_WaitOnFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e025      	b.n	8004312 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d10e      	bne.n	80042f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f819 	bl	800431a <UART_WaitOnFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e00f      	b.n	8004312 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b09c      	sub	sp, #112	; 0x70
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	4613      	mov	r3, r2
 8004328:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432a:	e0a9      	b.n	8004480 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004332:	f000 80a5 	beq.w	8004480 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004336:	f7fd fae1 	bl	80018fc <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004342:	429a      	cmp	r2, r3
 8004344:	d302      	bcc.n	800434c <UART_WaitOnFlagUntilTimeout+0x32>
 8004346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004348:	2b00      	cmp	r3, #0
 800434a:	d140      	bne.n	80043ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800435a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004360:	667b      	str	r3, [r7, #100]	; 0x64
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800436a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800436c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004370:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e6      	bne.n	800434c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3308      	adds	r3, #8
 8004384:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	663b      	str	r3, [r7, #96]	; 0x60
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3308      	adds	r3, #8
 800439c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800439e:	64ba      	str	r2, [r7, #72]	; 0x48
 80043a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e5      	bne.n	800437e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e069      	b.n	80044a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d051      	beq.n	8004480 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ea:	d149      	bne.n	8004480 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800440a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004414:	637b      	str	r3, [r7, #52]	; 0x34
 8004416:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800441a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e6      	bne.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3308      	adds	r3, #8
 800442e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	613b      	str	r3, [r7, #16]
   return(result);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f023 0301 	bic.w	r3, r3, #1
 800443e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3308      	adds	r3, #8
 8004446:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004448:	623a      	str	r2, [r7, #32]
 800444a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	69f9      	ldr	r1, [r7, #28]
 800444e:	6a3a      	ldr	r2, [r7, #32]
 8004450:	e841 2300 	strex	r3, r2, [r1]
 8004454:	61bb      	str	r3, [r7, #24]
   return(result);
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e5      	bne.n	8004428 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e010      	b.n	80044a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69da      	ldr	r2, [r3, #28]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4013      	ands	r3, r2
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	429a      	cmp	r2, r3
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	79fb      	ldrb	r3, [r7, #7]
 800449a:	429a      	cmp	r2, r3
 800449c:	f43f af46 	beq.w	800432c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3770      	adds	r7, #112	; 0x70
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80044bc:	2302      	movs	r3, #2
 80044be:	e027      	b.n	8004510 <HAL_UARTEx_DisableFifoMode+0x66>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2224      	movs	r2, #36	; 0x24
 80044cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80044ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004530:	2302      	movs	r3, #2
 8004532:	e02d      	b.n	8004590 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2224      	movs	r2, #36	; 0x24
 8004540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0201 	bic.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f84f 	bl	8004614 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e02d      	b.n	800460c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2224      	movs	r2, #36	; 0x24
 80045bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f811 	bl	8004614 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004620:	2b00      	cmp	r3, #0
 8004622:	d108      	bne.n	8004636 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004634:	e031      	b.n	800469a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004636:	2308      	movs	r3, #8
 8004638:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800463a:	2308      	movs	r3, #8
 800463c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	0e5b      	lsrs	r3, r3, #25
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	0f5b      	lsrs	r3, r3, #29
 8004656:	b2db      	uxtb	r3, r3
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800465e:	7bbb      	ldrb	r3, [r7, #14]
 8004660:	7b3a      	ldrb	r2, [r7, #12]
 8004662:	4911      	ldr	r1, [pc, #68]	; (80046a8 <UARTEx_SetNbDataToProcess+0x94>)
 8004664:	5c8a      	ldrb	r2, [r1, r2]
 8004666:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800466a:	7b3a      	ldrb	r2, [r7, #12]
 800466c:	490f      	ldr	r1, [pc, #60]	; (80046ac <UARTEx_SetNbDataToProcess+0x98>)
 800466e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004670:	fb93 f3f2 	sdiv	r3, r3, r2
 8004674:	b29a      	uxth	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	7b7a      	ldrb	r2, [r7, #13]
 8004680:	4909      	ldr	r1, [pc, #36]	; (80046a8 <UARTEx_SetNbDataToProcess+0x94>)
 8004682:	5c8a      	ldrb	r2, [r1, r2]
 8004684:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004688:	7b7a      	ldrb	r2, [r7, #13]
 800468a:	4908      	ldr	r1, [pc, #32]	; (80046ac <UARTEx_SetNbDataToProcess+0x98>)
 800468c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800468e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004692:	b29a      	uxth	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800469a:	bf00      	nop
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	08007594 	.word	0x08007594
 80046ac:	0800759c 	.word	0x0800759c

080046b0 <__errno>:
 80046b0:	4b01      	ldr	r3, [pc, #4]	; (80046b8 <__errno+0x8>)
 80046b2:	6818      	ldr	r0, [r3, #0]
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	2000000c 	.word	0x2000000c

080046bc <__libc_init_array>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	4d0d      	ldr	r5, [pc, #52]	; (80046f4 <__libc_init_array+0x38>)
 80046c0:	4c0d      	ldr	r4, [pc, #52]	; (80046f8 <__libc_init_array+0x3c>)
 80046c2:	1b64      	subs	r4, r4, r5
 80046c4:	10a4      	asrs	r4, r4, #2
 80046c6:	2600      	movs	r6, #0
 80046c8:	42a6      	cmp	r6, r4
 80046ca:	d109      	bne.n	80046e0 <__libc_init_array+0x24>
 80046cc:	4d0b      	ldr	r5, [pc, #44]	; (80046fc <__libc_init_array+0x40>)
 80046ce:	4c0c      	ldr	r4, [pc, #48]	; (8004700 <__libc_init_array+0x44>)
 80046d0:	f002 ff16 	bl	8007500 <_init>
 80046d4:	1b64      	subs	r4, r4, r5
 80046d6:	10a4      	asrs	r4, r4, #2
 80046d8:	2600      	movs	r6, #0
 80046da:	42a6      	cmp	r6, r4
 80046dc:	d105      	bne.n	80046ea <__libc_init_array+0x2e>
 80046de:	bd70      	pop	{r4, r5, r6, pc}
 80046e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e4:	4798      	blx	r3
 80046e6:	3601      	adds	r6, #1
 80046e8:	e7ee      	b.n	80046c8 <__libc_init_array+0xc>
 80046ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ee:	4798      	blx	r3
 80046f0:	3601      	adds	r6, #1
 80046f2:	e7f2      	b.n	80046da <__libc_init_array+0x1e>
 80046f4:	08007984 	.word	0x08007984
 80046f8:	08007984 	.word	0x08007984
 80046fc:	08007984 	.word	0x08007984
 8004700:	08007988 	.word	0x08007988

08004704 <memset>:
 8004704:	4402      	add	r2, r0
 8004706:	4603      	mov	r3, r0
 8004708:	4293      	cmp	r3, r2
 800470a:	d100      	bne.n	800470e <memset+0xa>
 800470c:	4770      	bx	lr
 800470e:	f803 1b01 	strb.w	r1, [r3], #1
 8004712:	e7f9      	b.n	8004708 <memset+0x4>

08004714 <__cvt>:
 8004714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004718:	ec55 4b10 	vmov	r4, r5, d0
 800471c:	2d00      	cmp	r5, #0
 800471e:	460e      	mov	r6, r1
 8004720:	4619      	mov	r1, r3
 8004722:	462b      	mov	r3, r5
 8004724:	bfbb      	ittet	lt
 8004726:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800472a:	461d      	movlt	r5, r3
 800472c:	2300      	movge	r3, #0
 800472e:	232d      	movlt	r3, #45	; 0x2d
 8004730:	700b      	strb	r3, [r1, #0]
 8004732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004734:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004738:	4691      	mov	r9, r2
 800473a:	f023 0820 	bic.w	r8, r3, #32
 800473e:	bfbc      	itt	lt
 8004740:	4622      	movlt	r2, r4
 8004742:	4614      	movlt	r4, r2
 8004744:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004748:	d005      	beq.n	8004756 <__cvt+0x42>
 800474a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800474e:	d100      	bne.n	8004752 <__cvt+0x3e>
 8004750:	3601      	adds	r6, #1
 8004752:	2102      	movs	r1, #2
 8004754:	e000      	b.n	8004758 <__cvt+0x44>
 8004756:	2103      	movs	r1, #3
 8004758:	ab03      	add	r3, sp, #12
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	ab02      	add	r3, sp, #8
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	ec45 4b10 	vmov	d0, r4, r5
 8004764:	4653      	mov	r3, sl
 8004766:	4632      	mov	r2, r6
 8004768:	f000 fcfe 	bl	8005168 <_dtoa_r>
 800476c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004770:	4607      	mov	r7, r0
 8004772:	d102      	bne.n	800477a <__cvt+0x66>
 8004774:	f019 0f01 	tst.w	r9, #1
 8004778:	d022      	beq.n	80047c0 <__cvt+0xac>
 800477a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800477e:	eb07 0906 	add.w	r9, r7, r6
 8004782:	d110      	bne.n	80047a6 <__cvt+0x92>
 8004784:	783b      	ldrb	r3, [r7, #0]
 8004786:	2b30      	cmp	r3, #48	; 0x30
 8004788:	d10a      	bne.n	80047a0 <__cvt+0x8c>
 800478a:	2200      	movs	r2, #0
 800478c:	2300      	movs	r3, #0
 800478e:	4620      	mov	r0, r4
 8004790:	4629      	mov	r1, r5
 8004792:	f7fc f9c1 	bl	8000b18 <__aeabi_dcmpeq>
 8004796:	b918      	cbnz	r0, 80047a0 <__cvt+0x8c>
 8004798:	f1c6 0601 	rsb	r6, r6, #1
 800479c:	f8ca 6000 	str.w	r6, [sl]
 80047a0:	f8da 3000 	ldr.w	r3, [sl]
 80047a4:	4499      	add	r9, r3
 80047a6:	2200      	movs	r2, #0
 80047a8:	2300      	movs	r3, #0
 80047aa:	4620      	mov	r0, r4
 80047ac:	4629      	mov	r1, r5
 80047ae:	f7fc f9b3 	bl	8000b18 <__aeabi_dcmpeq>
 80047b2:	b108      	cbz	r0, 80047b8 <__cvt+0xa4>
 80047b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80047b8:	2230      	movs	r2, #48	; 0x30
 80047ba:	9b03      	ldr	r3, [sp, #12]
 80047bc:	454b      	cmp	r3, r9
 80047be:	d307      	bcc.n	80047d0 <__cvt+0xbc>
 80047c0:	9b03      	ldr	r3, [sp, #12]
 80047c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047c4:	1bdb      	subs	r3, r3, r7
 80047c6:	4638      	mov	r0, r7
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	b004      	add	sp, #16
 80047cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d0:	1c59      	adds	r1, r3, #1
 80047d2:	9103      	str	r1, [sp, #12]
 80047d4:	701a      	strb	r2, [r3, #0]
 80047d6:	e7f0      	b.n	80047ba <__cvt+0xa6>

080047d8 <__exponent>:
 80047d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047da:	4603      	mov	r3, r0
 80047dc:	2900      	cmp	r1, #0
 80047de:	bfb8      	it	lt
 80047e0:	4249      	neglt	r1, r1
 80047e2:	f803 2b02 	strb.w	r2, [r3], #2
 80047e6:	bfb4      	ite	lt
 80047e8:	222d      	movlt	r2, #45	; 0x2d
 80047ea:	222b      	movge	r2, #43	; 0x2b
 80047ec:	2909      	cmp	r1, #9
 80047ee:	7042      	strb	r2, [r0, #1]
 80047f0:	dd2a      	ble.n	8004848 <__exponent+0x70>
 80047f2:	f10d 0407 	add.w	r4, sp, #7
 80047f6:	46a4      	mov	ip, r4
 80047f8:	270a      	movs	r7, #10
 80047fa:	46a6      	mov	lr, r4
 80047fc:	460a      	mov	r2, r1
 80047fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8004802:	fb07 1516 	mls	r5, r7, r6, r1
 8004806:	3530      	adds	r5, #48	; 0x30
 8004808:	2a63      	cmp	r2, #99	; 0x63
 800480a:	f104 34ff 	add.w	r4, r4, #4294967295
 800480e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004812:	4631      	mov	r1, r6
 8004814:	dcf1      	bgt.n	80047fa <__exponent+0x22>
 8004816:	3130      	adds	r1, #48	; 0x30
 8004818:	f1ae 0502 	sub.w	r5, lr, #2
 800481c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004820:	1c44      	adds	r4, r0, #1
 8004822:	4629      	mov	r1, r5
 8004824:	4561      	cmp	r1, ip
 8004826:	d30a      	bcc.n	800483e <__exponent+0x66>
 8004828:	f10d 0209 	add.w	r2, sp, #9
 800482c:	eba2 020e 	sub.w	r2, r2, lr
 8004830:	4565      	cmp	r5, ip
 8004832:	bf88      	it	hi
 8004834:	2200      	movhi	r2, #0
 8004836:	4413      	add	r3, r2
 8004838:	1a18      	subs	r0, r3, r0
 800483a:	b003      	add	sp, #12
 800483c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800483e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004842:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004846:	e7ed      	b.n	8004824 <__exponent+0x4c>
 8004848:	2330      	movs	r3, #48	; 0x30
 800484a:	3130      	adds	r1, #48	; 0x30
 800484c:	7083      	strb	r3, [r0, #2]
 800484e:	70c1      	strb	r1, [r0, #3]
 8004850:	1d03      	adds	r3, r0, #4
 8004852:	e7f1      	b.n	8004838 <__exponent+0x60>

08004854 <_printf_float>:
 8004854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004858:	ed2d 8b02 	vpush	{d8}
 800485c:	b08d      	sub	sp, #52	; 0x34
 800485e:	460c      	mov	r4, r1
 8004860:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004864:	4616      	mov	r6, r2
 8004866:	461f      	mov	r7, r3
 8004868:	4605      	mov	r5, r0
 800486a:	f001 fa6b 	bl	8005d44 <_localeconv_r>
 800486e:	f8d0 a000 	ldr.w	sl, [r0]
 8004872:	4650      	mov	r0, sl
 8004874:	f7fb fcd4 	bl	8000220 <strlen>
 8004878:	2300      	movs	r3, #0
 800487a:	930a      	str	r3, [sp, #40]	; 0x28
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	9305      	str	r3, [sp, #20]
 8004880:	f8d8 3000 	ldr.w	r3, [r8]
 8004884:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004888:	3307      	adds	r3, #7
 800488a:	f023 0307 	bic.w	r3, r3, #7
 800488e:	f103 0208 	add.w	r2, r3, #8
 8004892:	f8c8 2000 	str.w	r2, [r8]
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800489e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80048a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80048a6:	9307      	str	r3, [sp, #28]
 80048a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80048ac:	ee08 0a10 	vmov	s16, r0
 80048b0:	4b9f      	ldr	r3, [pc, #636]	; (8004b30 <_printf_float+0x2dc>)
 80048b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048b6:	f04f 32ff 	mov.w	r2, #4294967295
 80048ba:	f7fc f95f 	bl	8000b7c <__aeabi_dcmpun>
 80048be:	bb88      	cbnz	r0, 8004924 <_printf_float+0xd0>
 80048c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048c4:	4b9a      	ldr	r3, [pc, #616]	; (8004b30 <_printf_float+0x2dc>)
 80048c6:	f04f 32ff 	mov.w	r2, #4294967295
 80048ca:	f7fc f939 	bl	8000b40 <__aeabi_dcmple>
 80048ce:	bb48      	cbnz	r0, 8004924 <_printf_float+0xd0>
 80048d0:	2200      	movs	r2, #0
 80048d2:	2300      	movs	r3, #0
 80048d4:	4640      	mov	r0, r8
 80048d6:	4649      	mov	r1, r9
 80048d8:	f7fc f928 	bl	8000b2c <__aeabi_dcmplt>
 80048dc:	b110      	cbz	r0, 80048e4 <_printf_float+0x90>
 80048de:	232d      	movs	r3, #45	; 0x2d
 80048e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048e4:	4b93      	ldr	r3, [pc, #588]	; (8004b34 <_printf_float+0x2e0>)
 80048e6:	4894      	ldr	r0, [pc, #592]	; (8004b38 <_printf_float+0x2e4>)
 80048e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80048ec:	bf94      	ite	ls
 80048ee:	4698      	movls	r8, r3
 80048f0:	4680      	movhi	r8, r0
 80048f2:	2303      	movs	r3, #3
 80048f4:	6123      	str	r3, [r4, #16]
 80048f6:	9b05      	ldr	r3, [sp, #20]
 80048f8:	f023 0204 	bic.w	r2, r3, #4
 80048fc:	6022      	str	r2, [r4, #0]
 80048fe:	f04f 0900 	mov.w	r9, #0
 8004902:	9700      	str	r7, [sp, #0]
 8004904:	4633      	mov	r3, r6
 8004906:	aa0b      	add	r2, sp, #44	; 0x2c
 8004908:	4621      	mov	r1, r4
 800490a:	4628      	mov	r0, r5
 800490c:	f000 f9d8 	bl	8004cc0 <_printf_common>
 8004910:	3001      	adds	r0, #1
 8004912:	f040 8090 	bne.w	8004a36 <_printf_float+0x1e2>
 8004916:	f04f 30ff 	mov.w	r0, #4294967295
 800491a:	b00d      	add	sp, #52	; 0x34
 800491c:	ecbd 8b02 	vpop	{d8}
 8004920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004924:	4642      	mov	r2, r8
 8004926:	464b      	mov	r3, r9
 8004928:	4640      	mov	r0, r8
 800492a:	4649      	mov	r1, r9
 800492c:	f7fc f926 	bl	8000b7c <__aeabi_dcmpun>
 8004930:	b140      	cbz	r0, 8004944 <_printf_float+0xf0>
 8004932:	464b      	mov	r3, r9
 8004934:	2b00      	cmp	r3, #0
 8004936:	bfbc      	itt	lt
 8004938:	232d      	movlt	r3, #45	; 0x2d
 800493a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800493e:	487f      	ldr	r0, [pc, #508]	; (8004b3c <_printf_float+0x2e8>)
 8004940:	4b7f      	ldr	r3, [pc, #508]	; (8004b40 <_printf_float+0x2ec>)
 8004942:	e7d1      	b.n	80048e8 <_printf_float+0x94>
 8004944:	6863      	ldr	r3, [r4, #4]
 8004946:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800494a:	9206      	str	r2, [sp, #24]
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	d13f      	bne.n	80049d0 <_printf_float+0x17c>
 8004950:	2306      	movs	r3, #6
 8004952:	6063      	str	r3, [r4, #4]
 8004954:	9b05      	ldr	r3, [sp, #20]
 8004956:	6861      	ldr	r1, [r4, #4]
 8004958:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800495c:	2300      	movs	r3, #0
 800495e:	9303      	str	r3, [sp, #12]
 8004960:	ab0a      	add	r3, sp, #40	; 0x28
 8004962:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004966:	ab09      	add	r3, sp, #36	; 0x24
 8004968:	ec49 8b10 	vmov	d0, r8, r9
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	6022      	str	r2, [r4, #0]
 8004970:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004974:	4628      	mov	r0, r5
 8004976:	f7ff fecd 	bl	8004714 <__cvt>
 800497a:	9b06      	ldr	r3, [sp, #24]
 800497c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800497e:	2b47      	cmp	r3, #71	; 0x47
 8004980:	4680      	mov	r8, r0
 8004982:	d108      	bne.n	8004996 <_printf_float+0x142>
 8004984:	1cc8      	adds	r0, r1, #3
 8004986:	db02      	blt.n	800498e <_printf_float+0x13a>
 8004988:	6863      	ldr	r3, [r4, #4]
 800498a:	4299      	cmp	r1, r3
 800498c:	dd41      	ble.n	8004a12 <_printf_float+0x1be>
 800498e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004992:	fa5f fb8b 	uxtb.w	fp, fp
 8004996:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800499a:	d820      	bhi.n	80049de <_printf_float+0x18a>
 800499c:	3901      	subs	r1, #1
 800499e:	465a      	mov	r2, fp
 80049a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049a4:	9109      	str	r1, [sp, #36]	; 0x24
 80049a6:	f7ff ff17 	bl	80047d8 <__exponent>
 80049aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049ac:	1813      	adds	r3, r2, r0
 80049ae:	2a01      	cmp	r2, #1
 80049b0:	4681      	mov	r9, r0
 80049b2:	6123      	str	r3, [r4, #16]
 80049b4:	dc02      	bgt.n	80049bc <_printf_float+0x168>
 80049b6:	6822      	ldr	r2, [r4, #0]
 80049b8:	07d2      	lsls	r2, r2, #31
 80049ba:	d501      	bpl.n	80049c0 <_printf_float+0x16c>
 80049bc:	3301      	adds	r3, #1
 80049be:	6123      	str	r3, [r4, #16]
 80049c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d09c      	beq.n	8004902 <_printf_float+0xae>
 80049c8:	232d      	movs	r3, #45	; 0x2d
 80049ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ce:	e798      	b.n	8004902 <_printf_float+0xae>
 80049d0:	9a06      	ldr	r2, [sp, #24]
 80049d2:	2a47      	cmp	r2, #71	; 0x47
 80049d4:	d1be      	bne.n	8004954 <_printf_float+0x100>
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1bc      	bne.n	8004954 <_printf_float+0x100>
 80049da:	2301      	movs	r3, #1
 80049dc:	e7b9      	b.n	8004952 <_printf_float+0xfe>
 80049de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80049e2:	d118      	bne.n	8004a16 <_printf_float+0x1c2>
 80049e4:	2900      	cmp	r1, #0
 80049e6:	6863      	ldr	r3, [r4, #4]
 80049e8:	dd0b      	ble.n	8004a02 <_printf_float+0x1ae>
 80049ea:	6121      	str	r1, [r4, #16]
 80049ec:	b913      	cbnz	r3, 80049f4 <_printf_float+0x1a0>
 80049ee:	6822      	ldr	r2, [r4, #0]
 80049f0:	07d0      	lsls	r0, r2, #31
 80049f2:	d502      	bpl.n	80049fa <_printf_float+0x1a6>
 80049f4:	3301      	adds	r3, #1
 80049f6:	440b      	add	r3, r1
 80049f8:	6123      	str	r3, [r4, #16]
 80049fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80049fc:	f04f 0900 	mov.w	r9, #0
 8004a00:	e7de      	b.n	80049c0 <_printf_float+0x16c>
 8004a02:	b913      	cbnz	r3, 8004a0a <_printf_float+0x1b6>
 8004a04:	6822      	ldr	r2, [r4, #0]
 8004a06:	07d2      	lsls	r2, r2, #31
 8004a08:	d501      	bpl.n	8004a0e <_printf_float+0x1ba>
 8004a0a:	3302      	adds	r3, #2
 8004a0c:	e7f4      	b.n	80049f8 <_printf_float+0x1a4>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e7f2      	b.n	80049f8 <_printf_float+0x1a4>
 8004a12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a18:	4299      	cmp	r1, r3
 8004a1a:	db05      	blt.n	8004a28 <_printf_float+0x1d4>
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	6121      	str	r1, [r4, #16]
 8004a20:	07d8      	lsls	r0, r3, #31
 8004a22:	d5ea      	bpl.n	80049fa <_printf_float+0x1a6>
 8004a24:	1c4b      	adds	r3, r1, #1
 8004a26:	e7e7      	b.n	80049f8 <_printf_float+0x1a4>
 8004a28:	2900      	cmp	r1, #0
 8004a2a:	bfd4      	ite	le
 8004a2c:	f1c1 0202 	rsble	r2, r1, #2
 8004a30:	2201      	movgt	r2, #1
 8004a32:	4413      	add	r3, r2
 8004a34:	e7e0      	b.n	80049f8 <_printf_float+0x1a4>
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	055a      	lsls	r2, r3, #21
 8004a3a:	d407      	bmi.n	8004a4c <_printf_float+0x1f8>
 8004a3c:	6923      	ldr	r3, [r4, #16]
 8004a3e:	4642      	mov	r2, r8
 8004a40:	4631      	mov	r1, r6
 8004a42:	4628      	mov	r0, r5
 8004a44:	47b8      	blx	r7
 8004a46:	3001      	adds	r0, #1
 8004a48:	d12c      	bne.n	8004aa4 <_printf_float+0x250>
 8004a4a:	e764      	b.n	8004916 <_printf_float+0xc2>
 8004a4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a50:	f240 80e0 	bls.w	8004c14 <_printf_float+0x3c0>
 8004a54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f7fc f85c 	bl	8000b18 <__aeabi_dcmpeq>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	d034      	beq.n	8004ace <_printf_float+0x27a>
 8004a64:	4a37      	ldr	r2, [pc, #220]	; (8004b44 <_printf_float+0x2f0>)
 8004a66:	2301      	movs	r3, #1
 8004a68:	4631      	mov	r1, r6
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	47b8      	blx	r7
 8004a6e:	3001      	adds	r0, #1
 8004a70:	f43f af51 	beq.w	8004916 <_printf_float+0xc2>
 8004a74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	db02      	blt.n	8004a82 <_printf_float+0x22e>
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	07d8      	lsls	r0, r3, #31
 8004a80:	d510      	bpl.n	8004aa4 <_printf_float+0x250>
 8004a82:	ee18 3a10 	vmov	r3, s16
 8004a86:	4652      	mov	r2, sl
 8004a88:	4631      	mov	r1, r6
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	47b8      	blx	r7
 8004a8e:	3001      	adds	r0, #1
 8004a90:	f43f af41 	beq.w	8004916 <_printf_float+0xc2>
 8004a94:	f04f 0800 	mov.w	r8, #0
 8004a98:	f104 091a 	add.w	r9, r4, #26
 8004a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	4543      	cmp	r3, r8
 8004aa2:	dc09      	bgt.n	8004ab8 <_printf_float+0x264>
 8004aa4:	6823      	ldr	r3, [r4, #0]
 8004aa6:	079b      	lsls	r3, r3, #30
 8004aa8:	f100 8105 	bmi.w	8004cb6 <_printf_float+0x462>
 8004aac:	68e0      	ldr	r0, [r4, #12]
 8004aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ab0:	4298      	cmp	r0, r3
 8004ab2:	bfb8      	it	lt
 8004ab4:	4618      	movlt	r0, r3
 8004ab6:	e730      	b.n	800491a <_printf_float+0xc6>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	464a      	mov	r2, r9
 8004abc:	4631      	mov	r1, r6
 8004abe:	4628      	mov	r0, r5
 8004ac0:	47b8      	blx	r7
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	f43f af27 	beq.w	8004916 <_printf_float+0xc2>
 8004ac8:	f108 0801 	add.w	r8, r8, #1
 8004acc:	e7e6      	b.n	8004a9c <_printf_float+0x248>
 8004ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	dc39      	bgt.n	8004b48 <_printf_float+0x2f4>
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <_printf_float+0x2f0>)
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	4631      	mov	r1, r6
 8004ada:	4628      	mov	r0, r5
 8004adc:	47b8      	blx	r7
 8004ade:	3001      	adds	r0, #1
 8004ae0:	f43f af19 	beq.w	8004916 <_printf_float+0xc2>
 8004ae4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	d102      	bne.n	8004af2 <_printf_float+0x29e>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	07d9      	lsls	r1, r3, #31
 8004af0:	d5d8      	bpl.n	8004aa4 <_printf_float+0x250>
 8004af2:	ee18 3a10 	vmov	r3, s16
 8004af6:	4652      	mov	r2, sl
 8004af8:	4631      	mov	r1, r6
 8004afa:	4628      	mov	r0, r5
 8004afc:	47b8      	blx	r7
 8004afe:	3001      	adds	r0, #1
 8004b00:	f43f af09 	beq.w	8004916 <_printf_float+0xc2>
 8004b04:	f04f 0900 	mov.w	r9, #0
 8004b08:	f104 0a1a 	add.w	sl, r4, #26
 8004b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b0e:	425b      	negs	r3, r3
 8004b10:	454b      	cmp	r3, r9
 8004b12:	dc01      	bgt.n	8004b18 <_printf_float+0x2c4>
 8004b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b16:	e792      	b.n	8004a3e <_printf_float+0x1ea>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	4652      	mov	r2, sl
 8004b1c:	4631      	mov	r1, r6
 8004b1e:	4628      	mov	r0, r5
 8004b20:	47b8      	blx	r7
 8004b22:	3001      	adds	r0, #1
 8004b24:	f43f aef7 	beq.w	8004916 <_printf_float+0xc2>
 8004b28:	f109 0901 	add.w	r9, r9, #1
 8004b2c:	e7ee      	b.n	8004b0c <_printf_float+0x2b8>
 8004b2e:	bf00      	nop
 8004b30:	7fefffff 	.word	0x7fefffff
 8004b34:	080075a8 	.word	0x080075a8
 8004b38:	080075ac 	.word	0x080075ac
 8004b3c:	080075b4 	.word	0x080075b4
 8004b40:	080075b0 	.word	0x080075b0
 8004b44:	080075b8 	.word	0x080075b8
 8004b48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	bfa8      	it	ge
 8004b50:	461a      	movge	r2, r3
 8004b52:	2a00      	cmp	r2, #0
 8004b54:	4691      	mov	r9, r2
 8004b56:	dc37      	bgt.n	8004bc8 <_printf_float+0x374>
 8004b58:	f04f 0b00 	mov.w	fp, #0
 8004b5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b60:	f104 021a 	add.w	r2, r4, #26
 8004b64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b66:	9305      	str	r3, [sp, #20]
 8004b68:	eba3 0309 	sub.w	r3, r3, r9
 8004b6c:	455b      	cmp	r3, fp
 8004b6e:	dc33      	bgt.n	8004bd8 <_printf_float+0x384>
 8004b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b74:	429a      	cmp	r2, r3
 8004b76:	db3b      	blt.n	8004bf0 <_printf_float+0x39c>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	07da      	lsls	r2, r3, #31
 8004b7c:	d438      	bmi.n	8004bf0 <_printf_float+0x39c>
 8004b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b80:	9a05      	ldr	r2, [sp, #20]
 8004b82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b84:	1a9a      	subs	r2, r3, r2
 8004b86:	eba3 0901 	sub.w	r9, r3, r1
 8004b8a:	4591      	cmp	r9, r2
 8004b8c:	bfa8      	it	ge
 8004b8e:	4691      	movge	r9, r2
 8004b90:	f1b9 0f00 	cmp.w	r9, #0
 8004b94:	dc35      	bgt.n	8004c02 <_printf_float+0x3ae>
 8004b96:	f04f 0800 	mov.w	r8, #0
 8004b9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b9e:	f104 0a1a 	add.w	sl, r4, #26
 8004ba2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ba6:	1a9b      	subs	r3, r3, r2
 8004ba8:	eba3 0309 	sub.w	r3, r3, r9
 8004bac:	4543      	cmp	r3, r8
 8004bae:	f77f af79 	ble.w	8004aa4 <_printf_float+0x250>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	4652      	mov	r2, sl
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	4628      	mov	r0, r5
 8004bba:	47b8      	blx	r7
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	f43f aeaa 	beq.w	8004916 <_printf_float+0xc2>
 8004bc2:	f108 0801 	add.w	r8, r8, #1
 8004bc6:	e7ec      	b.n	8004ba2 <_printf_float+0x34e>
 8004bc8:	4613      	mov	r3, r2
 8004bca:	4631      	mov	r1, r6
 8004bcc:	4642      	mov	r2, r8
 8004bce:	4628      	mov	r0, r5
 8004bd0:	47b8      	blx	r7
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	d1c0      	bne.n	8004b58 <_printf_float+0x304>
 8004bd6:	e69e      	b.n	8004916 <_printf_float+0xc2>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	4631      	mov	r1, r6
 8004bdc:	4628      	mov	r0, r5
 8004bde:	9205      	str	r2, [sp, #20]
 8004be0:	47b8      	blx	r7
 8004be2:	3001      	adds	r0, #1
 8004be4:	f43f ae97 	beq.w	8004916 <_printf_float+0xc2>
 8004be8:	9a05      	ldr	r2, [sp, #20]
 8004bea:	f10b 0b01 	add.w	fp, fp, #1
 8004bee:	e7b9      	b.n	8004b64 <_printf_float+0x310>
 8004bf0:	ee18 3a10 	vmov	r3, s16
 8004bf4:	4652      	mov	r2, sl
 8004bf6:	4631      	mov	r1, r6
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	47b8      	blx	r7
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	d1be      	bne.n	8004b7e <_printf_float+0x32a>
 8004c00:	e689      	b.n	8004916 <_printf_float+0xc2>
 8004c02:	9a05      	ldr	r2, [sp, #20]
 8004c04:	464b      	mov	r3, r9
 8004c06:	4442      	add	r2, r8
 8004c08:	4631      	mov	r1, r6
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	47b8      	blx	r7
 8004c0e:	3001      	adds	r0, #1
 8004c10:	d1c1      	bne.n	8004b96 <_printf_float+0x342>
 8004c12:	e680      	b.n	8004916 <_printf_float+0xc2>
 8004c14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c16:	2a01      	cmp	r2, #1
 8004c18:	dc01      	bgt.n	8004c1e <_printf_float+0x3ca>
 8004c1a:	07db      	lsls	r3, r3, #31
 8004c1c:	d538      	bpl.n	8004c90 <_printf_float+0x43c>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	4642      	mov	r2, r8
 8004c22:	4631      	mov	r1, r6
 8004c24:	4628      	mov	r0, r5
 8004c26:	47b8      	blx	r7
 8004c28:	3001      	adds	r0, #1
 8004c2a:	f43f ae74 	beq.w	8004916 <_printf_float+0xc2>
 8004c2e:	ee18 3a10 	vmov	r3, s16
 8004c32:	4652      	mov	r2, sl
 8004c34:	4631      	mov	r1, r6
 8004c36:	4628      	mov	r0, r5
 8004c38:	47b8      	blx	r7
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	f43f ae6b 	beq.w	8004916 <_printf_float+0xc2>
 8004c40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c44:	2200      	movs	r2, #0
 8004c46:	2300      	movs	r3, #0
 8004c48:	f7fb ff66 	bl	8000b18 <__aeabi_dcmpeq>
 8004c4c:	b9d8      	cbnz	r0, 8004c86 <_printf_float+0x432>
 8004c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c50:	f108 0201 	add.w	r2, r8, #1
 8004c54:	3b01      	subs	r3, #1
 8004c56:	4631      	mov	r1, r6
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b8      	blx	r7
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d10e      	bne.n	8004c7e <_printf_float+0x42a>
 8004c60:	e659      	b.n	8004916 <_printf_float+0xc2>
 8004c62:	2301      	movs	r3, #1
 8004c64:	4652      	mov	r2, sl
 8004c66:	4631      	mov	r1, r6
 8004c68:	4628      	mov	r0, r5
 8004c6a:	47b8      	blx	r7
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	f43f ae52 	beq.w	8004916 <_printf_float+0xc2>
 8004c72:	f108 0801 	add.w	r8, r8, #1
 8004c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	4543      	cmp	r3, r8
 8004c7c:	dcf1      	bgt.n	8004c62 <_printf_float+0x40e>
 8004c7e:	464b      	mov	r3, r9
 8004c80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c84:	e6dc      	b.n	8004a40 <_printf_float+0x1ec>
 8004c86:	f04f 0800 	mov.w	r8, #0
 8004c8a:	f104 0a1a 	add.w	sl, r4, #26
 8004c8e:	e7f2      	b.n	8004c76 <_printf_float+0x422>
 8004c90:	2301      	movs	r3, #1
 8004c92:	4642      	mov	r2, r8
 8004c94:	e7df      	b.n	8004c56 <_printf_float+0x402>
 8004c96:	2301      	movs	r3, #1
 8004c98:	464a      	mov	r2, r9
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	47b8      	blx	r7
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	f43f ae38 	beq.w	8004916 <_printf_float+0xc2>
 8004ca6:	f108 0801 	add.w	r8, r8, #1
 8004caa:	68e3      	ldr	r3, [r4, #12]
 8004cac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cae:	1a5b      	subs	r3, r3, r1
 8004cb0:	4543      	cmp	r3, r8
 8004cb2:	dcf0      	bgt.n	8004c96 <_printf_float+0x442>
 8004cb4:	e6fa      	b.n	8004aac <_printf_float+0x258>
 8004cb6:	f04f 0800 	mov.w	r8, #0
 8004cba:	f104 0919 	add.w	r9, r4, #25
 8004cbe:	e7f4      	b.n	8004caa <_printf_float+0x456>

08004cc0 <_printf_common>:
 8004cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc4:	4616      	mov	r6, r2
 8004cc6:	4699      	mov	r9, r3
 8004cc8:	688a      	ldr	r2, [r1, #8]
 8004cca:	690b      	ldr	r3, [r1, #16]
 8004ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	bfb8      	it	lt
 8004cd4:	4613      	movlt	r3, r2
 8004cd6:	6033      	str	r3, [r6, #0]
 8004cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cdc:	4607      	mov	r7, r0
 8004cde:	460c      	mov	r4, r1
 8004ce0:	b10a      	cbz	r2, 8004ce6 <_printf_common+0x26>
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	6033      	str	r3, [r6, #0]
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	0699      	lsls	r1, r3, #26
 8004cea:	bf42      	ittt	mi
 8004cec:	6833      	ldrmi	r3, [r6, #0]
 8004cee:	3302      	addmi	r3, #2
 8004cf0:	6033      	strmi	r3, [r6, #0]
 8004cf2:	6825      	ldr	r5, [r4, #0]
 8004cf4:	f015 0506 	ands.w	r5, r5, #6
 8004cf8:	d106      	bne.n	8004d08 <_printf_common+0x48>
 8004cfa:	f104 0a19 	add.w	sl, r4, #25
 8004cfe:	68e3      	ldr	r3, [r4, #12]
 8004d00:	6832      	ldr	r2, [r6, #0]
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	42ab      	cmp	r3, r5
 8004d06:	dc26      	bgt.n	8004d56 <_printf_common+0x96>
 8004d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d0c:	1e13      	subs	r3, r2, #0
 8004d0e:	6822      	ldr	r2, [r4, #0]
 8004d10:	bf18      	it	ne
 8004d12:	2301      	movne	r3, #1
 8004d14:	0692      	lsls	r2, r2, #26
 8004d16:	d42b      	bmi.n	8004d70 <_printf_common+0xb0>
 8004d18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	4638      	mov	r0, r7
 8004d20:	47c0      	blx	r8
 8004d22:	3001      	adds	r0, #1
 8004d24:	d01e      	beq.n	8004d64 <_printf_common+0xa4>
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	68e5      	ldr	r5, [r4, #12]
 8004d2a:	6832      	ldr	r2, [r6, #0]
 8004d2c:	f003 0306 	and.w	r3, r3, #6
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	bf08      	it	eq
 8004d34:	1aad      	subeq	r5, r5, r2
 8004d36:	68a3      	ldr	r3, [r4, #8]
 8004d38:	6922      	ldr	r2, [r4, #16]
 8004d3a:	bf0c      	ite	eq
 8004d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d40:	2500      	movne	r5, #0
 8004d42:	4293      	cmp	r3, r2
 8004d44:	bfc4      	itt	gt
 8004d46:	1a9b      	subgt	r3, r3, r2
 8004d48:	18ed      	addgt	r5, r5, r3
 8004d4a:	2600      	movs	r6, #0
 8004d4c:	341a      	adds	r4, #26
 8004d4e:	42b5      	cmp	r5, r6
 8004d50:	d11a      	bne.n	8004d88 <_printf_common+0xc8>
 8004d52:	2000      	movs	r0, #0
 8004d54:	e008      	b.n	8004d68 <_printf_common+0xa8>
 8004d56:	2301      	movs	r3, #1
 8004d58:	4652      	mov	r2, sl
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	4638      	mov	r0, r7
 8004d5e:	47c0      	blx	r8
 8004d60:	3001      	adds	r0, #1
 8004d62:	d103      	bne.n	8004d6c <_printf_common+0xac>
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295
 8004d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6c:	3501      	adds	r5, #1
 8004d6e:	e7c6      	b.n	8004cfe <_printf_common+0x3e>
 8004d70:	18e1      	adds	r1, r4, r3
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	2030      	movs	r0, #48	; 0x30
 8004d76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d7a:	4422      	add	r2, r4
 8004d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d84:	3302      	adds	r3, #2
 8004d86:	e7c7      	b.n	8004d18 <_printf_common+0x58>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	4649      	mov	r1, r9
 8004d8e:	4638      	mov	r0, r7
 8004d90:	47c0      	blx	r8
 8004d92:	3001      	adds	r0, #1
 8004d94:	d0e6      	beq.n	8004d64 <_printf_common+0xa4>
 8004d96:	3601      	adds	r6, #1
 8004d98:	e7d9      	b.n	8004d4e <_printf_common+0x8e>
	...

08004d9c <_printf_i>:
 8004d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004da0:	7e0f      	ldrb	r7, [r1, #24]
 8004da2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004da4:	2f78      	cmp	r7, #120	; 0x78
 8004da6:	4691      	mov	r9, r2
 8004da8:	4680      	mov	r8, r0
 8004daa:	460c      	mov	r4, r1
 8004dac:	469a      	mov	sl, r3
 8004dae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004db2:	d807      	bhi.n	8004dc4 <_printf_i+0x28>
 8004db4:	2f62      	cmp	r7, #98	; 0x62
 8004db6:	d80a      	bhi.n	8004dce <_printf_i+0x32>
 8004db8:	2f00      	cmp	r7, #0
 8004dba:	f000 80d8 	beq.w	8004f6e <_printf_i+0x1d2>
 8004dbe:	2f58      	cmp	r7, #88	; 0x58
 8004dc0:	f000 80a3 	beq.w	8004f0a <_printf_i+0x16e>
 8004dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dcc:	e03a      	b.n	8004e44 <_printf_i+0xa8>
 8004dce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dd2:	2b15      	cmp	r3, #21
 8004dd4:	d8f6      	bhi.n	8004dc4 <_printf_i+0x28>
 8004dd6:	a101      	add	r1, pc, #4	; (adr r1, 8004ddc <_printf_i+0x40>)
 8004dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ddc:	08004e35 	.word	0x08004e35
 8004de0:	08004e49 	.word	0x08004e49
 8004de4:	08004dc5 	.word	0x08004dc5
 8004de8:	08004dc5 	.word	0x08004dc5
 8004dec:	08004dc5 	.word	0x08004dc5
 8004df0:	08004dc5 	.word	0x08004dc5
 8004df4:	08004e49 	.word	0x08004e49
 8004df8:	08004dc5 	.word	0x08004dc5
 8004dfc:	08004dc5 	.word	0x08004dc5
 8004e00:	08004dc5 	.word	0x08004dc5
 8004e04:	08004dc5 	.word	0x08004dc5
 8004e08:	08004f55 	.word	0x08004f55
 8004e0c:	08004e79 	.word	0x08004e79
 8004e10:	08004f37 	.word	0x08004f37
 8004e14:	08004dc5 	.word	0x08004dc5
 8004e18:	08004dc5 	.word	0x08004dc5
 8004e1c:	08004f77 	.word	0x08004f77
 8004e20:	08004dc5 	.word	0x08004dc5
 8004e24:	08004e79 	.word	0x08004e79
 8004e28:	08004dc5 	.word	0x08004dc5
 8004e2c:	08004dc5 	.word	0x08004dc5
 8004e30:	08004f3f 	.word	0x08004f3f
 8004e34:	682b      	ldr	r3, [r5, #0]
 8004e36:	1d1a      	adds	r2, r3, #4
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	602a      	str	r2, [r5, #0]
 8004e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0a3      	b.n	8004f90 <_printf_i+0x1f4>
 8004e48:	6820      	ldr	r0, [r4, #0]
 8004e4a:	6829      	ldr	r1, [r5, #0]
 8004e4c:	0606      	lsls	r6, r0, #24
 8004e4e:	f101 0304 	add.w	r3, r1, #4
 8004e52:	d50a      	bpl.n	8004e6a <_printf_i+0xce>
 8004e54:	680e      	ldr	r6, [r1, #0]
 8004e56:	602b      	str	r3, [r5, #0]
 8004e58:	2e00      	cmp	r6, #0
 8004e5a:	da03      	bge.n	8004e64 <_printf_i+0xc8>
 8004e5c:	232d      	movs	r3, #45	; 0x2d
 8004e5e:	4276      	negs	r6, r6
 8004e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e64:	485e      	ldr	r0, [pc, #376]	; (8004fe0 <_printf_i+0x244>)
 8004e66:	230a      	movs	r3, #10
 8004e68:	e019      	b.n	8004e9e <_printf_i+0x102>
 8004e6a:	680e      	ldr	r6, [r1, #0]
 8004e6c:	602b      	str	r3, [r5, #0]
 8004e6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e72:	bf18      	it	ne
 8004e74:	b236      	sxthne	r6, r6
 8004e76:	e7ef      	b.n	8004e58 <_printf_i+0xbc>
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	6820      	ldr	r0, [r4, #0]
 8004e7c:	1d19      	adds	r1, r3, #4
 8004e7e:	6029      	str	r1, [r5, #0]
 8004e80:	0601      	lsls	r1, r0, #24
 8004e82:	d501      	bpl.n	8004e88 <_printf_i+0xec>
 8004e84:	681e      	ldr	r6, [r3, #0]
 8004e86:	e002      	b.n	8004e8e <_printf_i+0xf2>
 8004e88:	0646      	lsls	r6, r0, #25
 8004e8a:	d5fb      	bpl.n	8004e84 <_printf_i+0xe8>
 8004e8c:	881e      	ldrh	r6, [r3, #0]
 8004e8e:	4854      	ldr	r0, [pc, #336]	; (8004fe0 <_printf_i+0x244>)
 8004e90:	2f6f      	cmp	r7, #111	; 0x6f
 8004e92:	bf0c      	ite	eq
 8004e94:	2308      	moveq	r3, #8
 8004e96:	230a      	movne	r3, #10
 8004e98:	2100      	movs	r1, #0
 8004e9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e9e:	6865      	ldr	r5, [r4, #4]
 8004ea0:	60a5      	str	r5, [r4, #8]
 8004ea2:	2d00      	cmp	r5, #0
 8004ea4:	bfa2      	ittt	ge
 8004ea6:	6821      	ldrge	r1, [r4, #0]
 8004ea8:	f021 0104 	bicge.w	r1, r1, #4
 8004eac:	6021      	strge	r1, [r4, #0]
 8004eae:	b90e      	cbnz	r6, 8004eb4 <_printf_i+0x118>
 8004eb0:	2d00      	cmp	r5, #0
 8004eb2:	d04d      	beq.n	8004f50 <_printf_i+0x1b4>
 8004eb4:	4615      	mov	r5, r2
 8004eb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004eba:	fb03 6711 	mls	r7, r3, r1, r6
 8004ebe:	5dc7      	ldrb	r7, [r0, r7]
 8004ec0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ec4:	4637      	mov	r7, r6
 8004ec6:	42bb      	cmp	r3, r7
 8004ec8:	460e      	mov	r6, r1
 8004eca:	d9f4      	bls.n	8004eb6 <_printf_i+0x11a>
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d10b      	bne.n	8004ee8 <_printf_i+0x14c>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	07de      	lsls	r6, r3, #31
 8004ed4:	d508      	bpl.n	8004ee8 <_printf_i+0x14c>
 8004ed6:	6923      	ldr	r3, [r4, #16]
 8004ed8:	6861      	ldr	r1, [r4, #4]
 8004eda:	4299      	cmp	r1, r3
 8004edc:	bfde      	ittt	le
 8004ede:	2330      	movle	r3, #48	; 0x30
 8004ee0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ee4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ee8:	1b52      	subs	r2, r2, r5
 8004eea:	6122      	str	r2, [r4, #16]
 8004eec:	f8cd a000 	str.w	sl, [sp]
 8004ef0:	464b      	mov	r3, r9
 8004ef2:	aa03      	add	r2, sp, #12
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	f7ff fee2 	bl	8004cc0 <_printf_common>
 8004efc:	3001      	adds	r0, #1
 8004efe:	d14c      	bne.n	8004f9a <_printf_i+0x1fe>
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295
 8004f04:	b004      	add	sp, #16
 8004f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f0a:	4835      	ldr	r0, [pc, #212]	; (8004fe0 <_printf_i+0x244>)
 8004f0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f10:	6829      	ldr	r1, [r5, #0]
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f18:	6029      	str	r1, [r5, #0]
 8004f1a:	061d      	lsls	r5, r3, #24
 8004f1c:	d514      	bpl.n	8004f48 <_printf_i+0x1ac>
 8004f1e:	07df      	lsls	r7, r3, #31
 8004f20:	bf44      	itt	mi
 8004f22:	f043 0320 	orrmi.w	r3, r3, #32
 8004f26:	6023      	strmi	r3, [r4, #0]
 8004f28:	b91e      	cbnz	r6, 8004f32 <_printf_i+0x196>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	f023 0320 	bic.w	r3, r3, #32
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	2310      	movs	r3, #16
 8004f34:	e7b0      	b.n	8004e98 <_printf_i+0xfc>
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	f043 0320 	orr.w	r3, r3, #32
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	2378      	movs	r3, #120	; 0x78
 8004f40:	4828      	ldr	r0, [pc, #160]	; (8004fe4 <_printf_i+0x248>)
 8004f42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f46:	e7e3      	b.n	8004f10 <_printf_i+0x174>
 8004f48:	0659      	lsls	r1, r3, #25
 8004f4a:	bf48      	it	mi
 8004f4c:	b2b6      	uxthmi	r6, r6
 8004f4e:	e7e6      	b.n	8004f1e <_printf_i+0x182>
 8004f50:	4615      	mov	r5, r2
 8004f52:	e7bb      	b.n	8004ecc <_printf_i+0x130>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	6826      	ldr	r6, [r4, #0]
 8004f58:	6961      	ldr	r1, [r4, #20]
 8004f5a:	1d18      	adds	r0, r3, #4
 8004f5c:	6028      	str	r0, [r5, #0]
 8004f5e:	0635      	lsls	r5, r6, #24
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	d501      	bpl.n	8004f68 <_printf_i+0x1cc>
 8004f64:	6019      	str	r1, [r3, #0]
 8004f66:	e002      	b.n	8004f6e <_printf_i+0x1d2>
 8004f68:	0670      	lsls	r0, r6, #25
 8004f6a:	d5fb      	bpl.n	8004f64 <_printf_i+0x1c8>
 8004f6c:	8019      	strh	r1, [r3, #0]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	6123      	str	r3, [r4, #16]
 8004f72:	4615      	mov	r5, r2
 8004f74:	e7ba      	b.n	8004eec <_printf_i+0x150>
 8004f76:	682b      	ldr	r3, [r5, #0]
 8004f78:	1d1a      	adds	r2, r3, #4
 8004f7a:	602a      	str	r2, [r5, #0]
 8004f7c:	681d      	ldr	r5, [r3, #0]
 8004f7e:	6862      	ldr	r2, [r4, #4]
 8004f80:	2100      	movs	r1, #0
 8004f82:	4628      	mov	r0, r5
 8004f84:	f7fb f954 	bl	8000230 <memchr>
 8004f88:	b108      	cbz	r0, 8004f8e <_printf_i+0x1f2>
 8004f8a:	1b40      	subs	r0, r0, r5
 8004f8c:	6060      	str	r0, [r4, #4]
 8004f8e:	6863      	ldr	r3, [r4, #4]
 8004f90:	6123      	str	r3, [r4, #16]
 8004f92:	2300      	movs	r3, #0
 8004f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f98:	e7a8      	b.n	8004eec <_printf_i+0x150>
 8004f9a:	6923      	ldr	r3, [r4, #16]
 8004f9c:	462a      	mov	r2, r5
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	4640      	mov	r0, r8
 8004fa2:	47d0      	blx	sl
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	d0ab      	beq.n	8004f00 <_printf_i+0x164>
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	079b      	lsls	r3, r3, #30
 8004fac:	d413      	bmi.n	8004fd6 <_printf_i+0x23a>
 8004fae:	68e0      	ldr	r0, [r4, #12]
 8004fb0:	9b03      	ldr	r3, [sp, #12]
 8004fb2:	4298      	cmp	r0, r3
 8004fb4:	bfb8      	it	lt
 8004fb6:	4618      	movlt	r0, r3
 8004fb8:	e7a4      	b.n	8004f04 <_printf_i+0x168>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	4640      	mov	r0, r8
 8004fc2:	47d0      	blx	sl
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d09b      	beq.n	8004f00 <_printf_i+0x164>
 8004fc8:	3501      	adds	r5, #1
 8004fca:	68e3      	ldr	r3, [r4, #12]
 8004fcc:	9903      	ldr	r1, [sp, #12]
 8004fce:	1a5b      	subs	r3, r3, r1
 8004fd0:	42ab      	cmp	r3, r5
 8004fd2:	dcf2      	bgt.n	8004fba <_printf_i+0x21e>
 8004fd4:	e7eb      	b.n	8004fae <_printf_i+0x212>
 8004fd6:	2500      	movs	r5, #0
 8004fd8:	f104 0619 	add.w	r6, r4, #25
 8004fdc:	e7f5      	b.n	8004fca <_printf_i+0x22e>
 8004fde:	bf00      	nop
 8004fe0:	080075ba 	.word	0x080075ba
 8004fe4:	080075cb 	.word	0x080075cb

08004fe8 <sniprintf>:
 8004fe8:	b40c      	push	{r2, r3}
 8004fea:	b530      	push	{r4, r5, lr}
 8004fec:	4b17      	ldr	r3, [pc, #92]	; (800504c <sniprintf+0x64>)
 8004fee:	1e0c      	subs	r4, r1, #0
 8004ff0:	681d      	ldr	r5, [r3, #0]
 8004ff2:	b09d      	sub	sp, #116	; 0x74
 8004ff4:	da08      	bge.n	8005008 <sniprintf+0x20>
 8004ff6:	238b      	movs	r3, #139	; 0x8b
 8004ff8:	602b      	str	r3, [r5, #0]
 8004ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffe:	b01d      	add	sp, #116	; 0x74
 8005000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005004:	b002      	add	sp, #8
 8005006:	4770      	bx	lr
 8005008:	f44f 7302 	mov.w	r3, #520	; 0x208
 800500c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005010:	bf14      	ite	ne
 8005012:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005016:	4623      	moveq	r3, r4
 8005018:	9304      	str	r3, [sp, #16]
 800501a:	9307      	str	r3, [sp, #28]
 800501c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005020:	9002      	str	r0, [sp, #8]
 8005022:	9006      	str	r0, [sp, #24]
 8005024:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005028:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800502a:	ab21      	add	r3, sp, #132	; 0x84
 800502c:	a902      	add	r1, sp, #8
 800502e:	4628      	mov	r0, r5
 8005030:	9301      	str	r3, [sp, #4]
 8005032:	f001 fb77 	bl	8006724 <_svfiprintf_r>
 8005036:	1c43      	adds	r3, r0, #1
 8005038:	bfbc      	itt	lt
 800503a:	238b      	movlt	r3, #139	; 0x8b
 800503c:	602b      	strlt	r3, [r5, #0]
 800503e:	2c00      	cmp	r4, #0
 8005040:	d0dd      	beq.n	8004ffe <sniprintf+0x16>
 8005042:	9b02      	ldr	r3, [sp, #8]
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
 8005048:	e7d9      	b.n	8004ffe <sniprintf+0x16>
 800504a:	bf00      	nop
 800504c:	2000000c 	.word	0x2000000c

08005050 <quorem>:
 8005050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005054:	6903      	ldr	r3, [r0, #16]
 8005056:	690c      	ldr	r4, [r1, #16]
 8005058:	42a3      	cmp	r3, r4
 800505a:	4607      	mov	r7, r0
 800505c:	f2c0 8081 	blt.w	8005162 <quorem+0x112>
 8005060:	3c01      	subs	r4, #1
 8005062:	f101 0814 	add.w	r8, r1, #20
 8005066:	f100 0514 	add.w	r5, r0, #20
 800506a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800506e:	9301      	str	r3, [sp, #4]
 8005070:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005074:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005078:	3301      	adds	r3, #1
 800507a:	429a      	cmp	r2, r3
 800507c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005080:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005084:	fbb2 f6f3 	udiv	r6, r2, r3
 8005088:	d331      	bcc.n	80050ee <quorem+0x9e>
 800508a:	f04f 0e00 	mov.w	lr, #0
 800508e:	4640      	mov	r0, r8
 8005090:	46ac      	mov	ip, r5
 8005092:	46f2      	mov	sl, lr
 8005094:	f850 2b04 	ldr.w	r2, [r0], #4
 8005098:	b293      	uxth	r3, r2
 800509a:	fb06 e303 	mla	r3, r6, r3, lr
 800509e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	ebaa 0303 	sub.w	r3, sl, r3
 80050a8:	f8dc a000 	ldr.w	sl, [ip]
 80050ac:	0c12      	lsrs	r2, r2, #16
 80050ae:	fa13 f38a 	uxtah	r3, r3, sl
 80050b2:	fb06 e202 	mla	r2, r6, r2, lr
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	9b00      	ldr	r3, [sp, #0]
 80050ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050be:	b292      	uxth	r2, r2
 80050c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80050c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80050cc:	4581      	cmp	r9, r0
 80050ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050d2:	f84c 3b04 	str.w	r3, [ip], #4
 80050d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050da:	d2db      	bcs.n	8005094 <quorem+0x44>
 80050dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80050e0:	b92b      	cbnz	r3, 80050ee <quorem+0x9e>
 80050e2:	9b01      	ldr	r3, [sp, #4]
 80050e4:	3b04      	subs	r3, #4
 80050e6:	429d      	cmp	r5, r3
 80050e8:	461a      	mov	r2, r3
 80050ea:	d32e      	bcc.n	800514a <quorem+0xfa>
 80050ec:	613c      	str	r4, [r7, #16]
 80050ee:	4638      	mov	r0, r7
 80050f0:	f001 f8c4 	bl	800627c <__mcmp>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	db24      	blt.n	8005142 <quorem+0xf2>
 80050f8:	3601      	adds	r6, #1
 80050fa:	4628      	mov	r0, r5
 80050fc:	f04f 0c00 	mov.w	ip, #0
 8005100:	f858 2b04 	ldr.w	r2, [r8], #4
 8005104:	f8d0 e000 	ldr.w	lr, [r0]
 8005108:	b293      	uxth	r3, r2
 800510a:	ebac 0303 	sub.w	r3, ip, r3
 800510e:	0c12      	lsrs	r2, r2, #16
 8005110:	fa13 f38e 	uxtah	r3, r3, lr
 8005114:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005118:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800511c:	b29b      	uxth	r3, r3
 800511e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005122:	45c1      	cmp	r9, r8
 8005124:	f840 3b04 	str.w	r3, [r0], #4
 8005128:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800512c:	d2e8      	bcs.n	8005100 <quorem+0xb0>
 800512e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005132:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005136:	b922      	cbnz	r2, 8005142 <quorem+0xf2>
 8005138:	3b04      	subs	r3, #4
 800513a:	429d      	cmp	r5, r3
 800513c:	461a      	mov	r2, r3
 800513e:	d30a      	bcc.n	8005156 <quorem+0x106>
 8005140:	613c      	str	r4, [r7, #16]
 8005142:	4630      	mov	r0, r6
 8005144:	b003      	add	sp, #12
 8005146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	3b04      	subs	r3, #4
 800514e:	2a00      	cmp	r2, #0
 8005150:	d1cc      	bne.n	80050ec <quorem+0x9c>
 8005152:	3c01      	subs	r4, #1
 8005154:	e7c7      	b.n	80050e6 <quorem+0x96>
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	3b04      	subs	r3, #4
 800515a:	2a00      	cmp	r2, #0
 800515c:	d1f0      	bne.n	8005140 <quorem+0xf0>
 800515e:	3c01      	subs	r4, #1
 8005160:	e7eb      	b.n	800513a <quorem+0xea>
 8005162:	2000      	movs	r0, #0
 8005164:	e7ee      	b.n	8005144 <quorem+0xf4>
	...

08005168 <_dtoa_r>:
 8005168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516c:	ed2d 8b04 	vpush	{d8-d9}
 8005170:	ec57 6b10 	vmov	r6, r7, d0
 8005174:	b093      	sub	sp, #76	; 0x4c
 8005176:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005178:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800517c:	9106      	str	r1, [sp, #24]
 800517e:	ee10 aa10 	vmov	sl, s0
 8005182:	4604      	mov	r4, r0
 8005184:	9209      	str	r2, [sp, #36]	; 0x24
 8005186:	930c      	str	r3, [sp, #48]	; 0x30
 8005188:	46bb      	mov	fp, r7
 800518a:	b975      	cbnz	r5, 80051aa <_dtoa_r+0x42>
 800518c:	2010      	movs	r0, #16
 800518e:	f000 fddd 	bl	8005d4c <malloc>
 8005192:	4602      	mov	r2, r0
 8005194:	6260      	str	r0, [r4, #36]	; 0x24
 8005196:	b920      	cbnz	r0, 80051a2 <_dtoa_r+0x3a>
 8005198:	4ba7      	ldr	r3, [pc, #668]	; (8005438 <_dtoa_r+0x2d0>)
 800519a:	21ea      	movs	r1, #234	; 0xea
 800519c:	48a7      	ldr	r0, [pc, #668]	; (800543c <_dtoa_r+0x2d4>)
 800519e:	f001 fbd1 	bl	8006944 <__assert_func>
 80051a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051a6:	6005      	str	r5, [r0, #0]
 80051a8:	60c5      	str	r5, [r0, #12]
 80051aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051ac:	6819      	ldr	r1, [r3, #0]
 80051ae:	b151      	cbz	r1, 80051c6 <_dtoa_r+0x5e>
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	604a      	str	r2, [r1, #4]
 80051b4:	2301      	movs	r3, #1
 80051b6:	4093      	lsls	r3, r2
 80051b8:	608b      	str	r3, [r1, #8]
 80051ba:	4620      	mov	r0, r4
 80051bc:	f000 fe1c 	bl	8005df8 <_Bfree>
 80051c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	1e3b      	subs	r3, r7, #0
 80051c8:	bfaa      	itet	ge
 80051ca:	2300      	movge	r3, #0
 80051cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80051d0:	f8c8 3000 	strge.w	r3, [r8]
 80051d4:	4b9a      	ldr	r3, [pc, #616]	; (8005440 <_dtoa_r+0x2d8>)
 80051d6:	bfbc      	itt	lt
 80051d8:	2201      	movlt	r2, #1
 80051da:	f8c8 2000 	strlt.w	r2, [r8]
 80051de:	ea33 030b 	bics.w	r3, r3, fp
 80051e2:	d11b      	bne.n	800521c <_dtoa_r+0xb4>
 80051e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80051f0:	4333      	orrs	r3, r6
 80051f2:	f000 8592 	beq.w	8005d1a <_dtoa_r+0xbb2>
 80051f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051f8:	b963      	cbnz	r3, 8005214 <_dtoa_r+0xac>
 80051fa:	4b92      	ldr	r3, [pc, #584]	; (8005444 <_dtoa_r+0x2dc>)
 80051fc:	e022      	b.n	8005244 <_dtoa_r+0xdc>
 80051fe:	4b92      	ldr	r3, [pc, #584]	; (8005448 <_dtoa_r+0x2e0>)
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	3308      	adds	r3, #8
 8005204:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	9801      	ldr	r0, [sp, #4]
 800520a:	b013      	add	sp, #76	; 0x4c
 800520c:	ecbd 8b04 	vpop	{d8-d9}
 8005210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005214:	4b8b      	ldr	r3, [pc, #556]	; (8005444 <_dtoa_r+0x2dc>)
 8005216:	9301      	str	r3, [sp, #4]
 8005218:	3303      	adds	r3, #3
 800521a:	e7f3      	b.n	8005204 <_dtoa_r+0x9c>
 800521c:	2200      	movs	r2, #0
 800521e:	2300      	movs	r3, #0
 8005220:	4650      	mov	r0, sl
 8005222:	4659      	mov	r1, fp
 8005224:	f7fb fc78 	bl	8000b18 <__aeabi_dcmpeq>
 8005228:	ec4b ab19 	vmov	d9, sl, fp
 800522c:	4680      	mov	r8, r0
 800522e:	b158      	cbz	r0, 8005248 <_dtoa_r+0xe0>
 8005230:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005232:	2301      	movs	r3, #1
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 856b 	beq.w	8005d14 <_dtoa_r+0xbac>
 800523e:	4883      	ldr	r0, [pc, #524]	; (800544c <_dtoa_r+0x2e4>)
 8005240:	6018      	str	r0, [r3, #0]
 8005242:	1e43      	subs	r3, r0, #1
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	e7df      	b.n	8005208 <_dtoa_r+0xa0>
 8005248:	ec4b ab10 	vmov	d0, sl, fp
 800524c:	aa10      	add	r2, sp, #64	; 0x40
 800524e:	a911      	add	r1, sp, #68	; 0x44
 8005250:	4620      	mov	r0, r4
 8005252:	f001 f8b9 	bl	80063c8 <__d2b>
 8005256:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800525a:	ee08 0a10 	vmov	s16, r0
 800525e:	2d00      	cmp	r5, #0
 8005260:	f000 8084 	beq.w	800536c <_dtoa_r+0x204>
 8005264:	ee19 3a90 	vmov	r3, s19
 8005268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800526c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005270:	4656      	mov	r6, sl
 8005272:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005276:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800527a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800527e:	4b74      	ldr	r3, [pc, #464]	; (8005450 <_dtoa_r+0x2e8>)
 8005280:	2200      	movs	r2, #0
 8005282:	4630      	mov	r0, r6
 8005284:	4639      	mov	r1, r7
 8005286:	f7fb f827 	bl	80002d8 <__aeabi_dsub>
 800528a:	a365      	add	r3, pc, #404	; (adr r3, 8005420 <_dtoa_r+0x2b8>)
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f7fb f9da 	bl	8000648 <__aeabi_dmul>
 8005294:	a364      	add	r3, pc, #400	; (adr r3, 8005428 <_dtoa_r+0x2c0>)
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	f7fb f81f 	bl	80002dc <__adddf3>
 800529e:	4606      	mov	r6, r0
 80052a0:	4628      	mov	r0, r5
 80052a2:	460f      	mov	r7, r1
 80052a4:	f7fb f966 	bl	8000574 <__aeabi_i2d>
 80052a8:	a361      	add	r3, pc, #388	; (adr r3, 8005430 <_dtoa_r+0x2c8>)
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f7fb f9cb 	bl	8000648 <__aeabi_dmul>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4630      	mov	r0, r6
 80052b8:	4639      	mov	r1, r7
 80052ba:	f7fb f80f 	bl	80002dc <__adddf3>
 80052be:	4606      	mov	r6, r0
 80052c0:	460f      	mov	r7, r1
 80052c2:	f7fb fc71 	bl	8000ba8 <__aeabi_d2iz>
 80052c6:	2200      	movs	r2, #0
 80052c8:	9000      	str	r0, [sp, #0]
 80052ca:	2300      	movs	r3, #0
 80052cc:	4630      	mov	r0, r6
 80052ce:	4639      	mov	r1, r7
 80052d0:	f7fb fc2c 	bl	8000b2c <__aeabi_dcmplt>
 80052d4:	b150      	cbz	r0, 80052ec <_dtoa_r+0x184>
 80052d6:	9800      	ldr	r0, [sp, #0]
 80052d8:	f7fb f94c 	bl	8000574 <__aeabi_i2d>
 80052dc:	4632      	mov	r2, r6
 80052de:	463b      	mov	r3, r7
 80052e0:	f7fb fc1a 	bl	8000b18 <__aeabi_dcmpeq>
 80052e4:	b910      	cbnz	r0, 80052ec <_dtoa_r+0x184>
 80052e6:	9b00      	ldr	r3, [sp, #0]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	9b00      	ldr	r3, [sp, #0]
 80052ee:	2b16      	cmp	r3, #22
 80052f0:	d85a      	bhi.n	80053a8 <_dtoa_r+0x240>
 80052f2:	9a00      	ldr	r2, [sp, #0]
 80052f4:	4b57      	ldr	r3, [pc, #348]	; (8005454 <_dtoa_r+0x2ec>)
 80052f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	ec51 0b19 	vmov	r0, r1, d9
 8005302:	f7fb fc13 	bl	8000b2c <__aeabi_dcmplt>
 8005306:	2800      	cmp	r0, #0
 8005308:	d050      	beq.n	80053ac <_dtoa_r+0x244>
 800530a:	9b00      	ldr	r3, [sp, #0]
 800530c:	3b01      	subs	r3, #1
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	2300      	movs	r3, #0
 8005312:	930b      	str	r3, [sp, #44]	; 0x2c
 8005314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005316:	1b5d      	subs	r5, r3, r5
 8005318:	1e6b      	subs	r3, r5, #1
 800531a:	9305      	str	r3, [sp, #20]
 800531c:	bf45      	ittet	mi
 800531e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005322:	9304      	strmi	r3, [sp, #16]
 8005324:	2300      	movpl	r3, #0
 8005326:	2300      	movmi	r3, #0
 8005328:	bf4c      	ite	mi
 800532a:	9305      	strmi	r3, [sp, #20]
 800532c:	9304      	strpl	r3, [sp, #16]
 800532e:	9b00      	ldr	r3, [sp, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	db3d      	blt.n	80053b0 <_dtoa_r+0x248>
 8005334:	9b05      	ldr	r3, [sp, #20]
 8005336:	9a00      	ldr	r2, [sp, #0]
 8005338:	920a      	str	r2, [sp, #40]	; 0x28
 800533a:	4413      	add	r3, r2
 800533c:	9305      	str	r3, [sp, #20]
 800533e:	2300      	movs	r3, #0
 8005340:	9307      	str	r3, [sp, #28]
 8005342:	9b06      	ldr	r3, [sp, #24]
 8005344:	2b09      	cmp	r3, #9
 8005346:	f200 8089 	bhi.w	800545c <_dtoa_r+0x2f4>
 800534a:	2b05      	cmp	r3, #5
 800534c:	bfc4      	itt	gt
 800534e:	3b04      	subgt	r3, #4
 8005350:	9306      	strgt	r3, [sp, #24]
 8005352:	9b06      	ldr	r3, [sp, #24]
 8005354:	f1a3 0302 	sub.w	r3, r3, #2
 8005358:	bfcc      	ite	gt
 800535a:	2500      	movgt	r5, #0
 800535c:	2501      	movle	r5, #1
 800535e:	2b03      	cmp	r3, #3
 8005360:	f200 8087 	bhi.w	8005472 <_dtoa_r+0x30a>
 8005364:	e8df f003 	tbb	[pc, r3]
 8005368:	59383a2d 	.word	0x59383a2d
 800536c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005370:	441d      	add	r5, r3
 8005372:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005376:	2b20      	cmp	r3, #32
 8005378:	bfc1      	itttt	gt
 800537a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800537e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005382:	fa0b f303 	lslgt.w	r3, fp, r3
 8005386:	fa26 f000 	lsrgt.w	r0, r6, r0
 800538a:	bfda      	itte	le
 800538c:	f1c3 0320 	rsble	r3, r3, #32
 8005390:	fa06 f003 	lslle.w	r0, r6, r3
 8005394:	4318      	orrgt	r0, r3
 8005396:	f7fb f8dd 	bl	8000554 <__aeabi_ui2d>
 800539a:	2301      	movs	r3, #1
 800539c:	4606      	mov	r6, r0
 800539e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80053a2:	3d01      	subs	r5, #1
 80053a4:	930e      	str	r3, [sp, #56]	; 0x38
 80053a6:	e76a      	b.n	800527e <_dtoa_r+0x116>
 80053a8:	2301      	movs	r3, #1
 80053aa:	e7b2      	b.n	8005312 <_dtoa_r+0x1aa>
 80053ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80053ae:	e7b1      	b.n	8005314 <_dtoa_r+0x1ac>
 80053b0:	9b04      	ldr	r3, [sp, #16]
 80053b2:	9a00      	ldr	r2, [sp, #0]
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	9304      	str	r3, [sp, #16]
 80053b8:	4253      	negs	r3, r2
 80053ba:	9307      	str	r3, [sp, #28]
 80053bc:	2300      	movs	r3, #0
 80053be:	930a      	str	r3, [sp, #40]	; 0x28
 80053c0:	e7bf      	b.n	8005342 <_dtoa_r+0x1da>
 80053c2:	2300      	movs	r3, #0
 80053c4:	9308      	str	r3, [sp, #32]
 80053c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	dc55      	bgt.n	8005478 <_dtoa_r+0x310>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80053d2:	461a      	mov	r2, r3
 80053d4:	9209      	str	r2, [sp, #36]	; 0x24
 80053d6:	e00c      	b.n	80053f2 <_dtoa_r+0x28a>
 80053d8:	2301      	movs	r3, #1
 80053da:	e7f3      	b.n	80053c4 <_dtoa_r+0x25c>
 80053dc:	2300      	movs	r3, #0
 80053de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053e0:	9308      	str	r3, [sp, #32]
 80053e2:	9b00      	ldr	r3, [sp, #0]
 80053e4:	4413      	add	r3, r2
 80053e6:	9302      	str	r3, [sp, #8]
 80053e8:	3301      	adds	r3, #1
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	9303      	str	r3, [sp, #12]
 80053ee:	bfb8      	it	lt
 80053f0:	2301      	movlt	r3, #1
 80053f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80053f4:	2200      	movs	r2, #0
 80053f6:	6042      	str	r2, [r0, #4]
 80053f8:	2204      	movs	r2, #4
 80053fa:	f102 0614 	add.w	r6, r2, #20
 80053fe:	429e      	cmp	r6, r3
 8005400:	6841      	ldr	r1, [r0, #4]
 8005402:	d93d      	bls.n	8005480 <_dtoa_r+0x318>
 8005404:	4620      	mov	r0, r4
 8005406:	f000 fcb7 	bl	8005d78 <_Balloc>
 800540a:	9001      	str	r0, [sp, #4]
 800540c:	2800      	cmp	r0, #0
 800540e:	d13b      	bne.n	8005488 <_dtoa_r+0x320>
 8005410:	4b11      	ldr	r3, [pc, #68]	; (8005458 <_dtoa_r+0x2f0>)
 8005412:	4602      	mov	r2, r0
 8005414:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005418:	e6c0      	b.n	800519c <_dtoa_r+0x34>
 800541a:	2301      	movs	r3, #1
 800541c:	e7df      	b.n	80053de <_dtoa_r+0x276>
 800541e:	bf00      	nop
 8005420:	636f4361 	.word	0x636f4361
 8005424:	3fd287a7 	.word	0x3fd287a7
 8005428:	8b60c8b3 	.word	0x8b60c8b3
 800542c:	3fc68a28 	.word	0x3fc68a28
 8005430:	509f79fb 	.word	0x509f79fb
 8005434:	3fd34413 	.word	0x3fd34413
 8005438:	080075e9 	.word	0x080075e9
 800543c:	08007600 	.word	0x08007600
 8005440:	7ff00000 	.word	0x7ff00000
 8005444:	080075e5 	.word	0x080075e5
 8005448:	080075dc 	.word	0x080075dc
 800544c:	080075b9 	.word	0x080075b9
 8005450:	3ff80000 	.word	0x3ff80000
 8005454:	080076f0 	.word	0x080076f0
 8005458:	0800765b 	.word	0x0800765b
 800545c:	2501      	movs	r5, #1
 800545e:	2300      	movs	r3, #0
 8005460:	9306      	str	r3, [sp, #24]
 8005462:	9508      	str	r5, [sp, #32]
 8005464:	f04f 33ff 	mov.w	r3, #4294967295
 8005468:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800546c:	2200      	movs	r2, #0
 800546e:	2312      	movs	r3, #18
 8005470:	e7b0      	b.n	80053d4 <_dtoa_r+0x26c>
 8005472:	2301      	movs	r3, #1
 8005474:	9308      	str	r3, [sp, #32]
 8005476:	e7f5      	b.n	8005464 <_dtoa_r+0x2fc>
 8005478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800547a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800547e:	e7b8      	b.n	80053f2 <_dtoa_r+0x28a>
 8005480:	3101      	adds	r1, #1
 8005482:	6041      	str	r1, [r0, #4]
 8005484:	0052      	lsls	r2, r2, #1
 8005486:	e7b8      	b.n	80053fa <_dtoa_r+0x292>
 8005488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800548a:	9a01      	ldr	r2, [sp, #4]
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	9b03      	ldr	r3, [sp, #12]
 8005490:	2b0e      	cmp	r3, #14
 8005492:	f200 809d 	bhi.w	80055d0 <_dtoa_r+0x468>
 8005496:	2d00      	cmp	r5, #0
 8005498:	f000 809a 	beq.w	80055d0 <_dtoa_r+0x468>
 800549c:	9b00      	ldr	r3, [sp, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	dd32      	ble.n	8005508 <_dtoa_r+0x3a0>
 80054a2:	4ab7      	ldr	r2, [pc, #732]	; (8005780 <_dtoa_r+0x618>)
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054b0:	9b00      	ldr	r3, [sp, #0]
 80054b2:	05d8      	lsls	r0, r3, #23
 80054b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80054b8:	d516      	bpl.n	80054e8 <_dtoa_r+0x380>
 80054ba:	4bb2      	ldr	r3, [pc, #712]	; (8005784 <_dtoa_r+0x61c>)
 80054bc:	ec51 0b19 	vmov	r0, r1, d9
 80054c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054c4:	f7fb f9ea 	bl	800089c <__aeabi_ddiv>
 80054c8:	f007 070f 	and.w	r7, r7, #15
 80054cc:	4682      	mov	sl, r0
 80054ce:	468b      	mov	fp, r1
 80054d0:	2503      	movs	r5, #3
 80054d2:	4eac      	ldr	r6, [pc, #688]	; (8005784 <_dtoa_r+0x61c>)
 80054d4:	b957      	cbnz	r7, 80054ec <_dtoa_r+0x384>
 80054d6:	4642      	mov	r2, r8
 80054d8:	464b      	mov	r3, r9
 80054da:	4650      	mov	r0, sl
 80054dc:	4659      	mov	r1, fp
 80054de:	f7fb f9dd 	bl	800089c <__aeabi_ddiv>
 80054e2:	4682      	mov	sl, r0
 80054e4:	468b      	mov	fp, r1
 80054e6:	e028      	b.n	800553a <_dtoa_r+0x3d2>
 80054e8:	2502      	movs	r5, #2
 80054ea:	e7f2      	b.n	80054d2 <_dtoa_r+0x36a>
 80054ec:	07f9      	lsls	r1, r7, #31
 80054ee:	d508      	bpl.n	8005502 <_dtoa_r+0x39a>
 80054f0:	4640      	mov	r0, r8
 80054f2:	4649      	mov	r1, r9
 80054f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054f8:	f7fb f8a6 	bl	8000648 <__aeabi_dmul>
 80054fc:	3501      	adds	r5, #1
 80054fe:	4680      	mov	r8, r0
 8005500:	4689      	mov	r9, r1
 8005502:	107f      	asrs	r7, r7, #1
 8005504:	3608      	adds	r6, #8
 8005506:	e7e5      	b.n	80054d4 <_dtoa_r+0x36c>
 8005508:	f000 809b 	beq.w	8005642 <_dtoa_r+0x4da>
 800550c:	9b00      	ldr	r3, [sp, #0]
 800550e:	4f9d      	ldr	r7, [pc, #628]	; (8005784 <_dtoa_r+0x61c>)
 8005510:	425e      	negs	r6, r3
 8005512:	4b9b      	ldr	r3, [pc, #620]	; (8005780 <_dtoa_r+0x618>)
 8005514:	f006 020f 	and.w	r2, r6, #15
 8005518:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	ec51 0b19 	vmov	r0, r1, d9
 8005524:	f7fb f890 	bl	8000648 <__aeabi_dmul>
 8005528:	1136      	asrs	r6, r6, #4
 800552a:	4682      	mov	sl, r0
 800552c:	468b      	mov	fp, r1
 800552e:	2300      	movs	r3, #0
 8005530:	2502      	movs	r5, #2
 8005532:	2e00      	cmp	r6, #0
 8005534:	d17a      	bne.n	800562c <_dtoa_r+0x4c4>
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1d3      	bne.n	80054e2 <_dtoa_r+0x37a>
 800553a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8082 	beq.w	8005646 <_dtoa_r+0x4de>
 8005542:	4b91      	ldr	r3, [pc, #580]	; (8005788 <_dtoa_r+0x620>)
 8005544:	2200      	movs	r2, #0
 8005546:	4650      	mov	r0, sl
 8005548:	4659      	mov	r1, fp
 800554a:	f7fb faef 	bl	8000b2c <__aeabi_dcmplt>
 800554e:	2800      	cmp	r0, #0
 8005550:	d079      	beq.n	8005646 <_dtoa_r+0x4de>
 8005552:	9b03      	ldr	r3, [sp, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d076      	beq.n	8005646 <_dtoa_r+0x4de>
 8005558:	9b02      	ldr	r3, [sp, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	dd36      	ble.n	80055cc <_dtoa_r+0x464>
 800555e:	9b00      	ldr	r3, [sp, #0]
 8005560:	4650      	mov	r0, sl
 8005562:	4659      	mov	r1, fp
 8005564:	1e5f      	subs	r7, r3, #1
 8005566:	2200      	movs	r2, #0
 8005568:	4b88      	ldr	r3, [pc, #544]	; (800578c <_dtoa_r+0x624>)
 800556a:	f7fb f86d 	bl	8000648 <__aeabi_dmul>
 800556e:	9e02      	ldr	r6, [sp, #8]
 8005570:	4682      	mov	sl, r0
 8005572:	468b      	mov	fp, r1
 8005574:	3501      	adds	r5, #1
 8005576:	4628      	mov	r0, r5
 8005578:	f7fa fffc 	bl	8000574 <__aeabi_i2d>
 800557c:	4652      	mov	r2, sl
 800557e:	465b      	mov	r3, fp
 8005580:	f7fb f862 	bl	8000648 <__aeabi_dmul>
 8005584:	4b82      	ldr	r3, [pc, #520]	; (8005790 <_dtoa_r+0x628>)
 8005586:	2200      	movs	r2, #0
 8005588:	f7fa fea8 	bl	80002dc <__adddf3>
 800558c:	46d0      	mov	r8, sl
 800558e:	46d9      	mov	r9, fp
 8005590:	4682      	mov	sl, r0
 8005592:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005596:	2e00      	cmp	r6, #0
 8005598:	d158      	bne.n	800564c <_dtoa_r+0x4e4>
 800559a:	4b7e      	ldr	r3, [pc, #504]	; (8005794 <_dtoa_r+0x62c>)
 800559c:	2200      	movs	r2, #0
 800559e:	4640      	mov	r0, r8
 80055a0:	4649      	mov	r1, r9
 80055a2:	f7fa fe99 	bl	80002d8 <__aeabi_dsub>
 80055a6:	4652      	mov	r2, sl
 80055a8:	465b      	mov	r3, fp
 80055aa:	4680      	mov	r8, r0
 80055ac:	4689      	mov	r9, r1
 80055ae:	f7fb fadb 	bl	8000b68 <__aeabi_dcmpgt>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	f040 8295 	bne.w	8005ae2 <_dtoa_r+0x97a>
 80055b8:	4652      	mov	r2, sl
 80055ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80055be:	4640      	mov	r0, r8
 80055c0:	4649      	mov	r1, r9
 80055c2:	f7fb fab3 	bl	8000b2c <__aeabi_dcmplt>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	f040 8289 	bne.w	8005ade <_dtoa_r+0x976>
 80055cc:	ec5b ab19 	vmov	sl, fp, d9
 80055d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f2c0 8148 	blt.w	8005868 <_dtoa_r+0x700>
 80055d8:	9a00      	ldr	r2, [sp, #0]
 80055da:	2a0e      	cmp	r2, #14
 80055dc:	f300 8144 	bgt.w	8005868 <_dtoa_r+0x700>
 80055e0:	4b67      	ldr	r3, [pc, #412]	; (8005780 <_dtoa_r+0x618>)
 80055e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f280 80d5 	bge.w	800579c <_dtoa_r+0x634>
 80055f2:	9b03      	ldr	r3, [sp, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f300 80d1 	bgt.w	800579c <_dtoa_r+0x634>
 80055fa:	f040 826f 	bne.w	8005adc <_dtoa_r+0x974>
 80055fe:	4b65      	ldr	r3, [pc, #404]	; (8005794 <_dtoa_r+0x62c>)
 8005600:	2200      	movs	r2, #0
 8005602:	4640      	mov	r0, r8
 8005604:	4649      	mov	r1, r9
 8005606:	f7fb f81f 	bl	8000648 <__aeabi_dmul>
 800560a:	4652      	mov	r2, sl
 800560c:	465b      	mov	r3, fp
 800560e:	f7fb faa1 	bl	8000b54 <__aeabi_dcmpge>
 8005612:	9e03      	ldr	r6, [sp, #12]
 8005614:	4637      	mov	r7, r6
 8005616:	2800      	cmp	r0, #0
 8005618:	f040 8245 	bne.w	8005aa6 <_dtoa_r+0x93e>
 800561c:	9d01      	ldr	r5, [sp, #4]
 800561e:	2331      	movs	r3, #49	; 0x31
 8005620:	f805 3b01 	strb.w	r3, [r5], #1
 8005624:	9b00      	ldr	r3, [sp, #0]
 8005626:	3301      	adds	r3, #1
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	e240      	b.n	8005aae <_dtoa_r+0x946>
 800562c:	07f2      	lsls	r2, r6, #31
 800562e:	d505      	bpl.n	800563c <_dtoa_r+0x4d4>
 8005630:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005634:	f7fb f808 	bl	8000648 <__aeabi_dmul>
 8005638:	3501      	adds	r5, #1
 800563a:	2301      	movs	r3, #1
 800563c:	1076      	asrs	r6, r6, #1
 800563e:	3708      	adds	r7, #8
 8005640:	e777      	b.n	8005532 <_dtoa_r+0x3ca>
 8005642:	2502      	movs	r5, #2
 8005644:	e779      	b.n	800553a <_dtoa_r+0x3d2>
 8005646:	9f00      	ldr	r7, [sp, #0]
 8005648:	9e03      	ldr	r6, [sp, #12]
 800564a:	e794      	b.n	8005576 <_dtoa_r+0x40e>
 800564c:	9901      	ldr	r1, [sp, #4]
 800564e:	4b4c      	ldr	r3, [pc, #304]	; (8005780 <_dtoa_r+0x618>)
 8005650:	4431      	add	r1, r6
 8005652:	910d      	str	r1, [sp, #52]	; 0x34
 8005654:	9908      	ldr	r1, [sp, #32]
 8005656:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800565a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800565e:	2900      	cmp	r1, #0
 8005660:	d043      	beq.n	80056ea <_dtoa_r+0x582>
 8005662:	494d      	ldr	r1, [pc, #308]	; (8005798 <_dtoa_r+0x630>)
 8005664:	2000      	movs	r0, #0
 8005666:	f7fb f919 	bl	800089c <__aeabi_ddiv>
 800566a:	4652      	mov	r2, sl
 800566c:	465b      	mov	r3, fp
 800566e:	f7fa fe33 	bl	80002d8 <__aeabi_dsub>
 8005672:	9d01      	ldr	r5, [sp, #4]
 8005674:	4682      	mov	sl, r0
 8005676:	468b      	mov	fp, r1
 8005678:	4649      	mov	r1, r9
 800567a:	4640      	mov	r0, r8
 800567c:	f7fb fa94 	bl	8000ba8 <__aeabi_d2iz>
 8005680:	4606      	mov	r6, r0
 8005682:	f7fa ff77 	bl	8000574 <__aeabi_i2d>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4640      	mov	r0, r8
 800568c:	4649      	mov	r1, r9
 800568e:	f7fa fe23 	bl	80002d8 <__aeabi_dsub>
 8005692:	3630      	adds	r6, #48	; 0x30
 8005694:	f805 6b01 	strb.w	r6, [r5], #1
 8005698:	4652      	mov	r2, sl
 800569a:	465b      	mov	r3, fp
 800569c:	4680      	mov	r8, r0
 800569e:	4689      	mov	r9, r1
 80056a0:	f7fb fa44 	bl	8000b2c <__aeabi_dcmplt>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d163      	bne.n	8005770 <_dtoa_r+0x608>
 80056a8:	4642      	mov	r2, r8
 80056aa:	464b      	mov	r3, r9
 80056ac:	4936      	ldr	r1, [pc, #216]	; (8005788 <_dtoa_r+0x620>)
 80056ae:	2000      	movs	r0, #0
 80056b0:	f7fa fe12 	bl	80002d8 <__aeabi_dsub>
 80056b4:	4652      	mov	r2, sl
 80056b6:	465b      	mov	r3, fp
 80056b8:	f7fb fa38 	bl	8000b2c <__aeabi_dcmplt>
 80056bc:	2800      	cmp	r0, #0
 80056be:	f040 80b5 	bne.w	800582c <_dtoa_r+0x6c4>
 80056c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056c4:	429d      	cmp	r5, r3
 80056c6:	d081      	beq.n	80055cc <_dtoa_r+0x464>
 80056c8:	4b30      	ldr	r3, [pc, #192]	; (800578c <_dtoa_r+0x624>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	4650      	mov	r0, sl
 80056ce:	4659      	mov	r1, fp
 80056d0:	f7fa ffba 	bl	8000648 <__aeabi_dmul>
 80056d4:	4b2d      	ldr	r3, [pc, #180]	; (800578c <_dtoa_r+0x624>)
 80056d6:	4682      	mov	sl, r0
 80056d8:	468b      	mov	fp, r1
 80056da:	4640      	mov	r0, r8
 80056dc:	4649      	mov	r1, r9
 80056de:	2200      	movs	r2, #0
 80056e0:	f7fa ffb2 	bl	8000648 <__aeabi_dmul>
 80056e4:	4680      	mov	r8, r0
 80056e6:	4689      	mov	r9, r1
 80056e8:	e7c6      	b.n	8005678 <_dtoa_r+0x510>
 80056ea:	4650      	mov	r0, sl
 80056ec:	4659      	mov	r1, fp
 80056ee:	f7fa ffab 	bl	8000648 <__aeabi_dmul>
 80056f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056f4:	9d01      	ldr	r5, [sp, #4]
 80056f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80056f8:	4682      	mov	sl, r0
 80056fa:	468b      	mov	fp, r1
 80056fc:	4649      	mov	r1, r9
 80056fe:	4640      	mov	r0, r8
 8005700:	f7fb fa52 	bl	8000ba8 <__aeabi_d2iz>
 8005704:	4606      	mov	r6, r0
 8005706:	f7fa ff35 	bl	8000574 <__aeabi_i2d>
 800570a:	3630      	adds	r6, #48	; 0x30
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4640      	mov	r0, r8
 8005712:	4649      	mov	r1, r9
 8005714:	f7fa fde0 	bl	80002d8 <__aeabi_dsub>
 8005718:	f805 6b01 	strb.w	r6, [r5], #1
 800571c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800571e:	429d      	cmp	r5, r3
 8005720:	4680      	mov	r8, r0
 8005722:	4689      	mov	r9, r1
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	d124      	bne.n	8005774 <_dtoa_r+0x60c>
 800572a:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <_dtoa_r+0x630>)
 800572c:	4650      	mov	r0, sl
 800572e:	4659      	mov	r1, fp
 8005730:	f7fa fdd4 	bl	80002dc <__adddf3>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4640      	mov	r0, r8
 800573a:	4649      	mov	r1, r9
 800573c:	f7fb fa14 	bl	8000b68 <__aeabi_dcmpgt>
 8005740:	2800      	cmp	r0, #0
 8005742:	d173      	bne.n	800582c <_dtoa_r+0x6c4>
 8005744:	4652      	mov	r2, sl
 8005746:	465b      	mov	r3, fp
 8005748:	4913      	ldr	r1, [pc, #76]	; (8005798 <_dtoa_r+0x630>)
 800574a:	2000      	movs	r0, #0
 800574c:	f7fa fdc4 	bl	80002d8 <__aeabi_dsub>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4640      	mov	r0, r8
 8005756:	4649      	mov	r1, r9
 8005758:	f7fb f9e8 	bl	8000b2c <__aeabi_dcmplt>
 800575c:	2800      	cmp	r0, #0
 800575e:	f43f af35 	beq.w	80055cc <_dtoa_r+0x464>
 8005762:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005764:	1e6b      	subs	r3, r5, #1
 8005766:	930f      	str	r3, [sp, #60]	; 0x3c
 8005768:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800576c:	2b30      	cmp	r3, #48	; 0x30
 800576e:	d0f8      	beq.n	8005762 <_dtoa_r+0x5fa>
 8005770:	9700      	str	r7, [sp, #0]
 8005772:	e049      	b.n	8005808 <_dtoa_r+0x6a0>
 8005774:	4b05      	ldr	r3, [pc, #20]	; (800578c <_dtoa_r+0x624>)
 8005776:	f7fa ff67 	bl	8000648 <__aeabi_dmul>
 800577a:	4680      	mov	r8, r0
 800577c:	4689      	mov	r9, r1
 800577e:	e7bd      	b.n	80056fc <_dtoa_r+0x594>
 8005780:	080076f0 	.word	0x080076f0
 8005784:	080076c8 	.word	0x080076c8
 8005788:	3ff00000 	.word	0x3ff00000
 800578c:	40240000 	.word	0x40240000
 8005790:	401c0000 	.word	0x401c0000
 8005794:	40140000 	.word	0x40140000
 8005798:	3fe00000 	.word	0x3fe00000
 800579c:	9d01      	ldr	r5, [sp, #4]
 800579e:	4656      	mov	r6, sl
 80057a0:	465f      	mov	r7, fp
 80057a2:	4642      	mov	r2, r8
 80057a4:	464b      	mov	r3, r9
 80057a6:	4630      	mov	r0, r6
 80057a8:	4639      	mov	r1, r7
 80057aa:	f7fb f877 	bl	800089c <__aeabi_ddiv>
 80057ae:	f7fb f9fb 	bl	8000ba8 <__aeabi_d2iz>
 80057b2:	4682      	mov	sl, r0
 80057b4:	f7fa fede 	bl	8000574 <__aeabi_i2d>
 80057b8:	4642      	mov	r2, r8
 80057ba:	464b      	mov	r3, r9
 80057bc:	f7fa ff44 	bl	8000648 <__aeabi_dmul>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4630      	mov	r0, r6
 80057c6:	4639      	mov	r1, r7
 80057c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80057cc:	f7fa fd84 	bl	80002d8 <__aeabi_dsub>
 80057d0:	f805 6b01 	strb.w	r6, [r5], #1
 80057d4:	9e01      	ldr	r6, [sp, #4]
 80057d6:	9f03      	ldr	r7, [sp, #12]
 80057d8:	1bae      	subs	r6, r5, r6
 80057da:	42b7      	cmp	r7, r6
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	d135      	bne.n	800584e <_dtoa_r+0x6e6>
 80057e2:	f7fa fd7b 	bl	80002dc <__adddf3>
 80057e6:	4642      	mov	r2, r8
 80057e8:	464b      	mov	r3, r9
 80057ea:	4606      	mov	r6, r0
 80057ec:	460f      	mov	r7, r1
 80057ee:	f7fb f9bb 	bl	8000b68 <__aeabi_dcmpgt>
 80057f2:	b9d0      	cbnz	r0, 800582a <_dtoa_r+0x6c2>
 80057f4:	4642      	mov	r2, r8
 80057f6:	464b      	mov	r3, r9
 80057f8:	4630      	mov	r0, r6
 80057fa:	4639      	mov	r1, r7
 80057fc:	f7fb f98c 	bl	8000b18 <__aeabi_dcmpeq>
 8005800:	b110      	cbz	r0, 8005808 <_dtoa_r+0x6a0>
 8005802:	f01a 0f01 	tst.w	sl, #1
 8005806:	d110      	bne.n	800582a <_dtoa_r+0x6c2>
 8005808:	4620      	mov	r0, r4
 800580a:	ee18 1a10 	vmov	r1, s16
 800580e:	f000 faf3 	bl	8005df8 <_Bfree>
 8005812:	2300      	movs	r3, #0
 8005814:	9800      	ldr	r0, [sp, #0]
 8005816:	702b      	strb	r3, [r5, #0]
 8005818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800581a:	3001      	adds	r0, #1
 800581c:	6018      	str	r0, [r3, #0]
 800581e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005820:	2b00      	cmp	r3, #0
 8005822:	f43f acf1 	beq.w	8005208 <_dtoa_r+0xa0>
 8005826:	601d      	str	r5, [r3, #0]
 8005828:	e4ee      	b.n	8005208 <_dtoa_r+0xa0>
 800582a:	9f00      	ldr	r7, [sp, #0]
 800582c:	462b      	mov	r3, r5
 800582e:	461d      	mov	r5, r3
 8005830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005834:	2a39      	cmp	r2, #57	; 0x39
 8005836:	d106      	bne.n	8005846 <_dtoa_r+0x6de>
 8005838:	9a01      	ldr	r2, [sp, #4]
 800583a:	429a      	cmp	r2, r3
 800583c:	d1f7      	bne.n	800582e <_dtoa_r+0x6c6>
 800583e:	9901      	ldr	r1, [sp, #4]
 8005840:	2230      	movs	r2, #48	; 0x30
 8005842:	3701      	adds	r7, #1
 8005844:	700a      	strb	r2, [r1, #0]
 8005846:	781a      	ldrb	r2, [r3, #0]
 8005848:	3201      	adds	r2, #1
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	e790      	b.n	8005770 <_dtoa_r+0x608>
 800584e:	4ba6      	ldr	r3, [pc, #664]	; (8005ae8 <_dtoa_r+0x980>)
 8005850:	2200      	movs	r2, #0
 8005852:	f7fa fef9 	bl	8000648 <__aeabi_dmul>
 8005856:	2200      	movs	r2, #0
 8005858:	2300      	movs	r3, #0
 800585a:	4606      	mov	r6, r0
 800585c:	460f      	mov	r7, r1
 800585e:	f7fb f95b 	bl	8000b18 <__aeabi_dcmpeq>
 8005862:	2800      	cmp	r0, #0
 8005864:	d09d      	beq.n	80057a2 <_dtoa_r+0x63a>
 8005866:	e7cf      	b.n	8005808 <_dtoa_r+0x6a0>
 8005868:	9a08      	ldr	r2, [sp, #32]
 800586a:	2a00      	cmp	r2, #0
 800586c:	f000 80d7 	beq.w	8005a1e <_dtoa_r+0x8b6>
 8005870:	9a06      	ldr	r2, [sp, #24]
 8005872:	2a01      	cmp	r2, #1
 8005874:	f300 80ba 	bgt.w	80059ec <_dtoa_r+0x884>
 8005878:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800587a:	2a00      	cmp	r2, #0
 800587c:	f000 80b2 	beq.w	80059e4 <_dtoa_r+0x87c>
 8005880:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005884:	9e07      	ldr	r6, [sp, #28]
 8005886:	9d04      	ldr	r5, [sp, #16]
 8005888:	9a04      	ldr	r2, [sp, #16]
 800588a:	441a      	add	r2, r3
 800588c:	9204      	str	r2, [sp, #16]
 800588e:	9a05      	ldr	r2, [sp, #20]
 8005890:	2101      	movs	r1, #1
 8005892:	441a      	add	r2, r3
 8005894:	4620      	mov	r0, r4
 8005896:	9205      	str	r2, [sp, #20]
 8005898:	f000 fb66 	bl	8005f68 <__i2b>
 800589c:	4607      	mov	r7, r0
 800589e:	2d00      	cmp	r5, #0
 80058a0:	dd0c      	ble.n	80058bc <_dtoa_r+0x754>
 80058a2:	9b05      	ldr	r3, [sp, #20]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	dd09      	ble.n	80058bc <_dtoa_r+0x754>
 80058a8:	42ab      	cmp	r3, r5
 80058aa:	9a04      	ldr	r2, [sp, #16]
 80058ac:	bfa8      	it	ge
 80058ae:	462b      	movge	r3, r5
 80058b0:	1ad2      	subs	r2, r2, r3
 80058b2:	9204      	str	r2, [sp, #16]
 80058b4:	9a05      	ldr	r2, [sp, #20]
 80058b6:	1aed      	subs	r5, r5, r3
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	9305      	str	r3, [sp, #20]
 80058bc:	9b07      	ldr	r3, [sp, #28]
 80058be:	b31b      	cbz	r3, 8005908 <_dtoa_r+0x7a0>
 80058c0:	9b08      	ldr	r3, [sp, #32]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80af 	beq.w	8005a26 <_dtoa_r+0x8be>
 80058c8:	2e00      	cmp	r6, #0
 80058ca:	dd13      	ble.n	80058f4 <_dtoa_r+0x78c>
 80058cc:	4639      	mov	r1, r7
 80058ce:	4632      	mov	r2, r6
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 fc09 	bl	80060e8 <__pow5mult>
 80058d6:	ee18 2a10 	vmov	r2, s16
 80058da:	4601      	mov	r1, r0
 80058dc:	4607      	mov	r7, r0
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 fb58 	bl	8005f94 <__multiply>
 80058e4:	ee18 1a10 	vmov	r1, s16
 80058e8:	4680      	mov	r8, r0
 80058ea:	4620      	mov	r0, r4
 80058ec:	f000 fa84 	bl	8005df8 <_Bfree>
 80058f0:	ee08 8a10 	vmov	s16, r8
 80058f4:	9b07      	ldr	r3, [sp, #28]
 80058f6:	1b9a      	subs	r2, r3, r6
 80058f8:	d006      	beq.n	8005908 <_dtoa_r+0x7a0>
 80058fa:	ee18 1a10 	vmov	r1, s16
 80058fe:	4620      	mov	r0, r4
 8005900:	f000 fbf2 	bl	80060e8 <__pow5mult>
 8005904:	ee08 0a10 	vmov	s16, r0
 8005908:	2101      	movs	r1, #1
 800590a:	4620      	mov	r0, r4
 800590c:	f000 fb2c 	bl	8005f68 <__i2b>
 8005910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005912:	2b00      	cmp	r3, #0
 8005914:	4606      	mov	r6, r0
 8005916:	f340 8088 	ble.w	8005a2a <_dtoa_r+0x8c2>
 800591a:	461a      	mov	r2, r3
 800591c:	4601      	mov	r1, r0
 800591e:	4620      	mov	r0, r4
 8005920:	f000 fbe2 	bl	80060e8 <__pow5mult>
 8005924:	9b06      	ldr	r3, [sp, #24]
 8005926:	2b01      	cmp	r3, #1
 8005928:	4606      	mov	r6, r0
 800592a:	f340 8081 	ble.w	8005a30 <_dtoa_r+0x8c8>
 800592e:	f04f 0800 	mov.w	r8, #0
 8005932:	6933      	ldr	r3, [r6, #16]
 8005934:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005938:	6918      	ldr	r0, [r3, #16]
 800593a:	f000 fac5 	bl	8005ec8 <__hi0bits>
 800593e:	f1c0 0020 	rsb	r0, r0, #32
 8005942:	9b05      	ldr	r3, [sp, #20]
 8005944:	4418      	add	r0, r3
 8005946:	f010 001f 	ands.w	r0, r0, #31
 800594a:	f000 8092 	beq.w	8005a72 <_dtoa_r+0x90a>
 800594e:	f1c0 0320 	rsb	r3, r0, #32
 8005952:	2b04      	cmp	r3, #4
 8005954:	f340 808a 	ble.w	8005a6c <_dtoa_r+0x904>
 8005958:	f1c0 001c 	rsb	r0, r0, #28
 800595c:	9b04      	ldr	r3, [sp, #16]
 800595e:	4403      	add	r3, r0
 8005960:	9304      	str	r3, [sp, #16]
 8005962:	9b05      	ldr	r3, [sp, #20]
 8005964:	4403      	add	r3, r0
 8005966:	4405      	add	r5, r0
 8005968:	9305      	str	r3, [sp, #20]
 800596a:	9b04      	ldr	r3, [sp, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	dd07      	ble.n	8005980 <_dtoa_r+0x818>
 8005970:	ee18 1a10 	vmov	r1, s16
 8005974:	461a      	mov	r2, r3
 8005976:	4620      	mov	r0, r4
 8005978:	f000 fc10 	bl	800619c <__lshift>
 800597c:	ee08 0a10 	vmov	s16, r0
 8005980:	9b05      	ldr	r3, [sp, #20]
 8005982:	2b00      	cmp	r3, #0
 8005984:	dd05      	ble.n	8005992 <_dtoa_r+0x82a>
 8005986:	4631      	mov	r1, r6
 8005988:	461a      	mov	r2, r3
 800598a:	4620      	mov	r0, r4
 800598c:	f000 fc06 	bl	800619c <__lshift>
 8005990:	4606      	mov	r6, r0
 8005992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d06e      	beq.n	8005a76 <_dtoa_r+0x90e>
 8005998:	ee18 0a10 	vmov	r0, s16
 800599c:	4631      	mov	r1, r6
 800599e:	f000 fc6d 	bl	800627c <__mcmp>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	da67      	bge.n	8005a76 <_dtoa_r+0x90e>
 80059a6:	9b00      	ldr	r3, [sp, #0]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	ee18 1a10 	vmov	r1, s16
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	220a      	movs	r2, #10
 80059b2:	2300      	movs	r3, #0
 80059b4:	4620      	mov	r0, r4
 80059b6:	f000 fa41 	bl	8005e3c <__multadd>
 80059ba:	9b08      	ldr	r3, [sp, #32]
 80059bc:	ee08 0a10 	vmov	s16, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 81b1 	beq.w	8005d28 <_dtoa_r+0xbc0>
 80059c6:	2300      	movs	r3, #0
 80059c8:	4639      	mov	r1, r7
 80059ca:	220a      	movs	r2, #10
 80059cc:	4620      	mov	r0, r4
 80059ce:	f000 fa35 	bl	8005e3c <__multadd>
 80059d2:	9b02      	ldr	r3, [sp, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	4607      	mov	r7, r0
 80059d8:	f300 808e 	bgt.w	8005af8 <_dtoa_r+0x990>
 80059dc:	9b06      	ldr	r3, [sp, #24]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	dc51      	bgt.n	8005a86 <_dtoa_r+0x91e>
 80059e2:	e089      	b.n	8005af8 <_dtoa_r+0x990>
 80059e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059ea:	e74b      	b.n	8005884 <_dtoa_r+0x71c>
 80059ec:	9b03      	ldr	r3, [sp, #12]
 80059ee:	1e5e      	subs	r6, r3, #1
 80059f0:	9b07      	ldr	r3, [sp, #28]
 80059f2:	42b3      	cmp	r3, r6
 80059f4:	bfbf      	itttt	lt
 80059f6:	9b07      	ldrlt	r3, [sp, #28]
 80059f8:	9607      	strlt	r6, [sp, #28]
 80059fa:	1af2      	sublt	r2, r6, r3
 80059fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80059fe:	bfb6      	itet	lt
 8005a00:	189b      	addlt	r3, r3, r2
 8005a02:	1b9e      	subge	r6, r3, r6
 8005a04:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005a06:	9b03      	ldr	r3, [sp, #12]
 8005a08:	bfb8      	it	lt
 8005a0a:	2600      	movlt	r6, #0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bfb7      	itett	lt
 8005a10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005a14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005a18:	1a9d      	sublt	r5, r3, r2
 8005a1a:	2300      	movlt	r3, #0
 8005a1c:	e734      	b.n	8005888 <_dtoa_r+0x720>
 8005a1e:	9e07      	ldr	r6, [sp, #28]
 8005a20:	9d04      	ldr	r5, [sp, #16]
 8005a22:	9f08      	ldr	r7, [sp, #32]
 8005a24:	e73b      	b.n	800589e <_dtoa_r+0x736>
 8005a26:	9a07      	ldr	r2, [sp, #28]
 8005a28:	e767      	b.n	80058fa <_dtoa_r+0x792>
 8005a2a:	9b06      	ldr	r3, [sp, #24]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	dc18      	bgt.n	8005a62 <_dtoa_r+0x8fa>
 8005a30:	f1ba 0f00 	cmp.w	sl, #0
 8005a34:	d115      	bne.n	8005a62 <_dtoa_r+0x8fa>
 8005a36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a3a:	b993      	cbnz	r3, 8005a62 <_dtoa_r+0x8fa>
 8005a3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005a40:	0d1b      	lsrs	r3, r3, #20
 8005a42:	051b      	lsls	r3, r3, #20
 8005a44:	b183      	cbz	r3, 8005a68 <_dtoa_r+0x900>
 8005a46:	9b04      	ldr	r3, [sp, #16]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	9304      	str	r3, [sp, #16]
 8005a4c:	9b05      	ldr	r3, [sp, #20]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	9305      	str	r3, [sp, #20]
 8005a52:	f04f 0801 	mov.w	r8, #1
 8005a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f47f af6a 	bne.w	8005932 <_dtoa_r+0x7ca>
 8005a5e:	2001      	movs	r0, #1
 8005a60:	e76f      	b.n	8005942 <_dtoa_r+0x7da>
 8005a62:	f04f 0800 	mov.w	r8, #0
 8005a66:	e7f6      	b.n	8005a56 <_dtoa_r+0x8ee>
 8005a68:	4698      	mov	r8, r3
 8005a6a:	e7f4      	b.n	8005a56 <_dtoa_r+0x8ee>
 8005a6c:	f43f af7d 	beq.w	800596a <_dtoa_r+0x802>
 8005a70:	4618      	mov	r0, r3
 8005a72:	301c      	adds	r0, #28
 8005a74:	e772      	b.n	800595c <_dtoa_r+0x7f4>
 8005a76:	9b03      	ldr	r3, [sp, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	dc37      	bgt.n	8005aec <_dtoa_r+0x984>
 8005a7c:	9b06      	ldr	r3, [sp, #24]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	dd34      	ble.n	8005aec <_dtoa_r+0x984>
 8005a82:	9b03      	ldr	r3, [sp, #12]
 8005a84:	9302      	str	r3, [sp, #8]
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	b96b      	cbnz	r3, 8005aa6 <_dtoa_r+0x93e>
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	2205      	movs	r2, #5
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f000 f9d4 	bl	8005e3c <__multadd>
 8005a94:	4601      	mov	r1, r0
 8005a96:	4606      	mov	r6, r0
 8005a98:	ee18 0a10 	vmov	r0, s16
 8005a9c:	f000 fbee 	bl	800627c <__mcmp>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	f73f adbb 	bgt.w	800561c <_dtoa_r+0x4b4>
 8005aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa8:	9d01      	ldr	r5, [sp, #4]
 8005aaa:	43db      	mvns	r3, r3
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	f04f 0800 	mov.w	r8, #0
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f000 f99f 	bl	8005df8 <_Bfree>
 8005aba:	2f00      	cmp	r7, #0
 8005abc:	f43f aea4 	beq.w	8005808 <_dtoa_r+0x6a0>
 8005ac0:	f1b8 0f00 	cmp.w	r8, #0
 8005ac4:	d005      	beq.n	8005ad2 <_dtoa_r+0x96a>
 8005ac6:	45b8      	cmp	r8, r7
 8005ac8:	d003      	beq.n	8005ad2 <_dtoa_r+0x96a>
 8005aca:	4641      	mov	r1, r8
 8005acc:	4620      	mov	r0, r4
 8005ace:	f000 f993 	bl	8005df8 <_Bfree>
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 f98f 	bl	8005df8 <_Bfree>
 8005ada:	e695      	b.n	8005808 <_dtoa_r+0x6a0>
 8005adc:	2600      	movs	r6, #0
 8005ade:	4637      	mov	r7, r6
 8005ae0:	e7e1      	b.n	8005aa6 <_dtoa_r+0x93e>
 8005ae2:	9700      	str	r7, [sp, #0]
 8005ae4:	4637      	mov	r7, r6
 8005ae6:	e599      	b.n	800561c <_dtoa_r+0x4b4>
 8005ae8:	40240000 	.word	0x40240000
 8005aec:	9b08      	ldr	r3, [sp, #32]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 80ca 	beq.w	8005c88 <_dtoa_r+0xb20>
 8005af4:	9b03      	ldr	r3, [sp, #12]
 8005af6:	9302      	str	r3, [sp, #8]
 8005af8:	2d00      	cmp	r5, #0
 8005afa:	dd05      	ble.n	8005b08 <_dtoa_r+0x9a0>
 8005afc:	4639      	mov	r1, r7
 8005afe:	462a      	mov	r2, r5
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 fb4b 	bl	800619c <__lshift>
 8005b06:	4607      	mov	r7, r0
 8005b08:	f1b8 0f00 	cmp.w	r8, #0
 8005b0c:	d05b      	beq.n	8005bc6 <_dtoa_r+0xa5e>
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	4620      	mov	r0, r4
 8005b12:	f000 f931 	bl	8005d78 <_Balloc>
 8005b16:	4605      	mov	r5, r0
 8005b18:	b928      	cbnz	r0, 8005b26 <_dtoa_r+0x9be>
 8005b1a:	4b87      	ldr	r3, [pc, #540]	; (8005d38 <_dtoa_r+0xbd0>)
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005b22:	f7ff bb3b 	b.w	800519c <_dtoa_r+0x34>
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	3202      	adds	r2, #2
 8005b2a:	0092      	lsls	r2, r2, #2
 8005b2c:	f107 010c 	add.w	r1, r7, #12
 8005b30:	300c      	adds	r0, #12
 8005b32:	f000 f913 	bl	8005d5c <memcpy>
 8005b36:	2201      	movs	r2, #1
 8005b38:	4629      	mov	r1, r5
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f000 fb2e 	bl	800619c <__lshift>
 8005b40:	9b01      	ldr	r3, [sp, #4]
 8005b42:	f103 0901 	add.w	r9, r3, #1
 8005b46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	9305      	str	r3, [sp, #20]
 8005b4e:	f00a 0301 	and.w	r3, sl, #1
 8005b52:	46b8      	mov	r8, r7
 8005b54:	9304      	str	r3, [sp, #16]
 8005b56:	4607      	mov	r7, r0
 8005b58:	4631      	mov	r1, r6
 8005b5a:	ee18 0a10 	vmov	r0, s16
 8005b5e:	f7ff fa77 	bl	8005050 <quorem>
 8005b62:	4641      	mov	r1, r8
 8005b64:	9002      	str	r0, [sp, #8]
 8005b66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005b6a:	ee18 0a10 	vmov	r0, s16
 8005b6e:	f000 fb85 	bl	800627c <__mcmp>
 8005b72:	463a      	mov	r2, r7
 8005b74:	9003      	str	r0, [sp, #12]
 8005b76:	4631      	mov	r1, r6
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f000 fb9b 	bl	80062b4 <__mdiff>
 8005b7e:	68c2      	ldr	r2, [r0, #12]
 8005b80:	f109 3bff 	add.w	fp, r9, #4294967295
 8005b84:	4605      	mov	r5, r0
 8005b86:	bb02      	cbnz	r2, 8005bca <_dtoa_r+0xa62>
 8005b88:	4601      	mov	r1, r0
 8005b8a:	ee18 0a10 	vmov	r0, s16
 8005b8e:	f000 fb75 	bl	800627c <__mcmp>
 8005b92:	4602      	mov	r2, r0
 8005b94:	4629      	mov	r1, r5
 8005b96:	4620      	mov	r0, r4
 8005b98:	9207      	str	r2, [sp, #28]
 8005b9a:	f000 f92d 	bl	8005df8 <_Bfree>
 8005b9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005ba2:	ea43 0102 	orr.w	r1, r3, r2
 8005ba6:	9b04      	ldr	r3, [sp, #16]
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	464d      	mov	r5, r9
 8005bac:	d10f      	bne.n	8005bce <_dtoa_r+0xa66>
 8005bae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005bb2:	d02a      	beq.n	8005c0a <_dtoa_r+0xaa2>
 8005bb4:	9b03      	ldr	r3, [sp, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	dd02      	ble.n	8005bc0 <_dtoa_r+0xa58>
 8005bba:	9b02      	ldr	r3, [sp, #8]
 8005bbc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005bc0:	f88b a000 	strb.w	sl, [fp]
 8005bc4:	e775      	b.n	8005ab2 <_dtoa_r+0x94a>
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	e7ba      	b.n	8005b40 <_dtoa_r+0x9d8>
 8005bca:	2201      	movs	r2, #1
 8005bcc:	e7e2      	b.n	8005b94 <_dtoa_r+0xa2c>
 8005bce:	9b03      	ldr	r3, [sp, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	db04      	blt.n	8005bde <_dtoa_r+0xa76>
 8005bd4:	9906      	ldr	r1, [sp, #24]
 8005bd6:	430b      	orrs	r3, r1
 8005bd8:	9904      	ldr	r1, [sp, #16]
 8005bda:	430b      	orrs	r3, r1
 8005bdc:	d122      	bne.n	8005c24 <_dtoa_r+0xabc>
 8005bde:	2a00      	cmp	r2, #0
 8005be0:	ddee      	ble.n	8005bc0 <_dtoa_r+0xa58>
 8005be2:	ee18 1a10 	vmov	r1, s16
 8005be6:	2201      	movs	r2, #1
 8005be8:	4620      	mov	r0, r4
 8005bea:	f000 fad7 	bl	800619c <__lshift>
 8005bee:	4631      	mov	r1, r6
 8005bf0:	ee08 0a10 	vmov	s16, r0
 8005bf4:	f000 fb42 	bl	800627c <__mcmp>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	dc03      	bgt.n	8005c04 <_dtoa_r+0xa9c>
 8005bfc:	d1e0      	bne.n	8005bc0 <_dtoa_r+0xa58>
 8005bfe:	f01a 0f01 	tst.w	sl, #1
 8005c02:	d0dd      	beq.n	8005bc0 <_dtoa_r+0xa58>
 8005c04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c08:	d1d7      	bne.n	8005bba <_dtoa_r+0xa52>
 8005c0a:	2339      	movs	r3, #57	; 0x39
 8005c0c:	f88b 3000 	strb.w	r3, [fp]
 8005c10:	462b      	mov	r3, r5
 8005c12:	461d      	mov	r5, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c1a:	2a39      	cmp	r2, #57	; 0x39
 8005c1c:	d071      	beq.n	8005d02 <_dtoa_r+0xb9a>
 8005c1e:	3201      	adds	r2, #1
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	e746      	b.n	8005ab2 <_dtoa_r+0x94a>
 8005c24:	2a00      	cmp	r2, #0
 8005c26:	dd07      	ble.n	8005c38 <_dtoa_r+0xad0>
 8005c28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c2c:	d0ed      	beq.n	8005c0a <_dtoa_r+0xaa2>
 8005c2e:	f10a 0301 	add.w	r3, sl, #1
 8005c32:	f88b 3000 	strb.w	r3, [fp]
 8005c36:	e73c      	b.n	8005ab2 <_dtoa_r+0x94a>
 8005c38:	9b05      	ldr	r3, [sp, #20]
 8005c3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005c3e:	4599      	cmp	r9, r3
 8005c40:	d047      	beq.n	8005cd2 <_dtoa_r+0xb6a>
 8005c42:	ee18 1a10 	vmov	r1, s16
 8005c46:	2300      	movs	r3, #0
 8005c48:	220a      	movs	r2, #10
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 f8f6 	bl	8005e3c <__multadd>
 8005c50:	45b8      	cmp	r8, r7
 8005c52:	ee08 0a10 	vmov	s16, r0
 8005c56:	f04f 0300 	mov.w	r3, #0
 8005c5a:	f04f 020a 	mov.w	r2, #10
 8005c5e:	4641      	mov	r1, r8
 8005c60:	4620      	mov	r0, r4
 8005c62:	d106      	bne.n	8005c72 <_dtoa_r+0xb0a>
 8005c64:	f000 f8ea 	bl	8005e3c <__multadd>
 8005c68:	4680      	mov	r8, r0
 8005c6a:	4607      	mov	r7, r0
 8005c6c:	f109 0901 	add.w	r9, r9, #1
 8005c70:	e772      	b.n	8005b58 <_dtoa_r+0x9f0>
 8005c72:	f000 f8e3 	bl	8005e3c <__multadd>
 8005c76:	4639      	mov	r1, r7
 8005c78:	4680      	mov	r8, r0
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	220a      	movs	r2, #10
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f000 f8dc 	bl	8005e3c <__multadd>
 8005c84:	4607      	mov	r7, r0
 8005c86:	e7f1      	b.n	8005c6c <_dtoa_r+0xb04>
 8005c88:	9b03      	ldr	r3, [sp, #12]
 8005c8a:	9302      	str	r3, [sp, #8]
 8005c8c:	9d01      	ldr	r5, [sp, #4]
 8005c8e:	ee18 0a10 	vmov	r0, s16
 8005c92:	4631      	mov	r1, r6
 8005c94:	f7ff f9dc 	bl	8005050 <quorem>
 8005c98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005c9c:	9b01      	ldr	r3, [sp, #4]
 8005c9e:	f805 ab01 	strb.w	sl, [r5], #1
 8005ca2:	1aea      	subs	r2, r5, r3
 8005ca4:	9b02      	ldr	r3, [sp, #8]
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	dd09      	ble.n	8005cbe <_dtoa_r+0xb56>
 8005caa:	ee18 1a10 	vmov	r1, s16
 8005cae:	2300      	movs	r3, #0
 8005cb0:	220a      	movs	r2, #10
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f000 f8c2 	bl	8005e3c <__multadd>
 8005cb8:	ee08 0a10 	vmov	s16, r0
 8005cbc:	e7e7      	b.n	8005c8e <_dtoa_r+0xb26>
 8005cbe:	9b02      	ldr	r3, [sp, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	bfc8      	it	gt
 8005cc4:	461d      	movgt	r5, r3
 8005cc6:	9b01      	ldr	r3, [sp, #4]
 8005cc8:	bfd8      	it	le
 8005cca:	2501      	movle	r5, #1
 8005ccc:	441d      	add	r5, r3
 8005cce:	f04f 0800 	mov.w	r8, #0
 8005cd2:	ee18 1a10 	vmov	r1, s16
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f000 fa5f 	bl	800619c <__lshift>
 8005cde:	4631      	mov	r1, r6
 8005ce0:	ee08 0a10 	vmov	s16, r0
 8005ce4:	f000 faca 	bl	800627c <__mcmp>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	dc91      	bgt.n	8005c10 <_dtoa_r+0xaa8>
 8005cec:	d102      	bne.n	8005cf4 <_dtoa_r+0xb8c>
 8005cee:	f01a 0f01 	tst.w	sl, #1
 8005cf2:	d18d      	bne.n	8005c10 <_dtoa_r+0xaa8>
 8005cf4:	462b      	mov	r3, r5
 8005cf6:	461d      	mov	r5, r3
 8005cf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cfc:	2a30      	cmp	r2, #48	; 0x30
 8005cfe:	d0fa      	beq.n	8005cf6 <_dtoa_r+0xb8e>
 8005d00:	e6d7      	b.n	8005ab2 <_dtoa_r+0x94a>
 8005d02:	9a01      	ldr	r2, [sp, #4]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d184      	bne.n	8005c12 <_dtoa_r+0xaaa>
 8005d08:	9b00      	ldr	r3, [sp, #0]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	2331      	movs	r3, #49	; 0x31
 8005d10:	7013      	strb	r3, [r2, #0]
 8005d12:	e6ce      	b.n	8005ab2 <_dtoa_r+0x94a>
 8005d14:	4b09      	ldr	r3, [pc, #36]	; (8005d3c <_dtoa_r+0xbd4>)
 8005d16:	f7ff ba95 	b.w	8005244 <_dtoa_r+0xdc>
 8005d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f47f aa6e 	bne.w	80051fe <_dtoa_r+0x96>
 8005d22:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <_dtoa_r+0xbd8>)
 8005d24:	f7ff ba8e 	b.w	8005244 <_dtoa_r+0xdc>
 8005d28:	9b02      	ldr	r3, [sp, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	dcae      	bgt.n	8005c8c <_dtoa_r+0xb24>
 8005d2e:	9b06      	ldr	r3, [sp, #24]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	f73f aea8 	bgt.w	8005a86 <_dtoa_r+0x91e>
 8005d36:	e7a9      	b.n	8005c8c <_dtoa_r+0xb24>
 8005d38:	0800765b 	.word	0x0800765b
 8005d3c:	080075b8 	.word	0x080075b8
 8005d40:	080075dc 	.word	0x080075dc

08005d44 <_localeconv_r>:
 8005d44:	4800      	ldr	r0, [pc, #0]	; (8005d48 <_localeconv_r+0x4>)
 8005d46:	4770      	bx	lr
 8005d48:	20000160 	.word	0x20000160

08005d4c <malloc>:
 8005d4c:	4b02      	ldr	r3, [pc, #8]	; (8005d58 <malloc+0xc>)
 8005d4e:	4601      	mov	r1, r0
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	f000 bc17 	b.w	8006584 <_malloc_r>
 8005d56:	bf00      	nop
 8005d58:	2000000c 	.word	0x2000000c

08005d5c <memcpy>:
 8005d5c:	440a      	add	r2, r1
 8005d5e:	4291      	cmp	r1, r2
 8005d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d64:	d100      	bne.n	8005d68 <memcpy+0xc>
 8005d66:	4770      	bx	lr
 8005d68:	b510      	push	{r4, lr}
 8005d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d72:	4291      	cmp	r1, r2
 8005d74:	d1f9      	bne.n	8005d6a <memcpy+0xe>
 8005d76:	bd10      	pop	{r4, pc}

08005d78 <_Balloc>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	460d      	mov	r5, r1
 8005d80:	b976      	cbnz	r6, 8005da0 <_Balloc+0x28>
 8005d82:	2010      	movs	r0, #16
 8005d84:	f7ff ffe2 	bl	8005d4c <malloc>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	6260      	str	r0, [r4, #36]	; 0x24
 8005d8c:	b920      	cbnz	r0, 8005d98 <_Balloc+0x20>
 8005d8e:	4b18      	ldr	r3, [pc, #96]	; (8005df0 <_Balloc+0x78>)
 8005d90:	4818      	ldr	r0, [pc, #96]	; (8005df4 <_Balloc+0x7c>)
 8005d92:	2166      	movs	r1, #102	; 0x66
 8005d94:	f000 fdd6 	bl	8006944 <__assert_func>
 8005d98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d9c:	6006      	str	r6, [r0, #0]
 8005d9e:	60c6      	str	r6, [r0, #12]
 8005da0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005da2:	68f3      	ldr	r3, [r6, #12]
 8005da4:	b183      	cbz	r3, 8005dc8 <_Balloc+0x50>
 8005da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005dae:	b9b8      	cbnz	r0, 8005de0 <_Balloc+0x68>
 8005db0:	2101      	movs	r1, #1
 8005db2:	fa01 f605 	lsl.w	r6, r1, r5
 8005db6:	1d72      	adds	r2, r6, #5
 8005db8:	0092      	lsls	r2, r2, #2
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f000 fb60 	bl	8006480 <_calloc_r>
 8005dc0:	b160      	cbz	r0, 8005ddc <_Balloc+0x64>
 8005dc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005dc6:	e00e      	b.n	8005de6 <_Balloc+0x6e>
 8005dc8:	2221      	movs	r2, #33	; 0x21
 8005dca:	2104      	movs	r1, #4
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f000 fb57 	bl	8006480 <_calloc_r>
 8005dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dd4:	60f0      	str	r0, [r6, #12]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e4      	bne.n	8005da6 <_Balloc+0x2e>
 8005ddc:	2000      	movs	r0, #0
 8005dde:	bd70      	pop	{r4, r5, r6, pc}
 8005de0:	6802      	ldr	r2, [r0, #0]
 8005de2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005de6:	2300      	movs	r3, #0
 8005de8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005dec:	e7f7      	b.n	8005dde <_Balloc+0x66>
 8005dee:	bf00      	nop
 8005df0:	080075e9 	.word	0x080075e9
 8005df4:	0800766c 	.word	0x0800766c

08005df8 <_Bfree>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005dfc:	4605      	mov	r5, r0
 8005dfe:	460c      	mov	r4, r1
 8005e00:	b976      	cbnz	r6, 8005e20 <_Bfree+0x28>
 8005e02:	2010      	movs	r0, #16
 8005e04:	f7ff ffa2 	bl	8005d4c <malloc>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	6268      	str	r0, [r5, #36]	; 0x24
 8005e0c:	b920      	cbnz	r0, 8005e18 <_Bfree+0x20>
 8005e0e:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <_Bfree+0x3c>)
 8005e10:	4809      	ldr	r0, [pc, #36]	; (8005e38 <_Bfree+0x40>)
 8005e12:	218a      	movs	r1, #138	; 0x8a
 8005e14:	f000 fd96 	bl	8006944 <__assert_func>
 8005e18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e1c:	6006      	str	r6, [r0, #0]
 8005e1e:	60c6      	str	r6, [r0, #12]
 8005e20:	b13c      	cbz	r4, 8005e32 <_Bfree+0x3a>
 8005e22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e24:	6862      	ldr	r2, [r4, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e2c:	6021      	str	r1, [r4, #0]
 8005e2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e32:	bd70      	pop	{r4, r5, r6, pc}
 8005e34:	080075e9 	.word	0x080075e9
 8005e38:	0800766c 	.word	0x0800766c

08005e3c <__multadd>:
 8005e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e40:	690d      	ldr	r5, [r1, #16]
 8005e42:	4607      	mov	r7, r0
 8005e44:	460c      	mov	r4, r1
 8005e46:	461e      	mov	r6, r3
 8005e48:	f101 0c14 	add.w	ip, r1, #20
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	f8dc 3000 	ldr.w	r3, [ip]
 8005e52:	b299      	uxth	r1, r3
 8005e54:	fb02 6101 	mla	r1, r2, r1, r6
 8005e58:	0c1e      	lsrs	r6, r3, #16
 8005e5a:	0c0b      	lsrs	r3, r1, #16
 8005e5c:	fb02 3306 	mla	r3, r2, r6, r3
 8005e60:	b289      	uxth	r1, r1
 8005e62:	3001      	adds	r0, #1
 8005e64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e68:	4285      	cmp	r5, r0
 8005e6a:	f84c 1b04 	str.w	r1, [ip], #4
 8005e6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e72:	dcec      	bgt.n	8005e4e <__multadd+0x12>
 8005e74:	b30e      	cbz	r6, 8005eba <__multadd+0x7e>
 8005e76:	68a3      	ldr	r3, [r4, #8]
 8005e78:	42ab      	cmp	r3, r5
 8005e7a:	dc19      	bgt.n	8005eb0 <__multadd+0x74>
 8005e7c:	6861      	ldr	r1, [r4, #4]
 8005e7e:	4638      	mov	r0, r7
 8005e80:	3101      	adds	r1, #1
 8005e82:	f7ff ff79 	bl	8005d78 <_Balloc>
 8005e86:	4680      	mov	r8, r0
 8005e88:	b928      	cbnz	r0, 8005e96 <__multadd+0x5a>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <__multadd+0x84>)
 8005e8e:	480d      	ldr	r0, [pc, #52]	; (8005ec4 <__multadd+0x88>)
 8005e90:	21b5      	movs	r1, #181	; 0xb5
 8005e92:	f000 fd57 	bl	8006944 <__assert_func>
 8005e96:	6922      	ldr	r2, [r4, #16]
 8005e98:	3202      	adds	r2, #2
 8005e9a:	f104 010c 	add.w	r1, r4, #12
 8005e9e:	0092      	lsls	r2, r2, #2
 8005ea0:	300c      	adds	r0, #12
 8005ea2:	f7ff ff5b 	bl	8005d5c <memcpy>
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	4638      	mov	r0, r7
 8005eaa:	f7ff ffa5 	bl	8005df8 <_Bfree>
 8005eae:	4644      	mov	r4, r8
 8005eb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005eb4:	3501      	adds	r5, #1
 8005eb6:	615e      	str	r6, [r3, #20]
 8005eb8:	6125      	str	r5, [r4, #16]
 8005eba:	4620      	mov	r0, r4
 8005ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ec0:	0800765b 	.word	0x0800765b
 8005ec4:	0800766c 	.word	0x0800766c

08005ec8 <__hi0bits>:
 8005ec8:	0c03      	lsrs	r3, r0, #16
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	b9d3      	cbnz	r3, 8005f04 <__hi0bits+0x3c>
 8005ece:	0400      	lsls	r0, r0, #16
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005ed6:	bf04      	itt	eq
 8005ed8:	0200      	lsleq	r0, r0, #8
 8005eda:	3308      	addeq	r3, #8
 8005edc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005ee0:	bf04      	itt	eq
 8005ee2:	0100      	lsleq	r0, r0, #4
 8005ee4:	3304      	addeq	r3, #4
 8005ee6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005eea:	bf04      	itt	eq
 8005eec:	0080      	lsleq	r0, r0, #2
 8005eee:	3302      	addeq	r3, #2
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	db05      	blt.n	8005f00 <__hi0bits+0x38>
 8005ef4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005ef8:	f103 0301 	add.w	r3, r3, #1
 8005efc:	bf08      	it	eq
 8005efe:	2320      	moveq	r3, #32
 8005f00:	4618      	mov	r0, r3
 8005f02:	4770      	bx	lr
 8005f04:	2300      	movs	r3, #0
 8005f06:	e7e4      	b.n	8005ed2 <__hi0bits+0xa>

08005f08 <__lo0bits>:
 8005f08:	6803      	ldr	r3, [r0, #0]
 8005f0a:	f013 0207 	ands.w	r2, r3, #7
 8005f0e:	4601      	mov	r1, r0
 8005f10:	d00b      	beq.n	8005f2a <__lo0bits+0x22>
 8005f12:	07da      	lsls	r2, r3, #31
 8005f14:	d423      	bmi.n	8005f5e <__lo0bits+0x56>
 8005f16:	0798      	lsls	r0, r3, #30
 8005f18:	bf49      	itett	mi
 8005f1a:	085b      	lsrmi	r3, r3, #1
 8005f1c:	089b      	lsrpl	r3, r3, #2
 8005f1e:	2001      	movmi	r0, #1
 8005f20:	600b      	strmi	r3, [r1, #0]
 8005f22:	bf5c      	itt	pl
 8005f24:	600b      	strpl	r3, [r1, #0]
 8005f26:	2002      	movpl	r0, #2
 8005f28:	4770      	bx	lr
 8005f2a:	b298      	uxth	r0, r3
 8005f2c:	b9a8      	cbnz	r0, 8005f5a <__lo0bits+0x52>
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	2010      	movs	r0, #16
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	b90a      	cbnz	r2, 8005f3a <__lo0bits+0x32>
 8005f36:	3008      	adds	r0, #8
 8005f38:	0a1b      	lsrs	r3, r3, #8
 8005f3a:	071a      	lsls	r2, r3, #28
 8005f3c:	bf04      	itt	eq
 8005f3e:	091b      	lsreq	r3, r3, #4
 8005f40:	3004      	addeq	r0, #4
 8005f42:	079a      	lsls	r2, r3, #30
 8005f44:	bf04      	itt	eq
 8005f46:	089b      	lsreq	r3, r3, #2
 8005f48:	3002      	addeq	r0, #2
 8005f4a:	07da      	lsls	r2, r3, #31
 8005f4c:	d403      	bmi.n	8005f56 <__lo0bits+0x4e>
 8005f4e:	085b      	lsrs	r3, r3, #1
 8005f50:	f100 0001 	add.w	r0, r0, #1
 8005f54:	d005      	beq.n	8005f62 <__lo0bits+0x5a>
 8005f56:	600b      	str	r3, [r1, #0]
 8005f58:	4770      	bx	lr
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	e7e9      	b.n	8005f32 <__lo0bits+0x2a>
 8005f5e:	2000      	movs	r0, #0
 8005f60:	4770      	bx	lr
 8005f62:	2020      	movs	r0, #32
 8005f64:	4770      	bx	lr
	...

08005f68 <__i2b>:
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	f7ff ff03 	bl	8005d78 <_Balloc>
 8005f72:	4602      	mov	r2, r0
 8005f74:	b928      	cbnz	r0, 8005f82 <__i2b+0x1a>
 8005f76:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <__i2b+0x24>)
 8005f78:	4805      	ldr	r0, [pc, #20]	; (8005f90 <__i2b+0x28>)
 8005f7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f7e:	f000 fce1 	bl	8006944 <__assert_func>
 8005f82:	2301      	movs	r3, #1
 8005f84:	6144      	str	r4, [r0, #20]
 8005f86:	6103      	str	r3, [r0, #16]
 8005f88:	bd10      	pop	{r4, pc}
 8005f8a:	bf00      	nop
 8005f8c:	0800765b 	.word	0x0800765b
 8005f90:	0800766c 	.word	0x0800766c

08005f94 <__multiply>:
 8005f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f98:	4691      	mov	r9, r2
 8005f9a:	690a      	ldr	r2, [r1, #16]
 8005f9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	bfb8      	it	lt
 8005fa4:	460b      	movlt	r3, r1
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	bfbc      	itt	lt
 8005faa:	464c      	movlt	r4, r9
 8005fac:	4699      	movlt	r9, r3
 8005fae:	6927      	ldr	r7, [r4, #16]
 8005fb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005fb4:	68a3      	ldr	r3, [r4, #8]
 8005fb6:	6861      	ldr	r1, [r4, #4]
 8005fb8:	eb07 060a 	add.w	r6, r7, sl
 8005fbc:	42b3      	cmp	r3, r6
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	bfb8      	it	lt
 8005fc2:	3101      	addlt	r1, #1
 8005fc4:	f7ff fed8 	bl	8005d78 <_Balloc>
 8005fc8:	b930      	cbnz	r0, 8005fd8 <__multiply+0x44>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	4b44      	ldr	r3, [pc, #272]	; (80060e0 <__multiply+0x14c>)
 8005fce:	4845      	ldr	r0, [pc, #276]	; (80060e4 <__multiply+0x150>)
 8005fd0:	f240 115d 	movw	r1, #349	; 0x15d
 8005fd4:	f000 fcb6 	bl	8006944 <__assert_func>
 8005fd8:	f100 0514 	add.w	r5, r0, #20
 8005fdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005fe0:	462b      	mov	r3, r5
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	4543      	cmp	r3, r8
 8005fe6:	d321      	bcc.n	800602c <__multiply+0x98>
 8005fe8:	f104 0314 	add.w	r3, r4, #20
 8005fec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ff0:	f109 0314 	add.w	r3, r9, #20
 8005ff4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ff8:	9202      	str	r2, [sp, #8]
 8005ffa:	1b3a      	subs	r2, r7, r4
 8005ffc:	3a15      	subs	r2, #21
 8005ffe:	f022 0203 	bic.w	r2, r2, #3
 8006002:	3204      	adds	r2, #4
 8006004:	f104 0115 	add.w	r1, r4, #21
 8006008:	428f      	cmp	r7, r1
 800600a:	bf38      	it	cc
 800600c:	2204      	movcc	r2, #4
 800600e:	9201      	str	r2, [sp, #4]
 8006010:	9a02      	ldr	r2, [sp, #8]
 8006012:	9303      	str	r3, [sp, #12]
 8006014:	429a      	cmp	r2, r3
 8006016:	d80c      	bhi.n	8006032 <__multiply+0x9e>
 8006018:	2e00      	cmp	r6, #0
 800601a:	dd03      	ble.n	8006024 <__multiply+0x90>
 800601c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006020:	2b00      	cmp	r3, #0
 8006022:	d05a      	beq.n	80060da <__multiply+0x146>
 8006024:	6106      	str	r6, [r0, #16]
 8006026:	b005      	add	sp, #20
 8006028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602c:	f843 2b04 	str.w	r2, [r3], #4
 8006030:	e7d8      	b.n	8005fe4 <__multiply+0x50>
 8006032:	f8b3 a000 	ldrh.w	sl, [r3]
 8006036:	f1ba 0f00 	cmp.w	sl, #0
 800603a:	d024      	beq.n	8006086 <__multiply+0xf2>
 800603c:	f104 0e14 	add.w	lr, r4, #20
 8006040:	46a9      	mov	r9, r5
 8006042:	f04f 0c00 	mov.w	ip, #0
 8006046:	f85e 2b04 	ldr.w	r2, [lr], #4
 800604a:	f8d9 1000 	ldr.w	r1, [r9]
 800604e:	fa1f fb82 	uxth.w	fp, r2
 8006052:	b289      	uxth	r1, r1
 8006054:	fb0a 110b 	mla	r1, sl, fp, r1
 8006058:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800605c:	f8d9 2000 	ldr.w	r2, [r9]
 8006060:	4461      	add	r1, ip
 8006062:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006066:	fb0a c20b 	mla	r2, sl, fp, ip
 800606a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800606e:	b289      	uxth	r1, r1
 8006070:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006074:	4577      	cmp	r7, lr
 8006076:	f849 1b04 	str.w	r1, [r9], #4
 800607a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800607e:	d8e2      	bhi.n	8006046 <__multiply+0xb2>
 8006080:	9a01      	ldr	r2, [sp, #4]
 8006082:	f845 c002 	str.w	ip, [r5, r2]
 8006086:	9a03      	ldr	r2, [sp, #12]
 8006088:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800608c:	3304      	adds	r3, #4
 800608e:	f1b9 0f00 	cmp.w	r9, #0
 8006092:	d020      	beq.n	80060d6 <__multiply+0x142>
 8006094:	6829      	ldr	r1, [r5, #0]
 8006096:	f104 0c14 	add.w	ip, r4, #20
 800609a:	46ae      	mov	lr, r5
 800609c:	f04f 0a00 	mov.w	sl, #0
 80060a0:	f8bc b000 	ldrh.w	fp, [ip]
 80060a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80060a8:	fb09 220b 	mla	r2, r9, fp, r2
 80060ac:	4492      	add	sl, r2
 80060ae:	b289      	uxth	r1, r1
 80060b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80060b4:	f84e 1b04 	str.w	r1, [lr], #4
 80060b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80060bc:	f8be 1000 	ldrh.w	r1, [lr]
 80060c0:	0c12      	lsrs	r2, r2, #16
 80060c2:	fb09 1102 	mla	r1, r9, r2, r1
 80060c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80060ca:	4567      	cmp	r7, ip
 80060cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80060d0:	d8e6      	bhi.n	80060a0 <__multiply+0x10c>
 80060d2:	9a01      	ldr	r2, [sp, #4]
 80060d4:	50a9      	str	r1, [r5, r2]
 80060d6:	3504      	adds	r5, #4
 80060d8:	e79a      	b.n	8006010 <__multiply+0x7c>
 80060da:	3e01      	subs	r6, #1
 80060dc:	e79c      	b.n	8006018 <__multiply+0x84>
 80060de:	bf00      	nop
 80060e0:	0800765b 	.word	0x0800765b
 80060e4:	0800766c 	.word	0x0800766c

080060e8 <__pow5mult>:
 80060e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060ec:	4615      	mov	r5, r2
 80060ee:	f012 0203 	ands.w	r2, r2, #3
 80060f2:	4606      	mov	r6, r0
 80060f4:	460f      	mov	r7, r1
 80060f6:	d007      	beq.n	8006108 <__pow5mult+0x20>
 80060f8:	4c25      	ldr	r4, [pc, #148]	; (8006190 <__pow5mult+0xa8>)
 80060fa:	3a01      	subs	r2, #1
 80060fc:	2300      	movs	r3, #0
 80060fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006102:	f7ff fe9b 	bl	8005e3c <__multadd>
 8006106:	4607      	mov	r7, r0
 8006108:	10ad      	asrs	r5, r5, #2
 800610a:	d03d      	beq.n	8006188 <__pow5mult+0xa0>
 800610c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800610e:	b97c      	cbnz	r4, 8006130 <__pow5mult+0x48>
 8006110:	2010      	movs	r0, #16
 8006112:	f7ff fe1b 	bl	8005d4c <malloc>
 8006116:	4602      	mov	r2, r0
 8006118:	6270      	str	r0, [r6, #36]	; 0x24
 800611a:	b928      	cbnz	r0, 8006128 <__pow5mult+0x40>
 800611c:	4b1d      	ldr	r3, [pc, #116]	; (8006194 <__pow5mult+0xac>)
 800611e:	481e      	ldr	r0, [pc, #120]	; (8006198 <__pow5mult+0xb0>)
 8006120:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006124:	f000 fc0e 	bl	8006944 <__assert_func>
 8006128:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800612c:	6004      	str	r4, [r0, #0]
 800612e:	60c4      	str	r4, [r0, #12]
 8006130:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006138:	b94c      	cbnz	r4, 800614e <__pow5mult+0x66>
 800613a:	f240 2171 	movw	r1, #625	; 0x271
 800613e:	4630      	mov	r0, r6
 8006140:	f7ff ff12 	bl	8005f68 <__i2b>
 8006144:	2300      	movs	r3, #0
 8006146:	f8c8 0008 	str.w	r0, [r8, #8]
 800614a:	4604      	mov	r4, r0
 800614c:	6003      	str	r3, [r0, #0]
 800614e:	f04f 0900 	mov.w	r9, #0
 8006152:	07eb      	lsls	r3, r5, #31
 8006154:	d50a      	bpl.n	800616c <__pow5mult+0x84>
 8006156:	4639      	mov	r1, r7
 8006158:	4622      	mov	r2, r4
 800615a:	4630      	mov	r0, r6
 800615c:	f7ff ff1a 	bl	8005f94 <__multiply>
 8006160:	4639      	mov	r1, r7
 8006162:	4680      	mov	r8, r0
 8006164:	4630      	mov	r0, r6
 8006166:	f7ff fe47 	bl	8005df8 <_Bfree>
 800616a:	4647      	mov	r7, r8
 800616c:	106d      	asrs	r5, r5, #1
 800616e:	d00b      	beq.n	8006188 <__pow5mult+0xa0>
 8006170:	6820      	ldr	r0, [r4, #0]
 8006172:	b938      	cbnz	r0, 8006184 <__pow5mult+0x9c>
 8006174:	4622      	mov	r2, r4
 8006176:	4621      	mov	r1, r4
 8006178:	4630      	mov	r0, r6
 800617a:	f7ff ff0b 	bl	8005f94 <__multiply>
 800617e:	6020      	str	r0, [r4, #0]
 8006180:	f8c0 9000 	str.w	r9, [r0]
 8006184:	4604      	mov	r4, r0
 8006186:	e7e4      	b.n	8006152 <__pow5mult+0x6a>
 8006188:	4638      	mov	r0, r7
 800618a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800618e:	bf00      	nop
 8006190:	080077b8 	.word	0x080077b8
 8006194:	080075e9 	.word	0x080075e9
 8006198:	0800766c 	.word	0x0800766c

0800619c <__lshift>:
 800619c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061a0:	460c      	mov	r4, r1
 80061a2:	6849      	ldr	r1, [r1, #4]
 80061a4:	6923      	ldr	r3, [r4, #16]
 80061a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80061aa:	68a3      	ldr	r3, [r4, #8]
 80061ac:	4607      	mov	r7, r0
 80061ae:	4691      	mov	r9, r2
 80061b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061b4:	f108 0601 	add.w	r6, r8, #1
 80061b8:	42b3      	cmp	r3, r6
 80061ba:	db0b      	blt.n	80061d4 <__lshift+0x38>
 80061bc:	4638      	mov	r0, r7
 80061be:	f7ff fddb 	bl	8005d78 <_Balloc>
 80061c2:	4605      	mov	r5, r0
 80061c4:	b948      	cbnz	r0, 80061da <__lshift+0x3e>
 80061c6:	4602      	mov	r2, r0
 80061c8:	4b2a      	ldr	r3, [pc, #168]	; (8006274 <__lshift+0xd8>)
 80061ca:	482b      	ldr	r0, [pc, #172]	; (8006278 <__lshift+0xdc>)
 80061cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80061d0:	f000 fbb8 	bl	8006944 <__assert_func>
 80061d4:	3101      	adds	r1, #1
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	e7ee      	b.n	80061b8 <__lshift+0x1c>
 80061da:	2300      	movs	r3, #0
 80061dc:	f100 0114 	add.w	r1, r0, #20
 80061e0:	f100 0210 	add.w	r2, r0, #16
 80061e4:	4618      	mov	r0, r3
 80061e6:	4553      	cmp	r3, sl
 80061e8:	db37      	blt.n	800625a <__lshift+0xbe>
 80061ea:	6920      	ldr	r0, [r4, #16]
 80061ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061f0:	f104 0314 	add.w	r3, r4, #20
 80061f4:	f019 091f 	ands.w	r9, r9, #31
 80061f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006200:	d02f      	beq.n	8006262 <__lshift+0xc6>
 8006202:	f1c9 0e20 	rsb	lr, r9, #32
 8006206:	468a      	mov	sl, r1
 8006208:	f04f 0c00 	mov.w	ip, #0
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	fa02 f209 	lsl.w	r2, r2, r9
 8006212:	ea42 020c 	orr.w	r2, r2, ip
 8006216:	f84a 2b04 	str.w	r2, [sl], #4
 800621a:	f853 2b04 	ldr.w	r2, [r3], #4
 800621e:	4298      	cmp	r0, r3
 8006220:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006224:	d8f2      	bhi.n	800620c <__lshift+0x70>
 8006226:	1b03      	subs	r3, r0, r4
 8006228:	3b15      	subs	r3, #21
 800622a:	f023 0303 	bic.w	r3, r3, #3
 800622e:	3304      	adds	r3, #4
 8006230:	f104 0215 	add.w	r2, r4, #21
 8006234:	4290      	cmp	r0, r2
 8006236:	bf38      	it	cc
 8006238:	2304      	movcc	r3, #4
 800623a:	f841 c003 	str.w	ip, [r1, r3]
 800623e:	f1bc 0f00 	cmp.w	ip, #0
 8006242:	d001      	beq.n	8006248 <__lshift+0xac>
 8006244:	f108 0602 	add.w	r6, r8, #2
 8006248:	3e01      	subs	r6, #1
 800624a:	4638      	mov	r0, r7
 800624c:	612e      	str	r6, [r5, #16]
 800624e:	4621      	mov	r1, r4
 8006250:	f7ff fdd2 	bl	8005df8 <_Bfree>
 8006254:	4628      	mov	r0, r5
 8006256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800625a:	f842 0f04 	str.w	r0, [r2, #4]!
 800625e:	3301      	adds	r3, #1
 8006260:	e7c1      	b.n	80061e6 <__lshift+0x4a>
 8006262:	3904      	subs	r1, #4
 8006264:	f853 2b04 	ldr.w	r2, [r3], #4
 8006268:	f841 2f04 	str.w	r2, [r1, #4]!
 800626c:	4298      	cmp	r0, r3
 800626e:	d8f9      	bhi.n	8006264 <__lshift+0xc8>
 8006270:	e7ea      	b.n	8006248 <__lshift+0xac>
 8006272:	bf00      	nop
 8006274:	0800765b 	.word	0x0800765b
 8006278:	0800766c 	.word	0x0800766c

0800627c <__mcmp>:
 800627c:	b530      	push	{r4, r5, lr}
 800627e:	6902      	ldr	r2, [r0, #16]
 8006280:	690c      	ldr	r4, [r1, #16]
 8006282:	1b12      	subs	r2, r2, r4
 8006284:	d10e      	bne.n	80062a4 <__mcmp+0x28>
 8006286:	f100 0314 	add.w	r3, r0, #20
 800628a:	3114      	adds	r1, #20
 800628c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006290:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006294:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006298:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800629c:	42a5      	cmp	r5, r4
 800629e:	d003      	beq.n	80062a8 <__mcmp+0x2c>
 80062a0:	d305      	bcc.n	80062ae <__mcmp+0x32>
 80062a2:	2201      	movs	r2, #1
 80062a4:	4610      	mov	r0, r2
 80062a6:	bd30      	pop	{r4, r5, pc}
 80062a8:	4283      	cmp	r3, r0
 80062aa:	d3f3      	bcc.n	8006294 <__mcmp+0x18>
 80062ac:	e7fa      	b.n	80062a4 <__mcmp+0x28>
 80062ae:	f04f 32ff 	mov.w	r2, #4294967295
 80062b2:	e7f7      	b.n	80062a4 <__mcmp+0x28>

080062b4 <__mdiff>:
 80062b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b8:	460c      	mov	r4, r1
 80062ba:	4606      	mov	r6, r0
 80062bc:	4611      	mov	r1, r2
 80062be:	4620      	mov	r0, r4
 80062c0:	4690      	mov	r8, r2
 80062c2:	f7ff ffdb 	bl	800627c <__mcmp>
 80062c6:	1e05      	subs	r5, r0, #0
 80062c8:	d110      	bne.n	80062ec <__mdiff+0x38>
 80062ca:	4629      	mov	r1, r5
 80062cc:	4630      	mov	r0, r6
 80062ce:	f7ff fd53 	bl	8005d78 <_Balloc>
 80062d2:	b930      	cbnz	r0, 80062e2 <__mdiff+0x2e>
 80062d4:	4b3a      	ldr	r3, [pc, #232]	; (80063c0 <__mdiff+0x10c>)
 80062d6:	4602      	mov	r2, r0
 80062d8:	f240 2132 	movw	r1, #562	; 0x232
 80062dc:	4839      	ldr	r0, [pc, #228]	; (80063c4 <__mdiff+0x110>)
 80062de:	f000 fb31 	bl	8006944 <__assert_func>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ec:	bfa4      	itt	ge
 80062ee:	4643      	movge	r3, r8
 80062f0:	46a0      	movge	r8, r4
 80062f2:	4630      	mov	r0, r6
 80062f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80062f8:	bfa6      	itte	ge
 80062fa:	461c      	movge	r4, r3
 80062fc:	2500      	movge	r5, #0
 80062fe:	2501      	movlt	r5, #1
 8006300:	f7ff fd3a 	bl	8005d78 <_Balloc>
 8006304:	b920      	cbnz	r0, 8006310 <__mdiff+0x5c>
 8006306:	4b2e      	ldr	r3, [pc, #184]	; (80063c0 <__mdiff+0x10c>)
 8006308:	4602      	mov	r2, r0
 800630a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800630e:	e7e5      	b.n	80062dc <__mdiff+0x28>
 8006310:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006314:	6926      	ldr	r6, [r4, #16]
 8006316:	60c5      	str	r5, [r0, #12]
 8006318:	f104 0914 	add.w	r9, r4, #20
 800631c:	f108 0514 	add.w	r5, r8, #20
 8006320:	f100 0e14 	add.w	lr, r0, #20
 8006324:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006328:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800632c:	f108 0210 	add.w	r2, r8, #16
 8006330:	46f2      	mov	sl, lr
 8006332:	2100      	movs	r1, #0
 8006334:	f859 3b04 	ldr.w	r3, [r9], #4
 8006338:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800633c:	fa1f f883 	uxth.w	r8, r3
 8006340:	fa11 f18b 	uxtah	r1, r1, fp
 8006344:	0c1b      	lsrs	r3, r3, #16
 8006346:	eba1 0808 	sub.w	r8, r1, r8
 800634a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800634e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006352:	fa1f f888 	uxth.w	r8, r8
 8006356:	1419      	asrs	r1, r3, #16
 8006358:	454e      	cmp	r6, r9
 800635a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800635e:	f84a 3b04 	str.w	r3, [sl], #4
 8006362:	d8e7      	bhi.n	8006334 <__mdiff+0x80>
 8006364:	1b33      	subs	r3, r6, r4
 8006366:	3b15      	subs	r3, #21
 8006368:	f023 0303 	bic.w	r3, r3, #3
 800636c:	3304      	adds	r3, #4
 800636e:	3415      	adds	r4, #21
 8006370:	42a6      	cmp	r6, r4
 8006372:	bf38      	it	cc
 8006374:	2304      	movcc	r3, #4
 8006376:	441d      	add	r5, r3
 8006378:	4473      	add	r3, lr
 800637a:	469e      	mov	lr, r3
 800637c:	462e      	mov	r6, r5
 800637e:	4566      	cmp	r6, ip
 8006380:	d30e      	bcc.n	80063a0 <__mdiff+0xec>
 8006382:	f10c 0203 	add.w	r2, ip, #3
 8006386:	1b52      	subs	r2, r2, r5
 8006388:	f022 0203 	bic.w	r2, r2, #3
 800638c:	3d03      	subs	r5, #3
 800638e:	45ac      	cmp	ip, r5
 8006390:	bf38      	it	cc
 8006392:	2200      	movcc	r2, #0
 8006394:	441a      	add	r2, r3
 8006396:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800639a:	b17b      	cbz	r3, 80063bc <__mdiff+0x108>
 800639c:	6107      	str	r7, [r0, #16]
 800639e:	e7a3      	b.n	80062e8 <__mdiff+0x34>
 80063a0:	f856 8b04 	ldr.w	r8, [r6], #4
 80063a4:	fa11 f288 	uxtah	r2, r1, r8
 80063a8:	1414      	asrs	r4, r2, #16
 80063aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80063ae:	b292      	uxth	r2, r2
 80063b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80063b4:	f84e 2b04 	str.w	r2, [lr], #4
 80063b8:	1421      	asrs	r1, r4, #16
 80063ba:	e7e0      	b.n	800637e <__mdiff+0xca>
 80063bc:	3f01      	subs	r7, #1
 80063be:	e7ea      	b.n	8006396 <__mdiff+0xe2>
 80063c0:	0800765b 	.word	0x0800765b
 80063c4:	0800766c 	.word	0x0800766c

080063c8 <__d2b>:
 80063c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063cc:	4689      	mov	r9, r1
 80063ce:	2101      	movs	r1, #1
 80063d0:	ec57 6b10 	vmov	r6, r7, d0
 80063d4:	4690      	mov	r8, r2
 80063d6:	f7ff fccf 	bl	8005d78 <_Balloc>
 80063da:	4604      	mov	r4, r0
 80063dc:	b930      	cbnz	r0, 80063ec <__d2b+0x24>
 80063de:	4602      	mov	r2, r0
 80063e0:	4b25      	ldr	r3, [pc, #148]	; (8006478 <__d2b+0xb0>)
 80063e2:	4826      	ldr	r0, [pc, #152]	; (800647c <__d2b+0xb4>)
 80063e4:	f240 310a 	movw	r1, #778	; 0x30a
 80063e8:	f000 faac 	bl	8006944 <__assert_func>
 80063ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80063f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80063f4:	bb35      	cbnz	r5, 8006444 <__d2b+0x7c>
 80063f6:	2e00      	cmp	r6, #0
 80063f8:	9301      	str	r3, [sp, #4]
 80063fa:	d028      	beq.n	800644e <__d2b+0x86>
 80063fc:	4668      	mov	r0, sp
 80063fe:	9600      	str	r6, [sp, #0]
 8006400:	f7ff fd82 	bl	8005f08 <__lo0bits>
 8006404:	9900      	ldr	r1, [sp, #0]
 8006406:	b300      	cbz	r0, 800644a <__d2b+0x82>
 8006408:	9a01      	ldr	r2, [sp, #4]
 800640a:	f1c0 0320 	rsb	r3, r0, #32
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	430b      	orrs	r3, r1
 8006414:	40c2      	lsrs	r2, r0
 8006416:	6163      	str	r3, [r4, #20]
 8006418:	9201      	str	r2, [sp, #4]
 800641a:	9b01      	ldr	r3, [sp, #4]
 800641c:	61a3      	str	r3, [r4, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	bf14      	ite	ne
 8006422:	2202      	movne	r2, #2
 8006424:	2201      	moveq	r2, #1
 8006426:	6122      	str	r2, [r4, #16]
 8006428:	b1d5      	cbz	r5, 8006460 <__d2b+0x98>
 800642a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800642e:	4405      	add	r5, r0
 8006430:	f8c9 5000 	str.w	r5, [r9]
 8006434:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006438:	f8c8 0000 	str.w	r0, [r8]
 800643c:	4620      	mov	r0, r4
 800643e:	b003      	add	sp, #12
 8006440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006448:	e7d5      	b.n	80063f6 <__d2b+0x2e>
 800644a:	6161      	str	r1, [r4, #20]
 800644c:	e7e5      	b.n	800641a <__d2b+0x52>
 800644e:	a801      	add	r0, sp, #4
 8006450:	f7ff fd5a 	bl	8005f08 <__lo0bits>
 8006454:	9b01      	ldr	r3, [sp, #4]
 8006456:	6163      	str	r3, [r4, #20]
 8006458:	2201      	movs	r2, #1
 800645a:	6122      	str	r2, [r4, #16]
 800645c:	3020      	adds	r0, #32
 800645e:	e7e3      	b.n	8006428 <__d2b+0x60>
 8006460:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006464:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006468:	f8c9 0000 	str.w	r0, [r9]
 800646c:	6918      	ldr	r0, [r3, #16]
 800646e:	f7ff fd2b 	bl	8005ec8 <__hi0bits>
 8006472:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006476:	e7df      	b.n	8006438 <__d2b+0x70>
 8006478:	0800765b 	.word	0x0800765b
 800647c:	0800766c 	.word	0x0800766c

08006480 <_calloc_r>:
 8006480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006482:	fba1 2402 	umull	r2, r4, r1, r2
 8006486:	b94c      	cbnz	r4, 800649c <_calloc_r+0x1c>
 8006488:	4611      	mov	r1, r2
 800648a:	9201      	str	r2, [sp, #4]
 800648c:	f000 f87a 	bl	8006584 <_malloc_r>
 8006490:	9a01      	ldr	r2, [sp, #4]
 8006492:	4605      	mov	r5, r0
 8006494:	b930      	cbnz	r0, 80064a4 <_calloc_r+0x24>
 8006496:	4628      	mov	r0, r5
 8006498:	b003      	add	sp, #12
 800649a:	bd30      	pop	{r4, r5, pc}
 800649c:	220c      	movs	r2, #12
 800649e:	6002      	str	r2, [r0, #0]
 80064a0:	2500      	movs	r5, #0
 80064a2:	e7f8      	b.n	8006496 <_calloc_r+0x16>
 80064a4:	4621      	mov	r1, r4
 80064a6:	f7fe f92d 	bl	8004704 <memset>
 80064aa:	e7f4      	b.n	8006496 <_calloc_r+0x16>

080064ac <_free_r>:
 80064ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064ae:	2900      	cmp	r1, #0
 80064b0:	d044      	beq.n	800653c <_free_r+0x90>
 80064b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064b6:	9001      	str	r0, [sp, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f1a1 0404 	sub.w	r4, r1, #4
 80064be:	bfb8      	it	lt
 80064c0:	18e4      	addlt	r4, r4, r3
 80064c2:	f000 fa9b 	bl	80069fc <__malloc_lock>
 80064c6:	4a1e      	ldr	r2, [pc, #120]	; (8006540 <_free_r+0x94>)
 80064c8:	9801      	ldr	r0, [sp, #4]
 80064ca:	6813      	ldr	r3, [r2, #0]
 80064cc:	b933      	cbnz	r3, 80064dc <_free_r+0x30>
 80064ce:	6063      	str	r3, [r4, #4]
 80064d0:	6014      	str	r4, [r2, #0]
 80064d2:	b003      	add	sp, #12
 80064d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064d8:	f000 ba96 	b.w	8006a08 <__malloc_unlock>
 80064dc:	42a3      	cmp	r3, r4
 80064de:	d908      	bls.n	80064f2 <_free_r+0x46>
 80064e0:	6825      	ldr	r5, [r4, #0]
 80064e2:	1961      	adds	r1, r4, r5
 80064e4:	428b      	cmp	r3, r1
 80064e6:	bf01      	itttt	eq
 80064e8:	6819      	ldreq	r1, [r3, #0]
 80064ea:	685b      	ldreq	r3, [r3, #4]
 80064ec:	1949      	addeq	r1, r1, r5
 80064ee:	6021      	streq	r1, [r4, #0]
 80064f0:	e7ed      	b.n	80064ce <_free_r+0x22>
 80064f2:	461a      	mov	r2, r3
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	b10b      	cbz	r3, 80064fc <_free_r+0x50>
 80064f8:	42a3      	cmp	r3, r4
 80064fa:	d9fa      	bls.n	80064f2 <_free_r+0x46>
 80064fc:	6811      	ldr	r1, [r2, #0]
 80064fe:	1855      	adds	r5, r2, r1
 8006500:	42a5      	cmp	r5, r4
 8006502:	d10b      	bne.n	800651c <_free_r+0x70>
 8006504:	6824      	ldr	r4, [r4, #0]
 8006506:	4421      	add	r1, r4
 8006508:	1854      	adds	r4, r2, r1
 800650a:	42a3      	cmp	r3, r4
 800650c:	6011      	str	r1, [r2, #0]
 800650e:	d1e0      	bne.n	80064d2 <_free_r+0x26>
 8006510:	681c      	ldr	r4, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	6053      	str	r3, [r2, #4]
 8006516:	4421      	add	r1, r4
 8006518:	6011      	str	r1, [r2, #0]
 800651a:	e7da      	b.n	80064d2 <_free_r+0x26>
 800651c:	d902      	bls.n	8006524 <_free_r+0x78>
 800651e:	230c      	movs	r3, #12
 8006520:	6003      	str	r3, [r0, #0]
 8006522:	e7d6      	b.n	80064d2 <_free_r+0x26>
 8006524:	6825      	ldr	r5, [r4, #0]
 8006526:	1961      	adds	r1, r4, r5
 8006528:	428b      	cmp	r3, r1
 800652a:	bf04      	itt	eq
 800652c:	6819      	ldreq	r1, [r3, #0]
 800652e:	685b      	ldreq	r3, [r3, #4]
 8006530:	6063      	str	r3, [r4, #4]
 8006532:	bf04      	itt	eq
 8006534:	1949      	addeq	r1, r1, r5
 8006536:	6021      	streq	r1, [r4, #0]
 8006538:	6054      	str	r4, [r2, #4]
 800653a:	e7ca      	b.n	80064d2 <_free_r+0x26>
 800653c:	b003      	add	sp, #12
 800653e:	bd30      	pop	{r4, r5, pc}
 8006540:	200002dc 	.word	0x200002dc

08006544 <sbrk_aligned>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	4e0e      	ldr	r6, [pc, #56]	; (8006580 <sbrk_aligned+0x3c>)
 8006548:	460c      	mov	r4, r1
 800654a:	6831      	ldr	r1, [r6, #0]
 800654c:	4605      	mov	r5, r0
 800654e:	b911      	cbnz	r1, 8006556 <sbrk_aligned+0x12>
 8006550:	f000 f9e8 	bl	8006924 <_sbrk_r>
 8006554:	6030      	str	r0, [r6, #0]
 8006556:	4621      	mov	r1, r4
 8006558:	4628      	mov	r0, r5
 800655a:	f000 f9e3 	bl	8006924 <_sbrk_r>
 800655e:	1c43      	adds	r3, r0, #1
 8006560:	d00a      	beq.n	8006578 <sbrk_aligned+0x34>
 8006562:	1cc4      	adds	r4, r0, #3
 8006564:	f024 0403 	bic.w	r4, r4, #3
 8006568:	42a0      	cmp	r0, r4
 800656a:	d007      	beq.n	800657c <sbrk_aligned+0x38>
 800656c:	1a21      	subs	r1, r4, r0
 800656e:	4628      	mov	r0, r5
 8006570:	f000 f9d8 	bl	8006924 <_sbrk_r>
 8006574:	3001      	adds	r0, #1
 8006576:	d101      	bne.n	800657c <sbrk_aligned+0x38>
 8006578:	f04f 34ff 	mov.w	r4, #4294967295
 800657c:	4620      	mov	r0, r4
 800657e:	bd70      	pop	{r4, r5, r6, pc}
 8006580:	200002e0 	.word	0x200002e0

08006584 <_malloc_r>:
 8006584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006588:	1ccd      	adds	r5, r1, #3
 800658a:	f025 0503 	bic.w	r5, r5, #3
 800658e:	3508      	adds	r5, #8
 8006590:	2d0c      	cmp	r5, #12
 8006592:	bf38      	it	cc
 8006594:	250c      	movcc	r5, #12
 8006596:	2d00      	cmp	r5, #0
 8006598:	4607      	mov	r7, r0
 800659a:	db01      	blt.n	80065a0 <_malloc_r+0x1c>
 800659c:	42a9      	cmp	r1, r5
 800659e:	d905      	bls.n	80065ac <_malloc_r+0x28>
 80065a0:	230c      	movs	r3, #12
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	2600      	movs	r6, #0
 80065a6:	4630      	mov	r0, r6
 80065a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ac:	4e2e      	ldr	r6, [pc, #184]	; (8006668 <_malloc_r+0xe4>)
 80065ae:	f000 fa25 	bl	80069fc <__malloc_lock>
 80065b2:	6833      	ldr	r3, [r6, #0]
 80065b4:	461c      	mov	r4, r3
 80065b6:	bb34      	cbnz	r4, 8006606 <_malloc_r+0x82>
 80065b8:	4629      	mov	r1, r5
 80065ba:	4638      	mov	r0, r7
 80065bc:	f7ff ffc2 	bl	8006544 <sbrk_aligned>
 80065c0:	1c43      	adds	r3, r0, #1
 80065c2:	4604      	mov	r4, r0
 80065c4:	d14d      	bne.n	8006662 <_malloc_r+0xde>
 80065c6:	6834      	ldr	r4, [r6, #0]
 80065c8:	4626      	mov	r6, r4
 80065ca:	2e00      	cmp	r6, #0
 80065cc:	d140      	bne.n	8006650 <_malloc_r+0xcc>
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	4631      	mov	r1, r6
 80065d2:	4638      	mov	r0, r7
 80065d4:	eb04 0803 	add.w	r8, r4, r3
 80065d8:	f000 f9a4 	bl	8006924 <_sbrk_r>
 80065dc:	4580      	cmp	r8, r0
 80065de:	d13a      	bne.n	8006656 <_malloc_r+0xd2>
 80065e0:	6821      	ldr	r1, [r4, #0]
 80065e2:	3503      	adds	r5, #3
 80065e4:	1a6d      	subs	r5, r5, r1
 80065e6:	f025 0503 	bic.w	r5, r5, #3
 80065ea:	3508      	adds	r5, #8
 80065ec:	2d0c      	cmp	r5, #12
 80065ee:	bf38      	it	cc
 80065f0:	250c      	movcc	r5, #12
 80065f2:	4629      	mov	r1, r5
 80065f4:	4638      	mov	r0, r7
 80065f6:	f7ff ffa5 	bl	8006544 <sbrk_aligned>
 80065fa:	3001      	adds	r0, #1
 80065fc:	d02b      	beq.n	8006656 <_malloc_r+0xd2>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	442b      	add	r3, r5
 8006602:	6023      	str	r3, [r4, #0]
 8006604:	e00e      	b.n	8006624 <_malloc_r+0xa0>
 8006606:	6822      	ldr	r2, [r4, #0]
 8006608:	1b52      	subs	r2, r2, r5
 800660a:	d41e      	bmi.n	800664a <_malloc_r+0xc6>
 800660c:	2a0b      	cmp	r2, #11
 800660e:	d916      	bls.n	800663e <_malloc_r+0xba>
 8006610:	1961      	adds	r1, r4, r5
 8006612:	42a3      	cmp	r3, r4
 8006614:	6025      	str	r5, [r4, #0]
 8006616:	bf18      	it	ne
 8006618:	6059      	strne	r1, [r3, #4]
 800661a:	6863      	ldr	r3, [r4, #4]
 800661c:	bf08      	it	eq
 800661e:	6031      	streq	r1, [r6, #0]
 8006620:	5162      	str	r2, [r4, r5]
 8006622:	604b      	str	r3, [r1, #4]
 8006624:	4638      	mov	r0, r7
 8006626:	f104 060b 	add.w	r6, r4, #11
 800662a:	f000 f9ed 	bl	8006a08 <__malloc_unlock>
 800662e:	f026 0607 	bic.w	r6, r6, #7
 8006632:	1d23      	adds	r3, r4, #4
 8006634:	1af2      	subs	r2, r6, r3
 8006636:	d0b6      	beq.n	80065a6 <_malloc_r+0x22>
 8006638:	1b9b      	subs	r3, r3, r6
 800663a:	50a3      	str	r3, [r4, r2]
 800663c:	e7b3      	b.n	80065a6 <_malloc_r+0x22>
 800663e:	6862      	ldr	r2, [r4, #4]
 8006640:	42a3      	cmp	r3, r4
 8006642:	bf0c      	ite	eq
 8006644:	6032      	streq	r2, [r6, #0]
 8006646:	605a      	strne	r2, [r3, #4]
 8006648:	e7ec      	b.n	8006624 <_malloc_r+0xa0>
 800664a:	4623      	mov	r3, r4
 800664c:	6864      	ldr	r4, [r4, #4]
 800664e:	e7b2      	b.n	80065b6 <_malloc_r+0x32>
 8006650:	4634      	mov	r4, r6
 8006652:	6876      	ldr	r6, [r6, #4]
 8006654:	e7b9      	b.n	80065ca <_malloc_r+0x46>
 8006656:	230c      	movs	r3, #12
 8006658:	603b      	str	r3, [r7, #0]
 800665a:	4638      	mov	r0, r7
 800665c:	f000 f9d4 	bl	8006a08 <__malloc_unlock>
 8006660:	e7a1      	b.n	80065a6 <_malloc_r+0x22>
 8006662:	6025      	str	r5, [r4, #0]
 8006664:	e7de      	b.n	8006624 <_malloc_r+0xa0>
 8006666:	bf00      	nop
 8006668:	200002dc 	.word	0x200002dc

0800666c <__ssputs_r>:
 800666c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006670:	688e      	ldr	r6, [r1, #8]
 8006672:	429e      	cmp	r6, r3
 8006674:	4682      	mov	sl, r0
 8006676:	460c      	mov	r4, r1
 8006678:	4690      	mov	r8, r2
 800667a:	461f      	mov	r7, r3
 800667c:	d838      	bhi.n	80066f0 <__ssputs_r+0x84>
 800667e:	898a      	ldrh	r2, [r1, #12]
 8006680:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006684:	d032      	beq.n	80066ec <__ssputs_r+0x80>
 8006686:	6825      	ldr	r5, [r4, #0]
 8006688:	6909      	ldr	r1, [r1, #16]
 800668a:	eba5 0901 	sub.w	r9, r5, r1
 800668e:	6965      	ldr	r5, [r4, #20]
 8006690:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006694:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006698:	3301      	adds	r3, #1
 800669a:	444b      	add	r3, r9
 800669c:	106d      	asrs	r5, r5, #1
 800669e:	429d      	cmp	r5, r3
 80066a0:	bf38      	it	cc
 80066a2:	461d      	movcc	r5, r3
 80066a4:	0553      	lsls	r3, r2, #21
 80066a6:	d531      	bpl.n	800670c <__ssputs_r+0xa0>
 80066a8:	4629      	mov	r1, r5
 80066aa:	f7ff ff6b 	bl	8006584 <_malloc_r>
 80066ae:	4606      	mov	r6, r0
 80066b0:	b950      	cbnz	r0, 80066c8 <__ssputs_r+0x5c>
 80066b2:	230c      	movs	r3, #12
 80066b4:	f8ca 3000 	str.w	r3, [sl]
 80066b8:	89a3      	ldrh	r3, [r4, #12]
 80066ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066be:	81a3      	strh	r3, [r4, #12]
 80066c0:	f04f 30ff 	mov.w	r0, #4294967295
 80066c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c8:	6921      	ldr	r1, [r4, #16]
 80066ca:	464a      	mov	r2, r9
 80066cc:	f7ff fb46 	bl	8005d5c <memcpy>
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066da:	81a3      	strh	r3, [r4, #12]
 80066dc:	6126      	str	r6, [r4, #16]
 80066de:	6165      	str	r5, [r4, #20]
 80066e0:	444e      	add	r6, r9
 80066e2:	eba5 0509 	sub.w	r5, r5, r9
 80066e6:	6026      	str	r6, [r4, #0]
 80066e8:	60a5      	str	r5, [r4, #8]
 80066ea:	463e      	mov	r6, r7
 80066ec:	42be      	cmp	r6, r7
 80066ee:	d900      	bls.n	80066f2 <__ssputs_r+0x86>
 80066f0:	463e      	mov	r6, r7
 80066f2:	6820      	ldr	r0, [r4, #0]
 80066f4:	4632      	mov	r2, r6
 80066f6:	4641      	mov	r1, r8
 80066f8:	f000 f966 	bl	80069c8 <memmove>
 80066fc:	68a3      	ldr	r3, [r4, #8]
 80066fe:	1b9b      	subs	r3, r3, r6
 8006700:	60a3      	str	r3, [r4, #8]
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	4433      	add	r3, r6
 8006706:	6023      	str	r3, [r4, #0]
 8006708:	2000      	movs	r0, #0
 800670a:	e7db      	b.n	80066c4 <__ssputs_r+0x58>
 800670c:	462a      	mov	r2, r5
 800670e:	f000 f981 	bl	8006a14 <_realloc_r>
 8006712:	4606      	mov	r6, r0
 8006714:	2800      	cmp	r0, #0
 8006716:	d1e1      	bne.n	80066dc <__ssputs_r+0x70>
 8006718:	6921      	ldr	r1, [r4, #16]
 800671a:	4650      	mov	r0, sl
 800671c:	f7ff fec6 	bl	80064ac <_free_r>
 8006720:	e7c7      	b.n	80066b2 <__ssputs_r+0x46>
	...

08006724 <_svfiprintf_r>:
 8006724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006728:	4698      	mov	r8, r3
 800672a:	898b      	ldrh	r3, [r1, #12]
 800672c:	061b      	lsls	r3, r3, #24
 800672e:	b09d      	sub	sp, #116	; 0x74
 8006730:	4607      	mov	r7, r0
 8006732:	460d      	mov	r5, r1
 8006734:	4614      	mov	r4, r2
 8006736:	d50e      	bpl.n	8006756 <_svfiprintf_r+0x32>
 8006738:	690b      	ldr	r3, [r1, #16]
 800673a:	b963      	cbnz	r3, 8006756 <_svfiprintf_r+0x32>
 800673c:	2140      	movs	r1, #64	; 0x40
 800673e:	f7ff ff21 	bl	8006584 <_malloc_r>
 8006742:	6028      	str	r0, [r5, #0]
 8006744:	6128      	str	r0, [r5, #16]
 8006746:	b920      	cbnz	r0, 8006752 <_svfiprintf_r+0x2e>
 8006748:	230c      	movs	r3, #12
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	f04f 30ff 	mov.w	r0, #4294967295
 8006750:	e0d1      	b.n	80068f6 <_svfiprintf_r+0x1d2>
 8006752:	2340      	movs	r3, #64	; 0x40
 8006754:	616b      	str	r3, [r5, #20]
 8006756:	2300      	movs	r3, #0
 8006758:	9309      	str	r3, [sp, #36]	; 0x24
 800675a:	2320      	movs	r3, #32
 800675c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006760:	f8cd 800c 	str.w	r8, [sp, #12]
 8006764:	2330      	movs	r3, #48	; 0x30
 8006766:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006910 <_svfiprintf_r+0x1ec>
 800676a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800676e:	f04f 0901 	mov.w	r9, #1
 8006772:	4623      	mov	r3, r4
 8006774:	469a      	mov	sl, r3
 8006776:	f813 2b01 	ldrb.w	r2, [r3], #1
 800677a:	b10a      	cbz	r2, 8006780 <_svfiprintf_r+0x5c>
 800677c:	2a25      	cmp	r2, #37	; 0x25
 800677e:	d1f9      	bne.n	8006774 <_svfiprintf_r+0x50>
 8006780:	ebba 0b04 	subs.w	fp, sl, r4
 8006784:	d00b      	beq.n	800679e <_svfiprintf_r+0x7a>
 8006786:	465b      	mov	r3, fp
 8006788:	4622      	mov	r2, r4
 800678a:	4629      	mov	r1, r5
 800678c:	4638      	mov	r0, r7
 800678e:	f7ff ff6d 	bl	800666c <__ssputs_r>
 8006792:	3001      	adds	r0, #1
 8006794:	f000 80aa 	beq.w	80068ec <_svfiprintf_r+0x1c8>
 8006798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800679a:	445a      	add	r2, fp
 800679c:	9209      	str	r2, [sp, #36]	; 0x24
 800679e:	f89a 3000 	ldrb.w	r3, [sl]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 80a2 	beq.w	80068ec <_svfiprintf_r+0x1c8>
 80067a8:	2300      	movs	r3, #0
 80067aa:	f04f 32ff 	mov.w	r2, #4294967295
 80067ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067b2:	f10a 0a01 	add.w	sl, sl, #1
 80067b6:	9304      	str	r3, [sp, #16]
 80067b8:	9307      	str	r3, [sp, #28]
 80067ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067be:	931a      	str	r3, [sp, #104]	; 0x68
 80067c0:	4654      	mov	r4, sl
 80067c2:	2205      	movs	r2, #5
 80067c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c8:	4851      	ldr	r0, [pc, #324]	; (8006910 <_svfiprintf_r+0x1ec>)
 80067ca:	f7f9 fd31 	bl	8000230 <memchr>
 80067ce:	9a04      	ldr	r2, [sp, #16]
 80067d0:	b9d8      	cbnz	r0, 800680a <_svfiprintf_r+0xe6>
 80067d2:	06d0      	lsls	r0, r2, #27
 80067d4:	bf44      	itt	mi
 80067d6:	2320      	movmi	r3, #32
 80067d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067dc:	0711      	lsls	r1, r2, #28
 80067de:	bf44      	itt	mi
 80067e0:	232b      	movmi	r3, #43	; 0x2b
 80067e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067e6:	f89a 3000 	ldrb.w	r3, [sl]
 80067ea:	2b2a      	cmp	r3, #42	; 0x2a
 80067ec:	d015      	beq.n	800681a <_svfiprintf_r+0xf6>
 80067ee:	9a07      	ldr	r2, [sp, #28]
 80067f0:	4654      	mov	r4, sl
 80067f2:	2000      	movs	r0, #0
 80067f4:	f04f 0c0a 	mov.w	ip, #10
 80067f8:	4621      	mov	r1, r4
 80067fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067fe:	3b30      	subs	r3, #48	; 0x30
 8006800:	2b09      	cmp	r3, #9
 8006802:	d94e      	bls.n	80068a2 <_svfiprintf_r+0x17e>
 8006804:	b1b0      	cbz	r0, 8006834 <_svfiprintf_r+0x110>
 8006806:	9207      	str	r2, [sp, #28]
 8006808:	e014      	b.n	8006834 <_svfiprintf_r+0x110>
 800680a:	eba0 0308 	sub.w	r3, r0, r8
 800680e:	fa09 f303 	lsl.w	r3, r9, r3
 8006812:	4313      	orrs	r3, r2
 8006814:	9304      	str	r3, [sp, #16]
 8006816:	46a2      	mov	sl, r4
 8006818:	e7d2      	b.n	80067c0 <_svfiprintf_r+0x9c>
 800681a:	9b03      	ldr	r3, [sp, #12]
 800681c:	1d19      	adds	r1, r3, #4
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	9103      	str	r1, [sp, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	bfbb      	ittet	lt
 8006826:	425b      	neglt	r3, r3
 8006828:	f042 0202 	orrlt.w	r2, r2, #2
 800682c:	9307      	strge	r3, [sp, #28]
 800682e:	9307      	strlt	r3, [sp, #28]
 8006830:	bfb8      	it	lt
 8006832:	9204      	strlt	r2, [sp, #16]
 8006834:	7823      	ldrb	r3, [r4, #0]
 8006836:	2b2e      	cmp	r3, #46	; 0x2e
 8006838:	d10c      	bne.n	8006854 <_svfiprintf_r+0x130>
 800683a:	7863      	ldrb	r3, [r4, #1]
 800683c:	2b2a      	cmp	r3, #42	; 0x2a
 800683e:	d135      	bne.n	80068ac <_svfiprintf_r+0x188>
 8006840:	9b03      	ldr	r3, [sp, #12]
 8006842:	1d1a      	adds	r2, r3, #4
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	9203      	str	r2, [sp, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	bfb8      	it	lt
 800684c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006850:	3402      	adds	r4, #2
 8006852:	9305      	str	r3, [sp, #20]
 8006854:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006920 <_svfiprintf_r+0x1fc>
 8006858:	7821      	ldrb	r1, [r4, #0]
 800685a:	2203      	movs	r2, #3
 800685c:	4650      	mov	r0, sl
 800685e:	f7f9 fce7 	bl	8000230 <memchr>
 8006862:	b140      	cbz	r0, 8006876 <_svfiprintf_r+0x152>
 8006864:	2340      	movs	r3, #64	; 0x40
 8006866:	eba0 000a 	sub.w	r0, r0, sl
 800686a:	fa03 f000 	lsl.w	r0, r3, r0
 800686e:	9b04      	ldr	r3, [sp, #16]
 8006870:	4303      	orrs	r3, r0
 8006872:	3401      	adds	r4, #1
 8006874:	9304      	str	r3, [sp, #16]
 8006876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800687a:	4826      	ldr	r0, [pc, #152]	; (8006914 <_svfiprintf_r+0x1f0>)
 800687c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006880:	2206      	movs	r2, #6
 8006882:	f7f9 fcd5 	bl	8000230 <memchr>
 8006886:	2800      	cmp	r0, #0
 8006888:	d038      	beq.n	80068fc <_svfiprintf_r+0x1d8>
 800688a:	4b23      	ldr	r3, [pc, #140]	; (8006918 <_svfiprintf_r+0x1f4>)
 800688c:	bb1b      	cbnz	r3, 80068d6 <_svfiprintf_r+0x1b2>
 800688e:	9b03      	ldr	r3, [sp, #12]
 8006890:	3307      	adds	r3, #7
 8006892:	f023 0307 	bic.w	r3, r3, #7
 8006896:	3308      	adds	r3, #8
 8006898:	9303      	str	r3, [sp, #12]
 800689a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800689c:	4433      	add	r3, r6
 800689e:	9309      	str	r3, [sp, #36]	; 0x24
 80068a0:	e767      	b.n	8006772 <_svfiprintf_r+0x4e>
 80068a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80068a6:	460c      	mov	r4, r1
 80068a8:	2001      	movs	r0, #1
 80068aa:	e7a5      	b.n	80067f8 <_svfiprintf_r+0xd4>
 80068ac:	2300      	movs	r3, #0
 80068ae:	3401      	adds	r4, #1
 80068b0:	9305      	str	r3, [sp, #20]
 80068b2:	4619      	mov	r1, r3
 80068b4:	f04f 0c0a 	mov.w	ip, #10
 80068b8:	4620      	mov	r0, r4
 80068ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068be:	3a30      	subs	r2, #48	; 0x30
 80068c0:	2a09      	cmp	r2, #9
 80068c2:	d903      	bls.n	80068cc <_svfiprintf_r+0x1a8>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0c5      	beq.n	8006854 <_svfiprintf_r+0x130>
 80068c8:	9105      	str	r1, [sp, #20]
 80068ca:	e7c3      	b.n	8006854 <_svfiprintf_r+0x130>
 80068cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80068d0:	4604      	mov	r4, r0
 80068d2:	2301      	movs	r3, #1
 80068d4:	e7f0      	b.n	80068b8 <_svfiprintf_r+0x194>
 80068d6:	ab03      	add	r3, sp, #12
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	462a      	mov	r2, r5
 80068dc:	4b0f      	ldr	r3, [pc, #60]	; (800691c <_svfiprintf_r+0x1f8>)
 80068de:	a904      	add	r1, sp, #16
 80068e0:	4638      	mov	r0, r7
 80068e2:	f7fd ffb7 	bl	8004854 <_printf_float>
 80068e6:	1c42      	adds	r2, r0, #1
 80068e8:	4606      	mov	r6, r0
 80068ea:	d1d6      	bne.n	800689a <_svfiprintf_r+0x176>
 80068ec:	89ab      	ldrh	r3, [r5, #12]
 80068ee:	065b      	lsls	r3, r3, #25
 80068f0:	f53f af2c 	bmi.w	800674c <_svfiprintf_r+0x28>
 80068f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068f6:	b01d      	add	sp, #116	; 0x74
 80068f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fc:	ab03      	add	r3, sp, #12
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	462a      	mov	r2, r5
 8006902:	4b06      	ldr	r3, [pc, #24]	; (800691c <_svfiprintf_r+0x1f8>)
 8006904:	a904      	add	r1, sp, #16
 8006906:	4638      	mov	r0, r7
 8006908:	f7fe fa48 	bl	8004d9c <_printf_i>
 800690c:	e7eb      	b.n	80068e6 <_svfiprintf_r+0x1c2>
 800690e:	bf00      	nop
 8006910:	080077c4 	.word	0x080077c4
 8006914:	080077ce 	.word	0x080077ce
 8006918:	08004855 	.word	0x08004855
 800691c:	0800666d 	.word	0x0800666d
 8006920:	080077ca 	.word	0x080077ca

08006924 <_sbrk_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	4d06      	ldr	r5, [pc, #24]	; (8006940 <_sbrk_r+0x1c>)
 8006928:	2300      	movs	r3, #0
 800692a:	4604      	mov	r4, r0
 800692c:	4608      	mov	r0, r1
 800692e:	602b      	str	r3, [r5, #0]
 8006930:	f7fa ff0e 	bl	8001750 <_sbrk>
 8006934:	1c43      	adds	r3, r0, #1
 8006936:	d102      	bne.n	800693e <_sbrk_r+0x1a>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	b103      	cbz	r3, 800693e <_sbrk_r+0x1a>
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	200002e4 	.word	0x200002e4

08006944 <__assert_func>:
 8006944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006946:	4614      	mov	r4, r2
 8006948:	461a      	mov	r2, r3
 800694a:	4b09      	ldr	r3, [pc, #36]	; (8006970 <__assert_func+0x2c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4605      	mov	r5, r0
 8006950:	68d8      	ldr	r0, [r3, #12]
 8006952:	b14c      	cbz	r4, 8006968 <__assert_func+0x24>
 8006954:	4b07      	ldr	r3, [pc, #28]	; (8006974 <__assert_func+0x30>)
 8006956:	9100      	str	r1, [sp, #0]
 8006958:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800695c:	4906      	ldr	r1, [pc, #24]	; (8006978 <__assert_func+0x34>)
 800695e:	462b      	mov	r3, r5
 8006960:	f000 f80e 	bl	8006980 <fiprintf>
 8006964:	f000 faac 	bl	8006ec0 <abort>
 8006968:	4b04      	ldr	r3, [pc, #16]	; (800697c <__assert_func+0x38>)
 800696a:	461c      	mov	r4, r3
 800696c:	e7f3      	b.n	8006956 <__assert_func+0x12>
 800696e:	bf00      	nop
 8006970:	2000000c 	.word	0x2000000c
 8006974:	080077d5 	.word	0x080077d5
 8006978:	080077e2 	.word	0x080077e2
 800697c:	08007810 	.word	0x08007810

08006980 <fiprintf>:
 8006980:	b40e      	push	{r1, r2, r3}
 8006982:	b503      	push	{r0, r1, lr}
 8006984:	4601      	mov	r1, r0
 8006986:	ab03      	add	r3, sp, #12
 8006988:	4805      	ldr	r0, [pc, #20]	; (80069a0 <fiprintf+0x20>)
 800698a:	f853 2b04 	ldr.w	r2, [r3], #4
 800698e:	6800      	ldr	r0, [r0, #0]
 8006990:	9301      	str	r3, [sp, #4]
 8006992:	f000 f897 	bl	8006ac4 <_vfiprintf_r>
 8006996:	b002      	add	sp, #8
 8006998:	f85d eb04 	ldr.w	lr, [sp], #4
 800699c:	b003      	add	sp, #12
 800699e:	4770      	bx	lr
 80069a0:	2000000c 	.word	0x2000000c

080069a4 <__ascii_mbtowc>:
 80069a4:	b082      	sub	sp, #8
 80069a6:	b901      	cbnz	r1, 80069aa <__ascii_mbtowc+0x6>
 80069a8:	a901      	add	r1, sp, #4
 80069aa:	b142      	cbz	r2, 80069be <__ascii_mbtowc+0x1a>
 80069ac:	b14b      	cbz	r3, 80069c2 <__ascii_mbtowc+0x1e>
 80069ae:	7813      	ldrb	r3, [r2, #0]
 80069b0:	600b      	str	r3, [r1, #0]
 80069b2:	7812      	ldrb	r2, [r2, #0]
 80069b4:	1e10      	subs	r0, r2, #0
 80069b6:	bf18      	it	ne
 80069b8:	2001      	movne	r0, #1
 80069ba:	b002      	add	sp, #8
 80069bc:	4770      	bx	lr
 80069be:	4610      	mov	r0, r2
 80069c0:	e7fb      	b.n	80069ba <__ascii_mbtowc+0x16>
 80069c2:	f06f 0001 	mvn.w	r0, #1
 80069c6:	e7f8      	b.n	80069ba <__ascii_mbtowc+0x16>

080069c8 <memmove>:
 80069c8:	4288      	cmp	r0, r1
 80069ca:	b510      	push	{r4, lr}
 80069cc:	eb01 0402 	add.w	r4, r1, r2
 80069d0:	d902      	bls.n	80069d8 <memmove+0x10>
 80069d2:	4284      	cmp	r4, r0
 80069d4:	4623      	mov	r3, r4
 80069d6:	d807      	bhi.n	80069e8 <memmove+0x20>
 80069d8:	1e43      	subs	r3, r0, #1
 80069da:	42a1      	cmp	r1, r4
 80069dc:	d008      	beq.n	80069f0 <memmove+0x28>
 80069de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069e6:	e7f8      	b.n	80069da <memmove+0x12>
 80069e8:	4402      	add	r2, r0
 80069ea:	4601      	mov	r1, r0
 80069ec:	428a      	cmp	r2, r1
 80069ee:	d100      	bne.n	80069f2 <memmove+0x2a>
 80069f0:	bd10      	pop	{r4, pc}
 80069f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069fa:	e7f7      	b.n	80069ec <memmove+0x24>

080069fc <__malloc_lock>:
 80069fc:	4801      	ldr	r0, [pc, #4]	; (8006a04 <__malloc_lock+0x8>)
 80069fe:	f000 bc1f 	b.w	8007240 <__retarget_lock_acquire_recursive>
 8006a02:	bf00      	nop
 8006a04:	200002e8 	.word	0x200002e8

08006a08 <__malloc_unlock>:
 8006a08:	4801      	ldr	r0, [pc, #4]	; (8006a10 <__malloc_unlock+0x8>)
 8006a0a:	f000 bc1a 	b.w	8007242 <__retarget_lock_release_recursive>
 8006a0e:	bf00      	nop
 8006a10:	200002e8 	.word	0x200002e8

08006a14 <_realloc_r>:
 8006a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a18:	4680      	mov	r8, r0
 8006a1a:	4614      	mov	r4, r2
 8006a1c:	460e      	mov	r6, r1
 8006a1e:	b921      	cbnz	r1, 8006a2a <_realloc_r+0x16>
 8006a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a24:	4611      	mov	r1, r2
 8006a26:	f7ff bdad 	b.w	8006584 <_malloc_r>
 8006a2a:	b92a      	cbnz	r2, 8006a38 <_realloc_r+0x24>
 8006a2c:	f7ff fd3e 	bl	80064ac <_free_r>
 8006a30:	4625      	mov	r5, r4
 8006a32:	4628      	mov	r0, r5
 8006a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a38:	f000 fc6a 	bl	8007310 <_malloc_usable_size_r>
 8006a3c:	4284      	cmp	r4, r0
 8006a3e:	4607      	mov	r7, r0
 8006a40:	d802      	bhi.n	8006a48 <_realloc_r+0x34>
 8006a42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a46:	d812      	bhi.n	8006a6e <_realloc_r+0x5a>
 8006a48:	4621      	mov	r1, r4
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	f7ff fd9a 	bl	8006584 <_malloc_r>
 8006a50:	4605      	mov	r5, r0
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d0ed      	beq.n	8006a32 <_realloc_r+0x1e>
 8006a56:	42bc      	cmp	r4, r7
 8006a58:	4622      	mov	r2, r4
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	bf28      	it	cs
 8006a5e:	463a      	movcs	r2, r7
 8006a60:	f7ff f97c 	bl	8005d5c <memcpy>
 8006a64:	4631      	mov	r1, r6
 8006a66:	4640      	mov	r0, r8
 8006a68:	f7ff fd20 	bl	80064ac <_free_r>
 8006a6c:	e7e1      	b.n	8006a32 <_realloc_r+0x1e>
 8006a6e:	4635      	mov	r5, r6
 8006a70:	e7df      	b.n	8006a32 <_realloc_r+0x1e>

08006a72 <__sfputc_r>:
 8006a72:	6893      	ldr	r3, [r2, #8]
 8006a74:	3b01      	subs	r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	b410      	push	{r4}
 8006a7a:	6093      	str	r3, [r2, #8]
 8006a7c:	da08      	bge.n	8006a90 <__sfputc_r+0x1e>
 8006a7e:	6994      	ldr	r4, [r2, #24]
 8006a80:	42a3      	cmp	r3, r4
 8006a82:	db01      	blt.n	8006a88 <__sfputc_r+0x16>
 8006a84:	290a      	cmp	r1, #10
 8006a86:	d103      	bne.n	8006a90 <__sfputc_r+0x1e>
 8006a88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a8c:	f000 b94a 	b.w	8006d24 <__swbuf_r>
 8006a90:	6813      	ldr	r3, [r2, #0]
 8006a92:	1c58      	adds	r0, r3, #1
 8006a94:	6010      	str	r0, [r2, #0]
 8006a96:	7019      	strb	r1, [r3, #0]
 8006a98:	4608      	mov	r0, r1
 8006a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <__sfputs_r>:
 8006aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	460f      	mov	r7, r1
 8006aa6:	4614      	mov	r4, r2
 8006aa8:	18d5      	adds	r5, r2, r3
 8006aaa:	42ac      	cmp	r4, r5
 8006aac:	d101      	bne.n	8006ab2 <__sfputs_r+0x12>
 8006aae:	2000      	movs	r0, #0
 8006ab0:	e007      	b.n	8006ac2 <__sfputs_r+0x22>
 8006ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab6:	463a      	mov	r2, r7
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f7ff ffda 	bl	8006a72 <__sfputc_r>
 8006abe:	1c43      	adds	r3, r0, #1
 8006ac0:	d1f3      	bne.n	8006aaa <__sfputs_r+0xa>
 8006ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ac4 <_vfiprintf_r>:
 8006ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac8:	460d      	mov	r5, r1
 8006aca:	b09d      	sub	sp, #116	; 0x74
 8006acc:	4614      	mov	r4, r2
 8006ace:	4698      	mov	r8, r3
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	b118      	cbz	r0, 8006adc <_vfiprintf_r+0x18>
 8006ad4:	6983      	ldr	r3, [r0, #24]
 8006ad6:	b90b      	cbnz	r3, 8006adc <_vfiprintf_r+0x18>
 8006ad8:	f000 fb14 	bl	8007104 <__sinit>
 8006adc:	4b89      	ldr	r3, [pc, #548]	; (8006d04 <_vfiprintf_r+0x240>)
 8006ade:	429d      	cmp	r5, r3
 8006ae0:	d11b      	bne.n	8006b1a <_vfiprintf_r+0x56>
 8006ae2:	6875      	ldr	r5, [r6, #4]
 8006ae4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ae6:	07d9      	lsls	r1, r3, #31
 8006ae8:	d405      	bmi.n	8006af6 <_vfiprintf_r+0x32>
 8006aea:	89ab      	ldrh	r3, [r5, #12]
 8006aec:	059a      	lsls	r2, r3, #22
 8006aee:	d402      	bmi.n	8006af6 <_vfiprintf_r+0x32>
 8006af0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006af2:	f000 fba5 	bl	8007240 <__retarget_lock_acquire_recursive>
 8006af6:	89ab      	ldrh	r3, [r5, #12]
 8006af8:	071b      	lsls	r3, r3, #28
 8006afa:	d501      	bpl.n	8006b00 <_vfiprintf_r+0x3c>
 8006afc:	692b      	ldr	r3, [r5, #16]
 8006afe:	b9eb      	cbnz	r3, 8006b3c <_vfiprintf_r+0x78>
 8006b00:	4629      	mov	r1, r5
 8006b02:	4630      	mov	r0, r6
 8006b04:	f000 f96e 	bl	8006de4 <__swsetup_r>
 8006b08:	b1c0      	cbz	r0, 8006b3c <_vfiprintf_r+0x78>
 8006b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b0c:	07dc      	lsls	r4, r3, #31
 8006b0e:	d50e      	bpl.n	8006b2e <_vfiprintf_r+0x6a>
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	b01d      	add	sp, #116	; 0x74
 8006b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1a:	4b7b      	ldr	r3, [pc, #492]	; (8006d08 <_vfiprintf_r+0x244>)
 8006b1c:	429d      	cmp	r5, r3
 8006b1e:	d101      	bne.n	8006b24 <_vfiprintf_r+0x60>
 8006b20:	68b5      	ldr	r5, [r6, #8]
 8006b22:	e7df      	b.n	8006ae4 <_vfiprintf_r+0x20>
 8006b24:	4b79      	ldr	r3, [pc, #484]	; (8006d0c <_vfiprintf_r+0x248>)
 8006b26:	429d      	cmp	r5, r3
 8006b28:	bf08      	it	eq
 8006b2a:	68f5      	ldreq	r5, [r6, #12]
 8006b2c:	e7da      	b.n	8006ae4 <_vfiprintf_r+0x20>
 8006b2e:	89ab      	ldrh	r3, [r5, #12]
 8006b30:	0598      	lsls	r0, r3, #22
 8006b32:	d4ed      	bmi.n	8006b10 <_vfiprintf_r+0x4c>
 8006b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b36:	f000 fb84 	bl	8007242 <__retarget_lock_release_recursive>
 8006b3a:	e7e9      	b.n	8006b10 <_vfiprintf_r+0x4c>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b40:	2320      	movs	r3, #32
 8006b42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b4a:	2330      	movs	r3, #48	; 0x30
 8006b4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006d10 <_vfiprintf_r+0x24c>
 8006b50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b54:	f04f 0901 	mov.w	r9, #1
 8006b58:	4623      	mov	r3, r4
 8006b5a:	469a      	mov	sl, r3
 8006b5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b60:	b10a      	cbz	r2, 8006b66 <_vfiprintf_r+0xa2>
 8006b62:	2a25      	cmp	r2, #37	; 0x25
 8006b64:	d1f9      	bne.n	8006b5a <_vfiprintf_r+0x96>
 8006b66:	ebba 0b04 	subs.w	fp, sl, r4
 8006b6a:	d00b      	beq.n	8006b84 <_vfiprintf_r+0xc0>
 8006b6c:	465b      	mov	r3, fp
 8006b6e:	4622      	mov	r2, r4
 8006b70:	4629      	mov	r1, r5
 8006b72:	4630      	mov	r0, r6
 8006b74:	f7ff ff94 	bl	8006aa0 <__sfputs_r>
 8006b78:	3001      	adds	r0, #1
 8006b7a:	f000 80aa 	beq.w	8006cd2 <_vfiprintf_r+0x20e>
 8006b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b80:	445a      	add	r2, fp
 8006b82:	9209      	str	r2, [sp, #36]	; 0x24
 8006b84:	f89a 3000 	ldrb.w	r3, [sl]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 80a2 	beq.w	8006cd2 <_vfiprintf_r+0x20e>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f04f 32ff 	mov.w	r2, #4294967295
 8006b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b98:	f10a 0a01 	add.w	sl, sl, #1
 8006b9c:	9304      	str	r3, [sp, #16]
 8006b9e:	9307      	str	r3, [sp, #28]
 8006ba0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ba4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ba6:	4654      	mov	r4, sl
 8006ba8:	2205      	movs	r2, #5
 8006baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bae:	4858      	ldr	r0, [pc, #352]	; (8006d10 <_vfiprintf_r+0x24c>)
 8006bb0:	f7f9 fb3e 	bl	8000230 <memchr>
 8006bb4:	9a04      	ldr	r2, [sp, #16]
 8006bb6:	b9d8      	cbnz	r0, 8006bf0 <_vfiprintf_r+0x12c>
 8006bb8:	06d1      	lsls	r1, r2, #27
 8006bba:	bf44      	itt	mi
 8006bbc:	2320      	movmi	r3, #32
 8006bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bc2:	0713      	lsls	r3, r2, #28
 8006bc4:	bf44      	itt	mi
 8006bc6:	232b      	movmi	r3, #43	; 0x2b
 8006bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd2:	d015      	beq.n	8006c00 <_vfiprintf_r+0x13c>
 8006bd4:	9a07      	ldr	r2, [sp, #28]
 8006bd6:	4654      	mov	r4, sl
 8006bd8:	2000      	movs	r0, #0
 8006bda:	f04f 0c0a 	mov.w	ip, #10
 8006bde:	4621      	mov	r1, r4
 8006be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006be4:	3b30      	subs	r3, #48	; 0x30
 8006be6:	2b09      	cmp	r3, #9
 8006be8:	d94e      	bls.n	8006c88 <_vfiprintf_r+0x1c4>
 8006bea:	b1b0      	cbz	r0, 8006c1a <_vfiprintf_r+0x156>
 8006bec:	9207      	str	r2, [sp, #28]
 8006bee:	e014      	b.n	8006c1a <_vfiprintf_r+0x156>
 8006bf0:	eba0 0308 	sub.w	r3, r0, r8
 8006bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	9304      	str	r3, [sp, #16]
 8006bfc:	46a2      	mov	sl, r4
 8006bfe:	e7d2      	b.n	8006ba6 <_vfiprintf_r+0xe2>
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	1d19      	adds	r1, r3, #4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	9103      	str	r1, [sp, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bfbb      	ittet	lt
 8006c0c:	425b      	neglt	r3, r3
 8006c0e:	f042 0202 	orrlt.w	r2, r2, #2
 8006c12:	9307      	strge	r3, [sp, #28]
 8006c14:	9307      	strlt	r3, [sp, #28]
 8006c16:	bfb8      	it	lt
 8006c18:	9204      	strlt	r2, [sp, #16]
 8006c1a:	7823      	ldrb	r3, [r4, #0]
 8006c1c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c1e:	d10c      	bne.n	8006c3a <_vfiprintf_r+0x176>
 8006c20:	7863      	ldrb	r3, [r4, #1]
 8006c22:	2b2a      	cmp	r3, #42	; 0x2a
 8006c24:	d135      	bne.n	8006c92 <_vfiprintf_r+0x1ce>
 8006c26:	9b03      	ldr	r3, [sp, #12]
 8006c28:	1d1a      	adds	r2, r3, #4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	9203      	str	r2, [sp, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	bfb8      	it	lt
 8006c32:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c36:	3402      	adds	r4, #2
 8006c38:	9305      	str	r3, [sp, #20]
 8006c3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006d20 <_vfiprintf_r+0x25c>
 8006c3e:	7821      	ldrb	r1, [r4, #0]
 8006c40:	2203      	movs	r2, #3
 8006c42:	4650      	mov	r0, sl
 8006c44:	f7f9 faf4 	bl	8000230 <memchr>
 8006c48:	b140      	cbz	r0, 8006c5c <_vfiprintf_r+0x198>
 8006c4a:	2340      	movs	r3, #64	; 0x40
 8006c4c:	eba0 000a 	sub.w	r0, r0, sl
 8006c50:	fa03 f000 	lsl.w	r0, r3, r0
 8006c54:	9b04      	ldr	r3, [sp, #16]
 8006c56:	4303      	orrs	r3, r0
 8006c58:	3401      	adds	r4, #1
 8006c5a:	9304      	str	r3, [sp, #16]
 8006c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c60:	482c      	ldr	r0, [pc, #176]	; (8006d14 <_vfiprintf_r+0x250>)
 8006c62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c66:	2206      	movs	r2, #6
 8006c68:	f7f9 fae2 	bl	8000230 <memchr>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d03f      	beq.n	8006cf0 <_vfiprintf_r+0x22c>
 8006c70:	4b29      	ldr	r3, [pc, #164]	; (8006d18 <_vfiprintf_r+0x254>)
 8006c72:	bb1b      	cbnz	r3, 8006cbc <_vfiprintf_r+0x1f8>
 8006c74:	9b03      	ldr	r3, [sp, #12]
 8006c76:	3307      	adds	r3, #7
 8006c78:	f023 0307 	bic.w	r3, r3, #7
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	9303      	str	r3, [sp, #12]
 8006c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c82:	443b      	add	r3, r7
 8006c84:	9309      	str	r3, [sp, #36]	; 0x24
 8006c86:	e767      	b.n	8006b58 <_vfiprintf_r+0x94>
 8006c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c8c:	460c      	mov	r4, r1
 8006c8e:	2001      	movs	r0, #1
 8006c90:	e7a5      	b.n	8006bde <_vfiprintf_r+0x11a>
 8006c92:	2300      	movs	r3, #0
 8006c94:	3401      	adds	r4, #1
 8006c96:	9305      	str	r3, [sp, #20]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	f04f 0c0a 	mov.w	ip, #10
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ca4:	3a30      	subs	r2, #48	; 0x30
 8006ca6:	2a09      	cmp	r2, #9
 8006ca8:	d903      	bls.n	8006cb2 <_vfiprintf_r+0x1ee>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0c5      	beq.n	8006c3a <_vfiprintf_r+0x176>
 8006cae:	9105      	str	r1, [sp, #20]
 8006cb0:	e7c3      	b.n	8006c3a <_vfiprintf_r+0x176>
 8006cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e7f0      	b.n	8006c9e <_vfiprintf_r+0x1da>
 8006cbc:	ab03      	add	r3, sp, #12
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	462a      	mov	r2, r5
 8006cc2:	4b16      	ldr	r3, [pc, #88]	; (8006d1c <_vfiprintf_r+0x258>)
 8006cc4:	a904      	add	r1, sp, #16
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7fd fdc4 	bl	8004854 <_printf_float>
 8006ccc:	4607      	mov	r7, r0
 8006cce:	1c78      	adds	r0, r7, #1
 8006cd0:	d1d6      	bne.n	8006c80 <_vfiprintf_r+0x1bc>
 8006cd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cd4:	07d9      	lsls	r1, r3, #31
 8006cd6:	d405      	bmi.n	8006ce4 <_vfiprintf_r+0x220>
 8006cd8:	89ab      	ldrh	r3, [r5, #12]
 8006cda:	059a      	lsls	r2, r3, #22
 8006cdc:	d402      	bmi.n	8006ce4 <_vfiprintf_r+0x220>
 8006cde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ce0:	f000 faaf 	bl	8007242 <__retarget_lock_release_recursive>
 8006ce4:	89ab      	ldrh	r3, [r5, #12]
 8006ce6:	065b      	lsls	r3, r3, #25
 8006ce8:	f53f af12 	bmi.w	8006b10 <_vfiprintf_r+0x4c>
 8006cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cee:	e711      	b.n	8006b14 <_vfiprintf_r+0x50>
 8006cf0:	ab03      	add	r3, sp, #12
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	462a      	mov	r2, r5
 8006cf6:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <_vfiprintf_r+0x258>)
 8006cf8:	a904      	add	r1, sp, #16
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f7fe f84e 	bl	8004d9c <_printf_i>
 8006d00:	e7e4      	b.n	8006ccc <_vfiprintf_r+0x208>
 8006d02:	bf00      	nop
 8006d04:	0800793c 	.word	0x0800793c
 8006d08:	0800795c 	.word	0x0800795c
 8006d0c:	0800791c 	.word	0x0800791c
 8006d10:	080077c4 	.word	0x080077c4
 8006d14:	080077ce 	.word	0x080077ce
 8006d18:	08004855 	.word	0x08004855
 8006d1c:	08006aa1 	.word	0x08006aa1
 8006d20:	080077ca 	.word	0x080077ca

08006d24 <__swbuf_r>:
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	460e      	mov	r6, r1
 8006d28:	4614      	mov	r4, r2
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	b118      	cbz	r0, 8006d36 <__swbuf_r+0x12>
 8006d2e:	6983      	ldr	r3, [r0, #24]
 8006d30:	b90b      	cbnz	r3, 8006d36 <__swbuf_r+0x12>
 8006d32:	f000 f9e7 	bl	8007104 <__sinit>
 8006d36:	4b21      	ldr	r3, [pc, #132]	; (8006dbc <__swbuf_r+0x98>)
 8006d38:	429c      	cmp	r4, r3
 8006d3a:	d12b      	bne.n	8006d94 <__swbuf_r+0x70>
 8006d3c:	686c      	ldr	r4, [r5, #4]
 8006d3e:	69a3      	ldr	r3, [r4, #24]
 8006d40:	60a3      	str	r3, [r4, #8]
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	071a      	lsls	r2, r3, #28
 8006d46:	d52f      	bpl.n	8006da8 <__swbuf_r+0x84>
 8006d48:	6923      	ldr	r3, [r4, #16]
 8006d4a:	b36b      	cbz	r3, 8006da8 <__swbuf_r+0x84>
 8006d4c:	6923      	ldr	r3, [r4, #16]
 8006d4e:	6820      	ldr	r0, [r4, #0]
 8006d50:	1ac0      	subs	r0, r0, r3
 8006d52:	6963      	ldr	r3, [r4, #20]
 8006d54:	b2f6      	uxtb	r6, r6
 8006d56:	4283      	cmp	r3, r0
 8006d58:	4637      	mov	r7, r6
 8006d5a:	dc04      	bgt.n	8006d66 <__swbuf_r+0x42>
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	4628      	mov	r0, r5
 8006d60:	f000 f93c 	bl	8006fdc <_fflush_r>
 8006d64:	bb30      	cbnz	r0, 8006db4 <__swbuf_r+0x90>
 8006d66:	68a3      	ldr	r3, [r4, #8]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	60a3      	str	r3, [r4, #8]
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	6022      	str	r2, [r4, #0]
 8006d72:	701e      	strb	r6, [r3, #0]
 8006d74:	6963      	ldr	r3, [r4, #20]
 8006d76:	3001      	adds	r0, #1
 8006d78:	4283      	cmp	r3, r0
 8006d7a:	d004      	beq.n	8006d86 <__swbuf_r+0x62>
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	07db      	lsls	r3, r3, #31
 8006d80:	d506      	bpl.n	8006d90 <__swbuf_r+0x6c>
 8006d82:	2e0a      	cmp	r6, #10
 8006d84:	d104      	bne.n	8006d90 <__swbuf_r+0x6c>
 8006d86:	4621      	mov	r1, r4
 8006d88:	4628      	mov	r0, r5
 8006d8a:	f000 f927 	bl	8006fdc <_fflush_r>
 8006d8e:	b988      	cbnz	r0, 8006db4 <__swbuf_r+0x90>
 8006d90:	4638      	mov	r0, r7
 8006d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d94:	4b0a      	ldr	r3, [pc, #40]	; (8006dc0 <__swbuf_r+0x9c>)
 8006d96:	429c      	cmp	r4, r3
 8006d98:	d101      	bne.n	8006d9e <__swbuf_r+0x7a>
 8006d9a:	68ac      	ldr	r4, [r5, #8]
 8006d9c:	e7cf      	b.n	8006d3e <__swbuf_r+0x1a>
 8006d9e:	4b09      	ldr	r3, [pc, #36]	; (8006dc4 <__swbuf_r+0xa0>)
 8006da0:	429c      	cmp	r4, r3
 8006da2:	bf08      	it	eq
 8006da4:	68ec      	ldreq	r4, [r5, #12]
 8006da6:	e7ca      	b.n	8006d3e <__swbuf_r+0x1a>
 8006da8:	4621      	mov	r1, r4
 8006daa:	4628      	mov	r0, r5
 8006dac:	f000 f81a 	bl	8006de4 <__swsetup_r>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d0cb      	beq.n	8006d4c <__swbuf_r+0x28>
 8006db4:	f04f 37ff 	mov.w	r7, #4294967295
 8006db8:	e7ea      	b.n	8006d90 <__swbuf_r+0x6c>
 8006dba:	bf00      	nop
 8006dbc:	0800793c 	.word	0x0800793c
 8006dc0:	0800795c 	.word	0x0800795c
 8006dc4:	0800791c 	.word	0x0800791c

08006dc8 <__ascii_wctomb>:
 8006dc8:	b149      	cbz	r1, 8006dde <__ascii_wctomb+0x16>
 8006dca:	2aff      	cmp	r2, #255	; 0xff
 8006dcc:	bf85      	ittet	hi
 8006dce:	238a      	movhi	r3, #138	; 0x8a
 8006dd0:	6003      	strhi	r3, [r0, #0]
 8006dd2:	700a      	strbls	r2, [r1, #0]
 8006dd4:	f04f 30ff 	movhi.w	r0, #4294967295
 8006dd8:	bf98      	it	ls
 8006dda:	2001      	movls	r0, #1
 8006ddc:	4770      	bx	lr
 8006dde:	4608      	mov	r0, r1
 8006de0:	4770      	bx	lr
	...

08006de4 <__swsetup_r>:
 8006de4:	4b32      	ldr	r3, [pc, #200]	; (8006eb0 <__swsetup_r+0xcc>)
 8006de6:	b570      	push	{r4, r5, r6, lr}
 8006de8:	681d      	ldr	r5, [r3, #0]
 8006dea:	4606      	mov	r6, r0
 8006dec:	460c      	mov	r4, r1
 8006dee:	b125      	cbz	r5, 8006dfa <__swsetup_r+0x16>
 8006df0:	69ab      	ldr	r3, [r5, #24]
 8006df2:	b913      	cbnz	r3, 8006dfa <__swsetup_r+0x16>
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 f985 	bl	8007104 <__sinit>
 8006dfa:	4b2e      	ldr	r3, [pc, #184]	; (8006eb4 <__swsetup_r+0xd0>)
 8006dfc:	429c      	cmp	r4, r3
 8006dfe:	d10f      	bne.n	8006e20 <__swsetup_r+0x3c>
 8006e00:	686c      	ldr	r4, [r5, #4]
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e08:	0719      	lsls	r1, r3, #28
 8006e0a:	d42c      	bmi.n	8006e66 <__swsetup_r+0x82>
 8006e0c:	06dd      	lsls	r5, r3, #27
 8006e0e:	d411      	bmi.n	8006e34 <__swsetup_r+0x50>
 8006e10:	2309      	movs	r3, #9
 8006e12:	6033      	str	r3, [r6, #0]
 8006e14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e18:	81a3      	strh	r3, [r4, #12]
 8006e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1e:	e03e      	b.n	8006e9e <__swsetup_r+0xba>
 8006e20:	4b25      	ldr	r3, [pc, #148]	; (8006eb8 <__swsetup_r+0xd4>)
 8006e22:	429c      	cmp	r4, r3
 8006e24:	d101      	bne.n	8006e2a <__swsetup_r+0x46>
 8006e26:	68ac      	ldr	r4, [r5, #8]
 8006e28:	e7eb      	b.n	8006e02 <__swsetup_r+0x1e>
 8006e2a:	4b24      	ldr	r3, [pc, #144]	; (8006ebc <__swsetup_r+0xd8>)
 8006e2c:	429c      	cmp	r4, r3
 8006e2e:	bf08      	it	eq
 8006e30:	68ec      	ldreq	r4, [r5, #12]
 8006e32:	e7e6      	b.n	8006e02 <__swsetup_r+0x1e>
 8006e34:	0758      	lsls	r0, r3, #29
 8006e36:	d512      	bpl.n	8006e5e <__swsetup_r+0x7a>
 8006e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e3a:	b141      	cbz	r1, 8006e4e <__swsetup_r+0x6a>
 8006e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e40:	4299      	cmp	r1, r3
 8006e42:	d002      	beq.n	8006e4a <__swsetup_r+0x66>
 8006e44:	4630      	mov	r0, r6
 8006e46:	f7ff fb31 	bl	80064ac <_free_r>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	6363      	str	r3, [r4, #52]	; 0x34
 8006e4e:	89a3      	ldrh	r3, [r4, #12]
 8006e50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e54:	81a3      	strh	r3, [r4, #12]
 8006e56:	2300      	movs	r3, #0
 8006e58:	6063      	str	r3, [r4, #4]
 8006e5a:	6923      	ldr	r3, [r4, #16]
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	f043 0308 	orr.w	r3, r3, #8
 8006e64:	81a3      	strh	r3, [r4, #12]
 8006e66:	6923      	ldr	r3, [r4, #16]
 8006e68:	b94b      	cbnz	r3, 8006e7e <__swsetup_r+0x9a>
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e74:	d003      	beq.n	8006e7e <__swsetup_r+0x9a>
 8006e76:	4621      	mov	r1, r4
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f000 fa09 	bl	8007290 <__smakebuf_r>
 8006e7e:	89a0      	ldrh	r0, [r4, #12]
 8006e80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e84:	f010 0301 	ands.w	r3, r0, #1
 8006e88:	d00a      	beq.n	8006ea0 <__swsetup_r+0xbc>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60a3      	str	r3, [r4, #8]
 8006e8e:	6963      	ldr	r3, [r4, #20]
 8006e90:	425b      	negs	r3, r3
 8006e92:	61a3      	str	r3, [r4, #24]
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	b943      	cbnz	r3, 8006eaa <__swsetup_r+0xc6>
 8006e98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e9c:	d1ba      	bne.n	8006e14 <__swsetup_r+0x30>
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	0781      	lsls	r1, r0, #30
 8006ea2:	bf58      	it	pl
 8006ea4:	6963      	ldrpl	r3, [r4, #20]
 8006ea6:	60a3      	str	r3, [r4, #8]
 8006ea8:	e7f4      	b.n	8006e94 <__swsetup_r+0xb0>
 8006eaa:	2000      	movs	r0, #0
 8006eac:	e7f7      	b.n	8006e9e <__swsetup_r+0xba>
 8006eae:	bf00      	nop
 8006eb0:	2000000c 	.word	0x2000000c
 8006eb4:	0800793c 	.word	0x0800793c
 8006eb8:	0800795c 	.word	0x0800795c
 8006ebc:	0800791c 	.word	0x0800791c

08006ec0 <abort>:
 8006ec0:	b508      	push	{r3, lr}
 8006ec2:	2006      	movs	r0, #6
 8006ec4:	f000 fa54 	bl	8007370 <raise>
 8006ec8:	2001      	movs	r0, #1
 8006eca:	f7fa fbc9 	bl	8001660 <_exit>
	...

08006ed0 <__sflush_r>:
 8006ed0:	898a      	ldrh	r2, [r1, #12]
 8006ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed6:	4605      	mov	r5, r0
 8006ed8:	0710      	lsls	r0, r2, #28
 8006eda:	460c      	mov	r4, r1
 8006edc:	d458      	bmi.n	8006f90 <__sflush_r+0xc0>
 8006ede:	684b      	ldr	r3, [r1, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	dc05      	bgt.n	8006ef0 <__sflush_r+0x20>
 8006ee4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	dc02      	bgt.n	8006ef0 <__sflush_r+0x20>
 8006eea:	2000      	movs	r0, #0
 8006eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ef2:	2e00      	cmp	r6, #0
 8006ef4:	d0f9      	beq.n	8006eea <__sflush_r+0x1a>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006efc:	682f      	ldr	r7, [r5, #0]
 8006efe:	602b      	str	r3, [r5, #0]
 8006f00:	d032      	beq.n	8006f68 <__sflush_r+0x98>
 8006f02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	075a      	lsls	r2, r3, #29
 8006f08:	d505      	bpl.n	8006f16 <__sflush_r+0x46>
 8006f0a:	6863      	ldr	r3, [r4, #4]
 8006f0c:	1ac0      	subs	r0, r0, r3
 8006f0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f10:	b10b      	cbz	r3, 8006f16 <__sflush_r+0x46>
 8006f12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f14:	1ac0      	subs	r0, r0, r3
 8006f16:	2300      	movs	r3, #0
 8006f18:	4602      	mov	r2, r0
 8006f1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f1c:	6a21      	ldr	r1, [r4, #32]
 8006f1e:	4628      	mov	r0, r5
 8006f20:	47b0      	blx	r6
 8006f22:	1c43      	adds	r3, r0, #1
 8006f24:	89a3      	ldrh	r3, [r4, #12]
 8006f26:	d106      	bne.n	8006f36 <__sflush_r+0x66>
 8006f28:	6829      	ldr	r1, [r5, #0]
 8006f2a:	291d      	cmp	r1, #29
 8006f2c:	d82c      	bhi.n	8006f88 <__sflush_r+0xb8>
 8006f2e:	4a2a      	ldr	r2, [pc, #168]	; (8006fd8 <__sflush_r+0x108>)
 8006f30:	40ca      	lsrs	r2, r1
 8006f32:	07d6      	lsls	r6, r2, #31
 8006f34:	d528      	bpl.n	8006f88 <__sflush_r+0xb8>
 8006f36:	2200      	movs	r2, #0
 8006f38:	6062      	str	r2, [r4, #4]
 8006f3a:	04d9      	lsls	r1, r3, #19
 8006f3c:	6922      	ldr	r2, [r4, #16]
 8006f3e:	6022      	str	r2, [r4, #0]
 8006f40:	d504      	bpl.n	8006f4c <__sflush_r+0x7c>
 8006f42:	1c42      	adds	r2, r0, #1
 8006f44:	d101      	bne.n	8006f4a <__sflush_r+0x7a>
 8006f46:	682b      	ldr	r3, [r5, #0]
 8006f48:	b903      	cbnz	r3, 8006f4c <__sflush_r+0x7c>
 8006f4a:	6560      	str	r0, [r4, #84]	; 0x54
 8006f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f4e:	602f      	str	r7, [r5, #0]
 8006f50:	2900      	cmp	r1, #0
 8006f52:	d0ca      	beq.n	8006eea <__sflush_r+0x1a>
 8006f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f58:	4299      	cmp	r1, r3
 8006f5a:	d002      	beq.n	8006f62 <__sflush_r+0x92>
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f7ff faa5 	bl	80064ac <_free_r>
 8006f62:	2000      	movs	r0, #0
 8006f64:	6360      	str	r0, [r4, #52]	; 0x34
 8006f66:	e7c1      	b.n	8006eec <__sflush_r+0x1c>
 8006f68:	6a21      	ldr	r1, [r4, #32]
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b0      	blx	r6
 8006f70:	1c41      	adds	r1, r0, #1
 8006f72:	d1c7      	bne.n	8006f04 <__sflush_r+0x34>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0c4      	beq.n	8006f04 <__sflush_r+0x34>
 8006f7a:	2b1d      	cmp	r3, #29
 8006f7c:	d001      	beq.n	8006f82 <__sflush_r+0xb2>
 8006f7e:	2b16      	cmp	r3, #22
 8006f80:	d101      	bne.n	8006f86 <__sflush_r+0xb6>
 8006f82:	602f      	str	r7, [r5, #0]
 8006f84:	e7b1      	b.n	8006eea <__sflush_r+0x1a>
 8006f86:	89a3      	ldrh	r3, [r4, #12]
 8006f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f8c:	81a3      	strh	r3, [r4, #12]
 8006f8e:	e7ad      	b.n	8006eec <__sflush_r+0x1c>
 8006f90:	690f      	ldr	r7, [r1, #16]
 8006f92:	2f00      	cmp	r7, #0
 8006f94:	d0a9      	beq.n	8006eea <__sflush_r+0x1a>
 8006f96:	0793      	lsls	r3, r2, #30
 8006f98:	680e      	ldr	r6, [r1, #0]
 8006f9a:	bf08      	it	eq
 8006f9c:	694b      	ldreq	r3, [r1, #20]
 8006f9e:	600f      	str	r7, [r1, #0]
 8006fa0:	bf18      	it	ne
 8006fa2:	2300      	movne	r3, #0
 8006fa4:	eba6 0807 	sub.w	r8, r6, r7
 8006fa8:	608b      	str	r3, [r1, #8]
 8006faa:	f1b8 0f00 	cmp.w	r8, #0
 8006fae:	dd9c      	ble.n	8006eea <__sflush_r+0x1a>
 8006fb0:	6a21      	ldr	r1, [r4, #32]
 8006fb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fb4:	4643      	mov	r3, r8
 8006fb6:	463a      	mov	r2, r7
 8006fb8:	4628      	mov	r0, r5
 8006fba:	47b0      	blx	r6
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	dc06      	bgt.n	8006fce <__sflush_r+0xfe>
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc6:	81a3      	strh	r3, [r4, #12]
 8006fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fcc:	e78e      	b.n	8006eec <__sflush_r+0x1c>
 8006fce:	4407      	add	r7, r0
 8006fd0:	eba8 0800 	sub.w	r8, r8, r0
 8006fd4:	e7e9      	b.n	8006faa <__sflush_r+0xda>
 8006fd6:	bf00      	nop
 8006fd8:	20400001 	.word	0x20400001

08006fdc <_fflush_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	690b      	ldr	r3, [r1, #16]
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	b913      	cbnz	r3, 8006fec <_fflush_r+0x10>
 8006fe6:	2500      	movs	r5, #0
 8006fe8:	4628      	mov	r0, r5
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	b118      	cbz	r0, 8006ff6 <_fflush_r+0x1a>
 8006fee:	6983      	ldr	r3, [r0, #24]
 8006ff0:	b90b      	cbnz	r3, 8006ff6 <_fflush_r+0x1a>
 8006ff2:	f000 f887 	bl	8007104 <__sinit>
 8006ff6:	4b14      	ldr	r3, [pc, #80]	; (8007048 <_fflush_r+0x6c>)
 8006ff8:	429c      	cmp	r4, r3
 8006ffa:	d11b      	bne.n	8007034 <_fflush_r+0x58>
 8006ffc:	686c      	ldr	r4, [r5, #4]
 8006ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d0ef      	beq.n	8006fe6 <_fflush_r+0xa>
 8007006:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007008:	07d0      	lsls	r0, r2, #31
 800700a:	d404      	bmi.n	8007016 <_fflush_r+0x3a>
 800700c:	0599      	lsls	r1, r3, #22
 800700e:	d402      	bmi.n	8007016 <_fflush_r+0x3a>
 8007010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007012:	f000 f915 	bl	8007240 <__retarget_lock_acquire_recursive>
 8007016:	4628      	mov	r0, r5
 8007018:	4621      	mov	r1, r4
 800701a:	f7ff ff59 	bl	8006ed0 <__sflush_r>
 800701e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007020:	07da      	lsls	r2, r3, #31
 8007022:	4605      	mov	r5, r0
 8007024:	d4e0      	bmi.n	8006fe8 <_fflush_r+0xc>
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	059b      	lsls	r3, r3, #22
 800702a:	d4dd      	bmi.n	8006fe8 <_fflush_r+0xc>
 800702c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800702e:	f000 f908 	bl	8007242 <__retarget_lock_release_recursive>
 8007032:	e7d9      	b.n	8006fe8 <_fflush_r+0xc>
 8007034:	4b05      	ldr	r3, [pc, #20]	; (800704c <_fflush_r+0x70>)
 8007036:	429c      	cmp	r4, r3
 8007038:	d101      	bne.n	800703e <_fflush_r+0x62>
 800703a:	68ac      	ldr	r4, [r5, #8]
 800703c:	e7df      	b.n	8006ffe <_fflush_r+0x22>
 800703e:	4b04      	ldr	r3, [pc, #16]	; (8007050 <_fflush_r+0x74>)
 8007040:	429c      	cmp	r4, r3
 8007042:	bf08      	it	eq
 8007044:	68ec      	ldreq	r4, [r5, #12]
 8007046:	e7da      	b.n	8006ffe <_fflush_r+0x22>
 8007048:	0800793c 	.word	0x0800793c
 800704c:	0800795c 	.word	0x0800795c
 8007050:	0800791c 	.word	0x0800791c

08007054 <std>:
 8007054:	2300      	movs	r3, #0
 8007056:	b510      	push	{r4, lr}
 8007058:	4604      	mov	r4, r0
 800705a:	e9c0 3300 	strd	r3, r3, [r0]
 800705e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007062:	6083      	str	r3, [r0, #8]
 8007064:	8181      	strh	r1, [r0, #12]
 8007066:	6643      	str	r3, [r0, #100]	; 0x64
 8007068:	81c2      	strh	r2, [r0, #14]
 800706a:	6183      	str	r3, [r0, #24]
 800706c:	4619      	mov	r1, r3
 800706e:	2208      	movs	r2, #8
 8007070:	305c      	adds	r0, #92	; 0x5c
 8007072:	f7fd fb47 	bl	8004704 <memset>
 8007076:	4b05      	ldr	r3, [pc, #20]	; (800708c <std+0x38>)
 8007078:	6263      	str	r3, [r4, #36]	; 0x24
 800707a:	4b05      	ldr	r3, [pc, #20]	; (8007090 <std+0x3c>)
 800707c:	62a3      	str	r3, [r4, #40]	; 0x28
 800707e:	4b05      	ldr	r3, [pc, #20]	; (8007094 <std+0x40>)
 8007080:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007082:	4b05      	ldr	r3, [pc, #20]	; (8007098 <std+0x44>)
 8007084:	6224      	str	r4, [r4, #32]
 8007086:	6323      	str	r3, [r4, #48]	; 0x30
 8007088:	bd10      	pop	{r4, pc}
 800708a:	bf00      	nop
 800708c:	080073a9 	.word	0x080073a9
 8007090:	080073cb 	.word	0x080073cb
 8007094:	08007403 	.word	0x08007403
 8007098:	08007427 	.word	0x08007427

0800709c <_cleanup_r>:
 800709c:	4901      	ldr	r1, [pc, #4]	; (80070a4 <_cleanup_r+0x8>)
 800709e:	f000 b8af 	b.w	8007200 <_fwalk_reent>
 80070a2:	bf00      	nop
 80070a4:	08006fdd 	.word	0x08006fdd

080070a8 <__sfmoreglue>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	2268      	movs	r2, #104	; 0x68
 80070ac:	1e4d      	subs	r5, r1, #1
 80070ae:	4355      	muls	r5, r2
 80070b0:	460e      	mov	r6, r1
 80070b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070b6:	f7ff fa65 	bl	8006584 <_malloc_r>
 80070ba:	4604      	mov	r4, r0
 80070bc:	b140      	cbz	r0, 80070d0 <__sfmoreglue+0x28>
 80070be:	2100      	movs	r1, #0
 80070c0:	e9c0 1600 	strd	r1, r6, [r0]
 80070c4:	300c      	adds	r0, #12
 80070c6:	60a0      	str	r0, [r4, #8]
 80070c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070cc:	f7fd fb1a 	bl	8004704 <memset>
 80070d0:	4620      	mov	r0, r4
 80070d2:	bd70      	pop	{r4, r5, r6, pc}

080070d4 <__sfp_lock_acquire>:
 80070d4:	4801      	ldr	r0, [pc, #4]	; (80070dc <__sfp_lock_acquire+0x8>)
 80070d6:	f000 b8b3 	b.w	8007240 <__retarget_lock_acquire_recursive>
 80070da:	bf00      	nop
 80070dc:	200002e9 	.word	0x200002e9

080070e0 <__sfp_lock_release>:
 80070e0:	4801      	ldr	r0, [pc, #4]	; (80070e8 <__sfp_lock_release+0x8>)
 80070e2:	f000 b8ae 	b.w	8007242 <__retarget_lock_release_recursive>
 80070e6:	bf00      	nop
 80070e8:	200002e9 	.word	0x200002e9

080070ec <__sinit_lock_acquire>:
 80070ec:	4801      	ldr	r0, [pc, #4]	; (80070f4 <__sinit_lock_acquire+0x8>)
 80070ee:	f000 b8a7 	b.w	8007240 <__retarget_lock_acquire_recursive>
 80070f2:	bf00      	nop
 80070f4:	200002ea 	.word	0x200002ea

080070f8 <__sinit_lock_release>:
 80070f8:	4801      	ldr	r0, [pc, #4]	; (8007100 <__sinit_lock_release+0x8>)
 80070fa:	f000 b8a2 	b.w	8007242 <__retarget_lock_release_recursive>
 80070fe:	bf00      	nop
 8007100:	200002ea 	.word	0x200002ea

08007104 <__sinit>:
 8007104:	b510      	push	{r4, lr}
 8007106:	4604      	mov	r4, r0
 8007108:	f7ff fff0 	bl	80070ec <__sinit_lock_acquire>
 800710c:	69a3      	ldr	r3, [r4, #24]
 800710e:	b11b      	cbz	r3, 8007118 <__sinit+0x14>
 8007110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007114:	f7ff bff0 	b.w	80070f8 <__sinit_lock_release>
 8007118:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800711c:	6523      	str	r3, [r4, #80]	; 0x50
 800711e:	4b13      	ldr	r3, [pc, #76]	; (800716c <__sinit+0x68>)
 8007120:	4a13      	ldr	r2, [pc, #76]	; (8007170 <__sinit+0x6c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	62a2      	str	r2, [r4, #40]	; 0x28
 8007126:	42a3      	cmp	r3, r4
 8007128:	bf04      	itt	eq
 800712a:	2301      	moveq	r3, #1
 800712c:	61a3      	streq	r3, [r4, #24]
 800712e:	4620      	mov	r0, r4
 8007130:	f000 f820 	bl	8007174 <__sfp>
 8007134:	6060      	str	r0, [r4, #4]
 8007136:	4620      	mov	r0, r4
 8007138:	f000 f81c 	bl	8007174 <__sfp>
 800713c:	60a0      	str	r0, [r4, #8]
 800713e:	4620      	mov	r0, r4
 8007140:	f000 f818 	bl	8007174 <__sfp>
 8007144:	2200      	movs	r2, #0
 8007146:	60e0      	str	r0, [r4, #12]
 8007148:	2104      	movs	r1, #4
 800714a:	6860      	ldr	r0, [r4, #4]
 800714c:	f7ff ff82 	bl	8007054 <std>
 8007150:	68a0      	ldr	r0, [r4, #8]
 8007152:	2201      	movs	r2, #1
 8007154:	2109      	movs	r1, #9
 8007156:	f7ff ff7d 	bl	8007054 <std>
 800715a:	68e0      	ldr	r0, [r4, #12]
 800715c:	2202      	movs	r2, #2
 800715e:	2112      	movs	r1, #18
 8007160:	f7ff ff78 	bl	8007054 <std>
 8007164:	2301      	movs	r3, #1
 8007166:	61a3      	str	r3, [r4, #24]
 8007168:	e7d2      	b.n	8007110 <__sinit+0xc>
 800716a:	bf00      	nop
 800716c:	080075a4 	.word	0x080075a4
 8007170:	0800709d 	.word	0x0800709d

08007174 <__sfp>:
 8007174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007176:	4607      	mov	r7, r0
 8007178:	f7ff ffac 	bl	80070d4 <__sfp_lock_acquire>
 800717c:	4b1e      	ldr	r3, [pc, #120]	; (80071f8 <__sfp+0x84>)
 800717e:	681e      	ldr	r6, [r3, #0]
 8007180:	69b3      	ldr	r3, [r6, #24]
 8007182:	b913      	cbnz	r3, 800718a <__sfp+0x16>
 8007184:	4630      	mov	r0, r6
 8007186:	f7ff ffbd 	bl	8007104 <__sinit>
 800718a:	3648      	adds	r6, #72	; 0x48
 800718c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007190:	3b01      	subs	r3, #1
 8007192:	d503      	bpl.n	800719c <__sfp+0x28>
 8007194:	6833      	ldr	r3, [r6, #0]
 8007196:	b30b      	cbz	r3, 80071dc <__sfp+0x68>
 8007198:	6836      	ldr	r6, [r6, #0]
 800719a:	e7f7      	b.n	800718c <__sfp+0x18>
 800719c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80071a0:	b9d5      	cbnz	r5, 80071d8 <__sfp+0x64>
 80071a2:	4b16      	ldr	r3, [pc, #88]	; (80071fc <__sfp+0x88>)
 80071a4:	60e3      	str	r3, [r4, #12]
 80071a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071aa:	6665      	str	r5, [r4, #100]	; 0x64
 80071ac:	f000 f847 	bl	800723e <__retarget_lock_init_recursive>
 80071b0:	f7ff ff96 	bl	80070e0 <__sfp_lock_release>
 80071b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80071b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80071bc:	6025      	str	r5, [r4, #0]
 80071be:	61a5      	str	r5, [r4, #24]
 80071c0:	2208      	movs	r2, #8
 80071c2:	4629      	mov	r1, r5
 80071c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071c8:	f7fd fa9c 	bl	8004704 <memset>
 80071cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071d4:	4620      	mov	r0, r4
 80071d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071d8:	3468      	adds	r4, #104	; 0x68
 80071da:	e7d9      	b.n	8007190 <__sfp+0x1c>
 80071dc:	2104      	movs	r1, #4
 80071de:	4638      	mov	r0, r7
 80071e0:	f7ff ff62 	bl	80070a8 <__sfmoreglue>
 80071e4:	4604      	mov	r4, r0
 80071e6:	6030      	str	r0, [r6, #0]
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d1d5      	bne.n	8007198 <__sfp+0x24>
 80071ec:	f7ff ff78 	bl	80070e0 <__sfp_lock_release>
 80071f0:	230c      	movs	r3, #12
 80071f2:	603b      	str	r3, [r7, #0]
 80071f4:	e7ee      	b.n	80071d4 <__sfp+0x60>
 80071f6:	bf00      	nop
 80071f8:	080075a4 	.word	0x080075a4
 80071fc:	ffff0001 	.word	0xffff0001

08007200 <_fwalk_reent>:
 8007200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007204:	4606      	mov	r6, r0
 8007206:	4688      	mov	r8, r1
 8007208:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800720c:	2700      	movs	r7, #0
 800720e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007212:	f1b9 0901 	subs.w	r9, r9, #1
 8007216:	d505      	bpl.n	8007224 <_fwalk_reent+0x24>
 8007218:	6824      	ldr	r4, [r4, #0]
 800721a:	2c00      	cmp	r4, #0
 800721c:	d1f7      	bne.n	800720e <_fwalk_reent+0xe>
 800721e:	4638      	mov	r0, r7
 8007220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007224:	89ab      	ldrh	r3, [r5, #12]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d907      	bls.n	800723a <_fwalk_reent+0x3a>
 800722a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800722e:	3301      	adds	r3, #1
 8007230:	d003      	beq.n	800723a <_fwalk_reent+0x3a>
 8007232:	4629      	mov	r1, r5
 8007234:	4630      	mov	r0, r6
 8007236:	47c0      	blx	r8
 8007238:	4307      	orrs	r7, r0
 800723a:	3568      	adds	r5, #104	; 0x68
 800723c:	e7e9      	b.n	8007212 <_fwalk_reent+0x12>

0800723e <__retarget_lock_init_recursive>:
 800723e:	4770      	bx	lr

08007240 <__retarget_lock_acquire_recursive>:
 8007240:	4770      	bx	lr

08007242 <__retarget_lock_release_recursive>:
 8007242:	4770      	bx	lr

08007244 <__swhatbuf_r>:
 8007244:	b570      	push	{r4, r5, r6, lr}
 8007246:	460e      	mov	r6, r1
 8007248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800724c:	2900      	cmp	r1, #0
 800724e:	b096      	sub	sp, #88	; 0x58
 8007250:	4614      	mov	r4, r2
 8007252:	461d      	mov	r5, r3
 8007254:	da08      	bge.n	8007268 <__swhatbuf_r+0x24>
 8007256:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	602a      	str	r2, [r5, #0]
 800725e:	061a      	lsls	r2, r3, #24
 8007260:	d410      	bmi.n	8007284 <__swhatbuf_r+0x40>
 8007262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007266:	e00e      	b.n	8007286 <__swhatbuf_r+0x42>
 8007268:	466a      	mov	r2, sp
 800726a:	f000 f903 	bl	8007474 <_fstat_r>
 800726e:	2800      	cmp	r0, #0
 8007270:	dbf1      	blt.n	8007256 <__swhatbuf_r+0x12>
 8007272:	9a01      	ldr	r2, [sp, #4]
 8007274:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007278:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800727c:	425a      	negs	r2, r3
 800727e:	415a      	adcs	r2, r3
 8007280:	602a      	str	r2, [r5, #0]
 8007282:	e7ee      	b.n	8007262 <__swhatbuf_r+0x1e>
 8007284:	2340      	movs	r3, #64	; 0x40
 8007286:	2000      	movs	r0, #0
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	b016      	add	sp, #88	; 0x58
 800728c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007290 <__smakebuf_r>:
 8007290:	898b      	ldrh	r3, [r1, #12]
 8007292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007294:	079d      	lsls	r5, r3, #30
 8007296:	4606      	mov	r6, r0
 8007298:	460c      	mov	r4, r1
 800729a:	d507      	bpl.n	80072ac <__smakebuf_r+0x1c>
 800729c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	6123      	str	r3, [r4, #16]
 80072a4:	2301      	movs	r3, #1
 80072a6:	6163      	str	r3, [r4, #20]
 80072a8:	b002      	add	sp, #8
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	ab01      	add	r3, sp, #4
 80072ae:	466a      	mov	r2, sp
 80072b0:	f7ff ffc8 	bl	8007244 <__swhatbuf_r>
 80072b4:	9900      	ldr	r1, [sp, #0]
 80072b6:	4605      	mov	r5, r0
 80072b8:	4630      	mov	r0, r6
 80072ba:	f7ff f963 	bl	8006584 <_malloc_r>
 80072be:	b948      	cbnz	r0, 80072d4 <__smakebuf_r+0x44>
 80072c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072c4:	059a      	lsls	r2, r3, #22
 80072c6:	d4ef      	bmi.n	80072a8 <__smakebuf_r+0x18>
 80072c8:	f023 0303 	bic.w	r3, r3, #3
 80072cc:	f043 0302 	orr.w	r3, r3, #2
 80072d0:	81a3      	strh	r3, [r4, #12]
 80072d2:	e7e3      	b.n	800729c <__smakebuf_r+0xc>
 80072d4:	4b0d      	ldr	r3, [pc, #52]	; (800730c <__smakebuf_r+0x7c>)
 80072d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80072d8:	89a3      	ldrh	r3, [r4, #12]
 80072da:	6020      	str	r0, [r4, #0]
 80072dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e0:	81a3      	strh	r3, [r4, #12]
 80072e2:	9b00      	ldr	r3, [sp, #0]
 80072e4:	6163      	str	r3, [r4, #20]
 80072e6:	9b01      	ldr	r3, [sp, #4]
 80072e8:	6120      	str	r0, [r4, #16]
 80072ea:	b15b      	cbz	r3, 8007304 <__smakebuf_r+0x74>
 80072ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072f0:	4630      	mov	r0, r6
 80072f2:	f000 f8d1 	bl	8007498 <_isatty_r>
 80072f6:	b128      	cbz	r0, 8007304 <__smakebuf_r+0x74>
 80072f8:	89a3      	ldrh	r3, [r4, #12]
 80072fa:	f023 0303 	bic.w	r3, r3, #3
 80072fe:	f043 0301 	orr.w	r3, r3, #1
 8007302:	81a3      	strh	r3, [r4, #12]
 8007304:	89a0      	ldrh	r0, [r4, #12]
 8007306:	4305      	orrs	r5, r0
 8007308:	81a5      	strh	r5, [r4, #12]
 800730a:	e7cd      	b.n	80072a8 <__smakebuf_r+0x18>
 800730c:	0800709d 	.word	0x0800709d

08007310 <_malloc_usable_size_r>:
 8007310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007314:	1f18      	subs	r0, r3, #4
 8007316:	2b00      	cmp	r3, #0
 8007318:	bfbc      	itt	lt
 800731a:	580b      	ldrlt	r3, [r1, r0]
 800731c:	18c0      	addlt	r0, r0, r3
 800731e:	4770      	bx	lr

08007320 <_raise_r>:
 8007320:	291f      	cmp	r1, #31
 8007322:	b538      	push	{r3, r4, r5, lr}
 8007324:	4604      	mov	r4, r0
 8007326:	460d      	mov	r5, r1
 8007328:	d904      	bls.n	8007334 <_raise_r+0x14>
 800732a:	2316      	movs	r3, #22
 800732c:	6003      	str	r3, [r0, #0]
 800732e:	f04f 30ff 	mov.w	r0, #4294967295
 8007332:	bd38      	pop	{r3, r4, r5, pc}
 8007334:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007336:	b112      	cbz	r2, 800733e <_raise_r+0x1e>
 8007338:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800733c:	b94b      	cbnz	r3, 8007352 <_raise_r+0x32>
 800733e:	4620      	mov	r0, r4
 8007340:	f000 f830 	bl	80073a4 <_getpid_r>
 8007344:	462a      	mov	r2, r5
 8007346:	4601      	mov	r1, r0
 8007348:	4620      	mov	r0, r4
 800734a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800734e:	f000 b817 	b.w	8007380 <_kill_r>
 8007352:	2b01      	cmp	r3, #1
 8007354:	d00a      	beq.n	800736c <_raise_r+0x4c>
 8007356:	1c59      	adds	r1, r3, #1
 8007358:	d103      	bne.n	8007362 <_raise_r+0x42>
 800735a:	2316      	movs	r3, #22
 800735c:	6003      	str	r3, [r0, #0]
 800735e:	2001      	movs	r0, #1
 8007360:	e7e7      	b.n	8007332 <_raise_r+0x12>
 8007362:	2400      	movs	r4, #0
 8007364:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007368:	4628      	mov	r0, r5
 800736a:	4798      	blx	r3
 800736c:	2000      	movs	r0, #0
 800736e:	e7e0      	b.n	8007332 <_raise_r+0x12>

08007370 <raise>:
 8007370:	4b02      	ldr	r3, [pc, #8]	; (800737c <raise+0xc>)
 8007372:	4601      	mov	r1, r0
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	f7ff bfd3 	b.w	8007320 <_raise_r>
 800737a:	bf00      	nop
 800737c:	2000000c 	.word	0x2000000c

08007380 <_kill_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4d07      	ldr	r5, [pc, #28]	; (80073a0 <_kill_r+0x20>)
 8007384:	2300      	movs	r3, #0
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	4611      	mov	r1, r2
 800738c:	602b      	str	r3, [r5, #0]
 800738e:	f7fa f957 	bl	8001640 <_kill>
 8007392:	1c43      	adds	r3, r0, #1
 8007394:	d102      	bne.n	800739c <_kill_r+0x1c>
 8007396:	682b      	ldr	r3, [r5, #0]
 8007398:	b103      	cbz	r3, 800739c <_kill_r+0x1c>
 800739a:	6023      	str	r3, [r4, #0]
 800739c:	bd38      	pop	{r3, r4, r5, pc}
 800739e:	bf00      	nop
 80073a0:	200002e4 	.word	0x200002e4

080073a4 <_getpid_r>:
 80073a4:	f7fa b944 	b.w	8001630 <_getpid>

080073a8 <__sread>:
 80073a8:	b510      	push	{r4, lr}
 80073aa:	460c      	mov	r4, r1
 80073ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b0:	f000 f894 	bl	80074dc <_read_r>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	bfab      	itete	ge
 80073b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073ba:	89a3      	ldrhlt	r3, [r4, #12]
 80073bc:	181b      	addge	r3, r3, r0
 80073be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073c2:	bfac      	ite	ge
 80073c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80073c6:	81a3      	strhlt	r3, [r4, #12]
 80073c8:	bd10      	pop	{r4, pc}

080073ca <__swrite>:
 80073ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ce:	461f      	mov	r7, r3
 80073d0:	898b      	ldrh	r3, [r1, #12]
 80073d2:	05db      	lsls	r3, r3, #23
 80073d4:	4605      	mov	r5, r0
 80073d6:	460c      	mov	r4, r1
 80073d8:	4616      	mov	r6, r2
 80073da:	d505      	bpl.n	80073e8 <__swrite+0x1e>
 80073dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e0:	2302      	movs	r3, #2
 80073e2:	2200      	movs	r2, #0
 80073e4:	f000 f868 	bl	80074b8 <_lseek_r>
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073f2:	81a3      	strh	r3, [r4, #12]
 80073f4:	4632      	mov	r2, r6
 80073f6:	463b      	mov	r3, r7
 80073f8:	4628      	mov	r0, r5
 80073fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073fe:	f000 b817 	b.w	8007430 <_write_r>

08007402 <__sseek>:
 8007402:	b510      	push	{r4, lr}
 8007404:	460c      	mov	r4, r1
 8007406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740a:	f000 f855 	bl	80074b8 <_lseek_r>
 800740e:	1c43      	adds	r3, r0, #1
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	bf15      	itete	ne
 8007414:	6560      	strne	r0, [r4, #84]	; 0x54
 8007416:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800741a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800741e:	81a3      	strheq	r3, [r4, #12]
 8007420:	bf18      	it	ne
 8007422:	81a3      	strhne	r3, [r4, #12]
 8007424:	bd10      	pop	{r4, pc}

08007426 <__sclose>:
 8007426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742a:	f000 b813 	b.w	8007454 <_close_r>
	...

08007430 <_write_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4d07      	ldr	r5, [pc, #28]	; (8007450 <_write_r+0x20>)
 8007434:	4604      	mov	r4, r0
 8007436:	4608      	mov	r0, r1
 8007438:	4611      	mov	r1, r2
 800743a:	2200      	movs	r2, #0
 800743c:	602a      	str	r2, [r5, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	f7fa f935 	bl	80016ae <_write>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d102      	bne.n	800744e <_write_r+0x1e>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b103      	cbz	r3, 800744e <_write_r+0x1e>
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	200002e4 	.word	0x200002e4

08007454 <_close_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	4d06      	ldr	r5, [pc, #24]	; (8007470 <_close_r+0x1c>)
 8007458:	2300      	movs	r3, #0
 800745a:	4604      	mov	r4, r0
 800745c:	4608      	mov	r0, r1
 800745e:	602b      	str	r3, [r5, #0]
 8007460:	f7fa f941 	bl	80016e6 <_close>
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	d102      	bne.n	800746e <_close_r+0x1a>
 8007468:	682b      	ldr	r3, [r5, #0]
 800746a:	b103      	cbz	r3, 800746e <_close_r+0x1a>
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	bd38      	pop	{r3, r4, r5, pc}
 8007470:	200002e4 	.word	0x200002e4

08007474 <_fstat_r>:
 8007474:	b538      	push	{r3, r4, r5, lr}
 8007476:	4d07      	ldr	r5, [pc, #28]	; (8007494 <_fstat_r+0x20>)
 8007478:	2300      	movs	r3, #0
 800747a:	4604      	mov	r4, r0
 800747c:	4608      	mov	r0, r1
 800747e:	4611      	mov	r1, r2
 8007480:	602b      	str	r3, [r5, #0]
 8007482:	f7fa f93c 	bl	80016fe <_fstat>
 8007486:	1c43      	adds	r3, r0, #1
 8007488:	d102      	bne.n	8007490 <_fstat_r+0x1c>
 800748a:	682b      	ldr	r3, [r5, #0]
 800748c:	b103      	cbz	r3, 8007490 <_fstat_r+0x1c>
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	bd38      	pop	{r3, r4, r5, pc}
 8007492:	bf00      	nop
 8007494:	200002e4 	.word	0x200002e4

08007498 <_isatty_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	4d06      	ldr	r5, [pc, #24]	; (80074b4 <_isatty_r+0x1c>)
 800749c:	2300      	movs	r3, #0
 800749e:	4604      	mov	r4, r0
 80074a0:	4608      	mov	r0, r1
 80074a2:	602b      	str	r3, [r5, #0]
 80074a4:	f7fa f93b 	bl	800171e <_isatty>
 80074a8:	1c43      	adds	r3, r0, #1
 80074aa:	d102      	bne.n	80074b2 <_isatty_r+0x1a>
 80074ac:	682b      	ldr	r3, [r5, #0]
 80074ae:	b103      	cbz	r3, 80074b2 <_isatty_r+0x1a>
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	bd38      	pop	{r3, r4, r5, pc}
 80074b4:	200002e4 	.word	0x200002e4

080074b8 <_lseek_r>:
 80074b8:	b538      	push	{r3, r4, r5, lr}
 80074ba:	4d07      	ldr	r5, [pc, #28]	; (80074d8 <_lseek_r+0x20>)
 80074bc:	4604      	mov	r4, r0
 80074be:	4608      	mov	r0, r1
 80074c0:	4611      	mov	r1, r2
 80074c2:	2200      	movs	r2, #0
 80074c4:	602a      	str	r2, [r5, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	f7fa f934 	bl	8001734 <_lseek>
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	d102      	bne.n	80074d6 <_lseek_r+0x1e>
 80074d0:	682b      	ldr	r3, [r5, #0]
 80074d2:	b103      	cbz	r3, 80074d6 <_lseek_r+0x1e>
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	bd38      	pop	{r3, r4, r5, pc}
 80074d8:	200002e4 	.word	0x200002e4

080074dc <_read_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4d07      	ldr	r5, [pc, #28]	; (80074fc <_read_r+0x20>)
 80074e0:	4604      	mov	r4, r0
 80074e2:	4608      	mov	r0, r1
 80074e4:	4611      	mov	r1, r2
 80074e6:	2200      	movs	r2, #0
 80074e8:	602a      	str	r2, [r5, #0]
 80074ea:	461a      	mov	r2, r3
 80074ec:	f7fa f8c2 	bl	8001674 <_read>
 80074f0:	1c43      	adds	r3, r0, #1
 80074f2:	d102      	bne.n	80074fa <_read_r+0x1e>
 80074f4:	682b      	ldr	r3, [r5, #0]
 80074f6:	b103      	cbz	r3, 80074fa <_read_r+0x1e>
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	bd38      	pop	{r3, r4, r5, pc}
 80074fc:	200002e4 	.word	0x200002e4

08007500 <_init>:
 8007500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007502:	bf00      	nop
 8007504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007506:	bc08      	pop	{r3}
 8007508:	469e      	mov	lr, r3
 800750a:	4770      	bx	lr

0800750c <_fini>:
 800750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750e:	bf00      	nop
 8007510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007512:	bc08      	pop	{r3}
 8007514:	469e      	mov	lr, r3
 8007516:	4770      	bx	lr
