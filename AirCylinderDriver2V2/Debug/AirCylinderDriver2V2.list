
AirCylinderDriver2V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004898  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b64  08004b64  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b6c  08004b6c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b6c  08004b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08004b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  200000a0  08004c14  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08004c14  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffe2  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb8  00000000  00000000  000300b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00032070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00032cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e459  00000000  00000000  000338a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e013  00000000  00000000  00051d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd6f7  00000000  00000000  0005fd14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d40b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab0  00000000  00000000  0011d45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a0 	.word	0x200000a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004a58 	.word	0x08004a58

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000a4 	.word	0x200000a4
 8000214:	08004a58 	.word	0x08004a58

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	b29a      	uxth	r2, r3
 800052c:	230a      	movs	r3, #10
 800052e:	68b9      	ldr	r1, [r7, #8]
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <_write+0x24>)
 8000532:	f002 fe71 	bl	8003218 <HAL_UART_Transmit>
	return len;
 8000536:	687b      	ldr	r3, [r7, #4]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000120 	.word	0x20000120

08000544 <CylN>:

void CylN(uint8_t CylID){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	printf("N\r\n");
 800054e:	4812      	ldr	r0, [pc, #72]	; (8000598 <CylN+0x54>)
 8000550:	f003 fd1c 	bl	8003f8c <puts>
	HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_RESET);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	4a10      	ldr	r2, [pc, #64]	; (800059c <CylN+0x58>)
 800055a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	4a0f      	ldr	r2, [pc, #60]	; (80005a0 <CylN+0x5c>)
 8000564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000568:	2200      	movs	r2, #0
 800056a:	4619      	mov	r1, r3
 800056c:	f001 fe24 	bl	80021b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_RESET);
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	3301      	adds	r3, #1
 8000576:	4a09      	ldr	r2, [pc, #36]	; (800059c <CylN+0x58>)
 8000578:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	3301      	adds	r3, #1
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <CylN+0x5c>)
 8000584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000588:	2200      	movs	r2, #0
 800058a:	4619      	mov	r1, r3
 800058c:	f001 fe14 	bl	80021b8 <HAL_GPIO_WritePin>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	08004a70 	.word	0x08004a70
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000020 	.word	0x20000020

080005a4 <CylPush>:

void CylPush(uint8_t CylID){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
	printf("Push\r\n");
 80005ae:	4812      	ldr	r0, [pc, #72]	; (80005f8 <CylPush+0x54>)
 80005b0:	f003 fcec 	bl	8003f8c <puts>
	HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_SET);
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	4a10      	ldr	r2, [pc, #64]	; (80005fc <CylPush+0x58>)
 80005ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <CylPush+0x5c>)
 80005c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005c8:	2201      	movs	r2, #1
 80005ca:	4619      	mov	r1, r3
 80005cc:	f001 fdf4 	bl	80021b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_RESET);
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a09      	ldr	r2, [pc, #36]	; (80005fc <CylPush+0x58>)
 80005d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a07      	ldr	r2, [pc, #28]	; (8000600 <CylPush+0x5c>)
 80005e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	f001 fde4 	bl	80021b8 <HAL_GPIO_WritePin>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	08004a74 	.word	0x08004a74
 80005fc:	20000000 	.word	0x20000000
 8000600:	20000020 	.word	0x20000020

08000604 <CylPull>:

void CylPull(uint8_t CylID){
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	printf("Move B\r\n");
 800060e:	4812      	ldr	r0, [pc, #72]	; (8000658 <CylPull+0x54>)
 8000610:	f003 fcbc 	bl	8003f8c <puts>
	HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_RESET);
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4a10      	ldr	r2, [pc, #64]	; (800065c <CylPull+0x58>)
 800061a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <CylPull+0x5c>)
 8000624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000628:	2200      	movs	r2, #0
 800062a:	4619      	mov	r1, r3
 800062c:	f001 fdc4 	bl	80021b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_SET);
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	3301      	adds	r3, #1
 8000636:	4a09      	ldr	r2, [pc, #36]	; (800065c <CylPull+0x58>)
 8000638:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	3301      	adds	r3, #1
 8000642:	4a07      	ldr	r2, [pc, #28]	; (8000660 <CylPull+0x5c>)
 8000644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000648:	2201      	movs	r2, #1
 800064a:	4619      	mov	r1, r3
 800064c:	f001 fdb4 	bl	80021b8 <HAL_GPIO_WritePin>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	08004a7c 	.word	0x08004a7c
 800065c:	20000000 	.word	0x20000000
 8000660:	20000020 	.word	0x20000020

08000664 <CylThrow>:

void CylThrow(uint8_t CylID){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	printf("Throw\r\n");
 800066e:	480f      	ldr	r0, [pc, #60]	; (80006ac <CylThrow+0x48>)
 8000670:	f003 fc8c 	bl	8003f8c <puts>
	CylPush(CylID);
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff94 	bl	80005a4 <CylPush>
	HAL_Delay(DELAYMS);
 800067c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000680:	f000 fd20 	bl	80010c4 <HAL_Delay>
	CylPull(CylID);
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ffbc 	bl	8000604 <CylPull>
	HAL_Delay(DELAYMS);
 800068c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000690:	f000 fd18 	bl	80010c4 <HAL_Delay>
	CylN(CylID);
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff54 	bl	8000544 <CylN>
	CylFlag[CylID]=0;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <CylThrow+0x4c>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	54d1      	strb	r1, [r2, r3]
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	08004a84 	.word	0x08004a84
 80006b0:	200001b0 	.word	0x200001b0

080006b4 <CylRThrow>:

void CylRThrow(uint8_t CylID){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	printf("Throw\r\n");
 80006be:	480f      	ldr	r0, [pc, #60]	; (80006fc <CylRThrow+0x48>)
 80006c0:	f003 fc64 	bl	8003f8c <puts>
	CylPull(CylID);
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff9c 	bl	8000604 <CylPull>
	HAL_Delay(DELAYMS);
 80006cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d0:	f000 fcf8 	bl	80010c4 <HAL_Delay>
	CylPush(CylID);
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff64 	bl	80005a4 <CylPush>
	HAL_Delay(DELAYMS);
 80006dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e0:	f000 fcf0 	bl	80010c4 <HAL_Delay>
	CylN(CylID);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff2c 	bl	8000544 <CylN>
	CylFlag[CylID]=0;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <CylRThrow+0x4c>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	54d1      	strb	r1, [r2, r3]
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	08004a84 	.word	0x08004a84
 8000700:	200001b0 	.word	0x200001b0

08000704 <CylDrive2>:
void CylStop(uint8_t CylID){
	HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_SET);
}

void CylDrive2(uint8_t CylID){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	printf("set\r\n");
 800070e:	4819      	ldr	r0, [pc, #100]	; (8000774 <CylDrive2+0x70>)
 8000710:	f003 fc3c 	bl	8003f8c <puts>
	Flag = 1;
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <CylDrive2+0x74>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
	CylPush(CylID);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff41 	bl	80005a4 <CylPush>
	HAL_Delay(DELAYMS);
 8000722:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000726:	f000 fccd 	bl	80010c4 <HAL_Delay>
	CylPush(CylID+1);
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	3301      	adds	r3, #1
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff37 	bl	80005a4 <CylPush>
	//HAL_Delay(DELAYMS/5);
	//CylN(CylID+1);
	HAL_Delay(DELAYMS);
 8000736:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800073a:	f000 fcc3 	bl	80010c4 <HAL_Delay>
	CylPull(CylID+1);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	3301      	adds	r3, #1
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff5d 	bl	8000604 <CylPull>
	HAL_Delay(DELAYMS);
 800074a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800074e:	f000 fcb9 	bl	80010c4 <HAL_Delay>
	CylPull(CylID);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff55 	bl	8000604 <CylPull>
	HAL_Delay(DELAYMS);
 800075a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800075e:	f000 fcb1 	bl	80010c4 <HAL_Delay>
	CylFlag[CylID] =0;
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	4a05      	ldr	r2, [pc, #20]	; (800077c <CylDrive2+0x78>)
 8000766:	2100      	movs	r1, #0
 8000768:	54d1      	strb	r1, [r2, r3]



}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	08004a8c 	.word	0x08004a8c
 8000778:	200001b4 	.word	0x200001b4
 800077c:	200001b0 	.word	0x200001b0

08000780 <CylDrive1>:

void CylDrive1(uint8_t CylID){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	printf("exception2\r\n");
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <CylDrive1+0x54>)
 800078c:	f003 fbfe 	bl	8003f8c <puts>
	if(Flag == 1){
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <CylDrive1+0x58>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d110      	bne.n	80007ba <CylDrive1+0x3a>
		CylPush(0);
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff ff03 	bl	80005a4 <CylPush>
		HAL_Delay(DELAYMS);
 800079e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a2:	f000 fc8f 	bl	80010c4 <HAL_Delay>
		CylPush(1);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff fefc 	bl	80005a4 <CylPush>
		HAL_Delay(DELAYMS);
 80007ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007b0:	f000 fc88 	bl	80010c4 <HAL_Delay>
		Flag=0;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <CylDrive1+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
	}

	CylPull(CylID);
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff21 	bl	8000604 <CylPull>
	CylFlag[CylID] = 2;
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	4a05      	ldr	r2, [pc, #20]	; (80007dc <CylDrive1+0x5c>)
 80007c6:	2102      	movs	r1, #2
 80007c8:	54d1      	strb	r1, [r2, r3]
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	08004a94 	.word	0x08004a94
 80007d8:	200001b4 	.word	0x200001b4
 80007dc:	200001b0 	.word	0x200001b0

080007e0 <CylDrive3>:

void CylDrive3(uint8_t CylID){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	printf("exception2\r\n");
 80007ea:	4803      	ldr	r0, [pc, #12]	; (80007f8 <CylDrive3+0x18>)
 80007ec:	f003 fbce 	bl	8003f8c <puts>
	TxHeader.Identifier == CANID_CYL_BLARM_2;
	TxData[0] = 2;
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
		Error_Handler();
	}*/
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	08004a94 	.word	0x08004a94

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f000 fbee 	bl	8000fe2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f857 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f000 f977 	bl	8000afc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800080e:	f000 f91f 	bl	8000a50 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000812:	f000 f89d 	bl	8000950 <MX_FDCAN1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(uint8_t i=0; i<4; i++){
 8000816:	2300      	movs	r3, #0
 8000818:	71fb      	strb	r3, [r7, #7]
 800081a:	e044      	b.n	80008a6 <main+0xaa>

		  switch(CylFlag[i]){
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4a25      	ldr	r2, [pc, #148]	; (80008b4 <main+0xb8>)
 8000820:	5cd3      	ldrb	r3, [r2, r3]
 8000822:	2b08      	cmp	r3, #8
 8000824:	d83c      	bhi.n	80008a0 <main+0xa4>
 8000826:	a201      	add	r2, pc, #4	; (adr r2, 800082c <main+0x30>)
 8000828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082c:	08000851 	.word	0x08000851
 8000830:	0800085b 	.word	0x0800085b
 8000834:	08000865 	.word	0x08000865
 8000838:	0800086f 	.word	0x0800086f
 800083c:	08000879 	.word	0x08000879
 8000840:	080008a1 	.word	0x080008a1
 8000844:	08000883 	.word	0x08000883
 8000848:	0800088d 	.word	0x0800088d
 800084c:	08000897 	.word	0x08000897

		  		case 0:
		  			CylN(i);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fe76 	bl	8000544 <CylN>
		  			break;
 8000858:	e022      	b.n	80008a0 <main+0xa4>

		  		case 1:
		  			CylPush(i);
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fea1 	bl	80005a4 <CylPush>
		  			break;
 8000862:	e01d      	b.n	80008a0 <main+0xa4>

		  		case 2:
		  			CylPull(i);
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fecc 	bl	8000604 <CylPull>
		  			break;
 800086c:	e018      	b.n	80008a0 <main+0xa4>

		  		case 3:
		  			CylThrow(i);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fef7 	bl	8000664 <CylThrow>
		  			break;
 8000876:	e013      	b.n	80008a0 <main+0xa4>

		  		case 4:
		  			CylRThrow(i);
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ff1a 	bl	80006b4 <CylRThrow>
		  			break;
 8000880:	e00e      	b.n	80008a0 <main+0xa4>
		  		case 5:
		  			break;
		  		case 6:
		  			CylDrive1(i);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff7b 	bl	8000780 <CylDrive1>
		  			break;
 800088a:	e009      	b.n	80008a0 <main+0xa4>
		  		case 7:
		  			CylDrive2(i);
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ff38 	bl	8000704 <CylDrive2>
		  			break;
 8000894:	e004      	b.n	80008a0 <main+0xa4>
		  		case 8:
		  			CylDrive3(i);
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ffa1 	bl	80007e0 <CylDrive3>
		  			break;
 800089e:	bf00      	nop
	  for(uint8_t i=0; i<4; i++){
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	3301      	adds	r3, #1
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b03      	cmp	r3, #3
 80008aa:	d9b7      	bls.n	800081c <main+0x20>
		  		}

	  }

	  HAL_Delay(15);
 80008ac:	200f      	movs	r0, #15
 80008ae:	f000 fc09 	bl	80010c4 <HAL_Delay>
	  for(uint8_t i=0; i<4; i++){
 80008b2:	e7b0      	b.n	8000816 <main+0x1a>
 80008b4:	200001b0 	.word	0x200001b0

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	; 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0318 	add.w	r3, r7, #24
 80008c2:	2238      	movs	r2, #56	; 0x38
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f003 faea 	bl	8003ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008de:	f001 fc83 	bl	80021e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ec:	2340      	movs	r3, #64	; 0x40
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f4:	2302      	movs	r3, #2
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008fc:	230a      	movs	r3, #10
 80008fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000900:	2302      	movs	r3, #2
 8000902:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000904:	2302      	movs	r3, #2
 8000906:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000908:	2302      	movs	r3, #2
 800090a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 0318 	add.w	r3, r7, #24
 8000910:	4618      	mov	r0, r3
 8000912:	f001 fd0d 	bl	8002330 <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800091c:	f000 f974 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	230f      	movs	r3, #15
 8000922:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000924:	2303      	movs	r3, #3
 8000926:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2102      	movs	r1, #2
 8000938:	4618      	mov	r0, r3
 800093a:	f002 f811 	bl	8002960 <HAL_RCC_ClockConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000944:	f000 f960 	bl	8000c08 <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3750      	adds	r7, #80	; 0x50
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000956:	4b3c      	ldr	r3, [pc, #240]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 8000958:	4a3c      	ldr	r2, [pc, #240]	; (8000a4c <MX_FDCAN1_Init+0xfc>)
 800095a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800095c:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 800095e:	2200      	movs	r2, #0
 8000960:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000962:	4b39      	ldr	r3, [pc, #228]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000968:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800096e:	4b36      	ldr	r3, [pc, #216]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 8000970:	2200      	movs	r2, #0
 8000972:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 8000976:	2200      	movs	r2, #0
 8000978:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800097a:	4b33      	ldr	r3, [pc, #204]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 800097c:	2200      	movs	r2, #0
 800097e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000980:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 8000982:	2205      	movs	r2, #5
 8000984:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000986:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 8000988:	2210      	movs	r2, #16
 800098a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800098c:	4b2e      	ldr	r3, [pc, #184]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 800098e:	220d      	movs	r2, #13
 8000990:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000992:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 8000994:	2202      	movs	r2, #2
 8000996:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000998:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 800099a:	2201      	movs	r2, #1
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 800099e:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 80009a0:	2204      	movs	r2, #4
 80009a2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80009a4:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 80009a6:	2205      	movs	r2, #5
 80009a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80009aa:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 80009ac:	2204      	movs	r2, #4
 80009ae:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80009b0:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009b6:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009c2:	4821      	ldr	r0, [pc, #132]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 80009c4:	f000 fcb0 	bl	8001328 <HAL_FDCAN_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80009ce:	f000 f91b 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
  	sFilterConfig.FilterIndex = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80009da:	2302      	movs	r3, #2
 80009dc:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80009de:	2301      	movs	r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterID1 = CANID_FSTCYL;
 80009e2:	f44f 738a 	mov.w	r3, #276	; 0x114
 80009e6:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterID2 = 0x7FC;
 80009e8:	f240 73fc 	movw	r3, #2044	; 0x7fc
 80009ec:	617b      	str	r3, [r7, #20]

  	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 80009ee:	463b      	mov	r3, r7
 80009f0:	4619      	mov	r1, r3
 80009f2:	4815      	ldr	r0, [pc, #84]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 80009f4:	f000 fdf2 	bl	80015dc <HAL_FDCAN_ConfigFilter>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_FDCAN1_Init+0xb2>
  		Error_Handler();
 80009fe:	f000 f903 	bl	8000c08 <Error_Handler>
  	}
  	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8000a02:	2300      	movs	r3, #0
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2300      	movs	r3, #0
 8000a08:	2202      	movs	r2, #2
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	480e      	ldr	r0, [pc, #56]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 8000a0e:	f000 fe3f 	bl	8001690 <HAL_FDCAN_ConfigGlobalFilter>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_FDCAN1_Init+0xcc>
  		Error_Handler();
 8000a18:	f000 f8f6 	bl	8000c08 <Error_Handler>
  	}

  	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 8000a1e:	f000 fe68 	bl	80016f2 <HAL_FDCAN_Start>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_FDCAN1_Init+0xdc>
  		Error_Handler();
 8000a28:	f000 f8ee 	bl	8000c08 <Error_Handler>
  	}
  	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_FDCAN1_Init+0xf8>)
 8000a32:	f000 ff61 	bl	80018f8 <HAL_FDCAN_ActivateNotification>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_FDCAN1_Init+0xf0>
  	  Error_Handler();
 8000a3c:	f000 f8e4 	bl	8000c08 <Error_Handler>
  	}

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200000bc 	.word	0x200000bc
 8000a4c:	40006400 	.word	0x40006400

08000a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a54:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <MX_USART2_UART_Init+0xa0>)
 8000a56:	4a27      	ldr	r2, [pc, #156]	; (8000af4 <MX_USART2_UART_Init+0xa4>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5a:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <MX_USART2_UART_Init+0xa0>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <MX_USART2_UART_Init+0xa0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <MX_USART2_UART_Init+0xa0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <MX_USART2_UART_Init+0xa0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <MX_USART2_UART_Init+0xa0>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_USART2_UART_Init+0xa0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <MX_USART2_UART_Init+0xa0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_USART2_UART_Init+0xa0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <MX_USART2_UART_Init+0xa0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_USART2_UART_Init+0xa0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a98:	4815      	ldr	r0, [pc, #84]	; (8000af0 <MX_USART2_UART_Init+0xa0>)
 8000a9a:	f002 fb6d 	bl	8003178 <HAL_UART_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000aa4:	f000 f8b0 	bl	8000c08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4811      	ldr	r0, [pc, #68]	; (8000af0 <MX_USART2_UART_Init+0xa0>)
 8000aac:	f003 f904 	bl	8003cb8 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ab6:	f000 f8a7 	bl	8000c08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <MX_USART2_UART_Init+0xa0>)
 8000abe:	f003 f939 	bl	8003d34 <HAL_UARTEx_SetRxFifoThreshold>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ac8:	f000 f89e 	bl	8000c08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <MX_USART2_UART_Init+0xa0>)
 8000ace:	f003 f8ba 	bl	8003c46 <HAL_UARTEx_DisableFifoMode>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ad8:	f000 f896 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  setbuf(stdout, NULL);
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_USART2_UART_Init+0xa8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 fa59 	bl	8003f9c <setbuf>
  /* USER CODE END USART2_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000120 	.word	0x20000120
 8000af4:	40004400 	.word	0x40004400
 8000af8:	2000003c 	.word	0x2000003c

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <MX_GPIO_Init+0xa8>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a23      	ldr	r2, [pc, #140]	; (8000ba4 <MX_GPIO_Init+0xa8>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_GPIO_Init+0xa8>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_GPIO_Init+0xa8>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <MX_GPIO_Init+0xa8>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_GPIO_Init+0xa8>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CYL1A_Pin|CYL1B_Pin|CYL2A_Pin|CYL2B_Pin
 8000b42:	2200      	movs	r2, #0
 8000b44:	f240 7103 	movw	r1, #1795	; 0x703
 8000b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4c:	f001 fb34 	bl	80021b8 <HAL_GPIO_WritePin>
                          |CYL3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CYL3B_Pin|CYL4A_Pin|CYL4B_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 719c 	mov.w	r1, #312	; 0x138
 8000b56:	4814      	ldr	r0, [pc, #80]	; (8000ba8 <MX_GPIO_Init+0xac>)
 8000b58:	f001 fb2e 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CYL1A_Pin CYL1B_Pin CYL2A_Pin CYL2B_Pin
                           CYL3A_Pin */
  GPIO_InitStruct.Pin = CYL1A_Pin|CYL1B_Pin|CYL2A_Pin|CYL2B_Pin
 8000b5c:	f240 7303 	movw	r3, #1795	; 0x703
 8000b60:	60fb      	str	r3, [r7, #12]
                          |CYL3A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b78:	f001 f99c 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CYL3B_Pin CYL4A_Pin CYL4B_Pin LD2_Pin */
  GPIO_InitStruct.Pin = CYL3B_Pin|CYL4A_Pin|CYL4B_Pin|LD2_Pin;
 8000b7c:	f44f 739c 	mov.w	r3, #312	; 0x138
 8000b80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	4619      	mov	r1, r3
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_GPIO_Init+0xac>)
 8000b96:	f001 f98d 	bl	8001eb4 <HAL_GPIO_Init>

}
 8000b9a:	bf00      	nop
 8000b9c:	3720      	adds	r7, #32
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	48000400 	.word	0x48000400

08000bac <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08e      	sub	sp, #56	; 0x38
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[1];
	uint8_t CylID;

	if (hfdcan == &hfdcan1) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d119      	bne.n	8000bf2 <HAL_FDCAN_RxFifo0Callback+0x46>
		printf("Get message\r\n");
 8000bbe:	4810      	ldr	r0, [pc, #64]	; (8000c00 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8000bc0:	f003 f9e4 	bl	8003f8c <puts>
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000bc4:	f107 0308 	add.w	r3, r7, #8
 8000bc8:	f107 020c 	add.w	r2, r7, #12
 8000bcc:	2140      	movs	r1, #64	; 0x40
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 fdb8 	bl	8001744 <HAL_FDCAN_GetRxMessage>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_FDCAN_RxFifo0Callback+0x32>
			Error_Handler();
 8000bda:	f000 f815 	bl	8000c08 <Error_Handler>
		}
		CylID = RxHeader.Identifier - CANID_FSTCYL;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	3b14      	subs	r3, #20
 8000be4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		CylFlag[CylID] = RxData[0];
 8000be8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000bec:	7a39      	ldrb	r1, [r7, #8]
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8000bf0:	54d1      	strb	r1, [r2, r3]
		//HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], RxData[0]);

		//printf("Motor%x:%d\r\n", RxHeader.Identifier- 0x201, actMotorVel[MOTOR1]); //index is motorID-201 (0x201 - 0x201 =0)
		//Motor%x:RxHeader.Identifier- 0x201,
	}
}
 8000bf2:	bf00      	nop
 8000bf4:	3738      	adds	r7, #56	; 0x38
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200000bc 	.word	0x200000bc
 8000c00:	08004aa0 	.word	0x08004aa0
 8000c04:	200001b0 	.word	0x200001b0

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_MspInit+0x44>)
 8000c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <HAL_MspInit+0x44>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6613      	str	r3, [r2, #96]	; 0x60
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <HAL_MspInit+0x44>)
 8000c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_MspInit+0x44>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_MspInit+0x44>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_MspInit+0x44>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b09a      	sub	sp, #104	; 0x68
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	2244      	movs	r2, #68	; 0x44
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f003 f90f 	bl	8003ea0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a28      	ldr	r2, [pc, #160]	; (8000d28 <HAL_FDCAN_MspInit+0xcc>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d149      	bne.n	8000d20 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c96:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 f87b 	bl	8002d98 <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000ca8:	f7ff ffae 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000cac:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <HAL_FDCAN_MspInit+0xd0>)
 8000cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb0:	4a1e      	ldr	r2, [pc, #120]	; (8000d2c <HAL_FDCAN_MspInit+0xd0>)
 8000cb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cb6:	6593      	str	r3, [r2, #88]	; 0x58
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <HAL_FDCAN_MspInit+0xd0>)
 8000cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_FDCAN_MspInit+0xd0>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc8:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <HAL_FDCAN_MspInit+0xd0>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_FDCAN_MspInit+0xd0>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cdc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ce0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000cee:	2309      	movs	r3, #9
 8000cf0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfc:	f001 f8da 	bl	8001eb4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2015      	movs	r0, #21
 8000d06:	f000 fada 	bl	80012be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000d0a:	2015      	movs	r0, #21
 8000d0c:	f000 faf1 	bl	80012f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	2016      	movs	r0, #22
 8000d16:	f000 fad2 	bl	80012be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000d1a:	2016      	movs	r0, #22
 8000d1c:	f000 fae9 	bl	80012f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	3768      	adds	r7, #104	; 0x68
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40006400 	.word	0x40006400
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b09a      	sub	sp, #104	; 0x68
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	2244      	movs	r2, #68	; 0x44
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f003 f8a5 	bl	8003ea0 <memset>
  if(huart->Instance==USART2)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1f      	ldr	r2, [pc, #124]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d136      	bne.n	8000dce <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 f813 	bl	8002d98 <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d78:	f7ff ff46 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_UART_MspInit+0xac>)
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d80:	4a16      	ldr	r2, [pc, #88]	; (8000ddc <HAL_UART_MspInit+0xac>)
 8000d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d86:	6593      	str	r3, [r2, #88]	; 0x58
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_UART_MspInit+0xac>)
 8000d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_UART_MspInit+0xac>)
 8000d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d98:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <HAL_UART_MspInit+0xac>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_UART_MspInit+0xac>)
 8000da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000dac:	230c      	movs	r3, #12
 8000dae:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dca:	f001 f873 	bl	8001eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	3768      	adds	r7, #104	; 0x68
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	40021000 	.word	0x40021000

08000de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <NMI_Handler+0x4>

08000de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <MemManage_Handler+0x4>

08000df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <UsageFault_Handler+0x4>

08000dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2c:	f000 f92c 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <FDCAN1_IT0_IRQHandler+0x10>)
 8000e3a:	f000 fe43 	bl	8001ac4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200000bc 	.word	0x200000bc

08000e48 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <FDCAN1_IT1_IRQHandler+0x10>)
 8000e4e:	f000 fe39 	bl	8001ac4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200000bc 	.word	0x200000bc

08000e5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	e00a      	b.n	8000e84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e6e:	f3af 8000 	nop.w
 8000e72:	4601      	mov	r1, r0
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	b2ca      	uxtb	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf0      	blt.n	8000e6e <_read+0x12>
	}

return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ebe:	605a      	str	r2, [r3, #4]
	return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_isatty>:

int _isatty(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
	return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d207      	bcs.n	8000f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f30:	f002 ff8c 	bl	8003e4c <__errno>
 8000f34:	4603      	mov	r3, r0
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	e009      	b.n	8000f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <_sbrk+0x64>)
 8000f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20008000 	.word	0x20008000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	200001b8 	.word	0x200001b8
 8000f68:	200001d0 	.word	0x200001d0

08000f6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f92:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f96:	490e      	ldr	r1, [pc, #56]	; (8000fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f98:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <LoopForever+0xe>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fac:	4c0b      	ldr	r4, [pc, #44]	; (8000fdc <LoopForever+0x16>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fba:	f7ff ffd7 	bl	8000f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f002 ff4b 	bl	8003e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc2:	f7ff fc1b 	bl	80007fc <main>

08000fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc6:	e7fe      	b.n	8000fc6 <LoopForever>
  ldr   r0, =_estack
 8000fc8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000fd4:	08004b74 	.word	0x08004b74
  ldr r2, =_sbss
 8000fd8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000fdc:	200001d0 	.word	0x200001d0

08000fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_2_IRQHandler>

08000fe2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f95b 	bl	80012a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f000 f80e 	bl	8001014 <HAL_InitTick>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	e001      	b.n	8001008 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001004:	f7ff fe06 	bl	8000c14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001008:	79fb      	ldrb	r3, [r7, #7]

}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_InitTick+0x68>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d022      	beq.n	800106e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_InitTick+0x6c>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_InitTick+0x68>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001034:	fbb1 f3f3 	udiv	r3, r1, r3
 8001038:	fbb2 f3f3 	udiv	r3, r2, r3
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f966 	bl	800130e <HAL_SYSTICK_Config>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10f      	bne.n	8001068 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	d809      	bhi.n	8001062 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104e:	2200      	movs	r2, #0
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	f04f 30ff 	mov.w	r0, #4294967295
 8001056:	f000 f932 	bl	80012be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_InitTick+0x70>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	e007      	b.n	8001072 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	e004      	b.n	8001072 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e001      	b.n	8001072 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000038 	.word	0x20000038
 8001080:	20000030 	.word	0x20000030
 8001084:	20000034 	.word	0x20000034

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x1c>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x20>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4413      	add	r3, r2
 8001096:	4a03      	ldr	r2, [pc, #12]	; (80010a4 <HAL_IncTick+0x1c>)
 8001098:	6013      	str	r3, [r2, #0]
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	200001bc 	.word	0x200001bc
 80010a8:	20000038 	.word	0x20000038

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	200001bc 	.word	0x200001bc

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff ffee 	bl	80010ac <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d004      	beq.n	80010e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_Delay+0x40>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e8:	bf00      	nop
 80010ea:	f7ff ffdf 	bl	80010ac <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d8f7      	bhi.n	80010ea <HAL_Delay+0x26>
  {
  }
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000038 	.word	0x20000038

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	db0b      	blt.n	8001196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 021f 	and.w	r2, r3, #31
 8001184:	4907      	ldr	r1, [pc, #28]	; (80011a4 <__NVIC_EnableIRQ+0x38>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	2001      	movs	r0, #1
 800118e:	fa00 f202 	lsl.w	r2, r0, r2
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	; (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	; (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
         );
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001274:	d301      	bcc.n	800127a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001276:	2301      	movs	r3, #1
 8001278:	e00f      	b.n	800129a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <SysTick_Config+0x40>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001282:	210f      	movs	r1, #15
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f7ff ff8e 	bl	80011a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <SysTick_Config+0x40>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <SysTick_Config+0x40>)
 8001294:	2207      	movs	r2, #7
 8001296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	e000e010 	.word	0xe000e010

080012a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ff29 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012cc:	f7ff ff40 	bl	8001150 <__NVIC_GetPriorityGrouping>
 80012d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f7ff ff90 	bl	80011fc <NVIC_EncodePriority>
 80012dc:	4602      	mov	r2, r0
 80012de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff5f 	bl	80011a8 <__NVIC_SetPriority>
}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff33 	bl	800116c <__NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffa4 	bl	8001264 <SysTick_Config>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e147      	b.n	80015ca <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d106      	bne.n	8001354 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fc84 	bl	8000c5c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	699a      	ldr	r2, [r3, #24]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0210 	bic.w	r2, r2, #16
 8001362:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001364:	f7ff fea2 	bl	80010ac <HAL_GetTick>
 8001368:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800136a:	e012      	b.n	8001392 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800136c:	f7ff fe9e 	bl	80010ac <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b0a      	cmp	r3, #10
 8001378:	d90b      	bls.n	8001392 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137e:	f043 0201 	orr.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2203      	movs	r2, #3
 800138a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e11b      	b.n	80015ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	2b08      	cmp	r3, #8
 800139e:	d0e5      	beq.n	800136c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	699a      	ldr	r2, [r3, #24]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013b0:	f7ff fe7c 	bl	80010ac <HAL_GetTick>
 80013b4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80013b6:	e012      	b.n	80013de <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013b8:	f7ff fe78 	bl	80010ac <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b0a      	cmp	r3, #10
 80013c4:	d90b      	bls.n	80013de <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ca:	f043 0201 	orr.w	r2, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2203      	movs	r2, #3
 80013d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e0f5      	b.n	80015ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0e5      	beq.n	80013b8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	699a      	ldr	r2, [r3, #24]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0202 	orr.w	r2, r2, #2
 80013fa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a74      	ldr	r2, [pc, #464]	; (80015d4 <HAL_FDCAN_Init+0x2ac>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d103      	bne.n	800140e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001406:	4a74      	ldr	r2, [pc, #464]	; (80015d8 <HAL_FDCAN_Init+0x2b0>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7c1b      	ldrb	r3, [r3, #16]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d108      	bne.n	8001428 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	699a      	ldr	r2, [r3, #24]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001424:	619a      	str	r2, [r3, #24]
 8001426:	e007      	b.n	8001438 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699a      	ldr	r2, [r3, #24]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001436:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7c5b      	ldrb	r3, [r3, #17]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d108      	bne.n	8001452 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699a      	ldr	r2, [r3, #24]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800144e:	619a      	str	r2, [r3, #24]
 8001450:	e007      	b.n	8001462 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	699a      	ldr	r2, [r3, #24]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001460:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7c9b      	ldrb	r3, [r3, #18]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d108      	bne.n	800147c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	699a      	ldr	r2, [r3, #24]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001478:	619a      	str	r2, [r3, #24]
 800147a:	e007      	b.n	800148c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	699a      	ldr	r2, [r3, #24]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800148a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	699a      	ldr	r2, [r3, #24]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80014b0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0210 	bic.w	r2, r2, #16
 80014c0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d108      	bne.n	80014dc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699a      	ldr	r2, [r3, #24]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f042 0204 	orr.w	r2, r2, #4
 80014d8:	619a      	str	r2, [r3, #24]
 80014da:	e02c      	b.n	8001536 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d028      	beq.n	8001536 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d01c      	beq.n	8001526 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	699a      	ldr	r2, [r3, #24]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014fa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0210 	orr.w	r2, r2, #16
 800150a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b03      	cmp	r3, #3
 8001512:	d110      	bne.n	8001536 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699a      	ldr	r2, [r3, #24]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0220 	orr.w	r2, r2, #32
 8001522:	619a      	str	r2, [r3, #24]
 8001524:	e007      	b.n	8001536 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	699a      	ldr	r2, [r3, #24]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 0220 	orr.w	r2, r2, #32
 8001534:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	3b01      	subs	r3, #1
 800153c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	3b01      	subs	r3, #1
 8001544:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001546:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800154e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	3b01      	subs	r3, #1
 8001558:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800155e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001560:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800156a:	d115      	bne.n	8001598 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	3b01      	subs	r3, #1
 8001578:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800157a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	3b01      	subs	r3, #1
 8001582:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001584:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	3b01      	subs	r3, #1
 800158e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001594:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001596:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 fc2a 	bl	8001e08 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40006400 	.word	0x40006400
 80015d8:	40006500 	.word	0x40006500

080015dc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80015ec:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80015ee:	7dfb      	ldrb	r3, [r7, #23]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d002      	beq.n	80015fa <HAL_FDCAN_ConfigFilter+0x1e>
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d13d      	bne.n	8001676 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d119      	bne.n	8001636 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800160e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001616:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e01d      	b.n	8001672 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	075a      	lsls	r2, r3, #29
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	079a      	lsls	r2, r3, #30
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4313      	orrs	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	4413      	add	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3304      	adds	r3, #4
 800166a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	e006      	b.n	8001684 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167a:	f043 0202 	orr.w	r2, r3, #2
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
  }
}
 8001684:	4618      	mov	r0, r3
 8001686:	371c      	adds	r7, #28
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d116      	bne.n	80016d8 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016b2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	011a      	lsls	r2, r3, #4
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	431a      	orrs	r2, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	431a      	orrs	r2, r3
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	431a      	orrs	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e006      	b.n	80016e6 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016dc:	f043 0204 	orr.w	r2, r3, #4
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
  }
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b01      	cmp	r3, #1
 8001704:	d110      	bne.n	8001728 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2202      	movs	r2, #2
 800170a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699a      	ldr	r2, [r3, #24]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0201 	bic.w	r2, r2, #1
 800171c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	e006      	b.n	8001736 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172c:	f043 0204 	orr.w	r2, r3, #4
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
  }
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001744:	b480      	push	{r7}
 8001746:	b08b      	sub	sp, #44	; 0x2c
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001758:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800175a:	7efb      	ldrb	r3, [r7, #27]
 800175c:	2b02      	cmp	r3, #2
 800175e:	f040 80bc 	bne.w	80018da <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2b40      	cmp	r3, #64	; 0x40
 8001766:	d121      	bne.n	80017ac <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001770:	f003 030f 	and.w	r3, r3, #15
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0af      	b.n	80018e8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	4613      	mov	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	e020      	b.n	80017ee <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d107      	bne.n	80017cc <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e08d      	b.n	80018e8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	4613      	mov	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d107      	bne.n	8001812 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	0c9b      	lsrs	r3, r3, #18
 8001808:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	e005      	b.n	800181e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	3304      	adds	r3, #4
 800183a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b29a      	uxth	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	0e1b      	lsrs	r3, r3, #24
 8001870:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0fda      	lsrs	r2, r3, #31
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	3304      	adds	r3, #4
 8001886:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
 8001890:	e00a      	b.n	80018a8 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	441a      	add	r2, r3
 8001898:	6839      	ldr	r1, [r7, #0]
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	440b      	add	r3, r1
 800189e:	7812      	ldrb	r2, [r2, #0]
 80018a0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	3301      	adds	r3, #1
 80018a6:	623b      	str	r3, [r7, #32]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0c1b      	lsrs	r3, r3, #16
 80018ae:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80018b0:	5cd3      	ldrb	r3, [r2, r3]
 80018b2:	461a      	mov	r2, r3
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d3eb      	bcc.n	8001892 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2b40      	cmp	r3, #64	; 0x40
 80018be:	d105      	bne.n	80018cc <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80018ca:	e004      	b.n	80018d6 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e006      	b.n	80018e8 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018de:	f043 0208 	orr.w	r2, r3, #8
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
  }
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	372c      	adds	r7, #44	; 0x2c
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	08004ac8 	.word	0x08004ac8

080018f8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800190a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d003      	beq.n	800191a <HAL_FDCAN_ActivateNotification+0x22>
 8001912:	7dfb      	ldrb	r3, [r7, #23]
 8001914:	2b02      	cmp	r3, #2
 8001916:	f040 80c8 	bne.w	8001aaa <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001920:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	2b00      	cmp	r3, #0
 800192a:	d004      	beq.n	8001936 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d03b      	beq.n	80019ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800193c:	2b00      	cmp	r3, #0
 800193e:	d004      	beq.n	800194a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d031      	beq.n	80019ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b00      	cmp	r3, #0
 800195c:	d027      	beq.n	80019ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d01d      	beq.n	80019ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001978:	2b00      	cmp	r3, #0
 800197a:	d004      	beq.n	8001986 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b00      	cmp	r3, #0
 8001984:	d013      	beq.n	80019ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800198c:	2b00      	cmp	r3, #0
 800198e:	d004      	beq.n	800199a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	f003 0320 	and.w	r3, r3, #32
 8001996:	2b00      	cmp	r3, #0
 8001998:	d009      	beq.n	80019ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00c      	beq.n	80019be <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d107      	bne.n	80019be <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 0201 	orr.w	r2, r2, #1
 80019bc:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d004      	beq.n	80019d2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d13b      	bne.n	8001a4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d131      	bne.n	8001a4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d127      	bne.n	8001a4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d11d      	bne.n	8001a4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d113      	bne.n	8001a4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00c      	beq.n	8001a5a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d007      	beq.n	8001a5a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0202 	orr.w	r2, r2, #2
 8001a58:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d009      	beq.n	8001a78 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e006      	b.n	8001ab8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	f043 0202 	orr.w	r2, r3, #2
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
  }
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af6:	6a3a      	ldr	r2, [r7, #32]
 8001af8:	4013      	ands	r3, r2
 8001afa:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b06:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001b1e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b36:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4013      	ands	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00d      	beq.n	8001b6e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2240      	movs	r2, #64	; 0x40
 8001b66:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f92e 	bl	8001dca <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d01b      	beq.n	8001bb4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d014      	beq.n	8001bb4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b92:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001baa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001bac:	6939      	ldr	r1, [r7, #16]
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f8ec 	bl	8001d8c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001bc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f8b6 	bl	8001d36 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d007      	beq.n	8001be0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6a3a      	ldr	r2, [r7, #32]
 8001bd6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001bd8:	6a39      	ldr	r1, [r7, #32]
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7fe ffe6 	bl	8000bac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001bee:	69f9      	ldr	r1, [r7, #28]
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f8ab 	bl	8001d4c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00e      	beq.n	8001c22 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f8a0 	bl	8001d62 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01a      	beq.n	8001c66 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d013      	beq.n	8001c66 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c46:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4013      	ands	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001c5e:	68f9      	ldr	r1, [r7, #12]
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f888 	bl	8001d76 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00e      	beq.n	8001c92 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d007      	beq.n	8001c92 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c8a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f888 	bl	8001da2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00e      	beq.n	8001cbe <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cb6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f87c 	bl	8001db6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d011      	beq.n	8001cf0 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00a      	beq.n	8001cf0 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ce2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d007      	beq.n	8001d06 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001cfe:	6979      	ldr	r1, [r7, #20]
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f876 	bl	8001df2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d009      	beq.n	8001d20 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d002      	beq.n	8001d2e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f858 	bl	8001dde <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	; 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001e10:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001e12:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e22:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2a:	041a      	lsls	r2, r3, #16
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e48:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e50:	061a      	lsls	r2, r3, #24
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	e005      	b.n	8001e96 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3304      	adds	r3, #4
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d3f3      	bcc.n	8001e8a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	4000a400 	.word	0x4000a400

08001eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ec2:	e15a      	b.n	800217a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2101      	movs	r1, #1
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 814c 	beq.w	8002174 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d005      	beq.n	8001ef4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d130      	bne.n	8001f56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f003 0201 	and.w	r2, r3, #1
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d017      	beq.n	8001f92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d123      	bne.n	8001fe6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	08da      	lsrs	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3208      	adds	r2, #8
 8001fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001faa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	08da      	lsrs	r2, r3, #3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3208      	adds	r2, #8
 8001fe0:	6939      	ldr	r1, [r7, #16]
 8001fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0203 	and.w	r2, r3, #3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 80a6 	beq.w	8002174 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002028:	4b5b      	ldr	r3, [pc, #364]	; (8002198 <HAL_GPIO_Init+0x2e4>)
 800202a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202c:	4a5a      	ldr	r2, [pc, #360]	; (8002198 <HAL_GPIO_Init+0x2e4>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6613      	str	r3, [r2, #96]	; 0x60
 8002034:	4b58      	ldr	r3, [pc, #352]	; (8002198 <HAL_GPIO_Init+0x2e4>)
 8002036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002040:	4a56      	ldr	r2, [pc, #344]	; (800219c <HAL_GPIO_Init+0x2e8>)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	3302      	adds	r3, #2
 8002048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	220f      	movs	r2, #15
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800206a:	d01f      	beq.n	80020ac <HAL_GPIO_Init+0x1f8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a4c      	ldr	r2, [pc, #304]	; (80021a0 <HAL_GPIO_Init+0x2ec>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d019      	beq.n	80020a8 <HAL_GPIO_Init+0x1f4>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a4b      	ldr	r2, [pc, #300]	; (80021a4 <HAL_GPIO_Init+0x2f0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <HAL_GPIO_Init+0x1f0>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a4a      	ldr	r2, [pc, #296]	; (80021a8 <HAL_GPIO_Init+0x2f4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00d      	beq.n	80020a0 <HAL_GPIO_Init+0x1ec>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a49      	ldr	r2, [pc, #292]	; (80021ac <HAL_GPIO_Init+0x2f8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d007      	beq.n	800209c <HAL_GPIO_Init+0x1e8>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a48      	ldr	r2, [pc, #288]	; (80021b0 <HAL_GPIO_Init+0x2fc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d101      	bne.n	8002098 <HAL_GPIO_Init+0x1e4>
 8002094:	2305      	movs	r3, #5
 8002096:	e00a      	b.n	80020ae <HAL_GPIO_Init+0x1fa>
 8002098:	2306      	movs	r3, #6
 800209a:	e008      	b.n	80020ae <HAL_GPIO_Init+0x1fa>
 800209c:	2304      	movs	r3, #4
 800209e:	e006      	b.n	80020ae <HAL_GPIO_Init+0x1fa>
 80020a0:	2303      	movs	r3, #3
 80020a2:	e004      	b.n	80020ae <HAL_GPIO_Init+0x1fa>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e002      	b.n	80020ae <HAL_GPIO_Init+0x1fa>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <HAL_GPIO_Init+0x1fa>
 80020ac:	2300      	movs	r3, #0
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	f002 0203 	and.w	r2, r2, #3
 80020b4:	0092      	lsls	r2, r2, #2
 80020b6:	4093      	lsls	r3, r2
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020be:	4937      	ldr	r1, [pc, #220]	; (800219c <HAL_GPIO_Init+0x2e8>)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	3302      	adds	r3, #2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020cc:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <HAL_GPIO_Init+0x300>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020f0:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <HAL_GPIO_Init+0x300>)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020f6:	4b2f      	ldr	r3, [pc, #188]	; (80021b4 <HAL_GPIO_Init+0x300>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800211a:	4a26      	ldr	r2, [pc, #152]	; (80021b4 <HAL_GPIO_Init+0x300>)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002120:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_GPIO_Init+0x300>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002144:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <HAL_GPIO_Init+0x300>)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_GPIO_Init+0x300>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	43db      	mvns	r3, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800216e:	4a11      	ldr	r2, [pc, #68]	; (80021b4 <HAL_GPIO_Init+0x300>)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3301      	adds	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	f47f ae9d 	bne.w	8001ec4 <HAL_GPIO_Init+0x10>
  }
}
 800218a:	bf00      	nop
 800218c:	bf00      	nop
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	40021000 	.word	0x40021000
 800219c:	40010000 	.word	0x40010000
 80021a0:	48000400 	.word	0x48000400
 80021a4:	48000800 	.word	0x48000800
 80021a8:	48000c00 	.word	0x48000c00
 80021ac:	48001000 	.word	0x48001000
 80021b0:	48001400 	.word	0x48001400
 80021b4:	40010400 	.word	0x40010400

080021b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021c8:	787b      	ldrb	r3, [r7, #1]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021d4:	e002      	b.n	80021dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d141      	bne.n	800227a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021f6:	4b4b      	ldr	r3, [pc, #300]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002202:	d131      	bne.n	8002268 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002204:	4b47      	ldr	r3, [pc, #284]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800220a:	4a46      	ldr	r2, [pc, #280]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002210:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002214:	4b43      	ldr	r3, [pc, #268]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800221c:	4a41      	ldr	r2, [pc, #260]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002222:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2232      	movs	r2, #50	; 0x32
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	4a3f      	ldr	r2, [pc, #252]	; (800232c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	0c9b      	lsrs	r3, r3, #18
 8002236:	3301      	adds	r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800223a:	e002      	b.n	8002242 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3b01      	subs	r3, #1
 8002240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002242:	4b38      	ldr	r3, [pc, #224]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224e:	d102      	bne.n	8002256 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f2      	bne.n	800223c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002256:	4b33      	ldr	r3, [pc, #204]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002262:	d158      	bne.n	8002316 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e057      	b.n	8002318 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002268:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800226e:	4a2d      	ldr	r2, [pc, #180]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002274:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002278:	e04d      	b.n	8002316 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002280:	d141      	bne.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002282:	4b28      	ldr	r3, [pc, #160]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800228a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228e:	d131      	bne.n	80022f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002290:	4b24      	ldr	r3, [pc, #144]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002296:	4a23      	ldr	r2, [pc, #140]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022a8:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2232      	movs	r2, #50	; 0x32
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
 80022ba:	4a1c      	ldr	r2, [pc, #112]	; (800232c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	0c9b      	lsrs	r3, r3, #18
 80022c2:	3301      	adds	r3, #1
 80022c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c6:	e002      	b.n	80022ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022da:	d102      	bne.n	80022e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f2      	bne.n	80022c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ee:	d112      	bne.n	8002316 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e011      	b.n	8002318 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022fa:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002300:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002304:	e007      	b.n	8002316 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002310:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002314:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	40007000 	.word	0x40007000
 8002328:	20000030 	.word	0x20000030
 800232c:	431bde83 	.word	0x431bde83

08002330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e306      	b.n	8002950 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d075      	beq.n	800243a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800234e:	4b97      	ldr	r3, [pc, #604]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002358:	4b94      	ldr	r3, [pc, #592]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b0c      	cmp	r3, #12
 8002366:	d102      	bne.n	800236e <HAL_RCC_OscConfig+0x3e>
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d002      	beq.n	8002374 <HAL_RCC_OscConfig+0x44>
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b08      	cmp	r3, #8
 8002372:	d10b      	bne.n	800238c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	4b8d      	ldr	r3, [pc, #564]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d05b      	beq.n	8002438 <HAL_RCC_OscConfig+0x108>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d157      	bne.n	8002438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e2e1      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002394:	d106      	bne.n	80023a4 <HAL_RCC_OscConfig+0x74>
 8002396:	4b85      	ldr	r3, [pc, #532]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a84      	ldr	r2, [pc, #528]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e01d      	b.n	80023e0 <HAL_RCC_OscConfig+0xb0>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x98>
 80023ae:	4b7f      	ldr	r3, [pc, #508]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a7e      	ldr	r2, [pc, #504]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 80023b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b7c      	ldr	r3, [pc, #496]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7b      	ldr	r2, [pc, #492]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e00b      	b.n	80023e0 <HAL_RCC_OscConfig+0xb0>
 80023c8:	4b78      	ldr	r3, [pc, #480]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a77      	ldr	r2, [pc, #476]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 80023ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	4b75      	ldr	r3, [pc, #468]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a74      	ldr	r2, [pc, #464]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 80023da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d013      	beq.n	8002410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fe60 	bl	80010ac <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f0:	f7fe fe5c 	bl	80010ac <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e2a6      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002402:	4b6a      	ldr	r3, [pc, #424]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0xc0>
 800240e:	e014      	b.n	800243a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7fe fe4c 	bl	80010ac <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002418:	f7fe fe48 	bl	80010ac <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	; 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e292      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800242a:	4b60      	ldr	r3, [pc, #384]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0xe8>
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d075      	beq.n	8002532 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002446:	4b59      	ldr	r3, [pc, #356]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002450:	4b56      	ldr	r3, [pc, #344]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	2b0c      	cmp	r3, #12
 800245e:	d102      	bne.n	8002466 <HAL_RCC_OscConfig+0x136>
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d002      	beq.n	800246c <HAL_RCC_OscConfig+0x13c>
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	2b04      	cmp	r3, #4
 800246a:	d11f      	bne.n	80024ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800246c:	4b4f      	ldr	r3, [pc, #316]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_RCC_OscConfig+0x154>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e265      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b49      	ldr	r3, [pc, #292]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	061b      	lsls	r3, r3, #24
 8002492:	4946      	ldr	r1, [pc, #280]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002498:	4b45      	ldr	r3, [pc, #276]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fdb9 	bl	8001014 <HAL_InitTick>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d043      	beq.n	8002530 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e251      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d023      	beq.n	80024fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b4:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a3c      	ldr	r2, [pc, #240]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 80024ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe fdf4 	bl	80010ac <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c8:	f7fe fdf0 	bl	80010ac <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e23a      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024da:	4b34      	ldr	r3, [pc, #208]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e6:	4b31      	ldr	r3, [pc, #196]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	061b      	lsls	r3, r3, #24
 80024f4:	492d      	ldr	r1, [pc, #180]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
 80024fa:	e01a      	b.n	8002532 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024fc:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a2a      	ldr	r2, [pc, #168]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 8002502:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe fdd0 	bl	80010ac <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002510:	f7fe fdcc 	bl	80010ac <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e216      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002522:	4b22      	ldr	r3, [pc, #136]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x1e0>
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d041      	beq.n	80025c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01c      	beq.n	8002580 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 8002548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254c:	4a17      	ldr	r2, [pc, #92]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002556:	f7fe fda9 	bl	80010ac <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255e:	f7fe fda5 	bl	80010ac <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e1ef      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 8002572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0ef      	beq.n	800255e <HAL_RCC_OscConfig+0x22e>
 800257e:	e020      	b.n	80025c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 8002582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002586:	4a09      	ldr	r2, [pc, #36]	; (80025ac <HAL_RCC_OscConfig+0x27c>)
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002590:	f7fe fd8c 	bl	80010ac <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002596:	e00d      	b.n	80025b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002598:	f7fe fd88 	bl	80010ac <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d906      	bls.n	80025b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e1d2      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025b4:	4b8c      	ldr	r3, [pc, #560]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 80025b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1ea      	bne.n	8002598 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80a6 	beq.w	800271c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d0:	2300      	movs	r3, #0
 80025d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025d4:	4b84      	ldr	r3, [pc, #528]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_OscConfig+0x2b4>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x2b6>
 80025e4:	2300      	movs	r3, #0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00d      	beq.n	8002606 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	4b7f      	ldr	r3, [pc, #508]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	4a7e      	ldr	r2, [pc, #504]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 80025f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f4:	6593      	str	r3, [r2, #88]	; 0x58
 80025f6:	4b7c      	ldr	r3, [pc, #496]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002602:	2301      	movs	r3, #1
 8002604:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002606:	4b79      	ldr	r3, [pc, #484]	; (80027ec <HAL_RCC_OscConfig+0x4bc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d118      	bne.n	8002644 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002612:	4b76      	ldr	r3, [pc, #472]	; (80027ec <HAL_RCC_OscConfig+0x4bc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a75      	ldr	r2, [pc, #468]	; (80027ec <HAL_RCC_OscConfig+0x4bc>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800261e:	f7fe fd45 	bl	80010ac <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002626:	f7fe fd41 	bl	80010ac <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e18b      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002638:	4b6c      	ldr	r3, [pc, #432]	; (80027ec <HAL_RCC_OscConfig+0x4bc>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d108      	bne.n	800265e <HAL_RCC_OscConfig+0x32e>
 800264c:	4b66      	ldr	r3, [pc, #408]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	4a65      	ldr	r2, [pc, #404]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800265c:	e024      	b.n	80026a8 <HAL_RCC_OscConfig+0x378>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b05      	cmp	r3, #5
 8002664:	d110      	bne.n	8002688 <HAL_RCC_OscConfig+0x358>
 8002666:	4b60      	ldr	r3, [pc, #384]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266c:	4a5e      	ldr	r2, [pc, #376]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 800266e:	f043 0304 	orr.w	r3, r3, #4
 8002672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002676:	4b5c      	ldr	r3, [pc, #368]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 8002678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267c:	4a5a      	ldr	r2, [pc, #360]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002686:	e00f      	b.n	80026a8 <HAL_RCC_OscConfig+0x378>
 8002688:	4b57      	ldr	r3, [pc, #348]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	4a56      	ldr	r2, [pc, #344]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002698:	4b53      	ldr	r3, [pc, #332]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	4a52      	ldr	r2, [pc, #328]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 80026a0:	f023 0304 	bic.w	r3, r3, #4
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d016      	beq.n	80026de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7fe fcfc 	bl	80010ac <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b8:	f7fe fcf8 	bl	80010ac <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e140      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ce:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ed      	beq.n	80026b8 <HAL_RCC_OscConfig+0x388>
 80026dc:	e015      	b.n	800270a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026de:	f7fe fce5 	bl	80010ac <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e6:	f7fe fce1 	bl	80010ac <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e129      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026fc:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1ed      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800270a:	7ffb      	ldrb	r3, [r7, #31]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d105      	bne.n	800271c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002710:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 8002712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002714:	4a34      	ldr	r2, [pc, #208]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 8002716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b00      	cmp	r3, #0
 8002726:	d03c      	beq.n	80027a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d01c      	beq.n	800276a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002730:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 8002732:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002736:	4a2c      	ldr	r2, [pc, #176]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7fe fcb4 	bl	80010ac <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002748:	f7fe fcb0 	bl	80010ac <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0fa      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800275a:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 800275c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0ef      	beq.n	8002748 <HAL_RCC_OscConfig+0x418>
 8002768:	e01b      	b.n	80027a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 800276c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002770:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277a:	f7fe fc97 	bl	80010ac <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002782:	f7fe fc93 	bl	80010ac <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0dd      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 8002796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1ef      	bne.n	8002782 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80d1 	beq.w	800294e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ac:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b0c      	cmp	r3, #12
 80027b6:	f000 808b 	beq.w	80028d0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d15e      	bne.n	8002880 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <HAL_RCC_OscConfig+0x4b8>)
 80027c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7fe fc6d 	bl	80010ac <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d4:	e00c      	b.n	80027f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d6:	f7fe fc69 	bl	80010ac <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d905      	bls.n	80027f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e0b3      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f0:	4b59      	ldr	r3, [pc, #356]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ec      	bne.n	80027d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fc:	4b56      	ldr	r3, [pc, #344]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	4b56      	ldr	r3, [pc, #344]	; (800295c <HAL_RCC_OscConfig+0x62c>)
 8002802:	4013      	ands	r3, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6a11      	ldr	r1, [r2, #32]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800280c:	3a01      	subs	r2, #1
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	4311      	orrs	r1, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002816:	0212      	lsls	r2, r2, #8
 8002818:	4311      	orrs	r1, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800281e:	0852      	lsrs	r2, r2, #1
 8002820:	3a01      	subs	r2, #1
 8002822:	0552      	lsls	r2, r2, #21
 8002824:	4311      	orrs	r1, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800282a:	0852      	lsrs	r2, r2, #1
 800282c:	3a01      	subs	r2, #1
 800282e:	0652      	lsls	r2, r2, #25
 8002830:	4311      	orrs	r1, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002836:	06d2      	lsls	r2, r2, #27
 8002838:	430a      	orrs	r2, r1
 800283a:	4947      	ldr	r1, [pc, #284]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 800283c:	4313      	orrs	r3, r2
 800283e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002840:	4b45      	ldr	r3, [pc, #276]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a44      	ldr	r2, [pc, #272]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 8002846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800284c:	4b42      	ldr	r3, [pc, #264]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4a41      	ldr	r2, [pc, #260]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 8002852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002856:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe fc28 	bl	80010ac <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002860:	f7fe fc24 	bl	80010ac <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e06e      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002872:	4b39      	ldr	r3, [pc, #228]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x530>
 800287e:	e066      	b.n	800294e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002880:	4b35      	ldr	r3, [pc, #212]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a34      	ldr	r2, [pc, #208]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 8002886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800288a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800288c:	4b32      	ldr	r3, [pc, #200]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a31      	ldr	r2, [pc, #196]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 8002892:	f023 0303 	bic.w	r3, r3, #3
 8002896:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002898:	4b2f      	ldr	r3, [pc, #188]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a2e      	ldr	r2, [pc, #184]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 800289e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe fc00 	bl	80010ac <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b0:	f7fe fbfc 	bl	80010ac <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e046      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c2:	4b25      	ldr	r3, [pc, #148]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x580>
 80028ce:	e03e      	b.n	800294e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e039      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80028dc:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 0203 	and.w	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d12c      	bne.n	800294a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	3b01      	subs	r3, #1
 80028fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d123      	bne.n	800294a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800290e:	429a      	cmp	r2, r3
 8002910:	d11b      	bne.n	800294a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d113      	bne.n	800294a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	3b01      	subs	r3, #1
 8002930:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d109      	bne.n	800294a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	3b01      	subs	r3, #1
 8002944:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d001      	beq.n	800294e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3720      	adds	r7, #32
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	019f800c 	.word	0x019f800c

08002960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e11e      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002978:	4b91      	ldr	r3, [pc, #580]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d910      	bls.n	80029a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b8e      	ldr	r3, [pc, #568]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 020f 	bic.w	r2, r3, #15
 800298e:	498c      	ldr	r1, [pc, #560]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b8a      	ldr	r3, [pc, #552]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e106      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d073      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d129      	bne.n	8002a10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029bc:	4b81      	ldr	r3, [pc, #516]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0f4      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80029cc:	f000 f99e 	bl	8002d0c <RCC_GetSysClockFreqFromPLLSource>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4a7c      	ldr	r2, [pc, #496]	; (8002bc8 <HAL_RCC_ClockConfig+0x268>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d93f      	bls.n	8002a5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029da:	4b7a      	ldr	r3, [pc, #488]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d033      	beq.n	8002a5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d12f      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029fa:	4b72      	ldr	r3, [pc, #456]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a02:	4a70      	ldr	r2, [pc, #448]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e024      	b.n	8002a5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a18:	4b6a      	ldr	r3, [pc, #424]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d109      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0c6      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a28:	4b66      	ldr	r3, [pc, #408]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0be      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a38:	f000 f8ce 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4a61      	ldr	r2, [pc, #388]	; (8002bc8 <HAL_RCC_ClockConfig+0x268>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d909      	bls.n	8002a5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a46:	4b5f      	ldr	r3, [pc, #380]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a4e:	4a5d      	ldr	r2, [pc, #372]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a5a:	4b5a      	ldr	r3, [pc, #360]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4957      	ldr	r1, [pc, #348]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fb1e 	bl	80010ac <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7fe fb1a 	bl	80010ac <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e095      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	4b4e      	ldr	r3, [pc, #312]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 020c 	and.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d1eb      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d023      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab4:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a42      	ldr	r2, [pc, #264]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002aba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002abe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d007      	beq.n	8002adc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002acc:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ad4:	4a3b      	ldr	r2, [pc, #236]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002ad6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ada:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002adc:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4936      	ldr	r1, [pc, #216]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b80      	cmp	r3, #128	; 0x80
 8002af4:	d105      	bne.n	8002b02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002af6:	4b33      	ldr	r3, [pc, #204]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	4a32      	ldr	r2, [pc, #200]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002afc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d21d      	bcs.n	8002b4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b10:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 020f 	bic.w	r2, r3, #15
 8002b18:	4929      	ldr	r1, [pc, #164]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b20:	f7fe fac4 	bl	80010ac <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b28:	f7fe fac0 	bl	80010ac <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e03b      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_RCC_ClockConfig+0x260>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d1ed      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b58:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4917      	ldr	r1, [pc, #92]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b76:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	490f      	ldr	r1, [pc, #60]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b8a:	f000 f825 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <HAL_RCC_ClockConfig+0x264>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	490c      	ldr	r1, [pc, #48]	; (8002bcc <HAL_RCC_ClockConfig+0x26c>)
 8002b9c:	5ccb      	ldrb	r3, [r1, r3]
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <HAL_RCC_ClockConfig+0x270>)
 8002ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_RCC_ClockConfig+0x274>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fa30 	bl	8001014 <HAL_InitTick>
 8002bb4:	4603      	mov	r3, r0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40022000 	.word	0x40022000
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	04c4b400 	.word	0x04c4b400
 8002bcc:	08004ab0 	.word	0x08004ab0
 8002bd0:	20000030 	.word	0x20000030
 8002bd4:	20000034 	.word	0x20000034

08002bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002bde:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d102      	bne.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bea:	4b2a      	ldr	r3, [pc, #168]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	e047      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002bf0:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d102      	bne.n	8002c02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bfc:	4b26      	ldr	r3, [pc, #152]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	e03e      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c02:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d136      	bne.n	8002c7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c18:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	3301      	adds	r3, #1
 8002c24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c2c:	4a1a      	ldr	r2, [pc, #104]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	4a16      	ldr	r2, [pc, #88]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c36:	68d2      	ldr	r2, [r2, #12]
 8002c38:	0a12      	lsrs	r2, r2, #8
 8002c3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	617b      	str	r3, [r7, #20]
      break;
 8002c44:	e00c      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c46:	4a13      	ldr	r2, [pc, #76]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	4a10      	ldr	r2, [pc, #64]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c50:	68d2      	ldr	r2, [r2, #12]
 8002c52:	0a12      	lsrs	r2, r2, #8
 8002c54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c58:	fb02 f303 	mul.w	r3, r2, r3
 8002c5c:	617b      	str	r3, [r7, #20]
      break;
 8002c5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	0e5b      	lsrs	r3, r3, #25
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	e001      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c80:	693b      	ldr	r3, [r7, #16]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	00f42400 	.word	0x00f42400
 8002c98:	007a1200 	.word	0x007a1200

08002c9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000030 	.word	0x20000030

08002cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cb8:	f7ff fff0 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	4904      	ldr	r1, [pc, #16]	; (8002cdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cca:	5ccb      	ldrb	r3, [r1, r3]
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	08004ac0 	.word	0x08004ac0

08002ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ce4:	f7ff ffda 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0adb      	lsrs	r3, r3, #11
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4904      	ldr	r1, [pc, #16]	; (8002d08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	08004ac0 	.word	0x08004ac0

08002d0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d12:	4b1e      	ldr	r3, [pc, #120]	; (8002d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	3301      	adds	r3, #1
 8002d28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d10c      	bne.n	8002d4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d30:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d3a:	68d2      	ldr	r2, [r2, #12]
 8002d3c:	0a12      	lsrs	r2, r2, #8
 8002d3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	617b      	str	r3, [r7, #20]
    break;
 8002d48:	e00c      	b.n	8002d64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d4a:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d52:	4a0e      	ldr	r2, [pc, #56]	; (8002d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d54:	68d2      	ldr	r2, [r2, #12]
 8002d56:	0a12      	lsrs	r2, r2, #8
 8002d58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d5c:	fb02 f303 	mul.w	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]
    break;
 8002d62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	0e5b      	lsrs	r3, r3, #25
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002d7e:	687b      	ldr	r3, [r7, #4]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	007a1200 	.word	0x007a1200
 8002d94:	00f42400 	.word	0x00f42400

08002d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002da0:	2300      	movs	r3, #0
 8002da2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002da4:	2300      	movs	r3, #0
 8002da6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8098 	beq.w	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db6:	2300      	movs	r3, #0
 8002db8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dba:	4b43      	ldr	r3, [pc, #268]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10d      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	4b40      	ldr	r3, [pc, #256]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	4a3f      	ldr	r2, [pc, #252]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8002dd2:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dde:	2301      	movs	r3, #1
 8002de0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002de2:	4b3a      	ldr	r3, [pc, #232]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a39      	ldr	r2, [pc, #228]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dee:	f7fe f95d 	bl	80010ac <HAL_GetTick>
 8002df2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df4:	e009      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df6:	f7fe f959 	bl	80010ac <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d902      	bls.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	74fb      	strb	r3, [r7, #19]
        break;
 8002e08:	e005      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e0a:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0ef      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002e16:	7cfb      	ldrb	r3, [r7, #19]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d159      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01e      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d019      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e38:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e44:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4a:	4a1f      	ldr	r2, [pc, #124]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e54:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e64:	4a18      	ldr	r2, [pc, #96]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d016      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fe f919 	bl	80010ac <HAL_GetTick>
 8002e7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7c:	e00b      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe f915 	bl	80010ac <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d902      	bls.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	74fb      	strb	r3, [r7, #19]
            break;
 8002e94:	e006      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0ec      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10b      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	4903      	ldr	r1, [pc, #12]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ec2:	7cfb      	ldrb	r3, [r7, #19]
 8002ec4:	74bb      	strb	r3, [r7, #18]
 8002ec6:	e005      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ed4:	7c7b      	ldrb	r3, [r7, #17]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d105      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eda:	4ba6      	ldr	r3, [pc, #664]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ede:	4aa5      	ldr	r2, [pc, #660]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ef2:	4ba0      	ldr	r3, [pc, #640]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef8:	f023 0203 	bic.w	r2, r3, #3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	499c      	ldr	r1, [pc, #624]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f14:	4b97      	ldr	r3, [pc, #604]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1a:	f023 020c 	bic.w	r2, r3, #12
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	4994      	ldr	r1, [pc, #592]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f36:	4b8f      	ldr	r3, [pc, #572]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	498b      	ldr	r1, [pc, #556]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f58:	4b86      	ldr	r3, [pc, #536]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	4983      	ldr	r1, [pc, #524]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f7a:	4b7e      	ldr	r3, [pc, #504]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	497a      	ldr	r1, [pc, #488]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f9c:	4b75      	ldr	r3, [pc, #468]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	4972      	ldr	r1, [pc, #456]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fbe:	4b6d      	ldr	r3, [pc, #436]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	4969      	ldr	r1, [pc, #420]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fe0:	4b64      	ldr	r3, [pc, #400]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	4961      	ldr	r1, [pc, #388]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003002:	4b5c      	ldr	r3, [pc, #368]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003008:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	4958      	ldr	r1, [pc, #352]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003020:	2b00      	cmp	r3, #0
 8003022:	d015      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003024:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	4950      	ldr	r1, [pc, #320]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003042:	d105      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003044:	4b4b      	ldr	r3, [pc, #300]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a4a      	ldr	r2, [pc, #296]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800304a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800304e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003058:	2b00      	cmp	r3, #0
 800305a:	d015      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800305c:	4b45      	ldr	r3, [pc, #276]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	4942      	ldr	r1, [pc, #264]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800307a:	d105      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800307c:	4b3d      	ldr	r3, [pc, #244]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4a3c      	ldr	r2, [pc, #240]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003086:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d015      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003094:	4b37      	ldr	r3, [pc, #220]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4934      	ldr	r1, [pc, #208]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030b2:	d105      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030b4:	4b2f      	ldr	r3, [pc, #188]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4a2e      	ldr	r2, [pc, #184]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d015      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030cc:	4b29      	ldr	r3, [pc, #164]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030da:	4926      	ldr	r1, [pc, #152]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ea:	d105      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ec:	4b21      	ldr	r3, [pc, #132]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a20      	ldr	r2, [pc, #128]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d015      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003112:	4918      	ldr	r1, [pc, #96]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003122:	d105      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a12      	ldr	r2, [pc, #72]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800312a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800312e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d015      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800313c:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003142:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	490a      	ldr	r1, [pc, #40]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800315a:	d105      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a04      	ldr	r2, [pc, #16]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003166:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003168:	7cbb      	ldrb	r3, [r7, #18]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000

08003178 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e042      	b.n	8003210 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7fd fdc7 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2224      	movs	r2, #36	; 0x24
 80031a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0201 	bic.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f8c2 	bl	8003344 <UART_SetConfig>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e022      	b.n	8003210 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fb82 	bl	80038dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fc09 	bl	8003a20 <UART_CheckIdleState>
 800320e:	4603      	mov	r3, r0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	; 0x28
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800322e:	2b20      	cmp	r3, #32
 8003230:	f040 8083 	bne.w	800333a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_UART_Transmit+0x28>
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e07b      	b.n	800333c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_UART_Transmit+0x3a>
 800324e:	2302      	movs	r3, #2
 8003250:	e074      	b.n	800333c <HAL_UART_Transmit+0x124>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2221      	movs	r2, #33	; 0x21
 8003266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800326a:	f7fd ff1f 	bl	80010ac <HAL_GetTick>
 800326e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	88fa      	ldrh	r2, [r7, #6]
 8003274:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	88fa      	ldrh	r2, [r7, #6]
 800327c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003288:	d108      	bne.n	800329c <HAL_UART_Transmit+0x84>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d104      	bne.n	800329c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	e003      	b.n	80032a4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80032ac:	e02c      	b.n	8003308 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fbfc 	bl	8003ab6 <UART_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e039      	b.n	800333c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10b      	bne.n	80032e6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	3302      	adds	r3, #2
 80032e2:	61bb      	str	r3, [r7, #24]
 80032e4:	e007      	b.n	80032f6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	3301      	adds	r3, #1
 80032f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1cc      	bne.n	80032ae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2200      	movs	r2, #0
 800331c:	2140      	movs	r1, #64	; 0x40
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fbc9 	bl	8003ab6 <UART_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e006      	b.n	800333c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	e000      	b.n	800333c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800333a:	2302      	movs	r3, #2
  }
}
 800333c:	4618      	mov	r0, r3
 800333e:	3720      	adds	r7, #32
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003348:	b08c      	sub	sp, #48	; 0x30
 800334a:	af00      	add	r7, sp, #0
 800334c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	431a      	orrs	r2, r3
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	431a      	orrs	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	4313      	orrs	r3, r2
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4bab      	ldr	r3, [pc, #684]	; (8003620 <UART_SetConfig+0x2dc>)
 8003374:	4013      	ands	r3, r2
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800337c:	430b      	orrs	r3, r1
 800337e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4aa0      	ldr	r2, [pc, #640]	; (8003624 <UART_SetConfig+0x2e0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d004      	beq.n	80033b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ac:	4313      	orrs	r3, r2
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80033ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	f023 010f 	bic.w	r1, r3, #15
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a91      	ldr	r2, [pc, #580]	; (8003628 <UART_SetConfig+0x2e4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d125      	bne.n	8003434 <UART_SetConfig+0xf0>
 80033e8:	4b90      	ldr	r3, [pc, #576]	; (800362c <UART_SetConfig+0x2e8>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d81a      	bhi.n	800342c <UART_SetConfig+0xe8>
 80033f6:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <UART_SetConfig+0xb8>)
 80033f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fc:	0800340d 	.word	0x0800340d
 8003400:	0800341d 	.word	0x0800341d
 8003404:	08003415 	.word	0x08003415
 8003408:	08003425 	.word	0x08003425
 800340c:	2301      	movs	r3, #1
 800340e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003412:	e0d6      	b.n	80035c2 <UART_SetConfig+0x27e>
 8003414:	2302      	movs	r3, #2
 8003416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800341a:	e0d2      	b.n	80035c2 <UART_SetConfig+0x27e>
 800341c:	2304      	movs	r3, #4
 800341e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003422:	e0ce      	b.n	80035c2 <UART_SetConfig+0x27e>
 8003424:	2308      	movs	r3, #8
 8003426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800342a:	e0ca      	b.n	80035c2 <UART_SetConfig+0x27e>
 800342c:	2310      	movs	r3, #16
 800342e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003432:	e0c6      	b.n	80035c2 <UART_SetConfig+0x27e>
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a7d      	ldr	r2, [pc, #500]	; (8003630 <UART_SetConfig+0x2ec>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d138      	bne.n	80034b0 <UART_SetConfig+0x16c>
 800343e:	4b7b      	ldr	r3, [pc, #492]	; (800362c <UART_SetConfig+0x2e8>)
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b0c      	cmp	r3, #12
 800344a:	d82d      	bhi.n	80034a8 <UART_SetConfig+0x164>
 800344c:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <UART_SetConfig+0x110>)
 800344e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003452:	bf00      	nop
 8003454:	08003489 	.word	0x08003489
 8003458:	080034a9 	.word	0x080034a9
 800345c:	080034a9 	.word	0x080034a9
 8003460:	080034a9 	.word	0x080034a9
 8003464:	08003499 	.word	0x08003499
 8003468:	080034a9 	.word	0x080034a9
 800346c:	080034a9 	.word	0x080034a9
 8003470:	080034a9 	.word	0x080034a9
 8003474:	08003491 	.word	0x08003491
 8003478:	080034a9 	.word	0x080034a9
 800347c:	080034a9 	.word	0x080034a9
 8003480:	080034a9 	.word	0x080034a9
 8003484:	080034a1 	.word	0x080034a1
 8003488:	2300      	movs	r3, #0
 800348a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800348e:	e098      	b.n	80035c2 <UART_SetConfig+0x27e>
 8003490:	2302      	movs	r3, #2
 8003492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003496:	e094      	b.n	80035c2 <UART_SetConfig+0x27e>
 8003498:	2304      	movs	r3, #4
 800349a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800349e:	e090      	b.n	80035c2 <UART_SetConfig+0x27e>
 80034a0:	2308      	movs	r3, #8
 80034a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034a6:	e08c      	b.n	80035c2 <UART_SetConfig+0x27e>
 80034a8:	2310      	movs	r3, #16
 80034aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ae:	e088      	b.n	80035c2 <UART_SetConfig+0x27e>
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a5f      	ldr	r2, [pc, #380]	; (8003634 <UART_SetConfig+0x2f0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d125      	bne.n	8003506 <UART_SetConfig+0x1c2>
 80034ba:	4b5c      	ldr	r3, [pc, #368]	; (800362c <UART_SetConfig+0x2e8>)
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034c4:	2b30      	cmp	r3, #48	; 0x30
 80034c6:	d016      	beq.n	80034f6 <UART_SetConfig+0x1b2>
 80034c8:	2b30      	cmp	r3, #48	; 0x30
 80034ca:	d818      	bhi.n	80034fe <UART_SetConfig+0x1ba>
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d00a      	beq.n	80034e6 <UART_SetConfig+0x1a2>
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d814      	bhi.n	80034fe <UART_SetConfig+0x1ba>
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <UART_SetConfig+0x19a>
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d008      	beq.n	80034ee <UART_SetConfig+0x1aa>
 80034dc:	e00f      	b.n	80034fe <UART_SetConfig+0x1ba>
 80034de:	2300      	movs	r3, #0
 80034e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034e4:	e06d      	b.n	80035c2 <UART_SetConfig+0x27e>
 80034e6:	2302      	movs	r3, #2
 80034e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ec:	e069      	b.n	80035c2 <UART_SetConfig+0x27e>
 80034ee:	2304      	movs	r3, #4
 80034f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f4:	e065      	b.n	80035c2 <UART_SetConfig+0x27e>
 80034f6:	2308      	movs	r3, #8
 80034f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034fc:	e061      	b.n	80035c2 <UART_SetConfig+0x27e>
 80034fe:	2310      	movs	r3, #16
 8003500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003504:	e05d      	b.n	80035c2 <UART_SetConfig+0x27e>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a4b      	ldr	r2, [pc, #300]	; (8003638 <UART_SetConfig+0x2f4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d125      	bne.n	800355c <UART_SetConfig+0x218>
 8003510:	4b46      	ldr	r3, [pc, #280]	; (800362c <UART_SetConfig+0x2e8>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800351a:	2bc0      	cmp	r3, #192	; 0xc0
 800351c:	d016      	beq.n	800354c <UART_SetConfig+0x208>
 800351e:	2bc0      	cmp	r3, #192	; 0xc0
 8003520:	d818      	bhi.n	8003554 <UART_SetConfig+0x210>
 8003522:	2b80      	cmp	r3, #128	; 0x80
 8003524:	d00a      	beq.n	800353c <UART_SetConfig+0x1f8>
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d814      	bhi.n	8003554 <UART_SetConfig+0x210>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <UART_SetConfig+0x1f0>
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d008      	beq.n	8003544 <UART_SetConfig+0x200>
 8003532:	e00f      	b.n	8003554 <UART_SetConfig+0x210>
 8003534:	2300      	movs	r3, #0
 8003536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800353a:	e042      	b.n	80035c2 <UART_SetConfig+0x27e>
 800353c:	2302      	movs	r3, #2
 800353e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003542:	e03e      	b.n	80035c2 <UART_SetConfig+0x27e>
 8003544:	2304      	movs	r3, #4
 8003546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800354a:	e03a      	b.n	80035c2 <UART_SetConfig+0x27e>
 800354c:	2308      	movs	r3, #8
 800354e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003552:	e036      	b.n	80035c2 <UART_SetConfig+0x27e>
 8003554:	2310      	movs	r3, #16
 8003556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800355a:	e032      	b.n	80035c2 <UART_SetConfig+0x27e>
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a30      	ldr	r2, [pc, #192]	; (8003624 <UART_SetConfig+0x2e0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d12a      	bne.n	80035bc <UART_SetConfig+0x278>
 8003566:	4b31      	ldr	r3, [pc, #196]	; (800362c <UART_SetConfig+0x2e8>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003570:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003574:	d01a      	beq.n	80035ac <UART_SetConfig+0x268>
 8003576:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800357a:	d81b      	bhi.n	80035b4 <UART_SetConfig+0x270>
 800357c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003580:	d00c      	beq.n	800359c <UART_SetConfig+0x258>
 8003582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003586:	d815      	bhi.n	80035b4 <UART_SetConfig+0x270>
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <UART_SetConfig+0x250>
 800358c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003590:	d008      	beq.n	80035a4 <UART_SetConfig+0x260>
 8003592:	e00f      	b.n	80035b4 <UART_SetConfig+0x270>
 8003594:	2300      	movs	r3, #0
 8003596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800359a:	e012      	b.n	80035c2 <UART_SetConfig+0x27e>
 800359c:	2302      	movs	r3, #2
 800359e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035a2:	e00e      	b.n	80035c2 <UART_SetConfig+0x27e>
 80035a4:	2304      	movs	r3, #4
 80035a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035aa:	e00a      	b.n	80035c2 <UART_SetConfig+0x27e>
 80035ac:	2308      	movs	r3, #8
 80035ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035b2:	e006      	b.n	80035c2 <UART_SetConfig+0x27e>
 80035b4:	2310      	movs	r3, #16
 80035b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ba:	e002      	b.n	80035c2 <UART_SetConfig+0x27e>
 80035bc:	2310      	movs	r3, #16
 80035be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a17      	ldr	r2, [pc, #92]	; (8003624 <UART_SetConfig+0x2e0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	f040 80a8 	bne.w	800371e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d834      	bhi.n	8003640 <UART_SetConfig+0x2fc>
 80035d6:	a201      	add	r2, pc, #4	; (adr r2, 80035dc <UART_SetConfig+0x298>)
 80035d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035dc:	08003601 	.word	0x08003601
 80035e0:	08003641 	.word	0x08003641
 80035e4:	08003609 	.word	0x08003609
 80035e8:	08003641 	.word	0x08003641
 80035ec:	0800360f 	.word	0x0800360f
 80035f0:	08003641 	.word	0x08003641
 80035f4:	08003641 	.word	0x08003641
 80035f8:	08003641 	.word	0x08003641
 80035fc:	08003617 	.word	0x08003617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003600:	f7ff fb58 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8003604:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003606:	e021      	b.n	800364c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <UART_SetConfig+0x2f8>)
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800360c:	e01e      	b.n	800364c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800360e:	f7ff fae3 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8003612:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003614:	e01a      	b.n	800364c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800361c:	e016      	b.n	800364c <UART_SetConfig+0x308>
 800361e:	bf00      	nop
 8003620:	cfff69f3 	.word	0xcfff69f3
 8003624:	40008000 	.word	0x40008000
 8003628:	40013800 	.word	0x40013800
 800362c:	40021000 	.word	0x40021000
 8003630:	40004400 	.word	0x40004400
 8003634:	40004800 	.word	0x40004800
 8003638:	40004c00 	.word	0x40004c00
 800363c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800364a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 812a 	beq.w	80038a8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	4a9e      	ldr	r2, [pc, #632]	; (80038d4 <UART_SetConfig+0x590>)
 800365a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800365e:	461a      	mov	r2, r3
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	fbb3 f3f2 	udiv	r3, r3, r2
 8003666:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4413      	add	r3, r2
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	429a      	cmp	r2, r3
 8003676:	d305      	bcc.n	8003684 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	429a      	cmp	r2, r3
 8003682:	d903      	bls.n	800368c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800368a:	e10d      	b.n	80038a8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	2200      	movs	r2, #0
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	60fa      	str	r2, [r7, #12]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	4a8e      	ldr	r2, [pc, #568]	; (80038d4 <UART_SetConfig+0x590>)
 800369a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2200      	movs	r2, #0
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036ae:	f7fc fdb3 	bl	8000218 <__aeabi_uldivmod>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4610      	mov	r0, r2
 80036b8:	4619      	mov	r1, r3
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	020b      	lsls	r3, r1, #8
 80036c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036c8:	0202      	lsls	r2, r0, #8
 80036ca:	6979      	ldr	r1, [r7, #20]
 80036cc:	6849      	ldr	r1, [r1, #4]
 80036ce:	0849      	lsrs	r1, r1, #1
 80036d0:	2000      	movs	r0, #0
 80036d2:	460c      	mov	r4, r1
 80036d4:	4605      	mov	r5, r0
 80036d6:	eb12 0804 	adds.w	r8, r2, r4
 80036da:	eb43 0905 	adc.w	r9, r3, r5
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	469a      	mov	sl, r3
 80036e6:	4693      	mov	fp, r2
 80036e8:	4652      	mov	r2, sl
 80036ea:	465b      	mov	r3, fp
 80036ec:	4640      	mov	r0, r8
 80036ee:	4649      	mov	r1, r9
 80036f0:	f7fc fd92 	bl	8000218 <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4613      	mov	r3, r2
 80036fa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003702:	d308      	bcc.n	8003716 <UART_SetConfig+0x3d2>
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800370a:	d204      	bcs.n	8003716 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6a3a      	ldr	r2, [r7, #32]
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	e0c8      	b.n	80038a8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800371c:	e0c4      	b.n	80038a8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003726:	d167      	bne.n	80037f8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003728:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800372c:	2b08      	cmp	r3, #8
 800372e:	d828      	bhi.n	8003782 <UART_SetConfig+0x43e>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <UART_SetConfig+0x3f4>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	0800375d 	.word	0x0800375d
 800373c:	08003765 	.word	0x08003765
 8003740:	0800376d 	.word	0x0800376d
 8003744:	08003783 	.word	0x08003783
 8003748:	08003773 	.word	0x08003773
 800374c:	08003783 	.word	0x08003783
 8003750:	08003783 	.word	0x08003783
 8003754:	08003783 	.word	0x08003783
 8003758:	0800377b 	.word	0x0800377b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800375c:	f7ff faaa 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8003760:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003762:	e014      	b.n	800378e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003764:	f7ff fabc 	bl	8002ce0 <HAL_RCC_GetPCLK2Freq>
 8003768:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800376a:	e010      	b.n	800378e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800376c:	4b5a      	ldr	r3, [pc, #360]	; (80038d8 <UART_SetConfig+0x594>)
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003770:	e00d      	b.n	800378e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003772:	f7ff fa31 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8003776:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003778:	e009      	b.n	800378e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800377a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003780:	e005      	b.n	800378e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800378c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8089 	beq.w	80038a8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	4a4e      	ldr	r2, [pc, #312]	; (80038d4 <UART_SetConfig+0x590>)
 800379c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037a0:	461a      	mov	r2, r3
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80037a8:	005a      	lsls	r2, r3, #1
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	441a      	add	r2, r3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	2b0f      	cmp	r3, #15
 80037c0:	d916      	bls.n	80037f0 <UART_SetConfig+0x4ac>
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c8:	d212      	bcs.n	80037f0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f023 030f 	bic.w	r3, r3, #15
 80037d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	085b      	lsrs	r3, r3, #1
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	b29a      	uxth	r2, r3
 80037e0:	8bfb      	ldrh	r3, [r7, #30]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	8bfa      	ldrh	r2, [r7, #30]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	e05b      	b.n	80038a8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80037f6:	e057      	b.n	80038a8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d828      	bhi.n	8003852 <UART_SetConfig+0x50e>
 8003800:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <UART_SetConfig+0x4c4>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	0800382d 	.word	0x0800382d
 800380c:	08003835 	.word	0x08003835
 8003810:	0800383d 	.word	0x0800383d
 8003814:	08003853 	.word	0x08003853
 8003818:	08003843 	.word	0x08003843
 800381c:	08003853 	.word	0x08003853
 8003820:	08003853 	.word	0x08003853
 8003824:	08003853 	.word	0x08003853
 8003828:	0800384b 	.word	0x0800384b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800382c:	f7ff fa42 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8003830:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003832:	e014      	b.n	800385e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003834:	f7ff fa54 	bl	8002ce0 <HAL_RCC_GetPCLK2Freq>
 8003838:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800383a:	e010      	b.n	800385e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800383c:	4b26      	ldr	r3, [pc, #152]	; (80038d8 <UART_SetConfig+0x594>)
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003840:	e00d      	b.n	800385e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003842:	f7ff f9c9 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8003846:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003848:	e009      	b.n	800385e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800384a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003850:	e005      	b.n	800385e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800385c:	bf00      	nop
    }

    if (pclk != 0U)
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	2b00      	cmp	r3, #0
 8003862:	d021      	beq.n	80038a8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	4a1a      	ldr	r2, [pc, #104]	; (80038d4 <UART_SetConfig+0x590>)
 800386a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800386e:	461a      	mov	r2, r3
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	fbb3 f2f2 	udiv	r2, r3, r2
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	085b      	lsrs	r3, r3, #1
 800387c:	441a      	add	r2, r3
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	2b0f      	cmp	r3, #15
 800388c:	d909      	bls.n	80038a2 <UART_SetConfig+0x55e>
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003894:	d205      	bcs.n	80038a2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	b29a      	uxth	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60da      	str	r2, [r3, #12]
 80038a0:	e002      	b.n	80038a8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2200      	movs	r2, #0
 80038bc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2200      	movs	r2, #0
 80038c2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80038c4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3730      	adds	r7, #48	; 0x30
 80038cc:	46bd      	mov	sp, r7
 80038ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d2:	bf00      	nop
 80038d4:	08004ad8 	.word	0x08004ad8
 80038d8:	00f42400 	.word	0x00f42400

080038dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01a      	beq.n	80039f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039da:	d10a      	bne.n	80039f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  }
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a30:	f7fd fb3c 	bl	80010ac <HAL_GetTick>
 8003a34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d10e      	bne.n	8003a62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f82f 	bl	8003ab6 <UART_WaitOnFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e025      	b.n	8003aae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d10e      	bne.n	8003a8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f819 	bl	8003ab6 <UART_WaitOnFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e00f      	b.n	8003aae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b09c      	sub	sp, #112	; 0x70
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	603b      	str	r3, [r7, #0]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac6:	e0a9      	b.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ace:	f000 80a5 	beq.w	8003c1c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad2:	f7fd faeb 	bl	80010ac <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d302      	bcc.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d140      	bne.n	8003b6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003af0:	e853 3f00 	ldrex	r3, [r3]
 8003af4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003afc:	667b      	str	r3, [r7, #100]	; 0x64
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b08:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b0e:	e841 2300 	strex	r3, r2, [r1]
 8003b12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1e6      	bne.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3308      	adds	r3, #8
 8003b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b24:	e853 3f00 	ldrex	r3, [r3]
 8003b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	663b      	str	r3, [r7, #96]	; 0x60
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3308      	adds	r3, #8
 8003b38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b42:	e841 2300 	strex	r3, r2, [r1]
 8003b46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1e5      	bne.n	8003b1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e069      	b.n	8003c3e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d051      	beq.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b86:	d149      	bne.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	e853 3f00 	ldrex	r3, [r3]
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bb8:	e841 2300 	strex	r3, r2, [r1]
 8003bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e6      	bne.n	8003b92 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3308      	adds	r3, #8
 8003bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3308      	adds	r3, #8
 8003be2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003be4:	623a      	str	r2, [r7, #32]
 8003be6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	69f9      	ldr	r1, [r7, #28]
 8003bea:	6a3a      	ldr	r2, [r7, #32]
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e5      	bne.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e010      	b.n	8003c3e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	4013      	ands	r3, r2
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	bf0c      	ite	eq
 8003c2c:	2301      	moveq	r3, #1
 8003c2e:	2300      	movne	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	f43f af46 	beq.w	8003ac8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3770      	adds	r7, #112	; 0x70
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b085      	sub	sp, #20
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_UARTEx_DisableFifoMode+0x16>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e027      	b.n	8003cac <HAL_UARTEx_DisableFifoMode+0x66>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2224      	movs	r2, #36	; 0x24
 8003c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003c8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e02d      	b.n	8003d2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2224      	movs	r2, #36	; 0x24
 8003cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0201 	bic.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f84f 	bl	8003db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e02d      	b.n	8003da8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2224      	movs	r2, #36	; 0x24
 8003d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f811 	bl	8003db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d108      	bne.n	8003dd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003dd0:	e031      	b.n	8003e36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003dd6:	2308      	movs	r3, #8
 8003dd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	0e5b      	lsrs	r3, r3, #25
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	0f5b      	lsrs	r3, r3, #29
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dfa:	7bbb      	ldrb	r3, [r7, #14]
 8003dfc:	7b3a      	ldrb	r2, [r7, #12]
 8003dfe:	4911      	ldr	r1, [pc, #68]	; (8003e44 <UARTEx_SetNbDataToProcess+0x94>)
 8003e00:	5c8a      	ldrb	r2, [r1, r2]
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e06:	7b3a      	ldrb	r2, [r7, #12]
 8003e08:	490f      	ldr	r1, [pc, #60]	; (8003e48 <UARTEx_SetNbDataToProcess+0x98>)
 8003e0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	7b7a      	ldrb	r2, [r7, #13]
 8003e1c:	4909      	ldr	r1, [pc, #36]	; (8003e44 <UARTEx_SetNbDataToProcess+0x94>)
 8003e1e:	5c8a      	ldrb	r2, [r1, r2]
 8003e20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e24:	7b7a      	ldrb	r2, [r7, #13]
 8003e26:	4908      	ldr	r1, [pc, #32]	; (8003e48 <UARTEx_SetNbDataToProcess+0x98>)
 8003e28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	08004af0 	.word	0x08004af0
 8003e48:	08004af8 	.word	0x08004af8

08003e4c <__errno>:
 8003e4c:	4b01      	ldr	r3, [pc, #4]	; (8003e54 <__errno+0x8>)
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	2000003c 	.word	0x2000003c

08003e58 <__libc_init_array>:
 8003e58:	b570      	push	{r4, r5, r6, lr}
 8003e5a:	4d0d      	ldr	r5, [pc, #52]	; (8003e90 <__libc_init_array+0x38>)
 8003e5c:	4c0d      	ldr	r4, [pc, #52]	; (8003e94 <__libc_init_array+0x3c>)
 8003e5e:	1b64      	subs	r4, r4, r5
 8003e60:	10a4      	asrs	r4, r4, #2
 8003e62:	2600      	movs	r6, #0
 8003e64:	42a6      	cmp	r6, r4
 8003e66:	d109      	bne.n	8003e7c <__libc_init_array+0x24>
 8003e68:	4d0b      	ldr	r5, [pc, #44]	; (8003e98 <__libc_init_array+0x40>)
 8003e6a:	4c0c      	ldr	r4, [pc, #48]	; (8003e9c <__libc_init_array+0x44>)
 8003e6c:	f000 fdf4 	bl	8004a58 <_init>
 8003e70:	1b64      	subs	r4, r4, r5
 8003e72:	10a4      	asrs	r4, r4, #2
 8003e74:	2600      	movs	r6, #0
 8003e76:	42a6      	cmp	r6, r4
 8003e78:	d105      	bne.n	8003e86 <__libc_init_array+0x2e>
 8003e7a:	bd70      	pop	{r4, r5, r6, pc}
 8003e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e80:	4798      	blx	r3
 8003e82:	3601      	adds	r6, #1
 8003e84:	e7ee      	b.n	8003e64 <__libc_init_array+0xc>
 8003e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e8a:	4798      	blx	r3
 8003e8c:	3601      	adds	r6, #1
 8003e8e:	e7f2      	b.n	8003e76 <__libc_init_array+0x1e>
 8003e90:	08004b6c 	.word	0x08004b6c
 8003e94:	08004b6c 	.word	0x08004b6c
 8003e98:	08004b6c 	.word	0x08004b6c
 8003e9c:	08004b70 	.word	0x08004b70

08003ea0 <memset>:
 8003ea0:	4402      	add	r2, r0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d100      	bne.n	8003eaa <memset+0xa>
 8003ea8:	4770      	bx	lr
 8003eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8003eae:	e7f9      	b.n	8003ea4 <memset+0x4>

08003eb0 <_puts_r>:
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	460e      	mov	r6, r1
 8003eb4:	4605      	mov	r5, r0
 8003eb6:	b118      	cbz	r0, 8003ec0 <_puts_r+0x10>
 8003eb8:	6983      	ldr	r3, [r0, #24]
 8003eba:	b90b      	cbnz	r3, 8003ec0 <_puts_r+0x10>
 8003ebc:	f000 fb16 	bl	80044ec <__sinit>
 8003ec0:	69ab      	ldr	r3, [r5, #24]
 8003ec2:	68ac      	ldr	r4, [r5, #8]
 8003ec4:	b913      	cbnz	r3, 8003ecc <_puts_r+0x1c>
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f000 fb10 	bl	80044ec <__sinit>
 8003ecc:	4b2c      	ldr	r3, [pc, #176]	; (8003f80 <_puts_r+0xd0>)
 8003ece:	429c      	cmp	r4, r3
 8003ed0:	d120      	bne.n	8003f14 <_puts_r+0x64>
 8003ed2:	686c      	ldr	r4, [r5, #4]
 8003ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ed6:	07db      	lsls	r3, r3, #31
 8003ed8:	d405      	bmi.n	8003ee6 <_puts_r+0x36>
 8003eda:	89a3      	ldrh	r3, [r4, #12]
 8003edc:	0598      	lsls	r0, r3, #22
 8003ede:	d402      	bmi.n	8003ee6 <_puts_r+0x36>
 8003ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ee2:	f000 fba1 	bl	8004628 <__retarget_lock_acquire_recursive>
 8003ee6:	89a3      	ldrh	r3, [r4, #12]
 8003ee8:	0719      	lsls	r1, r3, #28
 8003eea:	d51d      	bpl.n	8003f28 <_puts_r+0x78>
 8003eec:	6923      	ldr	r3, [r4, #16]
 8003eee:	b1db      	cbz	r3, 8003f28 <_puts_r+0x78>
 8003ef0:	3e01      	subs	r6, #1
 8003ef2:	68a3      	ldr	r3, [r4, #8]
 8003ef4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	60a3      	str	r3, [r4, #8]
 8003efc:	bb39      	cbnz	r1, 8003f4e <_puts_r+0x9e>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	da38      	bge.n	8003f74 <_puts_r+0xc4>
 8003f02:	4622      	mov	r2, r4
 8003f04:	210a      	movs	r1, #10
 8003f06:	4628      	mov	r0, r5
 8003f08:	f000 f916 	bl	8004138 <__swbuf_r>
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d011      	beq.n	8003f34 <_puts_r+0x84>
 8003f10:	250a      	movs	r5, #10
 8003f12:	e011      	b.n	8003f38 <_puts_r+0x88>
 8003f14:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <_puts_r+0xd4>)
 8003f16:	429c      	cmp	r4, r3
 8003f18:	d101      	bne.n	8003f1e <_puts_r+0x6e>
 8003f1a:	68ac      	ldr	r4, [r5, #8]
 8003f1c:	e7da      	b.n	8003ed4 <_puts_r+0x24>
 8003f1e:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <_puts_r+0xd8>)
 8003f20:	429c      	cmp	r4, r3
 8003f22:	bf08      	it	eq
 8003f24:	68ec      	ldreq	r4, [r5, #12]
 8003f26:	e7d5      	b.n	8003ed4 <_puts_r+0x24>
 8003f28:	4621      	mov	r1, r4
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f000 f956 	bl	80041dc <__swsetup_r>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d0dd      	beq.n	8003ef0 <_puts_r+0x40>
 8003f34:	f04f 35ff 	mov.w	r5, #4294967295
 8003f38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f3a:	07da      	lsls	r2, r3, #31
 8003f3c:	d405      	bmi.n	8003f4a <_puts_r+0x9a>
 8003f3e:	89a3      	ldrh	r3, [r4, #12]
 8003f40:	059b      	lsls	r3, r3, #22
 8003f42:	d402      	bmi.n	8003f4a <_puts_r+0x9a>
 8003f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f46:	f000 fb70 	bl	800462a <__retarget_lock_release_recursive>
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	bd70      	pop	{r4, r5, r6, pc}
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	da04      	bge.n	8003f5c <_puts_r+0xac>
 8003f52:	69a2      	ldr	r2, [r4, #24]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	dc06      	bgt.n	8003f66 <_puts_r+0xb6>
 8003f58:	290a      	cmp	r1, #10
 8003f5a:	d004      	beq.n	8003f66 <_puts_r+0xb6>
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	6022      	str	r2, [r4, #0]
 8003f62:	7019      	strb	r1, [r3, #0]
 8003f64:	e7c5      	b.n	8003ef2 <_puts_r+0x42>
 8003f66:	4622      	mov	r2, r4
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f000 f8e5 	bl	8004138 <__swbuf_r>
 8003f6e:	3001      	adds	r0, #1
 8003f70:	d1bf      	bne.n	8003ef2 <_puts_r+0x42>
 8003f72:	e7df      	b.n	8003f34 <_puts_r+0x84>
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	250a      	movs	r5, #10
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	6022      	str	r2, [r4, #0]
 8003f7c:	701d      	strb	r5, [r3, #0]
 8003f7e:	e7db      	b.n	8003f38 <_puts_r+0x88>
 8003f80:	08004b24 	.word	0x08004b24
 8003f84:	08004b44 	.word	0x08004b44
 8003f88:	08004b04 	.word	0x08004b04

08003f8c <puts>:
 8003f8c:	4b02      	ldr	r3, [pc, #8]	; (8003f98 <puts+0xc>)
 8003f8e:	4601      	mov	r1, r0
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	f7ff bf8d 	b.w	8003eb0 <_puts_r>
 8003f96:	bf00      	nop
 8003f98:	2000003c 	.word	0x2000003c

08003f9c <setbuf>:
 8003f9c:	2900      	cmp	r1, #0
 8003f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2202      	moveq	r2, #2
 8003fa6:	2200      	movne	r2, #0
 8003fa8:	f000 b800 	b.w	8003fac <setvbuf>

08003fac <setvbuf>:
 8003fac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003fb0:	461d      	mov	r5, r3
 8003fb2:	4b5d      	ldr	r3, [pc, #372]	; (8004128 <setvbuf+0x17c>)
 8003fb4:	681f      	ldr	r7, [r3, #0]
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	460e      	mov	r6, r1
 8003fba:	4690      	mov	r8, r2
 8003fbc:	b127      	cbz	r7, 8003fc8 <setvbuf+0x1c>
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	b913      	cbnz	r3, 8003fc8 <setvbuf+0x1c>
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	f000 fa92 	bl	80044ec <__sinit>
 8003fc8:	4b58      	ldr	r3, [pc, #352]	; (800412c <setvbuf+0x180>)
 8003fca:	429c      	cmp	r4, r3
 8003fcc:	d167      	bne.n	800409e <setvbuf+0xf2>
 8003fce:	687c      	ldr	r4, [r7, #4]
 8003fd0:	f1b8 0f02 	cmp.w	r8, #2
 8003fd4:	d006      	beq.n	8003fe4 <setvbuf+0x38>
 8003fd6:	f1b8 0f01 	cmp.w	r8, #1
 8003fda:	f200 809f 	bhi.w	800411c <setvbuf+0x170>
 8003fde:	2d00      	cmp	r5, #0
 8003fe0:	f2c0 809c 	blt.w	800411c <setvbuf+0x170>
 8003fe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fe6:	07db      	lsls	r3, r3, #31
 8003fe8:	d405      	bmi.n	8003ff6 <setvbuf+0x4a>
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	0598      	lsls	r0, r3, #22
 8003fee:	d402      	bmi.n	8003ff6 <setvbuf+0x4a>
 8003ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ff2:	f000 fb19 	bl	8004628 <__retarget_lock_acquire_recursive>
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	4638      	mov	r0, r7
 8003ffa:	f000 f9e3 	bl	80043c4 <_fflush_r>
 8003ffe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004000:	b141      	cbz	r1, 8004014 <setvbuf+0x68>
 8004002:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004006:	4299      	cmp	r1, r3
 8004008:	d002      	beq.n	8004010 <setvbuf+0x64>
 800400a:	4638      	mov	r0, r7
 800400c:	f000 fb7c 	bl	8004708 <_free_r>
 8004010:	2300      	movs	r3, #0
 8004012:	6363      	str	r3, [r4, #52]	; 0x34
 8004014:	2300      	movs	r3, #0
 8004016:	61a3      	str	r3, [r4, #24]
 8004018:	6063      	str	r3, [r4, #4]
 800401a:	89a3      	ldrh	r3, [r4, #12]
 800401c:	0619      	lsls	r1, r3, #24
 800401e:	d503      	bpl.n	8004028 <setvbuf+0x7c>
 8004020:	6921      	ldr	r1, [r4, #16]
 8004022:	4638      	mov	r0, r7
 8004024:	f000 fb70 	bl	8004708 <_free_r>
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	f1b8 0f02 	cmp.w	r8, #2
 8004036:	81a3      	strh	r3, [r4, #12]
 8004038:	d06c      	beq.n	8004114 <setvbuf+0x168>
 800403a:	ab01      	add	r3, sp, #4
 800403c:	466a      	mov	r2, sp
 800403e:	4621      	mov	r1, r4
 8004040:	4638      	mov	r0, r7
 8004042:	f000 faf3 	bl	800462c <__swhatbuf_r>
 8004046:	89a3      	ldrh	r3, [r4, #12]
 8004048:	4318      	orrs	r0, r3
 800404a:	81a0      	strh	r0, [r4, #12]
 800404c:	2d00      	cmp	r5, #0
 800404e:	d130      	bne.n	80040b2 <setvbuf+0x106>
 8004050:	9d00      	ldr	r5, [sp, #0]
 8004052:	4628      	mov	r0, r5
 8004054:	f000 fb50 	bl	80046f8 <malloc>
 8004058:	4606      	mov	r6, r0
 800405a:	2800      	cmp	r0, #0
 800405c:	d155      	bne.n	800410a <setvbuf+0x15e>
 800405e:	f8dd 9000 	ldr.w	r9, [sp]
 8004062:	45a9      	cmp	r9, r5
 8004064:	d14a      	bne.n	80040fc <setvbuf+0x150>
 8004066:	f04f 35ff 	mov.w	r5, #4294967295
 800406a:	2200      	movs	r2, #0
 800406c:	60a2      	str	r2, [r4, #8]
 800406e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004072:	6022      	str	r2, [r4, #0]
 8004074:	6122      	str	r2, [r4, #16]
 8004076:	2201      	movs	r2, #1
 8004078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800407c:	6162      	str	r2, [r4, #20]
 800407e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004080:	f043 0302 	orr.w	r3, r3, #2
 8004084:	07d2      	lsls	r2, r2, #31
 8004086:	81a3      	strh	r3, [r4, #12]
 8004088:	d405      	bmi.n	8004096 <setvbuf+0xea>
 800408a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800408e:	d102      	bne.n	8004096 <setvbuf+0xea>
 8004090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004092:	f000 faca 	bl	800462a <__retarget_lock_release_recursive>
 8004096:	4628      	mov	r0, r5
 8004098:	b003      	add	sp, #12
 800409a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800409e:	4b24      	ldr	r3, [pc, #144]	; (8004130 <setvbuf+0x184>)
 80040a0:	429c      	cmp	r4, r3
 80040a2:	d101      	bne.n	80040a8 <setvbuf+0xfc>
 80040a4:	68bc      	ldr	r4, [r7, #8]
 80040a6:	e793      	b.n	8003fd0 <setvbuf+0x24>
 80040a8:	4b22      	ldr	r3, [pc, #136]	; (8004134 <setvbuf+0x188>)
 80040aa:	429c      	cmp	r4, r3
 80040ac:	bf08      	it	eq
 80040ae:	68fc      	ldreq	r4, [r7, #12]
 80040b0:	e78e      	b.n	8003fd0 <setvbuf+0x24>
 80040b2:	2e00      	cmp	r6, #0
 80040b4:	d0cd      	beq.n	8004052 <setvbuf+0xa6>
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	b913      	cbnz	r3, 80040c0 <setvbuf+0x114>
 80040ba:	4638      	mov	r0, r7
 80040bc:	f000 fa16 	bl	80044ec <__sinit>
 80040c0:	f1b8 0f01 	cmp.w	r8, #1
 80040c4:	bf08      	it	eq
 80040c6:	89a3      	ldrheq	r3, [r4, #12]
 80040c8:	6026      	str	r6, [r4, #0]
 80040ca:	bf04      	itt	eq
 80040cc:	f043 0301 	orreq.w	r3, r3, #1
 80040d0:	81a3      	strheq	r3, [r4, #12]
 80040d2:	89a2      	ldrh	r2, [r4, #12]
 80040d4:	f012 0308 	ands.w	r3, r2, #8
 80040d8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80040dc:	d01c      	beq.n	8004118 <setvbuf+0x16c>
 80040de:	07d3      	lsls	r3, r2, #31
 80040e0:	bf41      	itttt	mi
 80040e2:	2300      	movmi	r3, #0
 80040e4:	426d      	negmi	r5, r5
 80040e6:	60a3      	strmi	r3, [r4, #8]
 80040e8:	61a5      	strmi	r5, [r4, #24]
 80040ea:	bf58      	it	pl
 80040ec:	60a5      	strpl	r5, [r4, #8]
 80040ee:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80040f0:	f015 0501 	ands.w	r5, r5, #1
 80040f4:	d115      	bne.n	8004122 <setvbuf+0x176>
 80040f6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80040fa:	e7c8      	b.n	800408e <setvbuf+0xe2>
 80040fc:	4648      	mov	r0, r9
 80040fe:	f000 fafb 	bl	80046f8 <malloc>
 8004102:	4606      	mov	r6, r0
 8004104:	2800      	cmp	r0, #0
 8004106:	d0ae      	beq.n	8004066 <setvbuf+0xba>
 8004108:	464d      	mov	r5, r9
 800410a:	89a3      	ldrh	r3, [r4, #12]
 800410c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	e7d0      	b.n	80040b6 <setvbuf+0x10a>
 8004114:	2500      	movs	r5, #0
 8004116:	e7a8      	b.n	800406a <setvbuf+0xbe>
 8004118:	60a3      	str	r3, [r4, #8]
 800411a:	e7e8      	b.n	80040ee <setvbuf+0x142>
 800411c:	f04f 35ff 	mov.w	r5, #4294967295
 8004120:	e7b9      	b.n	8004096 <setvbuf+0xea>
 8004122:	2500      	movs	r5, #0
 8004124:	e7b7      	b.n	8004096 <setvbuf+0xea>
 8004126:	bf00      	nop
 8004128:	2000003c 	.word	0x2000003c
 800412c:	08004b24 	.word	0x08004b24
 8004130:	08004b44 	.word	0x08004b44
 8004134:	08004b04 	.word	0x08004b04

08004138 <__swbuf_r>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	460e      	mov	r6, r1
 800413c:	4614      	mov	r4, r2
 800413e:	4605      	mov	r5, r0
 8004140:	b118      	cbz	r0, 800414a <__swbuf_r+0x12>
 8004142:	6983      	ldr	r3, [r0, #24]
 8004144:	b90b      	cbnz	r3, 800414a <__swbuf_r+0x12>
 8004146:	f000 f9d1 	bl	80044ec <__sinit>
 800414a:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <__swbuf_r+0x98>)
 800414c:	429c      	cmp	r4, r3
 800414e:	d12b      	bne.n	80041a8 <__swbuf_r+0x70>
 8004150:	686c      	ldr	r4, [r5, #4]
 8004152:	69a3      	ldr	r3, [r4, #24]
 8004154:	60a3      	str	r3, [r4, #8]
 8004156:	89a3      	ldrh	r3, [r4, #12]
 8004158:	071a      	lsls	r2, r3, #28
 800415a:	d52f      	bpl.n	80041bc <__swbuf_r+0x84>
 800415c:	6923      	ldr	r3, [r4, #16]
 800415e:	b36b      	cbz	r3, 80041bc <__swbuf_r+0x84>
 8004160:	6923      	ldr	r3, [r4, #16]
 8004162:	6820      	ldr	r0, [r4, #0]
 8004164:	1ac0      	subs	r0, r0, r3
 8004166:	6963      	ldr	r3, [r4, #20]
 8004168:	b2f6      	uxtb	r6, r6
 800416a:	4283      	cmp	r3, r0
 800416c:	4637      	mov	r7, r6
 800416e:	dc04      	bgt.n	800417a <__swbuf_r+0x42>
 8004170:	4621      	mov	r1, r4
 8004172:	4628      	mov	r0, r5
 8004174:	f000 f926 	bl	80043c4 <_fflush_r>
 8004178:	bb30      	cbnz	r0, 80041c8 <__swbuf_r+0x90>
 800417a:	68a3      	ldr	r3, [r4, #8]
 800417c:	3b01      	subs	r3, #1
 800417e:	60a3      	str	r3, [r4, #8]
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	6022      	str	r2, [r4, #0]
 8004186:	701e      	strb	r6, [r3, #0]
 8004188:	6963      	ldr	r3, [r4, #20]
 800418a:	3001      	adds	r0, #1
 800418c:	4283      	cmp	r3, r0
 800418e:	d004      	beq.n	800419a <__swbuf_r+0x62>
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	07db      	lsls	r3, r3, #31
 8004194:	d506      	bpl.n	80041a4 <__swbuf_r+0x6c>
 8004196:	2e0a      	cmp	r6, #10
 8004198:	d104      	bne.n	80041a4 <__swbuf_r+0x6c>
 800419a:	4621      	mov	r1, r4
 800419c:	4628      	mov	r0, r5
 800419e:	f000 f911 	bl	80043c4 <_fflush_r>
 80041a2:	b988      	cbnz	r0, 80041c8 <__swbuf_r+0x90>
 80041a4:	4638      	mov	r0, r7
 80041a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <__swbuf_r+0x9c>)
 80041aa:	429c      	cmp	r4, r3
 80041ac:	d101      	bne.n	80041b2 <__swbuf_r+0x7a>
 80041ae:	68ac      	ldr	r4, [r5, #8]
 80041b0:	e7cf      	b.n	8004152 <__swbuf_r+0x1a>
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <__swbuf_r+0xa0>)
 80041b4:	429c      	cmp	r4, r3
 80041b6:	bf08      	it	eq
 80041b8:	68ec      	ldreq	r4, [r5, #12]
 80041ba:	e7ca      	b.n	8004152 <__swbuf_r+0x1a>
 80041bc:	4621      	mov	r1, r4
 80041be:	4628      	mov	r0, r5
 80041c0:	f000 f80c 	bl	80041dc <__swsetup_r>
 80041c4:	2800      	cmp	r0, #0
 80041c6:	d0cb      	beq.n	8004160 <__swbuf_r+0x28>
 80041c8:	f04f 37ff 	mov.w	r7, #4294967295
 80041cc:	e7ea      	b.n	80041a4 <__swbuf_r+0x6c>
 80041ce:	bf00      	nop
 80041d0:	08004b24 	.word	0x08004b24
 80041d4:	08004b44 	.word	0x08004b44
 80041d8:	08004b04 	.word	0x08004b04

080041dc <__swsetup_r>:
 80041dc:	4b32      	ldr	r3, [pc, #200]	; (80042a8 <__swsetup_r+0xcc>)
 80041de:	b570      	push	{r4, r5, r6, lr}
 80041e0:	681d      	ldr	r5, [r3, #0]
 80041e2:	4606      	mov	r6, r0
 80041e4:	460c      	mov	r4, r1
 80041e6:	b125      	cbz	r5, 80041f2 <__swsetup_r+0x16>
 80041e8:	69ab      	ldr	r3, [r5, #24]
 80041ea:	b913      	cbnz	r3, 80041f2 <__swsetup_r+0x16>
 80041ec:	4628      	mov	r0, r5
 80041ee:	f000 f97d 	bl	80044ec <__sinit>
 80041f2:	4b2e      	ldr	r3, [pc, #184]	; (80042ac <__swsetup_r+0xd0>)
 80041f4:	429c      	cmp	r4, r3
 80041f6:	d10f      	bne.n	8004218 <__swsetup_r+0x3c>
 80041f8:	686c      	ldr	r4, [r5, #4]
 80041fa:	89a3      	ldrh	r3, [r4, #12]
 80041fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004200:	0719      	lsls	r1, r3, #28
 8004202:	d42c      	bmi.n	800425e <__swsetup_r+0x82>
 8004204:	06dd      	lsls	r5, r3, #27
 8004206:	d411      	bmi.n	800422c <__swsetup_r+0x50>
 8004208:	2309      	movs	r3, #9
 800420a:	6033      	str	r3, [r6, #0]
 800420c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004210:	81a3      	strh	r3, [r4, #12]
 8004212:	f04f 30ff 	mov.w	r0, #4294967295
 8004216:	e03e      	b.n	8004296 <__swsetup_r+0xba>
 8004218:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <__swsetup_r+0xd4>)
 800421a:	429c      	cmp	r4, r3
 800421c:	d101      	bne.n	8004222 <__swsetup_r+0x46>
 800421e:	68ac      	ldr	r4, [r5, #8]
 8004220:	e7eb      	b.n	80041fa <__swsetup_r+0x1e>
 8004222:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <__swsetup_r+0xd8>)
 8004224:	429c      	cmp	r4, r3
 8004226:	bf08      	it	eq
 8004228:	68ec      	ldreq	r4, [r5, #12]
 800422a:	e7e6      	b.n	80041fa <__swsetup_r+0x1e>
 800422c:	0758      	lsls	r0, r3, #29
 800422e:	d512      	bpl.n	8004256 <__swsetup_r+0x7a>
 8004230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004232:	b141      	cbz	r1, 8004246 <__swsetup_r+0x6a>
 8004234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004238:	4299      	cmp	r1, r3
 800423a:	d002      	beq.n	8004242 <__swsetup_r+0x66>
 800423c:	4630      	mov	r0, r6
 800423e:	f000 fa63 	bl	8004708 <_free_r>
 8004242:	2300      	movs	r3, #0
 8004244:	6363      	str	r3, [r4, #52]	; 0x34
 8004246:	89a3      	ldrh	r3, [r4, #12]
 8004248:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800424c:	81a3      	strh	r3, [r4, #12]
 800424e:	2300      	movs	r3, #0
 8004250:	6063      	str	r3, [r4, #4]
 8004252:	6923      	ldr	r3, [r4, #16]
 8004254:	6023      	str	r3, [r4, #0]
 8004256:	89a3      	ldrh	r3, [r4, #12]
 8004258:	f043 0308 	orr.w	r3, r3, #8
 800425c:	81a3      	strh	r3, [r4, #12]
 800425e:	6923      	ldr	r3, [r4, #16]
 8004260:	b94b      	cbnz	r3, 8004276 <__swsetup_r+0x9a>
 8004262:	89a3      	ldrh	r3, [r4, #12]
 8004264:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800426c:	d003      	beq.n	8004276 <__swsetup_r+0x9a>
 800426e:	4621      	mov	r1, r4
 8004270:	4630      	mov	r0, r6
 8004272:	f000 fa01 	bl	8004678 <__smakebuf_r>
 8004276:	89a0      	ldrh	r0, [r4, #12]
 8004278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800427c:	f010 0301 	ands.w	r3, r0, #1
 8004280:	d00a      	beq.n	8004298 <__swsetup_r+0xbc>
 8004282:	2300      	movs	r3, #0
 8004284:	60a3      	str	r3, [r4, #8]
 8004286:	6963      	ldr	r3, [r4, #20]
 8004288:	425b      	negs	r3, r3
 800428a:	61a3      	str	r3, [r4, #24]
 800428c:	6923      	ldr	r3, [r4, #16]
 800428e:	b943      	cbnz	r3, 80042a2 <__swsetup_r+0xc6>
 8004290:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004294:	d1ba      	bne.n	800420c <__swsetup_r+0x30>
 8004296:	bd70      	pop	{r4, r5, r6, pc}
 8004298:	0781      	lsls	r1, r0, #30
 800429a:	bf58      	it	pl
 800429c:	6963      	ldrpl	r3, [r4, #20]
 800429e:	60a3      	str	r3, [r4, #8]
 80042a0:	e7f4      	b.n	800428c <__swsetup_r+0xb0>
 80042a2:	2000      	movs	r0, #0
 80042a4:	e7f7      	b.n	8004296 <__swsetup_r+0xba>
 80042a6:	bf00      	nop
 80042a8:	2000003c 	.word	0x2000003c
 80042ac:	08004b24 	.word	0x08004b24
 80042b0:	08004b44 	.word	0x08004b44
 80042b4:	08004b04 	.word	0x08004b04

080042b8 <__sflush_r>:
 80042b8:	898a      	ldrh	r2, [r1, #12]
 80042ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042be:	4605      	mov	r5, r0
 80042c0:	0710      	lsls	r0, r2, #28
 80042c2:	460c      	mov	r4, r1
 80042c4:	d458      	bmi.n	8004378 <__sflush_r+0xc0>
 80042c6:	684b      	ldr	r3, [r1, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	dc05      	bgt.n	80042d8 <__sflush_r+0x20>
 80042cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	dc02      	bgt.n	80042d8 <__sflush_r+0x20>
 80042d2:	2000      	movs	r0, #0
 80042d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042da:	2e00      	cmp	r6, #0
 80042dc:	d0f9      	beq.n	80042d2 <__sflush_r+0x1a>
 80042de:	2300      	movs	r3, #0
 80042e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042e4:	682f      	ldr	r7, [r5, #0]
 80042e6:	602b      	str	r3, [r5, #0]
 80042e8:	d032      	beq.n	8004350 <__sflush_r+0x98>
 80042ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	075a      	lsls	r2, r3, #29
 80042f0:	d505      	bpl.n	80042fe <__sflush_r+0x46>
 80042f2:	6863      	ldr	r3, [r4, #4]
 80042f4:	1ac0      	subs	r0, r0, r3
 80042f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042f8:	b10b      	cbz	r3, 80042fe <__sflush_r+0x46>
 80042fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042fc:	1ac0      	subs	r0, r0, r3
 80042fe:	2300      	movs	r3, #0
 8004300:	4602      	mov	r2, r0
 8004302:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004304:	6a21      	ldr	r1, [r4, #32]
 8004306:	4628      	mov	r0, r5
 8004308:	47b0      	blx	r6
 800430a:	1c43      	adds	r3, r0, #1
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	d106      	bne.n	800431e <__sflush_r+0x66>
 8004310:	6829      	ldr	r1, [r5, #0]
 8004312:	291d      	cmp	r1, #29
 8004314:	d82c      	bhi.n	8004370 <__sflush_r+0xb8>
 8004316:	4a2a      	ldr	r2, [pc, #168]	; (80043c0 <__sflush_r+0x108>)
 8004318:	40ca      	lsrs	r2, r1
 800431a:	07d6      	lsls	r6, r2, #31
 800431c:	d528      	bpl.n	8004370 <__sflush_r+0xb8>
 800431e:	2200      	movs	r2, #0
 8004320:	6062      	str	r2, [r4, #4]
 8004322:	04d9      	lsls	r1, r3, #19
 8004324:	6922      	ldr	r2, [r4, #16]
 8004326:	6022      	str	r2, [r4, #0]
 8004328:	d504      	bpl.n	8004334 <__sflush_r+0x7c>
 800432a:	1c42      	adds	r2, r0, #1
 800432c:	d101      	bne.n	8004332 <__sflush_r+0x7a>
 800432e:	682b      	ldr	r3, [r5, #0]
 8004330:	b903      	cbnz	r3, 8004334 <__sflush_r+0x7c>
 8004332:	6560      	str	r0, [r4, #84]	; 0x54
 8004334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004336:	602f      	str	r7, [r5, #0]
 8004338:	2900      	cmp	r1, #0
 800433a:	d0ca      	beq.n	80042d2 <__sflush_r+0x1a>
 800433c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004340:	4299      	cmp	r1, r3
 8004342:	d002      	beq.n	800434a <__sflush_r+0x92>
 8004344:	4628      	mov	r0, r5
 8004346:	f000 f9df 	bl	8004708 <_free_r>
 800434a:	2000      	movs	r0, #0
 800434c:	6360      	str	r0, [r4, #52]	; 0x34
 800434e:	e7c1      	b.n	80042d4 <__sflush_r+0x1c>
 8004350:	6a21      	ldr	r1, [r4, #32]
 8004352:	2301      	movs	r3, #1
 8004354:	4628      	mov	r0, r5
 8004356:	47b0      	blx	r6
 8004358:	1c41      	adds	r1, r0, #1
 800435a:	d1c7      	bne.n	80042ec <__sflush_r+0x34>
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0c4      	beq.n	80042ec <__sflush_r+0x34>
 8004362:	2b1d      	cmp	r3, #29
 8004364:	d001      	beq.n	800436a <__sflush_r+0xb2>
 8004366:	2b16      	cmp	r3, #22
 8004368:	d101      	bne.n	800436e <__sflush_r+0xb6>
 800436a:	602f      	str	r7, [r5, #0]
 800436c:	e7b1      	b.n	80042d2 <__sflush_r+0x1a>
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004374:	81a3      	strh	r3, [r4, #12]
 8004376:	e7ad      	b.n	80042d4 <__sflush_r+0x1c>
 8004378:	690f      	ldr	r7, [r1, #16]
 800437a:	2f00      	cmp	r7, #0
 800437c:	d0a9      	beq.n	80042d2 <__sflush_r+0x1a>
 800437e:	0793      	lsls	r3, r2, #30
 8004380:	680e      	ldr	r6, [r1, #0]
 8004382:	bf08      	it	eq
 8004384:	694b      	ldreq	r3, [r1, #20]
 8004386:	600f      	str	r7, [r1, #0]
 8004388:	bf18      	it	ne
 800438a:	2300      	movne	r3, #0
 800438c:	eba6 0807 	sub.w	r8, r6, r7
 8004390:	608b      	str	r3, [r1, #8]
 8004392:	f1b8 0f00 	cmp.w	r8, #0
 8004396:	dd9c      	ble.n	80042d2 <__sflush_r+0x1a>
 8004398:	6a21      	ldr	r1, [r4, #32]
 800439a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800439c:	4643      	mov	r3, r8
 800439e:	463a      	mov	r2, r7
 80043a0:	4628      	mov	r0, r5
 80043a2:	47b0      	blx	r6
 80043a4:	2800      	cmp	r0, #0
 80043a6:	dc06      	bgt.n	80043b6 <__sflush_r+0xfe>
 80043a8:	89a3      	ldrh	r3, [r4, #12]
 80043aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ae:	81a3      	strh	r3, [r4, #12]
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295
 80043b4:	e78e      	b.n	80042d4 <__sflush_r+0x1c>
 80043b6:	4407      	add	r7, r0
 80043b8:	eba8 0800 	sub.w	r8, r8, r0
 80043bc:	e7e9      	b.n	8004392 <__sflush_r+0xda>
 80043be:	bf00      	nop
 80043c0:	20400001 	.word	0x20400001

080043c4 <_fflush_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	690b      	ldr	r3, [r1, #16]
 80043c8:	4605      	mov	r5, r0
 80043ca:	460c      	mov	r4, r1
 80043cc:	b913      	cbnz	r3, 80043d4 <_fflush_r+0x10>
 80043ce:	2500      	movs	r5, #0
 80043d0:	4628      	mov	r0, r5
 80043d2:	bd38      	pop	{r3, r4, r5, pc}
 80043d4:	b118      	cbz	r0, 80043de <_fflush_r+0x1a>
 80043d6:	6983      	ldr	r3, [r0, #24]
 80043d8:	b90b      	cbnz	r3, 80043de <_fflush_r+0x1a>
 80043da:	f000 f887 	bl	80044ec <__sinit>
 80043de:	4b14      	ldr	r3, [pc, #80]	; (8004430 <_fflush_r+0x6c>)
 80043e0:	429c      	cmp	r4, r3
 80043e2:	d11b      	bne.n	800441c <_fflush_r+0x58>
 80043e4:	686c      	ldr	r4, [r5, #4]
 80043e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0ef      	beq.n	80043ce <_fflush_r+0xa>
 80043ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043f0:	07d0      	lsls	r0, r2, #31
 80043f2:	d404      	bmi.n	80043fe <_fflush_r+0x3a>
 80043f4:	0599      	lsls	r1, r3, #22
 80043f6:	d402      	bmi.n	80043fe <_fflush_r+0x3a>
 80043f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043fa:	f000 f915 	bl	8004628 <__retarget_lock_acquire_recursive>
 80043fe:	4628      	mov	r0, r5
 8004400:	4621      	mov	r1, r4
 8004402:	f7ff ff59 	bl	80042b8 <__sflush_r>
 8004406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004408:	07da      	lsls	r2, r3, #31
 800440a:	4605      	mov	r5, r0
 800440c:	d4e0      	bmi.n	80043d0 <_fflush_r+0xc>
 800440e:	89a3      	ldrh	r3, [r4, #12]
 8004410:	059b      	lsls	r3, r3, #22
 8004412:	d4dd      	bmi.n	80043d0 <_fflush_r+0xc>
 8004414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004416:	f000 f908 	bl	800462a <__retarget_lock_release_recursive>
 800441a:	e7d9      	b.n	80043d0 <_fflush_r+0xc>
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <_fflush_r+0x70>)
 800441e:	429c      	cmp	r4, r3
 8004420:	d101      	bne.n	8004426 <_fflush_r+0x62>
 8004422:	68ac      	ldr	r4, [r5, #8]
 8004424:	e7df      	b.n	80043e6 <_fflush_r+0x22>
 8004426:	4b04      	ldr	r3, [pc, #16]	; (8004438 <_fflush_r+0x74>)
 8004428:	429c      	cmp	r4, r3
 800442a:	bf08      	it	eq
 800442c:	68ec      	ldreq	r4, [r5, #12]
 800442e:	e7da      	b.n	80043e6 <_fflush_r+0x22>
 8004430:	08004b24 	.word	0x08004b24
 8004434:	08004b44 	.word	0x08004b44
 8004438:	08004b04 	.word	0x08004b04

0800443c <std>:
 800443c:	2300      	movs	r3, #0
 800443e:	b510      	push	{r4, lr}
 8004440:	4604      	mov	r4, r0
 8004442:	e9c0 3300 	strd	r3, r3, [r0]
 8004446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800444a:	6083      	str	r3, [r0, #8]
 800444c:	8181      	strh	r1, [r0, #12]
 800444e:	6643      	str	r3, [r0, #100]	; 0x64
 8004450:	81c2      	strh	r2, [r0, #14]
 8004452:	6183      	str	r3, [r0, #24]
 8004454:	4619      	mov	r1, r3
 8004456:	2208      	movs	r2, #8
 8004458:	305c      	adds	r0, #92	; 0x5c
 800445a:	f7ff fd21 	bl	8003ea0 <memset>
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <std+0x38>)
 8004460:	6263      	str	r3, [r4, #36]	; 0x24
 8004462:	4b05      	ldr	r3, [pc, #20]	; (8004478 <std+0x3c>)
 8004464:	62a3      	str	r3, [r4, #40]	; 0x28
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <std+0x40>)
 8004468:	62e3      	str	r3, [r4, #44]	; 0x2c
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <std+0x44>)
 800446c:	6224      	str	r4, [r4, #32]
 800446e:	6323      	str	r3, [r4, #48]	; 0x30
 8004470:	bd10      	pop	{r4, pc}
 8004472:	bf00      	nop
 8004474:	080048e9 	.word	0x080048e9
 8004478:	0800490b 	.word	0x0800490b
 800447c:	08004943 	.word	0x08004943
 8004480:	08004967 	.word	0x08004967

08004484 <_cleanup_r>:
 8004484:	4901      	ldr	r1, [pc, #4]	; (800448c <_cleanup_r+0x8>)
 8004486:	f000 b8af 	b.w	80045e8 <_fwalk_reent>
 800448a:	bf00      	nop
 800448c:	080043c5 	.word	0x080043c5

08004490 <__sfmoreglue>:
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	2268      	movs	r2, #104	; 0x68
 8004494:	1e4d      	subs	r5, r1, #1
 8004496:	4355      	muls	r5, r2
 8004498:	460e      	mov	r6, r1
 800449a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800449e:	f000 f99f 	bl	80047e0 <_malloc_r>
 80044a2:	4604      	mov	r4, r0
 80044a4:	b140      	cbz	r0, 80044b8 <__sfmoreglue+0x28>
 80044a6:	2100      	movs	r1, #0
 80044a8:	e9c0 1600 	strd	r1, r6, [r0]
 80044ac:	300c      	adds	r0, #12
 80044ae:	60a0      	str	r0, [r4, #8]
 80044b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80044b4:	f7ff fcf4 	bl	8003ea0 <memset>
 80044b8:	4620      	mov	r0, r4
 80044ba:	bd70      	pop	{r4, r5, r6, pc}

080044bc <__sfp_lock_acquire>:
 80044bc:	4801      	ldr	r0, [pc, #4]	; (80044c4 <__sfp_lock_acquire+0x8>)
 80044be:	f000 b8b3 	b.w	8004628 <__retarget_lock_acquire_recursive>
 80044c2:	bf00      	nop
 80044c4:	200001c1 	.word	0x200001c1

080044c8 <__sfp_lock_release>:
 80044c8:	4801      	ldr	r0, [pc, #4]	; (80044d0 <__sfp_lock_release+0x8>)
 80044ca:	f000 b8ae 	b.w	800462a <__retarget_lock_release_recursive>
 80044ce:	bf00      	nop
 80044d0:	200001c1 	.word	0x200001c1

080044d4 <__sinit_lock_acquire>:
 80044d4:	4801      	ldr	r0, [pc, #4]	; (80044dc <__sinit_lock_acquire+0x8>)
 80044d6:	f000 b8a7 	b.w	8004628 <__retarget_lock_acquire_recursive>
 80044da:	bf00      	nop
 80044dc:	200001c2 	.word	0x200001c2

080044e0 <__sinit_lock_release>:
 80044e0:	4801      	ldr	r0, [pc, #4]	; (80044e8 <__sinit_lock_release+0x8>)
 80044e2:	f000 b8a2 	b.w	800462a <__retarget_lock_release_recursive>
 80044e6:	bf00      	nop
 80044e8:	200001c2 	.word	0x200001c2

080044ec <__sinit>:
 80044ec:	b510      	push	{r4, lr}
 80044ee:	4604      	mov	r4, r0
 80044f0:	f7ff fff0 	bl	80044d4 <__sinit_lock_acquire>
 80044f4:	69a3      	ldr	r3, [r4, #24]
 80044f6:	b11b      	cbz	r3, 8004500 <__sinit+0x14>
 80044f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044fc:	f7ff bff0 	b.w	80044e0 <__sinit_lock_release>
 8004500:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004504:	6523      	str	r3, [r4, #80]	; 0x50
 8004506:	4b13      	ldr	r3, [pc, #76]	; (8004554 <__sinit+0x68>)
 8004508:	4a13      	ldr	r2, [pc, #76]	; (8004558 <__sinit+0x6c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	62a2      	str	r2, [r4, #40]	; 0x28
 800450e:	42a3      	cmp	r3, r4
 8004510:	bf04      	itt	eq
 8004512:	2301      	moveq	r3, #1
 8004514:	61a3      	streq	r3, [r4, #24]
 8004516:	4620      	mov	r0, r4
 8004518:	f000 f820 	bl	800455c <__sfp>
 800451c:	6060      	str	r0, [r4, #4]
 800451e:	4620      	mov	r0, r4
 8004520:	f000 f81c 	bl	800455c <__sfp>
 8004524:	60a0      	str	r0, [r4, #8]
 8004526:	4620      	mov	r0, r4
 8004528:	f000 f818 	bl	800455c <__sfp>
 800452c:	2200      	movs	r2, #0
 800452e:	60e0      	str	r0, [r4, #12]
 8004530:	2104      	movs	r1, #4
 8004532:	6860      	ldr	r0, [r4, #4]
 8004534:	f7ff ff82 	bl	800443c <std>
 8004538:	68a0      	ldr	r0, [r4, #8]
 800453a:	2201      	movs	r2, #1
 800453c:	2109      	movs	r1, #9
 800453e:	f7ff ff7d 	bl	800443c <std>
 8004542:	68e0      	ldr	r0, [r4, #12]
 8004544:	2202      	movs	r2, #2
 8004546:	2112      	movs	r1, #18
 8004548:	f7ff ff78 	bl	800443c <std>
 800454c:	2301      	movs	r3, #1
 800454e:	61a3      	str	r3, [r4, #24]
 8004550:	e7d2      	b.n	80044f8 <__sinit+0xc>
 8004552:	bf00      	nop
 8004554:	08004b00 	.word	0x08004b00
 8004558:	08004485 	.word	0x08004485

0800455c <__sfp>:
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	4607      	mov	r7, r0
 8004560:	f7ff ffac 	bl	80044bc <__sfp_lock_acquire>
 8004564:	4b1e      	ldr	r3, [pc, #120]	; (80045e0 <__sfp+0x84>)
 8004566:	681e      	ldr	r6, [r3, #0]
 8004568:	69b3      	ldr	r3, [r6, #24]
 800456a:	b913      	cbnz	r3, 8004572 <__sfp+0x16>
 800456c:	4630      	mov	r0, r6
 800456e:	f7ff ffbd 	bl	80044ec <__sinit>
 8004572:	3648      	adds	r6, #72	; 0x48
 8004574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004578:	3b01      	subs	r3, #1
 800457a:	d503      	bpl.n	8004584 <__sfp+0x28>
 800457c:	6833      	ldr	r3, [r6, #0]
 800457e:	b30b      	cbz	r3, 80045c4 <__sfp+0x68>
 8004580:	6836      	ldr	r6, [r6, #0]
 8004582:	e7f7      	b.n	8004574 <__sfp+0x18>
 8004584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004588:	b9d5      	cbnz	r5, 80045c0 <__sfp+0x64>
 800458a:	4b16      	ldr	r3, [pc, #88]	; (80045e4 <__sfp+0x88>)
 800458c:	60e3      	str	r3, [r4, #12]
 800458e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004592:	6665      	str	r5, [r4, #100]	; 0x64
 8004594:	f000 f847 	bl	8004626 <__retarget_lock_init_recursive>
 8004598:	f7ff ff96 	bl	80044c8 <__sfp_lock_release>
 800459c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80045a4:	6025      	str	r5, [r4, #0]
 80045a6:	61a5      	str	r5, [r4, #24]
 80045a8:	2208      	movs	r2, #8
 80045aa:	4629      	mov	r1, r5
 80045ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80045b0:	f7ff fc76 	bl	8003ea0 <memset>
 80045b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80045b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80045bc:	4620      	mov	r0, r4
 80045be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045c0:	3468      	adds	r4, #104	; 0x68
 80045c2:	e7d9      	b.n	8004578 <__sfp+0x1c>
 80045c4:	2104      	movs	r1, #4
 80045c6:	4638      	mov	r0, r7
 80045c8:	f7ff ff62 	bl	8004490 <__sfmoreglue>
 80045cc:	4604      	mov	r4, r0
 80045ce:	6030      	str	r0, [r6, #0]
 80045d0:	2800      	cmp	r0, #0
 80045d2:	d1d5      	bne.n	8004580 <__sfp+0x24>
 80045d4:	f7ff ff78 	bl	80044c8 <__sfp_lock_release>
 80045d8:	230c      	movs	r3, #12
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	e7ee      	b.n	80045bc <__sfp+0x60>
 80045de:	bf00      	nop
 80045e0:	08004b00 	.word	0x08004b00
 80045e4:	ffff0001 	.word	0xffff0001

080045e8 <_fwalk_reent>:
 80045e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045ec:	4606      	mov	r6, r0
 80045ee:	4688      	mov	r8, r1
 80045f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045f4:	2700      	movs	r7, #0
 80045f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045fa:	f1b9 0901 	subs.w	r9, r9, #1
 80045fe:	d505      	bpl.n	800460c <_fwalk_reent+0x24>
 8004600:	6824      	ldr	r4, [r4, #0]
 8004602:	2c00      	cmp	r4, #0
 8004604:	d1f7      	bne.n	80045f6 <_fwalk_reent+0xe>
 8004606:	4638      	mov	r0, r7
 8004608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800460c:	89ab      	ldrh	r3, [r5, #12]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d907      	bls.n	8004622 <_fwalk_reent+0x3a>
 8004612:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004616:	3301      	adds	r3, #1
 8004618:	d003      	beq.n	8004622 <_fwalk_reent+0x3a>
 800461a:	4629      	mov	r1, r5
 800461c:	4630      	mov	r0, r6
 800461e:	47c0      	blx	r8
 8004620:	4307      	orrs	r7, r0
 8004622:	3568      	adds	r5, #104	; 0x68
 8004624:	e7e9      	b.n	80045fa <_fwalk_reent+0x12>

08004626 <__retarget_lock_init_recursive>:
 8004626:	4770      	bx	lr

08004628 <__retarget_lock_acquire_recursive>:
 8004628:	4770      	bx	lr

0800462a <__retarget_lock_release_recursive>:
 800462a:	4770      	bx	lr

0800462c <__swhatbuf_r>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	460e      	mov	r6, r1
 8004630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004634:	2900      	cmp	r1, #0
 8004636:	b096      	sub	sp, #88	; 0x58
 8004638:	4614      	mov	r4, r2
 800463a:	461d      	mov	r5, r3
 800463c:	da08      	bge.n	8004650 <__swhatbuf_r+0x24>
 800463e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	602a      	str	r2, [r5, #0]
 8004646:	061a      	lsls	r2, r3, #24
 8004648:	d410      	bmi.n	800466c <__swhatbuf_r+0x40>
 800464a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800464e:	e00e      	b.n	800466e <__swhatbuf_r+0x42>
 8004650:	466a      	mov	r2, sp
 8004652:	f000 f9af 	bl	80049b4 <_fstat_r>
 8004656:	2800      	cmp	r0, #0
 8004658:	dbf1      	blt.n	800463e <__swhatbuf_r+0x12>
 800465a:	9a01      	ldr	r2, [sp, #4]
 800465c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004660:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004664:	425a      	negs	r2, r3
 8004666:	415a      	adcs	r2, r3
 8004668:	602a      	str	r2, [r5, #0]
 800466a:	e7ee      	b.n	800464a <__swhatbuf_r+0x1e>
 800466c:	2340      	movs	r3, #64	; 0x40
 800466e:	2000      	movs	r0, #0
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	b016      	add	sp, #88	; 0x58
 8004674:	bd70      	pop	{r4, r5, r6, pc}
	...

08004678 <__smakebuf_r>:
 8004678:	898b      	ldrh	r3, [r1, #12]
 800467a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800467c:	079d      	lsls	r5, r3, #30
 800467e:	4606      	mov	r6, r0
 8004680:	460c      	mov	r4, r1
 8004682:	d507      	bpl.n	8004694 <__smakebuf_r+0x1c>
 8004684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	6123      	str	r3, [r4, #16]
 800468c:	2301      	movs	r3, #1
 800468e:	6163      	str	r3, [r4, #20]
 8004690:	b002      	add	sp, #8
 8004692:	bd70      	pop	{r4, r5, r6, pc}
 8004694:	ab01      	add	r3, sp, #4
 8004696:	466a      	mov	r2, sp
 8004698:	f7ff ffc8 	bl	800462c <__swhatbuf_r>
 800469c:	9900      	ldr	r1, [sp, #0]
 800469e:	4605      	mov	r5, r0
 80046a0:	4630      	mov	r0, r6
 80046a2:	f000 f89d 	bl	80047e0 <_malloc_r>
 80046a6:	b948      	cbnz	r0, 80046bc <__smakebuf_r+0x44>
 80046a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ac:	059a      	lsls	r2, r3, #22
 80046ae:	d4ef      	bmi.n	8004690 <__smakebuf_r+0x18>
 80046b0:	f023 0303 	bic.w	r3, r3, #3
 80046b4:	f043 0302 	orr.w	r3, r3, #2
 80046b8:	81a3      	strh	r3, [r4, #12]
 80046ba:	e7e3      	b.n	8004684 <__smakebuf_r+0xc>
 80046bc:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <__smakebuf_r+0x7c>)
 80046be:	62b3      	str	r3, [r6, #40]	; 0x28
 80046c0:	89a3      	ldrh	r3, [r4, #12]
 80046c2:	6020      	str	r0, [r4, #0]
 80046c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c8:	81a3      	strh	r3, [r4, #12]
 80046ca:	9b00      	ldr	r3, [sp, #0]
 80046cc:	6163      	str	r3, [r4, #20]
 80046ce:	9b01      	ldr	r3, [sp, #4]
 80046d0:	6120      	str	r0, [r4, #16]
 80046d2:	b15b      	cbz	r3, 80046ec <__smakebuf_r+0x74>
 80046d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046d8:	4630      	mov	r0, r6
 80046da:	f000 f97d 	bl	80049d8 <_isatty_r>
 80046de:	b128      	cbz	r0, 80046ec <__smakebuf_r+0x74>
 80046e0:	89a3      	ldrh	r3, [r4, #12]
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	81a3      	strh	r3, [r4, #12]
 80046ec:	89a0      	ldrh	r0, [r4, #12]
 80046ee:	4305      	orrs	r5, r0
 80046f0:	81a5      	strh	r5, [r4, #12]
 80046f2:	e7cd      	b.n	8004690 <__smakebuf_r+0x18>
 80046f4:	08004485 	.word	0x08004485

080046f8 <malloc>:
 80046f8:	4b02      	ldr	r3, [pc, #8]	; (8004704 <malloc+0xc>)
 80046fa:	4601      	mov	r1, r0
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	f000 b86f 	b.w	80047e0 <_malloc_r>
 8004702:	bf00      	nop
 8004704:	2000003c 	.word	0x2000003c

08004708 <_free_r>:
 8004708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800470a:	2900      	cmp	r1, #0
 800470c:	d044      	beq.n	8004798 <_free_r+0x90>
 800470e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004712:	9001      	str	r0, [sp, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	f1a1 0404 	sub.w	r4, r1, #4
 800471a:	bfb8      	it	lt
 800471c:	18e4      	addlt	r4, r4, r3
 800471e:	f000 f97d 	bl	8004a1c <__malloc_lock>
 8004722:	4a1e      	ldr	r2, [pc, #120]	; (800479c <_free_r+0x94>)
 8004724:	9801      	ldr	r0, [sp, #4]
 8004726:	6813      	ldr	r3, [r2, #0]
 8004728:	b933      	cbnz	r3, 8004738 <_free_r+0x30>
 800472a:	6063      	str	r3, [r4, #4]
 800472c:	6014      	str	r4, [r2, #0]
 800472e:	b003      	add	sp, #12
 8004730:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004734:	f000 b978 	b.w	8004a28 <__malloc_unlock>
 8004738:	42a3      	cmp	r3, r4
 800473a:	d908      	bls.n	800474e <_free_r+0x46>
 800473c:	6825      	ldr	r5, [r4, #0]
 800473e:	1961      	adds	r1, r4, r5
 8004740:	428b      	cmp	r3, r1
 8004742:	bf01      	itttt	eq
 8004744:	6819      	ldreq	r1, [r3, #0]
 8004746:	685b      	ldreq	r3, [r3, #4]
 8004748:	1949      	addeq	r1, r1, r5
 800474a:	6021      	streq	r1, [r4, #0]
 800474c:	e7ed      	b.n	800472a <_free_r+0x22>
 800474e:	461a      	mov	r2, r3
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	b10b      	cbz	r3, 8004758 <_free_r+0x50>
 8004754:	42a3      	cmp	r3, r4
 8004756:	d9fa      	bls.n	800474e <_free_r+0x46>
 8004758:	6811      	ldr	r1, [r2, #0]
 800475a:	1855      	adds	r5, r2, r1
 800475c:	42a5      	cmp	r5, r4
 800475e:	d10b      	bne.n	8004778 <_free_r+0x70>
 8004760:	6824      	ldr	r4, [r4, #0]
 8004762:	4421      	add	r1, r4
 8004764:	1854      	adds	r4, r2, r1
 8004766:	42a3      	cmp	r3, r4
 8004768:	6011      	str	r1, [r2, #0]
 800476a:	d1e0      	bne.n	800472e <_free_r+0x26>
 800476c:	681c      	ldr	r4, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	6053      	str	r3, [r2, #4]
 8004772:	4421      	add	r1, r4
 8004774:	6011      	str	r1, [r2, #0]
 8004776:	e7da      	b.n	800472e <_free_r+0x26>
 8004778:	d902      	bls.n	8004780 <_free_r+0x78>
 800477a:	230c      	movs	r3, #12
 800477c:	6003      	str	r3, [r0, #0]
 800477e:	e7d6      	b.n	800472e <_free_r+0x26>
 8004780:	6825      	ldr	r5, [r4, #0]
 8004782:	1961      	adds	r1, r4, r5
 8004784:	428b      	cmp	r3, r1
 8004786:	bf04      	itt	eq
 8004788:	6819      	ldreq	r1, [r3, #0]
 800478a:	685b      	ldreq	r3, [r3, #4]
 800478c:	6063      	str	r3, [r4, #4]
 800478e:	bf04      	itt	eq
 8004790:	1949      	addeq	r1, r1, r5
 8004792:	6021      	streq	r1, [r4, #0]
 8004794:	6054      	str	r4, [r2, #4]
 8004796:	e7ca      	b.n	800472e <_free_r+0x26>
 8004798:	b003      	add	sp, #12
 800479a:	bd30      	pop	{r4, r5, pc}
 800479c:	200001c4 	.word	0x200001c4

080047a0 <sbrk_aligned>:
 80047a0:	b570      	push	{r4, r5, r6, lr}
 80047a2:	4e0e      	ldr	r6, [pc, #56]	; (80047dc <sbrk_aligned+0x3c>)
 80047a4:	460c      	mov	r4, r1
 80047a6:	6831      	ldr	r1, [r6, #0]
 80047a8:	4605      	mov	r5, r0
 80047aa:	b911      	cbnz	r1, 80047b2 <sbrk_aligned+0x12>
 80047ac:	f000 f88c 	bl	80048c8 <_sbrk_r>
 80047b0:	6030      	str	r0, [r6, #0]
 80047b2:	4621      	mov	r1, r4
 80047b4:	4628      	mov	r0, r5
 80047b6:	f000 f887 	bl	80048c8 <_sbrk_r>
 80047ba:	1c43      	adds	r3, r0, #1
 80047bc:	d00a      	beq.n	80047d4 <sbrk_aligned+0x34>
 80047be:	1cc4      	adds	r4, r0, #3
 80047c0:	f024 0403 	bic.w	r4, r4, #3
 80047c4:	42a0      	cmp	r0, r4
 80047c6:	d007      	beq.n	80047d8 <sbrk_aligned+0x38>
 80047c8:	1a21      	subs	r1, r4, r0
 80047ca:	4628      	mov	r0, r5
 80047cc:	f000 f87c 	bl	80048c8 <_sbrk_r>
 80047d0:	3001      	adds	r0, #1
 80047d2:	d101      	bne.n	80047d8 <sbrk_aligned+0x38>
 80047d4:	f04f 34ff 	mov.w	r4, #4294967295
 80047d8:	4620      	mov	r0, r4
 80047da:	bd70      	pop	{r4, r5, r6, pc}
 80047dc:	200001c8 	.word	0x200001c8

080047e0 <_malloc_r>:
 80047e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047e4:	1ccd      	adds	r5, r1, #3
 80047e6:	f025 0503 	bic.w	r5, r5, #3
 80047ea:	3508      	adds	r5, #8
 80047ec:	2d0c      	cmp	r5, #12
 80047ee:	bf38      	it	cc
 80047f0:	250c      	movcc	r5, #12
 80047f2:	2d00      	cmp	r5, #0
 80047f4:	4607      	mov	r7, r0
 80047f6:	db01      	blt.n	80047fc <_malloc_r+0x1c>
 80047f8:	42a9      	cmp	r1, r5
 80047fa:	d905      	bls.n	8004808 <_malloc_r+0x28>
 80047fc:	230c      	movs	r3, #12
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	2600      	movs	r6, #0
 8004802:	4630      	mov	r0, r6
 8004804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004808:	4e2e      	ldr	r6, [pc, #184]	; (80048c4 <_malloc_r+0xe4>)
 800480a:	f000 f907 	bl	8004a1c <__malloc_lock>
 800480e:	6833      	ldr	r3, [r6, #0]
 8004810:	461c      	mov	r4, r3
 8004812:	bb34      	cbnz	r4, 8004862 <_malloc_r+0x82>
 8004814:	4629      	mov	r1, r5
 8004816:	4638      	mov	r0, r7
 8004818:	f7ff ffc2 	bl	80047a0 <sbrk_aligned>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	4604      	mov	r4, r0
 8004820:	d14d      	bne.n	80048be <_malloc_r+0xde>
 8004822:	6834      	ldr	r4, [r6, #0]
 8004824:	4626      	mov	r6, r4
 8004826:	2e00      	cmp	r6, #0
 8004828:	d140      	bne.n	80048ac <_malloc_r+0xcc>
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	4631      	mov	r1, r6
 800482e:	4638      	mov	r0, r7
 8004830:	eb04 0803 	add.w	r8, r4, r3
 8004834:	f000 f848 	bl	80048c8 <_sbrk_r>
 8004838:	4580      	cmp	r8, r0
 800483a:	d13a      	bne.n	80048b2 <_malloc_r+0xd2>
 800483c:	6821      	ldr	r1, [r4, #0]
 800483e:	3503      	adds	r5, #3
 8004840:	1a6d      	subs	r5, r5, r1
 8004842:	f025 0503 	bic.w	r5, r5, #3
 8004846:	3508      	adds	r5, #8
 8004848:	2d0c      	cmp	r5, #12
 800484a:	bf38      	it	cc
 800484c:	250c      	movcc	r5, #12
 800484e:	4629      	mov	r1, r5
 8004850:	4638      	mov	r0, r7
 8004852:	f7ff ffa5 	bl	80047a0 <sbrk_aligned>
 8004856:	3001      	adds	r0, #1
 8004858:	d02b      	beq.n	80048b2 <_malloc_r+0xd2>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	442b      	add	r3, r5
 800485e:	6023      	str	r3, [r4, #0]
 8004860:	e00e      	b.n	8004880 <_malloc_r+0xa0>
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	1b52      	subs	r2, r2, r5
 8004866:	d41e      	bmi.n	80048a6 <_malloc_r+0xc6>
 8004868:	2a0b      	cmp	r2, #11
 800486a:	d916      	bls.n	800489a <_malloc_r+0xba>
 800486c:	1961      	adds	r1, r4, r5
 800486e:	42a3      	cmp	r3, r4
 8004870:	6025      	str	r5, [r4, #0]
 8004872:	bf18      	it	ne
 8004874:	6059      	strne	r1, [r3, #4]
 8004876:	6863      	ldr	r3, [r4, #4]
 8004878:	bf08      	it	eq
 800487a:	6031      	streq	r1, [r6, #0]
 800487c:	5162      	str	r2, [r4, r5]
 800487e:	604b      	str	r3, [r1, #4]
 8004880:	4638      	mov	r0, r7
 8004882:	f104 060b 	add.w	r6, r4, #11
 8004886:	f000 f8cf 	bl	8004a28 <__malloc_unlock>
 800488a:	f026 0607 	bic.w	r6, r6, #7
 800488e:	1d23      	adds	r3, r4, #4
 8004890:	1af2      	subs	r2, r6, r3
 8004892:	d0b6      	beq.n	8004802 <_malloc_r+0x22>
 8004894:	1b9b      	subs	r3, r3, r6
 8004896:	50a3      	str	r3, [r4, r2]
 8004898:	e7b3      	b.n	8004802 <_malloc_r+0x22>
 800489a:	6862      	ldr	r2, [r4, #4]
 800489c:	42a3      	cmp	r3, r4
 800489e:	bf0c      	ite	eq
 80048a0:	6032      	streq	r2, [r6, #0]
 80048a2:	605a      	strne	r2, [r3, #4]
 80048a4:	e7ec      	b.n	8004880 <_malloc_r+0xa0>
 80048a6:	4623      	mov	r3, r4
 80048a8:	6864      	ldr	r4, [r4, #4]
 80048aa:	e7b2      	b.n	8004812 <_malloc_r+0x32>
 80048ac:	4634      	mov	r4, r6
 80048ae:	6876      	ldr	r6, [r6, #4]
 80048b0:	e7b9      	b.n	8004826 <_malloc_r+0x46>
 80048b2:	230c      	movs	r3, #12
 80048b4:	603b      	str	r3, [r7, #0]
 80048b6:	4638      	mov	r0, r7
 80048b8:	f000 f8b6 	bl	8004a28 <__malloc_unlock>
 80048bc:	e7a1      	b.n	8004802 <_malloc_r+0x22>
 80048be:	6025      	str	r5, [r4, #0]
 80048c0:	e7de      	b.n	8004880 <_malloc_r+0xa0>
 80048c2:	bf00      	nop
 80048c4:	200001c4 	.word	0x200001c4

080048c8 <_sbrk_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4d06      	ldr	r5, [pc, #24]	; (80048e4 <_sbrk_r+0x1c>)
 80048cc:	2300      	movs	r3, #0
 80048ce:	4604      	mov	r4, r0
 80048d0:	4608      	mov	r0, r1
 80048d2:	602b      	str	r3, [r5, #0]
 80048d4:	f7fc fb14 	bl	8000f00 <_sbrk>
 80048d8:	1c43      	adds	r3, r0, #1
 80048da:	d102      	bne.n	80048e2 <_sbrk_r+0x1a>
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	b103      	cbz	r3, 80048e2 <_sbrk_r+0x1a>
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	200001cc 	.word	0x200001cc

080048e8 <__sread>:
 80048e8:	b510      	push	{r4, lr}
 80048ea:	460c      	mov	r4, r1
 80048ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f0:	f000 f8a0 	bl	8004a34 <_read_r>
 80048f4:	2800      	cmp	r0, #0
 80048f6:	bfab      	itete	ge
 80048f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048fa:	89a3      	ldrhlt	r3, [r4, #12]
 80048fc:	181b      	addge	r3, r3, r0
 80048fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004902:	bfac      	ite	ge
 8004904:	6563      	strge	r3, [r4, #84]	; 0x54
 8004906:	81a3      	strhlt	r3, [r4, #12]
 8004908:	bd10      	pop	{r4, pc}

0800490a <__swrite>:
 800490a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800490e:	461f      	mov	r7, r3
 8004910:	898b      	ldrh	r3, [r1, #12]
 8004912:	05db      	lsls	r3, r3, #23
 8004914:	4605      	mov	r5, r0
 8004916:	460c      	mov	r4, r1
 8004918:	4616      	mov	r6, r2
 800491a:	d505      	bpl.n	8004928 <__swrite+0x1e>
 800491c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004920:	2302      	movs	r3, #2
 8004922:	2200      	movs	r2, #0
 8004924:	f000 f868 	bl	80049f8 <_lseek_r>
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800492e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004932:	81a3      	strh	r3, [r4, #12]
 8004934:	4632      	mov	r2, r6
 8004936:	463b      	mov	r3, r7
 8004938:	4628      	mov	r0, r5
 800493a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800493e:	f000 b817 	b.w	8004970 <_write_r>

08004942 <__sseek>:
 8004942:	b510      	push	{r4, lr}
 8004944:	460c      	mov	r4, r1
 8004946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800494a:	f000 f855 	bl	80049f8 <_lseek_r>
 800494e:	1c43      	adds	r3, r0, #1
 8004950:	89a3      	ldrh	r3, [r4, #12]
 8004952:	bf15      	itete	ne
 8004954:	6560      	strne	r0, [r4, #84]	; 0x54
 8004956:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800495a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800495e:	81a3      	strheq	r3, [r4, #12]
 8004960:	bf18      	it	ne
 8004962:	81a3      	strhne	r3, [r4, #12]
 8004964:	bd10      	pop	{r4, pc}

08004966 <__sclose>:
 8004966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800496a:	f000 b813 	b.w	8004994 <_close_r>
	...

08004970 <_write_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4d07      	ldr	r5, [pc, #28]	; (8004990 <_write_r+0x20>)
 8004974:	4604      	mov	r4, r0
 8004976:	4608      	mov	r0, r1
 8004978:	4611      	mov	r1, r2
 800497a:	2200      	movs	r2, #0
 800497c:	602a      	str	r2, [r5, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	f7fb fdcc 	bl	800051c <_write>
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	d102      	bne.n	800498e <_write_r+0x1e>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	b103      	cbz	r3, 800498e <_write_r+0x1e>
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	bd38      	pop	{r3, r4, r5, pc}
 8004990:	200001cc 	.word	0x200001cc

08004994 <_close_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	4d06      	ldr	r5, [pc, #24]	; (80049b0 <_close_r+0x1c>)
 8004998:	2300      	movs	r3, #0
 800499a:	4604      	mov	r4, r0
 800499c:	4608      	mov	r0, r1
 800499e:	602b      	str	r3, [r5, #0]
 80049a0:	f7fc fa79 	bl	8000e96 <_close>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d102      	bne.n	80049ae <_close_r+0x1a>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	b103      	cbz	r3, 80049ae <_close_r+0x1a>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	200001cc 	.word	0x200001cc

080049b4 <_fstat_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4d07      	ldr	r5, [pc, #28]	; (80049d4 <_fstat_r+0x20>)
 80049b8:	2300      	movs	r3, #0
 80049ba:	4604      	mov	r4, r0
 80049bc:	4608      	mov	r0, r1
 80049be:	4611      	mov	r1, r2
 80049c0:	602b      	str	r3, [r5, #0]
 80049c2:	f7fc fa74 	bl	8000eae <_fstat>
 80049c6:	1c43      	adds	r3, r0, #1
 80049c8:	d102      	bne.n	80049d0 <_fstat_r+0x1c>
 80049ca:	682b      	ldr	r3, [r5, #0]
 80049cc:	b103      	cbz	r3, 80049d0 <_fstat_r+0x1c>
 80049ce:	6023      	str	r3, [r4, #0]
 80049d0:	bd38      	pop	{r3, r4, r5, pc}
 80049d2:	bf00      	nop
 80049d4:	200001cc 	.word	0x200001cc

080049d8 <_isatty_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	4d06      	ldr	r5, [pc, #24]	; (80049f4 <_isatty_r+0x1c>)
 80049dc:	2300      	movs	r3, #0
 80049de:	4604      	mov	r4, r0
 80049e0:	4608      	mov	r0, r1
 80049e2:	602b      	str	r3, [r5, #0]
 80049e4:	f7fc fa73 	bl	8000ece <_isatty>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_isatty_r+0x1a>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_isatty_r+0x1a>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	200001cc 	.word	0x200001cc

080049f8 <_lseek_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4d07      	ldr	r5, [pc, #28]	; (8004a18 <_lseek_r+0x20>)
 80049fc:	4604      	mov	r4, r0
 80049fe:	4608      	mov	r0, r1
 8004a00:	4611      	mov	r1, r2
 8004a02:	2200      	movs	r2, #0
 8004a04:	602a      	str	r2, [r5, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	f7fc fa6c 	bl	8000ee4 <_lseek>
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	d102      	bne.n	8004a16 <_lseek_r+0x1e>
 8004a10:	682b      	ldr	r3, [r5, #0]
 8004a12:	b103      	cbz	r3, 8004a16 <_lseek_r+0x1e>
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	bd38      	pop	{r3, r4, r5, pc}
 8004a18:	200001cc 	.word	0x200001cc

08004a1c <__malloc_lock>:
 8004a1c:	4801      	ldr	r0, [pc, #4]	; (8004a24 <__malloc_lock+0x8>)
 8004a1e:	f7ff be03 	b.w	8004628 <__retarget_lock_acquire_recursive>
 8004a22:	bf00      	nop
 8004a24:	200001c0 	.word	0x200001c0

08004a28 <__malloc_unlock>:
 8004a28:	4801      	ldr	r0, [pc, #4]	; (8004a30 <__malloc_unlock+0x8>)
 8004a2a:	f7ff bdfe 	b.w	800462a <__retarget_lock_release_recursive>
 8004a2e:	bf00      	nop
 8004a30:	200001c0 	.word	0x200001c0

08004a34 <_read_r>:
 8004a34:	b538      	push	{r3, r4, r5, lr}
 8004a36:	4d07      	ldr	r5, [pc, #28]	; (8004a54 <_read_r+0x20>)
 8004a38:	4604      	mov	r4, r0
 8004a3a:	4608      	mov	r0, r1
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	2200      	movs	r2, #0
 8004a40:	602a      	str	r2, [r5, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	f7fc fa0a 	bl	8000e5c <_read>
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	d102      	bne.n	8004a52 <_read_r+0x1e>
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	b103      	cbz	r3, 8004a52 <_read_r+0x1e>
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	bd38      	pop	{r3, r4, r5, pc}
 8004a54:	200001cc 	.word	0x200001cc

08004a58 <_init>:
 8004a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5a:	bf00      	nop
 8004a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5e:	bc08      	pop	{r3}
 8004a60:	469e      	mov	lr, r3
 8004a62:	4770      	bx	lr

08004a64 <_fini>:
 8004a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a66:	bf00      	nop
 8004a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6a:	bc08      	pop	{r3}
 8004a6c:	469e      	mov	lr, r3
 8004a6e:	4770      	bx	lr
