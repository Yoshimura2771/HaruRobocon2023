
AirCylinderDriver3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047cc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a9c  08004a9c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004aa4  08004aa4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa4  08004aa4  00014aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08004aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  200000a0  08004b4c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08004b4c  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fef8  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc9  00000000  00000000  0002ffc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00031f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  00032c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e44d  00000000  00000000  000337c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfce  00000000  00000000  00051c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd727  00000000  00000000  0005fbdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d302  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a8c  00000000  00000000  0011d354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a0 	.word	0x200000a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800498c 	.word	0x0800498c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000a4 	.word	0x200000a4
 8000214:	0800498c 	.word	0x0800498c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	b29a      	uxth	r2, r3
 800052c:	230a      	movs	r3, #10
 800052e:	68b9      	ldr	r1, [r7, #8]
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <_write+0x24>)
 8000532:	f002 fe0b 	bl	800314c <HAL_UART_Transmit>
	return len;
 8000536:	687b      	ldr	r3, [r7, #4]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000120 	.word	0x20000120

08000544 <CylN>:

void CylN(uint8_t CylID){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	printf("N\r\n");
 800054e:	4812      	ldr	r0, [pc, #72]	; (8000598 <CylN+0x54>)
 8000550:	f003 fcb6 	bl	8003ec0 <puts>
	HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_RESET);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	4a10      	ldr	r2, [pc, #64]	; (800059c <CylN+0x58>)
 800055a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	4a0f      	ldr	r2, [pc, #60]	; (80005a0 <CylN+0x5c>)
 8000564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000568:	2200      	movs	r2, #0
 800056a:	4619      	mov	r1, r3
 800056c:	f001 fdbe 	bl	80020ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_RESET);
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	3301      	adds	r3, #1
 8000576:	4a09      	ldr	r2, [pc, #36]	; (800059c <CylN+0x58>)
 8000578:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	3301      	adds	r3, #1
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <CylN+0x5c>)
 8000584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000588:	2200      	movs	r2, #0
 800058a:	4619      	mov	r1, r3
 800058c:	f001 fdae 	bl	80020ec <HAL_GPIO_WritePin>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	080049a4 	.word	0x080049a4
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000020 	.word	0x20000020

080005a4 <CylPush>:

void CylPush(uint8_t CylID){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
	printf("Push\r\n");
 80005ae:	4812      	ldr	r0, [pc, #72]	; (80005f8 <CylPush+0x54>)
 80005b0:	f003 fc86 	bl	8003ec0 <puts>
	HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_SET);
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	4a10      	ldr	r2, [pc, #64]	; (80005fc <CylPush+0x58>)
 80005ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <CylPush+0x5c>)
 80005c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005c8:	2201      	movs	r2, #1
 80005ca:	4619      	mov	r1, r3
 80005cc:	f001 fd8e 	bl	80020ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_RESET);
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a09      	ldr	r2, [pc, #36]	; (80005fc <CylPush+0x58>)
 80005d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a07      	ldr	r2, [pc, #28]	; (8000600 <CylPush+0x5c>)
 80005e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	f001 fd7e 	bl	80020ec <HAL_GPIO_WritePin>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	080049a8 	.word	0x080049a8
 80005fc:	20000000 	.word	0x20000000
 8000600:	20000020 	.word	0x20000020

08000604 <CylPull>:

void CylPull(uint8_t CylID){
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	printf("Move B\r\n");
 800060e:	4812      	ldr	r0, [pc, #72]	; (8000658 <CylPull+0x54>)
 8000610:	f003 fc56 	bl	8003ec0 <puts>
	HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_RESET);
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4a10      	ldr	r2, [pc, #64]	; (800065c <CylPull+0x58>)
 800061a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <CylPull+0x5c>)
 8000624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000628:	2200      	movs	r2, #0
 800062a:	4619      	mov	r1, r3
 800062c:	f001 fd5e 	bl	80020ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_SET);
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	3301      	adds	r3, #1
 8000636:	4a09      	ldr	r2, [pc, #36]	; (800065c <CylPull+0x58>)
 8000638:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	3301      	adds	r3, #1
 8000642:	4a07      	ldr	r2, [pc, #28]	; (8000660 <CylPull+0x5c>)
 8000644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000648:	2201      	movs	r2, #1
 800064a:	4619      	mov	r1, r3
 800064c:	f001 fd4e 	bl	80020ec <HAL_GPIO_WritePin>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	080049b0 	.word	0x080049b0
 800065c:	20000000 	.word	0x20000000
 8000660:	20000020 	.word	0x20000020

08000664 <CylThrow>:

void CylThrow(uint8_t CylID){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	printf("Throw\r\n");
 800066e:	480f      	ldr	r0, [pc, #60]	; (80006ac <CylThrow+0x48>)
 8000670:	f003 fc26 	bl	8003ec0 <puts>
	CylPush(CylID);
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff94 	bl	80005a4 <CylPush>
	HAL_Delay(DELAYMS);
 800067c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000680:	f000 fcba 	bl	8000ff8 <HAL_Delay>
	CylPull(CylID);
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ffbc 	bl	8000604 <CylPull>
	HAL_Delay(DELAYMS);
 800068c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000690:	f000 fcb2 	bl	8000ff8 <HAL_Delay>
	CylN(CylID);
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff54 	bl	8000544 <CylN>
	CylFlag[CylID]=0;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <CylThrow+0x4c>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	54d1      	strb	r1, [r2, r3]
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	080049b8 	.word	0x080049b8
 80006b0:	200001b0 	.word	0x200001b0

080006b4 <CylRThrow>:

void CylRThrow(uint8_t CylID){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	printf("Throw\r\n");
 80006be:	480f      	ldr	r0, [pc, #60]	; (80006fc <CylRThrow+0x48>)
 80006c0:	f003 fbfe 	bl	8003ec0 <puts>
	CylPull(CylID);
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff9c 	bl	8000604 <CylPull>
	HAL_Delay(DELAYMS);
 80006cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d0:	f000 fc92 	bl	8000ff8 <HAL_Delay>
	CylPush(CylID);
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff64 	bl	80005a4 <CylPush>
	HAL_Delay(DELAYMS);
 80006dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e0:	f000 fc8a 	bl	8000ff8 <HAL_Delay>
	CylN(CylID);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff2c 	bl	8000544 <CylN>
	CylFlag[CylID]=0;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <CylRThrow+0x4c>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	54d1      	strb	r1, [r2, r3]
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	080049b8 	.word	0x080049b8
 8000700:	200001b0 	.word	0x200001b0

08000704 <CylDrive1>:
void CylStop(uint8_t CylID){
	HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_SET);
}

void CylDrive1(uint8_t CylID){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	printf("exception1\r\n");
 800070e:	4803      	ldr	r0, [pc, #12]	; (800071c <CylDrive1+0x18>)
 8000710:	f003 fbd6 	bl	8003ec0 <puts>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	080049c0 	.word	0x080049c0

08000720 <CylDrive2>:
void CylDrive2(uint8_t CylID){
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
	printf("exception2\r\n");
 800072a:	4803      	ldr	r0, [pc, #12]	; (8000738 <CylDrive2+0x18>)
 800072c:	f003 fbc8 	bl	8003ec0 <puts>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	080049cc 	.word	0x080049cc

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f000 fbe8 	bl	8000f16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f851 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f000 f971 	bl	8000a30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800074e:	f000 f919 	bl	8000984 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000752:	f000 f897 	bl	8000884 <MX_FDCAN1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(uint8_t i=0; i<7; i++){
 8000756:	2300      	movs	r3, #0
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	e03d      	b.n	80007d8 <main+0x9c>

		  switch(CylFlag[i]){
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <main+0xac>)
 8000760:	5cd3      	ldrb	r3, [r2, r3]
 8000762:	2b07      	cmp	r3, #7
 8000764:	d835      	bhi.n	80007d2 <main+0x96>
 8000766:	a201      	add	r2, pc, #4	; (adr r2, 800076c <main+0x30>)
 8000768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076c:	0800078d 	.word	0x0800078d
 8000770:	08000797 	.word	0x08000797
 8000774:	080007a1 	.word	0x080007a1
 8000778:	080007ab 	.word	0x080007ab
 800077c:	080007b5 	.word	0x080007b5
 8000780:	080007d3 	.word	0x080007d3
 8000784:	080007bf 	.word	0x080007bf
 8000788:	080007c9 	.word	0x080007c9

		  		case 0:
		  			CylN(i);
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fed8 	bl	8000544 <CylN>
		  			break;
 8000794:	e01d      	b.n	80007d2 <main+0x96>

		  		case 1:
		  			CylPush(i);
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff03 	bl	80005a4 <CylPush>
		  			break;
 800079e:	e018      	b.n	80007d2 <main+0x96>

		  		case 2:
		  			CylPull(i);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff2e 	bl	8000604 <CylPull>
		  			break;
 80007a8:	e013      	b.n	80007d2 <main+0x96>

		  		case 3:
		  			CylThrow(i);
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff59 	bl	8000664 <CylThrow>
		  			break;
 80007b2:	e00e      	b.n	80007d2 <main+0x96>

		  		case 4:
		  			CylRThrow(i);
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff7c 	bl	80006b4 <CylRThrow>
		  			break;
 80007bc:	e009      	b.n	80007d2 <main+0x96>
		  		case 5:
		  			break;
		  		case 6:
		  			CylDrive1(i);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff9f 	bl	8000704 <CylDrive1>
		  			break;
 80007c6:	e004      	b.n	80007d2 <main+0x96>
		  		case 7:
		  			CylDrive2(i);
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ffa8 	bl	8000720 <CylDrive2>
		  			break;
 80007d0:	bf00      	nop
	  for(uint8_t i=0; i<7; i++){
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	3301      	adds	r3, #1
 80007d6:	71fb      	strb	r3, [r7, #7]
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d9be      	bls.n	800075c <main+0x20>
		  		}

	  }

	  HAL_Delay(15);
 80007de:	200f      	movs	r0, #15
 80007e0:	f000 fc0a 	bl	8000ff8 <HAL_Delay>
	  for(uint8_t i=0; i<7; i++){
 80007e4:	e7b7      	b.n	8000756 <main+0x1a>
 80007e6:	bf00      	nop
 80007e8:	200001b0 	.word	0x200001b0

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	; 0x50
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	2238      	movs	r2, #56	; 0x38
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 faea 	bl	8003dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000812:	f001 fc83 	bl	800211c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000816:	2302      	movs	r3, #2
 8000818:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000820:	2340      	movs	r3, #64	; 0x40
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000828:	2302      	movs	r3, #2
 800082a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800082c:	2301      	movs	r3, #1
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000830:	230a      	movs	r3, #10
 8000832:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000834:	2302      	movs	r3, #2
 8000836:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800083c:	2302      	movs	r3, #2
 800083e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0318 	add.w	r3, r7, #24
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fd0d 	bl	8002264 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000850:	f000 f974 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2303      	movs	r3, #3
 800085a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2102      	movs	r1, #2
 800086c:	4618      	mov	r0, r3
 800086e:	f002 f811 	bl	8002894 <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000878:	f000 f960 	bl	8000b3c <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3750      	adds	r7, #80	; 0x50
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800088a:	4b3c      	ldr	r3, [pc, #240]	; (800097c <MX_FDCAN1_Init+0xf8>)
 800088c:	4a3c      	ldr	r2, [pc, #240]	; (8000980 <MX_FDCAN1_Init+0xfc>)
 800088e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000890:	4b3a      	ldr	r3, [pc, #232]	; (800097c <MX_FDCAN1_Init+0xf8>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000896:	4b39      	ldr	r3, [pc, #228]	; (800097c <MX_FDCAN1_Init+0xf8>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800089c:	4b37      	ldr	r3, [pc, #220]	; (800097c <MX_FDCAN1_Init+0xf8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80008a2:	4b36      	ldr	r3, [pc, #216]	; (800097c <MX_FDCAN1_Init+0xf8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80008a8:	4b34      	ldr	r3, [pc, #208]	; (800097c <MX_FDCAN1_Init+0xf8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <MX_FDCAN1_Init+0xf8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 80008b4:	4b31      	ldr	r3, [pc, #196]	; (800097c <MX_FDCAN1_Init+0xf8>)
 80008b6:	2205      	movs	r2, #5
 80008b8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <MX_FDCAN1_Init+0xf8>)
 80008bc:	2210      	movs	r2, #16
 80008be:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80008c0:	4b2e      	ldr	r3, [pc, #184]	; (800097c <MX_FDCAN1_Init+0xf8>)
 80008c2:	220d      	movs	r2, #13
 80008c4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80008c6:	4b2d      	ldr	r3, [pc, #180]	; (800097c <MX_FDCAN1_Init+0xf8>)
 80008c8:	2202      	movs	r2, #2
 80008ca:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80008cc:	4b2b      	ldr	r3, [pc, #172]	; (800097c <MX_FDCAN1_Init+0xf8>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <MX_FDCAN1_Init+0xf8>)
 80008d4:	2204      	movs	r2, #4
 80008d6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <MX_FDCAN1_Init+0xf8>)
 80008da:	2205      	movs	r2, #5
 80008dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80008de:	4b27      	ldr	r3, [pc, #156]	; (800097c <MX_FDCAN1_Init+0xf8>)
 80008e0:	2204      	movs	r2, #4
 80008e2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_FDCAN1_Init+0xf8>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <MX_FDCAN1_Init+0xf8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_FDCAN1_Init+0xf8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008f6:	4821      	ldr	r0, [pc, #132]	; (800097c <MX_FDCAN1_Init+0xf8>)
 80008f8:	f000 fcb0 	bl	800125c <HAL_FDCAN_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000902:	f000 f91b 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
  	sFilterConfig.FilterIndex = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800090e:	2302      	movs	r3, #2
 8000910:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000912:	2301      	movs	r3, #1
 8000914:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterID1 = CANID_FSTCYL;
 8000916:	f44f 7306 	mov.w	r3, #536	; 0x218
 800091a:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterID2 = 0x7F8;
 800091c:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000920:	617b      	str	r3, [r7, #20]

  	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000922:	463b      	mov	r3, r7
 8000924:	4619      	mov	r1, r3
 8000926:	4815      	ldr	r0, [pc, #84]	; (800097c <MX_FDCAN1_Init+0xf8>)
 8000928:	f000 fdf2 	bl	8001510 <HAL_FDCAN_ConfigFilter>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_FDCAN1_Init+0xb2>
  		Error_Handler();
 8000932:	f000 f903 	bl	8000b3c <Error_Handler>
  	}
  	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8000936:	2300      	movs	r3, #0
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2300      	movs	r3, #0
 800093c:	2202      	movs	r2, #2
 800093e:	2102      	movs	r1, #2
 8000940:	480e      	ldr	r0, [pc, #56]	; (800097c <MX_FDCAN1_Init+0xf8>)
 8000942:	f000 fe3f 	bl	80015c4 <HAL_FDCAN_ConfigGlobalFilter>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_FDCAN1_Init+0xcc>
  		Error_Handler();
 800094c:	f000 f8f6 	bl	8000b3c <Error_Handler>
  	}

  	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000950:	480a      	ldr	r0, [pc, #40]	; (800097c <MX_FDCAN1_Init+0xf8>)
 8000952:	f000 fe68 	bl	8001626 <HAL_FDCAN_Start>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_FDCAN1_Init+0xdc>
  		Error_Handler();
 800095c:	f000 f8ee 	bl	8000b3c <Error_Handler>
  	}
  	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000960:	2200      	movs	r2, #0
 8000962:	2101      	movs	r1, #1
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_FDCAN1_Init+0xf8>)
 8000966:	f000 ff61 	bl	800182c <HAL_FDCAN_ActivateNotification>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_FDCAN1_Init+0xf0>
  	  Error_Handler();
 8000970:	f000 f8e4 	bl	8000b3c <Error_Handler>
  	}

  /* USER CODE END FDCAN1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200000bc 	.word	0x200000bc
 8000980:	40006400 	.word	0x40006400

08000984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000988:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <MX_USART2_UART_Init+0xa0>)
 800098a:	4a27      	ldr	r2, [pc, #156]	; (8000a28 <MX_USART2_UART_Init+0xa4>)
 800098c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098e:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <MX_USART2_UART_Init+0xa0>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <MX_USART2_UART_Init+0xa0>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <MX_USART2_UART_Init+0xa0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <MX_USART2_UART_Init+0xa0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_USART2_UART_Init+0xa0>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <MX_USART2_UART_Init+0xa0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_USART2_UART_Init+0xa0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_USART2_UART_Init+0xa0>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_USART2_UART_Init+0xa0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_USART2_UART_Init+0xa0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009cc:	4815      	ldr	r0, [pc, #84]	; (8000a24 <MX_USART2_UART_Init+0xa0>)
 80009ce:	f002 fb6d 	bl	80030ac <HAL_UART_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009d8:	f000 f8b0 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009dc:	2100      	movs	r1, #0
 80009de:	4811      	ldr	r0, [pc, #68]	; (8000a24 <MX_USART2_UART_Init+0xa0>)
 80009e0:	f003 f904 	bl	8003bec <HAL_UARTEx_SetTxFifoThreshold>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009ea:	f000 f8a7 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <MX_USART2_UART_Init+0xa0>)
 80009f2:	f003 f939 	bl	8003c68 <HAL_UARTEx_SetRxFifoThreshold>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009fc:	f000 f89e 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a00:	4808      	ldr	r0, [pc, #32]	; (8000a24 <MX_USART2_UART_Init+0xa0>)
 8000a02:	f003 f8ba 	bl	8003b7a <HAL_UARTEx_DisableFifoMode>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a0c:	f000 f896 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  setbuf(stdout, NULL);
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USART2_UART_Init+0xa8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f003 fa59 	bl	8003ed0 <setbuf>
  /* USER CODE END USART2_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000120 	.word	0x20000120
 8000a28:	40004400 	.word	0x40004400
 8000a2c:	2000003c 	.word	0x2000003c

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <MX_GPIO_Init+0xa8>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <MX_GPIO_Init+0xa8>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <MX_GPIO_Init+0xa8>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <MX_GPIO_Init+0xa8>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a1d      	ldr	r2, [pc, #116]	; (8000ad8 <MX_GPIO_Init+0xa8>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_GPIO_Init+0xa8>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CYL1A_Pin|CYL1B_Pin|CYL2A_Pin|CYL2B_Pin
 8000a76:	2200      	movs	r2, #0
 8000a78:	f240 7103 	movw	r1, #1795	; 0x703
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f001 fb34 	bl	80020ec <HAL_GPIO_WritePin>
                          |CYL3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CYL3B_Pin|CYL4A_Pin|CYL4B_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 719c 	mov.w	r1, #312	; 0x138
 8000a8a:	4814      	ldr	r0, [pc, #80]	; (8000adc <MX_GPIO_Init+0xac>)
 8000a8c:	f001 fb2e 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CYL1A_Pin CYL1B_Pin CYL2A_Pin CYL2B_Pin
                           CYL3A_Pin */
  GPIO_InitStruct.Pin = CYL1A_Pin|CYL1B_Pin|CYL2A_Pin|CYL2B_Pin
 8000a90:	f240 7303 	movw	r3, #1795	; 0x703
 8000a94:	60fb      	str	r3, [r7, #12]
                          |CYL3A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f001 f99c 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CYL3B_Pin CYL4A_Pin CYL4B_Pin LD2_Pin */
  GPIO_InitStruct.Pin = CYL3B_Pin|CYL4A_Pin|CYL4B_Pin|LD2_Pin;
 8000ab0:	f44f 739c 	mov.w	r3, #312	; 0x138
 8000ab4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_GPIO_Init+0xac>)
 8000aca:	f001 f98d 	bl	8001de8 <HAL_GPIO_Init>

}
 8000ace:	bf00      	nop
 8000ad0:	3720      	adds	r7, #32
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	48000400 	.word	0x48000400

08000ae0 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[1];
	uint8_t CylID;

	if (hfdcan == &hfdcan1) {
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d119      	bne.n	8000b26 <HAL_FDCAN_RxFifo0Callback+0x46>
		printf("Get message\r\n");
 8000af2:	4810      	ldr	r0, [pc, #64]	; (8000b34 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8000af4:	f003 f9e4 	bl	8003ec0 <puts>
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	f107 020c 	add.w	r2, r7, #12
 8000b00:	2140      	movs	r1, #64	; 0x40
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f000 fdb8 	bl	8001678 <HAL_FDCAN_GetRxMessage>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_FDCAN_RxFifo0Callback+0x32>
			Error_Handler();
 8000b0e:	f000 f815 	bl	8000b3c <Error_Handler>
		}
		CylID = RxHeader.Identifier - CANID_FSTCYL;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	3b18      	subs	r3, #24
 8000b18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		CylFlag[CylID] = RxData[0];
 8000b1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b20:	7a39      	ldrb	r1, [r7, #8]
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8000b24:	54d1      	strb	r1, [r2, r3]
		//HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], RxData[0]);

		//printf("Motor%x:%d\r\n", RxHeader.Identifier- 0x201, actMotorVel[MOTOR1]); //index is motorID-201 (0x201 - 0x201 =0)
		//Motor%x:RxHeader.Identifier- 0x201,
	}
}
 8000b26:	bf00      	nop
 8000b28:	3738      	adds	r7, #56	; 0x38
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000bc 	.word	0x200000bc
 8000b34:	080049d8 	.word	0x080049d8
 8000b38:	200001b0 	.word	0x200001b0

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x44>)
 8000b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_MspInit+0x44>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_MspInit+0x44>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x44>)
 8000b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x44>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6593      	str	r3, [r2, #88]	; 0x58
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x44>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b09a      	sub	sp, #104	; 0x68
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	2244      	movs	r2, #68	; 0x44
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 f90f 	bl	8003dd4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a28      	ldr	r2, [pc, #160]	; (8000c5c <HAL_FDCAN_MspInit+0xcc>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d149      	bne.n	8000c54 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bca:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f002 f87b 	bl	8002ccc <HAL_RCCEx_PeriphCLKConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000bdc:	f7ff ffae 	bl	8000b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <HAL_FDCAN_MspInit+0xd0>)
 8000be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be4:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <HAL_FDCAN_MspInit+0xd0>)
 8000be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bea:	6593      	str	r3, [r2, #88]	; 0x58
 8000bec:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <HAL_FDCAN_MspInit+0xd0>)
 8000bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <HAL_FDCAN_MspInit+0xd0>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfc:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <HAL_FDCAN_MspInit+0xd0>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <HAL_FDCAN_MspInit+0xd0>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c10:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c14:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c22:	2309      	movs	r3, #9
 8000c24:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c30:	f001 f8da 	bl	8001de8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2015      	movs	r0, #21
 8000c3a:	f000 fada 	bl	80011f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c3e:	2015      	movs	r0, #21
 8000c40:	f000 faf1 	bl	8001226 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2016      	movs	r0, #22
 8000c4a:	f000 fad2 	bl	80011f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000c4e:	2016      	movs	r0, #22
 8000c50:	f000 fae9 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3768      	adds	r7, #104	; 0x68
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40006400 	.word	0x40006400
 8000c60:	40021000 	.word	0x40021000

08000c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b09a      	sub	sp, #104	; 0x68
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	2244      	movs	r2, #68	; 0x44
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f003 f8a5 	bl	8003dd4 <memset>
  if(huart->Instance==USART2)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <HAL_UART_MspInit+0xa8>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d136      	bne.n	8000d02 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 f813 	bl	8002ccc <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cac:	f7ff ff46 	bl	8000b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <HAL_UART_MspInit+0xac>)
 8000cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb4:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <HAL_UART_MspInit+0xac>)
 8000cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cba:	6593      	str	r3, [r2, #88]	; 0x58
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <HAL_UART_MspInit+0xac>)
 8000cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_UART_MspInit+0xac>)
 8000cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ccc:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <HAL_UART_MspInit+0xac>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_UART_MspInit+0xac>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfe:	f001 f873 	bl	8001de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	3768      	adds	r7, #104	; 0x68
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40004400 	.word	0x40004400
 8000d10:	40021000 	.word	0x40021000

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d60:	f000 f92c 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <FDCAN1_IT0_IRQHandler+0x10>)
 8000d6e:	f000 fe43 	bl	80019f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200000bc 	.word	0x200000bc

08000d7c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <FDCAN1_IT1_IRQHandler+0x10>)
 8000d82:	f000 fe39 	bl	80019f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000bc 	.word	0x200000bc

08000d90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	e00a      	b.n	8000db8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da2:	f3af 8000 	nop.w
 8000da6:	4601      	mov	r1, r0
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	60ba      	str	r2, [r7, #8]
 8000dae:	b2ca      	uxtb	r2, r1
 8000db0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	3301      	adds	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	dbf0      	blt.n	8000da2 <_read+0x12>
	}

return len;
 8000dc0:	687b      	ldr	r3, [r7, #4]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <_close>:
	}
	return len;
}

int _close(int file)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
	return -1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000df2:	605a      	str	r2, [r3, #4]
	return 0;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <_isatty>:

int _isatty(int file)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
	return 1;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
	return 0;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <_sbrk+0x5c>)
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <_sbrk+0x60>)
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <_sbrk+0x64>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <_sbrk+0x68>)
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d207      	bcs.n	8000e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e64:	f002 ff8c 	bl	8003d80 <__errno>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	e009      	b.n	8000e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <_sbrk+0x64>)
 8000e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20008000 	.word	0x20008000
 8000e94:	00000400 	.word	0x00000400
 8000e98:	200001b8 	.word	0x200001b8
 8000e9c:	200001d0 	.word	0x200001d0

08000ea0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <SystemInit+0x20>)
 8000ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <SystemInit+0x20>)
 8000eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ec6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eca:	490e      	ldr	r1, [pc, #56]	; (8000f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <LoopForever+0xe>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee0:	4c0b      	ldr	r4, [pc, #44]	; (8000f10 <LoopForever+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eee:	f7ff ffd7 	bl	8000ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f002 ff4b 	bl	8003d8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ef6:	f7ff fc21 	bl	800073c <main>

08000efa <LoopForever>:

LoopForever:
    b LoopForever
 8000efa:	e7fe      	b.n	8000efa <LoopForever>
  ldr   r0, =_estack
 8000efc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000f08:	08004aac 	.word	0x08004aac
  ldr r2, =_sbss
 8000f0c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000f10:	200001d0 	.word	0x200001d0

08000f14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC1_2_IRQHandler>

08000f16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f95b 	bl	80011dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f26:	2001      	movs	r0, #1
 8000f28:	f000 f80e 	bl	8000f48 <HAL_InitTick>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	e001      	b.n	8000f3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f38:	f7ff fe06 	bl	8000b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f3c:	79fb      	ldrb	r3, [r7, #7]

}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_InitTick+0x68>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d022      	beq.n	8000fa2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_InitTick+0x6c>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_InitTick+0x68>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f68:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 f966 	bl	8001242 <HAL_SYSTICK_Config>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10f      	bne.n	8000f9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b0f      	cmp	r3, #15
 8000f80:	d809      	bhi.n	8000f96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f82:	2200      	movs	r2, #0
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8a:	f000 f932 	bl	80011f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_InitTick+0x70>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	e007      	b.n	8000fa6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e004      	b.n	8000fa6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e001      	b.n	8000fa6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000038 	.word	0x20000038
 8000fb4:	20000030 	.word	0x20000030
 8000fb8:	20000034 	.word	0x20000034

08000fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_IncTick+0x1c>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <HAL_IncTick+0x1c>)
 8000fcc:	6013      	str	r3, [r2, #0]
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	200001bc 	.word	0x200001bc
 8000fdc:	20000038 	.word	0x20000038

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	200001bc 	.word	0x200001bc

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff ffee 	bl	8000fe0 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001010:	d004      	beq.n	800101c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_Delay+0x40>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	4413      	add	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800101c:	bf00      	nop
 800101e:	f7ff ffdf 	bl	8000fe0 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	429a      	cmp	r2, r3
 800102c:	d8f7      	bhi.n	800101e <HAL_Delay+0x26>
  {
  }
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000038 	.word	0x20000038

0800103c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001058:	4013      	ands	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	60d3      	str	r3, [r2, #12]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <__NVIC_GetPriorityGrouping+0x18>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	f003 0307 	and.w	r3, r3, #7
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	db0b      	blt.n	80010ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f003 021f 	and.w	r2, r3, #31
 80010b8:	4907      	ldr	r1, [pc, #28]	; (80010d8 <__NVIC_EnableIRQ+0x38>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	2001      	movs	r0, #1
 80010c2:	fa00 f202 	lsl.w	r2, r0, r2
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db0a      	blt.n	8001106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	490c      	ldr	r1, [pc, #48]	; (8001128 <__NVIC_SetPriority+0x4c>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	440b      	add	r3, r1
 8001100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001104:	e00a      	b.n	800111c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4908      	ldr	r1, [pc, #32]	; (800112c <__NVIC_SetPriority+0x50>)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	3b04      	subs	r3, #4
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	440b      	add	r3, r1
 800111a:	761a      	strb	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2b04      	cmp	r3, #4
 800114c:	bf28      	it	cs
 800114e:	2304      	movcs	r3, #4
 8001150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3304      	adds	r3, #4
 8001156:	2b06      	cmp	r3, #6
 8001158:	d902      	bls.n	8001160 <NVIC_EncodePriority+0x30>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3b03      	subs	r3, #3
 800115e:	e000      	b.n	8001162 <NVIC_EncodePriority+0x32>
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	f04f 32ff 	mov.w	r2, #4294967295
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001178:	f04f 31ff 	mov.w	r1, #4294967295
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43d9      	mvns	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	4313      	orrs	r3, r2
         );
}
 800118a:	4618      	mov	r0, r3
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a8:	d301      	bcc.n	80011ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00f      	b.n	80011ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <SysTick_Config+0x40>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b6:	210f      	movs	r1, #15
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f7ff ff8e 	bl	80010dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <SysTick_Config+0x40>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <SysTick_Config+0x40>)
 80011c8:	2207      	movs	r2, #7
 80011ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	e000e010 	.word	0xe000e010

080011dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff29 	bl	800103c <__NVIC_SetPriorityGrouping>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001200:	f7ff ff40 	bl	8001084 <__NVIC_GetPriorityGrouping>
 8001204:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ff90 	bl	8001130 <NVIC_EncodePriority>
 8001210:	4602      	mov	r2, r0
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff5f 	bl	80010dc <__NVIC_SetPriority>
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff33 	bl	80010a0 <__NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffa4 	bl	8001198 <SysTick_Config>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e147      	b.n	80014fe <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d106      	bne.n	8001288 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff fc84 	bl	8000b90 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	699a      	ldr	r2, [r3, #24]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0210 	bic.w	r2, r2, #16
 8001296:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001298:	f7ff fea2 	bl	8000fe0 <HAL_GetTick>
 800129c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800129e:	e012      	b.n	80012c6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80012a0:	f7ff fe9e 	bl	8000fe0 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b0a      	cmp	r3, #10
 80012ac:	d90b      	bls.n	80012c6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b2:	f043 0201 	orr.w	r2, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2203      	movs	r2, #3
 80012be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e11b      	b.n	80014fe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b08      	cmp	r3, #8
 80012d2:	d0e5      	beq.n	80012a0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	699a      	ldr	r2, [r3, #24]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e4:	f7ff fe7c 	bl	8000fe0 <HAL_GetTick>
 80012e8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80012ea:	e012      	b.n	8001312 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80012ec:	f7ff fe78 	bl	8000fe0 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b0a      	cmp	r3, #10
 80012f8:	d90b      	bls.n	8001312 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2203      	movs	r2, #3
 800130a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e0f5      	b.n	80014fe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0e5      	beq.n	80012ec <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	699a      	ldr	r2, [r3, #24]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0202 	orr.w	r2, r2, #2
 800132e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a74      	ldr	r2, [pc, #464]	; (8001508 <HAL_FDCAN_Init+0x2ac>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d103      	bne.n	8001342 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800133a:	4a74      	ldr	r2, [pc, #464]	; (800150c <HAL_FDCAN_Init+0x2b0>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7c1b      	ldrb	r3, [r3, #16]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d108      	bne.n	800135c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	699a      	ldr	r2, [r3, #24]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001358:	619a      	str	r2, [r3, #24]
 800135a:	e007      	b.n	800136c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	699a      	ldr	r2, [r3, #24]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800136a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7c5b      	ldrb	r3, [r3, #17]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d108      	bne.n	8001386 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	699a      	ldr	r2, [r3, #24]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001382:	619a      	str	r2, [r3, #24]
 8001384:	e007      	b.n	8001396 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699a      	ldr	r2, [r3, #24]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001394:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7c9b      	ldrb	r3, [r3, #18]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d108      	bne.n	80013b0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	699a      	ldr	r2, [r3, #24]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013ac:	619a      	str	r2, [r3, #24]
 80013ae:	e007      	b.n	80013c0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	699a      	ldr	r2, [r3, #24]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013be:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	699a      	ldr	r2, [r3, #24]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80013e4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	691a      	ldr	r2, [r3, #16]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0210 	bic.w	r2, r2, #16
 80013f4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d108      	bne.n	8001410 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	699a      	ldr	r2, [r3, #24]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 0204 	orr.w	r2, r2, #4
 800140c:	619a      	str	r2, [r3, #24]
 800140e:	e02c      	b.n	800146a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d028      	beq.n	800146a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	2b02      	cmp	r3, #2
 800141e:	d01c      	beq.n	800145a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	699a      	ldr	r2, [r3, #24]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800142e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	691a      	ldr	r2, [r3, #16]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 0210 	orr.w	r2, r2, #16
 800143e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b03      	cmp	r3, #3
 8001446:	d110      	bne.n	800146a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	699a      	ldr	r2, [r3, #24]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0220 	orr.w	r2, r2, #32
 8001456:	619a      	str	r2, [r3, #24]
 8001458:	e007      	b.n	800146a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	699a      	ldr	r2, [r3, #24]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f042 0220 	orr.w	r2, r2, #32
 8001468:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	3b01      	subs	r3, #1
 8001470:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	3b01      	subs	r3, #1
 8001478:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800147a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001482:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	3b01      	subs	r3, #1
 800148c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001492:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001494:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800149e:	d115      	bne.n	80014cc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	3b01      	subs	r3, #1
 80014ac:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80014ae:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	3b01      	subs	r3, #1
 80014b6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80014b8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	3b01      	subs	r3, #1
 80014c2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80014c8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80014ca:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fc2a 	bl	8001d3c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40006400 	.word	0x40006400
 800150c:	40006500 	.word	0x40006500

08001510 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001520:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d002      	beq.n	800152e <HAL_FDCAN_ConfigFilter+0x1e>
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d13d      	bne.n	80015aa <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d119      	bne.n	800156a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001542:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800154a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e01d      	b.n	80015a6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	075a      	lsls	r2, r3, #29
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	079a      	lsls	r2, r3, #30
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	4313      	orrs	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	4413      	add	r3, r2
 8001592:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	3304      	adds	r3, #4
 800159e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e006      	b.n	80015b8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ae:	f043 0202 	orr.w	r2, r3, #2
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
  }
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	371c      	adds	r7, #28
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
 80015d0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d116      	bne.n	800160c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015e6:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	011a      	lsls	r2, r3, #4
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	431a      	orrs	r2, r3
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	431a      	orrs	r2, r3
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	e006      	b.n	800161a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001610:	f043 0204 	orr.w	r2, r3, #4
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
  }
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b01      	cmp	r3, #1
 8001638:	d110      	bne.n	800165c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2202      	movs	r2, #2
 800163e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699a      	ldr	r2, [r3, #24]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0201 	bic.w	r2, r2, #1
 8001650:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	e006      	b.n	800166a <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001660:	f043 0204 	orr.w	r2, r3, #4
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
  }
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001678:	b480      	push	{r7}
 800167a:	b08b      	sub	sp, #44	; 0x2c
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800168c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800168e:	7efb      	ldrb	r3, [r7, #27]
 8001690:	2b02      	cmp	r3, #2
 8001692:	f040 80bc 	bne.w	800180e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2b40      	cmp	r3, #64	; 0x40
 800169a:	d121      	bne.n	80016e0 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a4:	f003 030f 	and.w	r3, r3, #15
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d107      	bne.n	80016bc <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0af      	b.n	800181c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
 80016de:	e020      	b.n	8001722 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d107      	bne.n	8001700 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e08d      	b.n	800181c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	4613      	mov	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d107      	bne.n	8001746 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	0c9b      	lsrs	r3, r3, #18
 800173c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e005      	b.n	8001752 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	3304      	adds	r3, #4
 800176e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	b29a      	uxth	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	0e1b      	lsrs	r3, r3, #24
 80017a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	0fda      	lsrs	r2, r3, #31
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	3304      	adds	r3, #4
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	e00a      	b.n	80017dc <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	441a      	add	r2, r3
 80017cc:	6839      	ldr	r1, [r7, #0]
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	440b      	add	r3, r1
 80017d2:	7812      	ldrb	r2, [r2, #0]
 80017d4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	3301      	adds	r3, #1
 80017da:	623b      	str	r3, [r7, #32]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0c1b      	lsrs	r3, r3, #16
 80017e2:	4a11      	ldr	r2, [pc, #68]	; (8001828 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80017e4:	5cd3      	ldrb	r3, [r2, r3]
 80017e6:	461a      	mov	r2, r3
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d3eb      	bcc.n	80017c6 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b40      	cmp	r3, #64	; 0x40
 80017f2:	d105      	bne.n	8001800 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80017fe:	e004      	b.n	800180a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e006      	b.n	800181c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001812:	f043 0208 	orr.w	r2, r3, #8
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
  }
}
 800181c:	4618      	mov	r0, r3
 800181e:	372c      	adds	r7, #44	; 0x2c
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	08004a00 	.word	0x08004a00

0800182c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800183e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d003      	beq.n	800184e <HAL_FDCAN_ActivateNotification+0x22>
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	2b02      	cmp	r3, #2
 800184a:	f040 80c8 	bne.w	80019de <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	2b00      	cmp	r3, #0
 800185e:	d004      	beq.n	800186a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d03b      	beq.n	80018e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001870:	2b00      	cmp	r3, #0
 8001872:	d004      	beq.n	800187e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d031      	beq.n	80018e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b00      	cmp	r3, #0
 8001890:	d027      	beq.n	80018e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d01d      	beq.n	80018e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d013      	beq.n	80018e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00c      	beq.n	80018f2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d107      	bne.n	80018f2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 0201 	orr.w	r2, r2, #1
 80018f0:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d13b      	bne.n	800197e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d131      	bne.n	800197e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	2b00      	cmp	r3, #0
 800192c:	d127      	bne.n	800197e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001934:	2b00      	cmp	r3, #0
 8001936:	d004      	beq.n	8001942 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d11d      	bne.n	800197e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	2b00      	cmp	r3, #0
 8001954:	d113      	bne.n	800197e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	f003 0320 	and.w	r3, r3, #32
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00c      	beq.n	800198e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197a:	2b00      	cmp	r3, #0
 800197c:	d007      	beq.n	800198e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0202 	orr.w	r2, r2, #2
 800198c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001994:	2b00      	cmp	r3, #0
 8001996:	d009      	beq.n	80019ac <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e006      	b.n	80019ec <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	f043 0202 	orr.w	r2, r3, #2
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
  }
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a06:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a14:	4013      	ands	r3, r2
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2a:	6a3a      	ldr	r2, [r7, #32]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a3a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a4e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001a52:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a66:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a6a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4013      	ands	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00d      	beq.n	8001aa2 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2240      	movs	r2, #64	; 0x40
 8001a9a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f92e 	bl	8001cfe <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01b      	beq.n	8001ae8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d014      	beq.n	8001ae8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ac6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ade:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001ae0:	6939      	ldr	r1, [r7, #16]
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f8ec 	bl	8001cc0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d007      	beq.n	8001afe <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001af6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f8b6 	bl	8001c6a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6a3a      	ldr	r2, [r7, #32]
 8001b0a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001b0c:	6a39      	ldr	r1, [r7, #32]
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7fe ffe6 	bl	8000ae0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001b22:	69f9      	ldr	r1, [r7, #28]
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f8ab 	bl	8001c80 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00e      	beq.n	8001b56 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b4e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f8a0 	bl	8001c96 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d01a      	beq.n	8001b9a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d013      	beq.n	8001b9a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b7a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4013      	ands	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001b92:	68f9      	ldr	r1, [r7, #12]
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f888 	bl	8001caa <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00e      	beq.n	8001bc6 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d007      	beq.n	8001bc6 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bbe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f888 	bl	8001cd6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00e      	beq.n	8001bf2 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d007      	beq.n	8001bf2 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f87c 	bl	8001cea <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d011      	beq.n	8001c24 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00a      	beq.n	8001c24 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001c32:	6979      	ldr	r1, [r7, #20]
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f876 	bl	8001d26 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d009      	beq.n	8001c54 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f858 	bl	8001d12 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001c62:	bf00      	nop
 8001c64:	3728      	adds	r7, #40	; 0x28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001d46:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d56:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5e:	041a      	lsls	r2, r3, #16
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d7c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d84:	061a      	lsls	r2, r3, #24
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e005      	b.n	8001dca <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d3f3      	bcc.n	8001dbe <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	4000a400 	.word	0x4000a400

08001de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001df6:	e15a      	b.n	80020ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	4013      	ands	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 814c 	beq.w	80020a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d005      	beq.n	8001e28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d130      	bne.n	8001e8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e5e:	2201      	movs	r2, #1
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	f003 0201 	and.w	r2, r3, #1
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d017      	beq.n	8001ec6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d123      	bne.n	8001f1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	08da      	lsrs	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3208      	adds	r2, #8
 8001eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	08da      	lsrs	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3208      	adds	r2, #8
 8001f14:	6939      	ldr	r1, [r7, #16]
 8001f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	2203      	movs	r2, #3
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0203 	and.w	r2, r3, #3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80a6 	beq.w	80020a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5c:	4b5b      	ldr	r3, [pc, #364]	; (80020cc <HAL_GPIO_Init+0x2e4>)
 8001f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f60:	4a5a      	ldr	r2, [pc, #360]	; (80020cc <HAL_GPIO_Init+0x2e4>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6613      	str	r3, [r2, #96]	; 0x60
 8001f68:	4b58      	ldr	r3, [pc, #352]	; (80020cc <HAL_GPIO_Init+0x2e4>)
 8001f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f74:	4a56      	ldr	r2, [pc, #344]	; (80020d0 <HAL_GPIO_Init+0x2e8>)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f9e:	d01f      	beq.n	8001fe0 <HAL_GPIO_Init+0x1f8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a4c      	ldr	r2, [pc, #304]	; (80020d4 <HAL_GPIO_Init+0x2ec>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d019      	beq.n	8001fdc <HAL_GPIO_Init+0x1f4>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a4b      	ldr	r2, [pc, #300]	; (80020d8 <HAL_GPIO_Init+0x2f0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d013      	beq.n	8001fd8 <HAL_GPIO_Init+0x1f0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a4a      	ldr	r2, [pc, #296]	; (80020dc <HAL_GPIO_Init+0x2f4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_GPIO_Init+0x1ec>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a49      	ldr	r2, [pc, #292]	; (80020e0 <HAL_GPIO_Init+0x2f8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d007      	beq.n	8001fd0 <HAL_GPIO_Init+0x1e8>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a48      	ldr	r2, [pc, #288]	; (80020e4 <HAL_GPIO_Init+0x2fc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d101      	bne.n	8001fcc <HAL_GPIO_Init+0x1e4>
 8001fc8:	2305      	movs	r3, #5
 8001fca:	e00a      	b.n	8001fe2 <HAL_GPIO_Init+0x1fa>
 8001fcc:	2306      	movs	r3, #6
 8001fce:	e008      	b.n	8001fe2 <HAL_GPIO_Init+0x1fa>
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	e006      	b.n	8001fe2 <HAL_GPIO_Init+0x1fa>
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e004      	b.n	8001fe2 <HAL_GPIO_Init+0x1fa>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e002      	b.n	8001fe2 <HAL_GPIO_Init+0x1fa>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_GPIO_Init+0x1fa>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	f002 0203 	and.w	r2, r2, #3
 8001fe8:	0092      	lsls	r2, r2, #2
 8001fea:	4093      	lsls	r3, r2
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ff2:	4937      	ldr	r1, [pc, #220]	; (80020d0 <HAL_GPIO_Init+0x2e8>)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002000:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <HAL_GPIO_Init+0x300>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	43db      	mvns	r3, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002024:	4a30      	ldr	r2, [pc, #192]	; (80020e8 <HAL_GPIO_Init+0x300>)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800202a:	4b2f      	ldr	r3, [pc, #188]	; (80020e8 <HAL_GPIO_Init+0x300>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	43db      	mvns	r3, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800204e:	4a26      	ldr	r2, [pc, #152]	; (80020e8 <HAL_GPIO_Init+0x300>)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002054:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_GPIO_Init+0x300>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002078:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <HAL_GPIO_Init+0x300>)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <HAL_GPIO_Init+0x300>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020a2:	4a11      	ldr	r2, [pc, #68]	; (80020e8 <HAL_GPIO_Init+0x300>)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	3301      	adds	r3, #1
 80020ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	fa22 f303 	lsr.w	r3, r2, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f47f ae9d 	bne.w	8001df8 <HAL_GPIO_Init+0x10>
  }
}
 80020be:	bf00      	nop
 80020c0:	bf00      	nop
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40010000 	.word	0x40010000
 80020d4:	48000400 	.word	0x48000400
 80020d8:	48000800 	.word	0x48000800
 80020dc:	48000c00 	.word	0x48000c00
 80020e0:	48001000 	.word	0x48001000
 80020e4:	48001400 	.word	0x48001400
 80020e8:	40010400 	.word	0x40010400

080020ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	807b      	strh	r3, [r7, #2]
 80020f8:	4613      	mov	r3, r2
 80020fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020fc:	787b      	ldrb	r3, [r7, #1]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002108:	e002      	b.n	8002110 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800210a:	887a      	ldrh	r2, [r7, #2]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d141      	bne.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800212a:	4b4b      	ldr	r3, [pc, #300]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002136:	d131      	bne.n	800219c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002138:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800213e:	4a46      	ldr	r2, [pc, #280]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002144:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002148:	4b43      	ldr	r3, [pc, #268]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002150:	4a41      	ldr	r2, [pc, #260]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002156:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002158:	4b40      	ldr	r3, [pc, #256]	; (800225c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2232      	movs	r2, #50	; 0x32
 800215e:	fb02 f303 	mul.w	r3, r2, r3
 8002162:	4a3f      	ldr	r2, [pc, #252]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	0c9b      	lsrs	r3, r3, #18
 800216a:	3301      	adds	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800216e:	e002      	b.n	8002176 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	3b01      	subs	r3, #1
 8002174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002176:	4b38      	ldr	r3, [pc, #224]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002182:	d102      	bne.n	800218a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f2      	bne.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800218a:	4b33      	ldr	r3, [pc, #204]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002196:	d158      	bne.n	800224a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e057      	b.n	800224c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800219c:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021a2:	4a2d      	ldr	r2, [pc, #180]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021ac:	e04d      	b.n	800224a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b4:	d141      	bne.n	800223a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021b6:	4b28      	ldr	r3, [pc, #160]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c2:	d131      	bne.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021c4:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ca:	4a23      	ldr	r2, [pc, #140]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d4:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021dc:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2232      	movs	r2, #50	; 0x32
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	0c9b      	lsrs	r3, r3, #18
 80021f6:	3301      	adds	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021fa:	e002      	b.n	8002202 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3b01      	subs	r3, #1
 8002200:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220e:	d102      	bne.n	8002216 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f2      	bne.n	80021fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002222:	d112      	bne.n	800224a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e011      	b.n	800224c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002234:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002238:	e007      	b.n	800224a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800223a:	4b07      	ldr	r3, [pc, #28]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002242:	4a05      	ldr	r2, [pc, #20]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002244:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002248:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40007000 	.word	0x40007000
 800225c:	20000030 	.word	0x20000030
 8002260:	431bde83 	.word	0x431bde83

08002264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e306      	b.n	8002884 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d075      	beq.n	800236e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002282:	4b97      	ldr	r3, [pc, #604]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800228c:	4b94      	ldr	r3, [pc, #592]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	2b0c      	cmp	r3, #12
 800229a:	d102      	bne.n	80022a2 <HAL_RCC_OscConfig+0x3e>
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d002      	beq.n	80022a8 <HAL_RCC_OscConfig+0x44>
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d10b      	bne.n	80022c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	4b8d      	ldr	r3, [pc, #564]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d05b      	beq.n	800236c <HAL_RCC_OscConfig+0x108>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d157      	bne.n	800236c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e2e1      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c8:	d106      	bne.n	80022d8 <HAL_RCC_OscConfig+0x74>
 80022ca:	4b85      	ldr	r3, [pc, #532]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a84      	ldr	r2, [pc, #528]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e01d      	b.n	8002314 <HAL_RCC_OscConfig+0xb0>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x98>
 80022e2:	4b7f      	ldr	r3, [pc, #508]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a7e      	ldr	r2, [pc, #504]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b7c      	ldr	r3, [pc, #496]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a7b      	ldr	r2, [pc, #492]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0xb0>
 80022fc:	4b78      	ldr	r3, [pc, #480]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a77      	ldr	r2, [pc, #476]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 8002302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b75      	ldr	r3, [pc, #468]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a74      	ldr	r2, [pc, #464]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 800230e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fe60 	bl	8000fe0 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002324:	f7fe fe5c 	bl	8000fe0 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e2a6      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002336:	4b6a      	ldr	r3, [pc, #424]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0xc0>
 8002342:	e014      	b.n	800236e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe fe4c 	bl	8000fe0 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234c:	f7fe fe48 	bl	8000fe0 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	; 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e292      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800235e:	4b60      	ldr	r3, [pc, #384]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0xe8>
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d075      	beq.n	8002466 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237a:	4b59      	ldr	r3, [pc, #356]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002384:	4b56      	ldr	r3, [pc, #344]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	2b0c      	cmp	r3, #12
 8002392:	d102      	bne.n	800239a <HAL_RCC_OscConfig+0x136>
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d002      	beq.n	80023a0 <HAL_RCC_OscConfig+0x13c>
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2b04      	cmp	r3, #4
 800239e:	d11f      	bne.n	80023e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a0:	4b4f      	ldr	r3, [pc, #316]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_OscConfig+0x154>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e265      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	061b      	lsls	r3, r3, #24
 80023c6:	4946      	ldr	r1, [pc, #280]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023cc:	4b45      	ldr	r3, [pc, #276]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe fdb9 	bl	8000f48 <HAL_InitTick>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d043      	beq.n	8002464 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e251      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d023      	beq.n	8002430 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e8:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a3c      	ldr	r2, [pc, #240]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80023ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7fe fdf4 	bl	8000fe0 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fc:	f7fe fdf0 	bl	8000fe0 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e23a      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240e:	4b34      	ldr	r3, [pc, #208]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241a:	4b31      	ldr	r3, [pc, #196]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	061b      	lsls	r3, r3, #24
 8002428:	492d      	ldr	r1, [pc, #180]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
 800242e:	e01a      	b.n	8002466 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002430:	4b2b      	ldr	r3, [pc, #172]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a2a      	ldr	r2, [pc, #168]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 8002436:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800243a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fdd0 	bl	8000fe0 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002444:	f7fe fdcc 	bl	8000fe0 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e216      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002456:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x1e0>
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002464:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d041      	beq.n	80024f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d01c      	beq.n	80024b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247a:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 800247c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002480:	4a17      	ldr	r2, [pc, #92]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248a:	f7fe fda9 	bl	8000fe0 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002492:	f7fe fda5 	bl	8000fe0 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e1ef      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024a4:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80024a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0ef      	beq.n	8002492 <HAL_RCC_OscConfig+0x22e>
 80024b2:	e020      	b.n	80024f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80024b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ba:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c4:	f7fe fd8c 	bl	8000fe0 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024ca:	e00d      	b.n	80024e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024cc:	f7fe fd88 	bl	8000fe0 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d906      	bls.n	80024e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e1d2      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
 80024e4:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e8:	4b8c      	ldr	r3, [pc, #560]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 80024ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1ea      	bne.n	80024cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80a6 	beq.w	8002650 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002504:	2300      	movs	r3, #0
 8002506:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002508:	4b84      	ldr	r3, [pc, #528]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_OscConfig+0x2b4>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x2b6>
 8002518:	2300      	movs	r3, #0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00d      	beq.n	800253a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	4b7f      	ldr	r3, [pc, #508]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	4a7e      	ldr	r2, [pc, #504]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002528:	6593      	str	r3, [r2, #88]	; 0x58
 800252a:	4b7c      	ldr	r3, [pc, #496]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 800252c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002536:	2301      	movs	r3, #1
 8002538:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253a:	4b79      	ldr	r3, [pc, #484]	; (8002720 <HAL_RCC_OscConfig+0x4bc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d118      	bne.n	8002578 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002546:	4b76      	ldr	r3, [pc, #472]	; (8002720 <HAL_RCC_OscConfig+0x4bc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a75      	ldr	r2, [pc, #468]	; (8002720 <HAL_RCC_OscConfig+0x4bc>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002552:	f7fe fd45 	bl	8000fe0 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255a:	f7fe fd41 	bl	8000fe0 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e18b      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256c:	4b6c      	ldr	r3, [pc, #432]	; (8002720 <HAL_RCC_OscConfig+0x4bc>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d108      	bne.n	8002592 <HAL_RCC_OscConfig+0x32e>
 8002580:	4b66      	ldr	r3, [pc, #408]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	4a65      	ldr	r2, [pc, #404]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002590:	e024      	b.n	80025dc <HAL_RCC_OscConfig+0x378>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b05      	cmp	r3, #5
 8002598:	d110      	bne.n	80025bc <HAL_RCC_OscConfig+0x358>
 800259a:	4b60      	ldr	r3, [pc, #384]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a0:	4a5e      	ldr	r2, [pc, #376]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 80025a2:	f043 0304 	orr.w	r3, r3, #4
 80025a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025aa:	4b5c      	ldr	r3, [pc, #368]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 80025ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b0:	4a5a      	ldr	r2, [pc, #360]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025ba:	e00f      	b.n	80025dc <HAL_RCC_OscConfig+0x378>
 80025bc:	4b57      	ldr	r3, [pc, #348]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	4a56      	ldr	r2, [pc, #344]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	4a52      	ldr	r2, [pc, #328]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d016      	beq.n	8002612 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7fe fcfc 	bl	8000fe0 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ec:	f7fe fcf8 	bl	8000fe0 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e140      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002602:	4b46      	ldr	r3, [pc, #280]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ed      	beq.n	80025ec <HAL_RCC_OscConfig+0x388>
 8002610:	e015      	b.n	800263e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002612:	f7fe fce5 	bl	8000fe0 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7fe fce1 	bl	8000fe0 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	; 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e129      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002630:	4b3a      	ldr	r3, [pc, #232]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1ed      	bne.n	800261a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800263e:	7ffb      	ldrb	r3, [r7, #31]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d105      	bne.n	8002650 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002644:	4b35      	ldr	r3, [pc, #212]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	4a34      	ldr	r2, [pc, #208]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 800264a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d03c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01c      	beq.n	800269e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002664:	4b2d      	ldr	r3, [pc, #180]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 8002666:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800266a:	4a2c      	ldr	r2, [pc, #176]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fe fcb4 	bl	8000fe0 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800267c:	f7fe fcb0 	bl	8000fe0 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e0fa      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800268e:	4b23      	ldr	r3, [pc, #140]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 8002690:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ef      	beq.n	800267c <HAL_RCC_OscConfig+0x418>
 800269c:	e01b      	b.n	80026d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800269e:	4b1f      	ldr	r3, [pc, #124]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 80026a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026a4:	4a1d      	ldr	r2, [pc, #116]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7fe fc97 	bl	8000fe0 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b6:	f7fe fc93 	bl	8000fe0 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e0dd      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 80026ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1ef      	bne.n	80026b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80d1 	beq.w	8002882 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b0c      	cmp	r3, #12
 80026ea:	f000 808b 	beq.w	8002804 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d15e      	bne.n	80027b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_RCC_OscConfig+0x4b8>)
 80026fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe fc6d 	bl	8000fe0 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002708:	e00c      	b.n	8002724 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270a:	f7fe fc69 	bl	8000fe0 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d905      	bls.n	8002724 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e0b3      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
 800271c:	40021000 	.word	0x40021000
 8002720:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002724:	4b59      	ldr	r3, [pc, #356]	; (800288c <HAL_RCC_OscConfig+0x628>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ec      	bne.n	800270a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002730:	4b56      	ldr	r3, [pc, #344]	; (800288c <HAL_RCC_OscConfig+0x628>)
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	4b56      	ldr	r3, [pc, #344]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002736:	4013      	ands	r3, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6a11      	ldr	r1, [r2, #32]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002740:	3a01      	subs	r2, #1
 8002742:	0112      	lsls	r2, r2, #4
 8002744:	4311      	orrs	r1, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800274a:	0212      	lsls	r2, r2, #8
 800274c:	4311      	orrs	r1, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002752:	0852      	lsrs	r2, r2, #1
 8002754:	3a01      	subs	r2, #1
 8002756:	0552      	lsls	r2, r2, #21
 8002758:	4311      	orrs	r1, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800275e:	0852      	lsrs	r2, r2, #1
 8002760:	3a01      	subs	r2, #1
 8002762:	0652      	lsls	r2, r2, #25
 8002764:	4311      	orrs	r1, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800276a:	06d2      	lsls	r2, r2, #27
 800276c:	430a      	orrs	r2, r1
 800276e:	4947      	ldr	r1, [pc, #284]	; (800288c <HAL_RCC_OscConfig+0x628>)
 8002770:	4313      	orrs	r3, r2
 8002772:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002774:	4b45      	ldr	r3, [pc, #276]	; (800288c <HAL_RCC_OscConfig+0x628>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a44      	ldr	r2, [pc, #272]	; (800288c <HAL_RCC_OscConfig+0x628>)
 800277a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800277e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002780:	4b42      	ldr	r3, [pc, #264]	; (800288c <HAL_RCC_OscConfig+0x628>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a41      	ldr	r2, [pc, #260]	; (800288c <HAL_RCC_OscConfig+0x628>)
 8002786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7fe fc28 	bl	8000fe0 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002794:	f7fe fc24 	bl	8000fe0 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e06e      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a6:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_RCC_OscConfig+0x628>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0x530>
 80027b2:	e066      	b.n	8002882 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b4:	4b35      	ldr	r3, [pc, #212]	; (800288c <HAL_RCC_OscConfig+0x628>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a34      	ldr	r2, [pc, #208]	; (800288c <HAL_RCC_OscConfig+0x628>)
 80027ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027be:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80027c0:	4b32      	ldr	r3, [pc, #200]	; (800288c <HAL_RCC_OscConfig+0x628>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a31      	ldr	r2, [pc, #196]	; (800288c <HAL_RCC_OscConfig+0x628>)
 80027c6:	f023 0303 	bic.w	r3, r3, #3
 80027ca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80027cc:	4b2f      	ldr	r3, [pc, #188]	; (800288c <HAL_RCC_OscConfig+0x628>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a2e      	ldr	r2, [pc, #184]	; (800288c <HAL_RCC_OscConfig+0x628>)
 80027d2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe fc00 	bl	8000fe0 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e4:	f7fe fbfc 	bl	8000fe0 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e046      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f6:	4b25      	ldr	r3, [pc, #148]	; (800288c <HAL_RCC_OscConfig+0x628>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x580>
 8002802:	e03e      	b.n	8002882 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e039      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002810:	4b1e      	ldr	r3, [pc, #120]	; (800288c <HAL_RCC_OscConfig+0x628>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f003 0203 	and.w	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	429a      	cmp	r2, r3
 8002822:	d12c      	bne.n	800287e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	3b01      	subs	r3, #1
 8002830:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d123      	bne.n	800287e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d11b      	bne.n	800287e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d113      	bne.n	800287e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	3b01      	subs	r3, #1
 8002864:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d109      	bne.n	800287e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	3b01      	subs	r3, #1
 8002878:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000
 8002890:	019f800c 	.word	0x019f800c

08002894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e11e      	b.n	8002aea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028ac:	4b91      	ldr	r3, [pc, #580]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d910      	bls.n	80028dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b8e      	ldr	r3, [pc, #568]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 020f 	bic.w	r2, r3, #15
 80028c2:	498c      	ldr	r1, [pc, #560]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b8a      	ldr	r3, [pc, #552]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e106      	b.n	8002aea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d073      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d129      	bne.n	8002944 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f0:	4b81      	ldr	r3, [pc, #516]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0f4      	b.n	8002aea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002900:	f000 f99e 	bl	8002c40 <RCC_GetSysClockFreqFromPLLSource>
 8002904:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4a7c      	ldr	r2, [pc, #496]	; (8002afc <HAL_RCC_ClockConfig+0x268>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d93f      	bls.n	800298e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800290e:	4b7a      	ldr	r3, [pc, #488]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002922:	2b00      	cmp	r3, #0
 8002924:	d033      	beq.n	800298e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800292a:	2b00      	cmp	r3, #0
 800292c:	d12f      	bne.n	800298e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800292e:	4b72      	ldr	r3, [pc, #456]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002936:	4a70      	ldr	r2, [pc, #448]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	e024      	b.n	800298e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d107      	bne.n	800295c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294c:	4b6a      	ldr	r3, [pc, #424]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0c6      	b.n	8002aea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800295c:	4b66      	ldr	r3, [pc, #408]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0be      	b.n	8002aea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800296c:	f000 f8ce 	bl	8002b0c <HAL_RCC_GetSysClockFreq>
 8002970:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4a61      	ldr	r2, [pc, #388]	; (8002afc <HAL_RCC_ClockConfig+0x268>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d909      	bls.n	800298e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800297a:	4b5f      	ldr	r3, [pc, #380]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002982:	4a5d      	ldr	r2, [pc, #372]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002988:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800298e:	4b5a      	ldr	r3, [pc, #360]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f023 0203 	bic.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4957      	ldr	r1, [pc, #348]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 800299c:	4313      	orrs	r3, r2
 800299e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a0:	f7fe fb1e 	bl	8000fe0 <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	e00a      	b.n	80029be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a8:	f7fe fb1a 	bl	8000fe0 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e095      	b.n	8002aea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	4b4e      	ldr	r3, [pc, #312]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 020c 	and.w	r2, r3, #12
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d1eb      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d023      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e8:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a42      	ldr	r2, [pc, #264]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 80029ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002a00:	4b3d      	ldr	r3, [pc, #244]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a08:	4a3b      	ldr	r2, [pc, #236]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002a0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a10:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	4936      	ldr	r1, [pc, #216]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b80      	cmp	r3, #128	; 0x80
 8002a28:	d105      	bne.n	8002a36 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a2a:	4b33      	ldr	r3, [pc, #204]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	4a32      	ldr	r2, [pc, #200]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002a30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a34:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a36:	4b2f      	ldr	r3, [pc, #188]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d21d      	bcs.n	8002a80 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a44:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 020f 	bic.w	r2, r3, #15
 8002a4c:	4929      	ldr	r1, [pc, #164]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a54:	f7fe fac4 	bl	8000fe0 <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5c:	f7fe fac0 	bl	8000fe0 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e03b      	b.n	8002aea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d1ed      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4917      	ldr	r1, [pc, #92]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	490f      	ldr	r1, [pc, #60]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002abe:	f000 f825 	bl	8002b0c <HAL_RCC_GetSysClockFreq>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	490c      	ldr	r1, [pc, #48]	; (8002b00 <HAL_RCC_ClockConfig+0x26c>)
 8002ad0:	5ccb      	ldrb	r3, [r1, r3]
 8002ad2:	f003 031f 	and.w	r3, r3, #31
 8002ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ada:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <HAL_RCC_ClockConfig+0x270>)
 8002adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_RCC_ClockConfig+0x274>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe fa30 	bl	8000f48 <HAL_InitTick>
 8002ae8:	4603      	mov	r3, r0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40022000 	.word	0x40022000
 8002af8:	40021000 	.word	0x40021000
 8002afc:	04c4b400 	.word	0x04c4b400
 8002b00:	080049e8 	.word	0x080049e8
 8002b04:	20000030 	.word	0x20000030
 8002b08:	20000034 	.word	0x20000034

08002b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b12:	4b2c      	ldr	r3, [pc, #176]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d102      	bne.n	8002b24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b1e:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	e047      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b24:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d102      	bne.n	8002b36 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b30:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	e03e      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b36:	4b23      	ldr	r3, [pc, #140]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	d136      	bne.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b4c:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	3301      	adds	r3, #1
 8002b58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d10c      	bne.n	8002b7a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b60:	4a1a      	ldr	r2, [pc, #104]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b68:	4a16      	ldr	r2, [pc, #88]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b6a:	68d2      	ldr	r2, [r2, #12]
 8002b6c:	0a12      	lsrs	r2, r2, #8
 8002b6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b72:	fb02 f303 	mul.w	r3, r2, r3
 8002b76:	617b      	str	r3, [r7, #20]
      break;
 8002b78:	e00c      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b7a:	4a13      	ldr	r2, [pc, #76]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b82:	4a10      	ldr	r2, [pc, #64]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b84:	68d2      	ldr	r2, [r2, #12]
 8002b86:	0a12      	lsrs	r2, r2, #8
 8002b88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	617b      	str	r3, [r7, #20]
      break;
 8002b92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	0e5b      	lsrs	r3, r3, #25
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	e001      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bb4:	693b      	ldr	r3, [r7, #16]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	371c      	adds	r7, #28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	00f42400 	.word	0x00f42400
 8002bcc:	007a1200 	.word	0x007a1200

08002bd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000030 	.word	0x20000030

08002be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bec:	f7ff fff0 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	0a1b      	lsrs	r3, r3, #8
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	4904      	ldr	r1, [pc, #16]	; (8002c10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	080049f8 	.word	0x080049f8

08002c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c18:	f7ff ffda 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	0adb      	lsrs	r3, r3, #11
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	4904      	ldr	r1, [pc, #16]	; (8002c3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	080049f8 	.word	0x080049f8

08002c40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c46:	4b1e      	ldr	r3, [pc, #120]	; (8002cc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d10c      	bne.n	8002c7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c64:	4a17      	ldr	r2, [pc, #92]	; (8002cc4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c6e:	68d2      	ldr	r2, [r2, #12]
 8002c70:	0a12      	lsrs	r2, r2, #8
 8002c72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	617b      	str	r3, [r7, #20]
    break;
 8002c7c:	e00c      	b.n	8002c98 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c7e:	4a12      	ldr	r2, [pc, #72]	; (8002cc8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c86:	4a0e      	ldr	r2, [pc, #56]	; (8002cc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c88:	68d2      	ldr	r2, [r2, #12]
 8002c8a:	0a12      	lsrs	r2, r2, #8
 8002c8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c90:	fb02 f303 	mul.w	r3, r2, r3
 8002c94:	617b      	str	r3, [r7, #20]
    break;
 8002c96:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	0e5b      	lsrs	r3, r3, #25
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002cb2:	687b      	ldr	r3, [r7, #4]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	007a1200 	.word	0x007a1200
 8002cc8:	00f42400 	.word	0x00f42400

08002ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cd8:	2300      	movs	r3, #0
 8002cda:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8098 	beq.w	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cee:	4b43      	ldr	r3, [pc, #268]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10d      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	4b40      	ldr	r3, [pc, #256]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	4a3f      	ldr	r2, [pc, #252]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6593      	str	r3, [r2, #88]	; 0x58
 8002d06:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d12:	2301      	movs	r3, #1
 8002d14:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d16:	4b3a      	ldr	r3, [pc, #232]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a39      	ldr	r2, [pc, #228]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d22:	f7fe f95d 	bl	8000fe0 <HAL_GetTick>
 8002d26:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d28:	e009      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2a:	f7fe f959 	bl	8000fe0 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d902      	bls.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	74fb      	strb	r3, [r7, #19]
        break;
 8002d3c:	e005      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d3e:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0ef      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d4a:	7cfb      	ldrb	r3, [r7, #19]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d159      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d50:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d01e      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d019      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d6c:	4b23      	ldr	r3, [pc, #140]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d78:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7e:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d88:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8e:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d98:	4a18      	ldr	r2, [pc, #96]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d016      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fe f919 	bl	8000fe0 <HAL_GetTick>
 8002dae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db0:	e00b      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe f915 	bl	8000fe0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d902      	bls.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	74fb      	strb	r3, [r7, #19]
            break;
 8002dc8:	e006      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ec      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10b      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	4903      	ldr	r1, [pc, #12]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002df4:	e008      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002df6:	7cfb      	ldrb	r3, [r7, #19]
 8002df8:	74bb      	strb	r3, [r7, #18]
 8002dfa:	e005      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e08:	7c7b      	ldrb	r3, [r7, #17]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d105      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0e:	4ba6      	ldr	r3, [pc, #664]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	4aa5      	ldr	r2, [pc, #660]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e26:	4ba0      	ldr	r3, [pc, #640]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2c:	f023 0203 	bic.w	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	499c      	ldr	r1, [pc, #624]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e48:	4b97      	ldr	r3, [pc, #604]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	f023 020c 	bic.w	r2, r3, #12
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	4994      	ldr	r1, [pc, #592]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e6a:	4b8f      	ldr	r3, [pc, #572]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	498b      	ldr	r1, [pc, #556]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e8c:	4b86      	ldr	r3, [pc, #536]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	4983      	ldr	r1, [pc, #524]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eae:	4b7e      	ldr	r3, [pc, #504]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	497a      	ldr	r1, [pc, #488]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ed0:	4b75      	ldr	r3, [pc, #468]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	4972      	ldr	r1, [pc, #456]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ef2:	4b6d      	ldr	r3, [pc, #436]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	4969      	ldr	r1, [pc, #420]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f14:	4b64      	ldr	r3, [pc, #400]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	4961      	ldr	r1, [pc, #388]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f36:	4b5c      	ldr	r3, [pc, #368]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	4958      	ldr	r1, [pc, #352]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d015      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f58:	4b53      	ldr	r3, [pc, #332]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	4950      	ldr	r1, [pc, #320]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f76:	d105      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f78:	4b4b      	ldr	r3, [pc, #300]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a4a      	ldr	r2, [pc, #296]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d015      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f90:	4b45      	ldr	r3, [pc, #276]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	4942      	ldr	r1, [pc, #264]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fae:	d105      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb0:	4b3d      	ldr	r3, [pc, #244]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a3c      	ldr	r2, [pc, #240]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d015      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fc8:	4b37      	ldr	r3, [pc, #220]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	4934      	ldr	r1, [pc, #208]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe6:	d105      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fe8:	4b2f      	ldr	r3, [pc, #188]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4a2e      	ldr	r2, [pc, #184]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ff2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d015      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003000:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003006:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300e:	4926      	ldr	r1, [pc, #152]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800301e:	d105      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003020:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4a20      	ldr	r2, [pc, #128]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800302a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d015      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003038:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	4918      	ldr	r1, [pc, #96]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003056:	d105      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003058:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800305e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003062:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d015      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003070:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307e:	490a      	ldr	r1, [pc, #40]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800308e:	d105      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800309c:	7cbb      	ldrb	r3, [r7, #18]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000

080030ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e042      	b.n	8003144 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d106      	bne.n	80030d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7fd fdc7 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2224      	movs	r2, #36	; 0x24
 80030da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8c2 	bl	8003278 <UART_SetConfig>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e022      	b.n	8003144 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fb82 	bl	8003810 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800311a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800312a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fc09 	bl	8003954 <UART_CheckIdleState>
 8003142:	4603      	mov	r3, r0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08a      	sub	sp, #40	; 0x28
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003162:	2b20      	cmp	r3, #32
 8003164:	f040 8083 	bne.w	800326e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_UART_Transmit+0x28>
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e07b      	b.n	8003270 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_UART_Transmit+0x3a>
 8003182:	2302      	movs	r3, #2
 8003184:	e074      	b.n	8003270 <HAL_UART_Transmit+0x124>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2221      	movs	r2, #33	; 0x21
 800319a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800319e:	f7fd ff1f 	bl	8000fe0 <HAL_GetTick>
 80031a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	88fa      	ldrh	r2, [r7, #6]
 80031a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	88fa      	ldrh	r2, [r7, #6]
 80031b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031bc:	d108      	bne.n	80031d0 <HAL_UART_Transmit+0x84>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d104      	bne.n	80031d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	e003      	b.n	80031d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80031e0:	e02c      	b.n	800323c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2180      	movs	r1, #128	; 0x80
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 fbfc 	bl	80039ea <UART_WaitOnFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e039      	b.n	8003270 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10b      	bne.n	800321a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003210:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	3302      	adds	r3, #2
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	e007      	b.n	800322a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	3301      	adds	r3, #1
 8003228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1cc      	bne.n	80031e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2200      	movs	r2, #0
 8003250:	2140      	movs	r1, #64	; 0x40
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fbc9 	bl	80039ea <UART_WaitOnFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e006      	b.n	8003270 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	e000      	b.n	8003270 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800326e:	2302      	movs	r3, #2
  }
}
 8003270:	4618      	mov	r0, r3
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800327c:	b08c      	sub	sp, #48	; 0x30
 800327e:	af00      	add	r7, sp, #0
 8003280:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	431a      	orrs	r2, r3
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	431a      	orrs	r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	4313      	orrs	r3, r2
 800329e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	4bab      	ldr	r3, [pc, #684]	; (8003554 <UART_SetConfig+0x2dc>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032b0:	430b      	orrs	r3, r1
 80032b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4aa0      	ldr	r2, [pc, #640]	; (8003558 <UART_SetConfig+0x2e0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d004      	beq.n	80032e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e0:	4313      	orrs	r3, r2
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80032ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032f8:	430b      	orrs	r3, r1
 80032fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	f023 010f 	bic.w	r1, r3, #15
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a91      	ldr	r2, [pc, #580]	; (800355c <UART_SetConfig+0x2e4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d125      	bne.n	8003368 <UART_SetConfig+0xf0>
 800331c:	4b90      	ldr	r3, [pc, #576]	; (8003560 <UART_SetConfig+0x2e8>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b03      	cmp	r3, #3
 8003328:	d81a      	bhi.n	8003360 <UART_SetConfig+0xe8>
 800332a:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <UART_SetConfig+0xb8>)
 800332c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003330:	08003341 	.word	0x08003341
 8003334:	08003351 	.word	0x08003351
 8003338:	08003349 	.word	0x08003349
 800333c:	08003359 	.word	0x08003359
 8003340:	2301      	movs	r3, #1
 8003342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003346:	e0d6      	b.n	80034f6 <UART_SetConfig+0x27e>
 8003348:	2302      	movs	r3, #2
 800334a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800334e:	e0d2      	b.n	80034f6 <UART_SetConfig+0x27e>
 8003350:	2304      	movs	r3, #4
 8003352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003356:	e0ce      	b.n	80034f6 <UART_SetConfig+0x27e>
 8003358:	2308      	movs	r3, #8
 800335a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800335e:	e0ca      	b.n	80034f6 <UART_SetConfig+0x27e>
 8003360:	2310      	movs	r3, #16
 8003362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003366:	e0c6      	b.n	80034f6 <UART_SetConfig+0x27e>
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a7d      	ldr	r2, [pc, #500]	; (8003564 <UART_SetConfig+0x2ec>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d138      	bne.n	80033e4 <UART_SetConfig+0x16c>
 8003372:	4b7b      	ldr	r3, [pc, #492]	; (8003560 <UART_SetConfig+0x2e8>)
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b0c      	cmp	r3, #12
 800337e:	d82d      	bhi.n	80033dc <UART_SetConfig+0x164>
 8003380:	a201      	add	r2, pc, #4	; (adr r2, 8003388 <UART_SetConfig+0x110>)
 8003382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003386:	bf00      	nop
 8003388:	080033bd 	.word	0x080033bd
 800338c:	080033dd 	.word	0x080033dd
 8003390:	080033dd 	.word	0x080033dd
 8003394:	080033dd 	.word	0x080033dd
 8003398:	080033cd 	.word	0x080033cd
 800339c:	080033dd 	.word	0x080033dd
 80033a0:	080033dd 	.word	0x080033dd
 80033a4:	080033dd 	.word	0x080033dd
 80033a8:	080033c5 	.word	0x080033c5
 80033ac:	080033dd 	.word	0x080033dd
 80033b0:	080033dd 	.word	0x080033dd
 80033b4:	080033dd 	.word	0x080033dd
 80033b8:	080033d5 	.word	0x080033d5
 80033bc:	2300      	movs	r3, #0
 80033be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033c2:	e098      	b.n	80034f6 <UART_SetConfig+0x27e>
 80033c4:	2302      	movs	r3, #2
 80033c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033ca:	e094      	b.n	80034f6 <UART_SetConfig+0x27e>
 80033cc:	2304      	movs	r3, #4
 80033ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033d2:	e090      	b.n	80034f6 <UART_SetConfig+0x27e>
 80033d4:	2308      	movs	r3, #8
 80033d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033da:	e08c      	b.n	80034f6 <UART_SetConfig+0x27e>
 80033dc:	2310      	movs	r3, #16
 80033de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033e2:	e088      	b.n	80034f6 <UART_SetConfig+0x27e>
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a5f      	ldr	r2, [pc, #380]	; (8003568 <UART_SetConfig+0x2f0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d125      	bne.n	800343a <UART_SetConfig+0x1c2>
 80033ee:	4b5c      	ldr	r3, [pc, #368]	; (8003560 <UART_SetConfig+0x2e8>)
 80033f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033f8:	2b30      	cmp	r3, #48	; 0x30
 80033fa:	d016      	beq.n	800342a <UART_SetConfig+0x1b2>
 80033fc:	2b30      	cmp	r3, #48	; 0x30
 80033fe:	d818      	bhi.n	8003432 <UART_SetConfig+0x1ba>
 8003400:	2b20      	cmp	r3, #32
 8003402:	d00a      	beq.n	800341a <UART_SetConfig+0x1a2>
 8003404:	2b20      	cmp	r3, #32
 8003406:	d814      	bhi.n	8003432 <UART_SetConfig+0x1ba>
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <UART_SetConfig+0x19a>
 800340c:	2b10      	cmp	r3, #16
 800340e:	d008      	beq.n	8003422 <UART_SetConfig+0x1aa>
 8003410:	e00f      	b.n	8003432 <UART_SetConfig+0x1ba>
 8003412:	2300      	movs	r3, #0
 8003414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003418:	e06d      	b.n	80034f6 <UART_SetConfig+0x27e>
 800341a:	2302      	movs	r3, #2
 800341c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003420:	e069      	b.n	80034f6 <UART_SetConfig+0x27e>
 8003422:	2304      	movs	r3, #4
 8003424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003428:	e065      	b.n	80034f6 <UART_SetConfig+0x27e>
 800342a:	2308      	movs	r3, #8
 800342c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003430:	e061      	b.n	80034f6 <UART_SetConfig+0x27e>
 8003432:	2310      	movs	r3, #16
 8003434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003438:	e05d      	b.n	80034f6 <UART_SetConfig+0x27e>
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a4b      	ldr	r2, [pc, #300]	; (800356c <UART_SetConfig+0x2f4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d125      	bne.n	8003490 <UART_SetConfig+0x218>
 8003444:	4b46      	ldr	r3, [pc, #280]	; (8003560 <UART_SetConfig+0x2e8>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800344e:	2bc0      	cmp	r3, #192	; 0xc0
 8003450:	d016      	beq.n	8003480 <UART_SetConfig+0x208>
 8003452:	2bc0      	cmp	r3, #192	; 0xc0
 8003454:	d818      	bhi.n	8003488 <UART_SetConfig+0x210>
 8003456:	2b80      	cmp	r3, #128	; 0x80
 8003458:	d00a      	beq.n	8003470 <UART_SetConfig+0x1f8>
 800345a:	2b80      	cmp	r3, #128	; 0x80
 800345c:	d814      	bhi.n	8003488 <UART_SetConfig+0x210>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <UART_SetConfig+0x1f0>
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d008      	beq.n	8003478 <UART_SetConfig+0x200>
 8003466:	e00f      	b.n	8003488 <UART_SetConfig+0x210>
 8003468:	2300      	movs	r3, #0
 800346a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800346e:	e042      	b.n	80034f6 <UART_SetConfig+0x27e>
 8003470:	2302      	movs	r3, #2
 8003472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003476:	e03e      	b.n	80034f6 <UART_SetConfig+0x27e>
 8003478:	2304      	movs	r3, #4
 800347a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800347e:	e03a      	b.n	80034f6 <UART_SetConfig+0x27e>
 8003480:	2308      	movs	r3, #8
 8003482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003486:	e036      	b.n	80034f6 <UART_SetConfig+0x27e>
 8003488:	2310      	movs	r3, #16
 800348a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800348e:	e032      	b.n	80034f6 <UART_SetConfig+0x27e>
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a30      	ldr	r2, [pc, #192]	; (8003558 <UART_SetConfig+0x2e0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d12a      	bne.n	80034f0 <UART_SetConfig+0x278>
 800349a:	4b31      	ldr	r3, [pc, #196]	; (8003560 <UART_SetConfig+0x2e8>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034a8:	d01a      	beq.n	80034e0 <UART_SetConfig+0x268>
 80034aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034ae:	d81b      	bhi.n	80034e8 <UART_SetConfig+0x270>
 80034b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b4:	d00c      	beq.n	80034d0 <UART_SetConfig+0x258>
 80034b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ba:	d815      	bhi.n	80034e8 <UART_SetConfig+0x270>
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <UART_SetConfig+0x250>
 80034c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c4:	d008      	beq.n	80034d8 <UART_SetConfig+0x260>
 80034c6:	e00f      	b.n	80034e8 <UART_SetConfig+0x270>
 80034c8:	2300      	movs	r3, #0
 80034ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ce:	e012      	b.n	80034f6 <UART_SetConfig+0x27e>
 80034d0:	2302      	movs	r3, #2
 80034d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034d6:	e00e      	b.n	80034f6 <UART_SetConfig+0x27e>
 80034d8:	2304      	movs	r3, #4
 80034da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034de:	e00a      	b.n	80034f6 <UART_SetConfig+0x27e>
 80034e0:	2308      	movs	r3, #8
 80034e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034e6:	e006      	b.n	80034f6 <UART_SetConfig+0x27e>
 80034e8:	2310      	movs	r3, #16
 80034ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ee:	e002      	b.n	80034f6 <UART_SetConfig+0x27e>
 80034f0:	2310      	movs	r3, #16
 80034f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a17      	ldr	r2, [pc, #92]	; (8003558 <UART_SetConfig+0x2e0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	f040 80a8 	bne.w	8003652 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003502:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003506:	2b08      	cmp	r3, #8
 8003508:	d834      	bhi.n	8003574 <UART_SetConfig+0x2fc>
 800350a:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <UART_SetConfig+0x298>)
 800350c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003510:	08003535 	.word	0x08003535
 8003514:	08003575 	.word	0x08003575
 8003518:	0800353d 	.word	0x0800353d
 800351c:	08003575 	.word	0x08003575
 8003520:	08003543 	.word	0x08003543
 8003524:	08003575 	.word	0x08003575
 8003528:	08003575 	.word	0x08003575
 800352c:	08003575 	.word	0x08003575
 8003530:	0800354b 	.word	0x0800354b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003534:	f7ff fb58 	bl	8002be8 <HAL_RCC_GetPCLK1Freq>
 8003538:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800353a:	e021      	b.n	8003580 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <UART_SetConfig+0x2f8>)
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003540:	e01e      	b.n	8003580 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003542:	f7ff fae3 	bl	8002b0c <HAL_RCC_GetSysClockFreq>
 8003546:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003548:	e01a      	b.n	8003580 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800354a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003550:	e016      	b.n	8003580 <UART_SetConfig+0x308>
 8003552:	bf00      	nop
 8003554:	cfff69f3 	.word	0xcfff69f3
 8003558:	40008000 	.word	0x40008000
 800355c:	40013800 	.word	0x40013800
 8003560:	40021000 	.word	0x40021000
 8003564:	40004400 	.word	0x40004400
 8003568:	40004800 	.word	0x40004800
 800356c:	40004c00 	.word	0x40004c00
 8003570:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800357e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 812a 	beq.w	80037dc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	4a9e      	ldr	r2, [pc, #632]	; (8003808 <UART_SetConfig+0x590>)
 800358e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003592:	461a      	mov	r2, r3
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	fbb3 f3f2 	udiv	r3, r3, r2
 800359a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d305      	bcc.n	80035b8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d903      	bls.n	80035c0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80035be:	e10d      	b.n	80037dc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	2200      	movs	r2, #0
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	60fa      	str	r2, [r7, #12]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	4a8e      	ldr	r2, [pc, #568]	; (8003808 <UART_SetConfig+0x590>)
 80035ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2200      	movs	r2, #0
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035e2:	f7fc fe19 	bl	8000218 <__aeabi_uldivmod>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	020b      	lsls	r3, r1, #8
 80035f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80035fc:	0202      	lsls	r2, r0, #8
 80035fe:	6979      	ldr	r1, [r7, #20]
 8003600:	6849      	ldr	r1, [r1, #4]
 8003602:	0849      	lsrs	r1, r1, #1
 8003604:	2000      	movs	r0, #0
 8003606:	460c      	mov	r4, r1
 8003608:	4605      	mov	r5, r0
 800360a:	eb12 0804 	adds.w	r8, r2, r4
 800360e:	eb43 0905 	adc.w	r9, r3, r5
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	469a      	mov	sl, r3
 800361a:	4693      	mov	fp, r2
 800361c:	4652      	mov	r2, sl
 800361e:	465b      	mov	r3, fp
 8003620:	4640      	mov	r0, r8
 8003622:	4649      	mov	r1, r9
 8003624:	f7fc fdf8 	bl	8000218 <__aeabi_uldivmod>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4613      	mov	r3, r2
 800362e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003636:	d308      	bcc.n	800364a <UART_SetConfig+0x3d2>
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800363e:	d204      	bcs.n	800364a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	60da      	str	r2, [r3, #12]
 8003648:	e0c8      	b.n	80037dc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003650:	e0c4      	b.n	80037dc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800365a:	d167      	bne.n	800372c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800365c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003660:	2b08      	cmp	r3, #8
 8003662:	d828      	bhi.n	80036b6 <UART_SetConfig+0x43e>
 8003664:	a201      	add	r2, pc, #4	; (adr r2, 800366c <UART_SetConfig+0x3f4>)
 8003666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366a:	bf00      	nop
 800366c:	08003691 	.word	0x08003691
 8003670:	08003699 	.word	0x08003699
 8003674:	080036a1 	.word	0x080036a1
 8003678:	080036b7 	.word	0x080036b7
 800367c:	080036a7 	.word	0x080036a7
 8003680:	080036b7 	.word	0x080036b7
 8003684:	080036b7 	.word	0x080036b7
 8003688:	080036b7 	.word	0x080036b7
 800368c:	080036af 	.word	0x080036af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003690:	f7ff faaa 	bl	8002be8 <HAL_RCC_GetPCLK1Freq>
 8003694:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003696:	e014      	b.n	80036c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003698:	f7ff fabc 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 800369c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800369e:	e010      	b.n	80036c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a0:	4b5a      	ldr	r3, [pc, #360]	; (800380c <UART_SetConfig+0x594>)
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036a4:	e00d      	b.n	80036c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a6:	f7ff fa31 	bl	8002b0c <HAL_RCC_GetSysClockFreq>
 80036aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036ac:	e009      	b.n	80036c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036b4:	e005      	b.n	80036c2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80036c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 8089 	beq.w	80037dc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	4a4e      	ldr	r2, [pc, #312]	; (8003808 <UART_SetConfig+0x590>)
 80036d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036d4:	461a      	mov	r2, r3
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80036dc:	005a      	lsls	r2, r3, #1
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	085b      	lsrs	r3, r3, #1
 80036e4:	441a      	add	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	2b0f      	cmp	r3, #15
 80036f4:	d916      	bls.n	8003724 <UART_SetConfig+0x4ac>
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fc:	d212      	bcs.n	8003724 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	b29b      	uxth	r3, r3
 8003702:	f023 030f 	bic.w	r3, r3, #15
 8003706:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	b29b      	uxth	r3, r3
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	b29a      	uxth	r2, r3
 8003714:	8bfb      	ldrh	r3, [r7, #30]
 8003716:	4313      	orrs	r3, r2
 8003718:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	8bfa      	ldrh	r2, [r7, #30]
 8003720:	60da      	str	r2, [r3, #12]
 8003722:	e05b      	b.n	80037dc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800372a:	e057      	b.n	80037dc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800372c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003730:	2b08      	cmp	r3, #8
 8003732:	d828      	bhi.n	8003786 <UART_SetConfig+0x50e>
 8003734:	a201      	add	r2, pc, #4	; (adr r2, 800373c <UART_SetConfig+0x4c4>)
 8003736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373a:	bf00      	nop
 800373c:	08003761 	.word	0x08003761
 8003740:	08003769 	.word	0x08003769
 8003744:	08003771 	.word	0x08003771
 8003748:	08003787 	.word	0x08003787
 800374c:	08003777 	.word	0x08003777
 8003750:	08003787 	.word	0x08003787
 8003754:	08003787 	.word	0x08003787
 8003758:	08003787 	.word	0x08003787
 800375c:	0800377f 	.word	0x0800377f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003760:	f7ff fa42 	bl	8002be8 <HAL_RCC_GetPCLK1Freq>
 8003764:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003766:	e014      	b.n	8003792 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003768:	f7ff fa54 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 800376c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800376e:	e010      	b.n	8003792 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003770:	4b26      	ldr	r3, [pc, #152]	; (800380c <UART_SetConfig+0x594>)
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003774:	e00d      	b.n	8003792 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003776:	f7ff f9c9 	bl	8002b0c <HAL_RCC_GetSysClockFreq>
 800377a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800377c:	e009      	b.n	8003792 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800377e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003784:	e005      	b.n	8003792 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003790:	bf00      	nop
    }

    if (pclk != 0U)
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d021      	beq.n	80037dc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	4a1a      	ldr	r2, [pc, #104]	; (8003808 <UART_SetConfig+0x590>)
 800379e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037a2:	461a      	mov	r2, r3
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	441a      	add	r2, r3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	2b0f      	cmp	r3, #15
 80037c0:	d909      	bls.n	80037d6 <UART_SetConfig+0x55e>
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c8:	d205      	bcs.n	80037d6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60da      	str	r2, [r3, #12]
 80037d4:	e002      	b.n	80037dc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	2201      	movs	r2, #1
 80037e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2200      	movs	r2, #0
 80037f0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2200      	movs	r2, #0
 80037f6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80037f8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3730      	adds	r7, #48	; 0x30
 8003800:	46bd      	mov	sp, r7
 8003802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003806:	bf00      	nop
 8003808:	08004a10 	.word	0x08004a10
 800380c:	00f42400 	.word	0x00f42400

08003810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01a      	beq.n	8003926 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800390e:	d10a      	bne.n	8003926 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	605a      	str	r2, [r3, #4]
  }
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af02      	add	r7, sp, #8
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003964:	f7fd fb3c 	bl	8000fe0 <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b08      	cmp	r3, #8
 8003976:	d10e      	bne.n	8003996 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003978:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f82f 	bl	80039ea <UART_WaitOnFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e025      	b.n	80039e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d10e      	bne.n	80039c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f819 	bl	80039ea <UART_WaitOnFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e00f      	b.n	80039e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b09c      	sub	sp, #112	; 0x70
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	603b      	str	r3, [r7, #0]
 80039f6:	4613      	mov	r3, r2
 80039f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039fa:	e0a9      	b.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a02:	f000 80a5 	beq.w	8003b50 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a06:	f7fd faeb 	bl	8000fe0 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d302      	bcc.n	8003a1c <UART_WaitOnFlagUntilTimeout+0x32>
 8003a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d140      	bne.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a30:	667b      	str	r3, [r7, #100]	; 0x64
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a3c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e6      	bne.n	8003a1c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3308      	adds	r3, #8
 8003a54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	663b      	str	r3, [r7, #96]	; 0x60
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a76:	e841 2300 	strex	r3, r2, [r1]
 8003a7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1e5      	bne.n	8003a4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e069      	b.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d051      	beq.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aba:	d149      	bne.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ac4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ada:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e6      	bne.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3308      	adds	r3, #8
 8003afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	e853 3f00 	ldrex	r3, [r3]
 8003b06:	613b      	str	r3, [r7, #16]
   return(result);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3308      	adds	r3, #8
 8003b16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b18:	623a      	str	r2, [r7, #32]
 8003b1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1c:	69f9      	ldr	r1, [r7, #28]
 8003b1e:	6a3a      	ldr	r2, [r7, #32]
 8003b20:	e841 2300 	strex	r3, r2, [r1]
 8003b24:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e5      	bne.n	8003af8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e010      	b.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	f43f af46 	beq.w	80039fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3770      	adds	r7, #112	; 0x70
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b085      	sub	sp, #20
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_UARTEx_DisableFifoMode+0x16>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e027      	b.n	8003be0 <HAL_UARTEx_DisableFifoMode+0x66>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2224      	movs	r2, #36	; 0x24
 8003b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0201 	bic.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003bbe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e02d      	b.n	8003c60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2224      	movs	r2, #36	; 0x24
 8003c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0201 	bic.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f84f 	bl	8003ce4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e02d      	b.n	8003cdc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2224      	movs	r2, #36	; 0x24
 8003c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f811 	bl	8003ce4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d108      	bne.n	8003d06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d04:	e031      	b.n	8003d6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d06:	2308      	movs	r3, #8
 8003d08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	0e5b      	lsrs	r3, r3, #25
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	0f5b      	lsrs	r3, r3, #29
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d2e:	7bbb      	ldrb	r3, [r7, #14]
 8003d30:	7b3a      	ldrb	r2, [r7, #12]
 8003d32:	4911      	ldr	r1, [pc, #68]	; (8003d78 <UARTEx_SetNbDataToProcess+0x94>)
 8003d34:	5c8a      	ldrb	r2, [r1, r2]
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d3a:	7b3a      	ldrb	r2, [r7, #12]
 8003d3c:	490f      	ldr	r1, [pc, #60]	; (8003d7c <UARTEx_SetNbDataToProcess+0x98>)
 8003d3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d40:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	7b7a      	ldrb	r2, [r7, #13]
 8003d50:	4909      	ldr	r1, [pc, #36]	; (8003d78 <UARTEx_SetNbDataToProcess+0x94>)
 8003d52:	5c8a      	ldrb	r2, [r1, r2]
 8003d54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d58:	7b7a      	ldrb	r2, [r7, #13]
 8003d5a:	4908      	ldr	r1, [pc, #32]	; (8003d7c <UARTEx_SetNbDataToProcess+0x98>)
 8003d5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003d6a:	bf00      	nop
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	08004a28 	.word	0x08004a28
 8003d7c:	08004a30 	.word	0x08004a30

08003d80 <__errno>:
 8003d80:	4b01      	ldr	r3, [pc, #4]	; (8003d88 <__errno+0x8>)
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	2000003c 	.word	0x2000003c

08003d8c <__libc_init_array>:
 8003d8c:	b570      	push	{r4, r5, r6, lr}
 8003d8e:	4d0d      	ldr	r5, [pc, #52]	; (8003dc4 <__libc_init_array+0x38>)
 8003d90:	4c0d      	ldr	r4, [pc, #52]	; (8003dc8 <__libc_init_array+0x3c>)
 8003d92:	1b64      	subs	r4, r4, r5
 8003d94:	10a4      	asrs	r4, r4, #2
 8003d96:	2600      	movs	r6, #0
 8003d98:	42a6      	cmp	r6, r4
 8003d9a:	d109      	bne.n	8003db0 <__libc_init_array+0x24>
 8003d9c:	4d0b      	ldr	r5, [pc, #44]	; (8003dcc <__libc_init_array+0x40>)
 8003d9e:	4c0c      	ldr	r4, [pc, #48]	; (8003dd0 <__libc_init_array+0x44>)
 8003da0:	f000 fdf4 	bl	800498c <_init>
 8003da4:	1b64      	subs	r4, r4, r5
 8003da6:	10a4      	asrs	r4, r4, #2
 8003da8:	2600      	movs	r6, #0
 8003daa:	42a6      	cmp	r6, r4
 8003dac:	d105      	bne.n	8003dba <__libc_init_array+0x2e>
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
 8003db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003db4:	4798      	blx	r3
 8003db6:	3601      	adds	r6, #1
 8003db8:	e7ee      	b.n	8003d98 <__libc_init_array+0xc>
 8003dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dbe:	4798      	blx	r3
 8003dc0:	3601      	adds	r6, #1
 8003dc2:	e7f2      	b.n	8003daa <__libc_init_array+0x1e>
 8003dc4:	08004aa4 	.word	0x08004aa4
 8003dc8:	08004aa4 	.word	0x08004aa4
 8003dcc:	08004aa4 	.word	0x08004aa4
 8003dd0:	08004aa8 	.word	0x08004aa8

08003dd4 <memset>:
 8003dd4:	4402      	add	r2, r0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d100      	bne.n	8003dde <memset+0xa>
 8003ddc:	4770      	bx	lr
 8003dde:	f803 1b01 	strb.w	r1, [r3], #1
 8003de2:	e7f9      	b.n	8003dd8 <memset+0x4>

08003de4 <_puts_r>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	460e      	mov	r6, r1
 8003de8:	4605      	mov	r5, r0
 8003dea:	b118      	cbz	r0, 8003df4 <_puts_r+0x10>
 8003dec:	6983      	ldr	r3, [r0, #24]
 8003dee:	b90b      	cbnz	r3, 8003df4 <_puts_r+0x10>
 8003df0:	f000 fb16 	bl	8004420 <__sinit>
 8003df4:	69ab      	ldr	r3, [r5, #24]
 8003df6:	68ac      	ldr	r4, [r5, #8]
 8003df8:	b913      	cbnz	r3, 8003e00 <_puts_r+0x1c>
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	f000 fb10 	bl	8004420 <__sinit>
 8003e00:	4b2c      	ldr	r3, [pc, #176]	; (8003eb4 <_puts_r+0xd0>)
 8003e02:	429c      	cmp	r4, r3
 8003e04:	d120      	bne.n	8003e48 <_puts_r+0x64>
 8003e06:	686c      	ldr	r4, [r5, #4]
 8003e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e0a:	07db      	lsls	r3, r3, #31
 8003e0c:	d405      	bmi.n	8003e1a <_puts_r+0x36>
 8003e0e:	89a3      	ldrh	r3, [r4, #12]
 8003e10:	0598      	lsls	r0, r3, #22
 8003e12:	d402      	bmi.n	8003e1a <_puts_r+0x36>
 8003e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e16:	f000 fba1 	bl	800455c <__retarget_lock_acquire_recursive>
 8003e1a:	89a3      	ldrh	r3, [r4, #12]
 8003e1c:	0719      	lsls	r1, r3, #28
 8003e1e:	d51d      	bpl.n	8003e5c <_puts_r+0x78>
 8003e20:	6923      	ldr	r3, [r4, #16]
 8003e22:	b1db      	cbz	r3, 8003e5c <_puts_r+0x78>
 8003e24:	3e01      	subs	r6, #1
 8003e26:	68a3      	ldr	r3, [r4, #8]
 8003e28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	60a3      	str	r3, [r4, #8]
 8003e30:	bb39      	cbnz	r1, 8003e82 <_puts_r+0x9e>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	da38      	bge.n	8003ea8 <_puts_r+0xc4>
 8003e36:	4622      	mov	r2, r4
 8003e38:	210a      	movs	r1, #10
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	f000 f916 	bl	800406c <__swbuf_r>
 8003e40:	3001      	adds	r0, #1
 8003e42:	d011      	beq.n	8003e68 <_puts_r+0x84>
 8003e44:	250a      	movs	r5, #10
 8003e46:	e011      	b.n	8003e6c <_puts_r+0x88>
 8003e48:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <_puts_r+0xd4>)
 8003e4a:	429c      	cmp	r4, r3
 8003e4c:	d101      	bne.n	8003e52 <_puts_r+0x6e>
 8003e4e:	68ac      	ldr	r4, [r5, #8]
 8003e50:	e7da      	b.n	8003e08 <_puts_r+0x24>
 8003e52:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <_puts_r+0xd8>)
 8003e54:	429c      	cmp	r4, r3
 8003e56:	bf08      	it	eq
 8003e58:	68ec      	ldreq	r4, [r5, #12]
 8003e5a:	e7d5      	b.n	8003e08 <_puts_r+0x24>
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f000 f956 	bl	8004110 <__swsetup_r>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d0dd      	beq.n	8003e24 <_puts_r+0x40>
 8003e68:	f04f 35ff 	mov.w	r5, #4294967295
 8003e6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e6e:	07da      	lsls	r2, r3, #31
 8003e70:	d405      	bmi.n	8003e7e <_puts_r+0x9a>
 8003e72:	89a3      	ldrh	r3, [r4, #12]
 8003e74:	059b      	lsls	r3, r3, #22
 8003e76:	d402      	bmi.n	8003e7e <_puts_r+0x9a>
 8003e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e7a:	f000 fb70 	bl	800455e <__retarget_lock_release_recursive>
 8003e7e:	4628      	mov	r0, r5
 8003e80:	bd70      	pop	{r4, r5, r6, pc}
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	da04      	bge.n	8003e90 <_puts_r+0xac>
 8003e86:	69a2      	ldr	r2, [r4, #24]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	dc06      	bgt.n	8003e9a <_puts_r+0xb6>
 8003e8c:	290a      	cmp	r1, #10
 8003e8e:	d004      	beq.n	8003e9a <_puts_r+0xb6>
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	6022      	str	r2, [r4, #0]
 8003e96:	7019      	strb	r1, [r3, #0]
 8003e98:	e7c5      	b.n	8003e26 <_puts_r+0x42>
 8003e9a:	4622      	mov	r2, r4
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	f000 f8e5 	bl	800406c <__swbuf_r>
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	d1bf      	bne.n	8003e26 <_puts_r+0x42>
 8003ea6:	e7df      	b.n	8003e68 <_puts_r+0x84>
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	250a      	movs	r5, #10
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	6022      	str	r2, [r4, #0]
 8003eb0:	701d      	strb	r5, [r3, #0]
 8003eb2:	e7db      	b.n	8003e6c <_puts_r+0x88>
 8003eb4:	08004a5c 	.word	0x08004a5c
 8003eb8:	08004a7c 	.word	0x08004a7c
 8003ebc:	08004a3c 	.word	0x08004a3c

08003ec0 <puts>:
 8003ec0:	4b02      	ldr	r3, [pc, #8]	; (8003ecc <puts+0xc>)
 8003ec2:	4601      	mov	r1, r0
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	f7ff bf8d 	b.w	8003de4 <_puts_r>
 8003eca:	bf00      	nop
 8003ecc:	2000003c 	.word	0x2000003c

08003ed0 <setbuf>:
 8003ed0:	2900      	cmp	r1, #0
 8003ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2202      	moveq	r2, #2
 8003eda:	2200      	movne	r2, #0
 8003edc:	f000 b800 	b.w	8003ee0 <setvbuf>

08003ee0 <setvbuf>:
 8003ee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003ee4:	461d      	mov	r5, r3
 8003ee6:	4b5d      	ldr	r3, [pc, #372]	; (800405c <setvbuf+0x17c>)
 8003ee8:	681f      	ldr	r7, [r3, #0]
 8003eea:	4604      	mov	r4, r0
 8003eec:	460e      	mov	r6, r1
 8003eee:	4690      	mov	r8, r2
 8003ef0:	b127      	cbz	r7, 8003efc <setvbuf+0x1c>
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	b913      	cbnz	r3, 8003efc <setvbuf+0x1c>
 8003ef6:	4638      	mov	r0, r7
 8003ef8:	f000 fa92 	bl	8004420 <__sinit>
 8003efc:	4b58      	ldr	r3, [pc, #352]	; (8004060 <setvbuf+0x180>)
 8003efe:	429c      	cmp	r4, r3
 8003f00:	d167      	bne.n	8003fd2 <setvbuf+0xf2>
 8003f02:	687c      	ldr	r4, [r7, #4]
 8003f04:	f1b8 0f02 	cmp.w	r8, #2
 8003f08:	d006      	beq.n	8003f18 <setvbuf+0x38>
 8003f0a:	f1b8 0f01 	cmp.w	r8, #1
 8003f0e:	f200 809f 	bhi.w	8004050 <setvbuf+0x170>
 8003f12:	2d00      	cmp	r5, #0
 8003f14:	f2c0 809c 	blt.w	8004050 <setvbuf+0x170>
 8003f18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f1a:	07db      	lsls	r3, r3, #31
 8003f1c:	d405      	bmi.n	8003f2a <setvbuf+0x4a>
 8003f1e:	89a3      	ldrh	r3, [r4, #12]
 8003f20:	0598      	lsls	r0, r3, #22
 8003f22:	d402      	bmi.n	8003f2a <setvbuf+0x4a>
 8003f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f26:	f000 fb19 	bl	800455c <__retarget_lock_acquire_recursive>
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	4638      	mov	r0, r7
 8003f2e:	f000 f9e3 	bl	80042f8 <_fflush_r>
 8003f32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f34:	b141      	cbz	r1, 8003f48 <setvbuf+0x68>
 8003f36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f3a:	4299      	cmp	r1, r3
 8003f3c:	d002      	beq.n	8003f44 <setvbuf+0x64>
 8003f3e:	4638      	mov	r0, r7
 8003f40:	f000 fb7c 	bl	800463c <_free_r>
 8003f44:	2300      	movs	r3, #0
 8003f46:	6363      	str	r3, [r4, #52]	; 0x34
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61a3      	str	r3, [r4, #24]
 8003f4c:	6063      	str	r3, [r4, #4]
 8003f4e:	89a3      	ldrh	r3, [r4, #12]
 8003f50:	0619      	lsls	r1, r3, #24
 8003f52:	d503      	bpl.n	8003f5c <setvbuf+0x7c>
 8003f54:	6921      	ldr	r1, [r4, #16]
 8003f56:	4638      	mov	r0, r7
 8003f58:	f000 fb70 	bl	800463c <_free_r>
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003f62:	f023 0303 	bic.w	r3, r3, #3
 8003f66:	f1b8 0f02 	cmp.w	r8, #2
 8003f6a:	81a3      	strh	r3, [r4, #12]
 8003f6c:	d06c      	beq.n	8004048 <setvbuf+0x168>
 8003f6e:	ab01      	add	r3, sp, #4
 8003f70:	466a      	mov	r2, sp
 8003f72:	4621      	mov	r1, r4
 8003f74:	4638      	mov	r0, r7
 8003f76:	f000 faf3 	bl	8004560 <__swhatbuf_r>
 8003f7a:	89a3      	ldrh	r3, [r4, #12]
 8003f7c:	4318      	orrs	r0, r3
 8003f7e:	81a0      	strh	r0, [r4, #12]
 8003f80:	2d00      	cmp	r5, #0
 8003f82:	d130      	bne.n	8003fe6 <setvbuf+0x106>
 8003f84:	9d00      	ldr	r5, [sp, #0]
 8003f86:	4628      	mov	r0, r5
 8003f88:	f000 fb50 	bl	800462c <malloc>
 8003f8c:	4606      	mov	r6, r0
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d155      	bne.n	800403e <setvbuf+0x15e>
 8003f92:	f8dd 9000 	ldr.w	r9, [sp]
 8003f96:	45a9      	cmp	r9, r5
 8003f98:	d14a      	bne.n	8004030 <setvbuf+0x150>
 8003f9a:	f04f 35ff 	mov.w	r5, #4294967295
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	60a2      	str	r2, [r4, #8]
 8003fa2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003fa6:	6022      	str	r2, [r4, #0]
 8003fa8:	6122      	str	r2, [r4, #16]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fb0:	6162      	str	r2, [r4, #20]
 8003fb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fb4:	f043 0302 	orr.w	r3, r3, #2
 8003fb8:	07d2      	lsls	r2, r2, #31
 8003fba:	81a3      	strh	r3, [r4, #12]
 8003fbc:	d405      	bmi.n	8003fca <setvbuf+0xea>
 8003fbe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003fc2:	d102      	bne.n	8003fca <setvbuf+0xea>
 8003fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fc6:	f000 faca 	bl	800455e <__retarget_lock_release_recursive>
 8003fca:	4628      	mov	r0, r5
 8003fcc:	b003      	add	sp, #12
 8003fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fd2:	4b24      	ldr	r3, [pc, #144]	; (8004064 <setvbuf+0x184>)
 8003fd4:	429c      	cmp	r4, r3
 8003fd6:	d101      	bne.n	8003fdc <setvbuf+0xfc>
 8003fd8:	68bc      	ldr	r4, [r7, #8]
 8003fda:	e793      	b.n	8003f04 <setvbuf+0x24>
 8003fdc:	4b22      	ldr	r3, [pc, #136]	; (8004068 <setvbuf+0x188>)
 8003fde:	429c      	cmp	r4, r3
 8003fe0:	bf08      	it	eq
 8003fe2:	68fc      	ldreq	r4, [r7, #12]
 8003fe4:	e78e      	b.n	8003f04 <setvbuf+0x24>
 8003fe6:	2e00      	cmp	r6, #0
 8003fe8:	d0cd      	beq.n	8003f86 <setvbuf+0xa6>
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	b913      	cbnz	r3, 8003ff4 <setvbuf+0x114>
 8003fee:	4638      	mov	r0, r7
 8003ff0:	f000 fa16 	bl	8004420 <__sinit>
 8003ff4:	f1b8 0f01 	cmp.w	r8, #1
 8003ff8:	bf08      	it	eq
 8003ffa:	89a3      	ldrheq	r3, [r4, #12]
 8003ffc:	6026      	str	r6, [r4, #0]
 8003ffe:	bf04      	itt	eq
 8004000:	f043 0301 	orreq.w	r3, r3, #1
 8004004:	81a3      	strheq	r3, [r4, #12]
 8004006:	89a2      	ldrh	r2, [r4, #12]
 8004008:	f012 0308 	ands.w	r3, r2, #8
 800400c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004010:	d01c      	beq.n	800404c <setvbuf+0x16c>
 8004012:	07d3      	lsls	r3, r2, #31
 8004014:	bf41      	itttt	mi
 8004016:	2300      	movmi	r3, #0
 8004018:	426d      	negmi	r5, r5
 800401a:	60a3      	strmi	r3, [r4, #8]
 800401c:	61a5      	strmi	r5, [r4, #24]
 800401e:	bf58      	it	pl
 8004020:	60a5      	strpl	r5, [r4, #8]
 8004022:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004024:	f015 0501 	ands.w	r5, r5, #1
 8004028:	d115      	bne.n	8004056 <setvbuf+0x176>
 800402a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800402e:	e7c8      	b.n	8003fc2 <setvbuf+0xe2>
 8004030:	4648      	mov	r0, r9
 8004032:	f000 fafb 	bl	800462c <malloc>
 8004036:	4606      	mov	r6, r0
 8004038:	2800      	cmp	r0, #0
 800403a:	d0ae      	beq.n	8003f9a <setvbuf+0xba>
 800403c:	464d      	mov	r5, r9
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004044:	81a3      	strh	r3, [r4, #12]
 8004046:	e7d0      	b.n	8003fea <setvbuf+0x10a>
 8004048:	2500      	movs	r5, #0
 800404a:	e7a8      	b.n	8003f9e <setvbuf+0xbe>
 800404c:	60a3      	str	r3, [r4, #8]
 800404e:	e7e8      	b.n	8004022 <setvbuf+0x142>
 8004050:	f04f 35ff 	mov.w	r5, #4294967295
 8004054:	e7b9      	b.n	8003fca <setvbuf+0xea>
 8004056:	2500      	movs	r5, #0
 8004058:	e7b7      	b.n	8003fca <setvbuf+0xea>
 800405a:	bf00      	nop
 800405c:	2000003c 	.word	0x2000003c
 8004060:	08004a5c 	.word	0x08004a5c
 8004064:	08004a7c 	.word	0x08004a7c
 8004068:	08004a3c 	.word	0x08004a3c

0800406c <__swbuf_r>:
 800406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406e:	460e      	mov	r6, r1
 8004070:	4614      	mov	r4, r2
 8004072:	4605      	mov	r5, r0
 8004074:	b118      	cbz	r0, 800407e <__swbuf_r+0x12>
 8004076:	6983      	ldr	r3, [r0, #24]
 8004078:	b90b      	cbnz	r3, 800407e <__swbuf_r+0x12>
 800407a:	f000 f9d1 	bl	8004420 <__sinit>
 800407e:	4b21      	ldr	r3, [pc, #132]	; (8004104 <__swbuf_r+0x98>)
 8004080:	429c      	cmp	r4, r3
 8004082:	d12b      	bne.n	80040dc <__swbuf_r+0x70>
 8004084:	686c      	ldr	r4, [r5, #4]
 8004086:	69a3      	ldr	r3, [r4, #24]
 8004088:	60a3      	str	r3, [r4, #8]
 800408a:	89a3      	ldrh	r3, [r4, #12]
 800408c:	071a      	lsls	r2, r3, #28
 800408e:	d52f      	bpl.n	80040f0 <__swbuf_r+0x84>
 8004090:	6923      	ldr	r3, [r4, #16]
 8004092:	b36b      	cbz	r3, 80040f0 <__swbuf_r+0x84>
 8004094:	6923      	ldr	r3, [r4, #16]
 8004096:	6820      	ldr	r0, [r4, #0]
 8004098:	1ac0      	subs	r0, r0, r3
 800409a:	6963      	ldr	r3, [r4, #20]
 800409c:	b2f6      	uxtb	r6, r6
 800409e:	4283      	cmp	r3, r0
 80040a0:	4637      	mov	r7, r6
 80040a2:	dc04      	bgt.n	80040ae <__swbuf_r+0x42>
 80040a4:	4621      	mov	r1, r4
 80040a6:	4628      	mov	r0, r5
 80040a8:	f000 f926 	bl	80042f8 <_fflush_r>
 80040ac:	bb30      	cbnz	r0, 80040fc <__swbuf_r+0x90>
 80040ae:	68a3      	ldr	r3, [r4, #8]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	60a3      	str	r3, [r4, #8]
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	6022      	str	r2, [r4, #0]
 80040ba:	701e      	strb	r6, [r3, #0]
 80040bc:	6963      	ldr	r3, [r4, #20]
 80040be:	3001      	adds	r0, #1
 80040c0:	4283      	cmp	r3, r0
 80040c2:	d004      	beq.n	80040ce <__swbuf_r+0x62>
 80040c4:	89a3      	ldrh	r3, [r4, #12]
 80040c6:	07db      	lsls	r3, r3, #31
 80040c8:	d506      	bpl.n	80040d8 <__swbuf_r+0x6c>
 80040ca:	2e0a      	cmp	r6, #10
 80040cc:	d104      	bne.n	80040d8 <__swbuf_r+0x6c>
 80040ce:	4621      	mov	r1, r4
 80040d0:	4628      	mov	r0, r5
 80040d2:	f000 f911 	bl	80042f8 <_fflush_r>
 80040d6:	b988      	cbnz	r0, 80040fc <__swbuf_r+0x90>
 80040d8:	4638      	mov	r0, r7
 80040da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <__swbuf_r+0x9c>)
 80040de:	429c      	cmp	r4, r3
 80040e0:	d101      	bne.n	80040e6 <__swbuf_r+0x7a>
 80040e2:	68ac      	ldr	r4, [r5, #8]
 80040e4:	e7cf      	b.n	8004086 <__swbuf_r+0x1a>
 80040e6:	4b09      	ldr	r3, [pc, #36]	; (800410c <__swbuf_r+0xa0>)
 80040e8:	429c      	cmp	r4, r3
 80040ea:	bf08      	it	eq
 80040ec:	68ec      	ldreq	r4, [r5, #12]
 80040ee:	e7ca      	b.n	8004086 <__swbuf_r+0x1a>
 80040f0:	4621      	mov	r1, r4
 80040f2:	4628      	mov	r0, r5
 80040f4:	f000 f80c 	bl	8004110 <__swsetup_r>
 80040f8:	2800      	cmp	r0, #0
 80040fa:	d0cb      	beq.n	8004094 <__swbuf_r+0x28>
 80040fc:	f04f 37ff 	mov.w	r7, #4294967295
 8004100:	e7ea      	b.n	80040d8 <__swbuf_r+0x6c>
 8004102:	bf00      	nop
 8004104:	08004a5c 	.word	0x08004a5c
 8004108:	08004a7c 	.word	0x08004a7c
 800410c:	08004a3c 	.word	0x08004a3c

08004110 <__swsetup_r>:
 8004110:	4b32      	ldr	r3, [pc, #200]	; (80041dc <__swsetup_r+0xcc>)
 8004112:	b570      	push	{r4, r5, r6, lr}
 8004114:	681d      	ldr	r5, [r3, #0]
 8004116:	4606      	mov	r6, r0
 8004118:	460c      	mov	r4, r1
 800411a:	b125      	cbz	r5, 8004126 <__swsetup_r+0x16>
 800411c:	69ab      	ldr	r3, [r5, #24]
 800411e:	b913      	cbnz	r3, 8004126 <__swsetup_r+0x16>
 8004120:	4628      	mov	r0, r5
 8004122:	f000 f97d 	bl	8004420 <__sinit>
 8004126:	4b2e      	ldr	r3, [pc, #184]	; (80041e0 <__swsetup_r+0xd0>)
 8004128:	429c      	cmp	r4, r3
 800412a:	d10f      	bne.n	800414c <__swsetup_r+0x3c>
 800412c:	686c      	ldr	r4, [r5, #4]
 800412e:	89a3      	ldrh	r3, [r4, #12]
 8004130:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004134:	0719      	lsls	r1, r3, #28
 8004136:	d42c      	bmi.n	8004192 <__swsetup_r+0x82>
 8004138:	06dd      	lsls	r5, r3, #27
 800413a:	d411      	bmi.n	8004160 <__swsetup_r+0x50>
 800413c:	2309      	movs	r3, #9
 800413e:	6033      	str	r3, [r6, #0]
 8004140:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004144:	81a3      	strh	r3, [r4, #12]
 8004146:	f04f 30ff 	mov.w	r0, #4294967295
 800414a:	e03e      	b.n	80041ca <__swsetup_r+0xba>
 800414c:	4b25      	ldr	r3, [pc, #148]	; (80041e4 <__swsetup_r+0xd4>)
 800414e:	429c      	cmp	r4, r3
 8004150:	d101      	bne.n	8004156 <__swsetup_r+0x46>
 8004152:	68ac      	ldr	r4, [r5, #8]
 8004154:	e7eb      	b.n	800412e <__swsetup_r+0x1e>
 8004156:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <__swsetup_r+0xd8>)
 8004158:	429c      	cmp	r4, r3
 800415a:	bf08      	it	eq
 800415c:	68ec      	ldreq	r4, [r5, #12]
 800415e:	e7e6      	b.n	800412e <__swsetup_r+0x1e>
 8004160:	0758      	lsls	r0, r3, #29
 8004162:	d512      	bpl.n	800418a <__swsetup_r+0x7a>
 8004164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004166:	b141      	cbz	r1, 800417a <__swsetup_r+0x6a>
 8004168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800416c:	4299      	cmp	r1, r3
 800416e:	d002      	beq.n	8004176 <__swsetup_r+0x66>
 8004170:	4630      	mov	r0, r6
 8004172:	f000 fa63 	bl	800463c <_free_r>
 8004176:	2300      	movs	r3, #0
 8004178:	6363      	str	r3, [r4, #52]	; 0x34
 800417a:	89a3      	ldrh	r3, [r4, #12]
 800417c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004180:	81a3      	strh	r3, [r4, #12]
 8004182:	2300      	movs	r3, #0
 8004184:	6063      	str	r3, [r4, #4]
 8004186:	6923      	ldr	r3, [r4, #16]
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	89a3      	ldrh	r3, [r4, #12]
 800418c:	f043 0308 	orr.w	r3, r3, #8
 8004190:	81a3      	strh	r3, [r4, #12]
 8004192:	6923      	ldr	r3, [r4, #16]
 8004194:	b94b      	cbnz	r3, 80041aa <__swsetup_r+0x9a>
 8004196:	89a3      	ldrh	r3, [r4, #12]
 8004198:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800419c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a0:	d003      	beq.n	80041aa <__swsetup_r+0x9a>
 80041a2:	4621      	mov	r1, r4
 80041a4:	4630      	mov	r0, r6
 80041a6:	f000 fa01 	bl	80045ac <__smakebuf_r>
 80041aa:	89a0      	ldrh	r0, [r4, #12]
 80041ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041b0:	f010 0301 	ands.w	r3, r0, #1
 80041b4:	d00a      	beq.n	80041cc <__swsetup_r+0xbc>
 80041b6:	2300      	movs	r3, #0
 80041b8:	60a3      	str	r3, [r4, #8]
 80041ba:	6963      	ldr	r3, [r4, #20]
 80041bc:	425b      	negs	r3, r3
 80041be:	61a3      	str	r3, [r4, #24]
 80041c0:	6923      	ldr	r3, [r4, #16]
 80041c2:	b943      	cbnz	r3, 80041d6 <__swsetup_r+0xc6>
 80041c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80041c8:	d1ba      	bne.n	8004140 <__swsetup_r+0x30>
 80041ca:	bd70      	pop	{r4, r5, r6, pc}
 80041cc:	0781      	lsls	r1, r0, #30
 80041ce:	bf58      	it	pl
 80041d0:	6963      	ldrpl	r3, [r4, #20]
 80041d2:	60a3      	str	r3, [r4, #8]
 80041d4:	e7f4      	b.n	80041c0 <__swsetup_r+0xb0>
 80041d6:	2000      	movs	r0, #0
 80041d8:	e7f7      	b.n	80041ca <__swsetup_r+0xba>
 80041da:	bf00      	nop
 80041dc:	2000003c 	.word	0x2000003c
 80041e0:	08004a5c 	.word	0x08004a5c
 80041e4:	08004a7c 	.word	0x08004a7c
 80041e8:	08004a3c 	.word	0x08004a3c

080041ec <__sflush_r>:
 80041ec:	898a      	ldrh	r2, [r1, #12]
 80041ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f2:	4605      	mov	r5, r0
 80041f4:	0710      	lsls	r0, r2, #28
 80041f6:	460c      	mov	r4, r1
 80041f8:	d458      	bmi.n	80042ac <__sflush_r+0xc0>
 80041fa:	684b      	ldr	r3, [r1, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	dc05      	bgt.n	800420c <__sflush_r+0x20>
 8004200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	dc02      	bgt.n	800420c <__sflush_r+0x20>
 8004206:	2000      	movs	r0, #0
 8004208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800420c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800420e:	2e00      	cmp	r6, #0
 8004210:	d0f9      	beq.n	8004206 <__sflush_r+0x1a>
 8004212:	2300      	movs	r3, #0
 8004214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004218:	682f      	ldr	r7, [r5, #0]
 800421a:	602b      	str	r3, [r5, #0]
 800421c:	d032      	beq.n	8004284 <__sflush_r+0x98>
 800421e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004220:	89a3      	ldrh	r3, [r4, #12]
 8004222:	075a      	lsls	r2, r3, #29
 8004224:	d505      	bpl.n	8004232 <__sflush_r+0x46>
 8004226:	6863      	ldr	r3, [r4, #4]
 8004228:	1ac0      	subs	r0, r0, r3
 800422a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800422c:	b10b      	cbz	r3, 8004232 <__sflush_r+0x46>
 800422e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004230:	1ac0      	subs	r0, r0, r3
 8004232:	2300      	movs	r3, #0
 8004234:	4602      	mov	r2, r0
 8004236:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004238:	6a21      	ldr	r1, [r4, #32]
 800423a:	4628      	mov	r0, r5
 800423c:	47b0      	blx	r6
 800423e:	1c43      	adds	r3, r0, #1
 8004240:	89a3      	ldrh	r3, [r4, #12]
 8004242:	d106      	bne.n	8004252 <__sflush_r+0x66>
 8004244:	6829      	ldr	r1, [r5, #0]
 8004246:	291d      	cmp	r1, #29
 8004248:	d82c      	bhi.n	80042a4 <__sflush_r+0xb8>
 800424a:	4a2a      	ldr	r2, [pc, #168]	; (80042f4 <__sflush_r+0x108>)
 800424c:	40ca      	lsrs	r2, r1
 800424e:	07d6      	lsls	r6, r2, #31
 8004250:	d528      	bpl.n	80042a4 <__sflush_r+0xb8>
 8004252:	2200      	movs	r2, #0
 8004254:	6062      	str	r2, [r4, #4]
 8004256:	04d9      	lsls	r1, r3, #19
 8004258:	6922      	ldr	r2, [r4, #16]
 800425a:	6022      	str	r2, [r4, #0]
 800425c:	d504      	bpl.n	8004268 <__sflush_r+0x7c>
 800425e:	1c42      	adds	r2, r0, #1
 8004260:	d101      	bne.n	8004266 <__sflush_r+0x7a>
 8004262:	682b      	ldr	r3, [r5, #0]
 8004264:	b903      	cbnz	r3, 8004268 <__sflush_r+0x7c>
 8004266:	6560      	str	r0, [r4, #84]	; 0x54
 8004268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800426a:	602f      	str	r7, [r5, #0]
 800426c:	2900      	cmp	r1, #0
 800426e:	d0ca      	beq.n	8004206 <__sflush_r+0x1a>
 8004270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004274:	4299      	cmp	r1, r3
 8004276:	d002      	beq.n	800427e <__sflush_r+0x92>
 8004278:	4628      	mov	r0, r5
 800427a:	f000 f9df 	bl	800463c <_free_r>
 800427e:	2000      	movs	r0, #0
 8004280:	6360      	str	r0, [r4, #52]	; 0x34
 8004282:	e7c1      	b.n	8004208 <__sflush_r+0x1c>
 8004284:	6a21      	ldr	r1, [r4, #32]
 8004286:	2301      	movs	r3, #1
 8004288:	4628      	mov	r0, r5
 800428a:	47b0      	blx	r6
 800428c:	1c41      	adds	r1, r0, #1
 800428e:	d1c7      	bne.n	8004220 <__sflush_r+0x34>
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0c4      	beq.n	8004220 <__sflush_r+0x34>
 8004296:	2b1d      	cmp	r3, #29
 8004298:	d001      	beq.n	800429e <__sflush_r+0xb2>
 800429a:	2b16      	cmp	r3, #22
 800429c:	d101      	bne.n	80042a2 <__sflush_r+0xb6>
 800429e:	602f      	str	r7, [r5, #0]
 80042a0:	e7b1      	b.n	8004206 <__sflush_r+0x1a>
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042a8:	81a3      	strh	r3, [r4, #12]
 80042aa:	e7ad      	b.n	8004208 <__sflush_r+0x1c>
 80042ac:	690f      	ldr	r7, [r1, #16]
 80042ae:	2f00      	cmp	r7, #0
 80042b0:	d0a9      	beq.n	8004206 <__sflush_r+0x1a>
 80042b2:	0793      	lsls	r3, r2, #30
 80042b4:	680e      	ldr	r6, [r1, #0]
 80042b6:	bf08      	it	eq
 80042b8:	694b      	ldreq	r3, [r1, #20]
 80042ba:	600f      	str	r7, [r1, #0]
 80042bc:	bf18      	it	ne
 80042be:	2300      	movne	r3, #0
 80042c0:	eba6 0807 	sub.w	r8, r6, r7
 80042c4:	608b      	str	r3, [r1, #8]
 80042c6:	f1b8 0f00 	cmp.w	r8, #0
 80042ca:	dd9c      	ble.n	8004206 <__sflush_r+0x1a>
 80042cc:	6a21      	ldr	r1, [r4, #32]
 80042ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042d0:	4643      	mov	r3, r8
 80042d2:	463a      	mov	r2, r7
 80042d4:	4628      	mov	r0, r5
 80042d6:	47b0      	blx	r6
 80042d8:	2800      	cmp	r0, #0
 80042da:	dc06      	bgt.n	80042ea <__sflush_r+0xfe>
 80042dc:	89a3      	ldrh	r3, [r4, #12]
 80042de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042e2:	81a3      	strh	r3, [r4, #12]
 80042e4:	f04f 30ff 	mov.w	r0, #4294967295
 80042e8:	e78e      	b.n	8004208 <__sflush_r+0x1c>
 80042ea:	4407      	add	r7, r0
 80042ec:	eba8 0800 	sub.w	r8, r8, r0
 80042f0:	e7e9      	b.n	80042c6 <__sflush_r+0xda>
 80042f2:	bf00      	nop
 80042f4:	20400001 	.word	0x20400001

080042f8 <_fflush_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	690b      	ldr	r3, [r1, #16]
 80042fc:	4605      	mov	r5, r0
 80042fe:	460c      	mov	r4, r1
 8004300:	b913      	cbnz	r3, 8004308 <_fflush_r+0x10>
 8004302:	2500      	movs	r5, #0
 8004304:	4628      	mov	r0, r5
 8004306:	bd38      	pop	{r3, r4, r5, pc}
 8004308:	b118      	cbz	r0, 8004312 <_fflush_r+0x1a>
 800430a:	6983      	ldr	r3, [r0, #24]
 800430c:	b90b      	cbnz	r3, 8004312 <_fflush_r+0x1a>
 800430e:	f000 f887 	bl	8004420 <__sinit>
 8004312:	4b14      	ldr	r3, [pc, #80]	; (8004364 <_fflush_r+0x6c>)
 8004314:	429c      	cmp	r4, r3
 8004316:	d11b      	bne.n	8004350 <_fflush_r+0x58>
 8004318:	686c      	ldr	r4, [r5, #4]
 800431a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0ef      	beq.n	8004302 <_fflush_r+0xa>
 8004322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004324:	07d0      	lsls	r0, r2, #31
 8004326:	d404      	bmi.n	8004332 <_fflush_r+0x3a>
 8004328:	0599      	lsls	r1, r3, #22
 800432a:	d402      	bmi.n	8004332 <_fflush_r+0x3a>
 800432c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800432e:	f000 f915 	bl	800455c <__retarget_lock_acquire_recursive>
 8004332:	4628      	mov	r0, r5
 8004334:	4621      	mov	r1, r4
 8004336:	f7ff ff59 	bl	80041ec <__sflush_r>
 800433a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800433c:	07da      	lsls	r2, r3, #31
 800433e:	4605      	mov	r5, r0
 8004340:	d4e0      	bmi.n	8004304 <_fflush_r+0xc>
 8004342:	89a3      	ldrh	r3, [r4, #12]
 8004344:	059b      	lsls	r3, r3, #22
 8004346:	d4dd      	bmi.n	8004304 <_fflush_r+0xc>
 8004348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800434a:	f000 f908 	bl	800455e <__retarget_lock_release_recursive>
 800434e:	e7d9      	b.n	8004304 <_fflush_r+0xc>
 8004350:	4b05      	ldr	r3, [pc, #20]	; (8004368 <_fflush_r+0x70>)
 8004352:	429c      	cmp	r4, r3
 8004354:	d101      	bne.n	800435a <_fflush_r+0x62>
 8004356:	68ac      	ldr	r4, [r5, #8]
 8004358:	e7df      	b.n	800431a <_fflush_r+0x22>
 800435a:	4b04      	ldr	r3, [pc, #16]	; (800436c <_fflush_r+0x74>)
 800435c:	429c      	cmp	r4, r3
 800435e:	bf08      	it	eq
 8004360:	68ec      	ldreq	r4, [r5, #12]
 8004362:	e7da      	b.n	800431a <_fflush_r+0x22>
 8004364:	08004a5c 	.word	0x08004a5c
 8004368:	08004a7c 	.word	0x08004a7c
 800436c:	08004a3c 	.word	0x08004a3c

08004370 <std>:
 8004370:	2300      	movs	r3, #0
 8004372:	b510      	push	{r4, lr}
 8004374:	4604      	mov	r4, r0
 8004376:	e9c0 3300 	strd	r3, r3, [r0]
 800437a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800437e:	6083      	str	r3, [r0, #8]
 8004380:	8181      	strh	r1, [r0, #12]
 8004382:	6643      	str	r3, [r0, #100]	; 0x64
 8004384:	81c2      	strh	r2, [r0, #14]
 8004386:	6183      	str	r3, [r0, #24]
 8004388:	4619      	mov	r1, r3
 800438a:	2208      	movs	r2, #8
 800438c:	305c      	adds	r0, #92	; 0x5c
 800438e:	f7ff fd21 	bl	8003dd4 <memset>
 8004392:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <std+0x38>)
 8004394:	6263      	str	r3, [r4, #36]	; 0x24
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <std+0x3c>)
 8004398:	62a3      	str	r3, [r4, #40]	; 0x28
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <std+0x40>)
 800439c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800439e:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <std+0x44>)
 80043a0:	6224      	str	r4, [r4, #32]
 80043a2:	6323      	str	r3, [r4, #48]	; 0x30
 80043a4:	bd10      	pop	{r4, pc}
 80043a6:	bf00      	nop
 80043a8:	0800481d 	.word	0x0800481d
 80043ac:	0800483f 	.word	0x0800483f
 80043b0:	08004877 	.word	0x08004877
 80043b4:	0800489b 	.word	0x0800489b

080043b8 <_cleanup_r>:
 80043b8:	4901      	ldr	r1, [pc, #4]	; (80043c0 <_cleanup_r+0x8>)
 80043ba:	f000 b8af 	b.w	800451c <_fwalk_reent>
 80043be:	bf00      	nop
 80043c0:	080042f9 	.word	0x080042f9

080043c4 <__sfmoreglue>:
 80043c4:	b570      	push	{r4, r5, r6, lr}
 80043c6:	2268      	movs	r2, #104	; 0x68
 80043c8:	1e4d      	subs	r5, r1, #1
 80043ca:	4355      	muls	r5, r2
 80043cc:	460e      	mov	r6, r1
 80043ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043d2:	f000 f99f 	bl	8004714 <_malloc_r>
 80043d6:	4604      	mov	r4, r0
 80043d8:	b140      	cbz	r0, 80043ec <__sfmoreglue+0x28>
 80043da:	2100      	movs	r1, #0
 80043dc:	e9c0 1600 	strd	r1, r6, [r0]
 80043e0:	300c      	adds	r0, #12
 80043e2:	60a0      	str	r0, [r4, #8]
 80043e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043e8:	f7ff fcf4 	bl	8003dd4 <memset>
 80043ec:	4620      	mov	r0, r4
 80043ee:	bd70      	pop	{r4, r5, r6, pc}

080043f0 <__sfp_lock_acquire>:
 80043f0:	4801      	ldr	r0, [pc, #4]	; (80043f8 <__sfp_lock_acquire+0x8>)
 80043f2:	f000 b8b3 	b.w	800455c <__retarget_lock_acquire_recursive>
 80043f6:	bf00      	nop
 80043f8:	200001c1 	.word	0x200001c1

080043fc <__sfp_lock_release>:
 80043fc:	4801      	ldr	r0, [pc, #4]	; (8004404 <__sfp_lock_release+0x8>)
 80043fe:	f000 b8ae 	b.w	800455e <__retarget_lock_release_recursive>
 8004402:	bf00      	nop
 8004404:	200001c1 	.word	0x200001c1

08004408 <__sinit_lock_acquire>:
 8004408:	4801      	ldr	r0, [pc, #4]	; (8004410 <__sinit_lock_acquire+0x8>)
 800440a:	f000 b8a7 	b.w	800455c <__retarget_lock_acquire_recursive>
 800440e:	bf00      	nop
 8004410:	200001c2 	.word	0x200001c2

08004414 <__sinit_lock_release>:
 8004414:	4801      	ldr	r0, [pc, #4]	; (800441c <__sinit_lock_release+0x8>)
 8004416:	f000 b8a2 	b.w	800455e <__retarget_lock_release_recursive>
 800441a:	bf00      	nop
 800441c:	200001c2 	.word	0x200001c2

08004420 <__sinit>:
 8004420:	b510      	push	{r4, lr}
 8004422:	4604      	mov	r4, r0
 8004424:	f7ff fff0 	bl	8004408 <__sinit_lock_acquire>
 8004428:	69a3      	ldr	r3, [r4, #24]
 800442a:	b11b      	cbz	r3, 8004434 <__sinit+0x14>
 800442c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004430:	f7ff bff0 	b.w	8004414 <__sinit_lock_release>
 8004434:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004438:	6523      	str	r3, [r4, #80]	; 0x50
 800443a:	4b13      	ldr	r3, [pc, #76]	; (8004488 <__sinit+0x68>)
 800443c:	4a13      	ldr	r2, [pc, #76]	; (800448c <__sinit+0x6c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	62a2      	str	r2, [r4, #40]	; 0x28
 8004442:	42a3      	cmp	r3, r4
 8004444:	bf04      	itt	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	61a3      	streq	r3, [r4, #24]
 800444a:	4620      	mov	r0, r4
 800444c:	f000 f820 	bl	8004490 <__sfp>
 8004450:	6060      	str	r0, [r4, #4]
 8004452:	4620      	mov	r0, r4
 8004454:	f000 f81c 	bl	8004490 <__sfp>
 8004458:	60a0      	str	r0, [r4, #8]
 800445a:	4620      	mov	r0, r4
 800445c:	f000 f818 	bl	8004490 <__sfp>
 8004460:	2200      	movs	r2, #0
 8004462:	60e0      	str	r0, [r4, #12]
 8004464:	2104      	movs	r1, #4
 8004466:	6860      	ldr	r0, [r4, #4]
 8004468:	f7ff ff82 	bl	8004370 <std>
 800446c:	68a0      	ldr	r0, [r4, #8]
 800446e:	2201      	movs	r2, #1
 8004470:	2109      	movs	r1, #9
 8004472:	f7ff ff7d 	bl	8004370 <std>
 8004476:	68e0      	ldr	r0, [r4, #12]
 8004478:	2202      	movs	r2, #2
 800447a:	2112      	movs	r1, #18
 800447c:	f7ff ff78 	bl	8004370 <std>
 8004480:	2301      	movs	r3, #1
 8004482:	61a3      	str	r3, [r4, #24]
 8004484:	e7d2      	b.n	800442c <__sinit+0xc>
 8004486:	bf00      	nop
 8004488:	08004a38 	.word	0x08004a38
 800448c:	080043b9 	.word	0x080043b9

08004490 <__sfp>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	4607      	mov	r7, r0
 8004494:	f7ff ffac 	bl	80043f0 <__sfp_lock_acquire>
 8004498:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <__sfp+0x84>)
 800449a:	681e      	ldr	r6, [r3, #0]
 800449c:	69b3      	ldr	r3, [r6, #24]
 800449e:	b913      	cbnz	r3, 80044a6 <__sfp+0x16>
 80044a0:	4630      	mov	r0, r6
 80044a2:	f7ff ffbd 	bl	8004420 <__sinit>
 80044a6:	3648      	adds	r6, #72	; 0x48
 80044a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	d503      	bpl.n	80044b8 <__sfp+0x28>
 80044b0:	6833      	ldr	r3, [r6, #0]
 80044b2:	b30b      	cbz	r3, 80044f8 <__sfp+0x68>
 80044b4:	6836      	ldr	r6, [r6, #0]
 80044b6:	e7f7      	b.n	80044a8 <__sfp+0x18>
 80044b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044bc:	b9d5      	cbnz	r5, 80044f4 <__sfp+0x64>
 80044be:	4b16      	ldr	r3, [pc, #88]	; (8004518 <__sfp+0x88>)
 80044c0:	60e3      	str	r3, [r4, #12]
 80044c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044c6:	6665      	str	r5, [r4, #100]	; 0x64
 80044c8:	f000 f847 	bl	800455a <__retarget_lock_init_recursive>
 80044cc:	f7ff ff96 	bl	80043fc <__sfp_lock_release>
 80044d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80044d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80044d8:	6025      	str	r5, [r4, #0]
 80044da:	61a5      	str	r5, [r4, #24]
 80044dc:	2208      	movs	r2, #8
 80044de:	4629      	mov	r1, r5
 80044e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044e4:	f7ff fc76 	bl	8003dd4 <memset>
 80044e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044f0:	4620      	mov	r0, r4
 80044f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f4:	3468      	adds	r4, #104	; 0x68
 80044f6:	e7d9      	b.n	80044ac <__sfp+0x1c>
 80044f8:	2104      	movs	r1, #4
 80044fa:	4638      	mov	r0, r7
 80044fc:	f7ff ff62 	bl	80043c4 <__sfmoreglue>
 8004500:	4604      	mov	r4, r0
 8004502:	6030      	str	r0, [r6, #0]
 8004504:	2800      	cmp	r0, #0
 8004506:	d1d5      	bne.n	80044b4 <__sfp+0x24>
 8004508:	f7ff ff78 	bl	80043fc <__sfp_lock_release>
 800450c:	230c      	movs	r3, #12
 800450e:	603b      	str	r3, [r7, #0]
 8004510:	e7ee      	b.n	80044f0 <__sfp+0x60>
 8004512:	bf00      	nop
 8004514:	08004a38 	.word	0x08004a38
 8004518:	ffff0001 	.word	0xffff0001

0800451c <_fwalk_reent>:
 800451c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004520:	4606      	mov	r6, r0
 8004522:	4688      	mov	r8, r1
 8004524:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004528:	2700      	movs	r7, #0
 800452a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800452e:	f1b9 0901 	subs.w	r9, r9, #1
 8004532:	d505      	bpl.n	8004540 <_fwalk_reent+0x24>
 8004534:	6824      	ldr	r4, [r4, #0]
 8004536:	2c00      	cmp	r4, #0
 8004538:	d1f7      	bne.n	800452a <_fwalk_reent+0xe>
 800453a:	4638      	mov	r0, r7
 800453c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004540:	89ab      	ldrh	r3, [r5, #12]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d907      	bls.n	8004556 <_fwalk_reent+0x3a>
 8004546:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800454a:	3301      	adds	r3, #1
 800454c:	d003      	beq.n	8004556 <_fwalk_reent+0x3a>
 800454e:	4629      	mov	r1, r5
 8004550:	4630      	mov	r0, r6
 8004552:	47c0      	blx	r8
 8004554:	4307      	orrs	r7, r0
 8004556:	3568      	adds	r5, #104	; 0x68
 8004558:	e7e9      	b.n	800452e <_fwalk_reent+0x12>

0800455a <__retarget_lock_init_recursive>:
 800455a:	4770      	bx	lr

0800455c <__retarget_lock_acquire_recursive>:
 800455c:	4770      	bx	lr

0800455e <__retarget_lock_release_recursive>:
 800455e:	4770      	bx	lr

08004560 <__swhatbuf_r>:
 8004560:	b570      	push	{r4, r5, r6, lr}
 8004562:	460e      	mov	r6, r1
 8004564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004568:	2900      	cmp	r1, #0
 800456a:	b096      	sub	sp, #88	; 0x58
 800456c:	4614      	mov	r4, r2
 800456e:	461d      	mov	r5, r3
 8004570:	da08      	bge.n	8004584 <__swhatbuf_r+0x24>
 8004572:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	602a      	str	r2, [r5, #0]
 800457a:	061a      	lsls	r2, r3, #24
 800457c:	d410      	bmi.n	80045a0 <__swhatbuf_r+0x40>
 800457e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004582:	e00e      	b.n	80045a2 <__swhatbuf_r+0x42>
 8004584:	466a      	mov	r2, sp
 8004586:	f000 f9af 	bl	80048e8 <_fstat_r>
 800458a:	2800      	cmp	r0, #0
 800458c:	dbf1      	blt.n	8004572 <__swhatbuf_r+0x12>
 800458e:	9a01      	ldr	r2, [sp, #4]
 8004590:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004594:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004598:	425a      	negs	r2, r3
 800459a:	415a      	adcs	r2, r3
 800459c:	602a      	str	r2, [r5, #0]
 800459e:	e7ee      	b.n	800457e <__swhatbuf_r+0x1e>
 80045a0:	2340      	movs	r3, #64	; 0x40
 80045a2:	2000      	movs	r0, #0
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	b016      	add	sp, #88	; 0x58
 80045a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080045ac <__smakebuf_r>:
 80045ac:	898b      	ldrh	r3, [r1, #12]
 80045ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045b0:	079d      	lsls	r5, r3, #30
 80045b2:	4606      	mov	r6, r0
 80045b4:	460c      	mov	r4, r1
 80045b6:	d507      	bpl.n	80045c8 <__smakebuf_r+0x1c>
 80045b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	6123      	str	r3, [r4, #16]
 80045c0:	2301      	movs	r3, #1
 80045c2:	6163      	str	r3, [r4, #20]
 80045c4:	b002      	add	sp, #8
 80045c6:	bd70      	pop	{r4, r5, r6, pc}
 80045c8:	ab01      	add	r3, sp, #4
 80045ca:	466a      	mov	r2, sp
 80045cc:	f7ff ffc8 	bl	8004560 <__swhatbuf_r>
 80045d0:	9900      	ldr	r1, [sp, #0]
 80045d2:	4605      	mov	r5, r0
 80045d4:	4630      	mov	r0, r6
 80045d6:	f000 f89d 	bl	8004714 <_malloc_r>
 80045da:	b948      	cbnz	r0, 80045f0 <__smakebuf_r+0x44>
 80045dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045e0:	059a      	lsls	r2, r3, #22
 80045e2:	d4ef      	bmi.n	80045c4 <__smakebuf_r+0x18>
 80045e4:	f023 0303 	bic.w	r3, r3, #3
 80045e8:	f043 0302 	orr.w	r3, r3, #2
 80045ec:	81a3      	strh	r3, [r4, #12]
 80045ee:	e7e3      	b.n	80045b8 <__smakebuf_r+0xc>
 80045f0:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <__smakebuf_r+0x7c>)
 80045f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80045f4:	89a3      	ldrh	r3, [r4, #12]
 80045f6:	6020      	str	r0, [r4, #0]
 80045f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045fc:	81a3      	strh	r3, [r4, #12]
 80045fe:	9b00      	ldr	r3, [sp, #0]
 8004600:	6163      	str	r3, [r4, #20]
 8004602:	9b01      	ldr	r3, [sp, #4]
 8004604:	6120      	str	r0, [r4, #16]
 8004606:	b15b      	cbz	r3, 8004620 <__smakebuf_r+0x74>
 8004608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800460c:	4630      	mov	r0, r6
 800460e:	f000 f97d 	bl	800490c <_isatty_r>
 8004612:	b128      	cbz	r0, 8004620 <__smakebuf_r+0x74>
 8004614:	89a3      	ldrh	r3, [r4, #12]
 8004616:	f023 0303 	bic.w	r3, r3, #3
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	81a3      	strh	r3, [r4, #12]
 8004620:	89a0      	ldrh	r0, [r4, #12]
 8004622:	4305      	orrs	r5, r0
 8004624:	81a5      	strh	r5, [r4, #12]
 8004626:	e7cd      	b.n	80045c4 <__smakebuf_r+0x18>
 8004628:	080043b9 	.word	0x080043b9

0800462c <malloc>:
 800462c:	4b02      	ldr	r3, [pc, #8]	; (8004638 <malloc+0xc>)
 800462e:	4601      	mov	r1, r0
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	f000 b86f 	b.w	8004714 <_malloc_r>
 8004636:	bf00      	nop
 8004638:	2000003c 	.word	0x2000003c

0800463c <_free_r>:
 800463c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800463e:	2900      	cmp	r1, #0
 8004640:	d044      	beq.n	80046cc <_free_r+0x90>
 8004642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004646:	9001      	str	r0, [sp, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f1a1 0404 	sub.w	r4, r1, #4
 800464e:	bfb8      	it	lt
 8004650:	18e4      	addlt	r4, r4, r3
 8004652:	f000 f97d 	bl	8004950 <__malloc_lock>
 8004656:	4a1e      	ldr	r2, [pc, #120]	; (80046d0 <_free_r+0x94>)
 8004658:	9801      	ldr	r0, [sp, #4]
 800465a:	6813      	ldr	r3, [r2, #0]
 800465c:	b933      	cbnz	r3, 800466c <_free_r+0x30>
 800465e:	6063      	str	r3, [r4, #4]
 8004660:	6014      	str	r4, [r2, #0]
 8004662:	b003      	add	sp, #12
 8004664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004668:	f000 b978 	b.w	800495c <__malloc_unlock>
 800466c:	42a3      	cmp	r3, r4
 800466e:	d908      	bls.n	8004682 <_free_r+0x46>
 8004670:	6825      	ldr	r5, [r4, #0]
 8004672:	1961      	adds	r1, r4, r5
 8004674:	428b      	cmp	r3, r1
 8004676:	bf01      	itttt	eq
 8004678:	6819      	ldreq	r1, [r3, #0]
 800467a:	685b      	ldreq	r3, [r3, #4]
 800467c:	1949      	addeq	r1, r1, r5
 800467e:	6021      	streq	r1, [r4, #0]
 8004680:	e7ed      	b.n	800465e <_free_r+0x22>
 8004682:	461a      	mov	r2, r3
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	b10b      	cbz	r3, 800468c <_free_r+0x50>
 8004688:	42a3      	cmp	r3, r4
 800468a:	d9fa      	bls.n	8004682 <_free_r+0x46>
 800468c:	6811      	ldr	r1, [r2, #0]
 800468e:	1855      	adds	r5, r2, r1
 8004690:	42a5      	cmp	r5, r4
 8004692:	d10b      	bne.n	80046ac <_free_r+0x70>
 8004694:	6824      	ldr	r4, [r4, #0]
 8004696:	4421      	add	r1, r4
 8004698:	1854      	adds	r4, r2, r1
 800469a:	42a3      	cmp	r3, r4
 800469c:	6011      	str	r1, [r2, #0]
 800469e:	d1e0      	bne.n	8004662 <_free_r+0x26>
 80046a0:	681c      	ldr	r4, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	6053      	str	r3, [r2, #4]
 80046a6:	4421      	add	r1, r4
 80046a8:	6011      	str	r1, [r2, #0]
 80046aa:	e7da      	b.n	8004662 <_free_r+0x26>
 80046ac:	d902      	bls.n	80046b4 <_free_r+0x78>
 80046ae:	230c      	movs	r3, #12
 80046b0:	6003      	str	r3, [r0, #0]
 80046b2:	e7d6      	b.n	8004662 <_free_r+0x26>
 80046b4:	6825      	ldr	r5, [r4, #0]
 80046b6:	1961      	adds	r1, r4, r5
 80046b8:	428b      	cmp	r3, r1
 80046ba:	bf04      	itt	eq
 80046bc:	6819      	ldreq	r1, [r3, #0]
 80046be:	685b      	ldreq	r3, [r3, #4]
 80046c0:	6063      	str	r3, [r4, #4]
 80046c2:	bf04      	itt	eq
 80046c4:	1949      	addeq	r1, r1, r5
 80046c6:	6021      	streq	r1, [r4, #0]
 80046c8:	6054      	str	r4, [r2, #4]
 80046ca:	e7ca      	b.n	8004662 <_free_r+0x26>
 80046cc:	b003      	add	sp, #12
 80046ce:	bd30      	pop	{r4, r5, pc}
 80046d0:	200001c4 	.word	0x200001c4

080046d4 <sbrk_aligned>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	4e0e      	ldr	r6, [pc, #56]	; (8004710 <sbrk_aligned+0x3c>)
 80046d8:	460c      	mov	r4, r1
 80046da:	6831      	ldr	r1, [r6, #0]
 80046dc:	4605      	mov	r5, r0
 80046de:	b911      	cbnz	r1, 80046e6 <sbrk_aligned+0x12>
 80046e0:	f000 f88c 	bl	80047fc <_sbrk_r>
 80046e4:	6030      	str	r0, [r6, #0]
 80046e6:	4621      	mov	r1, r4
 80046e8:	4628      	mov	r0, r5
 80046ea:	f000 f887 	bl	80047fc <_sbrk_r>
 80046ee:	1c43      	adds	r3, r0, #1
 80046f0:	d00a      	beq.n	8004708 <sbrk_aligned+0x34>
 80046f2:	1cc4      	adds	r4, r0, #3
 80046f4:	f024 0403 	bic.w	r4, r4, #3
 80046f8:	42a0      	cmp	r0, r4
 80046fa:	d007      	beq.n	800470c <sbrk_aligned+0x38>
 80046fc:	1a21      	subs	r1, r4, r0
 80046fe:	4628      	mov	r0, r5
 8004700:	f000 f87c 	bl	80047fc <_sbrk_r>
 8004704:	3001      	adds	r0, #1
 8004706:	d101      	bne.n	800470c <sbrk_aligned+0x38>
 8004708:	f04f 34ff 	mov.w	r4, #4294967295
 800470c:	4620      	mov	r0, r4
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	200001c8 	.word	0x200001c8

08004714 <_malloc_r>:
 8004714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004718:	1ccd      	adds	r5, r1, #3
 800471a:	f025 0503 	bic.w	r5, r5, #3
 800471e:	3508      	adds	r5, #8
 8004720:	2d0c      	cmp	r5, #12
 8004722:	bf38      	it	cc
 8004724:	250c      	movcc	r5, #12
 8004726:	2d00      	cmp	r5, #0
 8004728:	4607      	mov	r7, r0
 800472a:	db01      	blt.n	8004730 <_malloc_r+0x1c>
 800472c:	42a9      	cmp	r1, r5
 800472e:	d905      	bls.n	800473c <_malloc_r+0x28>
 8004730:	230c      	movs	r3, #12
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	2600      	movs	r6, #0
 8004736:	4630      	mov	r0, r6
 8004738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800473c:	4e2e      	ldr	r6, [pc, #184]	; (80047f8 <_malloc_r+0xe4>)
 800473e:	f000 f907 	bl	8004950 <__malloc_lock>
 8004742:	6833      	ldr	r3, [r6, #0]
 8004744:	461c      	mov	r4, r3
 8004746:	bb34      	cbnz	r4, 8004796 <_malloc_r+0x82>
 8004748:	4629      	mov	r1, r5
 800474a:	4638      	mov	r0, r7
 800474c:	f7ff ffc2 	bl	80046d4 <sbrk_aligned>
 8004750:	1c43      	adds	r3, r0, #1
 8004752:	4604      	mov	r4, r0
 8004754:	d14d      	bne.n	80047f2 <_malloc_r+0xde>
 8004756:	6834      	ldr	r4, [r6, #0]
 8004758:	4626      	mov	r6, r4
 800475a:	2e00      	cmp	r6, #0
 800475c:	d140      	bne.n	80047e0 <_malloc_r+0xcc>
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	4631      	mov	r1, r6
 8004762:	4638      	mov	r0, r7
 8004764:	eb04 0803 	add.w	r8, r4, r3
 8004768:	f000 f848 	bl	80047fc <_sbrk_r>
 800476c:	4580      	cmp	r8, r0
 800476e:	d13a      	bne.n	80047e6 <_malloc_r+0xd2>
 8004770:	6821      	ldr	r1, [r4, #0]
 8004772:	3503      	adds	r5, #3
 8004774:	1a6d      	subs	r5, r5, r1
 8004776:	f025 0503 	bic.w	r5, r5, #3
 800477a:	3508      	adds	r5, #8
 800477c:	2d0c      	cmp	r5, #12
 800477e:	bf38      	it	cc
 8004780:	250c      	movcc	r5, #12
 8004782:	4629      	mov	r1, r5
 8004784:	4638      	mov	r0, r7
 8004786:	f7ff ffa5 	bl	80046d4 <sbrk_aligned>
 800478a:	3001      	adds	r0, #1
 800478c:	d02b      	beq.n	80047e6 <_malloc_r+0xd2>
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	442b      	add	r3, r5
 8004792:	6023      	str	r3, [r4, #0]
 8004794:	e00e      	b.n	80047b4 <_malloc_r+0xa0>
 8004796:	6822      	ldr	r2, [r4, #0]
 8004798:	1b52      	subs	r2, r2, r5
 800479a:	d41e      	bmi.n	80047da <_malloc_r+0xc6>
 800479c:	2a0b      	cmp	r2, #11
 800479e:	d916      	bls.n	80047ce <_malloc_r+0xba>
 80047a0:	1961      	adds	r1, r4, r5
 80047a2:	42a3      	cmp	r3, r4
 80047a4:	6025      	str	r5, [r4, #0]
 80047a6:	bf18      	it	ne
 80047a8:	6059      	strne	r1, [r3, #4]
 80047aa:	6863      	ldr	r3, [r4, #4]
 80047ac:	bf08      	it	eq
 80047ae:	6031      	streq	r1, [r6, #0]
 80047b0:	5162      	str	r2, [r4, r5]
 80047b2:	604b      	str	r3, [r1, #4]
 80047b4:	4638      	mov	r0, r7
 80047b6:	f104 060b 	add.w	r6, r4, #11
 80047ba:	f000 f8cf 	bl	800495c <__malloc_unlock>
 80047be:	f026 0607 	bic.w	r6, r6, #7
 80047c2:	1d23      	adds	r3, r4, #4
 80047c4:	1af2      	subs	r2, r6, r3
 80047c6:	d0b6      	beq.n	8004736 <_malloc_r+0x22>
 80047c8:	1b9b      	subs	r3, r3, r6
 80047ca:	50a3      	str	r3, [r4, r2]
 80047cc:	e7b3      	b.n	8004736 <_malloc_r+0x22>
 80047ce:	6862      	ldr	r2, [r4, #4]
 80047d0:	42a3      	cmp	r3, r4
 80047d2:	bf0c      	ite	eq
 80047d4:	6032      	streq	r2, [r6, #0]
 80047d6:	605a      	strne	r2, [r3, #4]
 80047d8:	e7ec      	b.n	80047b4 <_malloc_r+0xa0>
 80047da:	4623      	mov	r3, r4
 80047dc:	6864      	ldr	r4, [r4, #4]
 80047de:	e7b2      	b.n	8004746 <_malloc_r+0x32>
 80047e0:	4634      	mov	r4, r6
 80047e2:	6876      	ldr	r6, [r6, #4]
 80047e4:	e7b9      	b.n	800475a <_malloc_r+0x46>
 80047e6:	230c      	movs	r3, #12
 80047e8:	603b      	str	r3, [r7, #0]
 80047ea:	4638      	mov	r0, r7
 80047ec:	f000 f8b6 	bl	800495c <__malloc_unlock>
 80047f0:	e7a1      	b.n	8004736 <_malloc_r+0x22>
 80047f2:	6025      	str	r5, [r4, #0]
 80047f4:	e7de      	b.n	80047b4 <_malloc_r+0xa0>
 80047f6:	bf00      	nop
 80047f8:	200001c4 	.word	0x200001c4

080047fc <_sbrk_r>:
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	4d06      	ldr	r5, [pc, #24]	; (8004818 <_sbrk_r+0x1c>)
 8004800:	2300      	movs	r3, #0
 8004802:	4604      	mov	r4, r0
 8004804:	4608      	mov	r0, r1
 8004806:	602b      	str	r3, [r5, #0]
 8004808:	f7fc fb14 	bl	8000e34 <_sbrk>
 800480c:	1c43      	adds	r3, r0, #1
 800480e:	d102      	bne.n	8004816 <_sbrk_r+0x1a>
 8004810:	682b      	ldr	r3, [r5, #0]
 8004812:	b103      	cbz	r3, 8004816 <_sbrk_r+0x1a>
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	bd38      	pop	{r3, r4, r5, pc}
 8004818:	200001cc 	.word	0x200001cc

0800481c <__sread>:
 800481c:	b510      	push	{r4, lr}
 800481e:	460c      	mov	r4, r1
 8004820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004824:	f000 f8a0 	bl	8004968 <_read_r>
 8004828:	2800      	cmp	r0, #0
 800482a:	bfab      	itete	ge
 800482c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800482e:	89a3      	ldrhlt	r3, [r4, #12]
 8004830:	181b      	addge	r3, r3, r0
 8004832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004836:	bfac      	ite	ge
 8004838:	6563      	strge	r3, [r4, #84]	; 0x54
 800483a:	81a3      	strhlt	r3, [r4, #12]
 800483c:	bd10      	pop	{r4, pc}

0800483e <__swrite>:
 800483e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004842:	461f      	mov	r7, r3
 8004844:	898b      	ldrh	r3, [r1, #12]
 8004846:	05db      	lsls	r3, r3, #23
 8004848:	4605      	mov	r5, r0
 800484a:	460c      	mov	r4, r1
 800484c:	4616      	mov	r6, r2
 800484e:	d505      	bpl.n	800485c <__swrite+0x1e>
 8004850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004854:	2302      	movs	r3, #2
 8004856:	2200      	movs	r2, #0
 8004858:	f000 f868 	bl	800492c <_lseek_r>
 800485c:	89a3      	ldrh	r3, [r4, #12]
 800485e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004866:	81a3      	strh	r3, [r4, #12]
 8004868:	4632      	mov	r2, r6
 800486a:	463b      	mov	r3, r7
 800486c:	4628      	mov	r0, r5
 800486e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004872:	f000 b817 	b.w	80048a4 <_write_r>

08004876 <__sseek>:
 8004876:	b510      	push	{r4, lr}
 8004878:	460c      	mov	r4, r1
 800487a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800487e:	f000 f855 	bl	800492c <_lseek_r>
 8004882:	1c43      	adds	r3, r0, #1
 8004884:	89a3      	ldrh	r3, [r4, #12]
 8004886:	bf15      	itete	ne
 8004888:	6560      	strne	r0, [r4, #84]	; 0x54
 800488a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800488e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004892:	81a3      	strheq	r3, [r4, #12]
 8004894:	bf18      	it	ne
 8004896:	81a3      	strhne	r3, [r4, #12]
 8004898:	bd10      	pop	{r4, pc}

0800489a <__sclose>:
 800489a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800489e:	f000 b813 	b.w	80048c8 <_close_r>
	...

080048a4 <_write_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	4d07      	ldr	r5, [pc, #28]	; (80048c4 <_write_r+0x20>)
 80048a8:	4604      	mov	r4, r0
 80048aa:	4608      	mov	r0, r1
 80048ac:	4611      	mov	r1, r2
 80048ae:	2200      	movs	r2, #0
 80048b0:	602a      	str	r2, [r5, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	f7fb fe32 	bl	800051c <_write>
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	d102      	bne.n	80048c2 <_write_r+0x1e>
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	b103      	cbz	r3, 80048c2 <_write_r+0x1e>
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	bd38      	pop	{r3, r4, r5, pc}
 80048c4:	200001cc 	.word	0x200001cc

080048c8 <_close_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4d06      	ldr	r5, [pc, #24]	; (80048e4 <_close_r+0x1c>)
 80048cc:	2300      	movs	r3, #0
 80048ce:	4604      	mov	r4, r0
 80048d0:	4608      	mov	r0, r1
 80048d2:	602b      	str	r3, [r5, #0]
 80048d4:	f7fc fa79 	bl	8000dca <_close>
 80048d8:	1c43      	adds	r3, r0, #1
 80048da:	d102      	bne.n	80048e2 <_close_r+0x1a>
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	b103      	cbz	r3, 80048e2 <_close_r+0x1a>
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	200001cc 	.word	0x200001cc

080048e8 <_fstat_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	4d07      	ldr	r5, [pc, #28]	; (8004908 <_fstat_r+0x20>)
 80048ec:	2300      	movs	r3, #0
 80048ee:	4604      	mov	r4, r0
 80048f0:	4608      	mov	r0, r1
 80048f2:	4611      	mov	r1, r2
 80048f4:	602b      	str	r3, [r5, #0]
 80048f6:	f7fc fa74 	bl	8000de2 <_fstat>
 80048fa:	1c43      	adds	r3, r0, #1
 80048fc:	d102      	bne.n	8004904 <_fstat_r+0x1c>
 80048fe:	682b      	ldr	r3, [r5, #0]
 8004900:	b103      	cbz	r3, 8004904 <_fstat_r+0x1c>
 8004902:	6023      	str	r3, [r4, #0]
 8004904:	bd38      	pop	{r3, r4, r5, pc}
 8004906:	bf00      	nop
 8004908:	200001cc 	.word	0x200001cc

0800490c <_isatty_r>:
 800490c:	b538      	push	{r3, r4, r5, lr}
 800490e:	4d06      	ldr	r5, [pc, #24]	; (8004928 <_isatty_r+0x1c>)
 8004910:	2300      	movs	r3, #0
 8004912:	4604      	mov	r4, r0
 8004914:	4608      	mov	r0, r1
 8004916:	602b      	str	r3, [r5, #0]
 8004918:	f7fc fa73 	bl	8000e02 <_isatty>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_isatty_r+0x1a>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	b103      	cbz	r3, 8004926 <_isatty_r+0x1a>
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	200001cc 	.word	0x200001cc

0800492c <_lseek_r>:
 800492c:	b538      	push	{r3, r4, r5, lr}
 800492e:	4d07      	ldr	r5, [pc, #28]	; (800494c <_lseek_r+0x20>)
 8004930:	4604      	mov	r4, r0
 8004932:	4608      	mov	r0, r1
 8004934:	4611      	mov	r1, r2
 8004936:	2200      	movs	r2, #0
 8004938:	602a      	str	r2, [r5, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	f7fc fa6c 	bl	8000e18 <_lseek>
 8004940:	1c43      	adds	r3, r0, #1
 8004942:	d102      	bne.n	800494a <_lseek_r+0x1e>
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	b103      	cbz	r3, 800494a <_lseek_r+0x1e>
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	bd38      	pop	{r3, r4, r5, pc}
 800494c:	200001cc 	.word	0x200001cc

08004950 <__malloc_lock>:
 8004950:	4801      	ldr	r0, [pc, #4]	; (8004958 <__malloc_lock+0x8>)
 8004952:	f7ff be03 	b.w	800455c <__retarget_lock_acquire_recursive>
 8004956:	bf00      	nop
 8004958:	200001c0 	.word	0x200001c0

0800495c <__malloc_unlock>:
 800495c:	4801      	ldr	r0, [pc, #4]	; (8004964 <__malloc_unlock+0x8>)
 800495e:	f7ff bdfe 	b.w	800455e <__retarget_lock_release_recursive>
 8004962:	bf00      	nop
 8004964:	200001c0 	.word	0x200001c0

08004968 <_read_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	4d07      	ldr	r5, [pc, #28]	; (8004988 <_read_r+0x20>)
 800496c:	4604      	mov	r4, r0
 800496e:	4608      	mov	r0, r1
 8004970:	4611      	mov	r1, r2
 8004972:	2200      	movs	r2, #0
 8004974:	602a      	str	r2, [r5, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	f7fc fa0a 	bl	8000d90 <_read>
 800497c:	1c43      	adds	r3, r0, #1
 800497e:	d102      	bne.n	8004986 <_read_r+0x1e>
 8004980:	682b      	ldr	r3, [r5, #0]
 8004982:	b103      	cbz	r3, 8004986 <_read_r+0x1e>
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	bd38      	pop	{r3, r4, r5, pc}
 8004988:	200001cc 	.word	0x200001cc

0800498c <_init>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	bf00      	nop
 8004990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004992:	bc08      	pop	{r3}
 8004994:	469e      	mov	lr, r3
 8004996:	4770      	bx	lr

08004998 <_fini>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	bf00      	nop
 800499c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499e:	bc08      	pop	{r3}
 80049a0:	469e      	mov	lr, r3
 80049a2:	4770      	bx	lr
