
TestController2v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000535c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800553c  0800553c  0001553c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056d0  080056d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080056d0  080056d0  000156d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056d8  080056d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056d8  080056d8  000156d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056dc  080056dc  000156dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000070  08005750  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08005750  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff1e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb2  00000000  00000000  0002ffbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00031f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  00032ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e41d  00000000  00000000  00033718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e144  00000000  00000000  00051b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd613  00000000  00000000  0005fc79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d28c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aec  00000000  00000000  0011d2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005524 	.word	0x08005524

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005524 	.word	0x08005524

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	230a      	movs	r3, #10
 80005d6:	68b9      	ldr	r1, [r7, #8]
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <_write+0x24>)
 80005da:	f003 f87d 	bl	80036d8 <HAL_UART_Transmit>
	return len;
 80005de:	687b      	ldr	r3, [r7, #4]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000f0 	.word	0x200000f0

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fe96 	bl	8001322 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 fadb 	bl	8000bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fc19 	bl	8000e30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 fbc1 	bl	8000d84 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000602:	f000 fb21 	bl	8000c48 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t TxData[1];
  uint8_t _TxData = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	76bb      	strb	r3, [r7, #26]

  printf("Initialized\r\n");
 800060a:	48bf      	ldr	r0, [pc, #764]	; (8000908 <main+0x31c>)
 800060c:	f003 ff36 	bl	800447c <puts>
  uint8_t Flag1 = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	77fb      	strb	r3, [r7, #31]
  uint8_t Flag2 = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	77bb      	strb	r3, [r7, #30]
  uint8_t FlagL = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	777b      	strb	r3, [r7, #29]
  uint8_t FlagR = 1;
 800061c:	2301      	movs	r3, #1
 800061e:	773b      	strb	r3, [r7, #28]
  GPIO_PinState _inputs[11]={};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	f8c3 2007 	str.w	r2, [r3, #7]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  GPIO_PinState inputs[11]={
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0),
 800062e:	2101      	movs	r1, #1
 8000630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000634:	f002 f820 	bl	8002678 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 800063a:	703b      	strb	r3, [r7, #0]
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1),
 800063c:	2102      	movs	r1, #2
 800063e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000642:	f002 f819 	bl	8002678 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 8000648:	707b      	strb	r3, [r7, #1]
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4),
 800064a:	2110      	movs	r1, #16
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f002 f812 	bl	8002678 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 8000656:	70bb      	strb	r3, [r7, #2]
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5),
 8000658:	2120      	movs	r1, #32
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f002 f80b 	bl	8002678 <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 8000664:	70fb      	strb	r3, [r7, #3]
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6),
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066c:	f002 f804 	bl	8002678 <HAL_GPIO_ReadPin>
 8000670:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 8000672:	713b      	strb	r3, [r7, #4]
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7),
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f001 fffd 	bl	8002678 <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 8000680:	717b      	strb	r3, [r7, #5]
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8),
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f001 fff5 	bl	8002678 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 8000690:	71bb      	strb	r3, [r7, #6]
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9),
 8000692:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069a:	f001 ffed 	bl	8002678 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 80006a0:	71fb      	strb	r3, [r7, #7]
			  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10),
 80006a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 ffe5 	bl	8002678 <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 80006b0:	723b      	strb	r3, [r7, #8]
			  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0),
 80006b2:	2101      	movs	r1, #1
 80006b4:	4895      	ldr	r0, [pc, #596]	; (800090c <main+0x320>)
 80006b6:	f001 ffdf 	bl	8002678 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 80006bc:	727b      	strb	r3, [r7, #9]
			  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)
 80006be:	2120      	movs	r1, #32
 80006c0:	4892      	ldr	r0, [pc, #584]	; (800090c <main+0x320>)
 80006c2:	f001 ffd9 	bl	8002678 <HAL_GPIO_ReadPin>
 80006c6:	4603      	mov	r3, r0
	  GPIO_PinState inputs[11]={
 80006c8:	72bb      	strb	r3, [r7, #10]

	  };

	  for(uint8_t i=0; i<11; i++){
 80006ca:	2300      	movs	r3, #0
 80006cc:	76fb      	strb	r3, [r7, #27]
 80006ce:	e252      	b.n	8000b76 <main+0x58a>
		  if(inputs[i] != _inputs[i]){
 80006d0:	7efb      	ldrb	r3, [r7, #27]
 80006d2:	3320      	adds	r3, #32
 80006d4:	443b      	add	r3, r7
 80006d6:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 80006da:	7efb      	ldrb	r3, [r7, #27]
 80006dc:	3320      	adds	r3, #32
 80006de:	443b      	add	r3, r7
 80006e0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	f000 8224 	beq.w	8000b32 <main+0x546>
			  switch(i){
 80006ea:	7efb      	ldrb	r3, [r7, #27]
 80006ec:	2b0a      	cmp	r3, #10
 80006ee:	f200 8235 	bhi.w	8000b5c <main+0x570>
 80006f2:	a201      	add	r2, pc, #4	; (adr r2, 80006f8 <main+0x10c>)
 80006f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f8:	08000725 	.word	0x08000725
 80006fc:	0800075f 	.word	0x0800075f
 8000700:	080007d9 	.word	0x080007d9
 8000704:	08000853 	.word	0x08000853
 8000708:	08000891 	.word	0x08000891
 800070c:	080008e5 	.word	0x080008e5
 8000710:	08000969 	.word	0x08000969
 8000714:	080009e3 	.word	0x080009e3
 8000718:	08000a21 	.word	0x08000a21
 800071c:	08000a71 	.word	0x08000a71
 8000720:	08000ae5 	.word	0x08000ae5
			  case 0:
				  if(inputs[i]==GPIO_PIN_RESET){
 8000724:	7efb      	ldrb	r3, [r7, #27]
 8000726:	3320      	adds	r3, #32
 8000728:	443b      	add	r3, r7
 800072a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d111      	bne.n	8000756 <main+0x16a>
					  TxHeader.Identifier = CANID_CYL_SET;
 8000732:	4b77      	ldr	r3, [pc, #476]	; (8000910 <main+0x324>)
 8000734:	f44f 728a 	mov.w	r2, #276	; 0x114
 8000738:	601a      	str	r2, [r3, #0]
					  TxData[0] = 7;
 800073a:	2307      	movs	r3, #7
 800073c:	763b      	strb	r3, [r7, #24]
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 800073e:	f107 0318 	add.w	r3, r7, #24
 8000742:	461a      	mov	r2, r3
 8000744:	4972      	ldr	r1, [pc, #456]	; (8000910 <main+0x324>)
 8000746:	4873      	ldr	r0, [pc, #460]	; (8000914 <main+0x328>)
 8000748:	f001 f99b 	bl	8001a82 <HAL_FDCAN_AddMessageToTxFifoQ>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <main+0x16a>

							Error_Handler();
 8000752:	f000 fbf9 	bl	8000f48 <Error_Handler>
					  }
				  }
				  printf("Set\r\n");
 8000756:	4870      	ldr	r0, [pc, #448]	; (8000918 <main+0x32c>)
 8000758:	f003 fe90 	bl	800447c <puts>

				  break;
 800075c:	e1fe      	b.n	8000b5c <main+0x570>


			  case 1:
				  if(inputs[i]==GPIO_PIN_RESET){
 800075e:	7efb      	ldrb	r3, [r7, #27]
 8000760:	3320      	adds	r3, #32
 8000762:	443b      	add	r3, r7
 8000764:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d116      	bne.n	800079a <main+0x1ae>
					  TxHeader.Identifier = CANID_BAL_SPL_1;
 800076c:	4b68      	ldr	r3, [pc, #416]	; (8000910 <main+0x324>)
 800076e:	f240 121b 	movw	r2, #283	; 0x11b
 8000772:	601a      	str	r2, [r3, #0]
					  TxData[0] = 7;
 8000774:	2307      	movs	r3, #7
 8000776:	763b      	strb	r3, [r7, #24]
					  printf("BAL1 supply\r\n");
 8000778:	4868      	ldr	r0, [pc, #416]	; (800091c <main+0x330>)
 800077a:	f003 fe7f 	bl	800447c <puts>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	461a      	mov	r2, r3
 8000784:	4962      	ldr	r1, [pc, #392]	; (8000910 <main+0x324>)
 8000786:	4863      	ldr	r0, [pc, #396]	; (8000914 <main+0x328>)
 8000788:	f001 f97b 	bl	8001a82 <HAL_FDCAN_AddMessageToTxFifoQ>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	f000 81d1 	beq.w	8000b36 <main+0x54a>

							Error_Handler();
 8000794:	f000 fbd8 	bl	8000f48 <Error_Handler>

							Error_Handler();
					  }
				  }

				  break;
 8000798:	e1cd      	b.n	8000b36 <main+0x54a>
				  else if(inputs[i] == GPIO_PIN_SET) {
 800079a:	7efb      	ldrb	r3, [r7, #27]
 800079c:	3320      	adds	r3, #32
 800079e:	443b      	add	r3, r7
 80007a0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	f040 81c6 	bne.w	8000b36 <main+0x54a>
					  TxHeader.Identifier = CANID_BAL_SPL_1;
 80007aa:	4b59      	ldr	r3, [pc, #356]	; (8000910 <main+0x324>)
 80007ac:	f240 121b 	movw	r2, #283	; 0x11b
 80007b0:	601a      	str	r2, [r3, #0]
					  TxData[0] = 6;
 80007b2:	2306      	movs	r3, #6
 80007b4:	763b      	strb	r3, [r7, #24]
					  printf("BAL1 Stop\r\n");
 80007b6:	485a      	ldr	r0, [pc, #360]	; (8000920 <main+0x334>)
 80007b8:	f003 fe60 	bl	800447c <puts>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80007bc:	f107 0318 	add.w	r3, r7, #24
 80007c0:	461a      	mov	r2, r3
 80007c2:	4953      	ldr	r1, [pc, #332]	; (8000910 <main+0x324>)
 80007c4:	4853      	ldr	r0, [pc, #332]	; (8000914 <main+0x328>)
 80007c6:	f001 f95c 	bl	8001a82 <HAL_FDCAN_AddMessageToTxFifoQ>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	f000 81b2 	beq.w	8000b36 <main+0x54a>
							Error_Handler();
 80007d2:	f000 fbb9 	bl	8000f48 <Error_Handler>
				  break;
 80007d6:	e1ae      	b.n	8000b36 <main+0x54a>


			  case 2:
				  if(inputs[i]==GPIO_PIN_RESET){
 80007d8:	7efb      	ldrb	r3, [r7, #27]
 80007da:	3320      	adds	r3, #32
 80007dc:	443b      	add	r3, r7
 80007de:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d116      	bne.n	8000814 <main+0x228>
					  TxHeader.Identifier = CANID_BAL_SPL_2;
 80007e6:	4b4a      	ldr	r3, [pc, #296]	; (8000910 <main+0x324>)
 80007e8:	f44f 728e 	mov.w	r2, #284	; 0x11c
 80007ec:	601a      	str	r2, [r3, #0]
					  TxData[0] = 7;
 80007ee:	2307      	movs	r3, #7
 80007f0:	763b      	strb	r3, [r7, #24]
					  printf("BAL2 Supply\r\n");
 80007f2:	484c      	ldr	r0, [pc, #304]	; (8000924 <main+0x338>)
 80007f4:	f003 fe42 	bl	800447c <puts>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80007f8:	f107 0318 	add.w	r3, r7, #24
 80007fc:	461a      	mov	r2, r3
 80007fe:	4944      	ldr	r1, [pc, #272]	; (8000910 <main+0x324>)
 8000800:	4844      	ldr	r0, [pc, #272]	; (8000914 <main+0x328>)
 8000802:	f001 f93e 	bl	8001a82 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	f000 8196 	beq.w	8000b3a <main+0x54e>

							Error_Handler();
 800080e:	f000 fb9b 	bl	8000f48 <Error_Handler>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {

							Error_Handler();
					  }
				  }
				  break;
 8000812:	e192      	b.n	8000b3a <main+0x54e>
				  else if(inputs[i] == GPIO_PIN_SET) {
 8000814:	7efb      	ldrb	r3, [r7, #27]
 8000816:	3320      	adds	r3, #32
 8000818:	443b      	add	r3, r7
 800081a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800081e:	2b01      	cmp	r3, #1
 8000820:	f040 818b 	bne.w	8000b3a <main+0x54e>
					  TxHeader.Identifier = CANID_BAL_SPL_2;
 8000824:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <main+0x324>)
 8000826:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800082a:	601a      	str	r2, [r3, #0]
					  printf("BAL2 Stop\r\n");
 800082c:	483e      	ldr	r0, [pc, #248]	; (8000928 <main+0x33c>)
 800082e:	f003 fe25 	bl	800447c <puts>
					  TxData[0] = 6;
 8000832:	2306      	movs	r3, #6
 8000834:	763b      	strb	r3, [r7, #24]
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000836:	f107 0318 	add.w	r3, r7, #24
 800083a:	461a      	mov	r2, r3
 800083c:	4934      	ldr	r1, [pc, #208]	; (8000910 <main+0x324>)
 800083e:	4835      	ldr	r0, [pc, #212]	; (8000914 <main+0x328>)
 8000840:	f001 f91f 	bl	8001a82 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	f000 8177 	beq.w	8000b3a <main+0x54e>
							Error_Handler();
 800084c:	f000 fb7c 	bl	8000f48 <Error_Handler>
				  break;
 8000850:	e173      	b.n	8000b3a <main+0x54e>


			  case 3:
				  if(inputs[i]==GPIO_PIN_RESET){
 8000852:	7efb      	ldrb	r3, [r7, #27]
 8000854:	3320      	adds	r3, #32
 8000856:	443b      	add	r3, r7
 8000858:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800085c:	2b00      	cmp	r3, #0
 800085e:	f040 816e 	bne.w	8000b3e <main+0x552>
					  TxHeader.Identifier = CANID_CYL_PICK;
 8000862:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <main+0x324>)
 8000864:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000868:	601a      	str	r2, [r3, #0]
					  TxData[0] = 3;
 800086a:	2303      	movs	r3, #3
 800086c:	763b      	strb	r3, [r7, #24]

					  printf("Pick\r\n");
 800086e:	482f      	ldr	r0, [pc, #188]	; (800092c <main+0x340>)
 8000870:	f003 fe04 	bl	800447c <puts>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000874:	f107 0318 	add.w	r3, r7, #24
 8000878:	461a      	mov	r2, r3
 800087a:	4925      	ldr	r1, [pc, #148]	; (8000910 <main+0x324>)
 800087c:	4825      	ldr	r0, [pc, #148]	; (8000914 <main+0x328>)
 800087e:	f001 f900 	bl	8001a82 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	f000 815a 	beq.w	8000b3e <main+0x552>

							Error_Handler();
 800088a:	f000 fb5d 	bl	8000f48 <Error_Handler>
					  }
				  }
				  break;
 800088e:	e156      	b.n	8000b3e <main+0x552>


			  case 4:
				  if(inputs[i]==GPIO_PIN_RESET){
 8000890:	7efb      	ldrb	r3, [r7, #27]
 8000892:	3320      	adds	r3, #32
 8000894:	443b      	add	r3, r7
 8000896:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800089a:	2b00      	cmp	r3, #0
 800089c:	f040 8151 	bne.w	8000b42 <main+0x556>
					  TxHeader.Identifier = CANID_LED;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <main+0x324>)
 80008a2:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80008a6:	601a      	str	r2, [r3, #0]

					  if(FlagL==0)FlagL=1;
 80008a8:	7f7b      	ldrb	r3, [r7, #29]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d102      	bne.n	80008b4 <main+0x2c8>
 80008ae:	2301      	movs	r3, #1
 80008b0:	777b      	strb	r3, [r7, #29]
 80008b2:	e004      	b.n	80008be <main+0x2d2>
					  else if(FlagL==1)FlagL=0;
 80008b4:	7f7b      	ldrb	r3, [r7, #29]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d101      	bne.n	80008be <main+0x2d2>
 80008ba:	2300      	movs	r3, #0
 80008bc:	777b      	strb	r3, [r7, #29]

					  TxData[0] = FlagL;
 80008be:	7f7b      	ldrb	r3, [r7, #29]
 80008c0:	763b      	strb	r3, [r7, #24]
					  printf("LED\r\n");
 80008c2:	481b      	ldr	r0, [pc, #108]	; (8000930 <main+0x344>)
 80008c4:	f003 fdda 	bl	800447c <puts>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80008c8:	f107 0318 	add.w	r3, r7, #24
 80008cc:	461a      	mov	r2, r3
 80008ce:	4910      	ldr	r1, [pc, #64]	; (8000910 <main+0x324>)
 80008d0:	4810      	ldr	r0, [pc, #64]	; (8000914 <main+0x328>)
 80008d2:	f001 f8d6 	bl	8001a82 <HAL_FDCAN_AddMessageToTxFifoQ>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	f000 8132 	beq.w	8000b42 <main+0x556>

							Error_Handler();
 80008de:	f000 fb33 	bl	8000f48 <Error_Handler>
					  }
				  }
				  break;
 80008e2:	e12e      	b.n	8000b42 <main+0x556>


			  case 5:
				  if(inputs[i]==GPIO_PIN_RESET){
 80008e4:	7efb      	ldrb	r3, [r7, #27]
 80008e6:	3320      	adds	r3, #32
 80008e8:	443b      	add	r3, r7
 80008ea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f040 8129 	bne.w	8000b46 <main+0x55a>
					  TxHeader.Identifier = CANID_CYL_RELEASE;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <main+0x324>)
 80008f6:	f240 1219 	movw	r2, #281	; 0x119
 80008fa:	601a      	str	r2, [r3, #0]

					  if(FlagR==1)FlagR=2;
 80008fc:	7f3b      	ldrb	r3, [r7, #28]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d118      	bne.n	8000934 <main+0x348>
 8000902:	2302      	movs	r3, #2
 8000904:	773b      	strb	r3, [r7, #28]
 8000906:	e01a      	b.n	800093e <main+0x352>
 8000908:	0800553c 	.word	0x0800553c
 800090c:	48000400 	.word	0x48000400
 8000910:	20000180 	.word	0x20000180
 8000914:	2000008c 	.word	0x2000008c
 8000918:	0800554c 	.word	0x0800554c
 800091c:	08005554 	.word	0x08005554
 8000920:	08005564 	.word	0x08005564
 8000924:	08005570 	.word	0x08005570
 8000928:	08005580 	.word	0x08005580
 800092c:	0800558c 	.word	0x0800558c
 8000930:	08005594 	.word	0x08005594
					  else if(FlagR==2)FlagR=1;
 8000934:	7f3b      	ldrb	r3, [r7, #28]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d101      	bne.n	800093e <main+0x352>
 800093a:	2301      	movs	r3, #1
 800093c:	773b      	strb	r3, [r7, #28]

					  TxData[0] = FlagR;
 800093e:	7f3b      	ldrb	r3, [r7, #28]
 8000940:	763b      	strb	r3, [r7, #24]
					  printf("Release%d\r\n", FlagR);
 8000942:	7f3b      	ldrb	r3, [r7, #28]
 8000944:	4619      	mov	r1, r3
 8000946:	4890      	ldr	r0, [pc, #576]	; (8000b88 <main+0x59c>)
 8000948:	f003 fd12 	bl	8004370 <iprintf>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 800094c:	f107 0318 	add.w	r3, r7, #24
 8000950:	461a      	mov	r2, r3
 8000952:	498e      	ldr	r1, [pc, #568]	; (8000b8c <main+0x5a0>)
 8000954:	488e      	ldr	r0, [pc, #568]	; (8000b90 <main+0x5a4>)
 8000956:	f001 f894 	bl	8001a82 <HAL_FDCAN_AddMessageToTxFifoQ>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	f000 80f2 	beq.w	8000b46 <main+0x55a>

							Error_Handler();
 8000962:	f000 faf1 	bl	8000f48 <Error_Handler>
					  }
				  }
				  break;
 8000966:	e0ee      	b.n	8000b46 <main+0x55a>


			  case 6:
				  if(inputs[i]==GPIO_PIN_RESET){
 8000968:	7efb      	ldrb	r3, [r7, #27]
 800096a:	3320      	adds	r3, #32
 800096c:	443b      	add	r3, r7
 800096e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d116      	bne.n	80009a4 <main+0x3b8>
					  TxHeader.Identifier = CANID_BAL_DSC_2;
 8000976:	4b85      	ldr	r3, [pc, #532]	; (8000b8c <main+0x5a0>)
 8000978:	f44f 728f 	mov.w	r2, #286	; 0x11e
 800097c:	601a      	str	r2, [r3, #0]
					  TxData[0] = 7;
 800097e:	2307      	movs	r3, #7
 8000980:	763b      	strb	r3, [r7, #24]

					  printf("BAL2 Discharge\r\n");
 8000982:	4884      	ldr	r0, [pc, #528]	; (8000b94 <main+0x5a8>)
 8000984:	f003 fd7a 	bl	800447c <puts>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	461a      	mov	r2, r3
 800098e:	497f      	ldr	r1, [pc, #508]	; (8000b8c <main+0x5a0>)
 8000990:	487f      	ldr	r0, [pc, #508]	; (8000b90 <main+0x5a4>)
 8000992:	f001 f876 	bl	8001a82 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 80d6 	beq.w	8000b4a <main+0x55e>

							Error_Handler();
 800099e:	f000 fad3 	bl	8000f48 <Error_Handler>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {

							Error_Handler();
					  }
				  }
				  break;
 80009a2:	e0d2      	b.n	8000b4a <main+0x55e>
				  else if(inputs[i] == GPIO_PIN_SET) {
 80009a4:	7efb      	ldrb	r3, [r7, #27]
 80009a6:	3320      	adds	r3, #32
 80009a8:	443b      	add	r3, r7
 80009aa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	f040 80cb 	bne.w	8000b4a <main+0x55e>
					  TxHeader.Identifier = CANID_BAL_DSC_2;
 80009b4:	4b75      	ldr	r3, [pc, #468]	; (8000b8c <main+0x5a0>)
 80009b6:	f44f 728f 	mov.w	r2, #286	; 0x11e
 80009ba:	601a      	str	r2, [r3, #0]
					  TxData[0] = 6;
 80009bc:	2306      	movs	r3, #6
 80009be:	763b      	strb	r3, [r7, #24]
					  printf("BAL2 Stop\r\n");
 80009c0:	4875      	ldr	r0, [pc, #468]	; (8000b98 <main+0x5ac>)
 80009c2:	f003 fd5b 	bl	800447c <puts>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80009c6:	f107 0318 	add.w	r3, r7, #24
 80009ca:	461a      	mov	r2, r3
 80009cc:	496f      	ldr	r1, [pc, #444]	; (8000b8c <main+0x5a0>)
 80009ce:	4870      	ldr	r0, [pc, #448]	; (8000b90 <main+0x5a4>)
 80009d0:	f001 f857 	bl	8001a82 <HAL_FDCAN_AddMessageToTxFifoQ>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 80b7 	beq.w	8000b4a <main+0x55e>
							Error_Handler();
 80009dc:	f000 fab4 	bl	8000f48 <Error_Handler>
				  break;
 80009e0:	e0b3      	b.n	8000b4a <main+0x55e>


			  case 7:
				  if(inputs[i]==GPIO_PIN_RESET){
 80009e2:	7efb      	ldrb	r3, [r7, #27]
 80009e4:	3320      	adds	r3, #32
 80009e6:	443b      	add	r3, r7
 80009e8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	f040 80ae 	bne.w	8000b4e <main+0x562>
					  TxHeader.Identifier = CANID_CYL_THROW;
 80009f2:	4b66      	ldr	r3, [pc, #408]	; (8000b8c <main+0x5a0>)
 80009f4:	f44f 7288 	mov.w	r2, #272	; 0x110
 80009f8:	601a      	str	r2, [r3, #0]
					  TxData[0] = 3;
 80009fa:	2303      	movs	r3, #3
 80009fc:	763b      	strb	r3, [r7, #24]
					  printf("Throw\r\n");
 80009fe:	4867      	ldr	r0, [pc, #412]	; (8000b9c <main+0x5b0>)
 8000a00:	f003 fd3c 	bl	800447c <puts>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000a04:	f107 0318 	add.w	r3, r7, #24
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4960      	ldr	r1, [pc, #384]	; (8000b8c <main+0x5a0>)
 8000a0c:	4860      	ldr	r0, [pc, #384]	; (8000b90 <main+0x5a4>)
 8000a0e:	f001 f838 	bl	8001a82 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f000 809a 	beq.w	8000b4e <main+0x562>

							Error_Handler();
 8000a1a:	f000 fa95 	bl	8000f48 <Error_Handler>
					  }
				  }
				  break;
 8000a1e:	e096      	b.n	8000b4e <main+0x562>


			  case 8:
				  if(inputs[i]==GPIO_PIN_RESET){
 8000a20:	7efb      	ldrb	r3, [r7, #27]
 8000a22:	3320      	adds	r3, #32
 8000a24:	443b      	add	r3, r7
 8000a26:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f040 8091 	bne.w	8000b52 <main+0x566>
					  TxHeader.Identifier = CANID_CYL_BLARM_2;
 8000a30:	4b56      	ldr	r3, [pc, #344]	; (8000b8c <main+0x5a0>)
 8000a32:	f240 1217 	movw	r2, #279	; 0x117
 8000a36:	601a      	str	r2, [r3, #0]
					  if(Flag2 == 1)Flag2=6;
 8000a38:	7fbb      	ldrb	r3, [r7, #30]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d102      	bne.n	8000a44 <main+0x458>
 8000a3e:	2306      	movs	r3, #6
 8000a40:	77bb      	strb	r3, [r7, #30]
 8000a42:	e001      	b.n	8000a48 <main+0x45c>
					  else Flag2=1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	77bb      	strb	r3, [r7, #30]

					  TxData[0] = Flag2;
 8000a48:	7fbb      	ldrb	r3, [r7, #30]
 8000a4a:	763b      	strb	r3, [r7, #24]

					  printf("Arm2-%d\r\n",Flag2);
 8000a4c:	7fbb      	ldrb	r3, [r7, #30]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4853      	ldr	r0, [pc, #332]	; (8000ba0 <main+0x5b4>)
 8000a52:	f003 fc8d 	bl	8004370 <iprintf>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000a56:	f107 0318 	add.w	r3, r7, #24
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	494b      	ldr	r1, [pc, #300]	; (8000b8c <main+0x5a0>)
 8000a5e:	484c      	ldr	r0, [pc, #304]	; (8000b90 <main+0x5a4>)
 8000a60:	f001 f80f 	bl	8001a82 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d073      	beq.n	8000b52 <main+0x566>

							Error_Handler();
 8000a6a:	f000 fa6d 	bl	8000f48 <Error_Handler>
					  }

				  }

				  break;
 8000a6e:	e070      	b.n	8000b52 <main+0x566>


			  case 9:
				  if(inputs[i]==GPIO_PIN_RESET){
 8000a70:	7efb      	ldrb	r3, [r7, #27]
 8000a72:	3320      	adds	r3, #32
 8000a74:	443b      	add	r3, r7
 8000a76:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d115      	bne.n	8000aaa <main+0x4be>
					  TxHeader.Identifier = CANID_BAL_DSC_1;
 8000a7e:	4b43      	ldr	r3, [pc, #268]	; (8000b8c <main+0x5a0>)
 8000a80:	f240 121d 	movw	r2, #285	; 0x11d
 8000a84:	601a      	str	r2, [r3, #0]
					  TxData[0] = 7;
 8000a86:	2307      	movs	r3, #7
 8000a88:	763b      	strb	r3, [r7, #24]

					  printf("BAL1 Discharge\r\n");
 8000a8a:	4846      	ldr	r0, [pc, #280]	; (8000ba4 <main+0x5b8>)
 8000a8c:	f003 fcf6 	bl	800447c <puts>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000a90:	f107 0318 	add.w	r3, r7, #24
 8000a94:	461a      	mov	r2, r3
 8000a96:	493d      	ldr	r1, [pc, #244]	; (8000b8c <main+0x5a0>)
 8000a98:	483d      	ldr	r0, [pc, #244]	; (8000b90 <main+0x5a4>)
 8000a9a:	f000 fff2 	bl	8001a82 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d058      	beq.n	8000b56 <main+0x56a>

							Error_Handler();
 8000aa4:	f000 fa50 	bl	8000f48 <Error_Handler>
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {

							Error_Handler();
					  }
				  }
				  break;
 8000aa8:	e055      	b.n	8000b56 <main+0x56a>
				  else if(inputs[i] == GPIO_PIN_SET) {
 8000aaa:	7efb      	ldrb	r3, [r7, #27]
 8000aac:	3320      	adds	r3, #32
 8000aae:	443b      	add	r3, r7
 8000ab0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d14e      	bne.n	8000b56 <main+0x56a>
					  printf("BAL1 Stop\r\n");
 8000ab8:	483b      	ldr	r0, [pc, #236]	; (8000ba8 <main+0x5bc>)
 8000aba:	f003 fcdf 	bl	800447c <puts>
					  TxHeader.Identifier = CANID_BAL_DSC_1;
 8000abe:	4b33      	ldr	r3, [pc, #204]	; (8000b8c <main+0x5a0>)
 8000ac0:	f240 121d 	movw	r2, #285	; 0x11d
 8000ac4:	601a      	str	r2, [r3, #0]
					  TxData[0] = 6;
 8000ac6:	2306      	movs	r3, #6
 8000ac8:	763b      	strb	r3, [r7, #24]
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000aca:	f107 0318 	add.w	r3, r7, #24
 8000ace:	461a      	mov	r2, r3
 8000ad0:	492e      	ldr	r1, [pc, #184]	; (8000b8c <main+0x5a0>)
 8000ad2:	482f      	ldr	r0, [pc, #188]	; (8000b90 <main+0x5a4>)
 8000ad4:	f000 ffd5 	bl	8001a82 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d03b      	beq.n	8000b56 <main+0x56a>
							Error_Handler();
 8000ade:	f000 fa33 	bl	8000f48 <Error_Handler>
				  break;
 8000ae2:	e038      	b.n	8000b56 <main+0x56a>


			  case 10:

				  if(inputs[i]==GPIO_PIN_RESET){
 8000ae4:	7efb      	ldrb	r3, [r7, #27]
 8000ae6:	3320      	adds	r3, #32
 8000ae8:	443b      	add	r3, r7
 8000aea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d133      	bne.n	8000b5a <main+0x56e>
					  TxHeader.Identifier = CANID_CYL_BLARM_1;
 8000af2:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <main+0x5a0>)
 8000af4:	f44f 728b 	mov.w	r2, #278	; 0x116
 8000af8:	601a      	str	r2, [r3, #0]
					  if(Flag1 == 1)Flag1=6;
 8000afa:	7ffb      	ldrb	r3, [r7, #31]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d102      	bne.n	8000b06 <main+0x51a>
 8000b00:	2306      	movs	r3, #6
 8000b02:	77fb      	strb	r3, [r7, #31]
 8000b04:	e001      	b.n	8000b0a <main+0x51e>
					  else Flag1=1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	77fb      	strb	r3, [r7, #31]
					  printf("arm1-%d\r\n",Flag1);
 8000b0a:	7ffb      	ldrb	r3, [r7, #31]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4827      	ldr	r0, [pc, #156]	; (8000bac <main+0x5c0>)
 8000b10:	f003 fc2e 	bl	8004370 <iprintf>

					  TxData[0] = Flag1;
 8000b14:	7ffb      	ldrb	r3, [r7, #31]
 8000b16:	763b      	strb	r3, [r7, #24]
					  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000b18:	f107 0318 	add.w	r3, r7, #24
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	491b      	ldr	r1, [pc, #108]	; (8000b8c <main+0x5a0>)
 8000b20:	481b      	ldr	r0, [pc, #108]	; (8000b90 <main+0x5a4>)
 8000b22:	f000 ffae 	bl	8001a82 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d016      	beq.n	8000b5a <main+0x56e>

							Error_Handler();
 8000b2c:	f000 fa0c 	bl	8000f48 <Error_Handler>
					  }

				  }
				  break;
 8000b30:	e013      	b.n	8000b5a <main+0x56e>
			  }
		  }
 8000b32:	bf00      	nop
 8000b34:	e012      	b.n	8000b5c <main+0x570>
				  break;
 8000b36:	bf00      	nop
 8000b38:	e010      	b.n	8000b5c <main+0x570>
				  break;
 8000b3a:	bf00      	nop
 8000b3c:	e00e      	b.n	8000b5c <main+0x570>
				  break;
 8000b3e:	bf00      	nop
 8000b40:	e00c      	b.n	8000b5c <main+0x570>
				  break;
 8000b42:	bf00      	nop
 8000b44:	e00a      	b.n	8000b5c <main+0x570>
				  break;
 8000b46:	bf00      	nop
 8000b48:	e008      	b.n	8000b5c <main+0x570>
				  break;
 8000b4a:	bf00      	nop
 8000b4c:	e006      	b.n	8000b5c <main+0x570>
				  break;
 8000b4e:	bf00      	nop
 8000b50:	e004      	b.n	8000b5c <main+0x570>
				  break;
 8000b52:	bf00      	nop
 8000b54:	e002      	b.n	8000b5c <main+0x570>
				  break;
 8000b56:	bf00      	nop
 8000b58:	e000      	b.n	8000b5c <main+0x570>
				  break;
 8000b5a:	bf00      	nop
		  _inputs[i] = inputs[i];
 8000b5c:	7efa      	ldrb	r2, [r7, #27]
 8000b5e:	7efb      	ldrb	r3, [r7, #27]
 8000b60:	3220      	adds	r2, #32
 8000b62:	443a      	add	r2, r7
 8000b64:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000b68:	3320      	adds	r3, #32
 8000b6a:	443b      	add	r3, r7
 8000b6c:	f803 2c14 	strb.w	r2, [r3, #-20]
	  for(uint8_t i=0; i<11; i++){
 8000b70:	7efb      	ldrb	r3, [r7, #27]
 8000b72:	3301      	adds	r3, #1
 8000b74:	76fb      	strb	r3, [r7, #27]
 8000b76:	7efb      	ldrb	r3, [r7, #27]
 8000b78:	2b0a      	cmp	r3, #10
 8000b7a:	f67f ada9 	bls.w	80006d0 <main+0xe4>

	  			Error_Handler();
	  		}
	  }*/

	  HAL_Delay(100);
 8000b7e:	2064      	movs	r0, #100	; 0x64
 8000b80:	f000 fc40 	bl	8001404 <HAL_Delay>
  {
 8000b84:	e553      	b.n	800062e <main+0x42>
 8000b86:	bf00      	nop
 8000b88:	0800559c 	.word	0x0800559c
 8000b8c:	20000180 	.word	0x20000180
 8000b90:	2000008c 	.word	0x2000008c
 8000b94:	080055a8 	.word	0x080055a8
 8000b98:	08005580 	.word	0x08005580
 8000b9c:	080055b8 	.word	0x080055b8
 8000ba0:	080055c0 	.word	0x080055c0
 8000ba4:	080055cc 	.word	0x080055cc
 8000ba8:	08005564 	.word	0x08005564
 8000bac:	080055dc 	.word	0x080055dc

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b094      	sub	sp, #80	; 0x50
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0318 	add.w	r3, r7, #24
 8000bba:	2238      	movs	r2, #56	; 0x38
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f003 fbce 	bl	8004360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bd6:	f001 fd67 	bl	80026a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be4:	2340      	movs	r3, #64	; 0x40
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be8:	2302      	movs	r3, #2
 8000bea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bec:	2302      	movs	r3, #2
 8000bee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bf4:	230a      	movs	r3, #10
 8000bf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 0318 	add.w	r3, r7, #24
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 fdf1 	bl	80027f0 <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000c14:	f000 f998 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c18:	230f      	movs	r3, #15
 8000c1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2102      	movs	r1, #2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f002 f8f5 	bl	8002e20 <HAL_RCC_ClockConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c3c:	f000 f984 	bl	8000f48 <Error_Handler>
  }
}
 8000c40:	bf00      	nop
 8000c42:	3750      	adds	r7, #80	; 0x50
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c4e:	4b4a      	ldr	r3, [pc, #296]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000c50:	4a4a      	ldr	r2, [pc, #296]	; (8000d7c <MX_FDCAN1_Init+0x134>)
 8000c52:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000c54:	4b48      	ldr	r3, [pc, #288]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c5a:	4b47      	ldr	r3, [pc, #284]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c60:	4b45      	ldr	r3, [pc, #276]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c66:	4b44      	ldr	r3, [pc, #272]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c6c:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c72:	4b41      	ldr	r3, [pc, #260]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000c78:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000c7a:	2205      	movs	r2, #5
 8000c7c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000c7e:	4b3e      	ldr	r3, [pc, #248]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000c80:	2210      	movs	r2, #16
 8000c82:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000c84:	4b3c      	ldr	r3, [pc, #240]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000c86:	220d      	movs	r2, #13
 8000c88:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000c8a:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c90:	4b39      	ldr	r3, [pc, #228]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000c96:	4b38      	ldr	r3, [pc, #224]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000c9c:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000c9e:	2205      	movs	r2, #5
 8000ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000ca2:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000ca8:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000cae:	4b32      	ldr	r3, [pc, #200]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000cb4:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000cba:	482f      	ldr	r0, [pc, #188]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000cbc:	f000 fcd4 	bl	8001668 <HAL_FDCAN_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000cc6:	f000 f93f 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <MX_FDCAN1_Init+0x138>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <MX_FDCAN1_Init+0x138>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  	TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <MX_FDCAN1_Init+0x138>)
 8000cd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cdc:	60da      	str	r2, [r3, #12]
  	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <MX_FDCAN1_Init+0x138>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <MX_FDCAN1_Init+0x138>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	615a      	str	r2, [r3, #20]
  	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000cea:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <MX_FDCAN1_Init+0x138>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000cf0:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <MX_FDCAN1_Init+0x138>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  	TxHeader.MessageMarker = 0;
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <MX_FDCAN1_Init+0x138>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  	TxHeader.Identifier = 0x210;
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <MX_FDCAN1_Init+0x138>)
 8000cfe:	f44f 7204 	mov.w	r2, #528	; 0x210
 8000d02:	601a      	str	r2, [r3, #0]
  	FDCAN_FilterTypeDef sFilterConfig;
  		sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000d04:	2300      	movs	r3, #0
 8000d06:	603b      	str	r3, [r7, #0]
  		sFilterConfig.FilterIndex = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
  		sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	60bb      	str	r3, [r7, #8]
  		sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000d10:	2301      	movs	r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
  		sFilterConfig.FilterID1 = 0x000;
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
  		sFilterConfig.FilterID2 = 0x000;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  		if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4815      	ldr	r0, [pc, #84]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000d22:	f000 fdfb 	bl	800191c <HAL_FDCAN_ConfigFilter>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_FDCAN1_Init+0xe8>
  			Error_Handler();
 8000d2c:	f000 f90c 	bl	8000f48 <Error_Handler>
  		}
  		if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8000d30:	2300      	movs	r3, #0
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2300      	movs	r3, #0
 8000d36:	2202      	movs	r2, #2
 8000d38:	2102      	movs	r1, #2
 8000d3a:	480f      	ldr	r0, [pc, #60]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000d3c:	f000 fe48 	bl	80019d0 <HAL_FDCAN_ConfigGlobalFilter>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_FDCAN1_Init+0x102>
  			Error_Handler();
 8000d46:	f000 f8ff 	bl	8000f48 <Error_Handler>
  		}

  		if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000d4a:	480b      	ldr	r0, [pc, #44]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000d4c:	f000 fe71 	bl	8001a32 <HAL_FDCAN_Start>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_FDCAN1_Init+0x112>
  			Error_Handler();
 8000d56:	f000 f8f7 	bl	8000f48 <Error_Handler>
  		}
  		if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4806      	ldr	r0, [pc, #24]	; (8000d78 <MX_FDCAN1_Init+0x130>)
 8000d60:	f000 ffae 	bl	8001cc0 <HAL_FDCAN_ActivateNotification>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_FDCAN1_Init+0x126>
  		  Error_Handler();
 8000d6a:	f000 f8ed 	bl	8000f48 <Error_Handler>
  		}


  /* USER CODE END FDCAN1_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000008c 	.word	0x2000008c
 8000d7c:	40006400 	.word	0x40006400
 8000d80:	20000180 	.word	0x20000180

08000d84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d88:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <MX_USART2_UART_Init+0xa0>)
 8000d8a:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <MX_USART2_UART_Init+0xa4>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <MX_USART2_UART_Init+0xa0>)
 8000d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <MX_USART2_UART_Init+0xa0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <MX_USART2_UART_Init+0xa0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <MX_USART2_UART_Init+0xa0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_USART2_UART_Init+0xa0>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <MX_USART2_UART_Init+0xa0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_USART2_UART_Init+0xa0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_USART2_UART_Init+0xa0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_USART2_UART_Init+0xa0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <MX_USART2_UART_Init+0xa0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dcc:	4815      	ldr	r0, [pc, #84]	; (8000e24 <MX_USART2_UART_Init+0xa0>)
 8000dce:	f002 fc33 	bl	8003638 <HAL_UART_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000dd8:	f000 f8b6 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4811      	ldr	r0, [pc, #68]	; (8000e24 <MX_USART2_UART_Init+0xa0>)
 8000de0:	f003 f9ca 	bl	8004178 <HAL_UARTEx_SetTxFifoThreshold>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000dea:	f000 f8ad 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dee:	2100      	movs	r1, #0
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <MX_USART2_UART_Init+0xa0>)
 8000df2:	f003 f9ff 	bl	80041f4 <HAL_UARTEx_SetRxFifoThreshold>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000dfc:	f000 f8a4 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e00:	4808      	ldr	r0, [pc, #32]	; (8000e24 <MX_USART2_UART_Init+0xa0>)
 8000e02:	f003 f980 	bl	8004106 <HAL_UARTEx_DisableFifoMode>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e0c:	f000 f89c 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  setbuf(stdout, NULL);
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_USART2_UART_Init+0xa8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f003 fb37 	bl	800448c <setbuf>

  /* USER CODE END USART2_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200000f0 	.word	0x200000f0
 8000e28:	40004400 	.word	0x40004400
 8000e2c:	2000000c 	.word	0x2000000c

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_GPIO_Init+0x84>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a1a      	ldr	r2, [pc, #104]	; (8000eb4 <MX_GPIO_Init+0x84>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_GPIO_Init+0x84>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <MX_GPIO_Init+0x84>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <MX_GPIO_Init+0x84>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <MX_GPIO_Init+0x84>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000e76:	f240 73f3 	movw	r3, #2035	; 0x7f3
 8000e7a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f001 fa71 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000e92:	2321      	movs	r3, #33	; 0x21
 8000e94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <MX_GPIO_Init+0x88>)
 8000ea6:	f001 fa65 	bl	8002374 <HAL_GPIO_Init>

}
 8000eaa:	bf00      	nop
 8000eac:	3720      	adds	r7, #32
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48000400 	.word	0x48000400

08000ebc <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b092      	sub	sp, #72	; 0x48
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
	uint16_t PBattVol, CBattVol, AirPress;
	uint8_t RxData[8];
	if(hfdcan==&hfdcan1){
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <HAL_FDCAN_RxFifo0Callback+0x88>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d135      	bne.n	8000f3a <HAL_FDCAN_RxFifo0Callback+0x7e>
		//printf("get message!!\r\n");
		uint8_t RxData[8]={};
 8000ece:	2300      	movs	r3, #0
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
		FDCAN_RxHeaderTypeDef RxHeader;
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000ed6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eda:	f107 0208 	add.w	r2, r7, #8
 8000ede:	2140      	movs	r1, #64	; 0x40
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 fe13 	bl	8001b0c <HAL_FDCAN_GetRxMessage>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_FDCAN_RxFifo0Callback+0x34>
			Error_Handler();
 8000eec:	f000 f82c 	bl	8000f48 <Error_Handler>
		}
		if(RxHeader.Identifier == 0x700){
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000ef6:	d120      	bne.n	8000f3a <HAL_FDCAN_RxFifo0Callback+0x7e>
			PBattVol = RxData[0]<<8 | RxData[1];
 8000ef8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000f04:	b21b      	sxth	r3, r3
 8000f06:	4313      	orrs	r3, r2
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			CBattVol = RxData[2]<<8 | RxData[3];
 8000f0e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			AirPress = RxData[4]<<8 | RxData[5];
 8000f24:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000f30:	b21b      	sxth	r3, r3
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			//printf("Controller Battery Vol: %d\r\n", CBattVol);
			//printf("Air Pressure: %d\r\n", AirPress);

		}
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	3748      	adds	r7, #72	; 0x48
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000008c 	.word	0x2000008c

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <Error_Handler+0x8>
	...

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <HAL_MspInit+0x44>)
 8000f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_MspInit+0x44>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6613      	str	r3, [r2, #96]	; 0x60
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <HAL_MspInit+0x44>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_MspInit+0x44>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_MspInit+0x44>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_MspInit+0x44>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b09a      	sub	sp, #104	; 0x68
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	2244      	movs	r2, #68	; 0x44
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 f9cf 	bl	8004360 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a28      	ldr	r2, [pc, #160]	; (8001068 <HAL_FDCAN_MspInit+0xcc>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d149      	bne.n	8001060 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fd6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 f93b 	bl	8003258 <HAL_RCCEx_PeriphCLKConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000fe8:	f7ff ffae 	bl	8000f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <HAL_FDCAN_MspInit+0xd0>)
 8000fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff0:	4a1e      	ldr	r2, [pc, #120]	; (800106c <HAL_FDCAN_MspInit+0xd0>)
 8000ff2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <HAL_FDCAN_MspInit+0xd0>)
 8000ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <HAL_FDCAN_MspInit+0xd0>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001008:	4a18      	ldr	r2, [pc, #96]	; (800106c <HAL_FDCAN_MspInit+0xd0>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <HAL_FDCAN_MspInit+0xd0>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800101c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001020:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800102e:	2309      	movs	r3, #9
 8001030:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f001 f99a 	bl	8002374 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2015      	movs	r0, #21
 8001046:	f000 fada 	bl	80015fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800104a:	2015      	movs	r0, #21
 800104c:	f000 faf1 	bl	8001632 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	2016      	movs	r0, #22
 8001056:	f000 fad2 	bl	80015fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800105a:	2016      	movs	r0, #22
 800105c:	f000 fae9 	bl	8001632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001060:	bf00      	nop
 8001062:	3768      	adds	r7, #104	; 0x68
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40006400 	.word	0x40006400
 800106c:	40021000 	.word	0x40021000

08001070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b09a      	sub	sp, #104	; 0x68
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	2244      	movs	r2, #68	; 0x44
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f003 f965 	bl	8004360 <memset>
  if(huart->Instance==USART2)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <HAL_UART_MspInit+0xa8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d136      	bne.n	800110e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010a0:	2302      	movs	r3, #2
 80010a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4618      	mov	r0, r3
 80010ae:	f002 f8d3 	bl	8003258 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010b8:	f7ff ff46 	bl	8000f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_UART_MspInit+0xac>)
 80010be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c0:	4a16      	ldr	r2, [pc, #88]	; (800111c <HAL_UART_MspInit+0xac>)
 80010c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c6:	6593      	str	r3, [r2, #88]	; 0x58
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <HAL_UART_MspInit+0xac>)
 80010ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_UART_MspInit+0xac>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	4a10      	ldr	r2, [pc, #64]	; (800111c <HAL_UART_MspInit+0xac>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_UART_MspInit+0xac>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80010ec:	230c      	movs	r3, #12
 80010ee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010fc:	2307      	movs	r3, #7
 80010fe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f001 f933 	bl	8002374 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	3768      	adds	r7, #104	; 0x68
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40004400 	.word	0x40004400
 800111c:	40021000 	.word	0x40021000

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116c:	f000 f92c 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <FDCAN1_IT0_IRQHandler+0x10>)
 800117a:	f000 fe87 	bl	8001e8c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000008c 	.word	0x2000008c

08001188 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <FDCAN1_IT1_IRQHandler+0x10>)
 800118e:	f000 fe7d 	bl	8001e8c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000008c 	.word	0x2000008c

0800119c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	e00a      	b.n	80011c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011ae:	f3af 8000 	nop.w
 80011b2:	4601      	mov	r1, r0
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	60ba      	str	r2, [r7, #8]
 80011ba:	b2ca      	uxtb	r2, r1
 80011bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3301      	adds	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	dbf0      	blt.n	80011ae <_read+0x12>
	}

return len;
 80011cc:	687b      	ldr	r3, [r7, #4]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
	return -1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <_isatty>:

int _isatty(int file)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
	return 1;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
	return 0;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <_sbrk+0x5c>)
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <_sbrk+0x60>)
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <_sbrk+0x64>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <_sbrk+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	429a      	cmp	r2, r3
 800126e:	d207      	bcs.n	8001280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001270:	f003 f84c 	bl	800430c <__errno>
 8001274:	4603      	mov	r3, r0
 8001276:	220c      	movs	r2, #12
 8001278:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	e009      	b.n	8001294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <_sbrk+0x64>)
 8001290:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001292:	68fb      	ldr	r3, [r7, #12]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20008000 	.word	0x20008000
 80012a0:	00000400 	.word	0x00000400
 80012a4:	200001a4 	.word	0x200001a4
 80012a8:	200001c0 	.word	0x200001c0

080012ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <SystemInit+0x20>)
 80012b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <SystemInit+0x20>)
 80012b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <LoopForever+0x6>)
  ldr r1, =_edata
 80012d6:	490e      	ldr	r1, [pc, #56]	; (8001310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d8:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <LoopForever+0xe>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012dc:	e002      	b.n	80012e4 <LoopCopyDataInit>

080012de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e2:	3304      	adds	r3, #4

080012e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e8:	d3f9      	bcc.n	80012de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012ec:	4c0b      	ldr	r4, [pc, #44]	; (800131c <LoopForever+0x16>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f0:	e001      	b.n	80012f6 <LoopFillZerobss>

080012f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f4:	3204      	adds	r2, #4

080012f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f8:	d3fb      	bcc.n	80012f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012fa:	f7ff ffd7 	bl	80012ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fe:	f003 f80b 	bl	8004318 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001302:	f7ff f973 	bl	80005ec <main>

08001306 <LoopForever>:

LoopForever:
    b LoopForever
 8001306:	e7fe      	b.n	8001306 <LoopForever>
  ldr   r0, =_estack
 8001308:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001310:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001314:	080056e0 	.word	0x080056e0
  ldr r2, =_sbss
 8001318:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800131c:	200001bc 	.word	0x200001bc

08001320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC1_2_IRQHandler>

08001322 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132c:	2003      	movs	r0, #3
 800132e:	f000 f95b 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001332:	2000      	movs	r0, #0
 8001334:	f000 f80e 	bl	8001354 <HAL_InitTick>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	71fb      	strb	r3, [r7, #7]
 8001342:	e001      	b.n	8001348 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001344:	f7ff fe06 	bl	8000f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001348:	79fb      	ldrb	r3, [r7, #7]

}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_InitTick+0x68>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d022      	beq.n	80013ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_InitTick+0x6c>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <HAL_InitTick+0x68>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001374:	fbb1 f3f3 	udiv	r3, r1, r3
 8001378:	fbb2 f3f3 	udiv	r3, r2, r3
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f966 	bl	800164e <HAL_SYSTICK_Config>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10f      	bne.n	80013a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b0f      	cmp	r3, #15
 800138c:	d809      	bhi.n	80013a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138e:	2200      	movs	r2, #0
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	f04f 30ff 	mov.w	r0, #4294967295
 8001396:	f000 f932 	bl	80015fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800139a:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <HAL_InitTick+0x70>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	e007      	b.n	80013b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	e004      	b.n	80013b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e001      	b.n	80013b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000000 	.word	0x20000000
 80013c4:	20000004 	.word	0x20000004

080013c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_IncTick+0x1c>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_IncTick+0x20>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <HAL_IncTick+0x1c>)
 80013d8:	6013      	str	r3, [r2, #0]
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	200001a8 	.word	0x200001a8
 80013e8:	20000008 	.word	0x20000008

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200001a8 	.word	0x200001a8

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff ffee 	bl	80013ec <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d004      	beq.n	8001428 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_Delay+0x40>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4413      	add	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001428:	bf00      	nop
 800142a:	f7ff ffdf 	bl	80013ec <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	429a      	cmp	r2, r3
 8001438:	d8f7      	bhi.n	800142a <HAL_Delay+0x26>
  {
  }
}
 800143a:	bf00      	nop
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000008 	.word	0x20000008

08001448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001464:	4013      	ands	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	60d3      	str	r3, [r2, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	f003 0307 	and.w	r3, r3, #7
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db0b      	blt.n	80014d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	f003 021f 	and.w	r2, r3, #31
 80014c4:	4907      	ldr	r1, [pc, #28]	; (80014e4 <__NVIC_EnableIRQ+0x38>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	2001      	movs	r0, #1
 80014ce:	fa00 f202 	lsl.w	r2, r0, r2
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000e100 	.word	0xe000e100

080014e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	db0a      	blt.n	8001512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	490c      	ldr	r1, [pc, #48]	; (8001534 <__NVIC_SetPriority+0x4c>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	440b      	add	r3, r1
 800150c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001510:	e00a      	b.n	8001528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4908      	ldr	r1, [pc, #32]	; (8001538 <__NVIC_SetPriority+0x50>)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	3b04      	subs	r3, #4
 8001520:	0112      	lsls	r2, r2, #4
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	440b      	add	r3, r1
 8001526:	761a      	strb	r2, [r3, #24]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f1c3 0307 	rsb	r3, r3, #7
 8001556:	2b04      	cmp	r3, #4
 8001558:	bf28      	it	cs
 800155a:	2304      	movcs	r3, #4
 800155c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3304      	adds	r3, #4
 8001562:	2b06      	cmp	r3, #6
 8001564:	d902      	bls.n	800156c <NVIC_EncodePriority+0x30>
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3b03      	subs	r3, #3
 800156a:	e000      	b.n	800156e <NVIC_EncodePriority+0x32>
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	f04f 32ff 	mov.w	r2, #4294967295
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	401a      	ands	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001584:	f04f 31ff 	mov.w	r1, #4294967295
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	43d9      	mvns	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	4313      	orrs	r3, r2
         );
}
 8001596:	4618      	mov	r0, r3
 8001598:	3724      	adds	r7, #36	; 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b4:	d301      	bcc.n	80015ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00f      	b.n	80015da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <SysTick_Config+0x40>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c2:	210f      	movs	r1, #15
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f7ff ff8e 	bl	80014e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <SysTick_Config+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SysTick_Config+0x40>)
 80015d4:	2207      	movs	r2, #7
 80015d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000e010 	.word	0xe000e010

080015e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff29 	bl	8001448 <__NVIC_SetPriorityGrouping>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800160c:	f7ff ff40 	bl	8001490 <__NVIC_GetPriorityGrouping>
 8001610:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	6978      	ldr	r0, [r7, #20]
 8001618:	f7ff ff90 	bl	800153c <NVIC_EncodePriority>
 800161c:	4602      	mov	r2, r0
 800161e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff5f 	bl	80014e8 <__NVIC_SetPriority>
}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff33 	bl	80014ac <__NVIC_EnableIRQ>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ffa4 	bl	80015a4 <SysTick_Config>
 800165c:	4603      	mov	r3, r0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e147      	b.n	800190a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d106      	bne.n	8001694 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fc84 	bl	8000f9c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0210 	bic.w	r2, r2, #16
 80016a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a4:	f7ff fea2 	bl	80013ec <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016aa:	e012      	b.n	80016d2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016ac:	f7ff fe9e 	bl	80013ec <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b0a      	cmp	r3, #10
 80016b8:	d90b      	bls.n	80016d2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016be:	f043 0201 	orr.w	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2203      	movs	r2, #3
 80016ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e11b      	b.n	800190a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d0e5      	beq.n	80016ac <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	699a      	ldr	r2, [r3, #24]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0201 	orr.w	r2, r2, #1
 80016ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f0:	f7ff fe7c 	bl	80013ec <HAL_GetTick>
 80016f4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80016f6:	e012      	b.n	800171e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016f8:	f7ff fe78 	bl	80013ec <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b0a      	cmp	r3, #10
 8001704:	d90b      	bls.n	800171e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	f043 0201 	orr.w	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2203      	movs	r2, #3
 8001716:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e0f5      	b.n	800190a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0e5      	beq.n	80016f8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	699a      	ldr	r2, [r3, #24]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0202 	orr.w	r2, r2, #2
 800173a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a74      	ldr	r2, [pc, #464]	; (8001914 <HAL_FDCAN_Init+0x2ac>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d103      	bne.n	800174e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001746:	4a74      	ldr	r2, [pc, #464]	; (8001918 <HAL_FDCAN_Init+0x2b0>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7c1b      	ldrb	r3, [r3, #16]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d108      	bne.n	8001768 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	699a      	ldr	r2, [r3, #24]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001764:	619a      	str	r2, [r3, #24]
 8001766:	e007      	b.n	8001778 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	699a      	ldr	r2, [r3, #24]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001776:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7c5b      	ldrb	r3, [r3, #17]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d108      	bne.n	8001792 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699a      	ldr	r2, [r3, #24]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800178e:	619a      	str	r2, [r3, #24]
 8001790:	e007      	b.n	80017a2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	699a      	ldr	r2, [r3, #24]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017a0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7c9b      	ldrb	r3, [r3, #18]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d108      	bne.n	80017bc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699a      	ldr	r2, [r3, #24]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017b8:	619a      	str	r2, [r3, #24]
 80017ba:	e007      	b.n	80017cc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017ca:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	699a      	ldr	r2, [r3, #24]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80017f0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0210 	bic.w	r2, r2, #16
 8001800:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d108      	bne.n	800181c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	699a      	ldr	r2, [r3, #24]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 0204 	orr.w	r2, r2, #4
 8001818:	619a      	str	r2, [r3, #24]
 800181a:	e02c      	b.n	8001876 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d028      	beq.n	8001876 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d01c      	beq.n	8001866 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699a      	ldr	r2, [r3, #24]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800183a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0210 	orr.w	r2, r2, #16
 800184a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d110      	bne.n	8001876 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699a      	ldr	r2, [r3, #24]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0220 	orr.w	r2, r2, #32
 8001862:	619a      	str	r2, [r3, #24]
 8001864:	e007      	b.n	8001876 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	699a      	ldr	r2, [r3, #24]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f042 0220 	orr.w	r2, r2, #32
 8001874:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	3b01      	subs	r3, #1
 800187c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	3b01      	subs	r3, #1
 8001884:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001886:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800188e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	3b01      	subs	r3, #1
 8001898:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800189e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018a0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018aa:	d115      	bne.n	80018d8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	3b01      	subs	r3, #1
 80018b8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018ba:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	3b01      	subs	r3, #1
 80018c2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80018c4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	3b01      	subs	r3, #1
 80018ce:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80018d4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018d6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fc6e 	bl	80021d0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40006400 	.word	0x40006400
 8001918:	40006500 	.word	0x40006500

0800191c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800192c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d002      	beq.n	800193a <HAL_FDCAN_ConfigFilter+0x1e>
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d13d      	bne.n	80019b6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d119      	bne.n	8001976 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800194e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001956:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	e01d      	b.n	80019b2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	075a      	lsls	r2, r3, #29
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	079a      	lsls	r2, r3, #30
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	4313      	orrs	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4413      	add	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	3304      	adds	r3, #4
 80019aa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e006      	b.n	80019c4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ba:	f043 0202 	orr.w	r2, r3, #2
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
  }
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	371c      	adds	r7, #28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d116      	bne.n	8001a18 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019f2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	011a      	lsls	r2, r3, #4
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	431a      	orrs	r2, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	431a      	orrs	r2, r3
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	e006      	b.n	8001a26 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1c:	f043 0204 	orr.w	r2, r3, #4
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
  }
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d110      	bne.n	8001a68 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	699a      	ldr	r2, [r3, #24]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0201 	bic.w	r2, r2, #1
 8001a5c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	e006      	b.n	8001a76 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6c:	f043 0204 	orr.w	r2, r3, #4
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
  }
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d12c      	bne.n	8001af4 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e023      	b.n	8001b02 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	68b9      	ldr	r1, [r7, #8]
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 fbd3 	bl	800227c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2101      	movs	r1, #1
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	409a      	lsls	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e006      	b.n	8001b02 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af8:	f043 0208 	orr.w	r2, r3, #8
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
  }
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b08b      	sub	sp, #44	; 0x2c
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b20:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001b22:	7efb      	ldrb	r3, [r7, #27]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	f040 80bc 	bne.w	8001ca2 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b40      	cmp	r3, #64	; 0x40
 8001b2e:	d121      	bne.n	8001b74 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d107      	bne.n	8001b50 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0af      	b.n	8001cb0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	440b      	add	r3, r1
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
 8001b72:	e020      	b.n	8001bb6 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d107      	bne.n	8001b94 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e08d      	b.n	8001cb0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	4613      	mov	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d107      	bne.n	8001bda <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	0c9b      	lsrs	r3, r3, #18
 8001bd0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	e005      	b.n	8001be6 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	3304      	adds	r3, #4
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	0e1b      	lsrs	r3, r3, #24
 8001c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0fda      	lsrs	r2, r3, #31
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	623b      	str	r3, [r7, #32]
 8001c58:	e00a      	b.n	8001c70 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	441a      	add	r2, r3
 8001c60:	6839      	ldr	r1, [r7, #0]
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	440b      	add	r3, r1
 8001c66:	7812      	ldrb	r2, [r2, #0]
 8001c68:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	623b      	str	r3, [r7, #32]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	0c1b      	lsrs	r3, r3, #16
 8001c76:	4a11      	ldr	r2, [pc, #68]	; (8001cbc <HAL_FDCAN_GetRxMessage+0x1b0>)
 8001c78:	5cd3      	ldrb	r3, [r2, r3]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d3eb      	bcc.n	8001c5a <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b40      	cmp	r3, #64	; 0x40
 8001c86:	d105      	bne.n	8001c94 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001c92:	e004      	b.n	8001c9e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e006      	b.n	8001cb0 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca6:	f043 0208 	orr.w	r2, r3, #8
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
  }
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	372c      	adds	r7, #44	; 0x2c
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	08005600 	.word	0x08005600

08001cc0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001cd2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d003      	beq.n	8001ce2 <HAL_FDCAN_ActivateNotification+0x22>
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	f040 80c8 	bne.w	8001e72 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d004      	beq.n	8001cfe <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d03b      	beq.n	8001d76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d004      	beq.n	8001d12 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d031      	beq.n	8001d76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d004      	beq.n	8001d26 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d027      	beq.n	8001d76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d01d      	beq.n	8001d76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d004      	beq.n	8001d4e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d013      	beq.n	8001d76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	f003 0320 	and.w	r3, r3, #32
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00c      	beq.n	8001d86 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d107      	bne.n	8001d86 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0201 	orr.w	r2, r2, #1
 8001d84:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d004      	beq.n	8001d9a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d13b      	bne.n	8001e12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d004      	beq.n	8001dae <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d131      	bne.n	8001e12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d004      	beq.n	8001dc2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d127      	bne.n	8001e12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d004      	beq.n	8001dd6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d11d      	bne.n	8001e12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d113      	bne.n	8001e12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00c      	beq.n	8001e22 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d007      	beq.n	8001e22 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0202 	orr.w	r2, r2, #2
 8001e20:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d009      	beq.n	8001e40 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e006      	b.n	8001e80 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e76:	f043 0202 	orr.w	r2, r3, #2
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
  }
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e9a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebe:	6a3a      	ldr	r2, [r7, #32]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ece:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee2:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001ee6:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001efe:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00d      	beq.n	8001f36 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2240      	movs	r2, #64	; 0x40
 8001f2e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f92e 	bl	8002192 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01b      	beq.n	8001f7c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d014      	beq.n	8001f7c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f5a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f72:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001f74:	6939      	ldr	r1, [r7, #16]
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f8ec 	bl	8002154 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d007      	beq.n	8001f92 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f88:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001f8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f8b6 	bl	80020fe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6a3a      	ldr	r2, [r7, #32]
 8001f9e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001fa0:	6a39      	ldr	r1, [r7, #32]
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7fe ff8a 	bl	8000ebc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d007      	beq.n	8001fbe <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001fb6:	69f9      	ldr	r1, [r7, #28]
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f8ab 	bl	8002114 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00e      	beq.n	8001fea <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fe2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f8a0 	bl	800212a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01a      	beq.n	800202e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002002:	2b00      	cmp	r3, #0
 8002004:	d013      	beq.n	800202e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800200e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4013      	ands	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2280      	movs	r2, #128	; 0x80
 8002024:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002026:	68f9      	ldr	r1, [r7, #12]
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f888 	bl	800213e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00e      	beq.n	800205a <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002052:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f888 	bl	800216a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00e      	beq.n	8002086 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800207e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f87c 	bl	800217e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800208c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d011      	beq.n	80020b8 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80020c6:	6979      	ldr	r1, [r7, #20]
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f876 	bl	80021ba <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f858 	bl	80021a6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80020f6:	bf00      	nop
 80020f8:	3728      	adds	r7, #40	; 0x28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80021da:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ea:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f2:	041a      	lsls	r2, r3, #16
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002210:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002218:	061a      	lsls	r2, r3, #24
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e005      	b.n	800225e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3304      	adds	r3, #4
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	429a      	cmp	r2, r3
 8002268:	d3f3      	bcc.n	8002252 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800226a:	bf00      	nop
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	4000a400 	.word	0x4000a400

0800227c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10a      	bne.n	80022a8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800229a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e00a      	b.n	80022be <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80022b0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80022b6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022bc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80022c8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80022ce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80022d4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	3304      	adds	r3, #4
 80022fa:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	3304      	adds	r3, #4
 8002306:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	e020      	b.n	8002350 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3303      	adds	r3, #3
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3302      	adds	r3, #2
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	440b      	add	r3, r1
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002326:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3301      	adds	r3, #1
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	440b      	add	r3, r1
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002334:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	440a      	add	r2, r1
 800233c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800233e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	3304      	adds	r3, #4
 8002348:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3304      	adds	r3, #4
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	4a06      	ldr	r2, [pc, #24]	; (8002370 <FDCAN_CopyMessageToRAM+0xf4>)
 8002358:	5cd3      	ldrb	r3, [r2, r3]
 800235a:	461a      	mov	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	4293      	cmp	r3, r2
 8002360:	d3d5      	bcc.n	800230e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8002362:	bf00      	nop
 8002364:	bf00      	nop
 8002366:	3724      	adds	r7, #36	; 0x24
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	08005600 	.word	0x08005600

08002374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002382:	e15a      	b.n	800263a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2101      	movs	r1, #1
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	4013      	ands	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 814c 	beq.w	8002634 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d005      	beq.n	80023b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d130      	bne.n	8002416 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	2203      	movs	r2, #3
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023ea:	2201      	movs	r2, #1
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	f003 0201 	and.w	r2, r3, #1
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b03      	cmp	r3, #3
 8002420:	d017      	beq.n	8002452 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	2203      	movs	r2, #3
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d123      	bne.n	80024a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	08da      	lsrs	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3208      	adds	r2, #8
 8002466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	220f      	movs	r2, #15
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	08da      	lsrs	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3208      	adds	r2, #8
 80024a0:	6939      	ldr	r1, [r7, #16]
 80024a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0203 	and.w	r2, r3, #3
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 80a6 	beq.w	8002634 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e8:	4b5b      	ldr	r3, [pc, #364]	; (8002658 <HAL_GPIO_Init+0x2e4>)
 80024ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ec:	4a5a      	ldr	r2, [pc, #360]	; (8002658 <HAL_GPIO_Init+0x2e4>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6613      	str	r3, [r2, #96]	; 0x60
 80024f4:	4b58      	ldr	r3, [pc, #352]	; (8002658 <HAL_GPIO_Init+0x2e4>)
 80024f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002500:	4a56      	ldr	r2, [pc, #344]	; (800265c <HAL_GPIO_Init+0x2e8>)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	3302      	adds	r3, #2
 8002508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800252a:	d01f      	beq.n	800256c <HAL_GPIO_Init+0x1f8>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a4c      	ldr	r2, [pc, #304]	; (8002660 <HAL_GPIO_Init+0x2ec>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d019      	beq.n	8002568 <HAL_GPIO_Init+0x1f4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a4b      	ldr	r2, [pc, #300]	; (8002664 <HAL_GPIO_Init+0x2f0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d013      	beq.n	8002564 <HAL_GPIO_Init+0x1f0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a4a      	ldr	r2, [pc, #296]	; (8002668 <HAL_GPIO_Init+0x2f4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d00d      	beq.n	8002560 <HAL_GPIO_Init+0x1ec>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a49      	ldr	r2, [pc, #292]	; (800266c <HAL_GPIO_Init+0x2f8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d007      	beq.n	800255c <HAL_GPIO_Init+0x1e8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a48      	ldr	r2, [pc, #288]	; (8002670 <HAL_GPIO_Init+0x2fc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d101      	bne.n	8002558 <HAL_GPIO_Init+0x1e4>
 8002554:	2305      	movs	r3, #5
 8002556:	e00a      	b.n	800256e <HAL_GPIO_Init+0x1fa>
 8002558:	2306      	movs	r3, #6
 800255a:	e008      	b.n	800256e <HAL_GPIO_Init+0x1fa>
 800255c:	2304      	movs	r3, #4
 800255e:	e006      	b.n	800256e <HAL_GPIO_Init+0x1fa>
 8002560:	2303      	movs	r3, #3
 8002562:	e004      	b.n	800256e <HAL_GPIO_Init+0x1fa>
 8002564:	2302      	movs	r3, #2
 8002566:	e002      	b.n	800256e <HAL_GPIO_Init+0x1fa>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_GPIO_Init+0x1fa>
 800256c:	2300      	movs	r3, #0
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	f002 0203 	and.w	r2, r2, #3
 8002574:	0092      	lsls	r2, r2, #2
 8002576:	4093      	lsls	r3, r2
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800257e:	4937      	ldr	r1, [pc, #220]	; (800265c <HAL_GPIO_Init+0x2e8>)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	3302      	adds	r3, #2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800258c:	4b39      	ldr	r3, [pc, #228]	; (8002674 <HAL_GPIO_Init+0x300>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025b0:	4a30      	ldr	r2, [pc, #192]	; (8002674 <HAL_GPIO_Init+0x300>)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025b6:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <HAL_GPIO_Init+0x300>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025da:	4a26      	ldr	r2, [pc, #152]	; (8002674 <HAL_GPIO_Init+0x300>)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80025e0:	4b24      	ldr	r3, [pc, #144]	; (8002674 <HAL_GPIO_Init+0x300>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002604:	4a1b      	ldr	r2, [pc, #108]	; (8002674 <HAL_GPIO_Init+0x300>)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <HAL_GPIO_Init+0x300>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800262e:	4a11      	ldr	r2, [pc, #68]	; (8002674 <HAL_GPIO_Init+0x300>)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3301      	adds	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	f47f ae9d 	bne.w	8002384 <HAL_GPIO_Init+0x10>
  }
}
 800264a:	bf00      	nop
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40021000 	.word	0x40021000
 800265c:	40010000 	.word	0x40010000
 8002660:	48000400 	.word	0x48000400
 8002664:	48000800 	.word	0x48000800
 8002668:	48000c00 	.word	0x48000c00
 800266c:	48001000 	.word	0x48001000
 8002670:	48001400 	.word	0x48001400
 8002674:	40010400 	.word	0x40010400

08002678 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	887b      	ldrh	r3, [r7, #2]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002690:	2301      	movs	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
 8002694:	e001      	b.n	800269a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d141      	bne.n	800273a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026b6:	4b4b      	ldr	r3, [pc, #300]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c2:	d131      	bne.n	8002728 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026c4:	4b47      	ldr	r3, [pc, #284]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ca:	4a46      	ldr	r2, [pc, #280]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d4:	4b43      	ldr	r3, [pc, #268]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026dc:	4a41      	ldr	r2, [pc, #260]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026e4:	4b40      	ldr	r3, [pc, #256]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2232      	movs	r2, #50	; 0x32
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	4a3f      	ldr	r2, [pc, #252]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	0c9b      	lsrs	r3, r3, #18
 80026f6:	3301      	adds	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026fa:	e002      	b.n	8002702 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	3b01      	subs	r3, #1
 8002700:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002702:	4b38      	ldr	r3, [pc, #224]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270e:	d102      	bne.n	8002716 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f2      	bne.n	80026fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002716:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002722:	d158      	bne.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e057      	b.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002728:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800272e:	4a2d      	ldr	r2, [pc, #180]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002734:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002738:	e04d      	b.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002740:	d141      	bne.n	80027c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002742:	4b28      	ldr	r3, [pc, #160]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800274a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274e:	d131      	bne.n	80027b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002750:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002756:	4a23      	ldr	r2, [pc, #140]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002760:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002768:	4a1e      	ldr	r2, [pc, #120]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002770:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2232      	movs	r2, #50	; 0x32
 8002776:	fb02 f303 	mul.w	r3, r2, r3
 800277a:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	0c9b      	lsrs	r3, r3, #18
 8002782:	3301      	adds	r3, #1
 8002784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002786:	e002      	b.n	800278e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3b01      	subs	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279a:	d102      	bne.n	80027a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f2      	bne.n	8002788 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ae:	d112      	bne.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e011      	b.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027c4:	e007      	b.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027c6:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027ce:	4a05      	ldr	r2, [pc, #20]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40007000 	.word	0x40007000
 80027e8:	20000000 	.word	0x20000000
 80027ec:	431bde83 	.word	0x431bde83

080027f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e306      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d075      	beq.n	80028fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800280e:	4b97      	ldr	r3, [pc, #604]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002818:	4b94      	ldr	r3, [pc, #592]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d102      	bne.n	800282e <HAL_RCC_OscConfig+0x3e>
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b03      	cmp	r3, #3
 800282c:	d002      	beq.n	8002834 <HAL_RCC_OscConfig+0x44>
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d10b      	bne.n	800284c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	4b8d      	ldr	r3, [pc, #564]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d05b      	beq.n	80028f8 <HAL_RCC_OscConfig+0x108>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d157      	bne.n	80028f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e2e1      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002854:	d106      	bne.n	8002864 <HAL_RCC_OscConfig+0x74>
 8002856:	4b85      	ldr	r3, [pc, #532]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a84      	ldr	r2, [pc, #528]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e01d      	b.n	80028a0 <HAL_RCC_OscConfig+0xb0>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x98>
 800286e:	4b7f      	ldr	r3, [pc, #508]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a7e      	ldr	r2, [pc, #504]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b7c      	ldr	r3, [pc, #496]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a7b      	ldr	r2, [pc, #492]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e00b      	b.n	80028a0 <HAL_RCC_OscConfig+0xb0>
 8002888:	4b78      	ldr	r3, [pc, #480]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a77      	ldr	r2, [pc, #476]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800288e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b75      	ldr	r3, [pc, #468]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a74      	ldr	r2, [pc, #464]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800289a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe fda0 	bl	80013ec <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b0:	f7fe fd9c 	bl	80013ec <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	; 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e2a6      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c2:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0xc0>
 80028ce:	e014      	b.n	80028fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7fe fd8c 	bl	80013ec <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d8:	f7fe fd88 	bl	80013ec <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	; 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e292      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ea:	4b60      	ldr	r3, [pc, #384]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0xe8>
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d075      	beq.n	80029f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002906:	4b59      	ldr	r3, [pc, #356]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002910:	4b56      	ldr	r3, [pc, #344]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2b0c      	cmp	r3, #12
 800291e:	d102      	bne.n	8002926 <HAL_RCC_OscConfig+0x136>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d002      	beq.n	800292c <HAL_RCC_OscConfig+0x13c>
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d11f      	bne.n	800296c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800292c:	4b4f      	ldr	r3, [pc, #316]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_OscConfig+0x154>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e265      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b49      	ldr	r3, [pc, #292]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	061b      	lsls	r3, r3, #24
 8002952:	4946      	ldr	r1, [pc, #280]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002958:	4b45      	ldr	r3, [pc, #276]	; (8002a70 <HAL_RCC_OscConfig+0x280>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fcf9 	bl	8001354 <HAL_InitTick>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d043      	beq.n	80029f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e251      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d023      	beq.n	80029bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002974:	4b3d      	ldr	r3, [pc, #244]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a3c      	ldr	r2, [pc, #240]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800297a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fd34 	bl	80013ec <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002988:	f7fe fd30 	bl	80013ec <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e23a      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800299a:	4b34      	ldr	r3, [pc, #208]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a6:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	061b      	lsls	r3, r3, #24
 80029b4:	492d      	ldr	r1, [pc, #180]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
 80029ba:	e01a      	b.n	80029f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029bc:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a2a      	ldr	r2, [pc, #168]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 80029c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe fd10 	bl	80013ec <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d0:	f7fe fd0c 	bl	80013ec <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e216      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x1e0>
 80029ee:	e000      	b.n	80029f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d041      	beq.n	8002a82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d01c      	beq.n	8002a40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a06:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a0c:	4a17      	ldr	r2, [pc, #92]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a16:	f7fe fce9 	bl	80013ec <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1e:	f7fe fce5 	bl	80013ec <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e1ef      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a30:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0ef      	beq.n	8002a1e <HAL_RCC_OscConfig+0x22e>
 8002a3e:	e020      	b.n	8002a82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a40:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a46:	4a09      	ldr	r2, [pc, #36]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7fe fccc 	bl	80013ec <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a56:	e00d      	b.n	8002a74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a58:	f7fe fcc8 	bl	80013ec <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d906      	bls.n	8002a74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e1d2      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a74:	4b8c      	ldr	r3, [pc, #560]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ea      	bne.n	8002a58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80a6 	beq.w	8002bdc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a90:	2300      	movs	r3, #0
 8002a92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a94:	4b84      	ldr	r3, [pc, #528]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x2b4>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCC_OscConfig+0x2b6>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00d      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	4b7f      	ldr	r3, [pc, #508]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	4a7e      	ldr	r2, [pc, #504]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab6:	4b7c      	ldr	r3, [pc, #496]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac6:	4b79      	ldr	r3, [pc, #484]	; (8002cac <HAL_RCC_OscConfig+0x4bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d118      	bne.n	8002b04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ad2:	4b76      	ldr	r3, [pc, #472]	; (8002cac <HAL_RCC_OscConfig+0x4bc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a75      	ldr	r2, [pc, #468]	; (8002cac <HAL_RCC_OscConfig+0x4bc>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ade:	f7fe fc85 	bl	80013ec <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae6:	f7fe fc81 	bl	80013ec <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e18b      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002af8:	4b6c      	ldr	r3, [pc, #432]	; (8002cac <HAL_RCC_OscConfig+0x4bc>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d108      	bne.n	8002b1e <HAL_RCC_OscConfig+0x32e>
 8002b0c:	4b66      	ldr	r3, [pc, #408]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	4a65      	ldr	r2, [pc, #404]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b1c:	e024      	b.n	8002b68 <HAL_RCC_OscConfig+0x378>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d110      	bne.n	8002b48 <HAL_RCC_OscConfig+0x358>
 8002b26:	4b60      	ldr	r3, [pc, #384]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2c:	4a5e      	ldr	r2, [pc, #376]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b2e:	f043 0304 	orr.w	r3, r3, #4
 8002b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b36:	4b5c      	ldr	r3, [pc, #368]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3c:	4a5a      	ldr	r2, [pc, #360]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b46:	e00f      	b.n	8002b68 <HAL_RCC_OscConfig+0x378>
 8002b48:	4b57      	ldr	r3, [pc, #348]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	4a56      	ldr	r2, [pc, #344]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b58:	4b53      	ldr	r3, [pc, #332]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	4a52      	ldr	r2, [pc, #328]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d016      	beq.n	8002b9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b70:	f7fe fc3c 	bl	80013ec <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b78:	f7fe fc38 	bl	80013ec <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e140      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8e:	4b46      	ldr	r3, [pc, #280]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0ed      	beq.n	8002b78 <HAL_RCC_OscConfig+0x388>
 8002b9c:	e015      	b.n	8002bca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9e:	f7fe fc25 	bl	80013ec <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7fe fc21 	bl	80013ec <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e129      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bbc:	4b3a      	ldr	r3, [pc, #232]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ed      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bca:	7ffb      	ldrb	r3, [r7, #31]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd0:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	4a34      	ldr	r2, [pc, #208]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d03c      	beq.n	8002c62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d01c      	beq.n	8002c2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bf0:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002bf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bf6:	4a2c      	ldr	r2, [pc, #176]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7fe fbf4 	bl	80013ec <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c08:	f7fe fbf0 	bl	80013ec <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e0fa      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c1a:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0ef      	beq.n	8002c08 <HAL_RCC_OscConfig+0x418>
 8002c28:	e01b      	b.n	8002c62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002c2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c30:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7fe fbd7 	bl	80013ec <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c42:	f7fe fbd3 	bl	80013ec <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e0dd      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c54:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1ef      	bne.n	8002c42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80d1 	beq.w	8002e0e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b0c      	cmp	r3, #12
 8002c76:	f000 808b 	beq.w	8002d90 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d15e      	bne.n	8002d40 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a08      	ldr	r2, [pc, #32]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002c88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fbad 	bl	80013ec <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c94:	e00c      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c96:	f7fe fba9 	bl	80013ec <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d905      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e0b3      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb0:	4b59      	ldr	r3, [pc, #356]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ec      	bne.n	8002c96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cbc:	4b56      	ldr	r3, [pc, #344]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	4b56      	ldr	r3, [pc, #344]	; (8002e1c <HAL_RCC_OscConfig+0x62c>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6a11      	ldr	r1, [r2, #32]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ccc:	3a01      	subs	r2, #1
 8002cce:	0112      	lsls	r2, r2, #4
 8002cd0:	4311      	orrs	r1, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002cd6:	0212      	lsls	r2, r2, #8
 8002cd8:	4311      	orrs	r1, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cde:	0852      	lsrs	r2, r2, #1
 8002ce0:	3a01      	subs	r2, #1
 8002ce2:	0552      	lsls	r2, r2, #21
 8002ce4:	4311      	orrs	r1, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cea:	0852      	lsrs	r2, r2, #1
 8002cec:	3a01      	subs	r2, #1
 8002cee:	0652      	lsls	r2, r2, #25
 8002cf0:	4311      	orrs	r1, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cf6:	06d2      	lsls	r2, r2, #27
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	4947      	ldr	r1, [pc, #284]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d00:	4b45      	ldr	r3, [pc, #276]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a44      	ldr	r2, [pc, #272]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d0c:	4b42      	ldr	r3, [pc, #264]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a41      	ldr	r2, [pc, #260]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe fb68 	bl	80013ec <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe fb64 	bl	80013ec <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e06e      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x530>
 8002d3e:	e066      	b.n	8002e0e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d40:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a34      	ldr	r2, [pc, #208]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d4a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d4c:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4a31      	ldr	r2, [pc, #196]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d52:	f023 0303 	bic.w	r3, r3, #3
 8002d56:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d58:	4b2f      	ldr	r3, [pc, #188]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	4a2e      	ldr	r2, [pc, #184]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d5e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe fb40 	bl	80013ec <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe fb3c 	bl	80013ec <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e046      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d82:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x580>
 8002d8e:	e03e      	b.n	8002e0e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e039      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d9c:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f003 0203 	and.w	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d12c      	bne.n	8002e0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d123      	bne.n	8002e0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d11b      	bne.n	8002e0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d113      	bne.n	8002e0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	085b      	lsrs	r3, r3, #1
 8002dee:	3b01      	subs	r3, #1
 8002df0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d109      	bne.n	8002e0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	085b      	lsrs	r3, r3, #1
 8002e02:	3b01      	subs	r3, #1
 8002e04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3720      	adds	r7, #32
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	019f800c 	.word	0x019f800c

08002e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e11e      	b.n	8003076 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e38:	4b91      	ldr	r3, [pc, #580]	; (8003080 <HAL_RCC_ClockConfig+0x260>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d910      	bls.n	8002e68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b8e      	ldr	r3, [pc, #568]	; (8003080 <HAL_RCC_ClockConfig+0x260>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 020f 	bic.w	r2, r3, #15
 8002e4e:	498c      	ldr	r1, [pc, #560]	; (8003080 <HAL_RCC_ClockConfig+0x260>)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b8a      	ldr	r3, [pc, #552]	; (8003080 <HAL_RCC_ClockConfig+0x260>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e106      	b.n	8003076 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d073      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d129      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7c:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0f4      	b.n	8003076 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e8c:	f000 f99e 	bl	80031cc <RCC_GetSysClockFreqFromPLLSource>
 8002e90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4a7c      	ldr	r2, [pc, #496]	; (8003088 <HAL_RCC_ClockConfig+0x268>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d93f      	bls.n	8002f1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e9a:	4b7a      	ldr	r3, [pc, #488]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d033      	beq.n	8002f1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d12f      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002eba:	4b72      	ldr	r3, [pc, #456]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ec2:	4a70      	ldr	r2, [pc, #448]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	e024      	b.n	8002f1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d107      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed8:	4b6a      	ldr	r3, [pc, #424]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0c6      	b.n	8003076 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee8:	4b66      	ldr	r3, [pc, #408]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0be      	b.n	8003076 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ef8:	f000 f8ce 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 8002efc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4a61      	ldr	r2, [pc, #388]	; (8003088 <HAL_RCC_ClockConfig+0x268>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d909      	bls.n	8002f1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f06:	4b5f      	ldr	r3, [pc, #380]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f0e:	4a5d      	ldr	r2, [pc, #372]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f1a:	4b5a      	ldr	r3, [pc, #360]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f023 0203 	bic.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4957      	ldr	r1, [pc, #348]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2c:	f7fe fa5e 	bl	80013ec <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f34:	f7fe fa5a 	bl	80013ec <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e095      	b.n	8003076 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	4b4e      	ldr	r3, [pc, #312]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 020c 	and.w	r2, r3, #12
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d1eb      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d023      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f74:	4b43      	ldr	r3, [pc, #268]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	4a42      	ldr	r2, [pc, #264]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d007      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f8c:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f94:	4a3b      	ldr	r2, [pc, #236]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b39      	ldr	r3, [pc, #228]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4936      	ldr	r1, [pc, #216]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2b80      	cmp	r3, #128	; 0x80
 8002fb4:	d105      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002fb6:	4b33      	ldr	r3, [pc, #204]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	4a32      	ldr	r2, [pc, #200]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fc0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc2:	4b2f      	ldr	r3, [pc, #188]	; (8003080 <HAL_RCC_ClockConfig+0x260>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d21d      	bcs.n	800300c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_RCC_ClockConfig+0x260>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 020f 	bic.w	r2, r3, #15
 8002fd8:	4929      	ldr	r1, [pc, #164]	; (8003080 <HAL_RCC_ClockConfig+0x260>)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fe0:	f7fe fa04 	bl	80013ec <HAL_GetTick>
 8002fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe8:	f7fe fa00 	bl	80013ec <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e03b      	b.n	8003076 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <HAL_RCC_ClockConfig+0x260>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d1ed      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003018:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4917      	ldr	r1, [pc, #92]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	490f      	ldr	r1, [pc, #60]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800304a:	f000 f825 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 800304e:	4602      	mov	r2, r0
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	490c      	ldr	r1, [pc, #48]	; (800308c <HAL_RCC_ClockConfig+0x26c>)
 800305c:	5ccb      	ldrb	r3, [r1, r3]
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	fa22 f303 	lsr.w	r3, r2, r3
 8003066:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <HAL_RCC_ClockConfig+0x270>)
 8003068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <HAL_RCC_ClockConfig+0x274>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe f970 	bl	8001354 <HAL_InitTick>
 8003074:	4603      	mov	r3, r0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40022000 	.word	0x40022000
 8003084:	40021000 	.word	0x40021000
 8003088:	04c4b400 	.word	0x04c4b400
 800308c:	080055e8 	.word	0x080055e8
 8003090:	20000000 	.word	0x20000000
 8003094:	20000004 	.word	0x20000004

08003098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800309e:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d102      	bne.n	80030b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	e047      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d102      	bne.n	80030c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030bc:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	e03e      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80030c2:	4b23      	ldr	r3, [pc, #140]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d136      	bne.n	800313c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ce:	4b20      	ldr	r3, [pc, #128]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030d8:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	3301      	adds	r3, #1
 80030e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d10c      	bne.n	8003106 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030ec:	4a1a      	ldr	r2, [pc, #104]	; (8003158 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	4a16      	ldr	r2, [pc, #88]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f6:	68d2      	ldr	r2, [r2, #12]
 80030f8:	0a12      	lsrs	r2, r2, #8
 80030fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	617b      	str	r3, [r7, #20]
      break;
 8003104:	e00c      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003106:	4a13      	ldr	r2, [pc, #76]	; (8003154 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003110:	68d2      	ldr	r2, [r2, #12]
 8003112:	0a12      	lsrs	r2, r2, #8
 8003114:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003118:	fb02 f303 	mul.w	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]
      break;
 800311e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	0e5b      	lsrs	r3, r3, #25
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	3301      	adds	r3, #1
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	e001      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003140:	693b      	ldr	r3, [r7, #16]
}
 8003142:	4618      	mov	r0, r3
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000
 8003154:	00f42400 	.word	0x00f42400
 8003158:	007a1200 	.word	0x007a1200

0800315c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <HAL_RCC_GetHCLKFreq+0x14>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000000 	.word	0x20000000

08003174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003178:	f7ff fff0 	bl	800315c <HAL_RCC_GetHCLKFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	4904      	ldr	r1, [pc, #16]	; (800319c <HAL_RCC_GetPCLK1Freq+0x28>)
 800318a:	5ccb      	ldrb	r3, [r1, r3]
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021000 	.word	0x40021000
 800319c:	080055f8 	.word	0x080055f8

080031a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031a4:	f7ff ffda 	bl	800315c <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	0adb      	lsrs	r3, r3, #11
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4904      	ldr	r1, [pc, #16]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	080055f8 	.word	0x080055f8

080031cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031d2:	4b1e      	ldr	r3, [pc, #120]	; (800324c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	3301      	adds	r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d10c      	bne.n	800320a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031f0:	4a17      	ldr	r2, [pc, #92]	; (8003250 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	4a14      	ldr	r2, [pc, #80]	; (800324c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031fa:	68d2      	ldr	r2, [r2, #12]
 80031fc:	0a12      	lsrs	r2, r2, #8
 80031fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	617b      	str	r3, [r7, #20]
    break;
 8003208:	e00c      	b.n	8003224 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800320a:	4a12      	ldr	r2, [pc, #72]	; (8003254 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003212:	4a0e      	ldr	r2, [pc, #56]	; (800324c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003214:	68d2      	ldr	r2, [r2, #12]
 8003216:	0a12      	lsrs	r2, r2, #8
 8003218:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800321c:	fb02 f303 	mul.w	r3, r2, r3
 8003220:	617b      	str	r3, [r7, #20]
    break;
 8003222:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003224:	4b09      	ldr	r3, [pc, #36]	; (800324c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	0e5b      	lsrs	r3, r3, #25
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	3301      	adds	r3, #1
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800323e:	687b      	ldr	r3, [r7, #4]
}
 8003240:	4618      	mov	r0, r3
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	40021000 	.word	0x40021000
 8003250:	007a1200 	.word	0x007a1200
 8003254:	00f42400 	.word	0x00f42400

08003258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003260:	2300      	movs	r3, #0
 8003262:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003264:	2300      	movs	r3, #0
 8003266:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 8098 	beq.w	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003276:	2300      	movs	r3, #0
 8003278:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327a:	4b43      	ldr	r3, [pc, #268]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10d      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003286:	4b40      	ldr	r3, [pc, #256]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328a:	4a3f      	ldr	r2, [pc, #252]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	6593      	str	r3, [r2, #88]	; 0x58
 8003292:	4b3d      	ldr	r3, [pc, #244]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032a2:	4b3a      	ldr	r3, [pc, #232]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a39      	ldr	r2, [pc, #228]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032ae:	f7fe f89d 	bl	80013ec <HAL_GetTick>
 80032b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032b4:	e009      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b6:	f7fe f899 	bl	80013ec <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d902      	bls.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	74fb      	strb	r3, [r7, #19]
        break;
 80032c8:	e005      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ca:	4b30      	ldr	r3, [pc, #192]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0ef      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80032d6:	7cfb      	ldrb	r3, [r7, #19]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d159      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032dc:	4b2a      	ldr	r3, [pc, #168]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01e      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d019      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032f8:	4b23      	ldr	r3, [pc, #140]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003302:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003304:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330a:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800330c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003314:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331a:	4a1b      	ldr	r2, [pc, #108]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800331c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003324:	4a18      	ldr	r2, [pc, #96]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7fe f859 	bl	80013ec <HAL_GetTick>
 800333a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800333c:	e00b      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333e:	f7fe f855 	bl	80013ec <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f241 3288 	movw	r2, #5000	; 0x1388
 800334c:	4293      	cmp	r3, r2
 800334e:	d902      	bls.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	74fb      	strb	r3, [r7, #19]
            break;
 8003354:	e006      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ec      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003364:	7cfb      	ldrb	r3, [r7, #19]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10b      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	4903      	ldr	r1, [pc, #12]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003380:	e008      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	74bb      	strb	r3, [r7, #18]
 8003386:	e005      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003388:	40021000 	.word	0x40021000
 800338c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003394:	7c7b      	ldrb	r3, [r7, #17]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d105      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339a:	4ba6      	ldr	r3, [pc, #664]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339e:	4aa5      	ldr	r2, [pc, #660]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033b2:	4ba0      	ldr	r3, [pc, #640]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b8:	f023 0203 	bic.w	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	499c      	ldr	r1, [pc, #624]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033d4:	4b97      	ldr	r3, [pc, #604]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	f023 020c 	bic.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	4994      	ldr	r1, [pc, #592]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033f6:	4b8f      	ldr	r3, [pc, #572]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	498b      	ldr	r1, [pc, #556]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003418:	4b86      	ldr	r3, [pc, #536]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	4983      	ldr	r1, [pc, #524]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800343a:	4b7e      	ldr	r3, [pc, #504]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003440:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	497a      	ldr	r1, [pc, #488]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800345c:	4b75      	ldr	r3, [pc, #468]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	4972      	ldr	r1, [pc, #456]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800347e:	4b6d      	ldr	r3, [pc, #436]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	4969      	ldr	r1, [pc, #420]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034a0:	4b64      	ldr	r3, [pc, #400]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	4961      	ldr	r1, [pc, #388]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034c2:	4b5c      	ldr	r3, [pc, #368]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	4958      	ldr	r1, [pc, #352]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d015      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034e4:	4b53      	ldr	r3, [pc, #332]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	4950      	ldr	r1, [pc, #320]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003502:	d105      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003504:	4b4b      	ldr	r3, [pc, #300]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4a4a      	ldr	r2, [pc, #296]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800350e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003518:	2b00      	cmp	r3, #0
 800351a:	d015      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800351c:	4b45      	ldr	r3, [pc, #276]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003522:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	4942      	ldr	r1, [pc, #264]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800353a:	d105      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800353c:	4b3d      	ldr	r3, [pc, #244]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4a3c      	ldr	r2, [pc, #240]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003546:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d015      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003554:	4b37      	ldr	r3, [pc, #220]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4934      	ldr	r1, [pc, #208]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003572:	d105      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003574:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4a2e      	ldr	r2, [pc, #184]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800357e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d015      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800358c:	4b29      	ldr	r3, [pc, #164]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	4926      	ldr	r1, [pc, #152]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035aa:	d105      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ac:	4b21      	ldr	r3, [pc, #132]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4a20      	ldr	r2, [pc, #128]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d015      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	4918      	ldr	r1, [pc, #96]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035e2:	d105      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e4:	4b13      	ldr	r3, [pc, #76]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4a12      	ldr	r2, [pc, #72]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d015      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035fc:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	490a      	ldr	r1, [pc, #40]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800361a:	d105      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4a04      	ldr	r2, [pc, #16]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003626:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003628:	7cbb      	ldrb	r3, [r7, #18]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000

08003638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e042      	b.n	80036d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003650:	2b00      	cmp	r3, #0
 8003652:	d106      	bne.n	8003662 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7fd fd07 	bl	8001070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2224      	movs	r2, #36	; 0x24
 8003666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f8c2 	bl	8003804 <UART_SetConfig>
 8003680:	4603      	mov	r3, r0
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e022      	b.n	80036d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fb82 	bl	8003d9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fc09 	bl	8003ee0 <UART_CheckIdleState>
 80036ce:	4603      	mov	r3, r0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	; 0x28
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	f040 8083 	bne.w	80037fa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_UART_Transmit+0x28>
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e07b      	b.n	80037fc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_UART_Transmit+0x3a>
 800370e:	2302      	movs	r3, #2
 8003710:	e074      	b.n	80037fc <HAL_UART_Transmit+0x124>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2221      	movs	r2, #33	; 0x21
 8003726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800372a:	f7fd fe5f 	bl	80013ec <HAL_GetTick>
 800372e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	88fa      	ldrh	r2, [r7, #6]
 800373c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003748:	d108      	bne.n	800375c <HAL_UART_Transmit+0x84>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d104      	bne.n	800375c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	e003      	b.n	8003764 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003760:	2300      	movs	r3, #0
 8003762:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800376c:	e02c      	b.n	80037c8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2200      	movs	r2, #0
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fbfc 	bl	8003f76 <UART_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e039      	b.n	80037fc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800379c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	3302      	adds	r3, #2
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	e007      	b.n	80037b6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	781a      	ldrb	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3301      	adds	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1cc      	bne.n	800376e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2200      	movs	r2, #0
 80037dc:	2140      	movs	r1, #64	; 0x40
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fbc9 	bl	8003f76 <UART_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e006      	b.n	80037fc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e000      	b.n	80037fc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80037fa:	2302      	movs	r3, #2
  }
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3720      	adds	r7, #32
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003808:	b08c      	sub	sp, #48	; 0x30
 800380a:	af00      	add	r7, sp, #0
 800380c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	431a      	orrs	r2, r3
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	431a      	orrs	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	4313      	orrs	r3, r2
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4bab      	ldr	r3, [pc, #684]	; (8003ae0 <UART_SetConfig+0x2dc>)
 8003834:	4013      	ands	r3, r2
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	6812      	ldr	r2, [r2, #0]
 800383a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800383c:	430b      	orrs	r3, r1
 800383e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4aa0      	ldr	r2, [pc, #640]	; (8003ae4 <UART_SetConfig+0x2e0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d004      	beq.n	8003870 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800386c:	4313      	orrs	r3, r2
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800387a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003884:	430b      	orrs	r3, r1
 8003886:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	f023 010f 	bic.w	r1, r3, #15
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a91      	ldr	r2, [pc, #580]	; (8003ae8 <UART_SetConfig+0x2e4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d125      	bne.n	80038f4 <UART_SetConfig+0xf0>
 80038a8:	4b90      	ldr	r3, [pc, #576]	; (8003aec <UART_SetConfig+0x2e8>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d81a      	bhi.n	80038ec <UART_SetConfig+0xe8>
 80038b6:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <UART_SetConfig+0xb8>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	080038cd 	.word	0x080038cd
 80038c0:	080038dd 	.word	0x080038dd
 80038c4:	080038d5 	.word	0x080038d5
 80038c8:	080038e5 	.word	0x080038e5
 80038cc:	2301      	movs	r3, #1
 80038ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038d2:	e0d6      	b.n	8003a82 <UART_SetConfig+0x27e>
 80038d4:	2302      	movs	r3, #2
 80038d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038da:	e0d2      	b.n	8003a82 <UART_SetConfig+0x27e>
 80038dc:	2304      	movs	r3, #4
 80038de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038e2:	e0ce      	b.n	8003a82 <UART_SetConfig+0x27e>
 80038e4:	2308      	movs	r3, #8
 80038e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ea:	e0ca      	b.n	8003a82 <UART_SetConfig+0x27e>
 80038ec:	2310      	movs	r3, #16
 80038ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f2:	e0c6      	b.n	8003a82 <UART_SetConfig+0x27e>
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a7d      	ldr	r2, [pc, #500]	; (8003af0 <UART_SetConfig+0x2ec>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d138      	bne.n	8003970 <UART_SetConfig+0x16c>
 80038fe:	4b7b      	ldr	r3, [pc, #492]	; (8003aec <UART_SetConfig+0x2e8>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	f003 030c 	and.w	r3, r3, #12
 8003908:	2b0c      	cmp	r3, #12
 800390a:	d82d      	bhi.n	8003968 <UART_SetConfig+0x164>
 800390c:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <UART_SetConfig+0x110>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	08003949 	.word	0x08003949
 8003918:	08003969 	.word	0x08003969
 800391c:	08003969 	.word	0x08003969
 8003920:	08003969 	.word	0x08003969
 8003924:	08003959 	.word	0x08003959
 8003928:	08003969 	.word	0x08003969
 800392c:	08003969 	.word	0x08003969
 8003930:	08003969 	.word	0x08003969
 8003934:	08003951 	.word	0x08003951
 8003938:	08003969 	.word	0x08003969
 800393c:	08003969 	.word	0x08003969
 8003940:	08003969 	.word	0x08003969
 8003944:	08003961 	.word	0x08003961
 8003948:	2300      	movs	r3, #0
 800394a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800394e:	e098      	b.n	8003a82 <UART_SetConfig+0x27e>
 8003950:	2302      	movs	r3, #2
 8003952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003956:	e094      	b.n	8003a82 <UART_SetConfig+0x27e>
 8003958:	2304      	movs	r3, #4
 800395a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800395e:	e090      	b.n	8003a82 <UART_SetConfig+0x27e>
 8003960:	2308      	movs	r3, #8
 8003962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003966:	e08c      	b.n	8003a82 <UART_SetConfig+0x27e>
 8003968:	2310      	movs	r3, #16
 800396a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800396e:	e088      	b.n	8003a82 <UART_SetConfig+0x27e>
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a5f      	ldr	r2, [pc, #380]	; (8003af4 <UART_SetConfig+0x2f0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d125      	bne.n	80039c6 <UART_SetConfig+0x1c2>
 800397a:	4b5c      	ldr	r3, [pc, #368]	; (8003aec <UART_SetConfig+0x2e8>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003984:	2b30      	cmp	r3, #48	; 0x30
 8003986:	d016      	beq.n	80039b6 <UART_SetConfig+0x1b2>
 8003988:	2b30      	cmp	r3, #48	; 0x30
 800398a:	d818      	bhi.n	80039be <UART_SetConfig+0x1ba>
 800398c:	2b20      	cmp	r3, #32
 800398e:	d00a      	beq.n	80039a6 <UART_SetConfig+0x1a2>
 8003990:	2b20      	cmp	r3, #32
 8003992:	d814      	bhi.n	80039be <UART_SetConfig+0x1ba>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <UART_SetConfig+0x19a>
 8003998:	2b10      	cmp	r3, #16
 800399a:	d008      	beq.n	80039ae <UART_SetConfig+0x1aa>
 800399c:	e00f      	b.n	80039be <UART_SetConfig+0x1ba>
 800399e:	2300      	movs	r3, #0
 80039a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039a4:	e06d      	b.n	8003a82 <UART_SetConfig+0x27e>
 80039a6:	2302      	movs	r3, #2
 80039a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ac:	e069      	b.n	8003a82 <UART_SetConfig+0x27e>
 80039ae:	2304      	movs	r3, #4
 80039b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b4:	e065      	b.n	8003a82 <UART_SetConfig+0x27e>
 80039b6:	2308      	movs	r3, #8
 80039b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039bc:	e061      	b.n	8003a82 <UART_SetConfig+0x27e>
 80039be:	2310      	movs	r3, #16
 80039c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c4:	e05d      	b.n	8003a82 <UART_SetConfig+0x27e>
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a4b      	ldr	r2, [pc, #300]	; (8003af8 <UART_SetConfig+0x2f4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d125      	bne.n	8003a1c <UART_SetConfig+0x218>
 80039d0:	4b46      	ldr	r3, [pc, #280]	; (8003aec <UART_SetConfig+0x2e8>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039da:	2bc0      	cmp	r3, #192	; 0xc0
 80039dc:	d016      	beq.n	8003a0c <UART_SetConfig+0x208>
 80039de:	2bc0      	cmp	r3, #192	; 0xc0
 80039e0:	d818      	bhi.n	8003a14 <UART_SetConfig+0x210>
 80039e2:	2b80      	cmp	r3, #128	; 0x80
 80039e4:	d00a      	beq.n	80039fc <UART_SetConfig+0x1f8>
 80039e6:	2b80      	cmp	r3, #128	; 0x80
 80039e8:	d814      	bhi.n	8003a14 <UART_SetConfig+0x210>
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <UART_SetConfig+0x1f0>
 80039ee:	2b40      	cmp	r3, #64	; 0x40
 80039f0:	d008      	beq.n	8003a04 <UART_SetConfig+0x200>
 80039f2:	e00f      	b.n	8003a14 <UART_SetConfig+0x210>
 80039f4:	2300      	movs	r3, #0
 80039f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039fa:	e042      	b.n	8003a82 <UART_SetConfig+0x27e>
 80039fc:	2302      	movs	r3, #2
 80039fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a02:	e03e      	b.n	8003a82 <UART_SetConfig+0x27e>
 8003a04:	2304      	movs	r3, #4
 8003a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a0a:	e03a      	b.n	8003a82 <UART_SetConfig+0x27e>
 8003a0c:	2308      	movs	r3, #8
 8003a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a12:	e036      	b.n	8003a82 <UART_SetConfig+0x27e>
 8003a14:	2310      	movs	r3, #16
 8003a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a1a:	e032      	b.n	8003a82 <UART_SetConfig+0x27e>
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a30      	ldr	r2, [pc, #192]	; (8003ae4 <UART_SetConfig+0x2e0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d12a      	bne.n	8003a7c <UART_SetConfig+0x278>
 8003a26:	4b31      	ldr	r3, [pc, #196]	; (8003aec <UART_SetConfig+0x2e8>)
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a34:	d01a      	beq.n	8003a6c <UART_SetConfig+0x268>
 8003a36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a3a:	d81b      	bhi.n	8003a74 <UART_SetConfig+0x270>
 8003a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a40:	d00c      	beq.n	8003a5c <UART_SetConfig+0x258>
 8003a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a46:	d815      	bhi.n	8003a74 <UART_SetConfig+0x270>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <UART_SetConfig+0x250>
 8003a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a50:	d008      	beq.n	8003a64 <UART_SetConfig+0x260>
 8003a52:	e00f      	b.n	8003a74 <UART_SetConfig+0x270>
 8003a54:	2300      	movs	r3, #0
 8003a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a5a:	e012      	b.n	8003a82 <UART_SetConfig+0x27e>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a62:	e00e      	b.n	8003a82 <UART_SetConfig+0x27e>
 8003a64:	2304      	movs	r3, #4
 8003a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a6a:	e00a      	b.n	8003a82 <UART_SetConfig+0x27e>
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a72:	e006      	b.n	8003a82 <UART_SetConfig+0x27e>
 8003a74:	2310      	movs	r3, #16
 8003a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a7a:	e002      	b.n	8003a82 <UART_SetConfig+0x27e>
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <UART_SetConfig+0x2e0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	f040 80a8 	bne.w	8003bde <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d834      	bhi.n	8003b00 <UART_SetConfig+0x2fc>
 8003a96:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <UART_SetConfig+0x298>)
 8003a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9c:	08003ac1 	.word	0x08003ac1
 8003aa0:	08003b01 	.word	0x08003b01
 8003aa4:	08003ac9 	.word	0x08003ac9
 8003aa8:	08003b01 	.word	0x08003b01
 8003aac:	08003acf 	.word	0x08003acf
 8003ab0:	08003b01 	.word	0x08003b01
 8003ab4:	08003b01 	.word	0x08003b01
 8003ab8:	08003b01 	.word	0x08003b01
 8003abc:	08003ad7 	.word	0x08003ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac0:	f7ff fb58 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 8003ac4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ac6:	e021      	b.n	8003b0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <UART_SetConfig+0x2f8>)
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003acc:	e01e      	b.n	8003b0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ace:	f7ff fae3 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 8003ad2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ad4:	e01a      	b.n	8003b0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003adc:	e016      	b.n	8003b0c <UART_SetConfig+0x308>
 8003ade:	bf00      	nop
 8003ae0:	cfff69f3 	.word	0xcfff69f3
 8003ae4:	40008000 	.word	0x40008000
 8003ae8:	40013800 	.word	0x40013800
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40004400 	.word	0x40004400
 8003af4:	40004800 	.word	0x40004800
 8003af8:	40004c00 	.word	0x40004c00
 8003afc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 812a 	beq.w	8003d68 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	4a9e      	ldr	r2, [pc, #632]	; (8003d94 <UART_SetConfig+0x590>)
 8003b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	4413      	add	r3, r2
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d305      	bcc.n	8003b44 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d903      	bls.n	8003b4c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b4a:	e10d      	b.n	8003d68 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	2200      	movs	r2, #0
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	60fa      	str	r2, [r7, #12]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	4a8e      	ldr	r2, [pc, #568]	; (8003d94 <UART_SetConfig+0x590>)
 8003b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2200      	movs	r2, #0
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	607a      	str	r2, [r7, #4]
 8003b66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b6e:	f7fc fba7 	bl	80002c0 <__aeabi_uldivmod>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4610      	mov	r0, r2
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	020b      	lsls	r3, r1, #8
 8003b84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b88:	0202      	lsls	r2, r0, #8
 8003b8a:	6979      	ldr	r1, [r7, #20]
 8003b8c:	6849      	ldr	r1, [r1, #4]
 8003b8e:	0849      	lsrs	r1, r1, #1
 8003b90:	2000      	movs	r0, #0
 8003b92:	460c      	mov	r4, r1
 8003b94:	4605      	mov	r5, r0
 8003b96:	eb12 0804 	adds.w	r8, r2, r4
 8003b9a:	eb43 0905 	adc.w	r9, r3, r5
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	469a      	mov	sl, r3
 8003ba6:	4693      	mov	fp, r2
 8003ba8:	4652      	mov	r2, sl
 8003baa:	465b      	mov	r3, fp
 8003bac:	4640      	mov	r0, r8
 8003bae:	4649      	mov	r1, r9
 8003bb0:	f7fc fb86 	bl	80002c0 <__aeabi_uldivmod>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4613      	mov	r3, r2
 8003bba:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc2:	d308      	bcc.n	8003bd6 <UART_SetConfig+0x3d2>
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bca:	d204      	bcs.n	8003bd6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6a3a      	ldr	r2, [r7, #32]
 8003bd2:	60da      	str	r2, [r3, #12]
 8003bd4:	e0c8      	b.n	8003d68 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003bdc:	e0c4      	b.n	8003d68 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be6:	d167      	bne.n	8003cb8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003be8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d828      	bhi.n	8003c42 <UART_SetConfig+0x43e>
 8003bf0:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <UART_SetConfig+0x3f4>)
 8003bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf6:	bf00      	nop
 8003bf8:	08003c1d 	.word	0x08003c1d
 8003bfc:	08003c25 	.word	0x08003c25
 8003c00:	08003c2d 	.word	0x08003c2d
 8003c04:	08003c43 	.word	0x08003c43
 8003c08:	08003c33 	.word	0x08003c33
 8003c0c:	08003c43 	.word	0x08003c43
 8003c10:	08003c43 	.word	0x08003c43
 8003c14:	08003c43 	.word	0x08003c43
 8003c18:	08003c3b 	.word	0x08003c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c1c:	f7ff faaa 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 8003c20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c22:	e014      	b.n	8003c4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c24:	f7ff fabc 	bl	80031a0 <HAL_RCC_GetPCLK2Freq>
 8003c28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c2a:	e010      	b.n	8003c4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c2c:	4b5a      	ldr	r3, [pc, #360]	; (8003d98 <UART_SetConfig+0x594>)
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c30:	e00d      	b.n	8003c4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c32:	f7ff fa31 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 8003c36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c38:	e009      	b.n	8003c4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c40:	e005      	b.n	8003c4e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8089 	beq.w	8003d68 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	4a4e      	ldr	r2, [pc, #312]	; (8003d94 <UART_SetConfig+0x590>)
 8003c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c60:	461a      	mov	r2, r3
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c68:	005a      	lsls	r2, r3, #1
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	441a      	add	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	2b0f      	cmp	r3, #15
 8003c80:	d916      	bls.n	8003cb0 <UART_SetConfig+0x4ac>
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c88:	d212      	bcs.n	8003cb0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f023 030f 	bic.w	r3, r3, #15
 8003c92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	8bfb      	ldrh	r3, [r7, #30]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	8bfa      	ldrh	r2, [r7, #30]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	e05b      	b.n	8003d68 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003cb6:	e057      	b.n	8003d68 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d828      	bhi.n	8003d12 <UART_SetConfig+0x50e>
 8003cc0:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <UART_SetConfig+0x4c4>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003ced 	.word	0x08003ced
 8003ccc:	08003cf5 	.word	0x08003cf5
 8003cd0:	08003cfd 	.word	0x08003cfd
 8003cd4:	08003d13 	.word	0x08003d13
 8003cd8:	08003d03 	.word	0x08003d03
 8003cdc:	08003d13 	.word	0x08003d13
 8003ce0:	08003d13 	.word	0x08003d13
 8003ce4:	08003d13 	.word	0x08003d13
 8003ce8:	08003d0b 	.word	0x08003d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cec:	f7ff fa42 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 8003cf0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cf2:	e014      	b.n	8003d1e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cf4:	f7ff fa54 	bl	80031a0 <HAL_RCC_GetPCLK2Freq>
 8003cf8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cfa:	e010      	b.n	8003d1e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cfc:	4b26      	ldr	r3, [pc, #152]	; (8003d98 <UART_SetConfig+0x594>)
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d00:	e00d      	b.n	8003d1e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d02:	f7ff f9c9 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 8003d06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d08:	e009      	b.n	8003d1e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d10:	e005      	b.n	8003d1e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d1c:	bf00      	nop
    }

    if (pclk != 0U)
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d021      	beq.n	8003d68 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	4a1a      	ldr	r2, [pc, #104]	; (8003d94 <UART_SetConfig+0x590>)
 8003d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	085b      	lsrs	r3, r3, #1
 8003d3c:	441a      	add	r2, r3
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	2b0f      	cmp	r3, #15
 8003d4c:	d909      	bls.n	8003d62 <UART_SetConfig+0x55e>
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d54:	d205      	bcs.n	8003d62 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60da      	str	r2, [r3, #12]
 8003d60:	e002      	b.n	8003d68 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2200      	movs	r2, #0
 8003d82:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003d84:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3730      	adds	r7, #48	; 0x30
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d92:	bf00      	nop
 8003d94:	08005610 	.word	0x08005610
 8003d98:	00f42400 	.word	0x00f42400

08003d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01a      	beq.n	8003eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e9a:	d10a      	bne.n	8003eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	605a      	str	r2, [r3, #4]
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ef0:	f7fd fa7c 	bl	80013ec <HAL_GetTick>
 8003ef4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d10e      	bne.n	8003f22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f82f 	bl	8003f76 <UART_WaitOnFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e025      	b.n	8003f6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d10e      	bne.n	8003f4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f819 	bl	8003f76 <UART_WaitOnFlagUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e00f      	b.n	8003f6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b09c      	sub	sp, #112	; 0x70
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	4613      	mov	r3, r2
 8003f84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f86:	e0a9      	b.n	80040dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8e:	f000 80a5 	beq.w	80040dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f92:	f7fd fa2b 	bl	80013ec <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d302      	bcc.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d140      	bne.n	800402a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fbc:	667b      	str	r3, [r7, #100]	; 0x64
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fc8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003fcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e6      	bne.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3308      	adds	r3, #8
 8003fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ffa:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ffc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1e5      	bne.n	8003fda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e069      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d051      	beq.n	80040dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004046:	d149      	bne.n	80040dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004050:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
 8004072:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e6      	bne.n	8004052 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3308      	adds	r3, #8
 800408a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	613b      	str	r3, [r7, #16]
   return(result);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f023 0301 	bic.w	r3, r3, #1
 800409a:	66bb      	str	r3, [r7, #104]	; 0x68
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3308      	adds	r3, #8
 80040a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040a4:	623a      	str	r2, [r7, #32]
 80040a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	69f9      	ldr	r1, [r7, #28]
 80040aa:	6a3a      	ldr	r2, [r7, #32]
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e5      	bne.n	8004084 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e010      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69da      	ldr	r2, [r3, #28]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	4013      	ands	r3, r2
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	bf0c      	ite	eq
 80040ec:	2301      	moveq	r3, #1
 80040ee:	2300      	movne	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	f43f af46 	beq.w	8003f88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3770      	adds	r7, #112	; 0x70
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004106:	b480      	push	{r7}
 8004108:	b085      	sub	sp, #20
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_UARTEx_DisableFifoMode+0x16>
 8004118:	2302      	movs	r3, #2
 800411a:	e027      	b.n	800416c <HAL_UARTEx_DisableFifoMode+0x66>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2224      	movs	r2, #36	; 0x24
 8004128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800414a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800418c:	2302      	movs	r3, #2
 800418e:	e02d      	b.n	80041ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2224      	movs	r2, #36	; 0x24
 800419c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f84f 	bl	8004270 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004208:	2302      	movs	r3, #2
 800420a:	e02d      	b.n	8004268 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2224      	movs	r2, #36	; 0x24
 8004218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0201 	bic.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f811 	bl	8004270 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800427c:	2b00      	cmp	r3, #0
 800427e:	d108      	bne.n	8004292 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004290:	e031      	b.n	80042f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004292:	2308      	movs	r3, #8
 8004294:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004296:	2308      	movs	r3, #8
 8004298:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	0e5b      	lsrs	r3, r3, #25
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	0f5b      	lsrs	r3, r3, #29
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042ba:	7bbb      	ldrb	r3, [r7, #14]
 80042bc:	7b3a      	ldrb	r2, [r7, #12]
 80042be:	4911      	ldr	r1, [pc, #68]	; (8004304 <UARTEx_SetNbDataToProcess+0x94>)
 80042c0:	5c8a      	ldrb	r2, [r1, r2]
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80042c6:	7b3a      	ldrb	r2, [r7, #12]
 80042c8:	490f      	ldr	r1, [pc, #60]	; (8004308 <UARTEx_SetNbDataToProcess+0x98>)
 80042ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	7b7a      	ldrb	r2, [r7, #13]
 80042dc:	4909      	ldr	r1, [pc, #36]	; (8004304 <UARTEx_SetNbDataToProcess+0x94>)
 80042de:	5c8a      	ldrb	r2, [r1, r2]
 80042e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80042e4:	7b7a      	ldrb	r2, [r7, #13]
 80042e6:	4908      	ldr	r1, [pc, #32]	; (8004308 <UARTEx_SetNbDataToProcess+0x98>)
 80042e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80042f6:	bf00      	nop
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	08005628 	.word	0x08005628
 8004308:	08005630 	.word	0x08005630

0800430c <__errno>:
 800430c:	4b01      	ldr	r3, [pc, #4]	; (8004314 <__errno+0x8>)
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	2000000c 	.word	0x2000000c

08004318 <__libc_init_array>:
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	4d0d      	ldr	r5, [pc, #52]	; (8004350 <__libc_init_array+0x38>)
 800431c:	4c0d      	ldr	r4, [pc, #52]	; (8004354 <__libc_init_array+0x3c>)
 800431e:	1b64      	subs	r4, r4, r5
 8004320:	10a4      	asrs	r4, r4, #2
 8004322:	2600      	movs	r6, #0
 8004324:	42a6      	cmp	r6, r4
 8004326:	d109      	bne.n	800433c <__libc_init_array+0x24>
 8004328:	4d0b      	ldr	r5, [pc, #44]	; (8004358 <__libc_init_array+0x40>)
 800432a:	4c0c      	ldr	r4, [pc, #48]	; (800435c <__libc_init_array+0x44>)
 800432c:	f001 f8fa 	bl	8005524 <_init>
 8004330:	1b64      	subs	r4, r4, r5
 8004332:	10a4      	asrs	r4, r4, #2
 8004334:	2600      	movs	r6, #0
 8004336:	42a6      	cmp	r6, r4
 8004338:	d105      	bne.n	8004346 <__libc_init_array+0x2e>
 800433a:	bd70      	pop	{r4, r5, r6, pc}
 800433c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004340:	4798      	blx	r3
 8004342:	3601      	adds	r6, #1
 8004344:	e7ee      	b.n	8004324 <__libc_init_array+0xc>
 8004346:	f855 3b04 	ldr.w	r3, [r5], #4
 800434a:	4798      	blx	r3
 800434c:	3601      	adds	r6, #1
 800434e:	e7f2      	b.n	8004336 <__libc_init_array+0x1e>
 8004350:	080056d8 	.word	0x080056d8
 8004354:	080056d8 	.word	0x080056d8
 8004358:	080056d8 	.word	0x080056d8
 800435c:	080056dc 	.word	0x080056dc

08004360 <memset>:
 8004360:	4402      	add	r2, r0
 8004362:	4603      	mov	r3, r0
 8004364:	4293      	cmp	r3, r2
 8004366:	d100      	bne.n	800436a <memset+0xa>
 8004368:	4770      	bx	lr
 800436a:	f803 1b01 	strb.w	r1, [r3], #1
 800436e:	e7f9      	b.n	8004364 <memset+0x4>

08004370 <iprintf>:
 8004370:	b40f      	push	{r0, r1, r2, r3}
 8004372:	4b0a      	ldr	r3, [pc, #40]	; (800439c <iprintf+0x2c>)
 8004374:	b513      	push	{r0, r1, r4, lr}
 8004376:	681c      	ldr	r4, [r3, #0]
 8004378:	b124      	cbz	r4, 8004384 <iprintf+0x14>
 800437a:	69a3      	ldr	r3, [r4, #24]
 800437c:	b913      	cbnz	r3, 8004384 <iprintf+0x14>
 800437e:	4620      	mov	r0, r4
 8004380:	f000 fb2c 	bl	80049dc <__sinit>
 8004384:	ab05      	add	r3, sp, #20
 8004386:	9a04      	ldr	r2, [sp, #16]
 8004388:	68a1      	ldr	r1, [r4, #8]
 800438a:	9301      	str	r3, [sp, #4]
 800438c:	4620      	mov	r0, r4
 800438e:	f000 fd3d 	bl	8004e0c <_vfiprintf_r>
 8004392:	b002      	add	sp, #8
 8004394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004398:	b004      	add	sp, #16
 800439a:	4770      	bx	lr
 800439c:	2000000c 	.word	0x2000000c

080043a0 <_puts_r>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	460e      	mov	r6, r1
 80043a4:	4605      	mov	r5, r0
 80043a6:	b118      	cbz	r0, 80043b0 <_puts_r+0x10>
 80043a8:	6983      	ldr	r3, [r0, #24]
 80043aa:	b90b      	cbnz	r3, 80043b0 <_puts_r+0x10>
 80043ac:	f000 fb16 	bl	80049dc <__sinit>
 80043b0:	69ab      	ldr	r3, [r5, #24]
 80043b2:	68ac      	ldr	r4, [r5, #8]
 80043b4:	b913      	cbnz	r3, 80043bc <_puts_r+0x1c>
 80043b6:	4628      	mov	r0, r5
 80043b8:	f000 fb10 	bl	80049dc <__sinit>
 80043bc:	4b2c      	ldr	r3, [pc, #176]	; (8004470 <_puts_r+0xd0>)
 80043be:	429c      	cmp	r4, r3
 80043c0:	d120      	bne.n	8004404 <_puts_r+0x64>
 80043c2:	686c      	ldr	r4, [r5, #4]
 80043c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043c6:	07db      	lsls	r3, r3, #31
 80043c8:	d405      	bmi.n	80043d6 <_puts_r+0x36>
 80043ca:	89a3      	ldrh	r3, [r4, #12]
 80043cc:	0598      	lsls	r0, r3, #22
 80043ce:	d402      	bmi.n	80043d6 <_puts_r+0x36>
 80043d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043d2:	f000 fba1 	bl	8004b18 <__retarget_lock_acquire_recursive>
 80043d6:	89a3      	ldrh	r3, [r4, #12]
 80043d8:	0719      	lsls	r1, r3, #28
 80043da:	d51d      	bpl.n	8004418 <_puts_r+0x78>
 80043dc:	6923      	ldr	r3, [r4, #16]
 80043de:	b1db      	cbz	r3, 8004418 <_puts_r+0x78>
 80043e0:	3e01      	subs	r6, #1
 80043e2:	68a3      	ldr	r3, [r4, #8]
 80043e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043e8:	3b01      	subs	r3, #1
 80043ea:	60a3      	str	r3, [r4, #8]
 80043ec:	bb39      	cbnz	r1, 800443e <_puts_r+0x9e>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	da38      	bge.n	8004464 <_puts_r+0xc4>
 80043f2:	4622      	mov	r2, r4
 80043f4:	210a      	movs	r1, #10
 80043f6:	4628      	mov	r0, r5
 80043f8:	f000 f916 	bl	8004628 <__swbuf_r>
 80043fc:	3001      	adds	r0, #1
 80043fe:	d011      	beq.n	8004424 <_puts_r+0x84>
 8004400:	250a      	movs	r5, #10
 8004402:	e011      	b.n	8004428 <_puts_r+0x88>
 8004404:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <_puts_r+0xd4>)
 8004406:	429c      	cmp	r4, r3
 8004408:	d101      	bne.n	800440e <_puts_r+0x6e>
 800440a:	68ac      	ldr	r4, [r5, #8]
 800440c:	e7da      	b.n	80043c4 <_puts_r+0x24>
 800440e:	4b1a      	ldr	r3, [pc, #104]	; (8004478 <_puts_r+0xd8>)
 8004410:	429c      	cmp	r4, r3
 8004412:	bf08      	it	eq
 8004414:	68ec      	ldreq	r4, [r5, #12]
 8004416:	e7d5      	b.n	80043c4 <_puts_r+0x24>
 8004418:	4621      	mov	r1, r4
 800441a:	4628      	mov	r0, r5
 800441c:	f000 f956 	bl	80046cc <__swsetup_r>
 8004420:	2800      	cmp	r0, #0
 8004422:	d0dd      	beq.n	80043e0 <_puts_r+0x40>
 8004424:	f04f 35ff 	mov.w	r5, #4294967295
 8004428:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800442a:	07da      	lsls	r2, r3, #31
 800442c:	d405      	bmi.n	800443a <_puts_r+0x9a>
 800442e:	89a3      	ldrh	r3, [r4, #12]
 8004430:	059b      	lsls	r3, r3, #22
 8004432:	d402      	bmi.n	800443a <_puts_r+0x9a>
 8004434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004436:	f000 fb70 	bl	8004b1a <__retarget_lock_release_recursive>
 800443a:	4628      	mov	r0, r5
 800443c:	bd70      	pop	{r4, r5, r6, pc}
 800443e:	2b00      	cmp	r3, #0
 8004440:	da04      	bge.n	800444c <_puts_r+0xac>
 8004442:	69a2      	ldr	r2, [r4, #24]
 8004444:	429a      	cmp	r2, r3
 8004446:	dc06      	bgt.n	8004456 <_puts_r+0xb6>
 8004448:	290a      	cmp	r1, #10
 800444a:	d004      	beq.n	8004456 <_puts_r+0xb6>
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	6022      	str	r2, [r4, #0]
 8004452:	7019      	strb	r1, [r3, #0]
 8004454:	e7c5      	b.n	80043e2 <_puts_r+0x42>
 8004456:	4622      	mov	r2, r4
 8004458:	4628      	mov	r0, r5
 800445a:	f000 f8e5 	bl	8004628 <__swbuf_r>
 800445e:	3001      	adds	r0, #1
 8004460:	d1bf      	bne.n	80043e2 <_puts_r+0x42>
 8004462:	e7df      	b.n	8004424 <_puts_r+0x84>
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	250a      	movs	r5, #10
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	6022      	str	r2, [r4, #0]
 800446c:	701d      	strb	r5, [r3, #0]
 800446e:	e7db      	b.n	8004428 <_puts_r+0x88>
 8004470:	0800565c 	.word	0x0800565c
 8004474:	0800567c 	.word	0x0800567c
 8004478:	0800563c 	.word	0x0800563c

0800447c <puts>:
 800447c:	4b02      	ldr	r3, [pc, #8]	; (8004488 <puts+0xc>)
 800447e:	4601      	mov	r1, r0
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	f7ff bf8d 	b.w	80043a0 <_puts_r>
 8004486:	bf00      	nop
 8004488:	2000000c 	.word	0x2000000c

0800448c <setbuf>:
 800448c:	2900      	cmp	r1, #0
 800448e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004492:	bf0c      	ite	eq
 8004494:	2202      	moveq	r2, #2
 8004496:	2200      	movne	r2, #0
 8004498:	f000 b800 	b.w	800449c <setvbuf>

0800449c <setvbuf>:
 800449c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80044a0:	461d      	mov	r5, r3
 80044a2:	4b5d      	ldr	r3, [pc, #372]	; (8004618 <setvbuf+0x17c>)
 80044a4:	681f      	ldr	r7, [r3, #0]
 80044a6:	4604      	mov	r4, r0
 80044a8:	460e      	mov	r6, r1
 80044aa:	4690      	mov	r8, r2
 80044ac:	b127      	cbz	r7, 80044b8 <setvbuf+0x1c>
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	b913      	cbnz	r3, 80044b8 <setvbuf+0x1c>
 80044b2:	4638      	mov	r0, r7
 80044b4:	f000 fa92 	bl	80049dc <__sinit>
 80044b8:	4b58      	ldr	r3, [pc, #352]	; (800461c <setvbuf+0x180>)
 80044ba:	429c      	cmp	r4, r3
 80044bc:	d167      	bne.n	800458e <setvbuf+0xf2>
 80044be:	687c      	ldr	r4, [r7, #4]
 80044c0:	f1b8 0f02 	cmp.w	r8, #2
 80044c4:	d006      	beq.n	80044d4 <setvbuf+0x38>
 80044c6:	f1b8 0f01 	cmp.w	r8, #1
 80044ca:	f200 809f 	bhi.w	800460c <setvbuf+0x170>
 80044ce:	2d00      	cmp	r5, #0
 80044d0:	f2c0 809c 	blt.w	800460c <setvbuf+0x170>
 80044d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044d6:	07db      	lsls	r3, r3, #31
 80044d8:	d405      	bmi.n	80044e6 <setvbuf+0x4a>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	0598      	lsls	r0, r3, #22
 80044de:	d402      	bmi.n	80044e6 <setvbuf+0x4a>
 80044e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044e2:	f000 fb19 	bl	8004b18 <__retarget_lock_acquire_recursive>
 80044e6:	4621      	mov	r1, r4
 80044e8:	4638      	mov	r0, r7
 80044ea:	f000 f9e3 	bl	80048b4 <_fflush_r>
 80044ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044f0:	b141      	cbz	r1, 8004504 <setvbuf+0x68>
 80044f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044f6:	4299      	cmp	r1, r3
 80044f8:	d002      	beq.n	8004500 <setvbuf+0x64>
 80044fa:	4638      	mov	r0, r7
 80044fc:	f000 fb7c 	bl	8004bf8 <_free_r>
 8004500:	2300      	movs	r3, #0
 8004502:	6363      	str	r3, [r4, #52]	; 0x34
 8004504:	2300      	movs	r3, #0
 8004506:	61a3      	str	r3, [r4, #24]
 8004508:	6063      	str	r3, [r4, #4]
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	0619      	lsls	r1, r3, #24
 800450e:	d503      	bpl.n	8004518 <setvbuf+0x7c>
 8004510:	6921      	ldr	r1, [r4, #16]
 8004512:	4638      	mov	r0, r7
 8004514:	f000 fb70 	bl	8004bf8 <_free_r>
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800451e:	f023 0303 	bic.w	r3, r3, #3
 8004522:	f1b8 0f02 	cmp.w	r8, #2
 8004526:	81a3      	strh	r3, [r4, #12]
 8004528:	d06c      	beq.n	8004604 <setvbuf+0x168>
 800452a:	ab01      	add	r3, sp, #4
 800452c:	466a      	mov	r2, sp
 800452e:	4621      	mov	r1, r4
 8004530:	4638      	mov	r0, r7
 8004532:	f000 faf3 	bl	8004b1c <__swhatbuf_r>
 8004536:	89a3      	ldrh	r3, [r4, #12]
 8004538:	4318      	orrs	r0, r3
 800453a:	81a0      	strh	r0, [r4, #12]
 800453c:	2d00      	cmp	r5, #0
 800453e:	d130      	bne.n	80045a2 <setvbuf+0x106>
 8004540:	9d00      	ldr	r5, [sp, #0]
 8004542:	4628      	mov	r0, r5
 8004544:	f000 fb50 	bl	8004be8 <malloc>
 8004548:	4606      	mov	r6, r0
 800454a:	2800      	cmp	r0, #0
 800454c:	d155      	bne.n	80045fa <setvbuf+0x15e>
 800454e:	f8dd 9000 	ldr.w	r9, [sp]
 8004552:	45a9      	cmp	r9, r5
 8004554:	d14a      	bne.n	80045ec <setvbuf+0x150>
 8004556:	f04f 35ff 	mov.w	r5, #4294967295
 800455a:	2200      	movs	r2, #0
 800455c:	60a2      	str	r2, [r4, #8]
 800455e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004562:	6022      	str	r2, [r4, #0]
 8004564:	6122      	str	r2, [r4, #16]
 8004566:	2201      	movs	r2, #1
 8004568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800456c:	6162      	str	r2, [r4, #20]
 800456e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004570:	f043 0302 	orr.w	r3, r3, #2
 8004574:	07d2      	lsls	r2, r2, #31
 8004576:	81a3      	strh	r3, [r4, #12]
 8004578:	d405      	bmi.n	8004586 <setvbuf+0xea>
 800457a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800457e:	d102      	bne.n	8004586 <setvbuf+0xea>
 8004580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004582:	f000 faca 	bl	8004b1a <__retarget_lock_release_recursive>
 8004586:	4628      	mov	r0, r5
 8004588:	b003      	add	sp, #12
 800458a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800458e:	4b24      	ldr	r3, [pc, #144]	; (8004620 <setvbuf+0x184>)
 8004590:	429c      	cmp	r4, r3
 8004592:	d101      	bne.n	8004598 <setvbuf+0xfc>
 8004594:	68bc      	ldr	r4, [r7, #8]
 8004596:	e793      	b.n	80044c0 <setvbuf+0x24>
 8004598:	4b22      	ldr	r3, [pc, #136]	; (8004624 <setvbuf+0x188>)
 800459a:	429c      	cmp	r4, r3
 800459c:	bf08      	it	eq
 800459e:	68fc      	ldreq	r4, [r7, #12]
 80045a0:	e78e      	b.n	80044c0 <setvbuf+0x24>
 80045a2:	2e00      	cmp	r6, #0
 80045a4:	d0cd      	beq.n	8004542 <setvbuf+0xa6>
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	b913      	cbnz	r3, 80045b0 <setvbuf+0x114>
 80045aa:	4638      	mov	r0, r7
 80045ac:	f000 fa16 	bl	80049dc <__sinit>
 80045b0:	f1b8 0f01 	cmp.w	r8, #1
 80045b4:	bf08      	it	eq
 80045b6:	89a3      	ldrheq	r3, [r4, #12]
 80045b8:	6026      	str	r6, [r4, #0]
 80045ba:	bf04      	itt	eq
 80045bc:	f043 0301 	orreq.w	r3, r3, #1
 80045c0:	81a3      	strheq	r3, [r4, #12]
 80045c2:	89a2      	ldrh	r2, [r4, #12]
 80045c4:	f012 0308 	ands.w	r3, r2, #8
 80045c8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80045cc:	d01c      	beq.n	8004608 <setvbuf+0x16c>
 80045ce:	07d3      	lsls	r3, r2, #31
 80045d0:	bf41      	itttt	mi
 80045d2:	2300      	movmi	r3, #0
 80045d4:	426d      	negmi	r5, r5
 80045d6:	60a3      	strmi	r3, [r4, #8]
 80045d8:	61a5      	strmi	r5, [r4, #24]
 80045da:	bf58      	it	pl
 80045dc:	60a5      	strpl	r5, [r4, #8]
 80045de:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80045e0:	f015 0501 	ands.w	r5, r5, #1
 80045e4:	d115      	bne.n	8004612 <setvbuf+0x176>
 80045e6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80045ea:	e7c8      	b.n	800457e <setvbuf+0xe2>
 80045ec:	4648      	mov	r0, r9
 80045ee:	f000 fafb 	bl	8004be8 <malloc>
 80045f2:	4606      	mov	r6, r0
 80045f4:	2800      	cmp	r0, #0
 80045f6:	d0ae      	beq.n	8004556 <setvbuf+0xba>
 80045f8:	464d      	mov	r5, r9
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004600:	81a3      	strh	r3, [r4, #12]
 8004602:	e7d0      	b.n	80045a6 <setvbuf+0x10a>
 8004604:	2500      	movs	r5, #0
 8004606:	e7a8      	b.n	800455a <setvbuf+0xbe>
 8004608:	60a3      	str	r3, [r4, #8]
 800460a:	e7e8      	b.n	80045de <setvbuf+0x142>
 800460c:	f04f 35ff 	mov.w	r5, #4294967295
 8004610:	e7b9      	b.n	8004586 <setvbuf+0xea>
 8004612:	2500      	movs	r5, #0
 8004614:	e7b7      	b.n	8004586 <setvbuf+0xea>
 8004616:	bf00      	nop
 8004618:	2000000c 	.word	0x2000000c
 800461c:	0800565c 	.word	0x0800565c
 8004620:	0800567c 	.word	0x0800567c
 8004624:	0800563c 	.word	0x0800563c

08004628 <__swbuf_r>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	460e      	mov	r6, r1
 800462c:	4614      	mov	r4, r2
 800462e:	4605      	mov	r5, r0
 8004630:	b118      	cbz	r0, 800463a <__swbuf_r+0x12>
 8004632:	6983      	ldr	r3, [r0, #24]
 8004634:	b90b      	cbnz	r3, 800463a <__swbuf_r+0x12>
 8004636:	f000 f9d1 	bl	80049dc <__sinit>
 800463a:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <__swbuf_r+0x98>)
 800463c:	429c      	cmp	r4, r3
 800463e:	d12b      	bne.n	8004698 <__swbuf_r+0x70>
 8004640:	686c      	ldr	r4, [r5, #4]
 8004642:	69a3      	ldr	r3, [r4, #24]
 8004644:	60a3      	str	r3, [r4, #8]
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	071a      	lsls	r2, r3, #28
 800464a:	d52f      	bpl.n	80046ac <__swbuf_r+0x84>
 800464c:	6923      	ldr	r3, [r4, #16]
 800464e:	b36b      	cbz	r3, 80046ac <__swbuf_r+0x84>
 8004650:	6923      	ldr	r3, [r4, #16]
 8004652:	6820      	ldr	r0, [r4, #0]
 8004654:	1ac0      	subs	r0, r0, r3
 8004656:	6963      	ldr	r3, [r4, #20]
 8004658:	b2f6      	uxtb	r6, r6
 800465a:	4283      	cmp	r3, r0
 800465c:	4637      	mov	r7, r6
 800465e:	dc04      	bgt.n	800466a <__swbuf_r+0x42>
 8004660:	4621      	mov	r1, r4
 8004662:	4628      	mov	r0, r5
 8004664:	f000 f926 	bl	80048b4 <_fflush_r>
 8004668:	bb30      	cbnz	r0, 80046b8 <__swbuf_r+0x90>
 800466a:	68a3      	ldr	r3, [r4, #8]
 800466c:	3b01      	subs	r3, #1
 800466e:	60a3      	str	r3, [r4, #8]
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	6022      	str	r2, [r4, #0]
 8004676:	701e      	strb	r6, [r3, #0]
 8004678:	6963      	ldr	r3, [r4, #20]
 800467a:	3001      	adds	r0, #1
 800467c:	4283      	cmp	r3, r0
 800467e:	d004      	beq.n	800468a <__swbuf_r+0x62>
 8004680:	89a3      	ldrh	r3, [r4, #12]
 8004682:	07db      	lsls	r3, r3, #31
 8004684:	d506      	bpl.n	8004694 <__swbuf_r+0x6c>
 8004686:	2e0a      	cmp	r6, #10
 8004688:	d104      	bne.n	8004694 <__swbuf_r+0x6c>
 800468a:	4621      	mov	r1, r4
 800468c:	4628      	mov	r0, r5
 800468e:	f000 f911 	bl	80048b4 <_fflush_r>
 8004692:	b988      	cbnz	r0, 80046b8 <__swbuf_r+0x90>
 8004694:	4638      	mov	r0, r7
 8004696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <__swbuf_r+0x9c>)
 800469a:	429c      	cmp	r4, r3
 800469c:	d101      	bne.n	80046a2 <__swbuf_r+0x7a>
 800469e:	68ac      	ldr	r4, [r5, #8]
 80046a0:	e7cf      	b.n	8004642 <__swbuf_r+0x1a>
 80046a2:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <__swbuf_r+0xa0>)
 80046a4:	429c      	cmp	r4, r3
 80046a6:	bf08      	it	eq
 80046a8:	68ec      	ldreq	r4, [r5, #12]
 80046aa:	e7ca      	b.n	8004642 <__swbuf_r+0x1a>
 80046ac:	4621      	mov	r1, r4
 80046ae:	4628      	mov	r0, r5
 80046b0:	f000 f80c 	bl	80046cc <__swsetup_r>
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d0cb      	beq.n	8004650 <__swbuf_r+0x28>
 80046b8:	f04f 37ff 	mov.w	r7, #4294967295
 80046bc:	e7ea      	b.n	8004694 <__swbuf_r+0x6c>
 80046be:	bf00      	nop
 80046c0:	0800565c 	.word	0x0800565c
 80046c4:	0800567c 	.word	0x0800567c
 80046c8:	0800563c 	.word	0x0800563c

080046cc <__swsetup_r>:
 80046cc:	4b32      	ldr	r3, [pc, #200]	; (8004798 <__swsetup_r+0xcc>)
 80046ce:	b570      	push	{r4, r5, r6, lr}
 80046d0:	681d      	ldr	r5, [r3, #0]
 80046d2:	4606      	mov	r6, r0
 80046d4:	460c      	mov	r4, r1
 80046d6:	b125      	cbz	r5, 80046e2 <__swsetup_r+0x16>
 80046d8:	69ab      	ldr	r3, [r5, #24]
 80046da:	b913      	cbnz	r3, 80046e2 <__swsetup_r+0x16>
 80046dc:	4628      	mov	r0, r5
 80046de:	f000 f97d 	bl	80049dc <__sinit>
 80046e2:	4b2e      	ldr	r3, [pc, #184]	; (800479c <__swsetup_r+0xd0>)
 80046e4:	429c      	cmp	r4, r3
 80046e6:	d10f      	bne.n	8004708 <__swsetup_r+0x3c>
 80046e8:	686c      	ldr	r4, [r5, #4]
 80046ea:	89a3      	ldrh	r3, [r4, #12]
 80046ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046f0:	0719      	lsls	r1, r3, #28
 80046f2:	d42c      	bmi.n	800474e <__swsetup_r+0x82>
 80046f4:	06dd      	lsls	r5, r3, #27
 80046f6:	d411      	bmi.n	800471c <__swsetup_r+0x50>
 80046f8:	2309      	movs	r3, #9
 80046fa:	6033      	str	r3, [r6, #0]
 80046fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004700:	81a3      	strh	r3, [r4, #12]
 8004702:	f04f 30ff 	mov.w	r0, #4294967295
 8004706:	e03e      	b.n	8004786 <__swsetup_r+0xba>
 8004708:	4b25      	ldr	r3, [pc, #148]	; (80047a0 <__swsetup_r+0xd4>)
 800470a:	429c      	cmp	r4, r3
 800470c:	d101      	bne.n	8004712 <__swsetup_r+0x46>
 800470e:	68ac      	ldr	r4, [r5, #8]
 8004710:	e7eb      	b.n	80046ea <__swsetup_r+0x1e>
 8004712:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <__swsetup_r+0xd8>)
 8004714:	429c      	cmp	r4, r3
 8004716:	bf08      	it	eq
 8004718:	68ec      	ldreq	r4, [r5, #12]
 800471a:	e7e6      	b.n	80046ea <__swsetup_r+0x1e>
 800471c:	0758      	lsls	r0, r3, #29
 800471e:	d512      	bpl.n	8004746 <__swsetup_r+0x7a>
 8004720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004722:	b141      	cbz	r1, 8004736 <__swsetup_r+0x6a>
 8004724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004728:	4299      	cmp	r1, r3
 800472a:	d002      	beq.n	8004732 <__swsetup_r+0x66>
 800472c:	4630      	mov	r0, r6
 800472e:	f000 fa63 	bl	8004bf8 <_free_r>
 8004732:	2300      	movs	r3, #0
 8004734:	6363      	str	r3, [r4, #52]	; 0x34
 8004736:	89a3      	ldrh	r3, [r4, #12]
 8004738:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800473c:	81a3      	strh	r3, [r4, #12]
 800473e:	2300      	movs	r3, #0
 8004740:	6063      	str	r3, [r4, #4]
 8004742:	6923      	ldr	r3, [r4, #16]
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	f043 0308 	orr.w	r3, r3, #8
 800474c:	81a3      	strh	r3, [r4, #12]
 800474e:	6923      	ldr	r3, [r4, #16]
 8004750:	b94b      	cbnz	r3, 8004766 <__swsetup_r+0x9a>
 8004752:	89a3      	ldrh	r3, [r4, #12]
 8004754:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800475c:	d003      	beq.n	8004766 <__swsetup_r+0x9a>
 800475e:	4621      	mov	r1, r4
 8004760:	4630      	mov	r0, r6
 8004762:	f000 fa01 	bl	8004b68 <__smakebuf_r>
 8004766:	89a0      	ldrh	r0, [r4, #12]
 8004768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800476c:	f010 0301 	ands.w	r3, r0, #1
 8004770:	d00a      	beq.n	8004788 <__swsetup_r+0xbc>
 8004772:	2300      	movs	r3, #0
 8004774:	60a3      	str	r3, [r4, #8]
 8004776:	6963      	ldr	r3, [r4, #20]
 8004778:	425b      	negs	r3, r3
 800477a:	61a3      	str	r3, [r4, #24]
 800477c:	6923      	ldr	r3, [r4, #16]
 800477e:	b943      	cbnz	r3, 8004792 <__swsetup_r+0xc6>
 8004780:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004784:	d1ba      	bne.n	80046fc <__swsetup_r+0x30>
 8004786:	bd70      	pop	{r4, r5, r6, pc}
 8004788:	0781      	lsls	r1, r0, #30
 800478a:	bf58      	it	pl
 800478c:	6963      	ldrpl	r3, [r4, #20]
 800478e:	60a3      	str	r3, [r4, #8]
 8004790:	e7f4      	b.n	800477c <__swsetup_r+0xb0>
 8004792:	2000      	movs	r0, #0
 8004794:	e7f7      	b.n	8004786 <__swsetup_r+0xba>
 8004796:	bf00      	nop
 8004798:	2000000c 	.word	0x2000000c
 800479c:	0800565c 	.word	0x0800565c
 80047a0:	0800567c 	.word	0x0800567c
 80047a4:	0800563c 	.word	0x0800563c

080047a8 <__sflush_r>:
 80047a8:	898a      	ldrh	r2, [r1, #12]
 80047aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047ae:	4605      	mov	r5, r0
 80047b0:	0710      	lsls	r0, r2, #28
 80047b2:	460c      	mov	r4, r1
 80047b4:	d458      	bmi.n	8004868 <__sflush_r+0xc0>
 80047b6:	684b      	ldr	r3, [r1, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	dc05      	bgt.n	80047c8 <__sflush_r+0x20>
 80047bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	dc02      	bgt.n	80047c8 <__sflush_r+0x20>
 80047c2:	2000      	movs	r0, #0
 80047c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047ca:	2e00      	cmp	r6, #0
 80047cc:	d0f9      	beq.n	80047c2 <__sflush_r+0x1a>
 80047ce:	2300      	movs	r3, #0
 80047d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047d4:	682f      	ldr	r7, [r5, #0]
 80047d6:	602b      	str	r3, [r5, #0]
 80047d8:	d032      	beq.n	8004840 <__sflush_r+0x98>
 80047da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047dc:	89a3      	ldrh	r3, [r4, #12]
 80047de:	075a      	lsls	r2, r3, #29
 80047e0:	d505      	bpl.n	80047ee <__sflush_r+0x46>
 80047e2:	6863      	ldr	r3, [r4, #4]
 80047e4:	1ac0      	subs	r0, r0, r3
 80047e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047e8:	b10b      	cbz	r3, 80047ee <__sflush_r+0x46>
 80047ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047ec:	1ac0      	subs	r0, r0, r3
 80047ee:	2300      	movs	r3, #0
 80047f0:	4602      	mov	r2, r0
 80047f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047f4:	6a21      	ldr	r1, [r4, #32]
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b0      	blx	r6
 80047fa:	1c43      	adds	r3, r0, #1
 80047fc:	89a3      	ldrh	r3, [r4, #12]
 80047fe:	d106      	bne.n	800480e <__sflush_r+0x66>
 8004800:	6829      	ldr	r1, [r5, #0]
 8004802:	291d      	cmp	r1, #29
 8004804:	d82c      	bhi.n	8004860 <__sflush_r+0xb8>
 8004806:	4a2a      	ldr	r2, [pc, #168]	; (80048b0 <__sflush_r+0x108>)
 8004808:	40ca      	lsrs	r2, r1
 800480a:	07d6      	lsls	r6, r2, #31
 800480c:	d528      	bpl.n	8004860 <__sflush_r+0xb8>
 800480e:	2200      	movs	r2, #0
 8004810:	6062      	str	r2, [r4, #4]
 8004812:	04d9      	lsls	r1, r3, #19
 8004814:	6922      	ldr	r2, [r4, #16]
 8004816:	6022      	str	r2, [r4, #0]
 8004818:	d504      	bpl.n	8004824 <__sflush_r+0x7c>
 800481a:	1c42      	adds	r2, r0, #1
 800481c:	d101      	bne.n	8004822 <__sflush_r+0x7a>
 800481e:	682b      	ldr	r3, [r5, #0]
 8004820:	b903      	cbnz	r3, 8004824 <__sflush_r+0x7c>
 8004822:	6560      	str	r0, [r4, #84]	; 0x54
 8004824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004826:	602f      	str	r7, [r5, #0]
 8004828:	2900      	cmp	r1, #0
 800482a:	d0ca      	beq.n	80047c2 <__sflush_r+0x1a>
 800482c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004830:	4299      	cmp	r1, r3
 8004832:	d002      	beq.n	800483a <__sflush_r+0x92>
 8004834:	4628      	mov	r0, r5
 8004836:	f000 f9df 	bl	8004bf8 <_free_r>
 800483a:	2000      	movs	r0, #0
 800483c:	6360      	str	r0, [r4, #52]	; 0x34
 800483e:	e7c1      	b.n	80047c4 <__sflush_r+0x1c>
 8004840:	6a21      	ldr	r1, [r4, #32]
 8004842:	2301      	movs	r3, #1
 8004844:	4628      	mov	r0, r5
 8004846:	47b0      	blx	r6
 8004848:	1c41      	adds	r1, r0, #1
 800484a:	d1c7      	bne.n	80047dc <__sflush_r+0x34>
 800484c:	682b      	ldr	r3, [r5, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0c4      	beq.n	80047dc <__sflush_r+0x34>
 8004852:	2b1d      	cmp	r3, #29
 8004854:	d001      	beq.n	800485a <__sflush_r+0xb2>
 8004856:	2b16      	cmp	r3, #22
 8004858:	d101      	bne.n	800485e <__sflush_r+0xb6>
 800485a:	602f      	str	r7, [r5, #0]
 800485c:	e7b1      	b.n	80047c2 <__sflush_r+0x1a>
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004864:	81a3      	strh	r3, [r4, #12]
 8004866:	e7ad      	b.n	80047c4 <__sflush_r+0x1c>
 8004868:	690f      	ldr	r7, [r1, #16]
 800486a:	2f00      	cmp	r7, #0
 800486c:	d0a9      	beq.n	80047c2 <__sflush_r+0x1a>
 800486e:	0793      	lsls	r3, r2, #30
 8004870:	680e      	ldr	r6, [r1, #0]
 8004872:	bf08      	it	eq
 8004874:	694b      	ldreq	r3, [r1, #20]
 8004876:	600f      	str	r7, [r1, #0]
 8004878:	bf18      	it	ne
 800487a:	2300      	movne	r3, #0
 800487c:	eba6 0807 	sub.w	r8, r6, r7
 8004880:	608b      	str	r3, [r1, #8]
 8004882:	f1b8 0f00 	cmp.w	r8, #0
 8004886:	dd9c      	ble.n	80047c2 <__sflush_r+0x1a>
 8004888:	6a21      	ldr	r1, [r4, #32]
 800488a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800488c:	4643      	mov	r3, r8
 800488e:	463a      	mov	r2, r7
 8004890:	4628      	mov	r0, r5
 8004892:	47b0      	blx	r6
 8004894:	2800      	cmp	r0, #0
 8004896:	dc06      	bgt.n	80048a6 <__sflush_r+0xfe>
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800489e:	81a3      	strh	r3, [r4, #12]
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	e78e      	b.n	80047c4 <__sflush_r+0x1c>
 80048a6:	4407      	add	r7, r0
 80048a8:	eba8 0800 	sub.w	r8, r8, r0
 80048ac:	e7e9      	b.n	8004882 <__sflush_r+0xda>
 80048ae:	bf00      	nop
 80048b0:	20400001 	.word	0x20400001

080048b4 <_fflush_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	690b      	ldr	r3, [r1, #16]
 80048b8:	4605      	mov	r5, r0
 80048ba:	460c      	mov	r4, r1
 80048bc:	b913      	cbnz	r3, 80048c4 <_fflush_r+0x10>
 80048be:	2500      	movs	r5, #0
 80048c0:	4628      	mov	r0, r5
 80048c2:	bd38      	pop	{r3, r4, r5, pc}
 80048c4:	b118      	cbz	r0, 80048ce <_fflush_r+0x1a>
 80048c6:	6983      	ldr	r3, [r0, #24]
 80048c8:	b90b      	cbnz	r3, 80048ce <_fflush_r+0x1a>
 80048ca:	f000 f887 	bl	80049dc <__sinit>
 80048ce:	4b14      	ldr	r3, [pc, #80]	; (8004920 <_fflush_r+0x6c>)
 80048d0:	429c      	cmp	r4, r3
 80048d2:	d11b      	bne.n	800490c <_fflush_r+0x58>
 80048d4:	686c      	ldr	r4, [r5, #4]
 80048d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0ef      	beq.n	80048be <_fflush_r+0xa>
 80048de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048e0:	07d0      	lsls	r0, r2, #31
 80048e2:	d404      	bmi.n	80048ee <_fflush_r+0x3a>
 80048e4:	0599      	lsls	r1, r3, #22
 80048e6:	d402      	bmi.n	80048ee <_fflush_r+0x3a>
 80048e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ea:	f000 f915 	bl	8004b18 <__retarget_lock_acquire_recursive>
 80048ee:	4628      	mov	r0, r5
 80048f0:	4621      	mov	r1, r4
 80048f2:	f7ff ff59 	bl	80047a8 <__sflush_r>
 80048f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048f8:	07da      	lsls	r2, r3, #31
 80048fa:	4605      	mov	r5, r0
 80048fc:	d4e0      	bmi.n	80048c0 <_fflush_r+0xc>
 80048fe:	89a3      	ldrh	r3, [r4, #12]
 8004900:	059b      	lsls	r3, r3, #22
 8004902:	d4dd      	bmi.n	80048c0 <_fflush_r+0xc>
 8004904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004906:	f000 f908 	bl	8004b1a <__retarget_lock_release_recursive>
 800490a:	e7d9      	b.n	80048c0 <_fflush_r+0xc>
 800490c:	4b05      	ldr	r3, [pc, #20]	; (8004924 <_fflush_r+0x70>)
 800490e:	429c      	cmp	r4, r3
 8004910:	d101      	bne.n	8004916 <_fflush_r+0x62>
 8004912:	68ac      	ldr	r4, [r5, #8]
 8004914:	e7df      	b.n	80048d6 <_fflush_r+0x22>
 8004916:	4b04      	ldr	r3, [pc, #16]	; (8004928 <_fflush_r+0x74>)
 8004918:	429c      	cmp	r4, r3
 800491a:	bf08      	it	eq
 800491c:	68ec      	ldreq	r4, [r5, #12]
 800491e:	e7da      	b.n	80048d6 <_fflush_r+0x22>
 8004920:	0800565c 	.word	0x0800565c
 8004924:	0800567c 	.word	0x0800567c
 8004928:	0800563c 	.word	0x0800563c

0800492c <std>:
 800492c:	2300      	movs	r3, #0
 800492e:	b510      	push	{r4, lr}
 8004930:	4604      	mov	r4, r0
 8004932:	e9c0 3300 	strd	r3, r3, [r0]
 8004936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800493a:	6083      	str	r3, [r0, #8]
 800493c:	8181      	strh	r1, [r0, #12]
 800493e:	6643      	str	r3, [r0, #100]	; 0x64
 8004940:	81c2      	strh	r2, [r0, #14]
 8004942:	6183      	str	r3, [r0, #24]
 8004944:	4619      	mov	r1, r3
 8004946:	2208      	movs	r2, #8
 8004948:	305c      	adds	r0, #92	; 0x5c
 800494a:	f7ff fd09 	bl	8004360 <memset>
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <std+0x38>)
 8004950:	6263      	str	r3, [r4, #36]	; 0x24
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <std+0x3c>)
 8004954:	62a3      	str	r3, [r4, #40]	; 0x28
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <std+0x40>)
 8004958:	62e3      	str	r3, [r4, #44]	; 0x2c
 800495a:	4b05      	ldr	r3, [pc, #20]	; (8004970 <std+0x44>)
 800495c:	6224      	str	r4, [r4, #32]
 800495e:	6323      	str	r3, [r4, #48]	; 0x30
 8004960:	bd10      	pop	{r4, pc}
 8004962:	bf00      	nop
 8004964:	080053b5 	.word	0x080053b5
 8004968:	080053d7 	.word	0x080053d7
 800496c:	0800540f 	.word	0x0800540f
 8004970:	08005433 	.word	0x08005433

08004974 <_cleanup_r>:
 8004974:	4901      	ldr	r1, [pc, #4]	; (800497c <_cleanup_r+0x8>)
 8004976:	f000 b8af 	b.w	8004ad8 <_fwalk_reent>
 800497a:	bf00      	nop
 800497c:	080048b5 	.word	0x080048b5

08004980 <__sfmoreglue>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	2268      	movs	r2, #104	; 0x68
 8004984:	1e4d      	subs	r5, r1, #1
 8004986:	4355      	muls	r5, r2
 8004988:	460e      	mov	r6, r1
 800498a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800498e:	f000 f99f 	bl	8004cd0 <_malloc_r>
 8004992:	4604      	mov	r4, r0
 8004994:	b140      	cbz	r0, 80049a8 <__sfmoreglue+0x28>
 8004996:	2100      	movs	r1, #0
 8004998:	e9c0 1600 	strd	r1, r6, [r0]
 800499c:	300c      	adds	r0, #12
 800499e:	60a0      	str	r0, [r4, #8]
 80049a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049a4:	f7ff fcdc 	bl	8004360 <memset>
 80049a8:	4620      	mov	r0, r4
 80049aa:	bd70      	pop	{r4, r5, r6, pc}

080049ac <__sfp_lock_acquire>:
 80049ac:	4801      	ldr	r0, [pc, #4]	; (80049b4 <__sfp_lock_acquire+0x8>)
 80049ae:	f000 b8b3 	b.w	8004b18 <__retarget_lock_acquire_recursive>
 80049b2:	bf00      	nop
 80049b4:	200001ad 	.word	0x200001ad

080049b8 <__sfp_lock_release>:
 80049b8:	4801      	ldr	r0, [pc, #4]	; (80049c0 <__sfp_lock_release+0x8>)
 80049ba:	f000 b8ae 	b.w	8004b1a <__retarget_lock_release_recursive>
 80049be:	bf00      	nop
 80049c0:	200001ad 	.word	0x200001ad

080049c4 <__sinit_lock_acquire>:
 80049c4:	4801      	ldr	r0, [pc, #4]	; (80049cc <__sinit_lock_acquire+0x8>)
 80049c6:	f000 b8a7 	b.w	8004b18 <__retarget_lock_acquire_recursive>
 80049ca:	bf00      	nop
 80049cc:	200001ae 	.word	0x200001ae

080049d0 <__sinit_lock_release>:
 80049d0:	4801      	ldr	r0, [pc, #4]	; (80049d8 <__sinit_lock_release+0x8>)
 80049d2:	f000 b8a2 	b.w	8004b1a <__retarget_lock_release_recursive>
 80049d6:	bf00      	nop
 80049d8:	200001ae 	.word	0x200001ae

080049dc <__sinit>:
 80049dc:	b510      	push	{r4, lr}
 80049de:	4604      	mov	r4, r0
 80049e0:	f7ff fff0 	bl	80049c4 <__sinit_lock_acquire>
 80049e4:	69a3      	ldr	r3, [r4, #24]
 80049e6:	b11b      	cbz	r3, 80049f0 <__sinit+0x14>
 80049e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ec:	f7ff bff0 	b.w	80049d0 <__sinit_lock_release>
 80049f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049f4:	6523      	str	r3, [r4, #80]	; 0x50
 80049f6:	4b13      	ldr	r3, [pc, #76]	; (8004a44 <__sinit+0x68>)
 80049f8:	4a13      	ldr	r2, [pc, #76]	; (8004a48 <__sinit+0x6c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80049fe:	42a3      	cmp	r3, r4
 8004a00:	bf04      	itt	eq
 8004a02:	2301      	moveq	r3, #1
 8004a04:	61a3      	streq	r3, [r4, #24]
 8004a06:	4620      	mov	r0, r4
 8004a08:	f000 f820 	bl	8004a4c <__sfp>
 8004a0c:	6060      	str	r0, [r4, #4]
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f000 f81c 	bl	8004a4c <__sfp>
 8004a14:	60a0      	str	r0, [r4, #8]
 8004a16:	4620      	mov	r0, r4
 8004a18:	f000 f818 	bl	8004a4c <__sfp>
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	60e0      	str	r0, [r4, #12]
 8004a20:	2104      	movs	r1, #4
 8004a22:	6860      	ldr	r0, [r4, #4]
 8004a24:	f7ff ff82 	bl	800492c <std>
 8004a28:	68a0      	ldr	r0, [r4, #8]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	2109      	movs	r1, #9
 8004a2e:	f7ff ff7d 	bl	800492c <std>
 8004a32:	68e0      	ldr	r0, [r4, #12]
 8004a34:	2202      	movs	r2, #2
 8004a36:	2112      	movs	r1, #18
 8004a38:	f7ff ff78 	bl	800492c <std>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	61a3      	str	r3, [r4, #24]
 8004a40:	e7d2      	b.n	80049e8 <__sinit+0xc>
 8004a42:	bf00      	nop
 8004a44:	08005638 	.word	0x08005638
 8004a48:	08004975 	.word	0x08004975

08004a4c <__sfp>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	4607      	mov	r7, r0
 8004a50:	f7ff ffac 	bl	80049ac <__sfp_lock_acquire>
 8004a54:	4b1e      	ldr	r3, [pc, #120]	; (8004ad0 <__sfp+0x84>)
 8004a56:	681e      	ldr	r6, [r3, #0]
 8004a58:	69b3      	ldr	r3, [r6, #24]
 8004a5a:	b913      	cbnz	r3, 8004a62 <__sfp+0x16>
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	f7ff ffbd 	bl	80049dc <__sinit>
 8004a62:	3648      	adds	r6, #72	; 0x48
 8004a64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	d503      	bpl.n	8004a74 <__sfp+0x28>
 8004a6c:	6833      	ldr	r3, [r6, #0]
 8004a6e:	b30b      	cbz	r3, 8004ab4 <__sfp+0x68>
 8004a70:	6836      	ldr	r6, [r6, #0]
 8004a72:	e7f7      	b.n	8004a64 <__sfp+0x18>
 8004a74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a78:	b9d5      	cbnz	r5, 8004ab0 <__sfp+0x64>
 8004a7a:	4b16      	ldr	r3, [pc, #88]	; (8004ad4 <__sfp+0x88>)
 8004a7c:	60e3      	str	r3, [r4, #12]
 8004a7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a82:	6665      	str	r5, [r4, #100]	; 0x64
 8004a84:	f000 f847 	bl	8004b16 <__retarget_lock_init_recursive>
 8004a88:	f7ff ff96 	bl	80049b8 <__sfp_lock_release>
 8004a8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a94:	6025      	str	r5, [r4, #0]
 8004a96:	61a5      	str	r5, [r4, #24]
 8004a98:	2208      	movs	r2, #8
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004aa0:	f7ff fc5e 	bl	8004360 <memset>
 8004aa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004aa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004aac:	4620      	mov	r0, r4
 8004aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ab0:	3468      	adds	r4, #104	; 0x68
 8004ab2:	e7d9      	b.n	8004a68 <__sfp+0x1c>
 8004ab4:	2104      	movs	r1, #4
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	f7ff ff62 	bl	8004980 <__sfmoreglue>
 8004abc:	4604      	mov	r4, r0
 8004abe:	6030      	str	r0, [r6, #0]
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d1d5      	bne.n	8004a70 <__sfp+0x24>
 8004ac4:	f7ff ff78 	bl	80049b8 <__sfp_lock_release>
 8004ac8:	230c      	movs	r3, #12
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	e7ee      	b.n	8004aac <__sfp+0x60>
 8004ace:	bf00      	nop
 8004ad0:	08005638 	.word	0x08005638
 8004ad4:	ffff0001 	.word	0xffff0001

08004ad8 <_fwalk_reent>:
 8004ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004adc:	4606      	mov	r6, r0
 8004ade:	4688      	mov	r8, r1
 8004ae0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ae4:	2700      	movs	r7, #0
 8004ae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004aea:	f1b9 0901 	subs.w	r9, r9, #1
 8004aee:	d505      	bpl.n	8004afc <_fwalk_reent+0x24>
 8004af0:	6824      	ldr	r4, [r4, #0]
 8004af2:	2c00      	cmp	r4, #0
 8004af4:	d1f7      	bne.n	8004ae6 <_fwalk_reent+0xe>
 8004af6:	4638      	mov	r0, r7
 8004af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004afc:	89ab      	ldrh	r3, [r5, #12]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d907      	bls.n	8004b12 <_fwalk_reent+0x3a>
 8004b02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b06:	3301      	adds	r3, #1
 8004b08:	d003      	beq.n	8004b12 <_fwalk_reent+0x3a>
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	47c0      	blx	r8
 8004b10:	4307      	orrs	r7, r0
 8004b12:	3568      	adds	r5, #104	; 0x68
 8004b14:	e7e9      	b.n	8004aea <_fwalk_reent+0x12>

08004b16 <__retarget_lock_init_recursive>:
 8004b16:	4770      	bx	lr

08004b18 <__retarget_lock_acquire_recursive>:
 8004b18:	4770      	bx	lr

08004b1a <__retarget_lock_release_recursive>:
 8004b1a:	4770      	bx	lr

08004b1c <__swhatbuf_r>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	460e      	mov	r6, r1
 8004b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b24:	2900      	cmp	r1, #0
 8004b26:	b096      	sub	sp, #88	; 0x58
 8004b28:	4614      	mov	r4, r2
 8004b2a:	461d      	mov	r5, r3
 8004b2c:	da08      	bge.n	8004b40 <__swhatbuf_r+0x24>
 8004b2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	602a      	str	r2, [r5, #0]
 8004b36:	061a      	lsls	r2, r3, #24
 8004b38:	d410      	bmi.n	8004b5c <__swhatbuf_r+0x40>
 8004b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b3e:	e00e      	b.n	8004b5e <__swhatbuf_r+0x42>
 8004b40:	466a      	mov	r2, sp
 8004b42:	f000 fc9d 	bl	8005480 <_fstat_r>
 8004b46:	2800      	cmp	r0, #0
 8004b48:	dbf1      	blt.n	8004b2e <__swhatbuf_r+0x12>
 8004b4a:	9a01      	ldr	r2, [sp, #4]
 8004b4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b54:	425a      	negs	r2, r3
 8004b56:	415a      	adcs	r2, r3
 8004b58:	602a      	str	r2, [r5, #0]
 8004b5a:	e7ee      	b.n	8004b3a <__swhatbuf_r+0x1e>
 8004b5c:	2340      	movs	r3, #64	; 0x40
 8004b5e:	2000      	movs	r0, #0
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	b016      	add	sp, #88	; 0x58
 8004b64:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b68 <__smakebuf_r>:
 8004b68:	898b      	ldrh	r3, [r1, #12]
 8004b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b6c:	079d      	lsls	r5, r3, #30
 8004b6e:	4606      	mov	r6, r0
 8004b70:	460c      	mov	r4, r1
 8004b72:	d507      	bpl.n	8004b84 <__smakebuf_r+0x1c>
 8004b74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	6123      	str	r3, [r4, #16]
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	6163      	str	r3, [r4, #20]
 8004b80:	b002      	add	sp, #8
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	ab01      	add	r3, sp, #4
 8004b86:	466a      	mov	r2, sp
 8004b88:	f7ff ffc8 	bl	8004b1c <__swhatbuf_r>
 8004b8c:	9900      	ldr	r1, [sp, #0]
 8004b8e:	4605      	mov	r5, r0
 8004b90:	4630      	mov	r0, r6
 8004b92:	f000 f89d 	bl	8004cd0 <_malloc_r>
 8004b96:	b948      	cbnz	r0, 8004bac <__smakebuf_r+0x44>
 8004b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b9c:	059a      	lsls	r2, r3, #22
 8004b9e:	d4ef      	bmi.n	8004b80 <__smakebuf_r+0x18>
 8004ba0:	f023 0303 	bic.w	r3, r3, #3
 8004ba4:	f043 0302 	orr.w	r3, r3, #2
 8004ba8:	81a3      	strh	r3, [r4, #12]
 8004baa:	e7e3      	b.n	8004b74 <__smakebuf_r+0xc>
 8004bac:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <__smakebuf_r+0x7c>)
 8004bae:	62b3      	str	r3, [r6, #40]	; 0x28
 8004bb0:	89a3      	ldrh	r3, [r4, #12]
 8004bb2:	6020      	str	r0, [r4, #0]
 8004bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb8:	81a3      	strh	r3, [r4, #12]
 8004bba:	9b00      	ldr	r3, [sp, #0]
 8004bbc:	6163      	str	r3, [r4, #20]
 8004bbe:	9b01      	ldr	r3, [sp, #4]
 8004bc0:	6120      	str	r0, [r4, #16]
 8004bc2:	b15b      	cbz	r3, 8004bdc <__smakebuf_r+0x74>
 8004bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bc8:	4630      	mov	r0, r6
 8004bca:	f000 fc6b 	bl	80054a4 <_isatty_r>
 8004bce:	b128      	cbz	r0, 8004bdc <__smakebuf_r+0x74>
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	f043 0301 	orr.w	r3, r3, #1
 8004bda:	81a3      	strh	r3, [r4, #12]
 8004bdc:	89a0      	ldrh	r0, [r4, #12]
 8004bde:	4305      	orrs	r5, r0
 8004be0:	81a5      	strh	r5, [r4, #12]
 8004be2:	e7cd      	b.n	8004b80 <__smakebuf_r+0x18>
 8004be4:	08004975 	.word	0x08004975

08004be8 <malloc>:
 8004be8:	4b02      	ldr	r3, [pc, #8]	; (8004bf4 <malloc+0xc>)
 8004bea:	4601      	mov	r1, r0
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	f000 b86f 	b.w	8004cd0 <_malloc_r>
 8004bf2:	bf00      	nop
 8004bf4:	2000000c 	.word	0x2000000c

08004bf8 <_free_r>:
 8004bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bfa:	2900      	cmp	r1, #0
 8004bfc:	d044      	beq.n	8004c88 <_free_r+0x90>
 8004bfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c02:	9001      	str	r0, [sp, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f1a1 0404 	sub.w	r4, r1, #4
 8004c0a:	bfb8      	it	lt
 8004c0c:	18e4      	addlt	r4, r4, r3
 8004c0e:	f000 fc6b 	bl	80054e8 <__malloc_lock>
 8004c12:	4a1e      	ldr	r2, [pc, #120]	; (8004c8c <_free_r+0x94>)
 8004c14:	9801      	ldr	r0, [sp, #4]
 8004c16:	6813      	ldr	r3, [r2, #0]
 8004c18:	b933      	cbnz	r3, 8004c28 <_free_r+0x30>
 8004c1a:	6063      	str	r3, [r4, #4]
 8004c1c:	6014      	str	r4, [r2, #0]
 8004c1e:	b003      	add	sp, #12
 8004c20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c24:	f000 bc66 	b.w	80054f4 <__malloc_unlock>
 8004c28:	42a3      	cmp	r3, r4
 8004c2a:	d908      	bls.n	8004c3e <_free_r+0x46>
 8004c2c:	6825      	ldr	r5, [r4, #0]
 8004c2e:	1961      	adds	r1, r4, r5
 8004c30:	428b      	cmp	r3, r1
 8004c32:	bf01      	itttt	eq
 8004c34:	6819      	ldreq	r1, [r3, #0]
 8004c36:	685b      	ldreq	r3, [r3, #4]
 8004c38:	1949      	addeq	r1, r1, r5
 8004c3a:	6021      	streq	r1, [r4, #0]
 8004c3c:	e7ed      	b.n	8004c1a <_free_r+0x22>
 8004c3e:	461a      	mov	r2, r3
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	b10b      	cbz	r3, 8004c48 <_free_r+0x50>
 8004c44:	42a3      	cmp	r3, r4
 8004c46:	d9fa      	bls.n	8004c3e <_free_r+0x46>
 8004c48:	6811      	ldr	r1, [r2, #0]
 8004c4a:	1855      	adds	r5, r2, r1
 8004c4c:	42a5      	cmp	r5, r4
 8004c4e:	d10b      	bne.n	8004c68 <_free_r+0x70>
 8004c50:	6824      	ldr	r4, [r4, #0]
 8004c52:	4421      	add	r1, r4
 8004c54:	1854      	adds	r4, r2, r1
 8004c56:	42a3      	cmp	r3, r4
 8004c58:	6011      	str	r1, [r2, #0]
 8004c5a:	d1e0      	bne.n	8004c1e <_free_r+0x26>
 8004c5c:	681c      	ldr	r4, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	6053      	str	r3, [r2, #4]
 8004c62:	4421      	add	r1, r4
 8004c64:	6011      	str	r1, [r2, #0]
 8004c66:	e7da      	b.n	8004c1e <_free_r+0x26>
 8004c68:	d902      	bls.n	8004c70 <_free_r+0x78>
 8004c6a:	230c      	movs	r3, #12
 8004c6c:	6003      	str	r3, [r0, #0]
 8004c6e:	e7d6      	b.n	8004c1e <_free_r+0x26>
 8004c70:	6825      	ldr	r5, [r4, #0]
 8004c72:	1961      	adds	r1, r4, r5
 8004c74:	428b      	cmp	r3, r1
 8004c76:	bf04      	itt	eq
 8004c78:	6819      	ldreq	r1, [r3, #0]
 8004c7a:	685b      	ldreq	r3, [r3, #4]
 8004c7c:	6063      	str	r3, [r4, #4]
 8004c7e:	bf04      	itt	eq
 8004c80:	1949      	addeq	r1, r1, r5
 8004c82:	6021      	streq	r1, [r4, #0]
 8004c84:	6054      	str	r4, [r2, #4]
 8004c86:	e7ca      	b.n	8004c1e <_free_r+0x26>
 8004c88:	b003      	add	sp, #12
 8004c8a:	bd30      	pop	{r4, r5, pc}
 8004c8c:	200001b0 	.word	0x200001b0

08004c90 <sbrk_aligned>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	4e0e      	ldr	r6, [pc, #56]	; (8004ccc <sbrk_aligned+0x3c>)
 8004c94:	460c      	mov	r4, r1
 8004c96:	6831      	ldr	r1, [r6, #0]
 8004c98:	4605      	mov	r5, r0
 8004c9a:	b911      	cbnz	r1, 8004ca2 <sbrk_aligned+0x12>
 8004c9c:	f000 fb7a 	bl	8005394 <_sbrk_r>
 8004ca0:	6030      	str	r0, [r6, #0]
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f000 fb75 	bl	8005394 <_sbrk_r>
 8004caa:	1c43      	adds	r3, r0, #1
 8004cac:	d00a      	beq.n	8004cc4 <sbrk_aligned+0x34>
 8004cae:	1cc4      	adds	r4, r0, #3
 8004cb0:	f024 0403 	bic.w	r4, r4, #3
 8004cb4:	42a0      	cmp	r0, r4
 8004cb6:	d007      	beq.n	8004cc8 <sbrk_aligned+0x38>
 8004cb8:	1a21      	subs	r1, r4, r0
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f000 fb6a 	bl	8005394 <_sbrk_r>
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d101      	bne.n	8004cc8 <sbrk_aligned+0x38>
 8004cc4:	f04f 34ff 	mov.w	r4, #4294967295
 8004cc8:	4620      	mov	r0, r4
 8004cca:	bd70      	pop	{r4, r5, r6, pc}
 8004ccc:	200001b4 	.word	0x200001b4

08004cd0 <_malloc_r>:
 8004cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd4:	1ccd      	adds	r5, r1, #3
 8004cd6:	f025 0503 	bic.w	r5, r5, #3
 8004cda:	3508      	adds	r5, #8
 8004cdc:	2d0c      	cmp	r5, #12
 8004cde:	bf38      	it	cc
 8004ce0:	250c      	movcc	r5, #12
 8004ce2:	2d00      	cmp	r5, #0
 8004ce4:	4607      	mov	r7, r0
 8004ce6:	db01      	blt.n	8004cec <_malloc_r+0x1c>
 8004ce8:	42a9      	cmp	r1, r5
 8004cea:	d905      	bls.n	8004cf8 <_malloc_r+0x28>
 8004cec:	230c      	movs	r3, #12
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	2600      	movs	r6, #0
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cf8:	4e2e      	ldr	r6, [pc, #184]	; (8004db4 <_malloc_r+0xe4>)
 8004cfa:	f000 fbf5 	bl	80054e8 <__malloc_lock>
 8004cfe:	6833      	ldr	r3, [r6, #0]
 8004d00:	461c      	mov	r4, r3
 8004d02:	bb34      	cbnz	r4, 8004d52 <_malloc_r+0x82>
 8004d04:	4629      	mov	r1, r5
 8004d06:	4638      	mov	r0, r7
 8004d08:	f7ff ffc2 	bl	8004c90 <sbrk_aligned>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	4604      	mov	r4, r0
 8004d10:	d14d      	bne.n	8004dae <_malloc_r+0xde>
 8004d12:	6834      	ldr	r4, [r6, #0]
 8004d14:	4626      	mov	r6, r4
 8004d16:	2e00      	cmp	r6, #0
 8004d18:	d140      	bne.n	8004d9c <_malloc_r+0xcc>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	4638      	mov	r0, r7
 8004d20:	eb04 0803 	add.w	r8, r4, r3
 8004d24:	f000 fb36 	bl	8005394 <_sbrk_r>
 8004d28:	4580      	cmp	r8, r0
 8004d2a:	d13a      	bne.n	8004da2 <_malloc_r+0xd2>
 8004d2c:	6821      	ldr	r1, [r4, #0]
 8004d2e:	3503      	adds	r5, #3
 8004d30:	1a6d      	subs	r5, r5, r1
 8004d32:	f025 0503 	bic.w	r5, r5, #3
 8004d36:	3508      	adds	r5, #8
 8004d38:	2d0c      	cmp	r5, #12
 8004d3a:	bf38      	it	cc
 8004d3c:	250c      	movcc	r5, #12
 8004d3e:	4629      	mov	r1, r5
 8004d40:	4638      	mov	r0, r7
 8004d42:	f7ff ffa5 	bl	8004c90 <sbrk_aligned>
 8004d46:	3001      	adds	r0, #1
 8004d48:	d02b      	beq.n	8004da2 <_malloc_r+0xd2>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	442b      	add	r3, r5
 8004d4e:	6023      	str	r3, [r4, #0]
 8004d50:	e00e      	b.n	8004d70 <_malloc_r+0xa0>
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	1b52      	subs	r2, r2, r5
 8004d56:	d41e      	bmi.n	8004d96 <_malloc_r+0xc6>
 8004d58:	2a0b      	cmp	r2, #11
 8004d5a:	d916      	bls.n	8004d8a <_malloc_r+0xba>
 8004d5c:	1961      	adds	r1, r4, r5
 8004d5e:	42a3      	cmp	r3, r4
 8004d60:	6025      	str	r5, [r4, #0]
 8004d62:	bf18      	it	ne
 8004d64:	6059      	strne	r1, [r3, #4]
 8004d66:	6863      	ldr	r3, [r4, #4]
 8004d68:	bf08      	it	eq
 8004d6a:	6031      	streq	r1, [r6, #0]
 8004d6c:	5162      	str	r2, [r4, r5]
 8004d6e:	604b      	str	r3, [r1, #4]
 8004d70:	4638      	mov	r0, r7
 8004d72:	f104 060b 	add.w	r6, r4, #11
 8004d76:	f000 fbbd 	bl	80054f4 <__malloc_unlock>
 8004d7a:	f026 0607 	bic.w	r6, r6, #7
 8004d7e:	1d23      	adds	r3, r4, #4
 8004d80:	1af2      	subs	r2, r6, r3
 8004d82:	d0b6      	beq.n	8004cf2 <_malloc_r+0x22>
 8004d84:	1b9b      	subs	r3, r3, r6
 8004d86:	50a3      	str	r3, [r4, r2]
 8004d88:	e7b3      	b.n	8004cf2 <_malloc_r+0x22>
 8004d8a:	6862      	ldr	r2, [r4, #4]
 8004d8c:	42a3      	cmp	r3, r4
 8004d8e:	bf0c      	ite	eq
 8004d90:	6032      	streq	r2, [r6, #0]
 8004d92:	605a      	strne	r2, [r3, #4]
 8004d94:	e7ec      	b.n	8004d70 <_malloc_r+0xa0>
 8004d96:	4623      	mov	r3, r4
 8004d98:	6864      	ldr	r4, [r4, #4]
 8004d9a:	e7b2      	b.n	8004d02 <_malloc_r+0x32>
 8004d9c:	4634      	mov	r4, r6
 8004d9e:	6876      	ldr	r6, [r6, #4]
 8004da0:	e7b9      	b.n	8004d16 <_malloc_r+0x46>
 8004da2:	230c      	movs	r3, #12
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	4638      	mov	r0, r7
 8004da8:	f000 fba4 	bl	80054f4 <__malloc_unlock>
 8004dac:	e7a1      	b.n	8004cf2 <_malloc_r+0x22>
 8004dae:	6025      	str	r5, [r4, #0]
 8004db0:	e7de      	b.n	8004d70 <_malloc_r+0xa0>
 8004db2:	bf00      	nop
 8004db4:	200001b0 	.word	0x200001b0

08004db8 <__sfputc_r>:
 8004db8:	6893      	ldr	r3, [r2, #8]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	b410      	push	{r4}
 8004dc0:	6093      	str	r3, [r2, #8]
 8004dc2:	da08      	bge.n	8004dd6 <__sfputc_r+0x1e>
 8004dc4:	6994      	ldr	r4, [r2, #24]
 8004dc6:	42a3      	cmp	r3, r4
 8004dc8:	db01      	blt.n	8004dce <__sfputc_r+0x16>
 8004dca:	290a      	cmp	r1, #10
 8004dcc:	d103      	bne.n	8004dd6 <__sfputc_r+0x1e>
 8004dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dd2:	f7ff bc29 	b.w	8004628 <__swbuf_r>
 8004dd6:	6813      	ldr	r3, [r2, #0]
 8004dd8:	1c58      	adds	r0, r3, #1
 8004dda:	6010      	str	r0, [r2, #0]
 8004ddc:	7019      	strb	r1, [r3, #0]
 8004dde:	4608      	mov	r0, r1
 8004de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <__sfputs_r>:
 8004de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de8:	4606      	mov	r6, r0
 8004dea:	460f      	mov	r7, r1
 8004dec:	4614      	mov	r4, r2
 8004dee:	18d5      	adds	r5, r2, r3
 8004df0:	42ac      	cmp	r4, r5
 8004df2:	d101      	bne.n	8004df8 <__sfputs_r+0x12>
 8004df4:	2000      	movs	r0, #0
 8004df6:	e007      	b.n	8004e08 <__sfputs_r+0x22>
 8004df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dfc:	463a      	mov	r2, r7
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f7ff ffda 	bl	8004db8 <__sfputc_r>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d1f3      	bne.n	8004df0 <__sfputs_r+0xa>
 8004e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e0c <_vfiprintf_r>:
 8004e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e10:	460d      	mov	r5, r1
 8004e12:	b09d      	sub	sp, #116	; 0x74
 8004e14:	4614      	mov	r4, r2
 8004e16:	4698      	mov	r8, r3
 8004e18:	4606      	mov	r6, r0
 8004e1a:	b118      	cbz	r0, 8004e24 <_vfiprintf_r+0x18>
 8004e1c:	6983      	ldr	r3, [r0, #24]
 8004e1e:	b90b      	cbnz	r3, 8004e24 <_vfiprintf_r+0x18>
 8004e20:	f7ff fddc 	bl	80049dc <__sinit>
 8004e24:	4b89      	ldr	r3, [pc, #548]	; (800504c <_vfiprintf_r+0x240>)
 8004e26:	429d      	cmp	r5, r3
 8004e28:	d11b      	bne.n	8004e62 <_vfiprintf_r+0x56>
 8004e2a:	6875      	ldr	r5, [r6, #4]
 8004e2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e2e:	07d9      	lsls	r1, r3, #31
 8004e30:	d405      	bmi.n	8004e3e <_vfiprintf_r+0x32>
 8004e32:	89ab      	ldrh	r3, [r5, #12]
 8004e34:	059a      	lsls	r2, r3, #22
 8004e36:	d402      	bmi.n	8004e3e <_vfiprintf_r+0x32>
 8004e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e3a:	f7ff fe6d 	bl	8004b18 <__retarget_lock_acquire_recursive>
 8004e3e:	89ab      	ldrh	r3, [r5, #12]
 8004e40:	071b      	lsls	r3, r3, #28
 8004e42:	d501      	bpl.n	8004e48 <_vfiprintf_r+0x3c>
 8004e44:	692b      	ldr	r3, [r5, #16]
 8004e46:	b9eb      	cbnz	r3, 8004e84 <_vfiprintf_r+0x78>
 8004e48:	4629      	mov	r1, r5
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	f7ff fc3e 	bl	80046cc <__swsetup_r>
 8004e50:	b1c0      	cbz	r0, 8004e84 <_vfiprintf_r+0x78>
 8004e52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e54:	07dc      	lsls	r4, r3, #31
 8004e56:	d50e      	bpl.n	8004e76 <_vfiprintf_r+0x6a>
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5c:	b01d      	add	sp, #116	; 0x74
 8004e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e62:	4b7b      	ldr	r3, [pc, #492]	; (8005050 <_vfiprintf_r+0x244>)
 8004e64:	429d      	cmp	r5, r3
 8004e66:	d101      	bne.n	8004e6c <_vfiprintf_r+0x60>
 8004e68:	68b5      	ldr	r5, [r6, #8]
 8004e6a:	e7df      	b.n	8004e2c <_vfiprintf_r+0x20>
 8004e6c:	4b79      	ldr	r3, [pc, #484]	; (8005054 <_vfiprintf_r+0x248>)
 8004e6e:	429d      	cmp	r5, r3
 8004e70:	bf08      	it	eq
 8004e72:	68f5      	ldreq	r5, [r6, #12]
 8004e74:	e7da      	b.n	8004e2c <_vfiprintf_r+0x20>
 8004e76:	89ab      	ldrh	r3, [r5, #12]
 8004e78:	0598      	lsls	r0, r3, #22
 8004e7a:	d4ed      	bmi.n	8004e58 <_vfiprintf_r+0x4c>
 8004e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e7e:	f7ff fe4c 	bl	8004b1a <__retarget_lock_release_recursive>
 8004e82:	e7e9      	b.n	8004e58 <_vfiprintf_r+0x4c>
 8004e84:	2300      	movs	r3, #0
 8004e86:	9309      	str	r3, [sp, #36]	; 0x24
 8004e88:	2320      	movs	r3, #32
 8004e8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e92:	2330      	movs	r3, #48	; 0x30
 8004e94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005058 <_vfiprintf_r+0x24c>
 8004e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e9c:	f04f 0901 	mov.w	r9, #1
 8004ea0:	4623      	mov	r3, r4
 8004ea2:	469a      	mov	sl, r3
 8004ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ea8:	b10a      	cbz	r2, 8004eae <_vfiprintf_r+0xa2>
 8004eaa:	2a25      	cmp	r2, #37	; 0x25
 8004eac:	d1f9      	bne.n	8004ea2 <_vfiprintf_r+0x96>
 8004eae:	ebba 0b04 	subs.w	fp, sl, r4
 8004eb2:	d00b      	beq.n	8004ecc <_vfiprintf_r+0xc0>
 8004eb4:	465b      	mov	r3, fp
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	4629      	mov	r1, r5
 8004eba:	4630      	mov	r0, r6
 8004ebc:	f7ff ff93 	bl	8004de6 <__sfputs_r>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	f000 80aa 	beq.w	800501a <_vfiprintf_r+0x20e>
 8004ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ec8:	445a      	add	r2, fp
 8004eca:	9209      	str	r2, [sp, #36]	; 0x24
 8004ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 80a2 	beq.w	800501a <_vfiprintf_r+0x20e>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8004edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ee0:	f10a 0a01 	add.w	sl, sl, #1
 8004ee4:	9304      	str	r3, [sp, #16]
 8004ee6:	9307      	str	r3, [sp, #28]
 8004ee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004eec:	931a      	str	r3, [sp, #104]	; 0x68
 8004eee:	4654      	mov	r4, sl
 8004ef0:	2205      	movs	r2, #5
 8004ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ef6:	4858      	ldr	r0, [pc, #352]	; (8005058 <_vfiprintf_r+0x24c>)
 8004ef8:	f7fb f992 	bl	8000220 <memchr>
 8004efc:	9a04      	ldr	r2, [sp, #16]
 8004efe:	b9d8      	cbnz	r0, 8004f38 <_vfiprintf_r+0x12c>
 8004f00:	06d1      	lsls	r1, r2, #27
 8004f02:	bf44      	itt	mi
 8004f04:	2320      	movmi	r3, #32
 8004f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f0a:	0713      	lsls	r3, r2, #28
 8004f0c:	bf44      	itt	mi
 8004f0e:	232b      	movmi	r3, #43	; 0x2b
 8004f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f14:	f89a 3000 	ldrb.w	r3, [sl]
 8004f18:	2b2a      	cmp	r3, #42	; 0x2a
 8004f1a:	d015      	beq.n	8004f48 <_vfiprintf_r+0x13c>
 8004f1c:	9a07      	ldr	r2, [sp, #28]
 8004f1e:	4654      	mov	r4, sl
 8004f20:	2000      	movs	r0, #0
 8004f22:	f04f 0c0a 	mov.w	ip, #10
 8004f26:	4621      	mov	r1, r4
 8004f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f2c:	3b30      	subs	r3, #48	; 0x30
 8004f2e:	2b09      	cmp	r3, #9
 8004f30:	d94e      	bls.n	8004fd0 <_vfiprintf_r+0x1c4>
 8004f32:	b1b0      	cbz	r0, 8004f62 <_vfiprintf_r+0x156>
 8004f34:	9207      	str	r2, [sp, #28]
 8004f36:	e014      	b.n	8004f62 <_vfiprintf_r+0x156>
 8004f38:	eba0 0308 	sub.w	r3, r0, r8
 8004f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8004f40:	4313      	orrs	r3, r2
 8004f42:	9304      	str	r3, [sp, #16]
 8004f44:	46a2      	mov	sl, r4
 8004f46:	e7d2      	b.n	8004eee <_vfiprintf_r+0xe2>
 8004f48:	9b03      	ldr	r3, [sp, #12]
 8004f4a:	1d19      	adds	r1, r3, #4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	9103      	str	r1, [sp, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bfbb      	ittet	lt
 8004f54:	425b      	neglt	r3, r3
 8004f56:	f042 0202 	orrlt.w	r2, r2, #2
 8004f5a:	9307      	strge	r3, [sp, #28]
 8004f5c:	9307      	strlt	r3, [sp, #28]
 8004f5e:	bfb8      	it	lt
 8004f60:	9204      	strlt	r2, [sp, #16]
 8004f62:	7823      	ldrb	r3, [r4, #0]
 8004f64:	2b2e      	cmp	r3, #46	; 0x2e
 8004f66:	d10c      	bne.n	8004f82 <_vfiprintf_r+0x176>
 8004f68:	7863      	ldrb	r3, [r4, #1]
 8004f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f6c:	d135      	bne.n	8004fda <_vfiprintf_r+0x1ce>
 8004f6e:	9b03      	ldr	r3, [sp, #12]
 8004f70:	1d1a      	adds	r2, r3, #4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	9203      	str	r2, [sp, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bfb8      	it	lt
 8004f7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f7e:	3402      	adds	r4, #2
 8004f80:	9305      	str	r3, [sp, #20]
 8004f82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005068 <_vfiprintf_r+0x25c>
 8004f86:	7821      	ldrb	r1, [r4, #0]
 8004f88:	2203      	movs	r2, #3
 8004f8a:	4650      	mov	r0, sl
 8004f8c:	f7fb f948 	bl	8000220 <memchr>
 8004f90:	b140      	cbz	r0, 8004fa4 <_vfiprintf_r+0x198>
 8004f92:	2340      	movs	r3, #64	; 0x40
 8004f94:	eba0 000a 	sub.w	r0, r0, sl
 8004f98:	fa03 f000 	lsl.w	r0, r3, r0
 8004f9c:	9b04      	ldr	r3, [sp, #16]
 8004f9e:	4303      	orrs	r3, r0
 8004fa0:	3401      	adds	r4, #1
 8004fa2:	9304      	str	r3, [sp, #16]
 8004fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa8:	482c      	ldr	r0, [pc, #176]	; (800505c <_vfiprintf_r+0x250>)
 8004faa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fae:	2206      	movs	r2, #6
 8004fb0:	f7fb f936 	bl	8000220 <memchr>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d03f      	beq.n	8005038 <_vfiprintf_r+0x22c>
 8004fb8:	4b29      	ldr	r3, [pc, #164]	; (8005060 <_vfiprintf_r+0x254>)
 8004fba:	bb1b      	cbnz	r3, 8005004 <_vfiprintf_r+0x1f8>
 8004fbc:	9b03      	ldr	r3, [sp, #12]
 8004fbe:	3307      	adds	r3, #7
 8004fc0:	f023 0307 	bic.w	r3, r3, #7
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	9303      	str	r3, [sp, #12]
 8004fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fca:	443b      	add	r3, r7
 8004fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8004fce:	e767      	b.n	8004ea0 <_vfiprintf_r+0x94>
 8004fd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	e7a5      	b.n	8004f26 <_vfiprintf_r+0x11a>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	3401      	adds	r4, #1
 8004fde:	9305      	str	r3, [sp, #20]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	f04f 0c0a 	mov.w	ip, #10
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fec:	3a30      	subs	r2, #48	; 0x30
 8004fee:	2a09      	cmp	r2, #9
 8004ff0:	d903      	bls.n	8004ffa <_vfiprintf_r+0x1ee>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0c5      	beq.n	8004f82 <_vfiprintf_r+0x176>
 8004ff6:	9105      	str	r1, [sp, #20]
 8004ff8:	e7c3      	b.n	8004f82 <_vfiprintf_r+0x176>
 8004ffa:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ffe:	4604      	mov	r4, r0
 8005000:	2301      	movs	r3, #1
 8005002:	e7f0      	b.n	8004fe6 <_vfiprintf_r+0x1da>
 8005004:	ab03      	add	r3, sp, #12
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	462a      	mov	r2, r5
 800500a:	4b16      	ldr	r3, [pc, #88]	; (8005064 <_vfiprintf_r+0x258>)
 800500c:	a904      	add	r1, sp, #16
 800500e:	4630      	mov	r0, r6
 8005010:	f3af 8000 	nop.w
 8005014:	4607      	mov	r7, r0
 8005016:	1c78      	adds	r0, r7, #1
 8005018:	d1d6      	bne.n	8004fc8 <_vfiprintf_r+0x1bc>
 800501a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800501c:	07d9      	lsls	r1, r3, #31
 800501e:	d405      	bmi.n	800502c <_vfiprintf_r+0x220>
 8005020:	89ab      	ldrh	r3, [r5, #12]
 8005022:	059a      	lsls	r2, r3, #22
 8005024:	d402      	bmi.n	800502c <_vfiprintf_r+0x220>
 8005026:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005028:	f7ff fd77 	bl	8004b1a <__retarget_lock_release_recursive>
 800502c:	89ab      	ldrh	r3, [r5, #12]
 800502e:	065b      	lsls	r3, r3, #25
 8005030:	f53f af12 	bmi.w	8004e58 <_vfiprintf_r+0x4c>
 8005034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005036:	e711      	b.n	8004e5c <_vfiprintf_r+0x50>
 8005038:	ab03      	add	r3, sp, #12
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	462a      	mov	r2, r5
 800503e:	4b09      	ldr	r3, [pc, #36]	; (8005064 <_vfiprintf_r+0x258>)
 8005040:	a904      	add	r1, sp, #16
 8005042:	4630      	mov	r0, r6
 8005044:	f000 f880 	bl	8005148 <_printf_i>
 8005048:	e7e4      	b.n	8005014 <_vfiprintf_r+0x208>
 800504a:	bf00      	nop
 800504c:	0800565c 	.word	0x0800565c
 8005050:	0800567c 	.word	0x0800567c
 8005054:	0800563c 	.word	0x0800563c
 8005058:	0800569c 	.word	0x0800569c
 800505c:	080056a6 	.word	0x080056a6
 8005060:	00000000 	.word	0x00000000
 8005064:	08004de7 	.word	0x08004de7
 8005068:	080056a2 	.word	0x080056a2

0800506c <_printf_common>:
 800506c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005070:	4616      	mov	r6, r2
 8005072:	4699      	mov	r9, r3
 8005074:	688a      	ldr	r2, [r1, #8]
 8005076:	690b      	ldr	r3, [r1, #16]
 8005078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800507c:	4293      	cmp	r3, r2
 800507e:	bfb8      	it	lt
 8005080:	4613      	movlt	r3, r2
 8005082:	6033      	str	r3, [r6, #0]
 8005084:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005088:	4607      	mov	r7, r0
 800508a:	460c      	mov	r4, r1
 800508c:	b10a      	cbz	r2, 8005092 <_printf_common+0x26>
 800508e:	3301      	adds	r3, #1
 8005090:	6033      	str	r3, [r6, #0]
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	0699      	lsls	r1, r3, #26
 8005096:	bf42      	ittt	mi
 8005098:	6833      	ldrmi	r3, [r6, #0]
 800509a:	3302      	addmi	r3, #2
 800509c:	6033      	strmi	r3, [r6, #0]
 800509e:	6825      	ldr	r5, [r4, #0]
 80050a0:	f015 0506 	ands.w	r5, r5, #6
 80050a4:	d106      	bne.n	80050b4 <_printf_common+0x48>
 80050a6:	f104 0a19 	add.w	sl, r4, #25
 80050aa:	68e3      	ldr	r3, [r4, #12]
 80050ac:	6832      	ldr	r2, [r6, #0]
 80050ae:	1a9b      	subs	r3, r3, r2
 80050b0:	42ab      	cmp	r3, r5
 80050b2:	dc26      	bgt.n	8005102 <_printf_common+0x96>
 80050b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050b8:	1e13      	subs	r3, r2, #0
 80050ba:	6822      	ldr	r2, [r4, #0]
 80050bc:	bf18      	it	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	0692      	lsls	r2, r2, #26
 80050c2:	d42b      	bmi.n	800511c <_printf_common+0xb0>
 80050c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050c8:	4649      	mov	r1, r9
 80050ca:	4638      	mov	r0, r7
 80050cc:	47c0      	blx	r8
 80050ce:	3001      	adds	r0, #1
 80050d0:	d01e      	beq.n	8005110 <_printf_common+0xa4>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	68e5      	ldr	r5, [r4, #12]
 80050d6:	6832      	ldr	r2, [r6, #0]
 80050d8:	f003 0306 	and.w	r3, r3, #6
 80050dc:	2b04      	cmp	r3, #4
 80050de:	bf08      	it	eq
 80050e0:	1aad      	subeq	r5, r5, r2
 80050e2:	68a3      	ldr	r3, [r4, #8]
 80050e4:	6922      	ldr	r2, [r4, #16]
 80050e6:	bf0c      	ite	eq
 80050e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050ec:	2500      	movne	r5, #0
 80050ee:	4293      	cmp	r3, r2
 80050f0:	bfc4      	itt	gt
 80050f2:	1a9b      	subgt	r3, r3, r2
 80050f4:	18ed      	addgt	r5, r5, r3
 80050f6:	2600      	movs	r6, #0
 80050f8:	341a      	adds	r4, #26
 80050fa:	42b5      	cmp	r5, r6
 80050fc:	d11a      	bne.n	8005134 <_printf_common+0xc8>
 80050fe:	2000      	movs	r0, #0
 8005100:	e008      	b.n	8005114 <_printf_common+0xa8>
 8005102:	2301      	movs	r3, #1
 8005104:	4652      	mov	r2, sl
 8005106:	4649      	mov	r1, r9
 8005108:	4638      	mov	r0, r7
 800510a:	47c0      	blx	r8
 800510c:	3001      	adds	r0, #1
 800510e:	d103      	bne.n	8005118 <_printf_common+0xac>
 8005110:	f04f 30ff 	mov.w	r0, #4294967295
 8005114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005118:	3501      	adds	r5, #1
 800511a:	e7c6      	b.n	80050aa <_printf_common+0x3e>
 800511c:	18e1      	adds	r1, r4, r3
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	2030      	movs	r0, #48	; 0x30
 8005122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005126:	4422      	add	r2, r4
 8005128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800512c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005130:	3302      	adds	r3, #2
 8005132:	e7c7      	b.n	80050c4 <_printf_common+0x58>
 8005134:	2301      	movs	r3, #1
 8005136:	4622      	mov	r2, r4
 8005138:	4649      	mov	r1, r9
 800513a:	4638      	mov	r0, r7
 800513c:	47c0      	blx	r8
 800513e:	3001      	adds	r0, #1
 8005140:	d0e6      	beq.n	8005110 <_printf_common+0xa4>
 8005142:	3601      	adds	r6, #1
 8005144:	e7d9      	b.n	80050fa <_printf_common+0x8e>
	...

08005148 <_printf_i>:
 8005148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800514c:	7e0f      	ldrb	r7, [r1, #24]
 800514e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005150:	2f78      	cmp	r7, #120	; 0x78
 8005152:	4691      	mov	r9, r2
 8005154:	4680      	mov	r8, r0
 8005156:	460c      	mov	r4, r1
 8005158:	469a      	mov	sl, r3
 800515a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800515e:	d807      	bhi.n	8005170 <_printf_i+0x28>
 8005160:	2f62      	cmp	r7, #98	; 0x62
 8005162:	d80a      	bhi.n	800517a <_printf_i+0x32>
 8005164:	2f00      	cmp	r7, #0
 8005166:	f000 80d8 	beq.w	800531a <_printf_i+0x1d2>
 800516a:	2f58      	cmp	r7, #88	; 0x58
 800516c:	f000 80a3 	beq.w	80052b6 <_printf_i+0x16e>
 8005170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005178:	e03a      	b.n	80051f0 <_printf_i+0xa8>
 800517a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800517e:	2b15      	cmp	r3, #21
 8005180:	d8f6      	bhi.n	8005170 <_printf_i+0x28>
 8005182:	a101      	add	r1, pc, #4	; (adr r1, 8005188 <_printf_i+0x40>)
 8005184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005188:	080051e1 	.word	0x080051e1
 800518c:	080051f5 	.word	0x080051f5
 8005190:	08005171 	.word	0x08005171
 8005194:	08005171 	.word	0x08005171
 8005198:	08005171 	.word	0x08005171
 800519c:	08005171 	.word	0x08005171
 80051a0:	080051f5 	.word	0x080051f5
 80051a4:	08005171 	.word	0x08005171
 80051a8:	08005171 	.word	0x08005171
 80051ac:	08005171 	.word	0x08005171
 80051b0:	08005171 	.word	0x08005171
 80051b4:	08005301 	.word	0x08005301
 80051b8:	08005225 	.word	0x08005225
 80051bc:	080052e3 	.word	0x080052e3
 80051c0:	08005171 	.word	0x08005171
 80051c4:	08005171 	.word	0x08005171
 80051c8:	08005323 	.word	0x08005323
 80051cc:	08005171 	.word	0x08005171
 80051d0:	08005225 	.word	0x08005225
 80051d4:	08005171 	.word	0x08005171
 80051d8:	08005171 	.word	0x08005171
 80051dc:	080052eb 	.word	0x080052eb
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	1d1a      	adds	r2, r3, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	602a      	str	r2, [r5, #0]
 80051e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051f0:	2301      	movs	r3, #1
 80051f2:	e0a3      	b.n	800533c <_printf_i+0x1f4>
 80051f4:	6820      	ldr	r0, [r4, #0]
 80051f6:	6829      	ldr	r1, [r5, #0]
 80051f8:	0606      	lsls	r6, r0, #24
 80051fa:	f101 0304 	add.w	r3, r1, #4
 80051fe:	d50a      	bpl.n	8005216 <_printf_i+0xce>
 8005200:	680e      	ldr	r6, [r1, #0]
 8005202:	602b      	str	r3, [r5, #0]
 8005204:	2e00      	cmp	r6, #0
 8005206:	da03      	bge.n	8005210 <_printf_i+0xc8>
 8005208:	232d      	movs	r3, #45	; 0x2d
 800520a:	4276      	negs	r6, r6
 800520c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005210:	485e      	ldr	r0, [pc, #376]	; (800538c <_printf_i+0x244>)
 8005212:	230a      	movs	r3, #10
 8005214:	e019      	b.n	800524a <_printf_i+0x102>
 8005216:	680e      	ldr	r6, [r1, #0]
 8005218:	602b      	str	r3, [r5, #0]
 800521a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800521e:	bf18      	it	ne
 8005220:	b236      	sxthne	r6, r6
 8005222:	e7ef      	b.n	8005204 <_printf_i+0xbc>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	6820      	ldr	r0, [r4, #0]
 8005228:	1d19      	adds	r1, r3, #4
 800522a:	6029      	str	r1, [r5, #0]
 800522c:	0601      	lsls	r1, r0, #24
 800522e:	d501      	bpl.n	8005234 <_printf_i+0xec>
 8005230:	681e      	ldr	r6, [r3, #0]
 8005232:	e002      	b.n	800523a <_printf_i+0xf2>
 8005234:	0646      	lsls	r6, r0, #25
 8005236:	d5fb      	bpl.n	8005230 <_printf_i+0xe8>
 8005238:	881e      	ldrh	r6, [r3, #0]
 800523a:	4854      	ldr	r0, [pc, #336]	; (800538c <_printf_i+0x244>)
 800523c:	2f6f      	cmp	r7, #111	; 0x6f
 800523e:	bf0c      	ite	eq
 8005240:	2308      	moveq	r3, #8
 8005242:	230a      	movne	r3, #10
 8005244:	2100      	movs	r1, #0
 8005246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800524a:	6865      	ldr	r5, [r4, #4]
 800524c:	60a5      	str	r5, [r4, #8]
 800524e:	2d00      	cmp	r5, #0
 8005250:	bfa2      	ittt	ge
 8005252:	6821      	ldrge	r1, [r4, #0]
 8005254:	f021 0104 	bicge.w	r1, r1, #4
 8005258:	6021      	strge	r1, [r4, #0]
 800525a:	b90e      	cbnz	r6, 8005260 <_printf_i+0x118>
 800525c:	2d00      	cmp	r5, #0
 800525e:	d04d      	beq.n	80052fc <_printf_i+0x1b4>
 8005260:	4615      	mov	r5, r2
 8005262:	fbb6 f1f3 	udiv	r1, r6, r3
 8005266:	fb03 6711 	mls	r7, r3, r1, r6
 800526a:	5dc7      	ldrb	r7, [r0, r7]
 800526c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005270:	4637      	mov	r7, r6
 8005272:	42bb      	cmp	r3, r7
 8005274:	460e      	mov	r6, r1
 8005276:	d9f4      	bls.n	8005262 <_printf_i+0x11a>
 8005278:	2b08      	cmp	r3, #8
 800527a:	d10b      	bne.n	8005294 <_printf_i+0x14c>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	07de      	lsls	r6, r3, #31
 8005280:	d508      	bpl.n	8005294 <_printf_i+0x14c>
 8005282:	6923      	ldr	r3, [r4, #16]
 8005284:	6861      	ldr	r1, [r4, #4]
 8005286:	4299      	cmp	r1, r3
 8005288:	bfde      	ittt	le
 800528a:	2330      	movle	r3, #48	; 0x30
 800528c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005290:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005294:	1b52      	subs	r2, r2, r5
 8005296:	6122      	str	r2, [r4, #16]
 8005298:	f8cd a000 	str.w	sl, [sp]
 800529c:	464b      	mov	r3, r9
 800529e:	aa03      	add	r2, sp, #12
 80052a0:	4621      	mov	r1, r4
 80052a2:	4640      	mov	r0, r8
 80052a4:	f7ff fee2 	bl	800506c <_printf_common>
 80052a8:	3001      	adds	r0, #1
 80052aa:	d14c      	bne.n	8005346 <_printf_i+0x1fe>
 80052ac:	f04f 30ff 	mov.w	r0, #4294967295
 80052b0:	b004      	add	sp, #16
 80052b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b6:	4835      	ldr	r0, [pc, #212]	; (800538c <_printf_i+0x244>)
 80052b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052bc:	6829      	ldr	r1, [r5, #0]
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80052c4:	6029      	str	r1, [r5, #0]
 80052c6:	061d      	lsls	r5, r3, #24
 80052c8:	d514      	bpl.n	80052f4 <_printf_i+0x1ac>
 80052ca:	07df      	lsls	r7, r3, #31
 80052cc:	bf44      	itt	mi
 80052ce:	f043 0320 	orrmi.w	r3, r3, #32
 80052d2:	6023      	strmi	r3, [r4, #0]
 80052d4:	b91e      	cbnz	r6, 80052de <_printf_i+0x196>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	f023 0320 	bic.w	r3, r3, #32
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	2310      	movs	r3, #16
 80052e0:	e7b0      	b.n	8005244 <_printf_i+0xfc>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	f043 0320 	orr.w	r3, r3, #32
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	2378      	movs	r3, #120	; 0x78
 80052ec:	4828      	ldr	r0, [pc, #160]	; (8005390 <_printf_i+0x248>)
 80052ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052f2:	e7e3      	b.n	80052bc <_printf_i+0x174>
 80052f4:	0659      	lsls	r1, r3, #25
 80052f6:	bf48      	it	mi
 80052f8:	b2b6      	uxthmi	r6, r6
 80052fa:	e7e6      	b.n	80052ca <_printf_i+0x182>
 80052fc:	4615      	mov	r5, r2
 80052fe:	e7bb      	b.n	8005278 <_printf_i+0x130>
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	6826      	ldr	r6, [r4, #0]
 8005304:	6961      	ldr	r1, [r4, #20]
 8005306:	1d18      	adds	r0, r3, #4
 8005308:	6028      	str	r0, [r5, #0]
 800530a:	0635      	lsls	r5, r6, #24
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	d501      	bpl.n	8005314 <_printf_i+0x1cc>
 8005310:	6019      	str	r1, [r3, #0]
 8005312:	e002      	b.n	800531a <_printf_i+0x1d2>
 8005314:	0670      	lsls	r0, r6, #25
 8005316:	d5fb      	bpl.n	8005310 <_printf_i+0x1c8>
 8005318:	8019      	strh	r1, [r3, #0]
 800531a:	2300      	movs	r3, #0
 800531c:	6123      	str	r3, [r4, #16]
 800531e:	4615      	mov	r5, r2
 8005320:	e7ba      	b.n	8005298 <_printf_i+0x150>
 8005322:	682b      	ldr	r3, [r5, #0]
 8005324:	1d1a      	adds	r2, r3, #4
 8005326:	602a      	str	r2, [r5, #0]
 8005328:	681d      	ldr	r5, [r3, #0]
 800532a:	6862      	ldr	r2, [r4, #4]
 800532c:	2100      	movs	r1, #0
 800532e:	4628      	mov	r0, r5
 8005330:	f7fa ff76 	bl	8000220 <memchr>
 8005334:	b108      	cbz	r0, 800533a <_printf_i+0x1f2>
 8005336:	1b40      	subs	r0, r0, r5
 8005338:	6060      	str	r0, [r4, #4]
 800533a:	6863      	ldr	r3, [r4, #4]
 800533c:	6123      	str	r3, [r4, #16]
 800533e:	2300      	movs	r3, #0
 8005340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005344:	e7a8      	b.n	8005298 <_printf_i+0x150>
 8005346:	6923      	ldr	r3, [r4, #16]
 8005348:	462a      	mov	r2, r5
 800534a:	4649      	mov	r1, r9
 800534c:	4640      	mov	r0, r8
 800534e:	47d0      	blx	sl
 8005350:	3001      	adds	r0, #1
 8005352:	d0ab      	beq.n	80052ac <_printf_i+0x164>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	079b      	lsls	r3, r3, #30
 8005358:	d413      	bmi.n	8005382 <_printf_i+0x23a>
 800535a:	68e0      	ldr	r0, [r4, #12]
 800535c:	9b03      	ldr	r3, [sp, #12]
 800535e:	4298      	cmp	r0, r3
 8005360:	bfb8      	it	lt
 8005362:	4618      	movlt	r0, r3
 8005364:	e7a4      	b.n	80052b0 <_printf_i+0x168>
 8005366:	2301      	movs	r3, #1
 8005368:	4632      	mov	r2, r6
 800536a:	4649      	mov	r1, r9
 800536c:	4640      	mov	r0, r8
 800536e:	47d0      	blx	sl
 8005370:	3001      	adds	r0, #1
 8005372:	d09b      	beq.n	80052ac <_printf_i+0x164>
 8005374:	3501      	adds	r5, #1
 8005376:	68e3      	ldr	r3, [r4, #12]
 8005378:	9903      	ldr	r1, [sp, #12]
 800537a:	1a5b      	subs	r3, r3, r1
 800537c:	42ab      	cmp	r3, r5
 800537e:	dcf2      	bgt.n	8005366 <_printf_i+0x21e>
 8005380:	e7eb      	b.n	800535a <_printf_i+0x212>
 8005382:	2500      	movs	r5, #0
 8005384:	f104 0619 	add.w	r6, r4, #25
 8005388:	e7f5      	b.n	8005376 <_printf_i+0x22e>
 800538a:	bf00      	nop
 800538c:	080056ad 	.word	0x080056ad
 8005390:	080056be 	.word	0x080056be

08005394 <_sbrk_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	4d06      	ldr	r5, [pc, #24]	; (80053b0 <_sbrk_r+0x1c>)
 8005398:	2300      	movs	r3, #0
 800539a:	4604      	mov	r4, r0
 800539c:	4608      	mov	r0, r1
 800539e:	602b      	str	r3, [r5, #0]
 80053a0:	f7fb ff4e 	bl	8001240 <_sbrk>
 80053a4:	1c43      	adds	r3, r0, #1
 80053a6:	d102      	bne.n	80053ae <_sbrk_r+0x1a>
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	b103      	cbz	r3, 80053ae <_sbrk_r+0x1a>
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	bd38      	pop	{r3, r4, r5, pc}
 80053b0:	200001b8 	.word	0x200001b8

080053b4 <__sread>:
 80053b4:	b510      	push	{r4, lr}
 80053b6:	460c      	mov	r4, r1
 80053b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053bc:	f000 f8a0 	bl	8005500 <_read_r>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	bfab      	itete	ge
 80053c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053c6:	89a3      	ldrhlt	r3, [r4, #12]
 80053c8:	181b      	addge	r3, r3, r0
 80053ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053ce:	bfac      	ite	ge
 80053d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80053d2:	81a3      	strhlt	r3, [r4, #12]
 80053d4:	bd10      	pop	{r4, pc}

080053d6 <__swrite>:
 80053d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053da:	461f      	mov	r7, r3
 80053dc:	898b      	ldrh	r3, [r1, #12]
 80053de:	05db      	lsls	r3, r3, #23
 80053e0:	4605      	mov	r5, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	4616      	mov	r6, r2
 80053e6:	d505      	bpl.n	80053f4 <__swrite+0x1e>
 80053e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ec:	2302      	movs	r3, #2
 80053ee:	2200      	movs	r2, #0
 80053f0:	f000 f868 	bl	80054c4 <_lseek_r>
 80053f4:	89a3      	ldrh	r3, [r4, #12]
 80053f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053fe:	81a3      	strh	r3, [r4, #12]
 8005400:	4632      	mov	r2, r6
 8005402:	463b      	mov	r3, r7
 8005404:	4628      	mov	r0, r5
 8005406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800540a:	f000 b817 	b.w	800543c <_write_r>

0800540e <__sseek>:
 800540e:	b510      	push	{r4, lr}
 8005410:	460c      	mov	r4, r1
 8005412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005416:	f000 f855 	bl	80054c4 <_lseek_r>
 800541a:	1c43      	adds	r3, r0, #1
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	bf15      	itete	ne
 8005420:	6560      	strne	r0, [r4, #84]	; 0x54
 8005422:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005426:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800542a:	81a3      	strheq	r3, [r4, #12]
 800542c:	bf18      	it	ne
 800542e:	81a3      	strhne	r3, [r4, #12]
 8005430:	bd10      	pop	{r4, pc}

08005432 <__sclose>:
 8005432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005436:	f000 b813 	b.w	8005460 <_close_r>
	...

0800543c <_write_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4d07      	ldr	r5, [pc, #28]	; (800545c <_write_r+0x20>)
 8005440:	4604      	mov	r4, r0
 8005442:	4608      	mov	r0, r1
 8005444:	4611      	mov	r1, r2
 8005446:	2200      	movs	r2, #0
 8005448:	602a      	str	r2, [r5, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	f7fb f8ba 	bl	80005c4 <_write>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	d102      	bne.n	800545a <_write_r+0x1e>
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	b103      	cbz	r3, 800545a <_write_r+0x1e>
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	bd38      	pop	{r3, r4, r5, pc}
 800545c:	200001b8 	.word	0x200001b8

08005460 <_close_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	4d06      	ldr	r5, [pc, #24]	; (800547c <_close_r+0x1c>)
 8005464:	2300      	movs	r3, #0
 8005466:	4604      	mov	r4, r0
 8005468:	4608      	mov	r0, r1
 800546a:	602b      	str	r3, [r5, #0]
 800546c:	f7fb feb3 	bl	80011d6 <_close>
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	d102      	bne.n	800547a <_close_r+0x1a>
 8005474:	682b      	ldr	r3, [r5, #0]
 8005476:	b103      	cbz	r3, 800547a <_close_r+0x1a>
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	bd38      	pop	{r3, r4, r5, pc}
 800547c:	200001b8 	.word	0x200001b8

08005480 <_fstat_r>:
 8005480:	b538      	push	{r3, r4, r5, lr}
 8005482:	4d07      	ldr	r5, [pc, #28]	; (80054a0 <_fstat_r+0x20>)
 8005484:	2300      	movs	r3, #0
 8005486:	4604      	mov	r4, r0
 8005488:	4608      	mov	r0, r1
 800548a:	4611      	mov	r1, r2
 800548c:	602b      	str	r3, [r5, #0]
 800548e:	f7fb feae 	bl	80011ee <_fstat>
 8005492:	1c43      	adds	r3, r0, #1
 8005494:	d102      	bne.n	800549c <_fstat_r+0x1c>
 8005496:	682b      	ldr	r3, [r5, #0]
 8005498:	b103      	cbz	r3, 800549c <_fstat_r+0x1c>
 800549a:	6023      	str	r3, [r4, #0]
 800549c:	bd38      	pop	{r3, r4, r5, pc}
 800549e:	bf00      	nop
 80054a0:	200001b8 	.word	0x200001b8

080054a4 <_isatty_r>:
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	4d06      	ldr	r5, [pc, #24]	; (80054c0 <_isatty_r+0x1c>)
 80054a8:	2300      	movs	r3, #0
 80054aa:	4604      	mov	r4, r0
 80054ac:	4608      	mov	r0, r1
 80054ae:	602b      	str	r3, [r5, #0]
 80054b0:	f7fb fead 	bl	800120e <_isatty>
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	d102      	bne.n	80054be <_isatty_r+0x1a>
 80054b8:	682b      	ldr	r3, [r5, #0]
 80054ba:	b103      	cbz	r3, 80054be <_isatty_r+0x1a>
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	bd38      	pop	{r3, r4, r5, pc}
 80054c0:	200001b8 	.word	0x200001b8

080054c4 <_lseek_r>:
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	4d07      	ldr	r5, [pc, #28]	; (80054e4 <_lseek_r+0x20>)
 80054c8:	4604      	mov	r4, r0
 80054ca:	4608      	mov	r0, r1
 80054cc:	4611      	mov	r1, r2
 80054ce:	2200      	movs	r2, #0
 80054d0:	602a      	str	r2, [r5, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	f7fb fea6 	bl	8001224 <_lseek>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d102      	bne.n	80054e2 <_lseek_r+0x1e>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	b103      	cbz	r3, 80054e2 <_lseek_r+0x1e>
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	200001b8 	.word	0x200001b8

080054e8 <__malloc_lock>:
 80054e8:	4801      	ldr	r0, [pc, #4]	; (80054f0 <__malloc_lock+0x8>)
 80054ea:	f7ff bb15 	b.w	8004b18 <__retarget_lock_acquire_recursive>
 80054ee:	bf00      	nop
 80054f0:	200001ac 	.word	0x200001ac

080054f4 <__malloc_unlock>:
 80054f4:	4801      	ldr	r0, [pc, #4]	; (80054fc <__malloc_unlock+0x8>)
 80054f6:	f7ff bb10 	b.w	8004b1a <__retarget_lock_release_recursive>
 80054fa:	bf00      	nop
 80054fc:	200001ac 	.word	0x200001ac

08005500 <_read_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4d07      	ldr	r5, [pc, #28]	; (8005520 <_read_r+0x20>)
 8005504:	4604      	mov	r4, r0
 8005506:	4608      	mov	r0, r1
 8005508:	4611      	mov	r1, r2
 800550a:	2200      	movs	r2, #0
 800550c:	602a      	str	r2, [r5, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	f7fb fe44 	bl	800119c <_read>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_read_r+0x1e>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_read_r+0x1e>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	200001b8 	.word	0x200001b8

08005524 <_init>:
 8005524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005526:	bf00      	nop
 8005528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800552a:	bc08      	pop	{r3}
 800552c:	469e      	mov	lr, r3
 800552e:	4770      	bx	lr

08005530 <_fini>:
 8005530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005532:	bf00      	nop
 8005534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005536:	bc08      	pop	{r3}
 8005538:	469e      	mov	lr, r3
 800553a:	4770      	bx	lr
