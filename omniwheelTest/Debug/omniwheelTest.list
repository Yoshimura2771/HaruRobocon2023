
omniwheelTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f18  08003f18  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f20  08003f20  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f20  08003f20  00013f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f24  08003f24  00013f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000010  08003f38  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003f38  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed52  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd8  00000000  00000000  0002ed92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  00030a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  000315e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca66  00000000  00000000  000320a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d04d  00000000  00000000  0004eb0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7d92  00000000  00000000  0005bb5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001138ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003060  00000000  00000000  00113940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003ea8 	.word	0x08003ea8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08003ea8 	.word	0x08003ea8

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2iz>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d215      	bcs.n	800081a <__aeabi_d2iz+0x36>
 80007ee:	d511      	bpl.n	8000814 <__aeabi_d2iz+0x30>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d912      	bls.n	8000820 <__aeabi_d2iz+0x3c>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080a:	fa23 f002 	lsr.w	r0, r3, r2
 800080e:	bf18      	it	ne
 8000810:	4240      	negne	r0, r0
 8000812:	4770      	bx	lr
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	4770      	bx	lr
 800081a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800081e:	d105      	bne.n	800082c <__aeabi_d2iz+0x48>
 8000820:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000824:	bf08      	it	eq
 8000826:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b974 	b.w	8000b34 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468e      	mov	lr, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	d14d      	bne.n	800090e <__udivmoddi4+0xaa>
 8000872:	428a      	cmp	r2, r1
 8000874:	4694      	mov	ip, r2
 8000876:	d969      	bls.n	800094c <__udivmoddi4+0xe8>
 8000878:	fab2 f282 	clz	r2, r2
 800087c:	b152      	cbz	r2, 8000894 <__udivmoddi4+0x30>
 800087e:	fa01 f302 	lsl.w	r3, r1, r2
 8000882:	f1c2 0120 	rsb	r1, r2, #32
 8000886:	fa20 f101 	lsr.w	r1, r0, r1
 800088a:	fa0c fc02 	lsl.w	ip, ip, r2
 800088e:	ea41 0e03 	orr.w	lr, r1, r3
 8000892:	4094      	lsls	r4, r2
 8000894:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000898:	0c21      	lsrs	r1, r4, #16
 800089a:	fbbe f6f8 	udiv	r6, lr, r8
 800089e:	fa1f f78c 	uxth.w	r7, ip
 80008a2:	fb08 e316 	mls	r3, r8, r6, lr
 80008a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008aa:	fb06 f107 	mul.w	r1, r6, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d90a      	bls.n	80008c8 <__udivmoddi4+0x64>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ba:	f080 811f 	bcs.w	8000afc <__udivmoddi4+0x298>
 80008be:	4299      	cmp	r1, r3
 80008c0:	f240 811c 	bls.w	8000afc <__udivmoddi4+0x298>
 80008c4:	3e02      	subs	r6, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1a5b      	subs	r3, r3, r1
 80008ca:	b2a4      	uxth	r4, r4
 80008cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008d0:	fb08 3310 	mls	r3, r8, r0, r3
 80008d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d8:	fb00 f707 	mul.w	r7, r0, r7
 80008dc:	42a7      	cmp	r7, r4
 80008de:	d90a      	bls.n	80008f6 <__udivmoddi4+0x92>
 80008e0:	eb1c 0404 	adds.w	r4, ip, r4
 80008e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e8:	f080 810a 	bcs.w	8000b00 <__udivmoddi4+0x29c>
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	f240 8107 	bls.w	8000b00 <__udivmoddi4+0x29c>
 80008f2:	4464      	add	r4, ip
 80008f4:	3802      	subs	r0, #2
 80008f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008fa:	1be4      	subs	r4, r4, r7
 80008fc:	2600      	movs	r6, #0
 80008fe:	b11d      	cbz	r5, 8000908 <__udivmoddi4+0xa4>
 8000900:	40d4      	lsrs	r4, r2
 8000902:	2300      	movs	r3, #0
 8000904:	e9c5 4300 	strd	r4, r3, [r5]
 8000908:	4631      	mov	r1, r6
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d909      	bls.n	8000926 <__udivmoddi4+0xc2>
 8000912:	2d00      	cmp	r5, #0
 8000914:	f000 80ef 	beq.w	8000af6 <__udivmoddi4+0x292>
 8000918:	2600      	movs	r6, #0
 800091a:	e9c5 0100 	strd	r0, r1, [r5]
 800091e:	4630      	mov	r0, r6
 8000920:	4631      	mov	r1, r6
 8000922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000926:	fab3 f683 	clz	r6, r3
 800092a:	2e00      	cmp	r6, #0
 800092c:	d14a      	bne.n	80009c4 <__udivmoddi4+0x160>
 800092e:	428b      	cmp	r3, r1
 8000930:	d302      	bcc.n	8000938 <__udivmoddi4+0xd4>
 8000932:	4282      	cmp	r2, r0
 8000934:	f200 80f9 	bhi.w	8000b2a <__udivmoddi4+0x2c6>
 8000938:	1a84      	subs	r4, r0, r2
 800093a:	eb61 0303 	sbc.w	r3, r1, r3
 800093e:	2001      	movs	r0, #1
 8000940:	469e      	mov	lr, r3
 8000942:	2d00      	cmp	r5, #0
 8000944:	d0e0      	beq.n	8000908 <__udivmoddi4+0xa4>
 8000946:	e9c5 4e00 	strd	r4, lr, [r5]
 800094a:	e7dd      	b.n	8000908 <__udivmoddi4+0xa4>
 800094c:	b902      	cbnz	r2, 8000950 <__udivmoddi4+0xec>
 800094e:	deff      	udf	#255	; 0xff
 8000950:	fab2 f282 	clz	r2, r2
 8000954:	2a00      	cmp	r2, #0
 8000956:	f040 8092 	bne.w	8000a7e <__udivmoddi4+0x21a>
 800095a:	eba1 010c 	sub.w	r1, r1, ip
 800095e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000962:	fa1f fe8c 	uxth.w	lr, ip
 8000966:	2601      	movs	r6, #1
 8000968:	0c20      	lsrs	r0, r4, #16
 800096a:	fbb1 f3f7 	udiv	r3, r1, r7
 800096e:	fb07 1113 	mls	r1, r7, r3, r1
 8000972:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000976:	fb0e f003 	mul.w	r0, lr, r3
 800097a:	4288      	cmp	r0, r1
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x12c>
 800097e:	eb1c 0101 	adds.w	r1, ip, r1
 8000982:	f103 38ff 	add.w	r8, r3, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x12a>
 8000988:	4288      	cmp	r0, r1
 800098a:	f200 80cb 	bhi.w	8000b24 <__udivmoddi4+0x2c0>
 800098e:	4643      	mov	r3, r8
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f7 	udiv	r0, r1, r7
 8000998:	fb07 1110 	mls	r1, r7, r0, r1
 800099c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009a0:	fb0e fe00 	mul.w	lr, lr, r0
 80009a4:	45a6      	cmp	lr, r4
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x156>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x154>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f200 80bb 	bhi.w	8000b2e <__udivmoddi4+0x2ca>
 80009b8:	4608      	mov	r0, r1
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009c2:	e79c      	b.n	80008fe <__udivmoddi4+0x9a>
 80009c4:	f1c6 0720 	rsb	r7, r6, #32
 80009c8:	40b3      	lsls	r3, r6
 80009ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80009d2:	fa20 f407 	lsr.w	r4, r0, r7
 80009d6:	fa01 f306 	lsl.w	r3, r1, r6
 80009da:	431c      	orrs	r4, r3
 80009dc:	40f9      	lsrs	r1, r7
 80009de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e2:	fa00 f306 	lsl.w	r3, r0, r6
 80009e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009ea:	0c20      	lsrs	r0, r4, #16
 80009ec:	fa1f fe8c 	uxth.w	lr, ip
 80009f0:	fb09 1118 	mls	r1, r9, r8, r1
 80009f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009f8:	fb08 f00e 	mul.w	r0, r8, lr
 80009fc:	4288      	cmp	r0, r1
 80009fe:	fa02 f206 	lsl.w	r2, r2, r6
 8000a02:	d90b      	bls.n	8000a1c <__udivmoddi4+0x1b8>
 8000a04:	eb1c 0101 	adds.w	r1, ip, r1
 8000a08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a0c:	f080 8088 	bcs.w	8000b20 <__udivmoddi4+0x2bc>
 8000a10:	4288      	cmp	r0, r1
 8000a12:	f240 8085 	bls.w	8000b20 <__udivmoddi4+0x2bc>
 8000a16:	f1a8 0802 	sub.w	r8, r8, #2
 8000a1a:	4461      	add	r1, ip
 8000a1c:	1a09      	subs	r1, r1, r0
 8000a1e:	b2a4      	uxth	r4, r4
 8000a20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a24:	fb09 1110 	mls	r1, r9, r0, r1
 8000a28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a30:	458e      	cmp	lr, r1
 8000a32:	d908      	bls.n	8000a46 <__udivmoddi4+0x1e2>
 8000a34:	eb1c 0101 	adds.w	r1, ip, r1
 8000a38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a3c:	d26c      	bcs.n	8000b18 <__udivmoddi4+0x2b4>
 8000a3e:	458e      	cmp	lr, r1
 8000a40:	d96a      	bls.n	8000b18 <__udivmoddi4+0x2b4>
 8000a42:	3802      	subs	r0, #2
 8000a44:	4461      	add	r1, ip
 8000a46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a4e:	eba1 010e 	sub.w	r1, r1, lr
 8000a52:	42a1      	cmp	r1, r4
 8000a54:	46c8      	mov	r8, r9
 8000a56:	46a6      	mov	lr, r4
 8000a58:	d356      	bcc.n	8000b08 <__udivmoddi4+0x2a4>
 8000a5a:	d053      	beq.n	8000b04 <__udivmoddi4+0x2a0>
 8000a5c:	b15d      	cbz	r5, 8000a76 <__udivmoddi4+0x212>
 8000a5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a62:	eb61 010e 	sbc.w	r1, r1, lr
 8000a66:	fa01 f707 	lsl.w	r7, r1, r7
 8000a6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a6e:	40f1      	lsrs	r1, r6
 8000a70:	431f      	orrs	r7, r3
 8000a72:	e9c5 7100 	strd	r7, r1, [r5]
 8000a76:	2600      	movs	r6, #0
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	f1c2 0320 	rsb	r3, r2, #32
 8000a82:	40d8      	lsrs	r0, r3
 8000a84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a88:	fa21 f303 	lsr.w	r3, r1, r3
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	4301      	orrs	r1, r0
 8000a90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000aa0:	0c0b      	lsrs	r3, r1, #16
 8000aa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aaa:	429e      	cmp	r6, r3
 8000aac:	fa04 f402 	lsl.w	r4, r4, r2
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x260>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aba:	d22f      	bcs.n	8000b1c <__udivmoddi4+0x2b8>
 8000abc:	429e      	cmp	r6, r3
 8000abe:	d92d      	bls.n	8000b1c <__udivmoddi4+0x2b8>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	4463      	add	r3, ip
 8000ac4:	1b9b      	subs	r3, r3, r6
 8000ac6:	b289      	uxth	r1, r1
 8000ac8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000acc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ad0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ad4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x28a>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ae4:	d216      	bcs.n	8000b14 <__udivmoddi4+0x2b0>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d914      	bls.n	8000b14 <__udivmoddi4+0x2b0>
 8000aea:	3e02      	subs	r6, #2
 8000aec:	4461      	add	r1, ip
 8000aee:	1ac9      	subs	r1, r1, r3
 8000af0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000af4:	e738      	b.n	8000968 <__udivmoddi4+0x104>
 8000af6:	462e      	mov	r6, r5
 8000af8:	4628      	mov	r0, r5
 8000afa:	e705      	b.n	8000908 <__udivmoddi4+0xa4>
 8000afc:	4606      	mov	r6, r0
 8000afe:	e6e3      	b.n	80008c8 <__udivmoddi4+0x64>
 8000b00:	4618      	mov	r0, r3
 8000b02:	e6f8      	b.n	80008f6 <__udivmoddi4+0x92>
 8000b04:	454b      	cmp	r3, r9
 8000b06:	d2a9      	bcs.n	8000a5c <__udivmoddi4+0x1f8>
 8000b08:	ebb9 0802 	subs.w	r8, r9, r2
 8000b0c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b10:	3801      	subs	r0, #1
 8000b12:	e7a3      	b.n	8000a5c <__udivmoddi4+0x1f8>
 8000b14:	4646      	mov	r6, r8
 8000b16:	e7ea      	b.n	8000aee <__udivmoddi4+0x28a>
 8000b18:	4620      	mov	r0, r4
 8000b1a:	e794      	b.n	8000a46 <__udivmoddi4+0x1e2>
 8000b1c:	4640      	mov	r0, r8
 8000b1e:	e7d1      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b20:	46d0      	mov	r8, sl
 8000b22:	e77b      	b.n	8000a1c <__udivmoddi4+0x1b8>
 8000b24:	3b02      	subs	r3, #2
 8000b26:	4461      	add	r1, ip
 8000b28:	e732      	b.n	8000990 <__udivmoddi4+0x12c>
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	e709      	b.n	8000942 <__udivmoddi4+0xde>
 8000b2e:	4464      	add	r4, ip
 8000b30:	3802      	subs	r0, #2
 8000b32:	e742      	b.n	80009ba <__udivmoddi4+0x156>

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3e:	f000 fc50 	bl	80013e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b42:	f000 f881 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b46:	f000 f95d 	bl	8000e04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b4a:	f000 f90f 	bl	8000d6c <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000b4e:	f000 f8c7 	bl	8000ce0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000b52:	483b      	ldr	r0, [pc, #236]	; (8000c40 <main+0x108>)
 8000b54:	f000 ff42 	bl	80019dc <HAL_FDCAN_Start>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <main+0x2a>
  		Error_Handler();
 8000b5e:	f000 fadb 	bl	8001118 <Error_Handler>
  	}

  uint8_t i;
  uint8_t Vx, Vy, Om;
  uint8_t inputs[6];
  uint8_t inputPins[6] = {GPIO_PIN_0,GPIO_PIN_1,GPIO_PIN_4,GPIO_PIN_5,GPIO_PIN_6,GPIO_PIN_7};
 8000b62:	4a38      	ldr	r2, [pc, #224]	; (8000c44 <main+0x10c>)
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b6a:	6018      	str	r0, [r3, #0]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	8019      	strh	r1, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(i=0; i<6; i++){
 8000b70:	2300      	movs	r3, #0
 8000b72:	75fb      	strb	r3, [r7, #23]
 8000b74:	e015      	b.n	8000ba2 <main+0x6a>
		  inputs[i]=HAL_GPIO_ReadPin(GPIOA, inputPins[i]);//pullup, SET == LOW, RESET == HIGH
 8000b76:	7dfb      	ldrb	r3, [r7, #23]
 8000b78:	3318      	adds	r3, #24
 8000b7a:	443b      	add	r3, r7
 8000b7c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	7dfc      	ldrb	r4, [r7, #23]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8a:	f001 fb95 	bl	80022b8 <HAL_GPIO_ReadPin>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	461a      	mov	r2, r3
 8000b92:	f104 0318 	add.w	r3, r4, #24
 8000b96:	443b      	add	r3, r7
 8000b98:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  for(i=0; i<6; i++){
 8000b9c:	7dfb      	ldrb	r3, [r7, #23]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	75fb      	strb	r3, [r7, #23]
 8000ba2:	7dfb      	ldrb	r3, [r7, #23]
 8000ba4:	2b05      	cmp	r3, #5
 8000ba6:	d9e6      	bls.n	8000b76 <main+0x3e>
	  }

	  if(inputs[0]==GPIO_PIN_RESET){
 8000ba8:	7b3b      	ldrb	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d106      	bne.n	8000bbc <main+0x84>
		  Vx=0; Vy=0; Om=1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	75bb      	strb	r3, [r7, #22]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	757b      	strb	r3, [r7, #21]
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	753b      	strb	r3, [r7, #20]
 8000bba:	e037      	b.n	8000c2c <main+0xf4>
	  }
	  else if(inputs[1]==GPIO_PIN_RESET){
 8000bbc:	7b7b      	ldrb	r3, [r7, #13]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d106      	bne.n	8000bd0 <main+0x98>
		  Vx=0; Vy=0; Om=-1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	75bb      	strb	r3, [r7, #22]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	757b      	strb	r3, [r7, #21]
 8000bca:	23ff      	movs	r3, #255	; 0xff
 8000bcc:	753b      	strb	r3, [r7, #20]
 8000bce:	e02d      	b.n	8000c2c <main+0xf4>
	  }
	  else if(inputs[2]==GPIO_PIN_RESET){
 8000bd0:	7bbb      	ldrb	r3, [r7, #14]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d106      	bne.n	8000be4 <main+0xac>
		  Vx=1; Vy=0; Om=0;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	75bb      	strb	r3, [r7, #22]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	757b      	strb	r3, [r7, #21]
 8000bde:	2300      	movs	r3, #0
 8000be0:	753b      	strb	r3, [r7, #20]
 8000be2:	e023      	b.n	8000c2c <main+0xf4>
	  }
	  else if(inputs[3]==GPIO_PIN_RESET){
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d106      	bne.n	8000bf8 <main+0xc0>
		  Vx=-1; Vy=0; Om=0;
 8000bea:	23ff      	movs	r3, #255	; 0xff
 8000bec:	75bb      	strb	r3, [r7, #22]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	757b      	strb	r3, [r7, #21]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	753b      	strb	r3, [r7, #20]
 8000bf6:	e019      	b.n	8000c2c <main+0xf4>
	  }
	  else if(inputs[4]==GPIO_PIN_RESET){
 8000bf8:	7c3b      	ldrb	r3, [r7, #16]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d106      	bne.n	8000c0c <main+0xd4>
		  Vx=0; Vy=1; Om=0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	75bb      	strb	r3, [r7, #22]
 8000c02:	2301      	movs	r3, #1
 8000c04:	757b      	strb	r3, [r7, #21]
 8000c06:	2300      	movs	r3, #0
 8000c08:	753b      	strb	r3, [r7, #20]
 8000c0a:	e00f      	b.n	8000c2c <main+0xf4>
	  }
	  else if(inputs[5]==GPIO_PIN_RESET){
 8000c0c:	7c7b      	ldrb	r3, [r7, #17]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d106      	bne.n	8000c20 <main+0xe8>
		  Vx=0; Vy=-1; Om=0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	75bb      	strb	r3, [r7, #22]
 8000c16:	23ff      	movs	r3, #255	; 0xff
 8000c18:	757b      	strb	r3, [r7, #21]
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	753b      	strb	r3, [r7, #20]
 8000c1e:	e005      	b.n	8000c2c <main+0xf4>
	  }
	  else{
		  Vx=0; Vy=0; Om=0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	75bb      	strb	r3, [r7, #22]
 8000c24:	2300      	movs	r3, #0
 8000c26:	757b      	strb	r3, [r7, #21]
 8000c28:	2300      	movs	r3, #0
 8000c2a:	753b      	strb	r3, [r7, #20]
	  }
	  //Vx=0;Vy=0;Om=-1;


	  omnidrive(Vx,Vy,Om);
 8000c2c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000c30:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000c34:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f931 	bl	8000ea0 <omnidrive>
	  for(i=0; i<6; i++){
 8000c3e:	e797      	b.n	8000b70 <main+0x38>
 8000c40:	2000002c 	.word	0x2000002c
 8000c44:	08003ec0 	.word	0x08003ec0

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b094      	sub	sp, #80	; 0x50
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0318 	add.w	r3, r7, #24
 8000c52:	2238      	movs	r2, #56	; 0x38
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f003 f91e 	bl	8003e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c6e:	f001 fb53 	bl	8002318 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7c:	2340      	movs	r3, #64	; 0x40
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c80:	2302      	movs	r3, #2
 8000c82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c84:	2302      	movs	r3, #2
 8000c86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fbdd 	bl	8002460 <HAL_RCC_OscConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000cac:	f000 fa34 	bl	8001118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 fee1 	bl	8002a90 <HAL_RCC_ClockConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000cd4:	f000 fa20 	bl	8001118 <Error_Handler>
  }
}
 8000cd8:	bf00      	nop
 8000cda:	3750      	adds	r7, #80	; 0x50
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000ce6:	4a20      	ldr	r2, [pc, #128]	; (8000d68 <MX_FDCAN1_Init+0x88>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000cea:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000d10:	2205      	movs	r2, #5
 8000d12:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000d16:	2210      	movs	r2, #16
 8000d18:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000d1c:	220d      	movs	r2, #13
 8000d1e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000d22:	2202      	movs	r2, #2
 8000d24:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000d2e:	2204      	movs	r2, #4
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000d34:	2205      	movs	r2, #5
 8000d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_FDCAN1_Init+0x84>)
 8000d52:	f000 fce9 	bl	8001728 <HAL_FDCAN_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000d5c:	f000 f9dc 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000002c 	.word	0x2000002c
 8000d68:	40006400 	.word	0x40006400

08000d6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d70:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <MX_USART2_UART_Init+0x90>)
 8000d72:	4a23      	ldr	r2, [pc, #140]	; (8000e00 <MX_USART2_UART_Init+0x94>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <MX_USART2_UART_Init+0x90>)
 8000d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <MX_USART2_UART_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <MX_USART2_UART_Init+0x90>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <MX_USART2_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_USART2_UART_Init+0x90>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <MX_USART2_UART_Init+0x90>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_USART2_UART_Init+0x90>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_USART2_UART_Init+0x90>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_USART2_UART_Init+0x90>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_USART2_UART_Init+0x90>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000db4:	4811      	ldr	r0, [pc, #68]	; (8000dfc <MX_USART2_UART_Init+0x90>)
 8000db6:	f002 fa77 	bl	80032a8 <HAL_UART_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000dc0:	f000 f9aa 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	480d      	ldr	r0, [pc, #52]	; (8000dfc <MX_USART2_UART_Init+0x90>)
 8000dc8:	f002 ff78 	bl	8003cbc <HAL_UARTEx_SetTxFifoThreshold>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000dd2:	f000 f9a1 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4808      	ldr	r0, [pc, #32]	; (8000dfc <MX_USART2_UART_Init+0x90>)
 8000dda:	f002 ffad 	bl	8003d38 <HAL_UARTEx_SetRxFifoThreshold>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000de4:	f000 f998 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <MX_USART2_UART_Init+0x90>)
 8000dea:	f002 ff2e 	bl	8003c4a <HAL_UARTEx_DisableFifoMode>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000df4:	f000 f990 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000090 	.word	0x20000090
 8000e00:	40004400 	.word	0x40004400

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <MX_GPIO_Init+0x94>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <MX_GPIO_Init+0x94>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_GPIO_Init+0x94>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_GPIO_Init+0x94>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <MX_GPIO_Init+0x94>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_GPIO_Init+0x94>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e50:	4812      	ldr	r0, [pc, #72]	; (8000e9c <MX_GPIO_Init+0x98>)
 8000e52:	f001 fa49 	bl	80022e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000e56:	23f3      	movs	r3, #243	; 0xf3
 8000e58:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	4619      	mov	r1, r3
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f001 f8a2 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	4619      	mov	r1, r3
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_GPIO_Init+0x98>)
 8000e8a:	f001 f893 	bl	8001fb4 <HAL_GPIO_Init>

}
 8000e8e:	bf00      	nop
 8000e90:	3720      	adds	r7, #32
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	48000400 	.word	0x48000400

08000ea0 <omnidrive>:

/* USER CODE BEGIN 4 */
void omnidrive(int8_t Vx, int8_t Vy, int8_t Om)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	71bb      	strb	r3, [r7, #6]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	717b      	strb	r3, [r7, #5]
	int16_t vel[3];
	if(Vx != 0){
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d02d      	beq.n	8000f16 <omnidrive+0x76>
		vel[0] = speed*32*Vx;
 8000eba:	4b5b      	ldr	r3, [pc, #364]	; (8001028 <omnidrive+0x188>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	fb12 f303 	smulbb	r3, r2, r3
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	015b      	lsls	r3, r3, #5
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	813b      	strh	r3, [r7, #8]
		vel[1] = -1*speed*32*Vx;
 8000ed4:	4b54      	ldr	r3, [pc, #336]	; (8001028 <omnidrive+0x188>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	fb12 f303 	smulbb	r3, r2, r3
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	02d2      	lsls	r2, r2, #11
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	015b      	lsls	r3, r3, #5
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	817b      	strh	r3, [r7, #10]
		vel[2] = -1*speed*32*Vx;
 8000ef4:	4b4c      	ldr	r3, [pc, #304]	; (8001028 <omnidrive+0x188>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	fb12 f303 	smulbb	r3, r2, r3
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	461a      	mov	r2, r3
 8000f08:	02d2      	lsls	r2, r2, #11
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	015b      	lsls	r3, r3, #5
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	81bb      	strh	r3, [r7, #12]
 8000f14:	e071      	b.n	8000ffa <omnidrive+0x15a>
	}

	else if(Vy != 0){
 8000f16:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d037      	beq.n	8000f8e <omnidrive+0xee>
		vel[0] = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	813b      	strh	r3, [r7, #8]
		vel[1] = speed*64*Vy*1.73;
 8000f22:	4b41      	ldr	r3, [pc, #260]	; (8001028 <omnidrive+0x188>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f2c:	fb02 f303 	mul.w	r3, r2, r3
 8000f30:	019b      	lsls	r3, r3, #6
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fbec 	bl	8000710 <__aeabi_i2d>
 8000f38:	a339      	add	r3, pc, #228	; (adr r3, 8001020 <omnidrive+0x180>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	f7ff f96b 	bl	8000218 <__aeabi_dmul>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fc4b 	bl	80007e4 <__aeabi_d2iz>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	817b      	strh	r3, [r7, #10]
		vel[2] = speed*(-64)*Vy*1.73;
 8000f54:	4b34      	ldr	r3, [pc, #208]	; (8001028 <omnidrive+0x188>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f5e:	fb03 f202 	mul.w	r2, r3, r2
 8000f62:	4613      	mov	r3, r2
 8000f64:	069b      	lsls	r3, r3, #26
 8000f66:	1a9b      	subs	r3, r3, r2
 8000f68:	019b      	lsls	r3, r3, #6
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fbd0 	bl	8000710 <__aeabi_i2d>
 8000f70:	a32b      	add	r3, pc, #172	; (adr r3, 8001020 <omnidrive+0x180>)
 8000f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f76:	f7ff f94f 	bl	8000218 <__aeabi_dmul>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff fc2f 	bl	80007e4 <__aeabi_d2iz>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	81bb      	strh	r3, [r7, #12]
 8000f8c:	e035      	b.n	8000ffa <omnidrive+0x15a>
	}

	else if(Om !=0){
 8000f8e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d02b      	beq.n	8000fee <omnidrive+0x14e>
		Om=-1*Om;
 8000f96:	797b      	ldrb	r3, [r7, #5]
 8000f98:	425b      	negs	r3, r3
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	717b      	strb	r3, [r7, #5]
		vel[0] = speed*64*Om; vel[1] = speed*64*Om; vel[2] = speed*64*Om;
 8000f9e:	4b22      	ldr	r3, [pc, #136]	; (8001028 <omnidrive+0x188>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	fb12 f303 	smulbb	r3, r2, r3
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	019b      	lsls	r3, r3, #6
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	813b      	strh	r3, [r7, #8]
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <omnidrive+0x188>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	fb12 f303 	smulbb	r3, r2, r3
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	019b      	lsls	r3, r3, #6
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	817b      	strh	r3, [r7, #10]
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <omnidrive+0x188>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	fb12 f303 	smulbb	r3, r2, r3
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	019b      	lsls	r3, r3, #6
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	81bb      	strh	r3, [r7, #12]
 8000fec:	e005      	b.n	8000ffa <omnidrive+0x15a>
	}

	else{
		vel[0] = 0; vel[1] = 0; vel[2] = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	813b      	strh	r3, [r7, #8]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	817b      	strh	r3, [r7, #10]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	81bb      	strh	r3, [r7, #12]
	}

	vel[0]=0; vel[1]=16384; vel[2]=0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	813b      	strh	r3, [r7, #8]
 8000ffe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001002:	817b      	strh	r3, [r7, #10]
 8001004:	2300      	movs	r3, #0
 8001006:	81bb      	strh	r3, [r7, #12]

	CAN_Motordrive(vel);
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f80d 	bl	800102c <CAN_Motordrive>
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	f3af 8000 	nop.w
 8001020:	7ae147ae 	.word	0x7ae147ae
 8001024:	3ffbae14 	.word	0x3ffbae14
 8001028:	20000000 	.word	0x20000000

0800102c <CAN_Motordrive>:


void CAN_Motordrive(int16_t vel[])
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	; 0x38
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	FDCAN_TxHeaderTypeDef TxHeader;
	int i;
	uint8_t TxData[8];
	for(i=0; i<3; i++){
 8001034:	2300      	movs	r3, #0
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
 8001038:	e040      	b.n	80010bc <CAN_Motordrive+0x90>
		if(vel[i]<-16384)vel[i]=-16384;
 800103a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001046:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 800104a:	da07      	bge.n	800105c <CAN_Motordrive+0x30>
 800104c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	4413      	add	r3, r2
 8001054:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001058:	801a      	strh	r2, [r3, #0]
 800105a:	e00f      	b.n	800107c <CAN_Motordrive+0x50>
		else if(vel[i]>16384)vel[i]=16384;
 800105c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800106c:	dd06      	ble.n	800107c <CAN_Motordrive+0x50>
 800106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800107a:	801a      	strh	r2, [r3, #0]
		TxData[i*2]=vel[i]>>8;//上位ビ�?�?
 800107c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001088:	121b      	asrs	r3, r3, #8
 800108a:	b21a      	sxth	r2, r3
 800108c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	3338      	adds	r3, #56	; 0x38
 8001094:	443b      	add	r3, r7
 8001096:	f803 2c30 	strb.w	r2, [r3, #-48]
		TxData[i*2+1]=vel[i]&0x00FF;//下位ビ�?�?
 800109a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	3301      	adds	r3, #1
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	3338      	adds	r3, #56	; 0x38
 80010b0:	443b      	add	r3, r7
 80010b2:	f803 2c30 	strb.w	r2, [r3, #-48]
	for(i=0; i<3; i++){
 80010b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b8:	3301      	adds	r3, #1
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
 80010bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010be:	2b02      	cmp	r3, #2
 80010c0:	ddbb      	ble.n	800103a <CAN_Motordrive+0xe>
	}


	TxHeader.IdType = FDCAN_STANDARD_ID;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80010ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010ce:	61fb      	str	r3, [r7, #28]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxHeader.MessageMarker = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
	TxHeader.Identifier = CANID_MOTORS;
 80010e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e8:	613b      	str	r3, [r7, #16]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80010ea:	f107 0208 	add.w	r2, r7, #8
 80010ee:	f107 0310 	add.w	r3, r7, #16
 80010f2:	4619      	mov	r1, r3
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <CAN_Motordrive+0xe8>)
 80010f6:	f000 fc99 	bl	8001a2c <HAL_FDCAN_AddMessageToTxFifoQ>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <CAN_Motordrive+0xd8>
		/* Transmission request Error */
		Error_Handler();
 8001100:	f000 f80a 	bl	8001118 <Error_Handler>
	}
	HAL_Delay(10);
 8001104:	200a      	movs	r0, #10
 8001106:	f000 f9dd 	bl	80014c4 <HAL_Delay>
}
 800110a:	bf00      	nop
 800110c:	3738      	adds	r7, #56	; 0x38
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000002c 	.word	0x2000002c

08001118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
}
 800111e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001120:	e7fe      	b.n	8001120 <Error_Handler+0x8>
	...

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_MspInit+0x44>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <HAL_MspInit+0x44>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6613      	str	r3, [r2, #96]	; 0x60
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_MspInit+0x44>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_MspInit+0x44>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <HAL_MspInit+0x44>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	6593      	str	r3, [r2, #88]	; 0x58
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_MspInit+0x44>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b09a      	sub	sp, #104	; 0x68
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2244      	movs	r2, #68	; 0x44
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f002 fe83 	bl	8003e98 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a28      	ldr	r2, [pc, #160]	; (8001238 <HAL_FDCAN_MspInit+0xcc>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d149      	bne.n	8001230 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80011a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011a6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4618      	mov	r0, r3
 80011ae:	f001 fe8b 	bl	8002ec8 <HAL_RCCEx_PeriphCLKConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80011b8:	f7ff ffae 	bl	8001118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <HAL_FDCAN_MspInit+0xd0>)
 80011be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c0:	4a1e      	ldr	r2, [pc, #120]	; (800123c <HAL_FDCAN_MspInit+0xd0>)
 80011c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c6:	6593      	str	r3, [r2, #88]	; 0x58
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_FDCAN_MspInit+0xd0>)
 80011ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_FDCAN_MspInit+0xd0>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d8:	4a18      	ldr	r2, [pc, #96]	; (800123c <HAL_FDCAN_MspInit+0xd0>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_FDCAN_MspInit+0xd0>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011f0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80011fe:	2309      	movs	r3, #9
 8001200:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f000 fed2 	bl	8001fb4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	2015      	movs	r0, #21
 8001216:	f000 fa52 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800121a:	2015      	movs	r0, #21
 800121c:	f000 fa69 	bl	80016f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	2100      	movs	r1, #0
 8001224:	2016      	movs	r0, #22
 8001226:	f000 fa4a 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800122a:	2016      	movs	r0, #22
 800122c:	f000 fa61 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3768      	adds	r7, #104	; 0x68
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40006400 	.word	0x40006400
 800123c:	40021000 	.word	0x40021000

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b09a      	sub	sp, #104	; 0x68
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	2244      	movs	r2, #68	; 0x44
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f002 fe19 	bl	8003e98 <memset>
  if(huart->Instance==USART2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a1f      	ldr	r2, [pc, #124]	; (80012e8 <HAL_UART_MspInit+0xa8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d136      	bne.n	80012de <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001270:	2302      	movs	r3, #2
 8001272:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fe23 	bl	8002ec8 <HAL_RCCEx_PeriphCLKConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001288:	f7ff ff46 	bl	8001118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <HAL_UART_MspInit+0xac>)
 800128e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001290:	4a16      	ldr	r2, [pc, #88]	; (80012ec <HAL_UART_MspInit+0xac>)
 8001292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001296:	6593      	str	r3, [r2, #88]	; 0x58
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_UART_MspInit+0xac>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_UART_MspInit+0xac>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	4a10      	ldr	r2, [pc, #64]	; (80012ec <HAL_UART_MspInit+0xac>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_UART_MspInit+0xac>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80012bc:	230c      	movs	r3, #12
 80012be:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012cc:	2307      	movs	r3, #7
 80012ce:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012d4:	4619      	mov	r1, r3
 80012d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012da:	f000 fe6b 	bl	8001fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012de:	bf00      	nop
 80012e0:	3768      	adds	r7, #104	; 0x68
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40004400 	.word	0x40004400
 80012ec:	40021000 	.word	0x40021000

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler+0x4>

080012f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler+0x4>

08001302 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <UsageFault_Handler+0x4>

0800130e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133c:	f000 f8a4 	bl	8001488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}

08001344 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <FDCAN1_IT0_IRQHandler+0x10>)
 800134a:	f000 fbb3 	bl	8001ab4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000002c 	.word	0x2000002c

08001358 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <FDCAN1_IT1_IRQHandler+0x10>)
 800135e:	f000 fba9 	bl	8001ab4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	2000002c 	.word	0x2000002c

0800136c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <SystemInit+0x20>)
 8001372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <SystemInit+0x20>)
 8001378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800137c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001392:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001394:	480d      	ldr	r0, [pc, #52]	; (80013cc <LoopForever+0x6>)
  ldr r1, =_edata
 8001396:	490e      	ldr	r1, [pc, #56]	; (80013d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001398:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <LoopForever+0xe>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ac:	4c0b      	ldr	r4, [pc, #44]	; (80013dc <LoopForever+0x16>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ba:	f7ff ffd7 	bl	800136c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013be:	f002 fd47 	bl	8003e50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013c2:	f7ff fbb9 	bl	8000b38 <main>

080013c6 <LoopForever>:

LoopForever:
    b LoopForever
 80013c6:	e7fe      	b.n	80013c6 <LoopForever>
  ldr   r0, =_estack
 80013c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80013d4:	08003f28 	.word	0x08003f28
  ldr r2, =_sbss
 80013d8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80013dc:	20000124 	.word	0x20000124

080013e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC1_2_IRQHandler>

080013e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f000 f95b 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f2:	2000      	movs	r0, #0
 80013f4:	f000 f80e 	bl	8001414 <HAL_InitTick>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	e001      	b.n	8001408 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001404:	f7ff fe8e 	bl	8001124 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001408:	79fb      	ldrb	r3, [r7, #7]

}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_InitTick+0x68>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d022      	beq.n	800146e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_InitTick+0x6c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_InitTick+0x68>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001434:	fbb1 f3f3 	udiv	r3, r1, r3
 8001438:	fbb2 f3f3 	udiv	r3, r2, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f966 	bl	800170e <HAL_SYSTICK_Config>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10f      	bne.n	8001468 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	d809      	bhi.n	8001462 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144e:	2200      	movs	r2, #0
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	f04f 30ff 	mov.w	r0, #4294967295
 8001456:	f000 f932 	bl	80016be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <HAL_InitTick+0x70>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e007      	b.n	8001472 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e004      	b.n	8001472 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e001      	b.n	8001472 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2000000c 	.word	0x2000000c
 8001480:	20000004 	.word	0x20000004
 8001484:	20000008 	.word	0x20000008

08001488 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_IncTick+0x1c>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_IncTick+0x20>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4413      	add	r3, r2
 8001496:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <HAL_IncTick+0x1c>)
 8001498:	6013      	str	r3, [r2, #0]
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	20000120 	.word	0x20000120
 80014a8:	2000000c 	.word	0x2000000c

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <HAL_GetTick+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000120 	.word	0x20000120

080014c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff ffee 	bl	80014ac <HAL_GetTick>
 80014d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014dc:	d004      	beq.n	80014e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_Delay+0x40>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4413      	add	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e8:	bf00      	nop
 80014ea:	f7ff ffdf 	bl	80014ac <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d8f7      	bhi.n	80014ea <HAL_Delay+0x26>
  {
  }
}
 80014fa:	bf00      	nop
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000000c 	.word	0x2000000c

08001508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001524:	4013      	ands	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153a:	4a04      	ldr	r2, [pc, #16]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	60d3      	str	r3, [r2, #12]
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <__NVIC_GetPriorityGrouping+0x18>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	f003 0307 	and.w	r3, r3, #7
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db0b      	blt.n	8001596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	4907      	ldr	r1, [pc, #28]	; (80015a4 <__NVIC_EnableIRQ+0x38>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	2001      	movs	r0, #1
 800158e:	fa00 f202 	lsl.w	r2, r0, r2
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	; (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	; (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
         );
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001674:	d301      	bcc.n	800167a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2301      	movs	r3, #1
 8001678:	e00f      	b.n	800169a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <SysTick_Config+0x40>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001682:	210f      	movs	r1, #15
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f7ff ff8e 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <SysTick_Config+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <SysTick_Config+0x40>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff29 	bl	8001508 <__NVIC_SetPriorityGrouping>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016cc:	f7ff ff40 	bl	8001550 <__NVIC_GetPriorityGrouping>
 80016d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff ff90 	bl	80015fc <NVIC_EncodePriority>
 80016dc:	4602      	mov	r2, r0
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5f 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff33 	bl	800156c <__NVIC_EnableIRQ>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffa4 	bl	8001664 <SysTick_Config>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e147      	b.n	80019ca <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d106      	bne.n	8001754 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fd0c 	bl	800116c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	699a      	ldr	r2, [r3, #24]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0210 	bic.w	r2, r2, #16
 8001762:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001764:	f7ff fea2 	bl	80014ac <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800176a:	e012      	b.n	8001792 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800176c:	f7ff fe9e 	bl	80014ac <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b0a      	cmp	r3, #10
 8001778:	d90b      	bls.n	8001792 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2203      	movs	r2, #3
 800178a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e11b      	b.n	80019ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b08      	cmp	r3, #8
 800179e:	d0e5      	beq.n	800176c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	699a      	ldr	r2, [r3, #24]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b0:	f7ff fe7c 	bl	80014ac <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80017b6:	e012      	b.n	80017de <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80017b8:	f7ff fe78 	bl	80014ac <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b0a      	cmp	r3, #10
 80017c4:	d90b      	bls.n	80017de <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	f043 0201 	orr.w	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2203      	movs	r2, #3
 80017d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e0f5      	b.n	80019ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0e5      	beq.n	80017b8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0202 	orr.w	r2, r2, #2
 80017fa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a74      	ldr	r2, [pc, #464]	; (80019d4 <HAL_FDCAN_Init+0x2ac>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d103      	bne.n	800180e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001806:	4a74      	ldr	r2, [pc, #464]	; (80019d8 <HAL_FDCAN_Init+0x2b0>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7c1b      	ldrb	r3, [r3, #16]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d108      	bne.n	8001828 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699a      	ldr	r2, [r3, #24]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001824:	619a      	str	r2, [r3, #24]
 8001826:	e007      	b.n	8001838 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699a      	ldr	r2, [r3, #24]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001836:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7c5b      	ldrb	r3, [r3, #17]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d108      	bne.n	8001852 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699a      	ldr	r2, [r3, #24]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800184e:	619a      	str	r2, [r3, #24]
 8001850:	e007      	b.n	8001862 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699a      	ldr	r2, [r3, #24]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001860:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7c9b      	ldrb	r3, [r3, #18]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d108      	bne.n	800187c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699a      	ldr	r2, [r3, #24]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001878:	619a      	str	r2, [r3, #24]
 800187a:	e007      	b.n	800188c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699a      	ldr	r2, [r3, #24]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800188a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699a      	ldr	r2, [r3, #24]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80018b0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0210 	bic.w	r2, r2, #16
 80018c0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699a      	ldr	r2, [r3, #24]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0204 	orr.w	r2, r2, #4
 80018d8:	619a      	str	r2, [r3, #24]
 80018da:	e02c      	b.n	8001936 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d028      	beq.n	8001936 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d01c      	beq.n	8001926 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699a      	ldr	r2, [r3, #24]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018fa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0210 	orr.w	r2, r2, #16
 800190a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d110      	bne.n	8001936 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0220 	orr.w	r2, r2, #32
 8001922:	619a      	str	r2, [r3, #24]
 8001924:	e007      	b.n	8001936 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699a      	ldr	r2, [r3, #24]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0220 	orr.w	r2, r2, #32
 8001934:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	3b01      	subs	r3, #1
 800193c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	3b01      	subs	r3, #1
 8001944:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001946:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800194e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	3b01      	subs	r3, #1
 8001958:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800195e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001960:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800196a:	d115      	bne.n	8001998 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	3b01      	subs	r3, #1
 8001978:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800197a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	3b01      	subs	r3, #1
 8001982:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001984:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	3b01      	subs	r3, #1
 800198e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001994:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001996:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fa2e 	bl	8001e10 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40006400 	.word	0x40006400
 80019d8:	40006500 	.word	0x40006500

080019dc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d110      	bne.n	8001a12 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699a      	ldr	r2, [r3, #24]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e006      	b.n	8001a20 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	f043 0204 	orr.w	r2, r3, #4
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
  }
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d12c      	bne.n	8001a9e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e023      	b.n	8001aac <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001a6c:	0c1b      	lsrs	r3, r3, #16
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 fa1e 	bl	8001ebc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001a90:	2201      	movs	r2, #1
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	409a      	lsls	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e006      	b.n	8001aac <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	f043 0208 	orr.w	r2, r3, #8
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
  }
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	6a3a      	ldr	r2, [r7, #32]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001af6:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001b0e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b22:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b26:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4013      	ands	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00d      	beq.n	8001b5e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2240      	movs	r2, #64	; 0x40
 8001b56:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f939 	bl	8001dd0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01b      	beq.n	8001ba4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d014      	beq.n	8001ba4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b82:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b9a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001b9c:	6939      	ldr	r1, [r7, #16]
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f8f7 	bl	8001d92 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001bb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f8b6 	bl	8001d26 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6a3a      	ldr	r2, [r7, #32]
 8001bc6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001bc8:	6a39      	ldr	r1, [r7, #32]
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8b6 	bl	8001d3c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001bde:	69f9      	ldr	r1, [r7, #28]
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f8b6 	bl	8001d52 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00e      	beq.n	8001c12 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f8ab 	bl	8001d68 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01a      	beq.n	8001c56 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d013      	beq.n	8001c56 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c36:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4013      	ands	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2280      	movs	r2, #128	; 0x80
 8001c4c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001c4e:	68f9      	ldr	r1, [r7, #12]
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f893 	bl	8001d7c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00e      	beq.n	8001c82 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c7a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f893 	bl	8001da8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00e      	beq.n	8001cae <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ca6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f887 	bl	8001dbc <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d011      	beq.n	8001ce0 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00a      	beq.n	8001ce0 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cd2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001cee:	6979      	ldr	r1, [r7, #20]
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f881 	bl	8001df8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d009      	beq.n	8001d10 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f863 	bl	8001de4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001e1a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e2a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e32:	041a      	lsls	r2, r3, #16
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e50:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e58:	061a      	lsls	r2, r3, #24
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	e005      	b.n	8001e9e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d3f3      	bcc.n	8001e92 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	4000a400 	.word	0x4000a400

08001ebc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10a      	bne.n	8001ee8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001eda:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e00a      	b.n	8001efe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001ef0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001ef6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ef8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001efc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f08:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001f0e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001f14:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	3304      	adds	r3, #4
 8001f46:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	e020      	b.n	8001f90 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3303      	adds	r3, #3
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	440b      	add	r3, r1
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f66:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	440b      	add	r3, r1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001f74:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	440a      	add	r2, r1
 8001f7c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001f7e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	3304      	adds	r3, #4
 8001f88:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <FDCAN_CopyMessageToRAM+0xf4>)
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d3d5      	bcc.n	8001f4e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	bf00      	nop
 8001fa6:	3724      	adds	r7, #36	; 0x24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	08003ee0 	.word	0x08003ee0

08001fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fc2:	e15a      	b.n	800227a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2101      	movs	r1, #1
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 814c 	beq.w	8002274 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d005      	beq.n	8001ff4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d130      	bne.n	8002056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800202a:	2201      	movs	r2, #1
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	f003 0201 	and.w	r2, r3, #1
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b03      	cmp	r3, #3
 8002060:	d017      	beq.n	8002092 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	2203      	movs	r2, #3
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d123      	bne.n	80020e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	08da      	lsrs	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3208      	adds	r2, #8
 80020a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	220f      	movs	r2, #15
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	08da      	lsrs	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3208      	adds	r2, #8
 80020e0:	6939      	ldr	r1, [r7, #16]
 80020e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2203      	movs	r2, #3
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0203 	and.w	r2, r3, #3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80a6 	beq.w	8002274 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002128:	4b5b      	ldr	r3, [pc, #364]	; (8002298 <HAL_GPIO_Init+0x2e4>)
 800212a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212c:	4a5a      	ldr	r2, [pc, #360]	; (8002298 <HAL_GPIO_Init+0x2e4>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6613      	str	r3, [r2, #96]	; 0x60
 8002134:	4b58      	ldr	r3, [pc, #352]	; (8002298 <HAL_GPIO_Init+0x2e4>)
 8002136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002140:	4a56      	ldr	r2, [pc, #344]	; (800229c <HAL_GPIO_Init+0x2e8>)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	3302      	adds	r3, #2
 8002148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800216a:	d01f      	beq.n	80021ac <HAL_GPIO_Init+0x1f8>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a4c      	ldr	r2, [pc, #304]	; (80022a0 <HAL_GPIO_Init+0x2ec>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d019      	beq.n	80021a8 <HAL_GPIO_Init+0x1f4>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a4b      	ldr	r2, [pc, #300]	; (80022a4 <HAL_GPIO_Init+0x2f0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d013      	beq.n	80021a4 <HAL_GPIO_Init+0x1f0>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a4a      	ldr	r2, [pc, #296]	; (80022a8 <HAL_GPIO_Init+0x2f4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00d      	beq.n	80021a0 <HAL_GPIO_Init+0x1ec>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a49      	ldr	r2, [pc, #292]	; (80022ac <HAL_GPIO_Init+0x2f8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d007      	beq.n	800219c <HAL_GPIO_Init+0x1e8>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a48      	ldr	r2, [pc, #288]	; (80022b0 <HAL_GPIO_Init+0x2fc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d101      	bne.n	8002198 <HAL_GPIO_Init+0x1e4>
 8002194:	2305      	movs	r3, #5
 8002196:	e00a      	b.n	80021ae <HAL_GPIO_Init+0x1fa>
 8002198:	2306      	movs	r3, #6
 800219a:	e008      	b.n	80021ae <HAL_GPIO_Init+0x1fa>
 800219c:	2304      	movs	r3, #4
 800219e:	e006      	b.n	80021ae <HAL_GPIO_Init+0x1fa>
 80021a0:	2303      	movs	r3, #3
 80021a2:	e004      	b.n	80021ae <HAL_GPIO_Init+0x1fa>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e002      	b.n	80021ae <HAL_GPIO_Init+0x1fa>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <HAL_GPIO_Init+0x1fa>
 80021ac:	2300      	movs	r3, #0
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	f002 0203 	and.w	r2, r2, #3
 80021b4:	0092      	lsls	r2, r2, #2
 80021b6:	4093      	lsls	r3, r2
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021be:	4937      	ldr	r1, [pc, #220]	; (800229c <HAL_GPIO_Init+0x2e8>)
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	3302      	adds	r3, #2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021cc:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <HAL_GPIO_Init+0x300>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021f0:	4a30      	ldr	r2, [pc, #192]	; (80022b4 <HAL_GPIO_Init+0x300>)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021f6:	4b2f      	ldr	r3, [pc, #188]	; (80022b4 <HAL_GPIO_Init+0x300>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800221a:	4a26      	ldr	r2, [pc, #152]	; (80022b4 <HAL_GPIO_Init+0x300>)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_GPIO_Init+0x300>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	43db      	mvns	r3, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002244:	4a1b      	ldr	r2, [pc, #108]	; (80022b4 <HAL_GPIO_Init+0x300>)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800224a:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <HAL_GPIO_Init+0x300>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	43db      	mvns	r3, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800226e:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <HAL_GPIO_Init+0x300>)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	3301      	adds	r3, #1
 8002278:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	f47f ae9d 	bne.w	8001fc4 <HAL_GPIO_Init+0x10>
  }
}
 800228a:	bf00      	nop
 800228c:	bf00      	nop
 800228e:	371c      	adds	r7, #28
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40021000 	.word	0x40021000
 800229c:	40010000 	.word	0x40010000
 80022a0:	48000400 	.word	0x48000400
 80022a4:	48000800 	.word	0x48000800
 80022a8:	48000c00 	.word	0x48000c00
 80022ac:	48001000 	.word	0x48001000
 80022b0:	48001400 	.word	0x48001400
 80022b4:	40010400 	.word	0x40010400

080022b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	887b      	ldrh	r3, [r7, #2]
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022d0:	2301      	movs	r3, #1
 80022d2:	73fb      	strb	r3, [r7, #15]
 80022d4:	e001      	b.n	80022da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022da:	7bfb      	ldrb	r3, [r7, #15]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	807b      	strh	r3, [r7, #2]
 80022f4:	4613      	mov	r3, r2
 80022f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022f8:	787b      	ldrb	r3, [r7, #1]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022fe:	887a      	ldrh	r2, [r7, #2]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002304:	e002      	b.n	800230c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d141      	bne.n	80023aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002326:	4b4b      	ldr	r3, [pc, #300]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800232e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002332:	d131      	bne.n	8002398 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002334:	4b47      	ldr	r3, [pc, #284]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800233a:	4a46      	ldr	r2, [pc, #280]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800233c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002340:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002344:	4b43      	ldr	r3, [pc, #268]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800234c:	4a41      	ldr	r2, [pc, #260]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002352:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002354:	4b40      	ldr	r3, [pc, #256]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2232      	movs	r2, #50	; 0x32
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	4a3f      	ldr	r2, [pc, #252]	; (800245c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002360:	fba2 2303 	umull	r2, r3, r2, r3
 8002364:	0c9b      	lsrs	r3, r3, #18
 8002366:	3301      	adds	r3, #1
 8002368:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800236a:	e002      	b.n	8002372 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3b01      	subs	r3, #1
 8002370:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002372:	4b38      	ldr	r3, [pc, #224]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237e:	d102      	bne.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f2      	bne.n	800236c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002386:	4b33      	ldr	r3, [pc, #204]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002392:	d158      	bne.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e057      	b.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002398:	4b2e      	ldr	r3, [pc, #184]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800239e:	4a2d      	ldr	r2, [pc, #180]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023a8:	e04d      	b.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b0:	d141      	bne.n	8002436 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023b2:	4b28      	ldr	r3, [pc, #160]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023be:	d131      	bne.n	8002424 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023c0:	4b24      	ldr	r3, [pc, #144]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023c6:	4a23      	ldr	r2, [pc, #140]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d0:	4b20      	ldr	r3, [pc, #128]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023d8:	4a1e      	ldr	r2, [pc, #120]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2232      	movs	r2, #50	; 0x32
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	4a1c      	ldr	r2, [pc, #112]	; (800245c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	0c9b      	lsrs	r3, r3, #18
 80023f2:	3301      	adds	r3, #1
 80023f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023f6:	e002      	b.n	80023fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800240a:	d102      	bne.n	8002412 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f2      	bne.n	80023f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241e:	d112      	bne.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e011      	b.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800242a:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002434:	e007      	b.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002436:	4b07      	ldr	r3, [pc, #28]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800243e:	4a05      	ldr	r2, [pc, #20]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002440:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002444:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40007000 	.word	0x40007000
 8002458:	20000004 	.word	0x20000004
 800245c:	431bde83 	.word	0x431bde83

08002460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e306      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d075      	beq.n	800256a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247e:	4b97      	ldr	r3, [pc, #604]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002488:	4b94      	ldr	r3, [pc, #592]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b0c      	cmp	r3, #12
 8002496:	d102      	bne.n	800249e <HAL_RCC_OscConfig+0x3e>
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d002      	beq.n	80024a4 <HAL_RCC_OscConfig+0x44>
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d10b      	bne.n	80024bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a4:	4b8d      	ldr	r3, [pc, #564]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d05b      	beq.n	8002568 <HAL_RCC_OscConfig+0x108>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d157      	bne.n	8002568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e2e1      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c4:	d106      	bne.n	80024d4 <HAL_RCC_OscConfig+0x74>
 80024c6:	4b85      	ldr	r3, [pc, #532]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a84      	ldr	r2, [pc, #528]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e01d      	b.n	8002510 <HAL_RCC_OscConfig+0xb0>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x98>
 80024de:	4b7f      	ldr	r3, [pc, #508]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7e      	ldr	r2, [pc, #504]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80024e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b7c      	ldr	r3, [pc, #496]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a7b      	ldr	r2, [pc, #492]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e00b      	b.n	8002510 <HAL_RCC_OscConfig+0xb0>
 80024f8:	4b78      	ldr	r3, [pc, #480]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a77      	ldr	r2, [pc, #476]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b75      	ldr	r3, [pc, #468]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a74      	ldr	r2, [pc, #464]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 800250a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800250e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d013      	beq.n	8002540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe ffc8 	bl	80014ac <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002520:	f7fe ffc4 	bl	80014ac <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e2a6      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002532:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0xc0>
 800253e:	e014      	b.n	800256a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe ffb4 	bl	80014ac <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002548:	f7fe ffb0 	bl	80014ac <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	; 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e292      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800255a:	4b60      	ldr	r3, [pc, #384]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0xe8>
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d075      	beq.n	8002662 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002576:	4b59      	ldr	r3, [pc, #356]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002580:	4b56      	ldr	r3, [pc, #344]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b0c      	cmp	r3, #12
 800258e:	d102      	bne.n	8002596 <HAL_RCC_OscConfig+0x136>
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d002      	beq.n	800259c <HAL_RCC_OscConfig+0x13c>
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2b04      	cmp	r3, #4
 800259a:	d11f      	bne.n	80025dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800259c:	4b4f      	ldr	r3, [pc, #316]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_OscConfig+0x154>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e265      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b49      	ldr	r3, [pc, #292]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	4946      	ldr	r1, [pc, #280]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025c8:	4b45      	ldr	r3, [pc, #276]	; (80026e0 <HAL_RCC_OscConfig+0x280>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe ff21 	bl	8001414 <HAL_InitTick>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d043      	beq.n	8002660 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e251      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d023      	beq.n	800262c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e4:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a3c      	ldr	r2, [pc, #240]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80025ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe ff5c 	bl	80014ac <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f8:	f7fe ff58 	bl	80014ac <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e23a      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800260a:	4b34      	ldr	r3, [pc, #208]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002616:	4b31      	ldr	r3, [pc, #196]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	061b      	lsls	r3, r3, #24
 8002624:	492d      	ldr	r1, [pc, #180]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]
 800262a:	e01a      	b.n	8002662 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a2a      	ldr	r2, [pc, #168]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 8002632:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe ff38 	bl	80014ac <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002640:	f7fe ff34 	bl	80014ac <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e216      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002652:	4b22      	ldr	r3, [pc, #136]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x1e0>
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002660:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d041      	beq.n	80026f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d01c      	beq.n	80026b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002676:	4b19      	ldr	r3, [pc, #100]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 8002678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267c:	4a17      	ldr	r2, [pc, #92]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002686:	f7fe ff11 	bl	80014ac <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268e:	f7fe ff0d 	bl	80014ac <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1ef      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80026a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0ef      	beq.n	800268e <HAL_RCC_OscConfig+0x22e>
 80026ae:	e020      	b.n	80026f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80026b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b6:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7fe fef4 	bl	80014ac <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026c6:	e00d      	b.n	80026e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c8:	f7fe fef0 	bl	80014ac <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d906      	bls.n	80026e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e1d2      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e4:	4b8c      	ldr	r3, [pc, #560]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 80026e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1ea      	bne.n	80026c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 80a6 	beq.w	800284c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002700:	2300      	movs	r3, #0
 8002702:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002704:	4b84      	ldr	r3, [pc, #528]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_OscConfig+0x2b4>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x2b6>
 8002714:	2300      	movs	r3, #0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00d      	beq.n	8002736 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	4b7f      	ldr	r3, [pc, #508]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 800271c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271e:	4a7e      	ldr	r2, [pc, #504]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 8002720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002724:	6593      	str	r3, [r2, #88]	; 0x58
 8002726:	4b7c      	ldr	r3, [pc, #496]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002732:	2301      	movs	r3, #1
 8002734:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002736:	4b79      	ldr	r3, [pc, #484]	; (800291c <HAL_RCC_OscConfig+0x4bc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d118      	bne.n	8002774 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002742:	4b76      	ldr	r3, [pc, #472]	; (800291c <HAL_RCC_OscConfig+0x4bc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a75      	ldr	r2, [pc, #468]	; (800291c <HAL_RCC_OscConfig+0x4bc>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274e:	f7fe fead 	bl	80014ac <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002756:	f7fe fea9 	bl	80014ac <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e18b      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002768:	4b6c      	ldr	r3, [pc, #432]	; (800291c <HAL_RCC_OscConfig+0x4bc>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d108      	bne.n	800278e <HAL_RCC_OscConfig+0x32e>
 800277c:	4b66      	ldr	r3, [pc, #408]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002782:	4a65      	ldr	r2, [pc, #404]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800278c:	e024      	b.n	80027d8 <HAL_RCC_OscConfig+0x378>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b05      	cmp	r3, #5
 8002794:	d110      	bne.n	80027b8 <HAL_RCC_OscConfig+0x358>
 8002796:	4b60      	ldr	r3, [pc, #384]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279c:	4a5e      	ldr	r2, [pc, #376]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027a6:	4b5c      	ldr	r3, [pc, #368]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	4a5a      	ldr	r2, [pc, #360]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027b6:	e00f      	b.n	80027d8 <HAL_RCC_OscConfig+0x378>
 80027b8:	4b57      	ldr	r3, [pc, #348]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 80027ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027be:	4a56      	ldr	r2, [pc, #344]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027c8:	4b53      	ldr	r3, [pc, #332]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ce:	4a52      	ldr	r2, [pc, #328]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 80027d0:	f023 0304 	bic.w	r3, r3, #4
 80027d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d016      	beq.n	800280e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7fe fe64 	bl	80014ac <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e8:	f7fe fe60 	bl	80014ac <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e140      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fe:	4b46      	ldr	r3, [pc, #280]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 8002800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0ed      	beq.n	80027e8 <HAL_RCC_OscConfig+0x388>
 800280c:	e015      	b.n	800283a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280e:	f7fe fe4d 	bl	80014ac <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002814:	e00a      	b.n	800282c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7fe fe49 	bl	80014ac <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e129      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800282c:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1ed      	bne.n	8002816 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800283a:	7ffb      	ldrb	r3, [r7, #31]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d105      	bne.n	800284c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002840:	4b35      	ldr	r3, [pc, #212]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	4a34      	ldr	r2, [pc, #208]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 8002846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b00      	cmp	r3, #0
 8002856:	d03c      	beq.n	80028d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01c      	beq.n	800289a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002860:	4b2d      	ldr	r3, [pc, #180]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 8002862:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002866:	4a2c      	ldr	r2, [pc, #176]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe fe1c 	bl	80014ac <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002878:	f7fe fe18 	bl	80014ac <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e0fa      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800288a:	4b23      	ldr	r3, [pc, #140]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 800288c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ef      	beq.n	8002878 <HAL_RCC_OscConfig+0x418>
 8002898:	e01b      	b.n	80028d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800289a:	4b1f      	ldr	r3, [pc, #124]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 800289c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028a0:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe fdff 	bl	80014ac <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028b2:	f7fe fdfb 	bl	80014ac <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e0dd      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 80028c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1ef      	bne.n	80028b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80d1 	beq.w	8002a7e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	f000 808b 	beq.w	8002a00 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d15e      	bne.n	80029b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a08      	ldr	r2, [pc, #32]	; (8002918 <HAL_RCC_OscConfig+0x4b8>)
 80028f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7fe fdd5 	bl	80014ac <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002904:	e00c      	b.n	8002920 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002906:	f7fe fdd1 	bl	80014ac <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d905      	bls.n	8002920 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e0b3      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
 8002918:	40021000 	.word	0x40021000
 800291c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002920:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <HAL_RCC_OscConfig+0x628>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ec      	bne.n	8002906 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800292c:	4b56      	ldr	r3, [pc, #344]	; (8002a88 <HAL_RCC_OscConfig+0x628>)
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	4b56      	ldr	r3, [pc, #344]	; (8002a8c <HAL_RCC_OscConfig+0x62c>)
 8002932:	4013      	ands	r3, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6a11      	ldr	r1, [r2, #32]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800293c:	3a01      	subs	r2, #1
 800293e:	0112      	lsls	r2, r2, #4
 8002940:	4311      	orrs	r1, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002946:	0212      	lsls	r2, r2, #8
 8002948:	4311      	orrs	r1, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800294e:	0852      	lsrs	r2, r2, #1
 8002950:	3a01      	subs	r2, #1
 8002952:	0552      	lsls	r2, r2, #21
 8002954:	4311      	orrs	r1, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800295a:	0852      	lsrs	r2, r2, #1
 800295c:	3a01      	subs	r2, #1
 800295e:	0652      	lsls	r2, r2, #25
 8002960:	4311      	orrs	r1, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002966:	06d2      	lsls	r2, r2, #27
 8002968:	430a      	orrs	r2, r1
 800296a:	4947      	ldr	r1, [pc, #284]	; (8002a88 <HAL_RCC_OscConfig+0x628>)
 800296c:	4313      	orrs	r3, r2
 800296e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002970:	4b45      	ldr	r3, [pc, #276]	; (8002a88 <HAL_RCC_OscConfig+0x628>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a44      	ldr	r2, [pc, #272]	; (8002a88 <HAL_RCC_OscConfig+0x628>)
 8002976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800297a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800297c:	4b42      	ldr	r3, [pc, #264]	; (8002a88 <HAL_RCC_OscConfig+0x628>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4a41      	ldr	r2, [pc, #260]	; (8002a88 <HAL_RCC_OscConfig+0x628>)
 8002982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002986:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fd90 	bl	80014ac <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe fd8c 	bl	80014ac <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e06e      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a2:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <HAL_RCC_OscConfig+0x628>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0x530>
 80029ae:	e066      	b.n	8002a7e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b0:	4b35      	ldr	r3, [pc, #212]	; (8002a88 <HAL_RCC_OscConfig+0x628>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a34      	ldr	r2, [pc, #208]	; (8002a88 <HAL_RCC_OscConfig+0x628>)
 80029b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029bc:	4b32      	ldr	r3, [pc, #200]	; (8002a88 <HAL_RCC_OscConfig+0x628>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4a31      	ldr	r2, [pc, #196]	; (8002a88 <HAL_RCC_OscConfig+0x628>)
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80029c8:	4b2f      	ldr	r3, [pc, #188]	; (8002a88 <HAL_RCC_OscConfig+0x628>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a2e      	ldr	r2, [pc, #184]	; (8002a88 <HAL_RCC_OscConfig+0x628>)
 80029ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80029d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fd68 	bl	80014ac <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe fd64 	bl	80014ac <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e046      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f2:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <HAL_RCC_OscConfig+0x628>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x580>
 80029fe:	e03e      	b.n	8002a7e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e039      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <HAL_RCC_OscConfig+0x628>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f003 0203 	and.w	r2, r3, #3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d12c      	bne.n	8002a7a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d123      	bne.n	8002a7a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d11b      	bne.n	8002a7a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d113      	bne.n	8002a7a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	085b      	lsrs	r3, r3, #1
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d109      	bne.n	8002a7a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	3b01      	subs	r3, #1
 8002a74:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3720      	adds	r7, #32
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	019f800c 	.word	0x019f800c

08002a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e11e      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b91      	ldr	r3, [pc, #580]	; (8002cf0 <HAL_RCC_ClockConfig+0x260>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d910      	bls.n	8002ad8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b8e      	ldr	r3, [pc, #568]	; (8002cf0 <HAL_RCC_ClockConfig+0x260>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 020f 	bic.w	r2, r3, #15
 8002abe:	498c      	ldr	r1, [pc, #560]	; (8002cf0 <HAL_RCC_ClockConfig+0x260>)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b8a      	ldr	r3, [pc, #552]	; (8002cf0 <HAL_RCC_ClockConfig+0x260>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e106      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d073      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d129      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aec:	4b81      	ldr	r3, [pc, #516]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0f4      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002afc:	f000 f99e 	bl	8002e3c <RCC_GetSysClockFreqFromPLLSource>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4a7c      	ldr	r2, [pc, #496]	; (8002cf8 <HAL_RCC_ClockConfig+0x268>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d93f      	bls.n	8002b8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b0a:	4b7a      	ldr	r3, [pc, #488]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d033      	beq.n	8002b8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d12f      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b2a:	4b72      	ldr	r3, [pc, #456]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b32:	4a70      	ldr	r2, [pc, #448]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	e024      	b.n	8002b8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b48:	4b6a      	ldr	r3, [pc, #424]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0c6      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b58:	4b66      	ldr	r3, [pc, #408]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0be      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002b68:	f000 f8ce 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4a61      	ldr	r2, [pc, #388]	; (8002cf8 <HAL_RCC_ClockConfig+0x268>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d909      	bls.n	8002b8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b76:	4b5f      	ldr	r3, [pc, #380]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b7e:	4a5d      	ldr	r2, [pc, #372]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b8a:	4b5a      	ldr	r3, [pc, #360]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f023 0203 	bic.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4957      	ldr	r1, [pc, #348]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9c:	f7fe fc86 	bl	80014ac <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7fe fc82 	bl	80014ac <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e095      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	4b4e      	ldr	r3, [pc, #312]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 020c 	and.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1eb      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d023      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002be4:	4b43      	ldr	r3, [pc, #268]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a42      	ldr	r2, [pc, #264]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002bea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d007      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002bfc:	4b3d      	ldr	r3, [pc, #244]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c04:	4a3b      	ldr	r2, [pc, #236]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002c06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c0c:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4936      	ldr	r1, [pc, #216]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	608b      	str	r3, [r1, #8]
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2b80      	cmp	r3, #128	; 0x80
 8002c24:	d105      	bne.n	8002c32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c26:	4b33      	ldr	r3, [pc, #204]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	4a32      	ldr	r2, [pc, #200]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002c2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c32:	4b2f      	ldr	r3, [pc, #188]	; (8002cf0 <HAL_RCC_ClockConfig+0x260>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d21d      	bcs.n	8002c7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c40:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <HAL_RCC_ClockConfig+0x260>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f023 020f 	bic.w	r2, r3, #15
 8002c48:	4929      	ldr	r1, [pc, #164]	; (8002cf0 <HAL_RCC_ClockConfig+0x260>)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c50:	f7fe fc2c 	bl	80014ac <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c58:	f7fe fc28 	bl	80014ac <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e03b      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_RCC_ClockConfig+0x260>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d1ed      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c88:	4b1a      	ldr	r3, [pc, #104]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4917      	ldr	r1, [pc, #92]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ca6:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	490f      	ldr	r1, [pc, #60]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cba:	f000 f825 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <HAL_RCC_ClockConfig+0x264>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	490c      	ldr	r1, [pc, #48]	; (8002cfc <HAL_RCC_ClockConfig+0x26c>)
 8002ccc:	5ccb      	ldrb	r3, [r1, r3]
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <HAL_RCC_ClockConfig+0x270>)
 8002cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <HAL_RCC_ClockConfig+0x274>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fb98 	bl	8001414 <HAL_InitTick>
 8002ce4:	4603      	mov	r3, r0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40022000 	.word	0x40022000
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	04c4b400 	.word	0x04c4b400
 8002cfc:	08003ec8 	.word	0x08003ec8
 8002d00:	20000004 	.word	0x20000004
 8002d04:	20000008 	.word	0x20000008

08002d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d0e:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d102      	bne.n	8002d20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	e047      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d20:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d102      	bne.n	8002d32 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d2c:	4b26      	ldr	r3, [pc, #152]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	e03e      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002d32:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	d136      	bne.n	8002dac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d48:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	3301      	adds	r3, #1
 8002d54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d10c      	bne.n	8002d76 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d5c:	4a1a      	ldr	r2, [pc, #104]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	4a16      	ldr	r2, [pc, #88]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d66:	68d2      	ldr	r2, [r2, #12]
 8002d68:	0a12      	lsrs	r2, r2, #8
 8002d6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	617b      	str	r3, [r7, #20]
      break;
 8002d74:	e00c      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d76:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	4a10      	ldr	r2, [pc, #64]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d80:	68d2      	ldr	r2, [r2, #12]
 8002d82:	0a12      	lsrs	r2, r2, #8
 8002d84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]
      break;
 8002d8e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0e5b      	lsrs	r3, r3, #25
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	e001      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002db0:	693b      	ldr	r3, [r7, #16]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	00f42400 	.word	0x00f42400
 8002dc8:	007a1200 	.word	0x007a1200

08002dcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000004 	.word	0x20000004

08002de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002de8:	f7ff fff0 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	4904      	ldr	r1, [pc, #16]	; (8002e0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dfa:	5ccb      	ldrb	r3, [r1, r3]
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08003ed8 	.word	0x08003ed8

08002e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e14:	f7ff ffda 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	0adb      	lsrs	r3, r3, #11
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4904      	ldr	r1, [pc, #16]	; (8002e38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000
 8002e38:	08003ed8 	.word	0x08003ed8

08002e3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e42:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	3301      	adds	r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d10c      	bne.n	8002e7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e60:	4a17      	ldr	r2, [pc, #92]	; (8002ec0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e68:	4a14      	ldr	r2, [pc, #80]	; (8002ebc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e6a:	68d2      	ldr	r2, [r2, #12]
 8002e6c:	0a12      	lsrs	r2, r2, #8
 8002e6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	617b      	str	r3, [r7, #20]
    break;
 8002e78:	e00c      	b.n	8002e94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e7a:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e82:	4a0e      	ldr	r2, [pc, #56]	; (8002ebc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e84:	68d2      	ldr	r2, [r2, #12]
 8002e86:	0a12      	lsrs	r2, r2, #8
 8002e88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e8c:	fb02 f303 	mul.w	r3, r2, r3
 8002e90:	617b      	str	r3, [r7, #20]
    break;
 8002e92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	0e5b      	lsrs	r3, r3, #25
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002eae:	687b      	ldr	r3, [r7, #4]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	007a1200 	.word	0x007a1200
 8002ec4:	00f42400 	.word	0x00f42400

08002ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8098 	beq.w	8003016 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eea:	4b43      	ldr	r3, [pc, #268]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10d      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	4b40      	ldr	r3, [pc, #256]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efa:	4a3f      	ldr	r2, [pc, #252]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f00:	6593      	str	r3, [r2, #88]	; 0x58
 8002f02:	4b3d      	ldr	r3, [pc, #244]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f12:	4b3a      	ldr	r3, [pc, #232]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a39      	ldr	r2, [pc, #228]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f1e:	f7fe fac5 	bl	80014ac <HAL_GetTick>
 8002f22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f24:	e009      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f26:	f7fe fac1 	bl	80014ac <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d902      	bls.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	74fb      	strb	r3, [r7, #19]
        break;
 8002f38:	e005      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f3a:	4b30      	ldr	r3, [pc, #192]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0ef      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002f46:	7cfb      	ldrb	r3, [r7, #19]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d159      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f4c:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d01e      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d019      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f68:	4b23      	ldr	r3, [pc, #140]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f74:	4b20      	ldr	r3, [pc, #128]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7a:	4a1f      	ldr	r2, [pc, #124]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f84:	4b1c      	ldr	r3, [pc, #112]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	4a1b      	ldr	r2, [pc, #108]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f94:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d016      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa6:	f7fe fa81 	bl	80014ac <HAL_GetTick>
 8002faa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fac:	e00b      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fe fa7d 	bl	80014ac <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d902      	bls.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	74fb      	strb	r3, [r7, #19]
            break;
 8002fc4:	e006      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ec      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	4903      	ldr	r1, [pc, #12]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ff0:	e008      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ff2:	7cfb      	ldrb	r3, [r7, #19]
 8002ff4:	74bb      	strb	r3, [r7, #18]
 8002ff6:	e005      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003000:	7cfb      	ldrb	r3, [r7, #19]
 8003002:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003004:	7c7b      	ldrb	r3, [r7, #17]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d105      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800300a:	4ba6      	ldr	r3, [pc, #664]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300e:	4aa5      	ldr	r2, [pc, #660]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003014:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003022:	4ba0      	ldr	r3, [pc, #640]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003028:	f023 0203 	bic.w	r2, r3, #3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	499c      	ldr	r1, [pc, #624]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003044:	4b97      	ldr	r3, [pc, #604]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f023 020c 	bic.w	r2, r3, #12
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	4994      	ldr	r1, [pc, #592]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003066:	4b8f      	ldr	r3, [pc, #572]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	498b      	ldr	r1, [pc, #556]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003088:	4b86      	ldr	r3, [pc, #536]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	4983      	ldr	r1, [pc, #524]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030aa:	4b7e      	ldr	r3, [pc, #504]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	497a      	ldr	r1, [pc, #488]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030cc:	4b75      	ldr	r3, [pc, #468]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	4972      	ldr	r1, [pc, #456]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030ee:	4b6d      	ldr	r3, [pc, #436]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	4969      	ldr	r1, [pc, #420]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003110:	4b64      	ldr	r3, [pc, #400]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003116:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4961      	ldr	r1, [pc, #388]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003132:	4b5c      	ldr	r3, [pc, #368]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003138:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	4958      	ldr	r1, [pc, #352]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003150:	2b00      	cmp	r3, #0
 8003152:	d015      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003154:	4b53      	ldr	r3, [pc, #332]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	4950      	ldr	r1, [pc, #320]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003172:	d105      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003174:	4b4b      	ldr	r3, [pc, #300]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4a4a      	ldr	r2, [pc, #296]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800317a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800317e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003188:	2b00      	cmp	r3, #0
 800318a:	d015      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800318c:	4b45      	ldr	r3, [pc, #276]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	4942      	ldr	r1, [pc, #264]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031aa:	d105      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ac:	4b3d      	ldr	r3, [pc, #244]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4a3c      	ldr	r2, [pc, #240]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031b6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d015      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031c4:	4b37      	ldr	r3, [pc, #220]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4934      	ldr	r1, [pc, #208]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e2:	d105      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031e4:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a2e      	ldr	r2, [pc, #184]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d015      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031fc:	4b29      	ldr	r3, [pc, #164]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320a:	4926      	ldr	r1, [pc, #152]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800321a:	d105      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800321c:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4a20      	ldr	r2, [pc, #128]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003226:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d015      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	4918      	ldr	r1, [pc, #96]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003252:	d105      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4a12      	ldr	r2, [pc, #72]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800325a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800325e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d015      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800326c:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327a:	490a      	ldr	r1, [pc, #40]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800328a:	d105      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003296:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003298:	7cbb      	ldrb	r3, [r7, #18]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000

080032a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e042      	b.n	8003340 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d106      	bne.n	80032d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7fd ffb7 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2224      	movs	r2, #36	; 0x24
 80032d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f82c 	bl	8003348 <UART_SetConfig>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e022      	b.n	8003340 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 faec 	bl	80038e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003316:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003326:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fb73 	bl	8003a24 <UART_CheckIdleState>
 800333e:	4603      	mov	r3, r0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800334c:	b08c      	sub	sp, #48	; 0x30
 800334e:	af00      	add	r7, sp, #0
 8003350:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	431a      	orrs	r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	431a      	orrs	r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	4313      	orrs	r3, r2
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4bab      	ldr	r3, [pc, #684]	; (8003624 <UART_SetConfig+0x2dc>)
 8003378:	4013      	ands	r3, r2
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	6812      	ldr	r2, [r2, #0]
 800337e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003380:	430b      	orrs	r3, r1
 8003382:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4aa0      	ldr	r2, [pc, #640]	; (8003628 <UART_SetConfig+0x2e0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d004      	beq.n	80033b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b0:	4313      	orrs	r3, r2
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80033be:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033c8:	430b      	orrs	r3, r1
 80033ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	f023 010f 	bic.w	r1, r3, #15
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a91      	ldr	r2, [pc, #580]	; (800362c <UART_SetConfig+0x2e4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d125      	bne.n	8003438 <UART_SetConfig+0xf0>
 80033ec:	4b90      	ldr	r3, [pc, #576]	; (8003630 <UART_SetConfig+0x2e8>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d81a      	bhi.n	8003430 <UART_SetConfig+0xe8>
 80033fa:	a201      	add	r2, pc, #4	; (adr r2, 8003400 <UART_SetConfig+0xb8>)
 80033fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003400:	08003411 	.word	0x08003411
 8003404:	08003421 	.word	0x08003421
 8003408:	08003419 	.word	0x08003419
 800340c:	08003429 	.word	0x08003429
 8003410:	2301      	movs	r3, #1
 8003412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003416:	e0d6      	b.n	80035c6 <UART_SetConfig+0x27e>
 8003418:	2302      	movs	r3, #2
 800341a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800341e:	e0d2      	b.n	80035c6 <UART_SetConfig+0x27e>
 8003420:	2304      	movs	r3, #4
 8003422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003426:	e0ce      	b.n	80035c6 <UART_SetConfig+0x27e>
 8003428:	2308      	movs	r3, #8
 800342a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800342e:	e0ca      	b.n	80035c6 <UART_SetConfig+0x27e>
 8003430:	2310      	movs	r3, #16
 8003432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003436:	e0c6      	b.n	80035c6 <UART_SetConfig+0x27e>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a7d      	ldr	r2, [pc, #500]	; (8003634 <UART_SetConfig+0x2ec>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d138      	bne.n	80034b4 <UART_SetConfig+0x16c>
 8003442:	4b7b      	ldr	r3, [pc, #492]	; (8003630 <UART_SetConfig+0x2e8>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b0c      	cmp	r3, #12
 800344e:	d82d      	bhi.n	80034ac <UART_SetConfig+0x164>
 8003450:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <UART_SetConfig+0x110>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	0800348d 	.word	0x0800348d
 800345c:	080034ad 	.word	0x080034ad
 8003460:	080034ad 	.word	0x080034ad
 8003464:	080034ad 	.word	0x080034ad
 8003468:	0800349d 	.word	0x0800349d
 800346c:	080034ad 	.word	0x080034ad
 8003470:	080034ad 	.word	0x080034ad
 8003474:	080034ad 	.word	0x080034ad
 8003478:	08003495 	.word	0x08003495
 800347c:	080034ad 	.word	0x080034ad
 8003480:	080034ad 	.word	0x080034ad
 8003484:	080034ad 	.word	0x080034ad
 8003488:	080034a5 	.word	0x080034a5
 800348c:	2300      	movs	r3, #0
 800348e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003492:	e098      	b.n	80035c6 <UART_SetConfig+0x27e>
 8003494:	2302      	movs	r3, #2
 8003496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800349a:	e094      	b.n	80035c6 <UART_SetConfig+0x27e>
 800349c:	2304      	movs	r3, #4
 800349e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034a2:	e090      	b.n	80035c6 <UART_SetConfig+0x27e>
 80034a4:	2308      	movs	r3, #8
 80034a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034aa:	e08c      	b.n	80035c6 <UART_SetConfig+0x27e>
 80034ac:	2310      	movs	r3, #16
 80034ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034b2:	e088      	b.n	80035c6 <UART_SetConfig+0x27e>
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a5f      	ldr	r2, [pc, #380]	; (8003638 <UART_SetConfig+0x2f0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d125      	bne.n	800350a <UART_SetConfig+0x1c2>
 80034be:	4b5c      	ldr	r3, [pc, #368]	; (8003630 <UART_SetConfig+0x2e8>)
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034c8:	2b30      	cmp	r3, #48	; 0x30
 80034ca:	d016      	beq.n	80034fa <UART_SetConfig+0x1b2>
 80034cc:	2b30      	cmp	r3, #48	; 0x30
 80034ce:	d818      	bhi.n	8003502 <UART_SetConfig+0x1ba>
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d00a      	beq.n	80034ea <UART_SetConfig+0x1a2>
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d814      	bhi.n	8003502 <UART_SetConfig+0x1ba>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <UART_SetConfig+0x19a>
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d008      	beq.n	80034f2 <UART_SetConfig+0x1aa>
 80034e0:	e00f      	b.n	8003502 <UART_SetConfig+0x1ba>
 80034e2:	2300      	movs	r3, #0
 80034e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034e8:	e06d      	b.n	80035c6 <UART_SetConfig+0x27e>
 80034ea:	2302      	movs	r3, #2
 80034ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f0:	e069      	b.n	80035c6 <UART_SetConfig+0x27e>
 80034f2:	2304      	movs	r3, #4
 80034f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f8:	e065      	b.n	80035c6 <UART_SetConfig+0x27e>
 80034fa:	2308      	movs	r3, #8
 80034fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003500:	e061      	b.n	80035c6 <UART_SetConfig+0x27e>
 8003502:	2310      	movs	r3, #16
 8003504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003508:	e05d      	b.n	80035c6 <UART_SetConfig+0x27e>
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a4b      	ldr	r2, [pc, #300]	; (800363c <UART_SetConfig+0x2f4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d125      	bne.n	8003560 <UART_SetConfig+0x218>
 8003514:	4b46      	ldr	r3, [pc, #280]	; (8003630 <UART_SetConfig+0x2e8>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800351e:	2bc0      	cmp	r3, #192	; 0xc0
 8003520:	d016      	beq.n	8003550 <UART_SetConfig+0x208>
 8003522:	2bc0      	cmp	r3, #192	; 0xc0
 8003524:	d818      	bhi.n	8003558 <UART_SetConfig+0x210>
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d00a      	beq.n	8003540 <UART_SetConfig+0x1f8>
 800352a:	2b80      	cmp	r3, #128	; 0x80
 800352c:	d814      	bhi.n	8003558 <UART_SetConfig+0x210>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <UART_SetConfig+0x1f0>
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	d008      	beq.n	8003548 <UART_SetConfig+0x200>
 8003536:	e00f      	b.n	8003558 <UART_SetConfig+0x210>
 8003538:	2300      	movs	r3, #0
 800353a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800353e:	e042      	b.n	80035c6 <UART_SetConfig+0x27e>
 8003540:	2302      	movs	r3, #2
 8003542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003546:	e03e      	b.n	80035c6 <UART_SetConfig+0x27e>
 8003548:	2304      	movs	r3, #4
 800354a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800354e:	e03a      	b.n	80035c6 <UART_SetConfig+0x27e>
 8003550:	2308      	movs	r3, #8
 8003552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003556:	e036      	b.n	80035c6 <UART_SetConfig+0x27e>
 8003558:	2310      	movs	r3, #16
 800355a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800355e:	e032      	b.n	80035c6 <UART_SetConfig+0x27e>
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a30      	ldr	r2, [pc, #192]	; (8003628 <UART_SetConfig+0x2e0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d12a      	bne.n	80035c0 <UART_SetConfig+0x278>
 800356a:	4b31      	ldr	r3, [pc, #196]	; (8003630 <UART_SetConfig+0x2e8>)
 800356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003570:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003574:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003578:	d01a      	beq.n	80035b0 <UART_SetConfig+0x268>
 800357a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800357e:	d81b      	bhi.n	80035b8 <UART_SetConfig+0x270>
 8003580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003584:	d00c      	beq.n	80035a0 <UART_SetConfig+0x258>
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d815      	bhi.n	80035b8 <UART_SetConfig+0x270>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <UART_SetConfig+0x250>
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003594:	d008      	beq.n	80035a8 <UART_SetConfig+0x260>
 8003596:	e00f      	b.n	80035b8 <UART_SetConfig+0x270>
 8003598:	2300      	movs	r3, #0
 800359a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800359e:	e012      	b.n	80035c6 <UART_SetConfig+0x27e>
 80035a0:	2302      	movs	r3, #2
 80035a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035a6:	e00e      	b.n	80035c6 <UART_SetConfig+0x27e>
 80035a8:	2304      	movs	r3, #4
 80035aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ae:	e00a      	b.n	80035c6 <UART_SetConfig+0x27e>
 80035b0:	2308      	movs	r3, #8
 80035b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035b6:	e006      	b.n	80035c6 <UART_SetConfig+0x27e>
 80035b8:	2310      	movs	r3, #16
 80035ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035be:	e002      	b.n	80035c6 <UART_SetConfig+0x27e>
 80035c0:	2310      	movs	r3, #16
 80035c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a17      	ldr	r2, [pc, #92]	; (8003628 <UART_SetConfig+0x2e0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	f040 80a8 	bne.w	8003722 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d834      	bhi.n	8003644 <UART_SetConfig+0x2fc>
 80035da:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <UART_SetConfig+0x298>)
 80035dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e0:	08003605 	.word	0x08003605
 80035e4:	08003645 	.word	0x08003645
 80035e8:	0800360d 	.word	0x0800360d
 80035ec:	08003645 	.word	0x08003645
 80035f0:	08003613 	.word	0x08003613
 80035f4:	08003645 	.word	0x08003645
 80035f8:	08003645 	.word	0x08003645
 80035fc:	08003645 	.word	0x08003645
 8003600:	0800361b 	.word	0x0800361b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003604:	f7ff fbee 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 8003608:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800360a:	e021      	b.n	8003650 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <UART_SetConfig+0x2f8>)
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003610:	e01e      	b.n	8003650 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003612:	f7ff fb79 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8003616:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003618:	e01a      	b.n	8003650 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800361a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003620:	e016      	b.n	8003650 <UART_SetConfig+0x308>
 8003622:	bf00      	nop
 8003624:	cfff69f3 	.word	0xcfff69f3
 8003628:	40008000 	.word	0x40008000
 800362c:	40013800 	.word	0x40013800
 8003630:	40021000 	.word	0x40021000
 8003634:	40004400 	.word	0x40004400
 8003638:	40004800 	.word	0x40004800
 800363c:	40004c00 	.word	0x40004c00
 8003640:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800364e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 812a 	beq.w	80038ac <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	4a9e      	ldr	r2, [pc, #632]	; (80038d8 <UART_SetConfig+0x590>)
 800365e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003662:	461a      	mov	r2, r3
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	fbb3 f3f2 	udiv	r3, r3, r2
 800366a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4413      	add	r3, r2
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	429a      	cmp	r2, r3
 800367a:	d305      	bcc.n	8003688 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	429a      	cmp	r2, r3
 8003686:	d903      	bls.n	8003690 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800368e:	e10d      	b.n	80038ac <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	2200      	movs	r2, #0
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	60fa      	str	r2, [r7, #12]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	4a8e      	ldr	r2, [pc, #568]	; (80038d8 <UART_SetConfig+0x590>)
 800369e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2200      	movs	r2, #0
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036b2:	f7fd f8bf 	bl	8000834 <__aeabi_uldivmod>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	020b      	lsls	r3, r1, #8
 80036c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036cc:	0202      	lsls	r2, r0, #8
 80036ce:	6979      	ldr	r1, [r7, #20]
 80036d0:	6849      	ldr	r1, [r1, #4]
 80036d2:	0849      	lsrs	r1, r1, #1
 80036d4:	2000      	movs	r0, #0
 80036d6:	460c      	mov	r4, r1
 80036d8:	4605      	mov	r5, r0
 80036da:	eb12 0804 	adds.w	r8, r2, r4
 80036de:	eb43 0905 	adc.w	r9, r3, r5
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	469a      	mov	sl, r3
 80036ea:	4693      	mov	fp, r2
 80036ec:	4652      	mov	r2, sl
 80036ee:	465b      	mov	r3, fp
 80036f0:	4640      	mov	r0, r8
 80036f2:	4649      	mov	r1, r9
 80036f4:	f7fd f89e 	bl	8000834 <__aeabi_uldivmod>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4613      	mov	r3, r2
 80036fe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003706:	d308      	bcc.n	800371a <UART_SetConfig+0x3d2>
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800370e:	d204      	bcs.n	800371a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6a3a      	ldr	r2, [r7, #32]
 8003716:	60da      	str	r2, [r3, #12]
 8003718:	e0c8      	b.n	80038ac <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003720:	e0c4      	b.n	80038ac <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800372a:	d167      	bne.n	80037fc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800372c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003730:	2b08      	cmp	r3, #8
 8003732:	d828      	bhi.n	8003786 <UART_SetConfig+0x43e>
 8003734:	a201      	add	r2, pc, #4	; (adr r2, 800373c <UART_SetConfig+0x3f4>)
 8003736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373a:	bf00      	nop
 800373c:	08003761 	.word	0x08003761
 8003740:	08003769 	.word	0x08003769
 8003744:	08003771 	.word	0x08003771
 8003748:	08003787 	.word	0x08003787
 800374c:	08003777 	.word	0x08003777
 8003750:	08003787 	.word	0x08003787
 8003754:	08003787 	.word	0x08003787
 8003758:	08003787 	.word	0x08003787
 800375c:	0800377f 	.word	0x0800377f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003760:	f7ff fb40 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 8003764:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003766:	e014      	b.n	8003792 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003768:	f7ff fb52 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 800376c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800376e:	e010      	b.n	8003792 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003770:	4b5a      	ldr	r3, [pc, #360]	; (80038dc <UART_SetConfig+0x594>)
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003774:	e00d      	b.n	8003792 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003776:	f7ff fac7 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 800377a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800377c:	e009      	b.n	8003792 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800377e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003784:	e005      	b.n	8003792 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003790:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8089 	beq.w	80038ac <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	4a4e      	ldr	r2, [pc, #312]	; (80038d8 <UART_SetConfig+0x590>)
 80037a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037a4:	461a      	mov	r2, r3
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80037ac:	005a      	lsls	r2, r3, #1
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	441a      	add	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80037be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	2b0f      	cmp	r3, #15
 80037c4:	d916      	bls.n	80037f4 <UART_SetConfig+0x4ac>
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037cc:	d212      	bcs.n	80037f4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f023 030f 	bic.w	r3, r3, #15
 80037d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	b29b      	uxth	r3, r3
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	8bfb      	ldrh	r3, [r7, #30]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	8bfa      	ldrh	r2, [r7, #30]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	e05b      	b.n	80038ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80037fa:	e057      	b.n	80038ac <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003800:	2b08      	cmp	r3, #8
 8003802:	d828      	bhi.n	8003856 <UART_SetConfig+0x50e>
 8003804:	a201      	add	r2, pc, #4	; (adr r2, 800380c <UART_SetConfig+0x4c4>)
 8003806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380a:	bf00      	nop
 800380c:	08003831 	.word	0x08003831
 8003810:	08003839 	.word	0x08003839
 8003814:	08003841 	.word	0x08003841
 8003818:	08003857 	.word	0x08003857
 800381c:	08003847 	.word	0x08003847
 8003820:	08003857 	.word	0x08003857
 8003824:	08003857 	.word	0x08003857
 8003828:	08003857 	.word	0x08003857
 800382c:	0800384f 	.word	0x0800384f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003830:	f7ff fad8 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 8003834:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003836:	e014      	b.n	8003862 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003838:	f7ff faea 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 800383c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800383e:	e010      	b.n	8003862 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003840:	4b26      	ldr	r3, [pc, #152]	; (80038dc <UART_SetConfig+0x594>)
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003844:	e00d      	b.n	8003862 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003846:	f7ff fa5f 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 800384a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800384c:	e009      	b.n	8003862 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800384e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003854:	e005      	b.n	8003862 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003860:	bf00      	nop
    }

    if (pclk != 0U)
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	2b00      	cmp	r3, #0
 8003866:	d021      	beq.n	80038ac <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	4a1a      	ldr	r2, [pc, #104]	; (80038d8 <UART_SetConfig+0x590>)
 800386e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003872:	461a      	mov	r2, r3
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	fbb3 f2f2 	udiv	r2, r3, r2
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	085b      	lsrs	r3, r3, #1
 8003880:	441a      	add	r2, r3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	fbb2 f3f3 	udiv	r3, r2, r3
 800388a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	2b0f      	cmp	r3, #15
 8003890:	d909      	bls.n	80038a6 <UART_SetConfig+0x55e>
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003898:	d205      	bcs.n	80038a6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	b29a      	uxth	r2, r3
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	60da      	str	r2, [r3, #12]
 80038a4:	e002      	b.n	80038ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2200      	movs	r2, #0
 80038c0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2200      	movs	r2, #0
 80038c6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80038c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3730      	adds	r7, #48	; 0x30
 80038d0:	46bd      	mov	sp, r7
 80038d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d6:	bf00      	nop
 80038d8:	08003ef0 	.word	0x08003ef0
 80038dc:	00f42400 	.word	0x00f42400

080038e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01a      	beq.n	80039f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039de:	d10a      	bne.n	80039f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]
  }
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a34:	f7fd fd3a 	bl	80014ac <HAL_GetTick>
 8003a38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d10e      	bne.n	8003a66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f82f 	bl	8003aba <UART_WaitOnFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e025      	b.n	8003ab2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d10e      	bne.n	8003a92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f819 	bl	8003aba <UART_WaitOnFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e00f      	b.n	8003ab2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b09c      	sub	sp, #112	; 0x70
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	603b      	str	r3, [r7, #0]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aca:	e0a9      	b.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad2:	f000 80a5 	beq.w	8003c20 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad6:	f7fd fce9 	bl	80014ac <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d302      	bcc.n	8003aec <UART_WaitOnFlagUntilTimeout+0x32>
 8003ae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d140      	bne.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003afc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b00:	667b      	str	r3, [r7, #100]	; 0x64
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b0c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1e6      	bne.n	8003aec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3308      	adds	r3, #8
 8003b24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	663b      	str	r3, [r7, #96]	; 0x60
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b46:	e841 2300 	strex	r3, r2, [r1]
 8003b4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1e5      	bne.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e069      	b.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d051      	beq.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b8a:	d149      	bne.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	e853 3f00 	ldrex	r3, [r3]
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003baa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bbc:	e841 2300 	strex	r3, r2, [r1]
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e6      	bne.n	8003b96 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3308      	adds	r3, #8
 8003bce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	66bb      	str	r3, [r7, #104]	; 0x68
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3308      	adds	r3, #8
 8003be6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003be8:	623a      	str	r2, [r7, #32]
 8003bea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	69f9      	ldr	r1, [r7, #28]
 8003bee:	6a3a      	ldr	r2, [r7, #32]
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e5      	bne.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e010      	b.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	f43f af46 	beq.w	8003acc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3770      	adds	r7, #112	; 0x70
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e027      	b.n	8003cb0 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2224      	movs	r2, #36	; 0x24
 8003c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0201 	bic.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003c8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e02d      	b.n	8003d30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2224      	movs	r2, #36	; 0x24
 8003ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f84f 	bl	8003db4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e02d      	b.n	8003dac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2224      	movs	r2, #36	; 0x24
 8003d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0201 	bic.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f811 	bl	8003db4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d108      	bne.n	8003dd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003dd4:	e031      	b.n	8003e3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003dd6:	2308      	movs	r3, #8
 8003dd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003dda:	2308      	movs	r3, #8
 8003ddc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	0e5b      	lsrs	r3, r3, #25
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	0f5b      	lsrs	r3, r3, #29
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dfe:	7bbb      	ldrb	r3, [r7, #14]
 8003e00:	7b3a      	ldrb	r2, [r7, #12]
 8003e02:	4911      	ldr	r1, [pc, #68]	; (8003e48 <UARTEx_SetNbDataToProcess+0x94>)
 8003e04:	5c8a      	ldrb	r2, [r1, r2]
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e0a:	7b3a      	ldrb	r2, [r7, #12]
 8003e0c:	490f      	ldr	r1, [pc, #60]	; (8003e4c <UARTEx_SetNbDataToProcess+0x98>)
 8003e0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e10:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	7b7a      	ldrb	r2, [r7, #13]
 8003e20:	4909      	ldr	r1, [pc, #36]	; (8003e48 <UARTEx_SetNbDataToProcess+0x94>)
 8003e22:	5c8a      	ldrb	r2, [r1, r2]
 8003e24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e28:	7b7a      	ldrb	r2, [r7, #13]
 8003e2a:	4908      	ldr	r1, [pc, #32]	; (8003e4c <UARTEx_SetNbDataToProcess+0x98>)
 8003e2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	08003f08 	.word	0x08003f08
 8003e4c:	08003f10 	.word	0x08003f10

08003e50 <__libc_init_array>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	4d0d      	ldr	r5, [pc, #52]	; (8003e88 <__libc_init_array+0x38>)
 8003e54:	4c0d      	ldr	r4, [pc, #52]	; (8003e8c <__libc_init_array+0x3c>)
 8003e56:	1b64      	subs	r4, r4, r5
 8003e58:	10a4      	asrs	r4, r4, #2
 8003e5a:	2600      	movs	r6, #0
 8003e5c:	42a6      	cmp	r6, r4
 8003e5e:	d109      	bne.n	8003e74 <__libc_init_array+0x24>
 8003e60:	4d0b      	ldr	r5, [pc, #44]	; (8003e90 <__libc_init_array+0x40>)
 8003e62:	4c0c      	ldr	r4, [pc, #48]	; (8003e94 <__libc_init_array+0x44>)
 8003e64:	f000 f820 	bl	8003ea8 <_init>
 8003e68:	1b64      	subs	r4, r4, r5
 8003e6a:	10a4      	asrs	r4, r4, #2
 8003e6c:	2600      	movs	r6, #0
 8003e6e:	42a6      	cmp	r6, r4
 8003e70:	d105      	bne.n	8003e7e <__libc_init_array+0x2e>
 8003e72:	bd70      	pop	{r4, r5, r6, pc}
 8003e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e78:	4798      	blx	r3
 8003e7a:	3601      	adds	r6, #1
 8003e7c:	e7ee      	b.n	8003e5c <__libc_init_array+0xc>
 8003e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e82:	4798      	blx	r3
 8003e84:	3601      	adds	r6, #1
 8003e86:	e7f2      	b.n	8003e6e <__libc_init_array+0x1e>
 8003e88:	08003f20 	.word	0x08003f20
 8003e8c:	08003f20 	.word	0x08003f20
 8003e90:	08003f20 	.word	0x08003f20
 8003e94:	08003f24 	.word	0x08003f24

08003e98 <memset>:
 8003e98:	4402      	add	r2, r0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d100      	bne.n	8003ea2 <memset+0xa>
 8003ea0:	4770      	bx	lr
 8003ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea6:	e7f9      	b.n	8003e9c <memset+0x4>

08003ea8 <_init>:
 8003ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eaa:	bf00      	nop
 8003eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eae:	bc08      	pop	{r3}
 8003eb0:	469e      	mov	lr, r3
 8003eb2:	4770      	bx	lr

08003eb4 <_fini>:
 8003eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb6:	bf00      	nop
 8003eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eba:	bc08      	pop	{r3}
 8003ebc:	469e      	mov	lr, r3
 8003ebe:	4770      	bx	lr
