
Localization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093ac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08009590  08009590  00019590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bd0  08009bd0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009bd0  08009bd0  00019bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bd8  08009bd8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bd8  08009bd8  00019bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bdc  08009bdc  00019bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200001dc  08009dbc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08009dbc  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a57  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290d  00000000  00000000  00036c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  00039570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003a8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f9aa  00000000  00000000  0003bb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167d8  00000000  00000000  0005b502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caf08  00000000  00000000  00071cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013cbe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006710  00000000  00000000  0013cc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009574 	.word	0x08009574

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08009574 	.word	0x08009574

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	230a      	movs	r3, #10
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <_write+0x24>)
 8000fb2:	f003 fd83 	bl	8004abc <HAL_UART_Transmit>
	return len;
 8000fb6:	687b      	ldr	r3, [r7, #4]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000328 	.word	0x20000328

08000fc4 <read_encoder_value>:


int16_t read_encoder_value(uint8_t a)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
	if(a == 0){
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10a      	bne.n	8000fea <read_encoder_value+0x26>
		uint16_t enc_buff = TIM2->CNT;
 8000fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	81bb      	strh	r3, [r7, #12]
		TIM2->CNT = 0;
 8000fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
		return (int16_t)enc_buff;
 8000fe4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fe8:	e00b      	b.n	8001002 <read_encoder_value+0x3e>
	}

	else if(a == 1){
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d108      	bne.n	8001002 <read_encoder_value+0x3e>
		uint16_t enc_buff = TIM3->CNT;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <read_encoder_value+0x4c>)
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	81fb      	strh	r3, [r7, #14]
		TIM3->CNT = 0;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <read_encoder_value+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24

		return (int16_t)enc_buff;
 8000ffc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001000:	e7ff      	b.n	8001002 <read_encoder_value+0x3e>
	}


}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40000400 	.word	0x40000400
 8001014:	00000000 	.word	0x00000000

08001018 <Dgr2Rad>:

float Dgr2Rad(float Deg){
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	ed87 0a01 	vstr	s0, [r7, #4]
	return Deg*M_PI/180;
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff fab8 	bl	8000598 <__aeabi_f2d>
 8001028:	a30e      	add	r3, pc, #56	; (adr r3, 8001064 <Dgr2Rad+0x4c>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f7ff fb0b 	bl	8000648 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <Dgr2Rad+0x48>)
 8001040:	f7ff fc2c 	bl	800089c <__aeabi_ddiv>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f7ff fdd4 	bl	8000bf8 <__aeabi_d2f>
 8001050:	4603      	mov	r3, r0
 8001052:	ee07 3a90 	vmov	s15, r3
}
 8001056:	eeb0 0a67 	vmov.f32	s0, s15
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40668000 	.word	0x40668000
 8001064:	54442d18 	.word	0x54442d18
 8001068:	400921fb 	.word	0x400921fb

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001070:	f000 feb7 	bl	8001de2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001074:	f000 f812 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001078:	f000 f9e0 	bl	800143c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800107c:	f000 f988 	bl	8001390 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001080:	f000 f8f2 	bl	8001268 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001084:	f000 f898 	bl	80011b8 <MX_TIM2_Init>
  MX_I2C3_Init();
 8001088:	f000 f854 	bl	8001134 <MX_I2C3_Init>
  MX_TIM6_Init();
 800108c:	f000 f946 	bl	800131c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  printf("Initialized\r\n");
 8001090:	4801      	ldr	r0, [pc, #4]	; (8001098 <main+0x2c>)
 8001092:	f005 f84f 	bl	8006134 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001096:	e7fe      	b.n	8001096 <main+0x2a>
 8001098:	08009590 	.word	0x08009590

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	; 0x50
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0318 	add.w	r3, r7, #24
 80010a6:	2238      	movs	r2, #56	; 0x38
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 fb4a 	bl	8005744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010be:	2000      	movs	r0, #0
 80010c0:	f001 ffc8 	bl	8003054 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c4:	2302      	movs	r3, #2
 80010c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ce:	2340      	movs	r3, #64	; 0x40
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	2302      	movs	r3, #2
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d6:	2302      	movs	r3, #2
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010da:	2304      	movs	r3, #4
 80010dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010de:	2355      	movs	r3, #85	; 0x55
 80010e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ee:	f107 0318 	add.w	r3, r7, #24
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 f852 	bl	800319c <HAL_RCC_OscConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010fe:	f000 fbc5 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001102:	230f      	movs	r3, #15
 8001104:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001106:	2303      	movs	r3, #3
 8001108:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2104      	movs	r1, #4
 800111a:	4618      	mov	r0, r3
 800111c:	f002 fb56 	bl	80037cc <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001126:	f000 fbb1 	bl	800188c <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3750      	adds	r7, #80	; 0x50
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <MX_I2C3_Init+0x78>)
 800113a:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <MX_I2C3_Init+0x7c>)
 800113c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A0A7FB;
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_I2C3_Init+0x78>)
 8001140:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <MX_I2C3_Init+0x80>)
 8001142:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_I2C3_Init+0x78>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_I2C3_Init+0x78>)
 800114c:	2201      	movs	r2, #1
 800114e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <MX_I2C3_Init+0x78>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_I2C3_Init+0x78>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_I2C3_Init+0x78>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_I2C3_Init+0x78>)
 8001164:	2200      	movs	r2, #0
 8001166:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_I2C3_Init+0x78>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800116e:	480f      	ldr	r0, [pc, #60]	; (80011ac <MX_I2C3_Init+0x78>)
 8001170:	f001 f974 	bl	800245c <HAL_I2C_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800117a:	f000 fb87 	bl	800188c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800117e:	2100      	movs	r1, #0
 8001180:	480a      	ldr	r0, [pc, #40]	; (80011ac <MX_I2C3_Init+0x78>)
 8001182:	f001 fecf 	bl	8002f24 <HAL_I2CEx_ConfigAnalogFilter>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800118c:	f000 fb7e 	bl	800188c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001190:	2100      	movs	r1, #0
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <MX_I2C3_Init+0x78>)
 8001194:	f001 ff11 	bl	8002fba <HAL_I2CEx_ConfigDigitalFilter>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800119e:	f000 fb75 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */
  BNO055_Init();
 80011a2:	f000 f98b 	bl	80014bc <BNO055_Init>
  /* USER CODE END I2C3_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200001f8 	.word	0x200001f8
 80011b0:	40007800 	.word	0x40007800
 80011b4:	30a0a7fb 	.word	0x30a0a7fb

080011b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	; 0x30
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	2224      	movs	r2, #36	; 0x24
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f004 fabc 	bl	8005744 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <MX_TIM2_Init+0xac>)
 80011d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_TIM2_Init+0xac>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_TIM2_Init+0xac>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <MX_TIM2_Init+0xac>)
 80011ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_TIM2_Init+0xac>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_TIM2_Init+0xac>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011fe:	2303      	movs	r3, #3
 8001200:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001206:	2301      	movs	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001216:	2301      	movs	r3, #1
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4619      	mov	r1, r3
 8001228:	480e      	ldr	r0, [pc, #56]	; (8001264 <MX_TIM2_Init+0xac>)
 800122a:	f002 ff9d 	bl	8004168 <HAL_TIM_Encoder_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001234:	f000 fb2a 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	4807      	ldr	r0, [pc, #28]	; (8001264 <MX_TIM2_Init+0xac>)
 8001246:	f003 fb21 	bl	800488c <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001250:	f000 fb1c 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001254:	213c      	movs	r1, #60	; 0x3c
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <MX_TIM2_Init+0xac>)
 8001258:	f003 f82c 	bl	80042b4 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	3730      	adds	r7, #48	; 0x30
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000244 	.word	0x20000244

08001268 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	; 0x30
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2224      	movs	r2, #36	; 0x24
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f004 fa64 	bl	8005744 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001286:	4b23      	ldr	r3, [pc, #140]	; (8001314 <MX_TIM3_Init+0xac>)
 8001288:	4a23      	ldr	r2, [pc, #140]	; (8001318 <MX_TIM3_Init+0xb0>)
 800128a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800128c:	4b21      	ldr	r3, [pc, #132]	; (8001314 <MX_TIM3_Init+0xac>)
 800128e:	2200      	movs	r2, #0
 8001290:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <MX_TIM3_Init+0xac>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <MX_TIM3_Init+0xac>)
 800129a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_TIM3_Init+0xac>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a6:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <MX_TIM3_Init+0xac>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012ac:	2303      	movs	r3, #3
 80012ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012b4:	2301      	movs	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012c4:	2301      	movs	r3, #1
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	4619      	mov	r1, r3
 80012d6:	480f      	ldr	r0, [pc, #60]	; (8001314 <MX_TIM3_Init+0xac>)
 80012d8:	f002 ff46 	bl	8004168 <HAL_TIM_Encoder_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80012e2:	f000 fad3 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ee:	463b      	mov	r3, r7
 80012f0:	4619      	mov	r1, r3
 80012f2:	4808      	ldr	r0, [pc, #32]	; (8001314 <MX_TIM3_Init+0xac>)
 80012f4:	f003 faca 	bl	800488c <HAL_TIMEx_MasterConfigSynchronization>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80012fe:	f000 fac5 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001302:	213c      	movs	r1, #60	; 0x3c
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <MX_TIM3_Init+0xac>)
 8001306:	f002 ffd5 	bl	80042b4 <HAL_TIM_Encoder_Start>

  /* USER CODE END TIM3_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	3730      	adds	r7, #48	; 0x30
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000290 	.word	0x20000290
 8001318:	40000400 	.word	0x40000400

0800131c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_TIM6_Init+0x6c>)
 800132e:	4a17      	ldr	r2, [pc, #92]	; (800138c <MX_TIM6_Init+0x70>)
 8001330:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 799;
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_TIM6_Init+0x6c>)
 8001334:	f240 321f 	movw	r2, #799	; 0x31f
 8001338:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <MX_TIM6_Init+0x6c>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_TIM6_Init+0x6c>)
 8001342:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001346:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_TIM6_Init+0x6c>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800134e:	480e      	ldr	r0, [pc, #56]	; (8001388 <MX_TIM6_Init+0x6c>)
 8001350:	f002 fe48 	bl	8003fe4 <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800135a:	f000 fa97 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <MX_TIM6_Init+0x6c>)
 800136c:	f003 fa8e 	bl	800488c <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001376:	f000 fa89 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800137a:	4803      	ldr	r0, [pc, #12]	; (8001388 <MX_TIM6_Init+0x6c>)
 800137c:	f002 fe8a 	bl	8004094 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200002dc 	.word	0x200002dc
 800138c:	40001000 	.word	0x40001000

08001390 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <MX_USART2_UART_Init+0xa0>)
 8001396:	4a27      	ldr	r2, [pc, #156]	; (8001434 <MX_USART2_UART_Init+0xa4>)
 8001398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <MX_USART2_UART_Init+0xa0>)
 800139c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <MX_USART2_UART_Init+0xa0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b21      	ldr	r3, [pc, #132]	; (8001430 <MX_USART2_UART_Init+0xa0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <MX_USART2_UART_Init+0xa0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <MX_USART2_UART_Init+0xa0>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <MX_USART2_UART_Init+0xa0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <MX_USART2_UART_Init+0xa0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c6:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <MX_USART2_UART_Init+0xa0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <MX_USART2_UART_Init+0xa0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <MX_USART2_UART_Init+0xa0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d8:	4815      	ldr	r0, [pc, #84]	; (8001430 <MX_USART2_UART_Init+0xa0>)
 80013da:	f003 fb1f 	bl	8004a1c <HAL_UART_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013e4:	f000 fa52 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e8:	2100      	movs	r1, #0
 80013ea:	4811      	ldr	r0, [pc, #68]	; (8001430 <MX_USART2_UART_Init+0xa0>)
 80013ec:	f004 f8b6 	bl	800555c <HAL_UARTEx_SetTxFifoThreshold>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013f6:	f000 fa49 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fa:	2100      	movs	r1, #0
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <MX_USART2_UART_Init+0xa0>)
 80013fe:	f004 f8eb 	bl	80055d8 <HAL_UARTEx_SetRxFifoThreshold>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001408:	f000 fa40 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800140c:	4808      	ldr	r0, [pc, #32]	; (8001430 <MX_USART2_UART_Init+0xa0>)
 800140e:	f004 f86c 	bl	80054ea <HAL_UARTEx_DisableFifoMode>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001418:	f000 fa38 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  setbuf(stdout, NULL);
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_USART2_UART_Init+0xa8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f004 fe8d 	bl	8006144 <setbuf>
  /* USER CODE END USART2_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000328 	.word	0x20000328
 8001434:	40004400 	.word	0x40004400
 8001438:	2000000c 	.word	0x2000000c

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <MX_GPIO_Init+0x78>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <MX_GPIO_Init+0x78>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_GPIO_Init+0x78>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <MX_GPIO_Init+0x78>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a11      	ldr	r2, [pc, #68]	; (80014b4 <MX_GPIO_Init+0x78>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_GPIO_Init+0x78>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001488:	480b      	ldr	r0, [pc, #44]	; (80014b8 <MX_GPIO_Init+0x7c>)
 800148a:	f000 ffcf 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800148e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	4619      	mov	r1, r3
 80014a6:	4804      	ldr	r0, [pc, #16]	; (80014b8 <MX_GPIO_Init+0x7c>)
 80014a8:	f000 fe3e 	bl	8002128 <HAL_GPIO_Init>

}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000
 80014b8:	48000400 	.word	0x48000400

080014bc <BNO055_Init>:

/* USER CODE BEGIN 4 */
void BNO055_Init(){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af04      	add	r7, sp, #16
	HAL_Delay(700);
 80014c2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80014c6:	f000 fcfd 	bl	8001ec4 <HAL_Delay>


	//Txbuff = 0x20;
	//HAL_I2C_Mem_Write(&hi2c1, 0x28 << 1, 0x3F, I2C_MEMADD_SIZE_8BIT, &Txbuff, 1, 100); //system trigger

	Txbuff = 0x00;
 80014ca:	2300      	movs	r3, #0
 80014cc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c3, 0x28 << 1, 0x3E, I2C_MEMADD_SIZE_8BIT, &Txbuff, 1, 100); //power mode
 80014ce:	2364      	movs	r3, #100	; 0x64
 80014d0:	9302      	str	r3, [sp, #8]
 80014d2:	2301      	movs	r3, #1
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2301      	movs	r3, #1
 80014dc:	223e      	movs	r2, #62	; 0x3e
 80014de:	2150      	movs	r1, #80	; 0x50
 80014e0:	482e      	ldr	r0, [pc, #184]	; (800159c <BNO055_Init+0xe0>)
 80014e2:	f001 f84b 	bl	800257c <HAL_I2C_Mem_Write>

	Txbuff = 0x0C;
 80014e6:	230c      	movs	r3, #12
 80014e8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c3, 0x28 << 1, 0x3D, I2C_MEMADD_SIZE_8BIT, &Txbuff, 1, 100);//using Nine Degree of Freedom mode
 80014ea:	2364      	movs	r3, #100	; 0x64
 80014ec:	9302      	str	r3, [sp, #8]
 80014ee:	2301      	movs	r3, #1
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	1dfb      	adds	r3, r7, #7
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2301      	movs	r3, #1
 80014f8:	223d      	movs	r2, #61	; 0x3d
 80014fa:	2150      	movs	r1, #80	; 0x50
 80014fc:	4827      	ldr	r0, [pc, #156]	; (800159c <BNO055_Init+0xe0>)
 80014fe:	f001 f83d 	bl	800257c <HAL_I2C_Mem_Write>
	//HAL_I2C_Mem_Write(&hi2c3, 0x28 << 1, 0x3B, I2C_MEMADD_SIZE_8BIT, &Txbuff, 1, 100);




	HAL_I2C_Mem_Read(&hi2c3, 0x28 << 1, 0x3A, I2C_MEMADD_SIZE_8BIT, &Rxbuff, 1, 100);
 8001502:	2364      	movs	r3, #100	; 0x64
 8001504:	9302      	str	r3, [sp, #8]
 8001506:	2301      	movs	r3, #1
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	1dbb      	adds	r3, r7, #6
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2301      	movs	r3, #1
 8001510:	223a      	movs	r2, #58	; 0x3a
 8001512:	2150      	movs	r1, #80	; 0x50
 8001514:	4821      	ldr	r0, [pc, #132]	; (800159c <BNO055_Init+0xe0>)
 8001516:	f001 f945 	bl	80027a4 <HAL_I2C_Mem_Read>
	printf("Error: %x\r\n", Rxbuff);
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	4619      	mov	r1, r3
 800151e:	4820      	ldr	r0, [pc, #128]	; (80015a0 <BNO055_Init+0xe4>)
 8001520:	f004 fd82 	bl	8006028 <iprintf>

	HAL_I2C_Mem_Read(&hi2c3, 0x28 << 1, 0x00, I2C_MEMADD_SIZE_8BIT, &Rxbuff, 1, 100);
 8001524:	2364      	movs	r3, #100	; 0x64
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	2301      	movs	r3, #1
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	1dbb      	adds	r3, r7, #6
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	2200      	movs	r2, #0
 8001534:	2150      	movs	r1, #80	; 0x50
 8001536:	4819      	ldr	r0, [pc, #100]	; (800159c <BNO055_Init+0xe0>)
 8001538:	f001 f934 	bl	80027a4 <HAL_I2C_Mem_Read>
	printf("ID: %x\r\n", Rxbuff);
 800153c:	79bb      	ldrb	r3, [r7, #6]
 800153e:	4619      	mov	r1, r3
 8001540:	4818      	ldr	r0, [pc, #96]	; (80015a4 <BNO055_Init+0xe8>)
 8001542:	f004 fd71 	bl	8006028 <iprintf>

	HAL_I2C_Mem_Read(&hi2c3, 0x28 << 1, 0x34, I2C_MEMADD_SIZE_8BIT, &Rxbuff, 1, 100);
 8001546:	2364      	movs	r3, #100	; 0x64
 8001548:	9302      	str	r3, [sp, #8]
 800154a:	2301      	movs	r3, #1
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	1dbb      	adds	r3, r7, #6
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2301      	movs	r3, #1
 8001554:	2234      	movs	r2, #52	; 0x34
 8001556:	2150      	movs	r1, #80	; 0x50
 8001558:	4810      	ldr	r0, [pc, #64]	; (800159c <BNO055_Init+0xe0>)
 800155a:	f001 f923 	bl	80027a4 <HAL_I2C_Mem_Read>
	printf("Temp: %x\r\n", Rxbuff);
 800155e:	79bb      	ldrb	r3, [r7, #6]
 8001560:	4619      	mov	r1, r3
 8001562:	4811      	ldr	r0, [pc, #68]	; (80015a8 <BNO055_Init+0xec>)
 8001564:	f004 fd60 	bl	8006028 <iprintf>

	uint8_t Rxbuffer[2];
	HAL_I2C_Mem_Read(&hi2c3, BNO_ADDRESS << 1, 0x1A, I2C_MEMADD_SIZE_8BIT, Rxbuffer, 2, 100);
 8001568:	2364      	movs	r3, #100	; 0x64
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	2302      	movs	r3, #2
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2301      	movs	r3, #1
 8001576:	221a      	movs	r2, #26
 8001578:	2150      	movs	r1, #80	; 0x50
 800157a:	4808      	ldr	r0, [pc, #32]	; (800159c <BNO055_Init+0xe0>)
 800157c:	f001 f912 	bl	80027a4 <HAL_I2C_Mem_Read>
	AttOffset = (Rxbuffer[1] << 8) | Rxbuffer[0];
 8001580:	797b      	ldrb	r3, [r7, #5]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b21a      	sxth	r2, r3
 8001586:	793b      	ldrb	r3, [r7, #4]
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21b      	sxth	r3, r3
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <BNO055_Init+0xf0>)
 8001592:	801a      	strh	r2, [r3, #0]

	//print_int(30, "testing");
	//HAL_Delay(100);


}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200001f8 	.word	0x200001f8
 80015a0:	080095a0 	.word	0x080095a0
 80015a4:	080095ac 	.word	0x080095ac
 80015a8:	080095b8 	.word	0x080095b8
 80015ac:	200003d0 	.word	0x200003d0

080015b0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	ed2d 8b02 	vpush	{d8}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af04      	add	r7, sp, #16
 80015ba:	6078      	str	r0, [r7, #4]

	if(htim==&htim6){
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4aaa      	ldr	r2, [pc, #680]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	f040 813e 	bne.w	8001842 <HAL_TIM_PeriodElapsedCallback+0x292>
		uint8_t Rxbuffer[2];
		static uint32_t count[2]={};
		uint8_t i;


		HAL_I2C_Mem_Read(&hi2c3, BNO_ADDRESS << 1, 0x1A, I2C_MEMADD_SIZE_8BIT, Rxbuffer, 2, 100);
 80015c6:	2364      	movs	r3, #100	; 0x64
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	2302      	movs	r3, #2
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2301      	movs	r3, #1
 80015d6:	221a      	movs	r2, #26
 80015d8:	2150      	movs	r1, #80	; 0x50
 80015da:	48a4      	ldr	r0, [pc, #656]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80015dc:	f001 f8e2 	bl	80027a4 <HAL_I2C_Mem_Read>
	    //printf("%s: %f\r\n", "x", (float)(((Rxbuffer[1] << 8) | Rxbuffer[0]) - AttOffset)/16);
	    gr[2] = (float)(((Rxbuffer[1] << 8) | Rxbuffer[0]) - AttOffset)/16;
 80015e0:	7b7b      	ldrb	r3, [r7, #13]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	7b3a      	ldrb	r2, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	4aa1      	ldr	r2, [pc, #644]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80015ea:	8812      	ldrh	r2, [r2, #0]
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80015fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fe:	4b9d      	ldr	r3, [pc, #628]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001600:	edc3 7a02 	vstr	s15, [r3, #8]
	    gr[0] += ((float)read_encoder_value(0) + read_encoder_value(1))*cos(M_PI/6)*WHEEL_DIAMETER*M_PI/2/ENCODER_STEPS*cos(Dgr2Rad((_gr[2]+gr[2])/2));
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff fcdd 	bl	8000fc4 <read_encoder_value>
 800160a:	4603      	mov	r3, r0
 800160c:	ee07 3a90 	vmov	s15, r3
 8001610:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001614:	2001      	movs	r0, #1
 8001616:	f7ff fcd5 	bl	8000fc4 <read_encoder_value>
 800161a:	4603      	mov	r3, r0
 800161c:	ee07 3a90 	vmov	s15, r3
 8001620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001624:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001628:	ee17 0a90 	vmov	r0, s15
 800162c:	f7fe ffb4 	bl	8000598 <__aeabi_f2d>
 8001630:	a387      	add	r3, pc, #540	; (adr r3, 8001850 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7ff f807 	bl	8000648 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	a385      	add	r3, pc, #532	; (adr r3, 8001858 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7fe fffe 	bl	8000648 <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	a382      	add	r3, pc, #520	; (adr r3, 8001860 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7fe fff5 	bl	8000648 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800166e:	f7ff f915 	bl	800089c <__aeabi_ddiv>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	4b7e      	ldr	r3, [pc, #504]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001680:	f7ff f90c 	bl	800089c <__aeabi_ddiv>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4614      	mov	r4, r2
 800168a:	461d      	mov	r5, r3
 800168c:	4b7b      	ldr	r3, [pc, #492]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800168e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001692:	4b78      	ldr	r3, [pc, #480]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001694:	edd3 7a02 	vldr	s15, [r3, #8]
 8001698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016a4:	eeb0 0a47 	vmov.f32	s0, s14
 80016a8:	f7ff fcb6 	bl	8001018 <Dgr2Rad>
 80016ac:	ee10 3a10 	vmov	r3, s0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff71 	bl	8000598 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	ec43 2b10 	vmov	d0, r2, r3
 80016be:	f006 febb 	bl	8008438 <cos>
 80016c2:	ec53 2b10 	vmov	r2, r3, d0
 80016c6:	4620      	mov	r0, r4
 80016c8:	4629      	mov	r1, r5
 80016ca:	f7fe ffbd 	bl	8000648 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4614      	mov	r4, r2
 80016d4:	461d      	mov	r5, r3
 80016d6:	4b67      	ldr	r3, [pc, #412]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff5c 	bl	8000598 <__aeabi_f2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f7fe fdf8 	bl	80002dc <__adddf3>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fa80 	bl	8000bf8 <__aeabi_d2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4a5e      	ldr	r2, [pc, #376]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80016fc:	6013      	str	r3, [r2, #0]
	    gr[1] += ((float)read_encoder_value(0) - read_encoder_value(1))*sin(M_PI/6)*WHEEL_DIAMETER*M_PI/2/ENCODER_STEPS*sin(Dgr2Rad((_gr[2]+gr[2])/2));
 80016fe:	2000      	movs	r0, #0
 8001700:	f7ff fc60 	bl	8000fc4 <read_encoder_value>
 8001704:	4603      	mov	r3, r0
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800170e:	2001      	movs	r0, #1
 8001710:	f7ff fc58 	bl	8000fc4 <read_encoder_value>
 8001714:	4603      	mov	r3, r0
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001722:	ee17 0a90 	vmov	r0, s15
 8001726:	f7fe ff37 	bl	8000598 <__aeabi_f2d>
 800172a:	f04f 32ff 	mov.w	r2, #4294967295
 800172e:	4b54      	ldr	r3, [pc, #336]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001730:	f7fe ff8a 	bl	8000648 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	a346      	add	r3, pc, #280	; (adr r3, 8001858 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe ff81 	bl	8000648 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	a344      	add	r3, pc, #272	; (adr r3, 8001860 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe ff78 	bl	8000648 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001768:	f7ff f898 	bl	800089c <__aeabi_ddiv>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800177a:	f7ff f88f 	bl	800089c <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4614      	mov	r4, r2
 8001784:	461d      	mov	r5, r3
 8001786:	4b3d      	ldr	r3, [pc, #244]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001788:	ed93 7a02 	vldr	s14, [r3, #8]
 800178c:	4b39      	ldr	r3, [pc, #228]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800178e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001796:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800179a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800179e:	eeb0 0a47 	vmov.f32	s0, s14
 80017a2:	f7ff fc39 	bl	8001018 <Dgr2Rad>
 80017a6:	ee10 3a10 	vmov	r3, s0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fef4 	bl	8000598 <__aeabi_f2d>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	ec43 2b10 	vmov	d0, r2, r3
 80017b8:	f006 fe92 	bl	80084e0 <sin>
 80017bc:	ec53 2b10 	vmov	r2, r3, d0
 80017c0:	4620      	mov	r0, r4
 80017c2:	4629      	mov	r1, r5
 80017c4:	f7fe ff40 	bl	8000648 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4614      	mov	r4, r2
 80017ce:	461d      	mov	r5, r3
 80017d0:	4b28      	ldr	r3, [pc, #160]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fedf 	bl	8000598 <__aeabi_f2d>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4620      	mov	r0, r4
 80017e0:	4629      	mov	r1, r5
 80017e2:	f7fe fd7b 	bl	80002dc <__adddf3>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f7ff fa03 	bl	8000bf8 <__aeabi_d2f>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80017f6:	6053      	str	r3, [r2, #4]

	  for(i=0; i<2; i++){
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
 80017fc:	e01a      	b.n	8001834 <HAL_TIM_PeriodElapsedCallback+0x284>
		  count[i] += read_encoder_value(i);
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fbdf 	bl	8000fc4 <read_encoder_value>
 8001806:	4603      	mov	r3, r0
 8001808:	4619      	mov	r1, r3
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800180e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	440a      	add	r2, r1
 8001816:	491b      	ldr	r1, [pc, #108]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  printf("Encoder %d: %d\r\n", i, count[i]);
 800181c:	7bf9      	ldrb	r1, [r7, #15]
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	4a18      	ldr	r2, [pc, #96]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	461a      	mov	r2, r3
 8001828:	4817      	ldr	r0, [pc, #92]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800182a:	f004 fbfd 	bl	8006028 <iprintf>
	  for(i=0; i<2; i++){
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	3301      	adds	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d9e1      	bls.n	80017fe <HAL_TIM_PeriodElapsedCallback+0x24e>
	  }

	  //printf(" x:%f\r\n y:%f\r\n T:%f\r\n", gr[0], gr[1], gr[2]);
	  _gr[2] = gr[2];
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	4a0f      	ldr	r2, [pc, #60]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001840:	6093      	str	r3, [r2, #8]
	}
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	ecbd 8b02 	vpop	{d8}
 800184c:	bdb0      	pop	{r4, r5, r7, pc}
 800184e:	bf00      	nop
 8001850:	e8584cab 	.word	0xe8584cab
 8001854:	3febb67a 	.word	0x3febb67a
 8001858:	0e560419 	.word	0x0e560419
 800185c:	3fadb22d 	.word	0x3fadb22d
 8001860:	54442d18 	.word	0x54442d18
 8001864:	400921fb 	.word	0x400921fb
 8001868:	200002dc 	.word	0x200002dc
 800186c:	200001f8 	.word	0x200001f8
 8001870:	200003d0 	.word	0x200003d0
 8001874:	200003b8 	.word	0x200003b8
 8001878:	408f4000 	.word	0x408f4000
 800187c:	200003c4 	.word	0x200003c4
 8001880:	3fdfffff 	.word	0x3fdfffff
 8001884:	200003d4 	.word	0x200003d4
 8001888:	080095c4 	.word	0x080095c4

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	e7fe      	b.n	8001894 <Error_Handler+0x8>
	...

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_MspInit+0x44>)
 80018a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_MspInit+0x44>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6613      	str	r3, [r2, #96]	; 0x60
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_MspInit+0x44>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_MspInit+0x44>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x44>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6593      	str	r3, [r2, #88]	; 0x58
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x44>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000

080018e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b09c      	sub	sp, #112	; 0x70
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f8:	f107 0318 	add.w	r3, r7, #24
 80018fc:	2244      	movs	r2, #68	; 0x44
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f003 ff1f 	bl	8005744 <memset>
  if(hi2c->Instance==I2C3)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a2e      	ldr	r2, [pc, #184]	; (80019c4 <HAL_I2C_MspInit+0xe4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d154      	bne.n	80019ba <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001914:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001916:	2300      	movs	r3, #0
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800191a:	f107 0318 	add.w	r3, r7, #24
 800191e:	4618      	mov	r0, r3
 8001920:	f002 f970 	bl	8003c04 <HAL_RCCEx_PeriphCLKConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800192a:	f7ff ffaf 	bl	800188c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <HAL_I2C_MspInit+0xe8>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <HAL_I2C_MspInit+0xe8>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193a:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_I2C_MspInit+0xe8>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_I2C_MspInit+0xe8>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4a1f      	ldr	r2, [pc, #124]	; (80019c8 <HAL_I2C_MspInit+0xe8>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <HAL_I2C_MspInit+0xe8>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800195e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001962:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001964:	2312      	movs	r3, #18
 8001966:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001970:	2302      	movs	r3, #2
 8001972:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001978:	4619      	mov	r1, r3
 800197a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197e:	f000 fbd3 	bl	8002128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001982:	2320      	movs	r3, #32
 8001984:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001986:	2312      	movs	r3, #18
 8001988:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001992:	2308      	movs	r3, #8
 8001994:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800199a:	4619      	mov	r1, r3
 800199c:	480b      	ldr	r0, [pc, #44]	; (80019cc <HAL_I2C_MspInit+0xec>)
 800199e:	f000 fbc3 	bl	8002128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_I2C_MspInit+0xe8>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	4a08      	ldr	r2, [pc, #32]	; (80019c8 <HAL_I2C_MspInit+0xe8>)
 80019a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019ac:	6593      	str	r3, [r2, #88]	; 0x58
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_I2C_MspInit+0xe8>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80019ba:	bf00      	nop
 80019bc:	3770      	adds	r7, #112	; 0x70
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40007800 	.word	0x40007800
 80019c8:	40021000 	.word	0x40021000
 80019cc:	48000400 	.word	0x48000400

080019d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08c      	sub	sp, #48	; 0x30
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f0:	d129      	bne.n	8001a46 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019f2:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <HAL_TIM_Encoder_MspInit+0xdc>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	4a2d      	ldr	r2, [pc, #180]	; (8001aac <HAL_TIM_Encoder_MspInit+0xdc>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6593      	str	r3, [r2, #88]	; 0x58
 80019fe:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	61bb      	str	r3, [r7, #24]
 8001a08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	4b28      	ldr	r3, [pc, #160]	; (8001aac <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	4a27      	ldr	r2, [pc, #156]	; (8001aac <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a22:	2303      	movs	r3, #3
 8001a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a32:	2301      	movs	r3, #1
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a40:	f000 fb72 	bl	8002128 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a44:	e02d      	b.n	8001aa2 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM3)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d128      	bne.n	8001aa2 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	4a15      	ldr	r2, [pc, #84]	; (8001aac <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a56:	f043 0302 	orr.w	r3, r3, #2
 8001a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a68:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6c:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001a80:	2350      	movs	r3, #80	; 0x50
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a90:	2302      	movs	r3, #2
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9e:	f000 fb43 	bl	8002128 <HAL_GPIO_Init>
}
 8001aa2:	bf00      	nop
 8001aa4:	3730      	adds	r7, #48	; 0x30
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40000400 	.word	0x40000400

08001ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <HAL_TIM_Base_MspInit+0x44>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d113      	bne.n	8001aee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <HAL_TIM_Base_MspInit+0x48>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <HAL_TIM_Base_MspInit+0x48>)
 8001acc:	f043 0310 	orr.w	r3, r3, #16
 8001ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_TIM_Base_MspInit+0x48>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2036      	movs	r0, #54	; 0x36
 8001ae4:	f000 faeb 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ae8:	2036      	movs	r0, #54	; 0x36
 8001aea:	f000 fb02 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40001000 	.word	0x40001000
 8001afc:	40021000 	.word	0x40021000

08001b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b09a      	sub	sp, #104	; 0x68
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	2244      	movs	r2, #68	; 0x44
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 fe0f 	bl	8005744 <memset>
  if(huart->Instance==USART2)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ba8 <HAL_UART_MspInit+0xa8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d136      	bne.n	8001b9e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 f861 	bl	8003c04 <HAL_RCCEx_PeriphCLKConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b48:	f7ff fea0 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_UART_MspInit+0xac>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	4a16      	ldr	r2, [pc, #88]	; (8001bac <HAL_UART_MspInit+0xac>)
 8001b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b56:	6593      	str	r3, [r2, #88]	; 0x58
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <HAL_UART_MspInit+0xac>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_UART_MspInit+0xac>)
 8001b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b68:	4a10      	ldr	r2, [pc, #64]	; (8001bac <HAL_UART_MspInit+0xac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_UART_MspInit+0xac>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001b7c:	230c      	movs	r3, #12
 8001b7e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b8c:	2307      	movs	r3, #7
 8001b8e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b94:	4619      	mov	r1, r3
 8001b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9a:	f000 fac5 	bl	8002128 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3768      	adds	r7, #104	; 0x68
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40004400 	.word	0x40004400
 8001bac:	40021000 	.word	0x40021000

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <NMI_Handler+0x4>

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfc:	f000 f944 	bl	8001e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <TIM6_DAC_IRQHandler+0x10>)
 8001c0a:	f002 fbe1 	bl	80043d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200002dc 	.word	0x200002dc

08001c18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
	return 1;
 8001c1c:	2301      	movs	r3, #1
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_kill>:

int _kill(int pid, int sig)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c32:	f003 fd5d 	bl	80056f0 <__errno>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2216      	movs	r2, #22
 8001c3a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_exit>:

void _exit (int status)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ffe7 	bl	8001c28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c5a:	e7fe      	b.n	8001c5a <_exit+0x12>

08001c5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	e00a      	b.n	8001c84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c6e:	f3af 8000 	nop.w
 8001c72:	4601      	mov	r1, r0
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	60ba      	str	r2, [r7, #8]
 8001c7a:	b2ca      	uxtb	r2, r1
 8001c7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbf0      	blt.n	8001c6e <_read+0x12>
	}

return len;
 8001c8c:	687b      	ldr	r3, [r7, #4]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cbe:	605a      	str	r2, [r3, #4]
	return 0;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <_isatty>:

int _isatty(int file)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cd6:	2301      	movs	r3, #1
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
	return 0;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <_sbrk+0x5c>)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <_sbrk+0x60>)
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <_sbrk+0x64>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <_sbrk+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d207      	bcs.n	8001d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d30:	f003 fcde 	bl	80056f0 <__errno>
 8001d34:	4603      	mov	r3, r0
 8001d36:	220c      	movs	r2, #12
 8001d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	e009      	b.n	8001d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <_sbrk+0x64>)
 8001d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20008000 	.word	0x20008000
 8001d60:	00000400 	.word	0x00000400
 8001d64:	200003dc 	.word	0x200003dc
 8001d68:	200003f8 	.word	0x200003f8

08001d6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <SystemInit+0x20>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <SystemInit+0x20>)
 8001d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d92:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d94:	480d      	ldr	r0, [pc, #52]	; (8001dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001d96:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d98:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <LoopForever+0xe>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d9c:	e002      	b.n	8001da4 <LoopCopyDataInit>

08001d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da2:	3304      	adds	r3, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da8:	d3f9      	bcc.n	8001d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001daa:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dac:	4c0b      	ldr	r4, [pc, #44]	; (8001ddc <LoopForever+0x16>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db0:	e001      	b.n	8001db6 <LoopFillZerobss>

08001db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db4:	3204      	adds	r2, #4

08001db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db8:	d3fb      	bcc.n	8001db2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dba:	f7ff ffd7 	bl	8001d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dbe:	f003 fc9d 	bl	80056fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dc2:	f7ff f953 	bl	800106c <main>

08001dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001dc6:	e7fe      	b.n	8001dc6 <LoopForever>
  ldr   r0, =_estack
 8001dc8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001dd4:	08009be0 	.word	0x08009be0
  ldr r2, =_sbss
 8001dd8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ddc:	200003f4 	.word	0x200003f4

08001de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC1_2_IRQHandler>

08001de2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f000 f95b 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001df2:	2000      	movs	r0, #0
 8001df4:	f000 f80e 	bl	8001e14 <HAL_InitTick>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	71fb      	strb	r3, [r7, #7]
 8001e02:	e001      	b.n	8001e08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e04:	f7ff fd48 	bl	8001898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e08:	79fb      	ldrb	r3, [r7, #7]

}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e20:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_InitTick+0x68>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d022      	beq.n	8001e6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_InitTick+0x6c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_InitTick+0x68>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 f966 	bl	800210e <HAL_SYSTICK_Config>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10f      	bne.n	8001e68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b0f      	cmp	r3, #15
 8001e4c:	d809      	bhi.n	8001e62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	f04f 30ff 	mov.w	r0, #4294967295
 8001e56:	f000 f932 	bl	80020be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <HAL_InitTick+0x70>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e007      	b.n	8001e72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
 8001e66:	e004      	b.n	8001e72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	e001      	b.n	8001e72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000008 	.word	0x20000008
 8001e80:	20000000 	.word	0x20000000
 8001e84:	20000004 	.word	0x20000004

08001e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_IncTick+0x1c>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_IncTick+0x20>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a03      	ldr	r2, [pc, #12]	; (8001ea4 <HAL_IncTick+0x1c>)
 8001e98:	6013      	str	r3, [r2, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	200003e0 	.word	0x200003e0
 8001ea8:	20000008 	.word	0x20000008

08001eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <HAL_GetTick+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	200003e0 	.word	0x200003e0

08001ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff ffee 	bl	8001eac <HAL_GetTick>
 8001ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d004      	beq.n	8001ee8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_Delay+0x40>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee8:	bf00      	nop
 8001eea:	f7ff ffdf 	bl	8001eac <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d8f7      	bhi.n	8001eea <HAL_Delay+0x26>
  {
  }
}
 8001efa:	bf00      	nop
 8001efc:	bf00      	nop
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000008 	.word	0x20000008

08001f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f24:	4013      	ands	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3a:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	60d3      	str	r3, [r2, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <__NVIC_GetPriorityGrouping+0x18>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 0307 	and.w	r3, r3, #7
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db0b      	blt.n	8001f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	f003 021f 	and.w	r2, r3, #31
 8001f84:	4907      	ldr	r1, [pc, #28]	; (8001fa4 <__NVIC_EnableIRQ+0x38>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	; (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	; (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	; 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002074:	d301      	bcc.n	800207a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002076:	2301      	movs	r3, #1
 8002078:	e00f      	b.n	800209a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <SysTick_Config+0x40>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002082:	210f      	movs	r1, #15
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f7ff ff8e 	bl	8001fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <SysTick_Config+0x40>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <SysTick_Config+0x40>)
 8002094:	2207      	movs	r2, #7
 8002096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000e010 	.word	0xe000e010

080020a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff29 	bl	8001f08 <__NVIC_SetPriorityGrouping>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020cc:	f7ff ff40 	bl	8001f50 <__NVIC_GetPriorityGrouping>
 80020d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	6978      	ldr	r0, [r7, #20]
 80020d8:	f7ff ff90 	bl	8001ffc <NVIC_EncodePriority>
 80020dc:	4602      	mov	r2, r0
 80020de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff5f 	bl	8001fa8 <__NVIC_SetPriority>
}
 80020ea:	bf00      	nop
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff33 	bl	8001f6c <__NVIC_EnableIRQ>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ffa4 	bl	8002064 <SysTick_Config>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002136:	e15a      	b.n	80023ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2101      	movs	r1, #1
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	4013      	ands	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 814c 	beq.w	80023e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d005      	beq.n	8002168 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002164:	2b02      	cmp	r3, #2
 8002166:	d130      	bne.n	80021ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800219e:	2201      	movs	r2, #1
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	091b      	lsrs	r3, r3, #4
 80021b4:	f003 0201 	and.w	r2, r3, #1
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d017      	beq.n	8002206 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	2203      	movs	r2, #3
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d123      	bne.n	800225a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	08da      	lsrs	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3208      	adds	r2, #8
 800221a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	220f      	movs	r2, #15
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	08da      	lsrs	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	6939      	ldr	r1, [r7, #16]
 8002256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0203 	and.w	r2, r3, #3
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 80a6 	beq.w	80023e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229c:	4b5b      	ldr	r3, [pc, #364]	; (800240c <HAL_GPIO_Init+0x2e4>)
 800229e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a0:	4a5a      	ldr	r2, [pc, #360]	; (800240c <HAL_GPIO_Init+0x2e4>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6613      	str	r3, [r2, #96]	; 0x60
 80022a8:	4b58      	ldr	r3, [pc, #352]	; (800240c <HAL_GPIO_Init+0x2e4>)
 80022aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b4:	4a56      	ldr	r2, [pc, #344]	; (8002410 <HAL_GPIO_Init+0x2e8>)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	220f      	movs	r2, #15
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022de:	d01f      	beq.n	8002320 <HAL_GPIO_Init+0x1f8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a4c      	ldr	r2, [pc, #304]	; (8002414 <HAL_GPIO_Init+0x2ec>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d019      	beq.n	800231c <HAL_GPIO_Init+0x1f4>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a4b      	ldr	r2, [pc, #300]	; (8002418 <HAL_GPIO_Init+0x2f0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d013      	beq.n	8002318 <HAL_GPIO_Init+0x1f0>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a4a      	ldr	r2, [pc, #296]	; (800241c <HAL_GPIO_Init+0x2f4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00d      	beq.n	8002314 <HAL_GPIO_Init+0x1ec>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a49      	ldr	r2, [pc, #292]	; (8002420 <HAL_GPIO_Init+0x2f8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d007      	beq.n	8002310 <HAL_GPIO_Init+0x1e8>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a48      	ldr	r2, [pc, #288]	; (8002424 <HAL_GPIO_Init+0x2fc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d101      	bne.n	800230c <HAL_GPIO_Init+0x1e4>
 8002308:	2305      	movs	r3, #5
 800230a:	e00a      	b.n	8002322 <HAL_GPIO_Init+0x1fa>
 800230c:	2306      	movs	r3, #6
 800230e:	e008      	b.n	8002322 <HAL_GPIO_Init+0x1fa>
 8002310:	2304      	movs	r3, #4
 8002312:	e006      	b.n	8002322 <HAL_GPIO_Init+0x1fa>
 8002314:	2303      	movs	r3, #3
 8002316:	e004      	b.n	8002322 <HAL_GPIO_Init+0x1fa>
 8002318:	2302      	movs	r3, #2
 800231a:	e002      	b.n	8002322 <HAL_GPIO_Init+0x1fa>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <HAL_GPIO_Init+0x1fa>
 8002320:	2300      	movs	r3, #0
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	f002 0203 	and.w	r2, r2, #3
 8002328:	0092      	lsls	r2, r2, #2
 800232a:	4093      	lsls	r3, r2
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002332:	4937      	ldr	r1, [pc, #220]	; (8002410 <HAL_GPIO_Init+0x2e8>)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	3302      	adds	r3, #2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002340:	4b39      	ldr	r3, [pc, #228]	; (8002428 <HAL_GPIO_Init+0x300>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002364:	4a30      	ldr	r2, [pc, #192]	; (8002428 <HAL_GPIO_Init+0x300>)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800236a:	4b2f      	ldr	r3, [pc, #188]	; (8002428 <HAL_GPIO_Init+0x300>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800238e:	4a26      	ldr	r2, [pc, #152]	; (8002428 <HAL_GPIO_Init+0x300>)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002394:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_GPIO_Init+0x300>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023b8:	4a1b      	ldr	r2, [pc, #108]	; (8002428 <HAL_GPIO_Init+0x300>)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023be:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <HAL_GPIO_Init+0x300>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023e2:	4a11      	ldr	r2, [pc, #68]	; (8002428 <HAL_GPIO_Init+0x300>)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3301      	adds	r3, #1
 80023ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f47f ae9d 	bne.w	8002138 <HAL_GPIO_Init+0x10>
  }
}
 80023fe:	bf00      	nop
 8002400:	bf00      	nop
 8002402:	371c      	adds	r7, #28
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	40021000 	.word	0x40021000
 8002410:	40010000 	.word	0x40010000
 8002414:	48000400 	.word	0x48000400
 8002418:	48000800 	.word	0x48000800
 800241c:	48000c00 	.word	0x48000c00
 8002420:	48001000 	.word	0x48001000
 8002424:	48001400 	.word	0x48001400
 8002428:	40010400 	.word	0x40010400

0800242c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
 8002438:	4613      	mov	r3, r2
 800243a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800243c:	787b      	ldrb	r3, [r7, #1]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002448:	e002      	b.n	8002450 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800244a:	887a      	ldrh	r2, [r7, #2]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e081      	b.n	8002572 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff fa2c 	bl	80018e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2224      	movs	r2, #36	; 0x24
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d107      	bne.n	80024d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	e006      	b.n	80024e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d104      	bne.n	80024f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002508:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002518:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69d9      	ldr	r1, [r3, #28]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1a      	ldr	r2, [r3, #32]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	4608      	mov	r0, r1
 8002586:	4611      	mov	r1, r2
 8002588:	461a      	mov	r2, r3
 800258a:	4603      	mov	r3, r0
 800258c:	817b      	strh	r3, [r7, #10]
 800258e:	460b      	mov	r3, r1
 8002590:	813b      	strh	r3, [r7, #8]
 8002592:	4613      	mov	r3, r2
 8002594:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b20      	cmp	r3, #32
 80025a0:	f040 80f9 	bne.w	8002796 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_I2C_Mem_Write+0x34>
 80025aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0ed      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_I2C_Mem_Write+0x4e>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e0e6      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025d2:	f7ff fc6b 	bl	8001eac <HAL_GetTick>
 80025d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2319      	movs	r3, #25
 80025de:	2201      	movs	r2, #1
 80025e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fac3 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0d1      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2221      	movs	r2, #33	; 0x21
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2240      	movs	r2, #64	; 0x40
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a3a      	ldr	r2, [r7, #32]
 800260e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002614:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800261c:	88f8      	ldrh	r0, [r7, #6]
 800261e:	893a      	ldrh	r2, [r7, #8]
 8002620:	8979      	ldrh	r1, [r7, #10]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	4603      	mov	r3, r0
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f9d3 	bl	80029d8 <I2C_RequestMemoryWrite>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0a9      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	2bff      	cmp	r3, #255	; 0xff
 800264c:	d90e      	bls.n	800266c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	22ff      	movs	r2, #255	; 0xff
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	b2da      	uxtb	r2, r3
 800265a:	8979      	ldrh	r1, [r7, #10]
 800265c:	2300      	movs	r3, #0
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fc2b 	bl	8002ec0 <I2C_TransferConfig>
 800266a:	e00f      	b.n	800268c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267a:	b2da      	uxtb	r2, r3
 800267c:	8979      	ldrh	r1, [r7, #10]
 800267e:	2300      	movs	r3, #0
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fc1a 	bl	8002ec0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 faad 	bl	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e07b      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d034      	beq.n	8002744 <HAL_I2C_Mem_Write+0x1c8>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d130      	bne.n	8002744 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	2200      	movs	r2, #0
 80026ea:	2180      	movs	r1, #128	; 0x80
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 fa3f 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e04d      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	2bff      	cmp	r3, #255	; 0xff
 8002704:	d90e      	bls.n	8002724 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	22ff      	movs	r2, #255	; 0xff
 800270a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002710:	b2da      	uxtb	r2, r3
 8002712:	8979      	ldrh	r1, [r7, #10]
 8002714:	2300      	movs	r3, #0
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fbcf 	bl	8002ec0 <I2C_TransferConfig>
 8002722:	e00f      	b.n	8002744 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	b2da      	uxtb	r2, r3
 8002734:	8979      	ldrh	r1, [r7, #10]
 8002736:	2300      	movs	r3, #0
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 fbbe 	bl	8002ec0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d19e      	bne.n	800268c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fa8c 	bl	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e01a      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2220      	movs	r2, #32
 8002768:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_I2C_Mem_Write+0x224>)
 8002776:	400b      	ands	r3, r1
 8002778:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002796:	2302      	movs	r3, #2
  }
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	fe00e800 	.word	0xfe00e800

080027a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	460b      	mov	r3, r1
 80027b8:	813b      	strh	r3, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	f040 80fd 	bne.w	80029c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_I2C_Mem_Read+0x34>
 80027d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d105      	bne.n	80027e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0f1      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_Mem_Read+0x4e>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e0ea      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027fa:	f7ff fb57 	bl	8001eac <HAL_GetTick>
 80027fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2319      	movs	r3, #25
 8002806:	2201      	movs	r2, #1
 8002808:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f9af 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0d5      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2222      	movs	r2, #34	; 0x22
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2240      	movs	r2, #64	; 0x40
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a3a      	ldr	r2, [r7, #32]
 8002836:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800283c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002844:	88f8      	ldrh	r0, [r7, #6]
 8002846:	893a      	ldrh	r2, [r7, #8]
 8002848:	8979      	ldrh	r1, [r7, #10]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	9301      	str	r3, [sp, #4]
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	4603      	mov	r3, r0
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f913 	bl	8002a80 <I2C_RequestMemoryRead>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0ad      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	2bff      	cmp	r3, #255	; 0xff
 8002874:	d90e      	bls.n	8002894 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	22ff      	movs	r2, #255	; 0xff
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002880:	b2da      	uxtb	r2, r3
 8002882:	8979      	ldrh	r1, [r7, #10]
 8002884:	4b52      	ldr	r3, [pc, #328]	; (80029d0 <HAL_I2C_Mem_Read+0x22c>)
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 fb17 	bl	8002ec0 <I2C_TransferConfig>
 8002892:	e00f      	b.n	80028b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	8979      	ldrh	r1, [r7, #10]
 80028a6:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <HAL_I2C_Mem_Read+0x22c>)
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fb06 	bl	8002ec0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	2200      	movs	r2, #0
 80028bc:	2104      	movs	r1, #4
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f956 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e07c      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d034      	beq.n	8002974 <HAL_I2C_Mem_Read+0x1d0>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290e:	2b00      	cmp	r3, #0
 8002910:	d130      	bne.n	8002974 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	2200      	movs	r2, #0
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f927 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e04d      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	2bff      	cmp	r3, #255	; 0xff
 8002934:	d90e      	bls.n	8002954 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	22ff      	movs	r2, #255	; 0xff
 800293a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002940:	b2da      	uxtb	r2, r3
 8002942:	8979      	ldrh	r1, [r7, #10]
 8002944:	2300      	movs	r3, #0
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fab7 	bl	8002ec0 <I2C_TransferConfig>
 8002952:	e00f      	b.n	8002974 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002962:	b2da      	uxtb	r2, r3
 8002964:	8979      	ldrh	r1, [r7, #10]
 8002966:	2300      	movs	r3, #0
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 faa6 	bl	8002ec0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d19a      	bne.n	80028b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f974 	bl	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e01a      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2220      	movs	r2, #32
 8002998:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_I2C_Mem_Read+0x230>)
 80029a6:	400b      	ands	r3, r1
 80029a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
  }
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	80002400 	.word	0x80002400
 80029d4:	fe00e800 	.word	0xfe00e800

080029d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	4608      	mov	r0, r1
 80029e2:	4611      	mov	r1, r2
 80029e4:	461a      	mov	r2, r3
 80029e6:	4603      	mov	r3, r0
 80029e8:	817b      	strh	r3, [r7, #10]
 80029ea:	460b      	mov	r3, r1
 80029ec:	813b      	strh	r3, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	8979      	ldrh	r1, [r7, #10]
 80029f8:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <I2C_RequestMemoryWrite+0xa4>)
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 fa5d 	bl	8002ec0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	69b9      	ldr	r1, [r7, #24]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f8f0 	bl	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e02c      	b.n	8002a74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a20:	893b      	ldrh	r3, [r7, #8]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	629a      	str	r2, [r3, #40]	; 0x28
 8002a2a:	e015      	b.n	8002a58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a2c:	893b      	ldrh	r3, [r7, #8]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	69b9      	ldr	r1, [r7, #24]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f8d6 	bl	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e012      	b.n	8002a74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a4e:	893b      	ldrh	r3, [r7, #8]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2180      	movs	r1, #128	; 0x80
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f884 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	80002000 	.word	0x80002000

08002a80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	4608      	mov	r0, r1
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	817b      	strh	r3, [r7, #10]
 8002a92:	460b      	mov	r3, r1
 8002a94:	813b      	strh	r3, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	8979      	ldrh	r1, [r7, #10]
 8002aa0:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <I2C_RequestMemoryRead+0xa4>)
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fa0a 	bl	8002ec0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	69b9      	ldr	r1, [r7, #24]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f89d 	bl	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e02c      	b.n	8002b1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d105      	bne.n	8002ad2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac6:	893b      	ldrh	r3, [r7, #8]
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28
 8002ad0:	e015      	b.n	8002afe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ad2:	893b      	ldrh	r3, [r7, #8]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	69b9      	ldr	r1, [r7, #24]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f883 	bl	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e012      	b.n	8002b1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002af4:	893b      	ldrh	r3, [r7, #8]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2200      	movs	r2, #0
 8002b06:	2140      	movs	r1, #64	; 0x40
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f831 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	80002000 	.word	0x80002000

08002b28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d103      	bne.n	8002b46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2200      	movs	r2, #0
 8002b44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d007      	beq.n	8002b64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	619a      	str	r2, [r3, #24]
  }
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b80:	e022      	b.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d01e      	beq.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8a:	f7ff f98f 	bl	8001eac <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d302      	bcc.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d113      	bne.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba4:	f043 0220 	orr.w	r2, r3, #32
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e00f      	b.n	8002be8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d0cd      	beq.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bfc:	e02c      	b.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f870 	bl	8002ce8 <I2C_IsErrorOccurred>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e02a      	b.n	8002c68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d01e      	beq.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1a:	f7ff f947 	bl	8001eac <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d302      	bcc.n	8002c30 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d113      	bne.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c34:	f043 0220 	orr.w	r2, r3, #32
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e007      	b.n	8002c68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d1cb      	bne.n	8002bfe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c7c:	e028      	b.n	8002cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f830 	bl	8002ce8 <I2C_IsErrorOccurred>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e026      	b.n	8002ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c92:	f7ff f90b 	bl	8001eac <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d113      	bne.n	8002cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	f043 0220 	orr.w	r2, r3, #32
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e007      	b.n	8002ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d1cf      	bne.n	8002c7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d075      	beq.n	8002e00 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2210      	movs	r2, #16
 8002d1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d1c:	e056      	b.n	8002dcc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d052      	beq.n	8002dcc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d26:	f7ff f8c1 	bl	8001eac <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d302      	bcc.n	8002d3c <I2C_IsErrorOccurred+0x54>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d147      	bne.n	8002dcc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d5e:	d12e      	bne.n	8002dbe <I2C_IsErrorOccurred+0xd6>
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d66:	d02a      	beq.n	8002dbe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d027      	beq.n	8002dbe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d7c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d7e:	f7ff f895 	bl	8001eac <HAL_GetTick>
 8002d82:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d84:	e01b      	b.n	8002dbe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d86:	f7ff f891 	bl	8001eac <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b19      	cmp	r3, #25
 8002d92:	d914      	bls.n	8002dbe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d98:	f043 0220 	orr.w	r2, r3, #32
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d1dc      	bne.n	8002d86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d003      	beq.n	8002de2 <I2C_IsErrorOccurred+0xfa>
 8002dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d09d      	beq.n	8002d1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d103      	bne.n	8002df2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2220      	movs	r2, #32
 8002df0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00b      	beq.n	8002e4c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	f043 0308 	orr.w	r3, r3, #8
 8002e3a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d01c      	beq.n	8002eb0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7ff fe56 	bl	8002b28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <I2C_IsErrorOccurred+0x1d4>)
 8002e88:	400b      	ands	r3, r1
 8002e8a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3728      	adds	r7, #40	; 0x28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	fe00e800 	.word	0xfe00e800

08002ec0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	817b      	strh	r3, [r7, #10]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ed2:	897b      	ldrh	r3, [r7, #10]
 8002ed4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ed8:	7a7b      	ldrb	r3, [r7, #9]
 8002eda:	041b      	lsls	r3, r3, #16
 8002edc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ee0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002eee:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	0d5b      	lsrs	r3, r3, #21
 8002efa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <I2C_TransferConfig+0x60>)
 8002f00:	430b      	orrs	r3, r1
 8002f02:	43db      	mvns	r3, r3
 8002f04:	ea02 0103 	and.w	r1, r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	03ff63ff 	.word	0x03ff63ff

08002f24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d138      	bne.n	8002fac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e032      	b.n	8002fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2224      	movs	r2, #36	; 0x24
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0201 	bic.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6819      	ldr	r1, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e000      	b.n	8002fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fac:	2302      	movs	r3, #2
  }
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d139      	bne.n	8003044 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e033      	b.n	8003046 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2224      	movs	r2, #36	; 0x24
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800300c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4313      	orrs	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	e000      	b.n	8003046 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003044:	2302      	movs	r3, #2
  }
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
	...

08003054 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d141      	bne.n	80030e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003062:	4b4b      	ldr	r3, [pc, #300]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306e:	d131      	bne.n	80030d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003070:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003076:	4a46      	ldr	r2, [pc, #280]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800307c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003080:	4b43      	ldr	r3, [pc, #268]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003088:	4a41      	ldr	r2, [pc, #260]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800308e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003090:	4b40      	ldr	r3, [pc, #256]	; (8003194 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2232      	movs	r2, #50	; 0x32
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	4a3f      	ldr	r2, [pc, #252]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	0c9b      	lsrs	r3, r3, #18
 80030a2:	3301      	adds	r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030a6:	e002      	b.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ae:	4b38      	ldr	r3, [pc, #224]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ba:	d102      	bne.n	80030c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f2      	bne.n	80030a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030c2:	4b33      	ldr	r3, [pc, #204]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ce:	d158      	bne.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e057      	b.n	8003184 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030d4:	4b2e      	ldr	r3, [pc, #184]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030da:	4a2d      	ldr	r2, [pc, #180]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030e4:	e04d      	b.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ec:	d141      	bne.n	8003172 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030ee:	4b28      	ldr	r3, [pc, #160]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fa:	d131      	bne.n	8003160 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030fc:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003102:	4a23      	ldr	r2, [pc, #140]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003108:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800310c:	4b20      	ldr	r3, [pc, #128]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003114:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800311a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2232      	movs	r2, #50	; 0x32
 8003122:	fb02 f303 	mul.w	r3, r2, r3
 8003126:	4a1c      	ldr	r2, [pc, #112]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	0c9b      	lsrs	r3, r3, #18
 800312e:	3301      	adds	r3, #1
 8003130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003132:	e002      	b.n	800313a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3b01      	subs	r3, #1
 8003138:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003146:	d102      	bne.n	800314e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f2      	bne.n	8003134 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315a:	d112      	bne.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e011      	b.n	8003184 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003166:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003170:	e007      	b.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003172:	4b07      	ldr	r3, [pc, #28]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800317a:	4a05      	ldr	r2, [pc, #20]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003180:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	40007000 	.word	0x40007000
 8003194:	20000000 	.word	0x20000000
 8003198:	431bde83 	.word	0x431bde83

0800319c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e306      	b.n	80037bc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d075      	beq.n	80032a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ba:	4b97      	ldr	r3, [pc, #604]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031c4:	4b94      	ldr	r3, [pc, #592]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2b0c      	cmp	r3, #12
 80031d2:	d102      	bne.n	80031da <HAL_RCC_OscConfig+0x3e>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d002      	beq.n	80031e0 <HAL_RCC_OscConfig+0x44>
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d10b      	bne.n	80031f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	4b8d      	ldr	r3, [pc, #564]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d05b      	beq.n	80032a4 <HAL_RCC_OscConfig+0x108>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d157      	bne.n	80032a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e2e1      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003200:	d106      	bne.n	8003210 <HAL_RCC_OscConfig+0x74>
 8003202:	4b85      	ldr	r3, [pc, #532]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a84      	ldr	r2, [pc, #528]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e01d      	b.n	800324c <HAL_RCC_OscConfig+0xb0>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x98>
 800321a:	4b7f      	ldr	r3, [pc, #508]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a7e      	ldr	r2, [pc, #504]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 8003220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b7c      	ldr	r3, [pc, #496]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a7b      	ldr	r2, [pc, #492]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0xb0>
 8003234:	4b78      	ldr	r3, [pc, #480]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a77      	ldr	r2, [pc, #476]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 800323a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	4b75      	ldr	r3, [pc, #468]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a74      	ldr	r2, [pc, #464]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 8003246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d013      	beq.n	800327c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe fe2a 	bl	8001eac <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800325c:	f7fe fe26 	bl	8001eac <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	; 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e2a6      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800326e:	4b6a      	ldr	r3, [pc, #424]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0xc0>
 800327a:	e014      	b.n	80032a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fe fe16 	bl	8001eac <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003284:	f7fe fe12 	bl	8001eac <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	; 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e292      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003296:	4b60      	ldr	r3, [pc, #384]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0xe8>
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d075      	beq.n	800339e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032b2:	4b59      	ldr	r3, [pc, #356]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032bc:	4b56      	ldr	r3, [pc, #344]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	2b0c      	cmp	r3, #12
 80032ca:	d102      	bne.n	80032d2 <HAL_RCC_OscConfig+0x136>
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d002      	beq.n	80032d8 <HAL_RCC_OscConfig+0x13c>
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d11f      	bne.n	8003318 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032d8:	4b4f      	ldr	r3, [pc, #316]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_OscConfig+0x154>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e265      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f0:	4b49      	ldr	r3, [pc, #292]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	061b      	lsls	r3, r3, #24
 80032fe:	4946      	ldr	r1, [pc, #280]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003304:	4b45      	ldr	r3, [pc, #276]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe fd83 	bl	8001e14 <HAL_InitTick>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d043      	beq.n	800339c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e251      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d023      	beq.n	8003368 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003320:	4b3d      	ldr	r3, [pc, #244]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a3c      	ldr	r2, [pc, #240]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 8003326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe fdbe 	bl	8001eac <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003334:	f7fe fdba 	bl	8001eac <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e23a      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003346:	4b34      	ldr	r3, [pc, #208]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003352:	4b31      	ldr	r3, [pc, #196]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	061b      	lsls	r3, r3, #24
 8003360:	492d      	ldr	r1, [pc, #180]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
 8003366:	e01a      	b.n	800339e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003368:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2a      	ldr	r2, [pc, #168]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 800336e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe fd9a 	bl	8001eac <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337c:	f7fe fd96 	bl	8001eac <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e216      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800338e:	4b22      	ldr	r3, [pc, #136]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x1e0>
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800339c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d041      	beq.n	800342e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d01c      	beq.n	80033ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b2:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 80033b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b8:	4a17      	ldr	r2, [pc, #92]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c2:	f7fe fd73 	bl	8001eac <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ca:	f7fe fd6f 	bl	8001eac <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e1ef      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033dc:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 80033de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0ef      	beq.n	80033ca <HAL_RCC_OscConfig+0x22e>
 80033ea:	e020      	b.n	800342e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 80033ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f2:	4a09      	ldr	r2, [pc, #36]	; (8003418 <HAL_RCC_OscConfig+0x27c>)
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fe fd56 	bl	8001eac <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003402:	e00d      	b.n	8003420 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003404:	f7fe fd52 	bl	8001eac <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d906      	bls.n	8003420 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e1d2      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003420:	4b8c      	ldr	r3, [pc, #560]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 8003422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1ea      	bne.n	8003404 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80a6 	beq.w	8003588 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343c:	2300      	movs	r3, #0
 800343e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003440:	4b84      	ldr	r3, [pc, #528]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_OscConfig+0x2b4>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x2b6>
 8003450:	2300      	movs	r3, #0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003456:	4b7f      	ldr	r3, [pc, #508]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	4a7e      	ldr	r2, [pc, #504]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 800345c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003460:	6593      	str	r3, [r2, #88]	; 0x58
 8003462:	4b7c      	ldr	r3, [pc, #496]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 8003464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800346e:	2301      	movs	r3, #1
 8003470:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003472:	4b79      	ldr	r3, [pc, #484]	; (8003658 <HAL_RCC_OscConfig+0x4bc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347a:	2b00      	cmp	r3, #0
 800347c:	d118      	bne.n	80034b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800347e:	4b76      	ldr	r3, [pc, #472]	; (8003658 <HAL_RCC_OscConfig+0x4bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a75      	ldr	r2, [pc, #468]	; (8003658 <HAL_RCC_OscConfig+0x4bc>)
 8003484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348a:	f7fe fd0f 	bl	8001eac <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003492:	f7fe fd0b 	bl	8001eac <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e18b      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a4:	4b6c      	ldr	r3, [pc, #432]	; (8003658 <HAL_RCC_OscConfig+0x4bc>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f0      	beq.n	8003492 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d108      	bne.n	80034ca <HAL_RCC_OscConfig+0x32e>
 80034b8:	4b66      	ldr	r3, [pc, #408]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034be:	4a65      	ldr	r2, [pc, #404]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034c8:	e024      	b.n	8003514 <HAL_RCC_OscConfig+0x378>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	d110      	bne.n	80034f4 <HAL_RCC_OscConfig+0x358>
 80034d2:	4b60      	ldr	r3, [pc, #384]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	4a5e      	ldr	r2, [pc, #376]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 80034da:	f043 0304 	orr.w	r3, r3, #4
 80034de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034e2:	4b5c      	ldr	r3, [pc, #368]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	4a5a      	ldr	r2, [pc, #360]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034f2:	e00f      	b.n	8003514 <HAL_RCC_OscConfig+0x378>
 80034f4:	4b57      	ldr	r3, [pc, #348]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fa:	4a56      	ldr	r2, [pc, #344]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003504:	4b53      	ldr	r3, [pc, #332]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	4a52      	ldr	r2, [pc, #328]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 800350c:	f023 0304 	bic.w	r3, r3, #4
 8003510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d016      	beq.n	800354a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fe fcc6 	bl	8001eac <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003522:	e00a      	b.n	800353a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7fe fcc2 	bl	8001eac <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e140      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800353a:	4b46      	ldr	r3, [pc, #280]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0ed      	beq.n	8003524 <HAL_RCC_OscConfig+0x388>
 8003548:	e015      	b.n	8003576 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354a:	f7fe fcaf 	bl	8001eac <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003550:	e00a      	b.n	8003568 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f7fe fcab 	bl	8001eac <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003560:	4293      	cmp	r3, r2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e129      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003568:	4b3a      	ldr	r3, [pc, #232]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1ed      	bne.n	8003552 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003576:	7ffb      	ldrb	r3, [r7, #31]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d105      	bne.n	8003588 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357c:	4b35      	ldr	r3, [pc, #212]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	4a34      	ldr	r2, [pc, #208]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 8003582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003586:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d03c      	beq.n	800360e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01c      	beq.n	80035d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800359c:	4b2d      	ldr	r3, [pc, #180]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 800359e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035a2:	4a2c      	ldr	r2, [pc, #176]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ac:	f7fe fc7e 	bl	8001eac <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035b4:	f7fe fc7a 	bl	8001eac <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e0fa      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035c6:	4b23      	ldr	r3, [pc, #140]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 80035c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ef      	beq.n	80035b4 <HAL_RCC_OscConfig+0x418>
 80035d4:	e01b      	b.n	800360e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035d6:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 80035d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035dc:	4a1d      	ldr	r2, [pc, #116]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e6:	f7fe fc61 	bl	8001eac <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035ee:	f7fe fc5d 	bl	8001eac <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e0dd      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003600:	4b14      	ldr	r3, [pc, #80]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 8003602:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ef      	bne.n	80035ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80d1 	beq.w	80037ba <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003618:	4b0e      	ldr	r3, [pc, #56]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 030c 	and.w	r3, r3, #12
 8003620:	2b0c      	cmp	r3, #12
 8003622:	f000 808b 	beq.w	800373c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d15e      	bne.n	80036ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a08      	ldr	r2, [pc, #32]	; (8003654 <HAL_RCC_OscConfig+0x4b8>)
 8003634:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363a:	f7fe fc37 	bl	8001eac <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003640:	e00c      	b.n	800365c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003642:	f7fe fc33 	bl	8001eac <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d905      	bls.n	800365c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e0b3      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
 8003654:	40021000 	.word	0x40021000
 8003658:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800365c:	4b59      	ldr	r3, [pc, #356]	; (80037c4 <HAL_RCC_OscConfig+0x628>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ec      	bne.n	8003642 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003668:	4b56      	ldr	r3, [pc, #344]	; (80037c4 <HAL_RCC_OscConfig+0x628>)
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	4b56      	ldr	r3, [pc, #344]	; (80037c8 <HAL_RCC_OscConfig+0x62c>)
 800366e:	4013      	ands	r3, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6a11      	ldr	r1, [r2, #32]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003678:	3a01      	subs	r2, #1
 800367a:	0112      	lsls	r2, r2, #4
 800367c:	4311      	orrs	r1, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003682:	0212      	lsls	r2, r2, #8
 8003684:	4311      	orrs	r1, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800368a:	0852      	lsrs	r2, r2, #1
 800368c:	3a01      	subs	r2, #1
 800368e:	0552      	lsls	r2, r2, #21
 8003690:	4311      	orrs	r1, r2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003696:	0852      	lsrs	r2, r2, #1
 8003698:	3a01      	subs	r2, #1
 800369a:	0652      	lsls	r2, r2, #25
 800369c:	4311      	orrs	r1, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036a2:	06d2      	lsls	r2, r2, #27
 80036a4:	430a      	orrs	r2, r1
 80036a6:	4947      	ldr	r1, [pc, #284]	; (80037c4 <HAL_RCC_OscConfig+0x628>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ac:	4b45      	ldr	r3, [pc, #276]	; (80037c4 <HAL_RCC_OscConfig+0x628>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a44      	ldr	r2, [pc, #272]	; (80037c4 <HAL_RCC_OscConfig+0x628>)
 80036b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036b8:	4b42      	ldr	r3, [pc, #264]	; (80037c4 <HAL_RCC_OscConfig+0x628>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a41      	ldr	r2, [pc, #260]	; (80037c4 <HAL_RCC_OscConfig+0x628>)
 80036be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fe fbf2 	bl	8001eac <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fe fbee 	bl	8001eac <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e06e      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036de:	4b39      	ldr	r3, [pc, #228]	; (80037c4 <HAL_RCC_OscConfig+0x628>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0x530>
 80036ea:	e066      	b.n	80037ba <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ec:	4b35      	ldr	r3, [pc, #212]	; (80037c4 <HAL_RCC_OscConfig+0x628>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a34      	ldr	r2, [pc, #208]	; (80037c4 <HAL_RCC_OscConfig+0x628>)
 80036f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036f8:	4b32      	ldr	r3, [pc, #200]	; (80037c4 <HAL_RCC_OscConfig+0x628>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4a31      	ldr	r2, [pc, #196]	; (80037c4 <HAL_RCC_OscConfig+0x628>)
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003704:	4b2f      	ldr	r3, [pc, #188]	; (80037c4 <HAL_RCC_OscConfig+0x628>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a2e      	ldr	r2, [pc, #184]	; (80037c4 <HAL_RCC_OscConfig+0x628>)
 800370a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800370e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003712:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fe fbca 	bl	8001eac <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371c:	f7fe fbc6 	bl	8001eac <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e046      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800372e:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <HAL_RCC_OscConfig+0x628>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x580>
 800373a:	e03e      	b.n	80037ba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e039      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003748:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <HAL_RCC_OscConfig+0x628>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 0203 	and.w	r2, r3, #3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	429a      	cmp	r2, r3
 800375a:	d12c      	bne.n	80037b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	3b01      	subs	r3, #1
 8003768:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	429a      	cmp	r2, r3
 800376c:	d123      	bne.n	80037b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d11b      	bne.n	80037b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d113      	bne.n	80037b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	085b      	lsrs	r3, r3, #1
 800379a:	3b01      	subs	r3, #1
 800379c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800379e:	429a      	cmp	r2, r3
 80037a0:	d109      	bne.n	80037b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	3b01      	subs	r3, #1
 80037b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d001      	beq.n	80037ba <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3720      	adds	r7, #32
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000
 80037c8:	019f800c 	.word	0x019f800c

080037cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e11e      	b.n	8003a22 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037e4:	4b91      	ldr	r3, [pc, #580]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d910      	bls.n	8003814 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b8e      	ldr	r3, [pc, #568]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 020f 	bic.w	r2, r3, #15
 80037fa:	498c      	ldr	r1, [pc, #560]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	4313      	orrs	r3, r2
 8003800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	4b8a      	ldr	r3, [pc, #552]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d001      	beq.n	8003814 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e106      	b.n	8003a22 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d073      	beq.n	8003908 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b03      	cmp	r3, #3
 8003826:	d129      	bne.n	800387c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003828:	4b81      	ldr	r3, [pc, #516]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0f4      	b.n	8003a22 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003838:	f000 f99e 	bl	8003b78 <RCC_GetSysClockFreqFromPLLSource>
 800383c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4a7c      	ldr	r2, [pc, #496]	; (8003a34 <HAL_RCC_ClockConfig+0x268>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d93f      	bls.n	80038c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003846:	4b7a      	ldr	r3, [pc, #488]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800385a:	2b00      	cmp	r3, #0
 800385c:	d033      	beq.n	80038c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003862:	2b00      	cmp	r3, #0
 8003864:	d12f      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003866:	4b72      	ldr	r3, [pc, #456]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800386e:	4a70      	ldr	r2, [pc, #448]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 8003870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003874:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003876:	2380      	movs	r3, #128	; 0x80
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	e024      	b.n	80038c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d107      	bne.n	8003894 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003884:	4b6a      	ldr	r3, [pc, #424]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d109      	bne.n	80038a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0c6      	b.n	8003a22 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003894:	4b66      	ldr	r3, [pc, #408]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0be      	b.n	8003a22 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80038a4:	f000 f8ce 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 80038a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4a61      	ldr	r2, [pc, #388]	; (8003a34 <HAL_RCC_ClockConfig+0x268>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d909      	bls.n	80038c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038b2:	4b5f      	ldr	r3, [pc, #380]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ba:	4a5d      	ldr	r2, [pc, #372]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 80038bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038c6:	4b5a      	ldr	r3, [pc, #360]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f023 0203 	bic.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4957      	ldr	r1, [pc, #348]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d8:	f7fe fae8 	bl	8001eac <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e0:	f7fe fae4 	bl	8001eac <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e095      	b.n	8003a22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	4b4e      	ldr	r3, [pc, #312]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 020c 	and.w	r2, r3, #12
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	429a      	cmp	r2, r3
 8003906:	d1eb      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d023      	beq.n	800395c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003920:	4b43      	ldr	r3, [pc, #268]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4a42      	ldr	r2, [pc, #264]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 8003926:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800392a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d007      	beq.n	8003948 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003938:	4b3d      	ldr	r3, [pc, #244]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003940:	4a3b      	ldr	r2, [pc, #236]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 8003942:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003946:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003948:	4b39      	ldr	r3, [pc, #228]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	4936      	ldr	r1, [pc, #216]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
 800395a:	e008      	b.n	800396e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b80      	cmp	r3, #128	; 0x80
 8003960:	d105      	bne.n	800396e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003962:	4b33      	ldr	r3, [pc, #204]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	4a32      	ldr	r2, [pc, #200]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 8003968:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800396c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800396e:	4b2f      	ldr	r3, [pc, #188]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d21d      	bcs.n	80039b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397c:	4b2b      	ldr	r3, [pc, #172]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 020f 	bic.w	r2, r3, #15
 8003984:	4929      	ldr	r1, [pc, #164]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	4313      	orrs	r3, r2
 800398a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800398c:	f7fe fa8e 	bl	8001eac <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	e00a      	b.n	80039aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003994:	f7fe fa8a 	bl	8001eac <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e03b      	b.n	8003a22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d1ed      	bne.n	8003994 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c4:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4917      	ldr	r1, [pc, #92]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e2:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	490f      	ldr	r1, [pc, #60]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039f6:	f000 f825 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 80039fa:	4602      	mov	r2, r0
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <HAL_RCC_ClockConfig+0x264>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	490c      	ldr	r1, [pc, #48]	; (8003a38 <HAL_RCC_ClockConfig+0x26c>)
 8003a08:	5ccb      	ldrb	r3, [r1, r3]
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a12:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <HAL_RCC_ClockConfig+0x270>)
 8003a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a16:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <HAL_RCC_ClockConfig+0x274>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe f9fa 	bl	8001e14 <HAL_InitTick>
 8003a20:	4603      	mov	r3, r0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40022000 	.word	0x40022000
 8003a30:	40021000 	.word	0x40021000
 8003a34:	04c4b400 	.word	0x04c4b400
 8003a38:	080095d8 	.word	0x080095d8
 8003a3c:	20000000 	.word	0x20000000
 8003a40:	20000004 	.word	0x20000004

08003a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a4a:	4b2c      	ldr	r3, [pc, #176]	; (8003afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d102      	bne.n	8003a5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a56:	4b2a      	ldr	r3, [pc, #168]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	e047      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a5c:	4b27      	ldr	r3, [pc, #156]	; (8003afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 030c 	and.w	r3, r3, #12
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d102      	bne.n	8003a6e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a68:	4b26      	ldr	r3, [pc, #152]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	e03e      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a6e:	4b23      	ldr	r3, [pc, #140]	; (8003afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	2b0c      	cmp	r3, #12
 8003a78:	d136      	bne.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a7a:	4b20      	ldr	r3, [pc, #128]	; (8003afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a84:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	3301      	adds	r3, #1
 8003a90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d10c      	bne.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a98:	4a1a      	ldr	r2, [pc, #104]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	4a16      	ldr	r2, [pc, #88]	; (8003afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa2:	68d2      	ldr	r2, [r2, #12]
 8003aa4:	0a12      	lsrs	r2, r2, #8
 8003aa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003aaa:	fb02 f303 	mul.w	r3, r2, r3
 8003aae:	617b      	str	r3, [r7, #20]
      break;
 8003ab0:	e00c      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ab2:	4a13      	ldr	r2, [pc, #76]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aba:	4a10      	ldr	r2, [pc, #64]	; (8003afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003abc:	68d2      	ldr	r2, [r2, #12]
 8003abe:	0a12      	lsrs	r2, r2, #8
 8003ac0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ac4:	fb02 f303 	mul.w	r3, r2, r3
 8003ac8:	617b      	str	r3, [r7, #20]
      break;
 8003aca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	0e5b      	lsrs	r3, r3, #25
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	e001      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003aec:	693b      	ldr	r3, [r7, #16]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	00f42400 	.word	0x00f42400
 8003b04:	007a1200 	.word	0x007a1200

08003b08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000000 	.word	0x20000000

08003b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b24:	f7ff fff0 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	4904      	ldr	r1, [pc, #16]	; (8003b48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b36:	5ccb      	ldrb	r3, [r1, r3]
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	080095e8 	.word	0x080095e8

08003b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b50:	f7ff ffda 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	0adb      	lsrs	r3, r3, #11
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4904      	ldr	r1, [pc, #16]	; (8003b74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40021000 	.word	0x40021000
 8003b74:	080095e8 	.word	0x080095e8

08003b78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b7e:	4b1e      	ldr	r3, [pc, #120]	; (8003bf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	3301      	adds	r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d10c      	bne.n	8003bb6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b9c:	4a17      	ldr	r2, [pc, #92]	; (8003bfc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ba6:	68d2      	ldr	r2, [r2, #12]
 8003ba8:	0a12      	lsrs	r2, r2, #8
 8003baa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bae:	fb02 f303 	mul.w	r3, r2, r3
 8003bb2:	617b      	str	r3, [r7, #20]
    break;
 8003bb4:	e00c      	b.n	8003bd0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bb6:	4a12      	ldr	r2, [pc, #72]	; (8003c00 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbe:	4a0e      	ldr	r2, [pc, #56]	; (8003bf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bc0:	68d2      	ldr	r2, [r2, #12]
 8003bc2:	0a12      	lsrs	r2, r2, #8
 8003bc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bc8:	fb02 f303 	mul.w	r3, r2, r3
 8003bcc:	617b      	str	r3, [r7, #20]
    break;
 8003bce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	0e5b      	lsrs	r3, r3, #25
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	3301      	adds	r3, #1
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003bea:	687b      	ldr	r3, [r7, #4]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	371c      	adds	r7, #28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	007a1200 	.word	0x007a1200
 8003c00:	00f42400 	.word	0x00f42400

08003c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c10:	2300      	movs	r3, #0
 8003c12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8098 	beq.w	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c22:	2300      	movs	r3, #0
 8003c24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c26:	4b43      	ldr	r3, [pc, #268]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10d      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c32:	4b40      	ldr	r3, [pc, #256]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	4a3f      	ldr	r2, [pc, #252]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c3e:	4b3d      	ldr	r3, [pc, #244]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c4e:	4b3a      	ldr	r3, [pc, #232]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a39      	ldr	r2, [pc, #228]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c5a:	f7fe f927 	bl	8001eac <HAL_GetTick>
 8003c5e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c60:	e009      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c62:	f7fe f923 	bl	8001eac <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d902      	bls.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	74fb      	strb	r3, [r7, #19]
        break;
 8003c74:	e005      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c76:	4b30      	ldr	r3, [pc, #192]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0ef      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c82:	7cfb      	ldrb	r3, [r7, #19]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d159      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c88:	4b2a      	ldr	r3, [pc, #168]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c92:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01e      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d019      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ca4:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cb0:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb6:	4a1f      	ldr	r2, [pc, #124]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cc0:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cd0:	4a18      	ldr	r2, [pc, #96]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d016      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce2:	f7fe f8e3 	bl	8001eac <HAL_GetTick>
 8003ce6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce8:	e00b      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cea:	f7fe f8df 	bl	8001eac <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d902      	bls.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	74fb      	strb	r3, [r7, #19]
            break;
 8003d00:	e006      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d02:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0ec      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d10:	7cfb      	ldrb	r3, [r7, #19]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d16:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	4903      	ldr	r1, [pc, #12]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d2c:	e008      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d2e:	7cfb      	ldrb	r3, [r7, #19]
 8003d30:	74bb      	strb	r3, [r7, #18]
 8003d32:	e005      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3c:	7cfb      	ldrb	r3, [r7, #19]
 8003d3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d40:	7c7b      	ldrb	r3, [r7, #17]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d105      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d46:	4ba6      	ldr	r3, [pc, #664]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	4aa5      	ldr	r2, [pc, #660]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d5e:	4ba0      	ldr	r3, [pc, #640]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d64:	f023 0203 	bic.w	r2, r3, #3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	499c      	ldr	r1, [pc, #624]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d80:	4b97      	ldr	r3, [pc, #604]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	f023 020c 	bic.w	r2, r3, #12
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	4994      	ldr	r1, [pc, #592]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003da2:	4b8f      	ldr	r3, [pc, #572]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	498b      	ldr	r1, [pc, #556]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dc4:	4b86      	ldr	r3, [pc, #536]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	4983      	ldr	r1, [pc, #524]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003de6:	4b7e      	ldr	r3, [pc, #504]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	497a      	ldr	r1, [pc, #488]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e08:	4b75      	ldr	r3, [pc, #468]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	4972      	ldr	r1, [pc, #456]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e2a:	4b6d      	ldr	r3, [pc, #436]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	4969      	ldr	r1, [pc, #420]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e4c:	4b64      	ldr	r3, [pc, #400]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	4961      	ldr	r1, [pc, #388]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e6e:	4b5c      	ldr	r3, [pc, #368]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	4958      	ldr	r1, [pc, #352]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d015      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e90:	4b53      	ldr	r3, [pc, #332]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	4950      	ldr	r1, [pc, #320]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eae:	d105      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb0:	4b4b      	ldr	r3, [pc, #300]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4a4a      	ldr	r2, [pc, #296]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d015      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ec8:	4b45      	ldr	r3, [pc, #276]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	4942      	ldr	r1, [pc, #264]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee6:	d105      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ee8:	4b3d      	ldr	r3, [pc, #244]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	4a3c      	ldr	r2, [pc, #240]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ef2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d015      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f00:	4b37      	ldr	r3, [pc, #220]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f06:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	4934      	ldr	r1, [pc, #208]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f1e:	d105      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f20:	4b2f      	ldr	r3, [pc, #188]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	4a2e      	ldr	r2, [pc, #184]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d015      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f38:	4b29      	ldr	r3, [pc, #164]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f46:	4926      	ldr	r1, [pc, #152]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f56:	d105      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f58:	4b21      	ldr	r3, [pc, #132]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4a20      	ldr	r2, [pc, #128]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d015      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f70:	4b1b      	ldr	r3, [pc, #108]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	4918      	ldr	r1, [pc, #96]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f8e:	d105      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f90:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4a12      	ldr	r2, [pc, #72]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d015      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb6:	490a      	ldr	r1, [pc, #40]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fc6:	d105      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fc8:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a04      	ldr	r2, [pc, #16]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003fd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40021000 	.word	0x40021000

08003fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e049      	b.n	800408a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fd fd52 	bl	8001ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f000 fb7c 	bl	8004720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d001      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e04a      	b.n	8004142 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a21      	ldr	r2, [pc, #132]	; (8004150 <HAL_TIM_Base_Start_IT+0xbc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d018      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x6c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d6:	d013      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x6c>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <HAL_TIM_Base_Start_IT+0xc0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00e      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x6c>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1c      	ldr	r2, [pc, #112]	; (8004158 <HAL_TIM_Base_Start_IT+0xc4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d009      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x6c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1a      	ldr	r2, [pc, #104]	; (800415c <HAL_TIM_Base_Start_IT+0xc8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x6c>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a19      	ldr	r2, [pc, #100]	; (8004160 <HAL_TIM_Base_Start_IT+0xcc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d115      	bne.n	800412c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	4b17      	ldr	r3, [pc, #92]	; (8004164 <HAL_TIM_Base_Start_IT+0xd0>)
 8004108:	4013      	ands	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b06      	cmp	r3, #6
 8004110:	d015      	beq.n	800413e <HAL_TIM_Base_Start_IT+0xaa>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004118:	d011      	beq.n	800413e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0201 	orr.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412a:	e008      	b.n	800413e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0201 	orr.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	e000      	b.n	8004140 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800
 800415c:	40013400 	.word	0x40013400
 8004160:	40014000 	.word	0x40014000
 8004164:	00010007 	.word	0x00010007

08004168 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e097      	b.n	80042ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d106      	bne.n	8004196 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7fd fc1d 	bl	80019d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6812      	ldr	r2, [r2, #0]
 80041a8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80041ac:	f023 0307 	bic.w	r3, r3, #7
 80041b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3304      	adds	r3, #4
 80041ba:	4619      	mov	r1, r3
 80041bc:	4610      	mov	r0, r2
 80041be:	f000 faaf 	bl	8004720 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	4313      	orrs	r3, r2
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004208:	f023 030c 	bic.w	r3, r3, #12
 800420c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004214:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004218:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	4313      	orrs	r3, r2
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	011a      	lsls	r2, r3, #4
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	031b      	lsls	r3, r3, #12
 8004238:	4313      	orrs	r3, r2
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004246:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800424e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	4313      	orrs	r3, r2
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d110      	bne.n	8004306 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d102      	bne.n	80042f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80042ea:	7b7b      	ldrb	r3, [r7, #13]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d001      	beq.n	80042f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e069      	b.n	80043c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004304:	e031      	b.n	800436a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b04      	cmp	r3, #4
 800430a:	d110      	bne.n	800432e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800430c:	7bbb      	ldrb	r3, [r7, #14]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d102      	bne.n	8004318 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004312:	7b3b      	ldrb	r3, [r7, #12]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d001      	beq.n	800431c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e055      	b.n	80043c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800432c:	e01d      	b.n	800436a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d108      	bne.n	8004346 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004334:	7bbb      	ldrb	r3, [r7, #14]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d105      	bne.n	8004346 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800433a:	7b7b      	ldrb	r3, [r7, #13]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d102      	bne.n	8004346 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004340:	7b3b      	ldrb	r3, [r7, #12]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d001      	beq.n	800434a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e03e      	b.n	80043c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2202      	movs	r2, #2
 8004356:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_TIM_Encoder_Start+0xc4>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b04      	cmp	r3, #4
 8004374:	d008      	beq.n	8004388 <HAL_TIM_Encoder_Start+0xd4>
 8004376:	e00f      	b.n	8004398 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2201      	movs	r2, #1
 800437e:	2100      	movs	r1, #0
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fa5d 	bl	8004840 <TIM_CCxChannelCmd>
      break;
 8004386:	e016      	b.n	80043b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2201      	movs	r2, #1
 800438e:	2104      	movs	r1, #4
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fa55 	bl	8004840 <TIM_CCxChannelCmd>
      break;
 8004396:	e00e      	b.n	80043b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2201      	movs	r2, #1
 800439e:	2100      	movs	r1, #0
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fa4d 	bl	8004840 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2201      	movs	r2, #1
 80043ac:	2104      	movs	r1, #4
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fa46 	bl	8004840 <TIM_CCxChannelCmd>
      break;
 80043b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d122      	bne.n	800442c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d11b      	bne.n	800442c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0202 	mvn.w	r2, #2
 80043fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f965 	bl	80046e2 <HAL_TIM_IC_CaptureCallback>
 8004418:	e005      	b.n	8004426 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f957 	bl	80046ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f968 	bl	80046f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b04      	cmp	r3, #4
 8004438:	d122      	bne.n	8004480 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b04      	cmp	r3, #4
 8004446:	d11b      	bne.n	8004480 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0204 	mvn.w	r2, #4
 8004450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2202      	movs	r2, #2
 8004456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f93b 	bl	80046e2 <HAL_TIM_IC_CaptureCallback>
 800446c:	e005      	b.n	800447a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f92d 	bl	80046ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f93e 	bl	80046f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b08      	cmp	r3, #8
 800448c:	d122      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b08      	cmp	r3, #8
 800449a:	d11b      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0208 	mvn.w	r2, #8
 80044a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2204      	movs	r2, #4
 80044aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f911 	bl	80046e2 <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f903 	bl	80046ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f914 	bl	80046f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b10      	cmp	r3, #16
 80044e0:	d122      	bne.n	8004528 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d11b      	bne.n	8004528 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0210 	mvn.w	r2, #16
 80044f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2208      	movs	r2, #8
 80044fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8e7 	bl	80046e2 <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f8d9 	bl	80046ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f8ea 	bl	80046f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b01      	cmp	r3, #1
 8004534:	d10e      	bne.n	8004554 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b01      	cmp	r3, #1
 8004542:	d107      	bne.n	8004554 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0201 	mvn.w	r2, #1
 800454c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fd f82e 	bl	80015b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455e:	2b80      	cmp	r3, #128	; 0x80
 8004560:	d10e      	bne.n	8004580 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456c:	2b80      	cmp	r3, #128	; 0x80
 800456e:	d107      	bne.n	8004580 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fa12 	bl	80049a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458e:	d10e      	bne.n	80045ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	2b80      	cmp	r3, #128	; 0x80
 800459c:	d107      	bne.n	80045ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fa05 	bl	80049b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d10e      	bne.n	80045da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b40      	cmp	r3, #64	; 0x40
 80045c8:	d107      	bne.n	80045da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f898 	bl	800470a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f003 0320 	and.w	r3, r3, #32
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d10e      	bne.n	8004606 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b20      	cmp	r3, #32
 80045f4:	d107      	bne.n	8004606 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f06f 0220 	mvn.w	r2, #32
 80045fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f9c5 	bl	8004990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004610:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004614:	d10f      	bne.n	8004636 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004624:	d107      	bne.n	8004636 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800462e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f9cb 	bl	80049cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004640:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004644:	d10f      	bne.n	8004666 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004650:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004654:	d107      	bne.n	8004666 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800465e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f9bd 	bl	80049e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004674:	d10f      	bne.n	8004696 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004684:	d107      	bne.n	8004696 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800468e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f9af 	bl	80049f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046a4:	d10f      	bne.n	80046c6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046b4:	d107      	bne.n	80046c6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80046be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f9a1 	bl	8004a08 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
	...

08004720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a3c      	ldr	r2, [pc, #240]	; (8004824 <TIM_Base_SetConfig+0x104>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00f      	beq.n	8004758 <TIM_Base_SetConfig+0x38>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473e:	d00b      	beq.n	8004758 <TIM_Base_SetConfig+0x38>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a39      	ldr	r2, [pc, #228]	; (8004828 <TIM_Base_SetConfig+0x108>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d007      	beq.n	8004758 <TIM_Base_SetConfig+0x38>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a38      	ldr	r2, [pc, #224]	; (800482c <TIM_Base_SetConfig+0x10c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d003      	beq.n	8004758 <TIM_Base_SetConfig+0x38>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a37      	ldr	r2, [pc, #220]	; (8004830 <TIM_Base_SetConfig+0x110>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d108      	bne.n	800476a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a2d      	ldr	r2, [pc, #180]	; (8004824 <TIM_Base_SetConfig+0x104>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d01b      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004778:	d017      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a2a      	ldr	r2, [pc, #168]	; (8004828 <TIM_Base_SetConfig+0x108>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a29      	ldr	r2, [pc, #164]	; (800482c <TIM_Base_SetConfig+0x10c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00f      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a28      	ldr	r2, [pc, #160]	; (8004830 <TIM_Base_SetConfig+0x110>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00b      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a27      	ldr	r2, [pc, #156]	; (8004834 <TIM_Base_SetConfig+0x114>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d007      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a26      	ldr	r2, [pc, #152]	; (8004838 <TIM_Base_SetConfig+0x118>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d003      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a25      	ldr	r2, [pc, #148]	; (800483c <TIM_Base_SetConfig+0x11c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d108      	bne.n	80047bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a10      	ldr	r2, [pc, #64]	; (8004824 <TIM_Base_SetConfig+0x104>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00f      	beq.n	8004808 <TIM_Base_SetConfig+0xe8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a11      	ldr	r2, [pc, #68]	; (8004830 <TIM_Base_SetConfig+0x110>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00b      	beq.n	8004808 <TIM_Base_SetConfig+0xe8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a10      	ldr	r2, [pc, #64]	; (8004834 <TIM_Base_SetConfig+0x114>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <TIM_Base_SetConfig+0xe8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a0f      	ldr	r2, [pc, #60]	; (8004838 <TIM_Base_SetConfig+0x118>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_Base_SetConfig+0xe8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a0e      	ldr	r2, [pc, #56]	; (800483c <TIM_Base_SetConfig+0x11c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d103      	bne.n	8004810 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	615a      	str	r2, [r3, #20]
}
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40013400 	.word	0x40013400
 8004834:	40014000 	.word	0x40014000
 8004838:	40014400 	.word	0x40014400
 800483c:	40014800 	.word	0x40014800

08004840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	2201      	movs	r2, #1
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a1a      	ldr	r2, [r3, #32]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	43db      	mvns	r3, r3
 8004862:	401a      	ands	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a1a      	ldr	r2, [r3, #32]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f003 031f 	and.w	r3, r3, #31
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	fa01 f303 	lsl.w	r3, r1, r3
 8004878:	431a      	orrs	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e065      	b.n	8004970 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a2c      	ldr	r2, [pc, #176]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d004      	beq.n	80048d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a2b      	ldr	r2, [pc, #172]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d108      	bne.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80048f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1b      	ldr	r2, [pc, #108]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d018      	beq.n	8004944 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491a:	d013      	beq.n	8004944 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a18      	ldr	r2, [pc, #96]	; (8004984 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00e      	beq.n	8004944 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a17      	ldr	r2, [pc, #92]	; (8004988 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d009      	beq.n	8004944 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a12      	ldr	r2, [pc, #72]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d004      	beq.n	8004944 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a13      	ldr	r2, [pc, #76]	; (800498c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d10c      	bne.n	800495e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800494a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	4313      	orrs	r3, r2
 8004954:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40013400 	.word	0x40013400
 8004984:	40000400 	.word	0x40000400
 8004988:	40000800 	.word	0x40000800
 800498c:	40014000 	.word	0x40014000

08004990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e042      	b.n	8004ab4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d106      	bne.n	8004a46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7fd f85d 	bl	8001b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2224      	movs	r2, #36	; 0x24
 8004a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0201 	bic.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f8c2 	bl	8004be8 <UART_SetConfig>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e022      	b.n	8004ab4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fb82 	bl	8005180 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fc09 	bl	80052c4 <UART_CheckIdleState>
 8004ab2:	4603      	mov	r3, r0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	; 0x28
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	f040 8083 	bne.w	8004bde <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_UART_Transmit+0x28>
 8004ade:	88fb      	ldrh	r3, [r7, #6]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e07b      	b.n	8004be0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_UART_Transmit+0x3a>
 8004af2:	2302      	movs	r3, #2
 8004af4:	e074      	b.n	8004be0 <HAL_UART_Transmit+0x124>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2221      	movs	r2, #33	; 0x21
 8004b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b0e:	f7fd f9cd 	bl	8001eac <HAL_GetTick>
 8004b12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	88fa      	ldrh	r2, [r7, #6]
 8004b18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	88fa      	ldrh	r2, [r7, #6]
 8004b20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2c:	d108      	bne.n	8004b40 <HAL_UART_Transmit+0x84>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d104      	bne.n	8004b40 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	e003      	b.n	8004b48 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004b50:	e02c      	b.n	8004bac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2180      	movs	r1, #128	; 0x80
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 fbfc 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e039      	b.n	8004be0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10b      	bne.n	8004b8a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	3302      	adds	r3, #2
 8004b86:	61bb      	str	r3, [r7, #24]
 8004b88:	e007      	b.n	8004b9a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	781a      	ldrb	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	3301      	adds	r3, #1
 8004b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1cc      	bne.n	8004b52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2140      	movs	r1, #64	; 0x40
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 fbc9 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e006      	b.n	8004be0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e000      	b.n	8004be0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004bde:	2302      	movs	r3, #2
  }
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3720      	adds	r7, #32
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bec:	b08c      	sub	sp, #48	; 0x30
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	431a      	orrs	r2, r3
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4bab      	ldr	r3, [pc, #684]	; (8004ec4 <UART_SetConfig+0x2dc>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c20:	430b      	orrs	r3, r1
 8004c22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4aa0      	ldr	r2, [pc, #640]	; (8004ec8 <UART_SetConfig+0x2e0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d004      	beq.n	8004c54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c50:	4313      	orrs	r3, r2
 8004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004c5e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	f023 010f 	bic.w	r1, r3, #15
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a91      	ldr	r2, [pc, #580]	; (8004ecc <UART_SetConfig+0x2e4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d125      	bne.n	8004cd8 <UART_SetConfig+0xf0>
 8004c8c:	4b90      	ldr	r3, [pc, #576]	; (8004ed0 <UART_SetConfig+0x2e8>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d81a      	bhi.n	8004cd0 <UART_SetConfig+0xe8>
 8004c9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <UART_SetConfig+0xb8>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004cb1 	.word	0x08004cb1
 8004ca4:	08004cc1 	.word	0x08004cc1
 8004ca8:	08004cb9 	.word	0x08004cb9
 8004cac:	08004cc9 	.word	0x08004cc9
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cb6:	e0d6      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cbe:	e0d2      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cc6:	e0ce      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004cc8:	2308      	movs	r3, #8
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cce:	e0ca      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cd6:	e0c6      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a7d      	ldr	r2, [pc, #500]	; (8004ed4 <UART_SetConfig+0x2ec>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d138      	bne.n	8004d54 <UART_SetConfig+0x16c>
 8004ce2:	4b7b      	ldr	r3, [pc, #492]	; (8004ed0 <UART_SetConfig+0x2e8>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	f003 030c 	and.w	r3, r3, #12
 8004cec:	2b0c      	cmp	r3, #12
 8004cee:	d82d      	bhi.n	8004d4c <UART_SetConfig+0x164>
 8004cf0:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <UART_SetConfig+0x110>)
 8004cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf6:	bf00      	nop
 8004cf8:	08004d2d 	.word	0x08004d2d
 8004cfc:	08004d4d 	.word	0x08004d4d
 8004d00:	08004d4d 	.word	0x08004d4d
 8004d04:	08004d4d 	.word	0x08004d4d
 8004d08:	08004d3d 	.word	0x08004d3d
 8004d0c:	08004d4d 	.word	0x08004d4d
 8004d10:	08004d4d 	.word	0x08004d4d
 8004d14:	08004d4d 	.word	0x08004d4d
 8004d18:	08004d35 	.word	0x08004d35
 8004d1c:	08004d4d 	.word	0x08004d4d
 8004d20:	08004d4d 	.word	0x08004d4d
 8004d24:	08004d4d 	.word	0x08004d4d
 8004d28:	08004d45 	.word	0x08004d45
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d32:	e098      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004d34:	2302      	movs	r3, #2
 8004d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d3a:	e094      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d42:	e090      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004d44:	2308      	movs	r3, #8
 8004d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d4a:	e08c      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d52:	e088      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a5f      	ldr	r2, [pc, #380]	; (8004ed8 <UART_SetConfig+0x2f0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d125      	bne.n	8004daa <UART_SetConfig+0x1c2>
 8004d5e:	4b5c      	ldr	r3, [pc, #368]	; (8004ed0 <UART_SetConfig+0x2e8>)
 8004d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d68:	2b30      	cmp	r3, #48	; 0x30
 8004d6a:	d016      	beq.n	8004d9a <UART_SetConfig+0x1b2>
 8004d6c:	2b30      	cmp	r3, #48	; 0x30
 8004d6e:	d818      	bhi.n	8004da2 <UART_SetConfig+0x1ba>
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d00a      	beq.n	8004d8a <UART_SetConfig+0x1a2>
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	d814      	bhi.n	8004da2 <UART_SetConfig+0x1ba>
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <UART_SetConfig+0x19a>
 8004d7c:	2b10      	cmp	r3, #16
 8004d7e:	d008      	beq.n	8004d92 <UART_SetConfig+0x1aa>
 8004d80:	e00f      	b.n	8004da2 <UART_SetConfig+0x1ba>
 8004d82:	2300      	movs	r3, #0
 8004d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d88:	e06d      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d90:	e069      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004d92:	2304      	movs	r3, #4
 8004d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d98:	e065      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da0:	e061      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004da2:	2310      	movs	r3, #16
 8004da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da8:	e05d      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a4b      	ldr	r2, [pc, #300]	; (8004edc <UART_SetConfig+0x2f4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d125      	bne.n	8004e00 <UART_SetConfig+0x218>
 8004db4:	4b46      	ldr	r3, [pc, #280]	; (8004ed0 <UART_SetConfig+0x2e8>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8004dc0:	d016      	beq.n	8004df0 <UART_SetConfig+0x208>
 8004dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8004dc4:	d818      	bhi.n	8004df8 <UART_SetConfig+0x210>
 8004dc6:	2b80      	cmp	r3, #128	; 0x80
 8004dc8:	d00a      	beq.n	8004de0 <UART_SetConfig+0x1f8>
 8004dca:	2b80      	cmp	r3, #128	; 0x80
 8004dcc:	d814      	bhi.n	8004df8 <UART_SetConfig+0x210>
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <UART_SetConfig+0x1f0>
 8004dd2:	2b40      	cmp	r3, #64	; 0x40
 8004dd4:	d008      	beq.n	8004de8 <UART_SetConfig+0x200>
 8004dd6:	e00f      	b.n	8004df8 <UART_SetConfig+0x210>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dde:	e042      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004de0:	2302      	movs	r3, #2
 8004de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004de6:	e03e      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004de8:	2304      	movs	r3, #4
 8004dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dee:	e03a      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004df0:	2308      	movs	r3, #8
 8004df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df6:	e036      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004df8:	2310      	movs	r3, #16
 8004dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dfe:	e032      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a30      	ldr	r2, [pc, #192]	; (8004ec8 <UART_SetConfig+0x2e0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d12a      	bne.n	8004e60 <UART_SetConfig+0x278>
 8004e0a:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <UART_SetConfig+0x2e8>)
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e18:	d01a      	beq.n	8004e50 <UART_SetConfig+0x268>
 8004e1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e1e:	d81b      	bhi.n	8004e58 <UART_SetConfig+0x270>
 8004e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e24:	d00c      	beq.n	8004e40 <UART_SetConfig+0x258>
 8004e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e2a:	d815      	bhi.n	8004e58 <UART_SetConfig+0x270>
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <UART_SetConfig+0x250>
 8004e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e34:	d008      	beq.n	8004e48 <UART_SetConfig+0x260>
 8004e36:	e00f      	b.n	8004e58 <UART_SetConfig+0x270>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e3e:	e012      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004e40:	2302      	movs	r3, #2
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e46:	e00e      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004e48:	2304      	movs	r3, #4
 8004e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e4e:	e00a      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004e50:	2308      	movs	r3, #8
 8004e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e56:	e006      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004e58:	2310      	movs	r3, #16
 8004e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e5e:	e002      	b.n	8004e66 <UART_SetConfig+0x27e>
 8004e60:	2310      	movs	r3, #16
 8004e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <UART_SetConfig+0x2e0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	f040 80a8 	bne.w	8004fc2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d834      	bhi.n	8004ee4 <UART_SetConfig+0x2fc>
 8004e7a:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <UART_SetConfig+0x298>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004ea5 	.word	0x08004ea5
 8004e84:	08004ee5 	.word	0x08004ee5
 8004e88:	08004ead 	.word	0x08004ead
 8004e8c:	08004ee5 	.word	0x08004ee5
 8004e90:	08004eb3 	.word	0x08004eb3
 8004e94:	08004ee5 	.word	0x08004ee5
 8004e98:	08004ee5 	.word	0x08004ee5
 8004e9c:	08004ee5 	.word	0x08004ee5
 8004ea0:	08004ebb 	.word	0x08004ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea4:	f7fe fe3c 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8004ea8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eaa:	e021      	b.n	8004ef0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <UART_SetConfig+0x2f8>)
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004eb0:	e01e      	b.n	8004ef0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb2:	f7fe fdc7 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 8004eb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eb8:	e01a      	b.n	8004ef0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ec0:	e016      	b.n	8004ef0 <UART_SetConfig+0x308>
 8004ec2:	bf00      	nop
 8004ec4:	cfff69f3 	.word	0xcfff69f3
 8004ec8:	40008000 	.word	0x40008000
 8004ecc:	40013800 	.word	0x40013800
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40004400 	.word	0x40004400
 8004ed8:	40004800 	.word	0x40004800
 8004edc:	40004c00 	.word	0x40004c00
 8004ee0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004eee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 812a 	beq.w	800514c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	4a9e      	ldr	r2, [pc, #632]	; (8005178 <UART_SetConfig+0x590>)
 8004efe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f02:	461a      	mov	r2, r3
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f0a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	4413      	add	r3, r2
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d305      	bcc.n	8004f28 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d903      	bls.n	8004f30 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f2e:	e10d      	b.n	800514c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	2200      	movs	r2, #0
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	60fa      	str	r2, [r7, #12]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	4a8e      	ldr	r2, [pc, #568]	; (8005178 <UART_SetConfig+0x590>)
 8004f3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2200      	movs	r2, #0
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	607a      	str	r2, [r7, #4]
 8004f4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f52:	f7fb fea1 	bl	8000c98 <__aeabi_uldivmod>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	020b      	lsls	r3, r1, #8
 8004f68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f6c:	0202      	lsls	r2, r0, #8
 8004f6e:	6979      	ldr	r1, [r7, #20]
 8004f70:	6849      	ldr	r1, [r1, #4]
 8004f72:	0849      	lsrs	r1, r1, #1
 8004f74:	2000      	movs	r0, #0
 8004f76:	460c      	mov	r4, r1
 8004f78:	4605      	mov	r5, r0
 8004f7a:	eb12 0804 	adds.w	r8, r2, r4
 8004f7e:	eb43 0905 	adc.w	r9, r3, r5
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	469a      	mov	sl, r3
 8004f8a:	4693      	mov	fp, r2
 8004f8c:	4652      	mov	r2, sl
 8004f8e:	465b      	mov	r3, fp
 8004f90:	4640      	mov	r0, r8
 8004f92:	4649      	mov	r1, r9
 8004f94:	f7fb fe80 	bl	8000c98 <__aeabi_uldivmod>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fa6:	d308      	bcc.n	8004fba <UART_SetConfig+0x3d2>
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fae:	d204      	bcs.n	8004fba <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6a3a      	ldr	r2, [r7, #32]
 8004fb6:	60da      	str	r2, [r3, #12]
 8004fb8:	e0c8      	b.n	800514c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004fc0:	e0c4      	b.n	800514c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fca:	d167      	bne.n	800509c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004fcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d828      	bhi.n	8005026 <UART_SetConfig+0x43e>
 8004fd4:	a201      	add	r2, pc, #4	; (adr r2, 8004fdc <UART_SetConfig+0x3f4>)
 8004fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fda:	bf00      	nop
 8004fdc:	08005001 	.word	0x08005001
 8004fe0:	08005009 	.word	0x08005009
 8004fe4:	08005011 	.word	0x08005011
 8004fe8:	08005027 	.word	0x08005027
 8004fec:	08005017 	.word	0x08005017
 8004ff0:	08005027 	.word	0x08005027
 8004ff4:	08005027 	.word	0x08005027
 8004ff8:	08005027 	.word	0x08005027
 8004ffc:	0800501f 	.word	0x0800501f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005000:	f7fe fd8e 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8005004:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005006:	e014      	b.n	8005032 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005008:	f7fe fda0 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 800500c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800500e:	e010      	b.n	8005032 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005010:	4b5a      	ldr	r3, [pc, #360]	; (800517c <UART_SetConfig+0x594>)
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005014:	e00d      	b.n	8005032 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005016:	f7fe fd15 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 800501a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800501c:	e009      	b.n	8005032 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800501e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005024:	e005      	b.n	8005032 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005030:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8089 	beq.w	800514c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	4a4e      	ldr	r2, [pc, #312]	; (8005178 <UART_SetConfig+0x590>)
 8005040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005044:	461a      	mov	r2, r3
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	fbb3 f3f2 	udiv	r3, r3, r2
 800504c:	005a      	lsls	r2, r3, #1
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	441a      	add	r2, r3
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	fbb2 f3f3 	udiv	r3, r2, r3
 800505e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	2b0f      	cmp	r3, #15
 8005064:	d916      	bls.n	8005094 <UART_SetConfig+0x4ac>
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800506c:	d212      	bcs.n	8005094 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	b29b      	uxth	r3, r3
 8005072:	f023 030f 	bic.w	r3, r3, #15
 8005076:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	085b      	lsrs	r3, r3, #1
 800507c:	b29b      	uxth	r3, r3
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	b29a      	uxth	r2, r3
 8005084:	8bfb      	ldrh	r3, [r7, #30]
 8005086:	4313      	orrs	r3, r2
 8005088:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	8bfa      	ldrh	r2, [r7, #30]
 8005090:	60da      	str	r2, [r3, #12]
 8005092:	e05b      	b.n	800514c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800509a:	e057      	b.n	800514c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800509c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d828      	bhi.n	80050f6 <UART_SetConfig+0x50e>
 80050a4:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <UART_SetConfig+0x4c4>)
 80050a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050aa:	bf00      	nop
 80050ac:	080050d1 	.word	0x080050d1
 80050b0:	080050d9 	.word	0x080050d9
 80050b4:	080050e1 	.word	0x080050e1
 80050b8:	080050f7 	.word	0x080050f7
 80050bc:	080050e7 	.word	0x080050e7
 80050c0:	080050f7 	.word	0x080050f7
 80050c4:	080050f7 	.word	0x080050f7
 80050c8:	080050f7 	.word	0x080050f7
 80050cc:	080050ef 	.word	0x080050ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d0:	f7fe fd26 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 80050d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050d6:	e014      	b.n	8005102 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050d8:	f7fe fd38 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 80050dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050de:	e010      	b.n	8005102 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e0:	4b26      	ldr	r3, [pc, #152]	; (800517c <UART_SetConfig+0x594>)
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050e4:	e00d      	b.n	8005102 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050e6:	f7fe fcad 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 80050ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050ec:	e009      	b.n	8005102 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050f4:	e005      	b.n	8005102 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005100:	bf00      	nop
    }

    if (pclk != 0U)
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	2b00      	cmp	r3, #0
 8005106:	d021      	beq.n	800514c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	4a1a      	ldr	r2, [pc, #104]	; (8005178 <UART_SetConfig+0x590>)
 800510e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005112:	461a      	mov	r2, r3
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	fbb3 f2f2 	udiv	r2, r3, r2
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	441a      	add	r2, r3
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	fbb2 f3f3 	udiv	r3, r2, r3
 800512a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	2b0f      	cmp	r3, #15
 8005130:	d909      	bls.n	8005146 <UART_SetConfig+0x55e>
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005138:	d205      	bcs.n	8005146 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	b29a      	uxth	r2, r3
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60da      	str	r2, [r3, #12]
 8005144:	e002      	b.n	800514c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2201      	movs	r2, #1
 8005150:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2201      	movs	r2, #1
 8005158:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2200      	movs	r2, #0
 8005160:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2200      	movs	r2, #0
 8005166:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005168:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800516c:	4618      	mov	r0, r3
 800516e:	3730      	adds	r7, #48	; 0x30
 8005170:	46bd      	mov	sp, r7
 8005172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005176:	bf00      	nop
 8005178:	080095f0 	.word	0x080095f0
 800517c:	00f42400 	.word	0x00f42400

08005180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01a      	beq.n	8005296 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800527e:	d10a      	bne.n	8005296 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	605a      	str	r2, [r3, #4]
  }
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052d4:	f7fc fdea 	bl	8001eac <HAL_GetTick>
 80052d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d10e      	bne.n	8005306 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f82f 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e025      	b.n	8005352 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b04      	cmp	r3, #4
 8005312:	d10e      	bne.n	8005332 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005314:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f819 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e00f      	b.n	8005352 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2220      	movs	r2, #32
 8005336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b09c      	sub	sp, #112	; 0x70
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	603b      	str	r3, [r7, #0]
 8005366:	4613      	mov	r3, r2
 8005368:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536a:	e0a9      	b.n	80054c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	f000 80a5 	beq.w	80054c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005376:	f7fc fd99 	bl	8001eac <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005382:	429a      	cmp	r2, r3
 8005384:	d302      	bcc.n	800538c <UART_WaitOnFlagUntilTimeout+0x32>
 8005386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005388:	2b00      	cmp	r3, #0
 800538a:	d140      	bne.n	800540e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800539a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053a0:	667b      	str	r3, [r7, #100]	; 0x64
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e6      	bne.n	800538c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3308      	adds	r3, #8
 80053c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	663b      	str	r3, [r7, #96]	; 0x60
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3308      	adds	r3, #8
 80053dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053de:	64ba      	str	r2, [r7, #72]	; 0x48
 80053e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e5      	bne.n	80053be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2220      	movs	r2, #32
 80053fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e069      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d051      	beq.n	80054c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800542a:	d149      	bne.n	80054c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005434:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800544a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005454:	637b      	str	r3, [r7, #52]	; 0x34
 8005456:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800545a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e6      	bne.n	8005436 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	613b      	str	r3, [r7, #16]
   return(result);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f023 0301 	bic.w	r3, r3, #1
 800547e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3308      	adds	r3, #8
 8005486:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005488:	623a      	str	r2, [r7, #32]
 800548a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	69f9      	ldr	r1, [r7, #28]
 800548e:	6a3a      	ldr	r2, [r7, #32]
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	61bb      	str	r3, [r7, #24]
   return(result);
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e5      	bne.n	8005468 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e010      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69da      	ldr	r2, [r3, #28]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	4013      	ands	r3, r2
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	bf0c      	ite	eq
 80054d0:	2301      	moveq	r3, #1
 80054d2:	2300      	movne	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	461a      	mov	r2, r3
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	429a      	cmp	r2, r3
 80054dc:	f43f af46 	beq.w	800536c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3770      	adds	r7, #112	; 0x70
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_UARTEx_DisableFifoMode+0x16>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e027      	b.n	8005550 <HAL_UARTEx_DisableFifoMode+0x66>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2224      	movs	r2, #36	; 0x24
 800550c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0201 	bic.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800552e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2220      	movs	r2, #32
 8005542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005570:	2302      	movs	r3, #2
 8005572:	e02d      	b.n	80055d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2224      	movs	r2, #36	; 0x24
 8005580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0201 	bic.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f84f 	bl	8005654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e02d      	b.n	800564c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2224      	movs	r2, #36	; 0x24
 80055fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0201 	bic.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f811 	bl	8005654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005660:	2b00      	cmp	r3, #0
 8005662:	d108      	bne.n	8005676 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005674:	e031      	b.n	80056da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005676:	2308      	movs	r3, #8
 8005678:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800567a:	2308      	movs	r3, #8
 800567c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	0e5b      	lsrs	r3, r3, #25
 8005686:	b2db      	uxtb	r3, r3
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	0f5b      	lsrs	r3, r3, #29
 8005696:	b2db      	uxtb	r3, r3
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800569e:	7bbb      	ldrb	r3, [r7, #14]
 80056a0:	7b3a      	ldrb	r2, [r7, #12]
 80056a2:	4911      	ldr	r1, [pc, #68]	; (80056e8 <UARTEx_SetNbDataToProcess+0x94>)
 80056a4:	5c8a      	ldrb	r2, [r1, r2]
 80056a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056aa:	7b3a      	ldrb	r2, [r7, #12]
 80056ac:	490f      	ldr	r1, [pc, #60]	; (80056ec <UARTEx_SetNbDataToProcess+0x98>)
 80056ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	7b7a      	ldrb	r2, [r7, #13]
 80056c0:	4909      	ldr	r1, [pc, #36]	; (80056e8 <UARTEx_SetNbDataToProcess+0x94>)
 80056c2:	5c8a      	ldrb	r2, [r1, r2]
 80056c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056c8:	7b7a      	ldrb	r2, [r7, #13]
 80056ca:	4908      	ldr	r1, [pc, #32]	; (80056ec <UARTEx_SetNbDataToProcess+0x98>)
 80056cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	08009608 	.word	0x08009608
 80056ec:	08009610 	.word	0x08009610

080056f0 <__errno>:
 80056f0:	4b01      	ldr	r3, [pc, #4]	; (80056f8 <__errno+0x8>)
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	2000000c 	.word	0x2000000c

080056fc <__libc_init_array>:
 80056fc:	b570      	push	{r4, r5, r6, lr}
 80056fe:	4d0d      	ldr	r5, [pc, #52]	; (8005734 <__libc_init_array+0x38>)
 8005700:	4c0d      	ldr	r4, [pc, #52]	; (8005738 <__libc_init_array+0x3c>)
 8005702:	1b64      	subs	r4, r4, r5
 8005704:	10a4      	asrs	r4, r4, #2
 8005706:	2600      	movs	r6, #0
 8005708:	42a6      	cmp	r6, r4
 800570a:	d109      	bne.n	8005720 <__libc_init_array+0x24>
 800570c:	4d0b      	ldr	r5, [pc, #44]	; (800573c <__libc_init_array+0x40>)
 800570e:	4c0c      	ldr	r4, [pc, #48]	; (8005740 <__libc_init_array+0x44>)
 8005710:	f003 ff30 	bl	8009574 <_init>
 8005714:	1b64      	subs	r4, r4, r5
 8005716:	10a4      	asrs	r4, r4, #2
 8005718:	2600      	movs	r6, #0
 800571a:	42a6      	cmp	r6, r4
 800571c:	d105      	bne.n	800572a <__libc_init_array+0x2e>
 800571e:	bd70      	pop	{r4, r5, r6, pc}
 8005720:	f855 3b04 	ldr.w	r3, [r5], #4
 8005724:	4798      	blx	r3
 8005726:	3601      	adds	r6, #1
 8005728:	e7ee      	b.n	8005708 <__libc_init_array+0xc>
 800572a:	f855 3b04 	ldr.w	r3, [r5], #4
 800572e:	4798      	blx	r3
 8005730:	3601      	adds	r6, #1
 8005732:	e7f2      	b.n	800571a <__libc_init_array+0x1e>
 8005734:	08009bd8 	.word	0x08009bd8
 8005738:	08009bd8 	.word	0x08009bd8
 800573c:	08009bd8 	.word	0x08009bd8
 8005740:	08009bdc 	.word	0x08009bdc

08005744 <memset>:
 8005744:	4402      	add	r2, r0
 8005746:	4603      	mov	r3, r0
 8005748:	4293      	cmp	r3, r2
 800574a:	d100      	bne.n	800574e <memset+0xa>
 800574c:	4770      	bx	lr
 800574e:	f803 1b01 	strb.w	r1, [r3], #1
 8005752:	e7f9      	b.n	8005748 <memset+0x4>

08005754 <__cvt>:
 8005754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005758:	ec55 4b10 	vmov	r4, r5, d0
 800575c:	2d00      	cmp	r5, #0
 800575e:	460e      	mov	r6, r1
 8005760:	4619      	mov	r1, r3
 8005762:	462b      	mov	r3, r5
 8005764:	bfbb      	ittet	lt
 8005766:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800576a:	461d      	movlt	r5, r3
 800576c:	2300      	movge	r3, #0
 800576e:	232d      	movlt	r3, #45	; 0x2d
 8005770:	700b      	strb	r3, [r1, #0]
 8005772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005774:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005778:	4691      	mov	r9, r2
 800577a:	f023 0820 	bic.w	r8, r3, #32
 800577e:	bfbc      	itt	lt
 8005780:	4622      	movlt	r2, r4
 8005782:	4614      	movlt	r4, r2
 8005784:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005788:	d005      	beq.n	8005796 <__cvt+0x42>
 800578a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800578e:	d100      	bne.n	8005792 <__cvt+0x3e>
 8005790:	3601      	adds	r6, #1
 8005792:	2102      	movs	r1, #2
 8005794:	e000      	b.n	8005798 <__cvt+0x44>
 8005796:	2103      	movs	r1, #3
 8005798:	ab03      	add	r3, sp, #12
 800579a:	9301      	str	r3, [sp, #4]
 800579c:	ab02      	add	r3, sp, #8
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	ec45 4b10 	vmov	d0, r4, r5
 80057a4:	4653      	mov	r3, sl
 80057a6:	4632      	mov	r2, r6
 80057a8:	f000 fee6 	bl	8006578 <_dtoa_r>
 80057ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057b0:	4607      	mov	r7, r0
 80057b2:	d102      	bne.n	80057ba <__cvt+0x66>
 80057b4:	f019 0f01 	tst.w	r9, #1
 80057b8:	d022      	beq.n	8005800 <__cvt+0xac>
 80057ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057be:	eb07 0906 	add.w	r9, r7, r6
 80057c2:	d110      	bne.n	80057e6 <__cvt+0x92>
 80057c4:	783b      	ldrb	r3, [r7, #0]
 80057c6:	2b30      	cmp	r3, #48	; 0x30
 80057c8:	d10a      	bne.n	80057e0 <__cvt+0x8c>
 80057ca:	2200      	movs	r2, #0
 80057cc:	2300      	movs	r3, #0
 80057ce:	4620      	mov	r0, r4
 80057d0:	4629      	mov	r1, r5
 80057d2:	f7fb f9a1 	bl	8000b18 <__aeabi_dcmpeq>
 80057d6:	b918      	cbnz	r0, 80057e0 <__cvt+0x8c>
 80057d8:	f1c6 0601 	rsb	r6, r6, #1
 80057dc:	f8ca 6000 	str.w	r6, [sl]
 80057e0:	f8da 3000 	ldr.w	r3, [sl]
 80057e4:	4499      	add	r9, r3
 80057e6:	2200      	movs	r2, #0
 80057e8:	2300      	movs	r3, #0
 80057ea:	4620      	mov	r0, r4
 80057ec:	4629      	mov	r1, r5
 80057ee:	f7fb f993 	bl	8000b18 <__aeabi_dcmpeq>
 80057f2:	b108      	cbz	r0, 80057f8 <__cvt+0xa4>
 80057f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80057f8:	2230      	movs	r2, #48	; 0x30
 80057fa:	9b03      	ldr	r3, [sp, #12]
 80057fc:	454b      	cmp	r3, r9
 80057fe:	d307      	bcc.n	8005810 <__cvt+0xbc>
 8005800:	9b03      	ldr	r3, [sp, #12]
 8005802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005804:	1bdb      	subs	r3, r3, r7
 8005806:	4638      	mov	r0, r7
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	b004      	add	sp, #16
 800580c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005810:	1c59      	adds	r1, r3, #1
 8005812:	9103      	str	r1, [sp, #12]
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	e7f0      	b.n	80057fa <__cvt+0xa6>

08005818 <__exponent>:
 8005818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800581a:	4603      	mov	r3, r0
 800581c:	2900      	cmp	r1, #0
 800581e:	bfb8      	it	lt
 8005820:	4249      	neglt	r1, r1
 8005822:	f803 2b02 	strb.w	r2, [r3], #2
 8005826:	bfb4      	ite	lt
 8005828:	222d      	movlt	r2, #45	; 0x2d
 800582a:	222b      	movge	r2, #43	; 0x2b
 800582c:	2909      	cmp	r1, #9
 800582e:	7042      	strb	r2, [r0, #1]
 8005830:	dd2a      	ble.n	8005888 <__exponent+0x70>
 8005832:	f10d 0407 	add.w	r4, sp, #7
 8005836:	46a4      	mov	ip, r4
 8005838:	270a      	movs	r7, #10
 800583a:	46a6      	mov	lr, r4
 800583c:	460a      	mov	r2, r1
 800583e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005842:	fb07 1516 	mls	r5, r7, r6, r1
 8005846:	3530      	adds	r5, #48	; 0x30
 8005848:	2a63      	cmp	r2, #99	; 0x63
 800584a:	f104 34ff 	add.w	r4, r4, #4294967295
 800584e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005852:	4631      	mov	r1, r6
 8005854:	dcf1      	bgt.n	800583a <__exponent+0x22>
 8005856:	3130      	adds	r1, #48	; 0x30
 8005858:	f1ae 0502 	sub.w	r5, lr, #2
 800585c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005860:	1c44      	adds	r4, r0, #1
 8005862:	4629      	mov	r1, r5
 8005864:	4561      	cmp	r1, ip
 8005866:	d30a      	bcc.n	800587e <__exponent+0x66>
 8005868:	f10d 0209 	add.w	r2, sp, #9
 800586c:	eba2 020e 	sub.w	r2, r2, lr
 8005870:	4565      	cmp	r5, ip
 8005872:	bf88      	it	hi
 8005874:	2200      	movhi	r2, #0
 8005876:	4413      	add	r3, r2
 8005878:	1a18      	subs	r0, r3, r0
 800587a:	b003      	add	sp, #12
 800587c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800587e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005882:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005886:	e7ed      	b.n	8005864 <__exponent+0x4c>
 8005888:	2330      	movs	r3, #48	; 0x30
 800588a:	3130      	adds	r1, #48	; 0x30
 800588c:	7083      	strb	r3, [r0, #2]
 800588e:	70c1      	strb	r1, [r0, #3]
 8005890:	1d03      	adds	r3, r0, #4
 8005892:	e7f1      	b.n	8005878 <__exponent+0x60>

08005894 <_printf_float>:
 8005894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005898:	ed2d 8b02 	vpush	{d8}
 800589c:	b08d      	sub	sp, #52	; 0x34
 800589e:	460c      	mov	r4, r1
 80058a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80058a4:	4616      	mov	r6, r2
 80058a6:	461f      	mov	r7, r3
 80058a8:	4605      	mov	r5, r0
 80058aa:	f001 fe0b 	bl	80074c4 <_localeconv_r>
 80058ae:	f8d0 a000 	ldr.w	sl, [r0]
 80058b2:	4650      	mov	r0, sl
 80058b4:	f7fa fcb4 	bl	8000220 <strlen>
 80058b8:	2300      	movs	r3, #0
 80058ba:	930a      	str	r3, [sp, #40]	; 0x28
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	9305      	str	r3, [sp, #20]
 80058c0:	f8d8 3000 	ldr.w	r3, [r8]
 80058c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80058c8:	3307      	adds	r3, #7
 80058ca:	f023 0307 	bic.w	r3, r3, #7
 80058ce:	f103 0208 	add.w	r2, r3, #8
 80058d2:	f8c8 2000 	str.w	r2, [r8]
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80058e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058e6:	9307      	str	r3, [sp, #28]
 80058e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80058ec:	ee08 0a10 	vmov	s16, r0
 80058f0:	4b9f      	ldr	r3, [pc, #636]	; (8005b70 <_printf_float+0x2dc>)
 80058f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058f6:	f04f 32ff 	mov.w	r2, #4294967295
 80058fa:	f7fb f93f 	bl	8000b7c <__aeabi_dcmpun>
 80058fe:	bb88      	cbnz	r0, 8005964 <_printf_float+0xd0>
 8005900:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005904:	4b9a      	ldr	r3, [pc, #616]	; (8005b70 <_printf_float+0x2dc>)
 8005906:	f04f 32ff 	mov.w	r2, #4294967295
 800590a:	f7fb f919 	bl	8000b40 <__aeabi_dcmple>
 800590e:	bb48      	cbnz	r0, 8005964 <_printf_float+0xd0>
 8005910:	2200      	movs	r2, #0
 8005912:	2300      	movs	r3, #0
 8005914:	4640      	mov	r0, r8
 8005916:	4649      	mov	r1, r9
 8005918:	f7fb f908 	bl	8000b2c <__aeabi_dcmplt>
 800591c:	b110      	cbz	r0, 8005924 <_printf_float+0x90>
 800591e:	232d      	movs	r3, #45	; 0x2d
 8005920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005924:	4b93      	ldr	r3, [pc, #588]	; (8005b74 <_printf_float+0x2e0>)
 8005926:	4894      	ldr	r0, [pc, #592]	; (8005b78 <_printf_float+0x2e4>)
 8005928:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800592c:	bf94      	ite	ls
 800592e:	4698      	movls	r8, r3
 8005930:	4680      	movhi	r8, r0
 8005932:	2303      	movs	r3, #3
 8005934:	6123      	str	r3, [r4, #16]
 8005936:	9b05      	ldr	r3, [sp, #20]
 8005938:	f023 0204 	bic.w	r2, r3, #4
 800593c:	6022      	str	r2, [r4, #0]
 800593e:	f04f 0900 	mov.w	r9, #0
 8005942:	9700      	str	r7, [sp, #0]
 8005944:	4633      	mov	r3, r6
 8005946:	aa0b      	add	r2, sp, #44	; 0x2c
 8005948:	4621      	mov	r1, r4
 800594a:	4628      	mov	r0, r5
 800594c:	f000 f9d8 	bl	8005d00 <_printf_common>
 8005950:	3001      	adds	r0, #1
 8005952:	f040 8090 	bne.w	8005a76 <_printf_float+0x1e2>
 8005956:	f04f 30ff 	mov.w	r0, #4294967295
 800595a:	b00d      	add	sp, #52	; 0x34
 800595c:	ecbd 8b02 	vpop	{d8}
 8005960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005964:	4642      	mov	r2, r8
 8005966:	464b      	mov	r3, r9
 8005968:	4640      	mov	r0, r8
 800596a:	4649      	mov	r1, r9
 800596c:	f7fb f906 	bl	8000b7c <__aeabi_dcmpun>
 8005970:	b140      	cbz	r0, 8005984 <_printf_float+0xf0>
 8005972:	464b      	mov	r3, r9
 8005974:	2b00      	cmp	r3, #0
 8005976:	bfbc      	itt	lt
 8005978:	232d      	movlt	r3, #45	; 0x2d
 800597a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800597e:	487f      	ldr	r0, [pc, #508]	; (8005b7c <_printf_float+0x2e8>)
 8005980:	4b7f      	ldr	r3, [pc, #508]	; (8005b80 <_printf_float+0x2ec>)
 8005982:	e7d1      	b.n	8005928 <_printf_float+0x94>
 8005984:	6863      	ldr	r3, [r4, #4]
 8005986:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800598a:	9206      	str	r2, [sp, #24]
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	d13f      	bne.n	8005a10 <_printf_float+0x17c>
 8005990:	2306      	movs	r3, #6
 8005992:	6063      	str	r3, [r4, #4]
 8005994:	9b05      	ldr	r3, [sp, #20]
 8005996:	6861      	ldr	r1, [r4, #4]
 8005998:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800599c:	2300      	movs	r3, #0
 800599e:	9303      	str	r3, [sp, #12]
 80059a0:	ab0a      	add	r3, sp, #40	; 0x28
 80059a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80059a6:	ab09      	add	r3, sp, #36	; 0x24
 80059a8:	ec49 8b10 	vmov	d0, r8, r9
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	6022      	str	r2, [r4, #0]
 80059b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80059b4:	4628      	mov	r0, r5
 80059b6:	f7ff fecd 	bl	8005754 <__cvt>
 80059ba:	9b06      	ldr	r3, [sp, #24]
 80059bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059be:	2b47      	cmp	r3, #71	; 0x47
 80059c0:	4680      	mov	r8, r0
 80059c2:	d108      	bne.n	80059d6 <_printf_float+0x142>
 80059c4:	1cc8      	adds	r0, r1, #3
 80059c6:	db02      	blt.n	80059ce <_printf_float+0x13a>
 80059c8:	6863      	ldr	r3, [r4, #4]
 80059ca:	4299      	cmp	r1, r3
 80059cc:	dd41      	ble.n	8005a52 <_printf_float+0x1be>
 80059ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80059d2:	fa5f fb8b 	uxtb.w	fp, fp
 80059d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059da:	d820      	bhi.n	8005a1e <_printf_float+0x18a>
 80059dc:	3901      	subs	r1, #1
 80059de:	465a      	mov	r2, fp
 80059e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059e4:	9109      	str	r1, [sp, #36]	; 0x24
 80059e6:	f7ff ff17 	bl	8005818 <__exponent>
 80059ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059ec:	1813      	adds	r3, r2, r0
 80059ee:	2a01      	cmp	r2, #1
 80059f0:	4681      	mov	r9, r0
 80059f2:	6123      	str	r3, [r4, #16]
 80059f4:	dc02      	bgt.n	80059fc <_printf_float+0x168>
 80059f6:	6822      	ldr	r2, [r4, #0]
 80059f8:	07d2      	lsls	r2, r2, #31
 80059fa:	d501      	bpl.n	8005a00 <_printf_float+0x16c>
 80059fc:	3301      	adds	r3, #1
 80059fe:	6123      	str	r3, [r4, #16]
 8005a00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d09c      	beq.n	8005942 <_printf_float+0xae>
 8005a08:	232d      	movs	r3, #45	; 0x2d
 8005a0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a0e:	e798      	b.n	8005942 <_printf_float+0xae>
 8005a10:	9a06      	ldr	r2, [sp, #24]
 8005a12:	2a47      	cmp	r2, #71	; 0x47
 8005a14:	d1be      	bne.n	8005994 <_printf_float+0x100>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1bc      	bne.n	8005994 <_printf_float+0x100>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e7b9      	b.n	8005992 <_printf_float+0xfe>
 8005a1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a22:	d118      	bne.n	8005a56 <_printf_float+0x1c2>
 8005a24:	2900      	cmp	r1, #0
 8005a26:	6863      	ldr	r3, [r4, #4]
 8005a28:	dd0b      	ble.n	8005a42 <_printf_float+0x1ae>
 8005a2a:	6121      	str	r1, [r4, #16]
 8005a2c:	b913      	cbnz	r3, 8005a34 <_printf_float+0x1a0>
 8005a2e:	6822      	ldr	r2, [r4, #0]
 8005a30:	07d0      	lsls	r0, r2, #31
 8005a32:	d502      	bpl.n	8005a3a <_printf_float+0x1a6>
 8005a34:	3301      	adds	r3, #1
 8005a36:	440b      	add	r3, r1
 8005a38:	6123      	str	r3, [r4, #16]
 8005a3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a3c:	f04f 0900 	mov.w	r9, #0
 8005a40:	e7de      	b.n	8005a00 <_printf_float+0x16c>
 8005a42:	b913      	cbnz	r3, 8005a4a <_printf_float+0x1b6>
 8005a44:	6822      	ldr	r2, [r4, #0]
 8005a46:	07d2      	lsls	r2, r2, #31
 8005a48:	d501      	bpl.n	8005a4e <_printf_float+0x1ba>
 8005a4a:	3302      	adds	r3, #2
 8005a4c:	e7f4      	b.n	8005a38 <_printf_float+0x1a4>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e7f2      	b.n	8005a38 <_printf_float+0x1a4>
 8005a52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a58:	4299      	cmp	r1, r3
 8005a5a:	db05      	blt.n	8005a68 <_printf_float+0x1d4>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	6121      	str	r1, [r4, #16]
 8005a60:	07d8      	lsls	r0, r3, #31
 8005a62:	d5ea      	bpl.n	8005a3a <_printf_float+0x1a6>
 8005a64:	1c4b      	adds	r3, r1, #1
 8005a66:	e7e7      	b.n	8005a38 <_printf_float+0x1a4>
 8005a68:	2900      	cmp	r1, #0
 8005a6a:	bfd4      	ite	le
 8005a6c:	f1c1 0202 	rsble	r2, r1, #2
 8005a70:	2201      	movgt	r2, #1
 8005a72:	4413      	add	r3, r2
 8005a74:	e7e0      	b.n	8005a38 <_printf_float+0x1a4>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	055a      	lsls	r2, r3, #21
 8005a7a:	d407      	bmi.n	8005a8c <_printf_float+0x1f8>
 8005a7c:	6923      	ldr	r3, [r4, #16]
 8005a7e:	4642      	mov	r2, r8
 8005a80:	4631      	mov	r1, r6
 8005a82:	4628      	mov	r0, r5
 8005a84:	47b8      	blx	r7
 8005a86:	3001      	adds	r0, #1
 8005a88:	d12c      	bne.n	8005ae4 <_printf_float+0x250>
 8005a8a:	e764      	b.n	8005956 <_printf_float+0xc2>
 8005a8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a90:	f240 80e0 	bls.w	8005c54 <_printf_float+0x3c0>
 8005a94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a98:	2200      	movs	r2, #0
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f7fb f83c 	bl	8000b18 <__aeabi_dcmpeq>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d034      	beq.n	8005b0e <_printf_float+0x27a>
 8005aa4:	4a37      	ldr	r2, [pc, #220]	; (8005b84 <_printf_float+0x2f0>)
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	4628      	mov	r0, r5
 8005aac:	47b8      	blx	r7
 8005aae:	3001      	adds	r0, #1
 8005ab0:	f43f af51 	beq.w	8005956 <_printf_float+0xc2>
 8005ab4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	db02      	blt.n	8005ac2 <_printf_float+0x22e>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	07d8      	lsls	r0, r3, #31
 8005ac0:	d510      	bpl.n	8005ae4 <_printf_float+0x250>
 8005ac2:	ee18 3a10 	vmov	r3, s16
 8005ac6:	4652      	mov	r2, sl
 8005ac8:	4631      	mov	r1, r6
 8005aca:	4628      	mov	r0, r5
 8005acc:	47b8      	blx	r7
 8005ace:	3001      	adds	r0, #1
 8005ad0:	f43f af41 	beq.w	8005956 <_printf_float+0xc2>
 8005ad4:	f04f 0800 	mov.w	r8, #0
 8005ad8:	f104 091a 	add.w	r9, r4, #26
 8005adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	4543      	cmp	r3, r8
 8005ae2:	dc09      	bgt.n	8005af8 <_printf_float+0x264>
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	079b      	lsls	r3, r3, #30
 8005ae8:	f100 8105 	bmi.w	8005cf6 <_printf_float+0x462>
 8005aec:	68e0      	ldr	r0, [r4, #12]
 8005aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005af0:	4298      	cmp	r0, r3
 8005af2:	bfb8      	it	lt
 8005af4:	4618      	movlt	r0, r3
 8005af6:	e730      	b.n	800595a <_printf_float+0xc6>
 8005af8:	2301      	movs	r3, #1
 8005afa:	464a      	mov	r2, r9
 8005afc:	4631      	mov	r1, r6
 8005afe:	4628      	mov	r0, r5
 8005b00:	47b8      	blx	r7
 8005b02:	3001      	adds	r0, #1
 8005b04:	f43f af27 	beq.w	8005956 <_printf_float+0xc2>
 8005b08:	f108 0801 	add.w	r8, r8, #1
 8005b0c:	e7e6      	b.n	8005adc <_printf_float+0x248>
 8005b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	dc39      	bgt.n	8005b88 <_printf_float+0x2f4>
 8005b14:	4a1b      	ldr	r2, [pc, #108]	; (8005b84 <_printf_float+0x2f0>)
 8005b16:	2301      	movs	r3, #1
 8005b18:	4631      	mov	r1, r6
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	47b8      	blx	r7
 8005b1e:	3001      	adds	r0, #1
 8005b20:	f43f af19 	beq.w	8005956 <_printf_float+0xc2>
 8005b24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	d102      	bne.n	8005b32 <_printf_float+0x29e>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	07d9      	lsls	r1, r3, #31
 8005b30:	d5d8      	bpl.n	8005ae4 <_printf_float+0x250>
 8005b32:	ee18 3a10 	vmov	r3, s16
 8005b36:	4652      	mov	r2, sl
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	47b8      	blx	r7
 8005b3e:	3001      	adds	r0, #1
 8005b40:	f43f af09 	beq.w	8005956 <_printf_float+0xc2>
 8005b44:	f04f 0900 	mov.w	r9, #0
 8005b48:	f104 0a1a 	add.w	sl, r4, #26
 8005b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b4e:	425b      	negs	r3, r3
 8005b50:	454b      	cmp	r3, r9
 8005b52:	dc01      	bgt.n	8005b58 <_printf_float+0x2c4>
 8005b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b56:	e792      	b.n	8005a7e <_printf_float+0x1ea>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	4652      	mov	r2, sl
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	4628      	mov	r0, r5
 8005b60:	47b8      	blx	r7
 8005b62:	3001      	adds	r0, #1
 8005b64:	f43f aef7 	beq.w	8005956 <_printf_float+0xc2>
 8005b68:	f109 0901 	add.w	r9, r9, #1
 8005b6c:	e7ee      	b.n	8005b4c <_printf_float+0x2b8>
 8005b6e:	bf00      	nop
 8005b70:	7fefffff 	.word	0x7fefffff
 8005b74:	0800961c 	.word	0x0800961c
 8005b78:	08009620 	.word	0x08009620
 8005b7c:	08009628 	.word	0x08009628
 8005b80:	08009624 	.word	0x08009624
 8005b84:	0800962c 	.word	0x0800962c
 8005b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	bfa8      	it	ge
 8005b90:	461a      	movge	r2, r3
 8005b92:	2a00      	cmp	r2, #0
 8005b94:	4691      	mov	r9, r2
 8005b96:	dc37      	bgt.n	8005c08 <_printf_float+0x374>
 8005b98:	f04f 0b00 	mov.w	fp, #0
 8005b9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ba0:	f104 021a 	add.w	r2, r4, #26
 8005ba4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ba6:	9305      	str	r3, [sp, #20]
 8005ba8:	eba3 0309 	sub.w	r3, r3, r9
 8005bac:	455b      	cmp	r3, fp
 8005bae:	dc33      	bgt.n	8005c18 <_printf_float+0x384>
 8005bb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	db3b      	blt.n	8005c30 <_printf_float+0x39c>
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	07da      	lsls	r2, r3, #31
 8005bbc:	d438      	bmi.n	8005c30 <_printf_float+0x39c>
 8005bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc0:	9a05      	ldr	r2, [sp, #20]
 8005bc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bc4:	1a9a      	subs	r2, r3, r2
 8005bc6:	eba3 0901 	sub.w	r9, r3, r1
 8005bca:	4591      	cmp	r9, r2
 8005bcc:	bfa8      	it	ge
 8005bce:	4691      	movge	r9, r2
 8005bd0:	f1b9 0f00 	cmp.w	r9, #0
 8005bd4:	dc35      	bgt.n	8005c42 <_printf_float+0x3ae>
 8005bd6:	f04f 0800 	mov.w	r8, #0
 8005bda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bde:	f104 0a1a 	add.w	sl, r4, #26
 8005be2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005be6:	1a9b      	subs	r3, r3, r2
 8005be8:	eba3 0309 	sub.w	r3, r3, r9
 8005bec:	4543      	cmp	r3, r8
 8005bee:	f77f af79 	ble.w	8005ae4 <_printf_float+0x250>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4652      	mov	r2, sl
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	47b8      	blx	r7
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	f43f aeaa 	beq.w	8005956 <_printf_float+0xc2>
 8005c02:	f108 0801 	add.w	r8, r8, #1
 8005c06:	e7ec      	b.n	8005be2 <_printf_float+0x34e>
 8005c08:	4613      	mov	r3, r2
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	4628      	mov	r0, r5
 8005c10:	47b8      	blx	r7
 8005c12:	3001      	adds	r0, #1
 8005c14:	d1c0      	bne.n	8005b98 <_printf_float+0x304>
 8005c16:	e69e      	b.n	8005956 <_printf_float+0xc2>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	4631      	mov	r1, r6
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	9205      	str	r2, [sp, #20]
 8005c20:	47b8      	blx	r7
 8005c22:	3001      	adds	r0, #1
 8005c24:	f43f ae97 	beq.w	8005956 <_printf_float+0xc2>
 8005c28:	9a05      	ldr	r2, [sp, #20]
 8005c2a:	f10b 0b01 	add.w	fp, fp, #1
 8005c2e:	e7b9      	b.n	8005ba4 <_printf_float+0x310>
 8005c30:	ee18 3a10 	vmov	r3, s16
 8005c34:	4652      	mov	r2, sl
 8005c36:	4631      	mov	r1, r6
 8005c38:	4628      	mov	r0, r5
 8005c3a:	47b8      	blx	r7
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d1be      	bne.n	8005bbe <_printf_float+0x32a>
 8005c40:	e689      	b.n	8005956 <_printf_float+0xc2>
 8005c42:	9a05      	ldr	r2, [sp, #20]
 8005c44:	464b      	mov	r3, r9
 8005c46:	4442      	add	r2, r8
 8005c48:	4631      	mov	r1, r6
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	47b8      	blx	r7
 8005c4e:	3001      	adds	r0, #1
 8005c50:	d1c1      	bne.n	8005bd6 <_printf_float+0x342>
 8005c52:	e680      	b.n	8005956 <_printf_float+0xc2>
 8005c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c56:	2a01      	cmp	r2, #1
 8005c58:	dc01      	bgt.n	8005c5e <_printf_float+0x3ca>
 8005c5a:	07db      	lsls	r3, r3, #31
 8005c5c:	d538      	bpl.n	8005cd0 <_printf_float+0x43c>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	4642      	mov	r2, r8
 8005c62:	4631      	mov	r1, r6
 8005c64:	4628      	mov	r0, r5
 8005c66:	47b8      	blx	r7
 8005c68:	3001      	adds	r0, #1
 8005c6a:	f43f ae74 	beq.w	8005956 <_printf_float+0xc2>
 8005c6e:	ee18 3a10 	vmov	r3, s16
 8005c72:	4652      	mov	r2, sl
 8005c74:	4631      	mov	r1, r6
 8005c76:	4628      	mov	r0, r5
 8005c78:	47b8      	blx	r7
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	f43f ae6b 	beq.w	8005956 <_printf_float+0xc2>
 8005c80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c84:	2200      	movs	r2, #0
 8005c86:	2300      	movs	r3, #0
 8005c88:	f7fa ff46 	bl	8000b18 <__aeabi_dcmpeq>
 8005c8c:	b9d8      	cbnz	r0, 8005cc6 <_printf_float+0x432>
 8005c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c90:	f108 0201 	add.w	r2, r8, #1
 8005c94:	3b01      	subs	r3, #1
 8005c96:	4631      	mov	r1, r6
 8005c98:	4628      	mov	r0, r5
 8005c9a:	47b8      	blx	r7
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d10e      	bne.n	8005cbe <_printf_float+0x42a>
 8005ca0:	e659      	b.n	8005956 <_printf_float+0xc2>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4652      	mov	r2, sl
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4628      	mov	r0, r5
 8005caa:	47b8      	blx	r7
 8005cac:	3001      	adds	r0, #1
 8005cae:	f43f ae52 	beq.w	8005956 <_printf_float+0xc2>
 8005cb2:	f108 0801 	add.w	r8, r8, #1
 8005cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	4543      	cmp	r3, r8
 8005cbc:	dcf1      	bgt.n	8005ca2 <_printf_float+0x40e>
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005cc4:	e6dc      	b.n	8005a80 <_printf_float+0x1ec>
 8005cc6:	f04f 0800 	mov.w	r8, #0
 8005cca:	f104 0a1a 	add.w	sl, r4, #26
 8005cce:	e7f2      	b.n	8005cb6 <_printf_float+0x422>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	4642      	mov	r2, r8
 8005cd4:	e7df      	b.n	8005c96 <_printf_float+0x402>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	464a      	mov	r2, r9
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4628      	mov	r0, r5
 8005cde:	47b8      	blx	r7
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	f43f ae38 	beq.w	8005956 <_printf_float+0xc2>
 8005ce6:	f108 0801 	add.w	r8, r8, #1
 8005cea:	68e3      	ldr	r3, [r4, #12]
 8005cec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cee:	1a5b      	subs	r3, r3, r1
 8005cf0:	4543      	cmp	r3, r8
 8005cf2:	dcf0      	bgt.n	8005cd6 <_printf_float+0x442>
 8005cf4:	e6fa      	b.n	8005aec <_printf_float+0x258>
 8005cf6:	f04f 0800 	mov.w	r8, #0
 8005cfa:	f104 0919 	add.w	r9, r4, #25
 8005cfe:	e7f4      	b.n	8005cea <_printf_float+0x456>

08005d00 <_printf_common>:
 8005d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d04:	4616      	mov	r6, r2
 8005d06:	4699      	mov	r9, r3
 8005d08:	688a      	ldr	r2, [r1, #8]
 8005d0a:	690b      	ldr	r3, [r1, #16]
 8005d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d10:	4293      	cmp	r3, r2
 8005d12:	bfb8      	it	lt
 8005d14:	4613      	movlt	r3, r2
 8005d16:	6033      	str	r3, [r6, #0]
 8005d18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	b10a      	cbz	r2, 8005d26 <_printf_common+0x26>
 8005d22:	3301      	adds	r3, #1
 8005d24:	6033      	str	r3, [r6, #0]
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	0699      	lsls	r1, r3, #26
 8005d2a:	bf42      	ittt	mi
 8005d2c:	6833      	ldrmi	r3, [r6, #0]
 8005d2e:	3302      	addmi	r3, #2
 8005d30:	6033      	strmi	r3, [r6, #0]
 8005d32:	6825      	ldr	r5, [r4, #0]
 8005d34:	f015 0506 	ands.w	r5, r5, #6
 8005d38:	d106      	bne.n	8005d48 <_printf_common+0x48>
 8005d3a:	f104 0a19 	add.w	sl, r4, #25
 8005d3e:	68e3      	ldr	r3, [r4, #12]
 8005d40:	6832      	ldr	r2, [r6, #0]
 8005d42:	1a9b      	subs	r3, r3, r2
 8005d44:	42ab      	cmp	r3, r5
 8005d46:	dc26      	bgt.n	8005d96 <_printf_common+0x96>
 8005d48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d4c:	1e13      	subs	r3, r2, #0
 8005d4e:	6822      	ldr	r2, [r4, #0]
 8005d50:	bf18      	it	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	0692      	lsls	r2, r2, #26
 8005d56:	d42b      	bmi.n	8005db0 <_printf_common+0xb0>
 8005d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d5c:	4649      	mov	r1, r9
 8005d5e:	4638      	mov	r0, r7
 8005d60:	47c0      	blx	r8
 8005d62:	3001      	adds	r0, #1
 8005d64:	d01e      	beq.n	8005da4 <_printf_common+0xa4>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	68e5      	ldr	r5, [r4, #12]
 8005d6a:	6832      	ldr	r2, [r6, #0]
 8005d6c:	f003 0306 	and.w	r3, r3, #6
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	bf08      	it	eq
 8005d74:	1aad      	subeq	r5, r5, r2
 8005d76:	68a3      	ldr	r3, [r4, #8]
 8005d78:	6922      	ldr	r2, [r4, #16]
 8005d7a:	bf0c      	ite	eq
 8005d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d80:	2500      	movne	r5, #0
 8005d82:	4293      	cmp	r3, r2
 8005d84:	bfc4      	itt	gt
 8005d86:	1a9b      	subgt	r3, r3, r2
 8005d88:	18ed      	addgt	r5, r5, r3
 8005d8a:	2600      	movs	r6, #0
 8005d8c:	341a      	adds	r4, #26
 8005d8e:	42b5      	cmp	r5, r6
 8005d90:	d11a      	bne.n	8005dc8 <_printf_common+0xc8>
 8005d92:	2000      	movs	r0, #0
 8005d94:	e008      	b.n	8005da8 <_printf_common+0xa8>
 8005d96:	2301      	movs	r3, #1
 8005d98:	4652      	mov	r2, sl
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	47c0      	blx	r8
 8005da0:	3001      	adds	r0, #1
 8005da2:	d103      	bne.n	8005dac <_printf_common+0xac>
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dac:	3501      	adds	r5, #1
 8005dae:	e7c6      	b.n	8005d3e <_printf_common+0x3e>
 8005db0:	18e1      	adds	r1, r4, r3
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	2030      	movs	r0, #48	; 0x30
 8005db6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dba:	4422      	add	r2, r4
 8005dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dc4:	3302      	adds	r3, #2
 8005dc6:	e7c7      	b.n	8005d58 <_printf_common+0x58>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	4622      	mov	r2, r4
 8005dcc:	4649      	mov	r1, r9
 8005dce:	4638      	mov	r0, r7
 8005dd0:	47c0      	blx	r8
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d0e6      	beq.n	8005da4 <_printf_common+0xa4>
 8005dd6:	3601      	adds	r6, #1
 8005dd8:	e7d9      	b.n	8005d8e <_printf_common+0x8e>
	...

08005ddc <_printf_i>:
 8005ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de0:	7e0f      	ldrb	r7, [r1, #24]
 8005de2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005de4:	2f78      	cmp	r7, #120	; 0x78
 8005de6:	4691      	mov	r9, r2
 8005de8:	4680      	mov	r8, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	469a      	mov	sl, r3
 8005dee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005df2:	d807      	bhi.n	8005e04 <_printf_i+0x28>
 8005df4:	2f62      	cmp	r7, #98	; 0x62
 8005df6:	d80a      	bhi.n	8005e0e <_printf_i+0x32>
 8005df8:	2f00      	cmp	r7, #0
 8005dfa:	f000 80d8 	beq.w	8005fae <_printf_i+0x1d2>
 8005dfe:	2f58      	cmp	r7, #88	; 0x58
 8005e00:	f000 80a3 	beq.w	8005f4a <_printf_i+0x16e>
 8005e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e0c:	e03a      	b.n	8005e84 <_printf_i+0xa8>
 8005e0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e12:	2b15      	cmp	r3, #21
 8005e14:	d8f6      	bhi.n	8005e04 <_printf_i+0x28>
 8005e16:	a101      	add	r1, pc, #4	; (adr r1, 8005e1c <_printf_i+0x40>)
 8005e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e1c:	08005e75 	.word	0x08005e75
 8005e20:	08005e89 	.word	0x08005e89
 8005e24:	08005e05 	.word	0x08005e05
 8005e28:	08005e05 	.word	0x08005e05
 8005e2c:	08005e05 	.word	0x08005e05
 8005e30:	08005e05 	.word	0x08005e05
 8005e34:	08005e89 	.word	0x08005e89
 8005e38:	08005e05 	.word	0x08005e05
 8005e3c:	08005e05 	.word	0x08005e05
 8005e40:	08005e05 	.word	0x08005e05
 8005e44:	08005e05 	.word	0x08005e05
 8005e48:	08005f95 	.word	0x08005f95
 8005e4c:	08005eb9 	.word	0x08005eb9
 8005e50:	08005f77 	.word	0x08005f77
 8005e54:	08005e05 	.word	0x08005e05
 8005e58:	08005e05 	.word	0x08005e05
 8005e5c:	08005fb7 	.word	0x08005fb7
 8005e60:	08005e05 	.word	0x08005e05
 8005e64:	08005eb9 	.word	0x08005eb9
 8005e68:	08005e05 	.word	0x08005e05
 8005e6c:	08005e05 	.word	0x08005e05
 8005e70:	08005f7f 	.word	0x08005f7f
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	1d1a      	adds	r2, r3, #4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	602a      	str	r2, [r5, #0]
 8005e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e84:	2301      	movs	r3, #1
 8005e86:	e0a3      	b.n	8005fd0 <_printf_i+0x1f4>
 8005e88:	6820      	ldr	r0, [r4, #0]
 8005e8a:	6829      	ldr	r1, [r5, #0]
 8005e8c:	0606      	lsls	r6, r0, #24
 8005e8e:	f101 0304 	add.w	r3, r1, #4
 8005e92:	d50a      	bpl.n	8005eaa <_printf_i+0xce>
 8005e94:	680e      	ldr	r6, [r1, #0]
 8005e96:	602b      	str	r3, [r5, #0]
 8005e98:	2e00      	cmp	r6, #0
 8005e9a:	da03      	bge.n	8005ea4 <_printf_i+0xc8>
 8005e9c:	232d      	movs	r3, #45	; 0x2d
 8005e9e:	4276      	negs	r6, r6
 8005ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea4:	485e      	ldr	r0, [pc, #376]	; (8006020 <_printf_i+0x244>)
 8005ea6:	230a      	movs	r3, #10
 8005ea8:	e019      	b.n	8005ede <_printf_i+0x102>
 8005eaa:	680e      	ldr	r6, [r1, #0]
 8005eac:	602b      	str	r3, [r5, #0]
 8005eae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005eb2:	bf18      	it	ne
 8005eb4:	b236      	sxthne	r6, r6
 8005eb6:	e7ef      	b.n	8005e98 <_printf_i+0xbc>
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	6820      	ldr	r0, [r4, #0]
 8005ebc:	1d19      	adds	r1, r3, #4
 8005ebe:	6029      	str	r1, [r5, #0]
 8005ec0:	0601      	lsls	r1, r0, #24
 8005ec2:	d501      	bpl.n	8005ec8 <_printf_i+0xec>
 8005ec4:	681e      	ldr	r6, [r3, #0]
 8005ec6:	e002      	b.n	8005ece <_printf_i+0xf2>
 8005ec8:	0646      	lsls	r6, r0, #25
 8005eca:	d5fb      	bpl.n	8005ec4 <_printf_i+0xe8>
 8005ecc:	881e      	ldrh	r6, [r3, #0]
 8005ece:	4854      	ldr	r0, [pc, #336]	; (8006020 <_printf_i+0x244>)
 8005ed0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ed2:	bf0c      	ite	eq
 8005ed4:	2308      	moveq	r3, #8
 8005ed6:	230a      	movne	r3, #10
 8005ed8:	2100      	movs	r1, #0
 8005eda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ede:	6865      	ldr	r5, [r4, #4]
 8005ee0:	60a5      	str	r5, [r4, #8]
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	bfa2      	ittt	ge
 8005ee6:	6821      	ldrge	r1, [r4, #0]
 8005ee8:	f021 0104 	bicge.w	r1, r1, #4
 8005eec:	6021      	strge	r1, [r4, #0]
 8005eee:	b90e      	cbnz	r6, 8005ef4 <_printf_i+0x118>
 8005ef0:	2d00      	cmp	r5, #0
 8005ef2:	d04d      	beq.n	8005f90 <_printf_i+0x1b4>
 8005ef4:	4615      	mov	r5, r2
 8005ef6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005efa:	fb03 6711 	mls	r7, r3, r1, r6
 8005efe:	5dc7      	ldrb	r7, [r0, r7]
 8005f00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f04:	4637      	mov	r7, r6
 8005f06:	42bb      	cmp	r3, r7
 8005f08:	460e      	mov	r6, r1
 8005f0a:	d9f4      	bls.n	8005ef6 <_printf_i+0x11a>
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d10b      	bne.n	8005f28 <_printf_i+0x14c>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	07de      	lsls	r6, r3, #31
 8005f14:	d508      	bpl.n	8005f28 <_printf_i+0x14c>
 8005f16:	6923      	ldr	r3, [r4, #16]
 8005f18:	6861      	ldr	r1, [r4, #4]
 8005f1a:	4299      	cmp	r1, r3
 8005f1c:	bfde      	ittt	le
 8005f1e:	2330      	movle	r3, #48	; 0x30
 8005f20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f28:	1b52      	subs	r2, r2, r5
 8005f2a:	6122      	str	r2, [r4, #16]
 8005f2c:	f8cd a000 	str.w	sl, [sp]
 8005f30:	464b      	mov	r3, r9
 8005f32:	aa03      	add	r2, sp, #12
 8005f34:	4621      	mov	r1, r4
 8005f36:	4640      	mov	r0, r8
 8005f38:	f7ff fee2 	bl	8005d00 <_printf_common>
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d14c      	bne.n	8005fda <_printf_i+0x1fe>
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	b004      	add	sp, #16
 8005f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4a:	4835      	ldr	r0, [pc, #212]	; (8006020 <_printf_i+0x244>)
 8005f4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f50:	6829      	ldr	r1, [r5, #0]
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f58:	6029      	str	r1, [r5, #0]
 8005f5a:	061d      	lsls	r5, r3, #24
 8005f5c:	d514      	bpl.n	8005f88 <_printf_i+0x1ac>
 8005f5e:	07df      	lsls	r7, r3, #31
 8005f60:	bf44      	itt	mi
 8005f62:	f043 0320 	orrmi.w	r3, r3, #32
 8005f66:	6023      	strmi	r3, [r4, #0]
 8005f68:	b91e      	cbnz	r6, 8005f72 <_printf_i+0x196>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	f023 0320 	bic.w	r3, r3, #32
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	2310      	movs	r3, #16
 8005f74:	e7b0      	b.n	8005ed8 <_printf_i+0xfc>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	f043 0320 	orr.w	r3, r3, #32
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	2378      	movs	r3, #120	; 0x78
 8005f80:	4828      	ldr	r0, [pc, #160]	; (8006024 <_printf_i+0x248>)
 8005f82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f86:	e7e3      	b.n	8005f50 <_printf_i+0x174>
 8005f88:	0659      	lsls	r1, r3, #25
 8005f8a:	bf48      	it	mi
 8005f8c:	b2b6      	uxthmi	r6, r6
 8005f8e:	e7e6      	b.n	8005f5e <_printf_i+0x182>
 8005f90:	4615      	mov	r5, r2
 8005f92:	e7bb      	b.n	8005f0c <_printf_i+0x130>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	6826      	ldr	r6, [r4, #0]
 8005f98:	6961      	ldr	r1, [r4, #20]
 8005f9a:	1d18      	adds	r0, r3, #4
 8005f9c:	6028      	str	r0, [r5, #0]
 8005f9e:	0635      	lsls	r5, r6, #24
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	d501      	bpl.n	8005fa8 <_printf_i+0x1cc>
 8005fa4:	6019      	str	r1, [r3, #0]
 8005fa6:	e002      	b.n	8005fae <_printf_i+0x1d2>
 8005fa8:	0670      	lsls	r0, r6, #25
 8005faa:	d5fb      	bpl.n	8005fa4 <_printf_i+0x1c8>
 8005fac:	8019      	strh	r1, [r3, #0]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	6123      	str	r3, [r4, #16]
 8005fb2:	4615      	mov	r5, r2
 8005fb4:	e7ba      	b.n	8005f2c <_printf_i+0x150>
 8005fb6:	682b      	ldr	r3, [r5, #0]
 8005fb8:	1d1a      	adds	r2, r3, #4
 8005fba:	602a      	str	r2, [r5, #0]
 8005fbc:	681d      	ldr	r5, [r3, #0]
 8005fbe:	6862      	ldr	r2, [r4, #4]
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f7fa f934 	bl	8000230 <memchr>
 8005fc8:	b108      	cbz	r0, 8005fce <_printf_i+0x1f2>
 8005fca:	1b40      	subs	r0, r0, r5
 8005fcc:	6060      	str	r0, [r4, #4]
 8005fce:	6863      	ldr	r3, [r4, #4]
 8005fd0:	6123      	str	r3, [r4, #16]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd8:	e7a8      	b.n	8005f2c <_printf_i+0x150>
 8005fda:	6923      	ldr	r3, [r4, #16]
 8005fdc:	462a      	mov	r2, r5
 8005fde:	4649      	mov	r1, r9
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	47d0      	blx	sl
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d0ab      	beq.n	8005f40 <_printf_i+0x164>
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	079b      	lsls	r3, r3, #30
 8005fec:	d413      	bmi.n	8006016 <_printf_i+0x23a>
 8005fee:	68e0      	ldr	r0, [r4, #12]
 8005ff0:	9b03      	ldr	r3, [sp, #12]
 8005ff2:	4298      	cmp	r0, r3
 8005ff4:	bfb8      	it	lt
 8005ff6:	4618      	movlt	r0, r3
 8005ff8:	e7a4      	b.n	8005f44 <_printf_i+0x168>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	4632      	mov	r2, r6
 8005ffe:	4649      	mov	r1, r9
 8006000:	4640      	mov	r0, r8
 8006002:	47d0      	blx	sl
 8006004:	3001      	adds	r0, #1
 8006006:	d09b      	beq.n	8005f40 <_printf_i+0x164>
 8006008:	3501      	adds	r5, #1
 800600a:	68e3      	ldr	r3, [r4, #12]
 800600c:	9903      	ldr	r1, [sp, #12]
 800600e:	1a5b      	subs	r3, r3, r1
 8006010:	42ab      	cmp	r3, r5
 8006012:	dcf2      	bgt.n	8005ffa <_printf_i+0x21e>
 8006014:	e7eb      	b.n	8005fee <_printf_i+0x212>
 8006016:	2500      	movs	r5, #0
 8006018:	f104 0619 	add.w	r6, r4, #25
 800601c:	e7f5      	b.n	800600a <_printf_i+0x22e>
 800601e:	bf00      	nop
 8006020:	0800962e 	.word	0x0800962e
 8006024:	0800963f 	.word	0x0800963f

08006028 <iprintf>:
 8006028:	b40f      	push	{r0, r1, r2, r3}
 800602a:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <iprintf+0x2c>)
 800602c:	b513      	push	{r0, r1, r4, lr}
 800602e:	681c      	ldr	r4, [r3, #0]
 8006030:	b124      	cbz	r4, 800603c <iprintf+0x14>
 8006032:	69a3      	ldr	r3, [r4, #24]
 8006034:	b913      	cbnz	r3, 800603c <iprintf+0x14>
 8006036:	4620      	mov	r0, r4
 8006038:	f001 f9a6 	bl	8007388 <__sinit>
 800603c:	ab05      	add	r3, sp, #20
 800603e:	9a04      	ldr	r2, [sp, #16]
 8006040:	68a1      	ldr	r1, [r4, #8]
 8006042:	9301      	str	r3, [sp, #4]
 8006044:	4620      	mov	r0, r4
 8006046:	f001 ff63 	bl	8007f10 <_vfiprintf_r>
 800604a:	b002      	add	sp, #8
 800604c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006050:	b004      	add	sp, #16
 8006052:	4770      	bx	lr
 8006054:	2000000c 	.word	0x2000000c

08006058 <_puts_r>:
 8006058:	b570      	push	{r4, r5, r6, lr}
 800605a:	460e      	mov	r6, r1
 800605c:	4605      	mov	r5, r0
 800605e:	b118      	cbz	r0, 8006068 <_puts_r+0x10>
 8006060:	6983      	ldr	r3, [r0, #24]
 8006062:	b90b      	cbnz	r3, 8006068 <_puts_r+0x10>
 8006064:	f001 f990 	bl	8007388 <__sinit>
 8006068:	69ab      	ldr	r3, [r5, #24]
 800606a:	68ac      	ldr	r4, [r5, #8]
 800606c:	b913      	cbnz	r3, 8006074 <_puts_r+0x1c>
 800606e:	4628      	mov	r0, r5
 8006070:	f001 f98a 	bl	8007388 <__sinit>
 8006074:	4b2c      	ldr	r3, [pc, #176]	; (8006128 <_puts_r+0xd0>)
 8006076:	429c      	cmp	r4, r3
 8006078:	d120      	bne.n	80060bc <_puts_r+0x64>
 800607a:	686c      	ldr	r4, [r5, #4]
 800607c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800607e:	07db      	lsls	r3, r3, #31
 8006080:	d405      	bmi.n	800608e <_puts_r+0x36>
 8006082:	89a3      	ldrh	r3, [r4, #12]
 8006084:	0598      	lsls	r0, r3, #22
 8006086:	d402      	bmi.n	800608e <_puts_r+0x36>
 8006088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800608a:	f001 fa20 	bl	80074ce <__retarget_lock_acquire_recursive>
 800608e:	89a3      	ldrh	r3, [r4, #12]
 8006090:	0719      	lsls	r1, r3, #28
 8006092:	d51d      	bpl.n	80060d0 <_puts_r+0x78>
 8006094:	6923      	ldr	r3, [r4, #16]
 8006096:	b1db      	cbz	r3, 80060d0 <_puts_r+0x78>
 8006098:	3e01      	subs	r6, #1
 800609a:	68a3      	ldr	r3, [r4, #8]
 800609c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060a0:	3b01      	subs	r3, #1
 80060a2:	60a3      	str	r3, [r4, #8]
 80060a4:	bb39      	cbnz	r1, 80060f6 <_puts_r+0x9e>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	da38      	bge.n	800611c <_puts_r+0xc4>
 80060aa:	4622      	mov	r2, r4
 80060ac:	210a      	movs	r1, #10
 80060ae:	4628      	mov	r0, r5
 80060b0:	f000 f916 	bl	80062e0 <__swbuf_r>
 80060b4:	3001      	adds	r0, #1
 80060b6:	d011      	beq.n	80060dc <_puts_r+0x84>
 80060b8:	250a      	movs	r5, #10
 80060ba:	e011      	b.n	80060e0 <_puts_r+0x88>
 80060bc:	4b1b      	ldr	r3, [pc, #108]	; (800612c <_puts_r+0xd4>)
 80060be:	429c      	cmp	r4, r3
 80060c0:	d101      	bne.n	80060c6 <_puts_r+0x6e>
 80060c2:	68ac      	ldr	r4, [r5, #8]
 80060c4:	e7da      	b.n	800607c <_puts_r+0x24>
 80060c6:	4b1a      	ldr	r3, [pc, #104]	; (8006130 <_puts_r+0xd8>)
 80060c8:	429c      	cmp	r4, r3
 80060ca:	bf08      	it	eq
 80060cc:	68ec      	ldreq	r4, [r5, #12]
 80060ce:	e7d5      	b.n	800607c <_puts_r+0x24>
 80060d0:	4621      	mov	r1, r4
 80060d2:	4628      	mov	r0, r5
 80060d4:	f000 f956 	bl	8006384 <__swsetup_r>
 80060d8:	2800      	cmp	r0, #0
 80060da:	d0dd      	beq.n	8006098 <_puts_r+0x40>
 80060dc:	f04f 35ff 	mov.w	r5, #4294967295
 80060e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060e2:	07da      	lsls	r2, r3, #31
 80060e4:	d405      	bmi.n	80060f2 <_puts_r+0x9a>
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	059b      	lsls	r3, r3, #22
 80060ea:	d402      	bmi.n	80060f2 <_puts_r+0x9a>
 80060ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ee:	f001 f9ef 	bl	80074d0 <__retarget_lock_release_recursive>
 80060f2:	4628      	mov	r0, r5
 80060f4:	bd70      	pop	{r4, r5, r6, pc}
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	da04      	bge.n	8006104 <_puts_r+0xac>
 80060fa:	69a2      	ldr	r2, [r4, #24]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	dc06      	bgt.n	800610e <_puts_r+0xb6>
 8006100:	290a      	cmp	r1, #10
 8006102:	d004      	beq.n	800610e <_puts_r+0xb6>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	6022      	str	r2, [r4, #0]
 800610a:	7019      	strb	r1, [r3, #0]
 800610c:	e7c5      	b.n	800609a <_puts_r+0x42>
 800610e:	4622      	mov	r2, r4
 8006110:	4628      	mov	r0, r5
 8006112:	f000 f8e5 	bl	80062e0 <__swbuf_r>
 8006116:	3001      	adds	r0, #1
 8006118:	d1bf      	bne.n	800609a <_puts_r+0x42>
 800611a:	e7df      	b.n	80060dc <_puts_r+0x84>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	250a      	movs	r5, #10
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	6022      	str	r2, [r4, #0]
 8006124:	701d      	strb	r5, [r3, #0]
 8006126:	e7db      	b.n	80060e0 <_puts_r+0x88>
 8006128:	08009700 	.word	0x08009700
 800612c:	08009720 	.word	0x08009720
 8006130:	080096e0 	.word	0x080096e0

08006134 <puts>:
 8006134:	4b02      	ldr	r3, [pc, #8]	; (8006140 <puts+0xc>)
 8006136:	4601      	mov	r1, r0
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	f7ff bf8d 	b.w	8006058 <_puts_r>
 800613e:	bf00      	nop
 8006140:	2000000c 	.word	0x2000000c

08006144 <setbuf>:
 8006144:	2900      	cmp	r1, #0
 8006146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800614a:	bf0c      	ite	eq
 800614c:	2202      	moveq	r2, #2
 800614e:	2200      	movne	r2, #0
 8006150:	f000 b800 	b.w	8006154 <setvbuf>

08006154 <setvbuf>:
 8006154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006158:	461d      	mov	r5, r3
 800615a:	4b5d      	ldr	r3, [pc, #372]	; (80062d0 <setvbuf+0x17c>)
 800615c:	681f      	ldr	r7, [r3, #0]
 800615e:	4604      	mov	r4, r0
 8006160:	460e      	mov	r6, r1
 8006162:	4690      	mov	r8, r2
 8006164:	b127      	cbz	r7, 8006170 <setvbuf+0x1c>
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	b913      	cbnz	r3, 8006170 <setvbuf+0x1c>
 800616a:	4638      	mov	r0, r7
 800616c:	f001 f90c 	bl	8007388 <__sinit>
 8006170:	4b58      	ldr	r3, [pc, #352]	; (80062d4 <setvbuf+0x180>)
 8006172:	429c      	cmp	r4, r3
 8006174:	d167      	bne.n	8006246 <setvbuf+0xf2>
 8006176:	687c      	ldr	r4, [r7, #4]
 8006178:	f1b8 0f02 	cmp.w	r8, #2
 800617c:	d006      	beq.n	800618c <setvbuf+0x38>
 800617e:	f1b8 0f01 	cmp.w	r8, #1
 8006182:	f200 809f 	bhi.w	80062c4 <setvbuf+0x170>
 8006186:	2d00      	cmp	r5, #0
 8006188:	f2c0 809c 	blt.w	80062c4 <setvbuf+0x170>
 800618c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800618e:	07db      	lsls	r3, r3, #31
 8006190:	d405      	bmi.n	800619e <setvbuf+0x4a>
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	0598      	lsls	r0, r3, #22
 8006196:	d402      	bmi.n	800619e <setvbuf+0x4a>
 8006198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800619a:	f001 f998 	bl	80074ce <__retarget_lock_acquire_recursive>
 800619e:	4621      	mov	r1, r4
 80061a0:	4638      	mov	r0, r7
 80061a2:	f001 f85d 	bl	8007260 <_fflush_r>
 80061a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061a8:	b141      	cbz	r1, 80061bc <setvbuf+0x68>
 80061aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061ae:	4299      	cmp	r1, r3
 80061b0:	d002      	beq.n	80061b8 <setvbuf+0x64>
 80061b2:	4638      	mov	r0, r7
 80061b4:	f001 fda2 	bl	8007cfc <_free_r>
 80061b8:	2300      	movs	r3, #0
 80061ba:	6363      	str	r3, [r4, #52]	; 0x34
 80061bc:	2300      	movs	r3, #0
 80061be:	61a3      	str	r3, [r4, #24]
 80061c0:	6063      	str	r3, [r4, #4]
 80061c2:	89a3      	ldrh	r3, [r4, #12]
 80061c4:	0619      	lsls	r1, r3, #24
 80061c6:	d503      	bpl.n	80061d0 <setvbuf+0x7c>
 80061c8:	6921      	ldr	r1, [r4, #16]
 80061ca:	4638      	mov	r0, r7
 80061cc:	f001 fd96 	bl	8007cfc <_free_r>
 80061d0:	89a3      	ldrh	r3, [r4, #12]
 80061d2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80061d6:	f023 0303 	bic.w	r3, r3, #3
 80061da:	f1b8 0f02 	cmp.w	r8, #2
 80061de:	81a3      	strh	r3, [r4, #12]
 80061e0:	d06c      	beq.n	80062bc <setvbuf+0x168>
 80061e2:	ab01      	add	r3, sp, #4
 80061e4:	466a      	mov	r2, sp
 80061e6:	4621      	mov	r1, r4
 80061e8:	4638      	mov	r0, r7
 80061ea:	f001 f972 	bl	80074d2 <__swhatbuf_r>
 80061ee:	89a3      	ldrh	r3, [r4, #12]
 80061f0:	4318      	orrs	r0, r3
 80061f2:	81a0      	strh	r0, [r4, #12]
 80061f4:	2d00      	cmp	r5, #0
 80061f6:	d130      	bne.n	800625a <setvbuf+0x106>
 80061f8:	9d00      	ldr	r5, [sp, #0]
 80061fa:	4628      	mov	r0, r5
 80061fc:	f001 f9ce 	bl	800759c <malloc>
 8006200:	4606      	mov	r6, r0
 8006202:	2800      	cmp	r0, #0
 8006204:	d155      	bne.n	80062b2 <setvbuf+0x15e>
 8006206:	f8dd 9000 	ldr.w	r9, [sp]
 800620a:	45a9      	cmp	r9, r5
 800620c:	d14a      	bne.n	80062a4 <setvbuf+0x150>
 800620e:	f04f 35ff 	mov.w	r5, #4294967295
 8006212:	2200      	movs	r2, #0
 8006214:	60a2      	str	r2, [r4, #8]
 8006216:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800621a:	6022      	str	r2, [r4, #0]
 800621c:	6122      	str	r2, [r4, #16]
 800621e:	2201      	movs	r2, #1
 8006220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006224:	6162      	str	r2, [r4, #20]
 8006226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006228:	f043 0302 	orr.w	r3, r3, #2
 800622c:	07d2      	lsls	r2, r2, #31
 800622e:	81a3      	strh	r3, [r4, #12]
 8006230:	d405      	bmi.n	800623e <setvbuf+0xea>
 8006232:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006236:	d102      	bne.n	800623e <setvbuf+0xea>
 8006238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800623a:	f001 f949 	bl	80074d0 <__retarget_lock_release_recursive>
 800623e:	4628      	mov	r0, r5
 8006240:	b003      	add	sp, #12
 8006242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006246:	4b24      	ldr	r3, [pc, #144]	; (80062d8 <setvbuf+0x184>)
 8006248:	429c      	cmp	r4, r3
 800624a:	d101      	bne.n	8006250 <setvbuf+0xfc>
 800624c:	68bc      	ldr	r4, [r7, #8]
 800624e:	e793      	b.n	8006178 <setvbuf+0x24>
 8006250:	4b22      	ldr	r3, [pc, #136]	; (80062dc <setvbuf+0x188>)
 8006252:	429c      	cmp	r4, r3
 8006254:	bf08      	it	eq
 8006256:	68fc      	ldreq	r4, [r7, #12]
 8006258:	e78e      	b.n	8006178 <setvbuf+0x24>
 800625a:	2e00      	cmp	r6, #0
 800625c:	d0cd      	beq.n	80061fa <setvbuf+0xa6>
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	b913      	cbnz	r3, 8006268 <setvbuf+0x114>
 8006262:	4638      	mov	r0, r7
 8006264:	f001 f890 	bl	8007388 <__sinit>
 8006268:	f1b8 0f01 	cmp.w	r8, #1
 800626c:	bf08      	it	eq
 800626e:	89a3      	ldrheq	r3, [r4, #12]
 8006270:	6026      	str	r6, [r4, #0]
 8006272:	bf04      	itt	eq
 8006274:	f043 0301 	orreq.w	r3, r3, #1
 8006278:	81a3      	strheq	r3, [r4, #12]
 800627a:	89a2      	ldrh	r2, [r4, #12]
 800627c:	f012 0308 	ands.w	r3, r2, #8
 8006280:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006284:	d01c      	beq.n	80062c0 <setvbuf+0x16c>
 8006286:	07d3      	lsls	r3, r2, #31
 8006288:	bf41      	itttt	mi
 800628a:	2300      	movmi	r3, #0
 800628c:	426d      	negmi	r5, r5
 800628e:	60a3      	strmi	r3, [r4, #8]
 8006290:	61a5      	strmi	r5, [r4, #24]
 8006292:	bf58      	it	pl
 8006294:	60a5      	strpl	r5, [r4, #8]
 8006296:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006298:	f015 0501 	ands.w	r5, r5, #1
 800629c:	d115      	bne.n	80062ca <setvbuf+0x176>
 800629e:	f412 7f00 	tst.w	r2, #512	; 0x200
 80062a2:	e7c8      	b.n	8006236 <setvbuf+0xe2>
 80062a4:	4648      	mov	r0, r9
 80062a6:	f001 f979 	bl	800759c <malloc>
 80062aa:	4606      	mov	r6, r0
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d0ae      	beq.n	800620e <setvbuf+0xba>
 80062b0:	464d      	mov	r5, r9
 80062b2:	89a3      	ldrh	r3, [r4, #12]
 80062b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b8:	81a3      	strh	r3, [r4, #12]
 80062ba:	e7d0      	b.n	800625e <setvbuf+0x10a>
 80062bc:	2500      	movs	r5, #0
 80062be:	e7a8      	b.n	8006212 <setvbuf+0xbe>
 80062c0:	60a3      	str	r3, [r4, #8]
 80062c2:	e7e8      	b.n	8006296 <setvbuf+0x142>
 80062c4:	f04f 35ff 	mov.w	r5, #4294967295
 80062c8:	e7b9      	b.n	800623e <setvbuf+0xea>
 80062ca:	2500      	movs	r5, #0
 80062cc:	e7b7      	b.n	800623e <setvbuf+0xea>
 80062ce:	bf00      	nop
 80062d0:	2000000c 	.word	0x2000000c
 80062d4:	08009700 	.word	0x08009700
 80062d8:	08009720 	.word	0x08009720
 80062dc:	080096e0 	.word	0x080096e0

080062e0 <__swbuf_r>:
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	460e      	mov	r6, r1
 80062e4:	4614      	mov	r4, r2
 80062e6:	4605      	mov	r5, r0
 80062e8:	b118      	cbz	r0, 80062f2 <__swbuf_r+0x12>
 80062ea:	6983      	ldr	r3, [r0, #24]
 80062ec:	b90b      	cbnz	r3, 80062f2 <__swbuf_r+0x12>
 80062ee:	f001 f84b 	bl	8007388 <__sinit>
 80062f2:	4b21      	ldr	r3, [pc, #132]	; (8006378 <__swbuf_r+0x98>)
 80062f4:	429c      	cmp	r4, r3
 80062f6:	d12b      	bne.n	8006350 <__swbuf_r+0x70>
 80062f8:	686c      	ldr	r4, [r5, #4]
 80062fa:	69a3      	ldr	r3, [r4, #24]
 80062fc:	60a3      	str	r3, [r4, #8]
 80062fe:	89a3      	ldrh	r3, [r4, #12]
 8006300:	071a      	lsls	r2, r3, #28
 8006302:	d52f      	bpl.n	8006364 <__swbuf_r+0x84>
 8006304:	6923      	ldr	r3, [r4, #16]
 8006306:	b36b      	cbz	r3, 8006364 <__swbuf_r+0x84>
 8006308:	6923      	ldr	r3, [r4, #16]
 800630a:	6820      	ldr	r0, [r4, #0]
 800630c:	1ac0      	subs	r0, r0, r3
 800630e:	6963      	ldr	r3, [r4, #20]
 8006310:	b2f6      	uxtb	r6, r6
 8006312:	4283      	cmp	r3, r0
 8006314:	4637      	mov	r7, r6
 8006316:	dc04      	bgt.n	8006322 <__swbuf_r+0x42>
 8006318:	4621      	mov	r1, r4
 800631a:	4628      	mov	r0, r5
 800631c:	f000 ffa0 	bl	8007260 <_fflush_r>
 8006320:	bb30      	cbnz	r0, 8006370 <__swbuf_r+0x90>
 8006322:	68a3      	ldr	r3, [r4, #8]
 8006324:	3b01      	subs	r3, #1
 8006326:	60a3      	str	r3, [r4, #8]
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	6022      	str	r2, [r4, #0]
 800632e:	701e      	strb	r6, [r3, #0]
 8006330:	6963      	ldr	r3, [r4, #20]
 8006332:	3001      	adds	r0, #1
 8006334:	4283      	cmp	r3, r0
 8006336:	d004      	beq.n	8006342 <__swbuf_r+0x62>
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	07db      	lsls	r3, r3, #31
 800633c:	d506      	bpl.n	800634c <__swbuf_r+0x6c>
 800633e:	2e0a      	cmp	r6, #10
 8006340:	d104      	bne.n	800634c <__swbuf_r+0x6c>
 8006342:	4621      	mov	r1, r4
 8006344:	4628      	mov	r0, r5
 8006346:	f000 ff8b 	bl	8007260 <_fflush_r>
 800634a:	b988      	cbnz	r0, 8006370 <__swbuf_r+0x90>
 800634c:	4638      	mov	r0, r7
 800634e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006350:	4b0a      	ldr	r3, [pc, #40]	; (800637c <__swbuf_r+0x9c>)
 8006352:	429c      	cmp	r4, r3
 8006354:	d101      	bne.n	800635a <__swbuf_r+0x7a>
 8006356:	68ac      	ldr	r4, [r5, #8]
 8006358:	e7cf      	b.n	80062fa <__swbuf_r+0x1a>
 800635a:	4b09      	ldr	r3, [pc, #36]	; (8006380 <__swbuf_r+0xa0>)
 800635c:	429c      	cmp	r4, r3
 800635e:	bf08      	it	eq
 8006360:	68ec      	ldreq	r4, [r5, #12]
 8006362:	e7ca      	b.n	80062fa <__swbuf_r+0x1a>
 8006364:	4621      	mov	r1, r4
 8006366:	4628      	mov	r0, r5
 8006368:	f000 f80c 	bl	8006384 <__swsetup_r>
 800636c:	2800      	cmp	r0, #0
 800636e:	d0cb      	beq.n	8006308 <__swbuf_r+0x28>
 8006370:	f04f 37ff 	mov.w	r7, #4294967295
 8006374:	e7ea      	b.n	800634c <__swbuf_r+0x6c>
 8006376:	bf00      	nop
 8006378:	08009700 	.word	0x08009700
 800637c:	08009720 	.word	0x08009720
 8006380:	080096e0 	.word	0x080096e0

08006384 <__swsetup_r>:
 8006384:	4b32      	ldr	r3, [pc, #200]	; (8006450 <__swsetup_r+0xcc>)
 8006386:	b570      	push	{r4, r5, r6, lr}
 8006388:	681d      	ldr	r5, [r3, #0]
 800638a:	4606      	mov	r6, r0
 800638c:	460c      	mov	r4, r1
 800638e:	b125      	cbz	r5, 800639a <__swsetup_r+0x16>
 8006390:	69ab      	ldr	r3, [r5, #24]
 8006392:	b913      	cbnz	r3, 800639a <__swsetup_r+0x16>
 8006394:	4628      	mov	r0, r5
 8006396:	f000 fff7 	bl	8007388 <__sinit>
 800639a:	4b2e      	ldr	r3, [pc, #184]	; (8006454 <__swsetup_r+0xd0>)
 800639c:	429c      	cmp	r4, r3
 800639e:	d10f      	bne.n	80063c0 <__swsetup_r+0x3c>
 80063a0:	686c      	ldr	r4, [r5, #4]
 80063a2:	89a3      	ldrh	r3, [r4, #12]
 80063a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063a8:	0719      	lsls	r1, r3, #28
 80063aa:	d42c      	bmi.n	8006406 <__swsetup_r+0x82>
 80063ac:	06dd      	lsls	r5, r3, #27
 80063ae:	d411      	bmi.n	80063d4 <__swsetup_r+0x50>
 80063b0:	2309      	movs	r3, #9
 80063b2:	6033      	str	r3, [r6, #0]
 80063b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063b8:	81a3      	strh	r3, [r4, #12]
 80063ba:	f04f 30ff 	mov.w	r0, #4294967295
 80063be:	e03e      	b.n	800643e <__swsetup_r+0xba>
 80063c0:	4b25      	ldr	r3, [pc, #148]	; (8006458 <__swsetup_r+0xd4>)
 80063c2:	429c      	cmp	r4, r3
 80063c4:	d101      	bne.n	80063ca <__swsetup_r+0x46>
 80063c6:	68ac      	ldr	r4, [r5, #8]
 80063c8:	e7eb      	b.n	80063a2 <__swsetup_r+0x1e>
 80063ca:	4b24      	ldr	r3, [pc, #144]	; (800645c <__swsetup_r+0xd8>)
 80063cc:	429c      	cmp	r4, r3
 80063ce:	bf08      	it	eq
 80063d0:	68ec      	ldreq	r4, [r5, #12]
 80063d2:	e7e6      	b.n	80063a2 <__swsetup_r+0x1e>
 80063d4:	0758      	lsls	r0, r3, #29
 80063d6:	d512      	bpl.n	80063fe <__swsetup_r+0x7a>
 80063d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063da:	b141      	cbz	r1, 80063ee <__swsetup_r+0x6a>
 80063dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063e0:	4299      	cmp	r1, r3
 80063e2:	d002      	beq.n	80063ea <__swsetup_r+0x66>
 80063e4:	4630      	mov	r0, r6
 80063e6:	f001 fc89 	bl	8007cfc <_free_r>
 80063ea:	2300      	movs	r3, #0
 80063ec:	6363      	str	r3, [r4, #52]	; 0x34
 80063ee:	89a3      	ldrh	r3, [r4, #12]
 80063f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063f4:	81a3      	strh	r3, [r4, #12]
 80063f6:	2300      	movs	r3, #0
 80063f8:	6063      	str	r3, [r4, #4]
 80063fa:	6923      	ldr	r3, [r4, #16]
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	f043 0308 	orr.w	r3, r3, #8
 8006404:	81a3      	strh	r3, [r4, #12]
 8006406:	6923      	ldr	r3, [r4, #16]
 8006408:	b94b      	cbnz	r3, 800641e <__swsetup_r+0x9a>
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006414:	d003      	beq.n	800641e <__swsetup_r+0x9a>
 8006416:	4621      	mov	r1, r4
 8006418:	4630      	mov	r0, r6
 800641a:	f001 f87f 	bl	800751c <__smakebuf_r>
 800641e:	89a0      	ldrh	r0, [r4, #12]
 8006420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006424:	f010 0301 	ands.w	r3, r0, #1
 8006428:	d00a      	beq.n	8006440 <__swsetup_r+0xbc>
 800642a:	2300      	movs	r3, #0
 800642c:	60a3      	str	r3, [r4, #8]
 800642e:	6963      	ldr	r3, [r4, #20]
 8006430:	425b      	negs	r3, r3
 8006432:	61a3      	str	r3, [r4, #24]
 8006434:	6923      	ldr	r3, [r4, #16]
 8006436:	b943      	cbnz	r3, 800644a <__swsetup_r+0xc6>
 8006438:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800643c:	d1ba      	bne.n	80063b4 <__swsetup_r+0x30>
 800643e:	bd70      	pop	{r4, r5, r6, pc}
 8006440:	0781      	lsls	r1, r0, #30
 8006442:	bf58      	it	pl
 8006444:	6963      	ldrpl	r3, [r4, #20]
 8006446:	60a3      	str	r3, [r4, #8]
 8006448:	e7f4      	b.n	8006434 <__swsetup_r+0xb0>
 800644a:	2000      	movs	r0, #0
 800644c:	e7f7      	b.n	800643e <__swsetup_r+0xba>
 800644e:	bf00      	nop
 8006450:	2000000c 	.word	0x2000000c
 8006454:	08009700 	.word	0x08009700
 8006458:	08009720 	.word	0x08009720
 800645c:	080096e0 	.word	0x080096e0

08006460 <quorem>:
 8006460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	6903      	ldr	r3, [r0, #16]
 8006466:	690c      	ldr	r4, [r1, #16]
 8006468:	42a3      	cmp	r3, r4
 800646a:	4607      	mov	r7, r0
 800646c:	f2c0 8081 	blt.w	8006572 <quorem+0x112>
 8006470:	3c01      	subs	r4, #1
 8006472:	f101 0814 	add.w	r8, r1, #20
 8006476:	f100 0514 	add.w	r5, r0, #20
 800647a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006484:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006488:	3301      	adds	r3, #1
 800648a:	429a      	cmp	r2, r3
 800648c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006490:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006494:	fbb2 f6f3 	udiv	r6, r2, r3
 8006498:	d331      	bcc.n	80064fe <quorem+0x9e>
 800649a:	f04f 0e00 	mov.w	lr, #0
 800649e:	4640      	mov	r0, r8
 80064a0:	46ac      	mov	ip, r5
 80064a2:	46f2      	mov	sl, lr
 80064a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80064a8:	b293      	uxth	r3, r2
 80064aa:	fb06 e303 	mla	r3, r6, r3, lr
 80064ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	ebaa 0303 	sub.w	r3, sl, r3
 80064b8:	f8dc a000 	ldr.w	sl, [ip]
 80064bc:	0c12      	lsrs	r2, r2, #16
 80064be:	fa13 f38a 	uxtah	r3, r3, sl
 80064c2:	fb06 e202 	mla	r2, r6, r2, lr
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	9b00      	ldr	r3, [sp, #0]
 80064ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064ce:	b292      	uxth	r2, r2
 80064d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80064dc:	4581      	cmp	r9, r0
 80064de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064e2:	f84c 3b04 	str.w	r3, [ip], #4
 80064e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064ea:	d2db      	bcs.n	80064a4 <quorem+0x44>
 80064ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80064f0:	b92b      	cbnz	r3, 80064fe <quorem+0x9e>
 80064f2:	9b01      	ldr	r3, [sp, #4]
 80064f4:	3b04      	subs	r3, #4
 80064f6:	429d      	cmp	r5, r3
 80064f8:	461a      	mov	r2, r3
 80064fa:	d32e      	bcc.n	800655a <quorem+0xfa>
 80064fc:	613c      	str	r4, [r7, #16]
 80064fe:	4638      	mov	r0, r7
 8006500:	f001 fae4 	bl	8007acc <__mcmp>
 8006504:	2800      	cmp	r0, #0
 8006506:	db24      	blt.n	8006552 <quorem+0xf2>
 8006508:	3601      	adds	r6, #1
 800650a:	4628      	mov	r0, r5
 800650c:	f04f 0c00 	mov.w	ip, #0
 8006510:	f858 2b04 	ldr.w	r2, [r8], #4
 8006514:	f8d0 e000 	ldr.w	lr, [r0]
 8006518:	b293      	uxth	r3, r2
 800651a:	ebac 0303 	sub.w	r3, ip, r3
 800651e:	0c12      	lsrs	r2, r2, #16
 8006520:	fa13 f38e 	uxtah	r3, r3, lr
 8006524:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006528:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800652c:	b29b      	uxth	r3, r3
 800652e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006532:	45c1      	cmp	r9, r8
 8006534:	f840 3b04 	str.w	r3, [r0], #4
 8006538:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800653c:	d2e8      	bcs.n	8006510 <quorem+0xb0>
 800653e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006542:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006546:	b922      	cbnz	r2, 8006552 <quorem+0xf2>
 8006548:	3b04      	subs	r3, #4
 800654a:	429d      	cmp	r5, r3
 800654c:	461a      	mov	r2, r3
 800654e:	d30a      	bcc.n	8006566 <quorem+0x106>
 8006550:	613c      	str	r4, [r7, #16]
 8006552:	4630      	mov	r0, r6
 8006554:	b003      	add	sp, #12
 8006556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655a:	6812      	ldr	r2, [r2, #0]
 800655c:	3b04      	subs	r3, #4
 800655e:	2a00      	cmp	r2, #0
 8006560:	d1cc      	bne.n	80064fc <quorem+0x9c>
 8006562:	3c01      	subs	r4, #1
 8006564:	e7c7      	b.n	80064f6 <quorem+0x96>
 8006566:	6812      	ldr	r2, [r2, #0]
 8006568:	3b04      	subs	r3, #4
 800656a:	2a00      	cmp	r2, #0
 800656c:	d1f0      	bne.n	8006550 <quorem+0xf0>
 800656e:	3c01      	subs	r4, #1
 8006570:	e7eb      	b.n	800654a <quorem+0xea>
 8006572:	2000      	movs	r0, #0
 8006574:	e7ee      	b.n	8006554 <quorem+0xf4>
	...

08006578 <_dtoa_r>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	ed2d 8b04 	vpush	{d8-d9}
 8006580:	ec57 6b10 	vmov	r6, r7, d0
 8006584:	b093      	sub	sp, #76	; 0x4c
 8006586:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006588:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800658c:	9106      	str	r1, [sp, #24]
 800658e:	ee10 aa10 	vmov	sl, s0
 8006592:	4604      	mov	r4, r0
 8006594:	9209      	str	r2, [sp, #36]	; 0x24
 8006596:	930c      	str	r3, [sp, #48]	; 0x30
 8006598:	46bb      	mov	fp, r7
 800659a:	b975      	cbnz	r5, 80065ba <_dtoa_r+0x42>
 800659c:	2010      	movs	r0, #16
 800659e:	f000 fffd 	bl	800759c <malloc>
 80065a2:	4602      	mov	r2, r0
 80065a4:	6260      	str	r0, [r4, #36]	; 0x24
 80065a6:	b920      	cbnz	r0, 80065b2 <_dtoa_r+0x3a>
 80065a8:	4ba7      	ldr	r3, [pc, #668]	; (8006848 <_dtoa_r+0x2d0>)
 80065aa:	21ea      	movs	r1, #234	; 0xea
 80065ac:	48a7      	ldr	r0, [pc, #668]	; (800684c <_dtoa_r+0x2d4>)
 80065ae:	f001 fe45 	bl	800823c <__assert_func>
 80065b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065b6:	6005      	str	r5, [r0, #0]
 80065b8:	60c5      	str	r5, [r0, #12]
 80065ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065bc:	6819      	ldr	r1, [r3, #0]
 80065be:	b151      	cbz	r1, 80065d6 <_dtoa_r+0x5e>
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	604a      	str	r2, [r1, #4]
 80065c4:	2301      	movs	r3, #1
 80065c6:	4093      	lsls	r3, r2
 80065c8:	608b      	str	r3, [r1, #8]
 80065ca:	4620      	mov	r0, r4
 80065cc:	f001 f83c 	bl	8007648 <_Bfree>
 80065d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	1e3b      	subs	r3, r7, #0
 80065d8:	bfaa      	itet	ge
 80065da:	2300      	movge	r3, #0
 80065dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80065e0:	f8c8 3000 	strge.w	r3, [r8]
 80065e4:	4b9a      	ldr	r3, [pc, #616]	; (8006850 <_dtoa_r+0x2d8>)
 80065e6:	bfbc      	itt	lt
 80065e8:	2201      	movlt	r2, #1
 80065ea:	f8c8 2000 	strlt.w	r2, [r8]
 80065ee:	ea33 030b 	bics.w	r3, r3, fp
 80065f2:	d11b      	bne.n	800662c <_dtoa_r+0xb4>
 80065f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006600:	4333      	orrs	r3, r6
 8006602:	f000 8592 	beq.w	800712a <_dtoa_r+0xbb2>
 8006606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006608:	b963      	cbnz	r3, 8006624 <_dtoa_r+0xac>
 800660a:	4b92      	ldr	r3, [pc, #584]	; (8006854 <_dtoa_r+0x2dc>)
 800660c:	e022      	b.n	8006654 <_dtoa_r+0xdc>
 800660e:	4b92      	ldr	r3, [pc, #584]	; (8006858 <_dtoa_r+0x2e0>)
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	3308      	adds	r3, #8
 8006614:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	9801      	ldr	r0, [sp, #4]
 800661a:	b013      	add	sp, #76	; 0x4c
 800661c:	ecbd 8b04 	vpop	{d8-d9}
 8006620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006624:	4b8b      	ldr	r3, [pc, #556]	; (8006854 <_dtoa_r+0x2dc>)
 8006626:	9301      	str	r3, [sp, #4]
 8006628:	3303      	adds	r3, #3
 800662a:	e7f3      	b.n	8006614 <_dtoa_r+0x9c>
 800662c:	2200      	movs	r2, #0
 800662e:	2300      	movs	r3, #0
 8006630:	4650      	mov	r0, sl
 8006632:	4659      	mov	r1, fp
 8006634:	f7fa fa70 	bl	8000b18 <__aeabi_dcmpeq>
 8006638:	ec4b ab19 	vmov	d9, sl, fp
 800663c:	4680      	mov	r8, r0
 800663e:	b158      	cbz	r0, 8006658 <_dtoa_r+0xe0>
 8006640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006642:	2301      	movs	r3, #1
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 856b 	beq.w	8007124 <_dtoa_r+0xbac>
 800664e:	4883      	ldr	r0, [pc, #524]	; (800685c <_dtoa_r+0x2e4>)
 8006650:	6018      	str	r0, [r3, #0]
 8006652:	1e43      	subs	r3, r0, #1
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	e7df      	b.n	8006618 <_dtoa_r+0xa0>
 8006658:	ec4b ab10 	vmov	d0, sl, fp
 800665c:	aa10      	add	r2, sp, #64	; 0x40
 800665e:	a911      	add	r1, sp, #68	; 0x44
 8006660:	4620      	mov	r0, r4
 8006662:	f001 fad9 	bl	8007c18 <__d2b>
 8006666:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800666a:	ee08 0a10 	vmov	s16, r0
 800666e:	2d00      	cmp	r5, #0
 8006670:	f000 8084 	beq.w	800677c <_dtoa_r+0x204>
 8006674:	ee19 3a90 	vmov	r3, s19
 8006678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800667c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006680:	4656      	mov	r6, sl
 8006682:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006686:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800668a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800668e:	4b74      	ldr	r3, [pc, #464]	; (8006860 <_dtoa_r+0x2e8>)
 8006690:	2200      	movs	r2, #0
 8006692:	4630      	mov	r0, r6
 8006694:	4639      	mov	r1, r7
 8006696:	f7f9 fe1f 	bl	80002d8 <__aeabi_dsub>
 800669a:	a365      	add	r3, pc, #404	; (adr r3, 8006830 <_dtoa_r+0x2b8>)
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	f7f9 ffd2 	bl	8000648 <__aeabi_dmul>
 80066a4:	a364      	add	r3, pc, #400	; (adr r3, 8006838 <_dtoa_r+0x2c0>)
 80066a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066aa:	f7f9 fe17 	bl	80002dc <__adddf3>
 80066ae:	4606      	mov	r6, r0
 80066b0:	4628      	mov	r0, r5
 80066b2:	460f      	mov	r7, r1
 80066b4:	f7f9 ff5e 	bl	8000574 <__aeabi_i2d>
 80066b8:	a361      	add	r3, pc, #388	; (adr r3, 8006840 <_dtoa_r+0x2c8>)
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	f7f9 ffc3 	bl	8000648 <__aeabi_dmul>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4630      	mov	r0, r6
 80066c8:	4639      	mov	r1, r7
 80066ca:	f7f9 fe07 	bl	80002dc <__adddf3>
 80066ce:	4606      	mov	r6, r0
 80066d0:	460f      	mov	r7, r1
 80066d2:	f7fa fa69 	bl	8000ba8 <__aeabi_d2iz>
 80066d6:	2200      	movs	r2, #0
 80066d8:	9000      	str	r0, [sp, #0]
 80066da:	2300      	movs	r3, #0
 80066dc:	4630      	mov	r0, r6
 80066de:	4639      	mov	r1, r7
 80066e0:	f7fa fa24 	bl	8000b2c <__aeabi_dcmplt>
 80066e4:	b150      	cbz	r0, 80066fc <_dtoa_r+0x184>
 80066e6:	9800      	ldr	r0, [sp, #0]
 80066e8:	f7f9 ff44 	bl	8000574 <__aeabi_i2d>
 80066ec:	4632      	mov	r2, r6
 80066ee:	463b      	mov	r3, r7
 80066f0:	f7fa fa12 	bl	8000b18 <__aeabi_dcmpeq>
 80066f4:	b910      	cbnz	r0, 80066fc <_dtoa_r+0x184>
 80066f6:	9b00      	ldr	r3, [sp, #0]
 80066f8:	3b01      	subs	r3, #1
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	9b00      	ldr	r3, [sp, #0]
 80066fe:	2b16      	cmp	r3, #22
 8006700:	d85a      	bhi.n	80067b8 <_dtoa_r+0x240>
 8006702:	9a00      	ldr	r2, [sp, #0]
 8006704:	4b57      	ldr	r3, [pc, #348]	; (8006864 <_dtoa_r+0x2ec>)
 8006706:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	ec51 0b19 	vmov	r0, r1, d9
 8006712:	f7fa fa0b 	bl	8000b2c <__aeabi_dcmplt>
 8006716:	2800      	cmp	r0, #0
 8006718:	d050      	beq.n	80067bc <_dtoa_r+0x244>
 800671a:	9b00      	ldr	r3, [sp, #0]
 800671c:	3b01      	subs	r3, #1
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	2300      	movs	r3, #0
 8006722:	930b      	str	r3, [sp, #44]	; 0x2c
 8006724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006726:	1b5d      	subs	r5, r3, r5
 8006728:	1e6b      	subs	r3, r5, #1
 800672a:	9305      	str	r3, [sp, #20]
 800672c:	bf45      	ittet	mi
 800672e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006732:	9304      	strmi	r3, [sp, #16]
 8006734:	2300      	movpl	r3, #0
 8006736:	2300      	movmi	r3, #0
 8006738:	bf4c      	ite	mi
 800673a:	9305      	strmi	r3, [sp, #20]
 800673c:	9304      	strpl	r3, [sp, #16]
 800673e:	9b00      	ldr	r3, [sp, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	db3d      	blt.n	80067c0 <_dtoa_r+0x248>
 8006744:	9b05      	ldr	r3, [sp, #20]
 8006746:	9a00      	ldr	r2, [sp, #0]
 8006748:	920a      	str	r2, [sp, #40]	; 0x28
 800674a:	4413      	add	r3, r2
 800674c:	9305      	str	r3, [sp, #20]
 800674e:	2300      	movs	r3, #0
 8006750:	9307      	str	r3, [sp, #28]
 8006752:	9b06      	ldr	r3, [sp, #24]
 8006754:	2b09      	cmp	r3, #9
 8006756:	f200 8089 	bhi.w	800686c <_dtoa_r+0x2f4>
 800675a:	2b05      	cmp	r3, #5
 800675c:	bfc4      	itt	gt
 800675e:	3b04      	subgt	r3, #4
 8006760:	9306      	strgt	r3, [sp, #24]
 8006762:	9b06      	ldr	r3, [sp, #24]
 8006764:	f1a3 0302 	sub.w	r3, r3, #2
 8006768:	bfcc      	ite	gt
 800676a:	2500      	movgt	r5, #0
 800676c:	2501      	movle	r5, #1
 800676e:	2b03      	cmp	r3, #3
 8006770:	f200 8087 	bhi.w	8006882 <_dtoa_r+0x30a>
 8006774:	e8df f003 	tbb	[pc, r3]
 8006778:	59383a2d 	.word	0x59383a2d
 800677c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006780:	441d      	add	r5, r3
 8006782:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006786:	2b20      	cmp	r3, #32
 8006788:	bfc1      	itttt	gt
 800678a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800678e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006792:	fa0b f303 	lslgt.w	r3, fp, r3
 8006796:	fa26 f000 	lsrgt.w	r0, r6, r0
 800679a:	bfda      	itte	le
 800679c:	f1c3 0320 	rsble	r3, r3, #32
 80067a0:	fa06 f003 	lslle.w	r0, r6, r3
 80067a4:	4318      	orrgt	r0, r3
 80067a6:	f7f9 fed5 	bl	8000554 <__aeabi_ui2d>
 80067aa:	2301      	movs	r3, #1
 80067ac:	4606      	mov	r6, r0
 80067ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80067b2:	3d01      	subs	r5, #1
 80067b4:	930e      	str	r3, [sp, #56]	; 0x38
 80067b6:	e76a      	b.n	800668e <_dtoa_r+0x116>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e7b2      	b.n	8006722 <_dtoa_r+0x1aa>
 80067bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80067be:	e7b1      	b.n	8006724 <_dtoa_r+0x1ac>
 80067c0:	9b04      	ldr	r3, [sp, #16]
 80067c2:	9a00      	ldr	r2, [sp, #0]
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	9304      	str	r3, [sp, #16]
 80067c8:	4253      	negs	r3, r2
 80067ca:	9307      	str	r3, [sp, #28]
 80067cc:	2300      	movs	r3, #0
 80067ce:	930a      	str	r3, [sp, #40]	; 0x28
 80067d0:	e7bf      	b.n	8006752 <_dtoa_r+0x1da>
 80067d2:	2300      	movs	r3, #0
 80067d4:	9308      	str	r3, [sp, #32]
 80067d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d8:	2b00      	cmp	r3, #0
 80067da:	dc55      	bgt.n	8006888 <_dtoa_r+0x310>
 80067dc:	2301      	movs	r3, #1
 80067de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067e2:	461a      	mov	r2, r3
 80067e4:	9209      	str	r2, [sp, #36]	; 0x24
 80067e6:	e00c      	b.n	8006802 <_dtoa_r+0x28a>
 80067e8:	2301      	movs	r3, #1
 80067ea:	e7f3      	b.n	80067d4 <_dtoa_r+0x25c>
 80067ec:	2300      	movs	r3, #0
 80067ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067f0:	9308      	str	r3, [sp, #32]
 80067f2:	9b00      	ldr	r3, [sp, #0]
 80067f4:	4413      	add	r3, r2
 80067f6:	9302      	str	r3, [sp, #8]
 80067f8:	3301      	adds	r3, #1
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	9303      	str	r3, [sp, #12]
 80067fe:	bfb8      	it	lt
 8006800:	2301      	movlt	r3, #1
 8006802:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006804:	2200      	movs	r2, #0
 8006806:	6042      	str	r2, [r0, #4]
 8006808:	2204      	movs	r2, #4
 800680a:	f102 0614 	add.w	r6, r2, #20
 800680e:	429e      	cmp	r6, r3
 8006810:	6841      	ldr	r1, [r0, #4]
 8006812:	d93d      	bls.n	8006890 <_dtoa_r+0x318>
 8006814:	4620      	mov	r0, r4
 8006816:	f000 fed7 	bl	80075c8 <_Balloc>
 800681a:	9001      	str	r0, [sp, #4]
 800681c:	2800      	cmp	r0, #0
 800681e:	d13b      	bne.n	8006898 <_dtoa_r+0x320>
 8006820:	4b11      	ldr	r3, [pc, #68]	; (8006868 <_dtoa_r+0x2f0>)
 8006822:	4602      	mov	r2, r0
 8006824:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006828:	e6c0      	b.n	80065ac <_dtoa_r+0x34>
 800682a:	2301      	movs	r3, #1
 800682c:	e7df      	b.n	80067ee <_dtoa_r+0x276>
 800682e:	bf00      	nop
 8006830:	636f4361 	.word	0x636f4361
 8006834:	3fd287a7 	.word	0x3fd287a7
 8006838:	8b60c8b3 	.word	0x8b60c8b3
 800683c:	3fc68a28 	.word	0x3fc68a28
 8006840:	509f79fb 	.word	0x509f79fb
 8006844:	3fd34413 	.word	0x3fd34413
 8006848:	0800965d 	.word	0x0800965d
 800684c:	08009674 	.word	0x08009674
 8006850:	7ff00000 	.word	0x7ff00000
 8006854:	08009659 	.word	0x08009659
 8006858:	08009650 	.word	0x08009650
 800685c:	0800962d 	.word	0x0800962d
 8006860:	3ff80000 	.word	0x3ff80000
 8006864:	080097c8 	.word	0x080097c8
 8006868:	080096cf 	.word	0x080096cf
 800686c:	2501      	movs	r5, #1
 800686e:	2300      	movs	r3, #0
 8006870:	9306      	str	r3, [sp, #24]
 8006872:	9508      	str	r5, [sp, #32]
 8006874:	f04f 33ff 	mov.w	r3, #4294967295
 8006878:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800687c:	2200      	movs	r2, #0
 800687e:	2312      	movs	r3, #18
 8006880:	e7b0      	b.n	80067e4 <_dtoa_r+0x26c>
 8006882:	2301      	movs	r3, #1
 8006884:	9308      	str	r3, [sp, #32]
 8006886:	e7f5      	b.n	8006874 <_dtoa_r+0x2fc>
 8006888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800688a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800688e:	e7b8      	b.n	8006802 <_dtoa_r+0x28a>
 8006890:	3101      	adds	r1, #1
 8006892:	6041      	str	r1, [r0, #4]
 8006894:	0052      	lsls	r2, r2, #1
 8006896:	e7b8      	b.n	800680a <_dtoa_r+0x292>
 8006898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800689a:	9a01      	ldr	r2, [sp, #4]
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	9b03      	ldr	r3, [sp, #12]
 80068a0:	2b0e      	cmp	r3, #14
 80068a2:	f200 809d 	bhi.w	80069e0 <_dtoa_r+0x468>
 80068a6:	2d00      	cmp	r5, #0
 80068a8:	f000 809a 	beq.w	80069e0 <_dtoa_r+0x468>
 80068ac:	9b00      	ldr	r3, [sp, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	dd32      	ble.n	8006918 <_dtoa_r+0x3a0>
 80068b2:	4ab7      	ldr	r2, [pc, #732]	; (8006b90 <_dtoa_r+0x618>)
 80068b4:	f003 030f 	and.w	r3, r3, #15
 80068b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068c0:	9b00      	ldr	r3, [sp, #0]
 80068c2:	05d8      	lsls	r0, r3, #23
 80068c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80068c8:	d516      	bpl.n	80068f8 <_dtoa_r+0x380>
 80068ca:	4bb2      	ldr	r3, [pc, #712]	; (8006b94 <_dtoa_r+0x61c>)
 80068cc:	ec51 0b19 	vmov	r0, r1, d9
 80068d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068d4:	f7f9 ffe2 	bl	800089c <__aeabi_ddiv>
 80068d8:	f007 070f 	and.w	r7, r7, #15
 80068dc:	4682      	mov	sl, r0
 80068de:	468b      	mov	fp, r1
 80068e0:	2503      	movs	r5, #3
 80068e2:	4eac      	ldr	r6, [pc, #688]	; (8006b94 <_dtoa_r+0x61c>)
 80068e4:	b957      	cbnz	r7, 80068fc <_dtoa_r+0x384>
 80068e6:	4642      	mov	r2, r8
 80068e8:	464b      	mov	r3, r9
 80068ea:	4650      	mov	r0, sl
 80068ec:	4659      	mov	r1, fp
 80068ee:	f7f9 ffd5 	bl	800089c <__aeabi_ddiv>
 80068f2:	4682      	mov	sl, r0
 80068f4:	468b      	mov	fp, r1
 80068f6:	e028      	b.n	800694a <_dtoa_r+0x3d2>
 80068f8:	2502      	movs	r5, #2
 80068fa:	e7f2      	b.n	80068e2 <_dtoa_r+0x36a>
 80068fc:	07f9      	lsls	r1, r7, #31
 80068fe:	d508      	bpl.n	8006912 <_dtoa_r+0x39a>
 8006900:	4640      	mov	r0, r8
 8006902:	4649      	mov	r1, r9
 8006904:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006908:	f7f9 fe9e 	bl	8000648 <__aeabi_dmul>
 800690c:	3501      	adds	r5, #1
 800690e:	4680      	mov	r8, r0
 8006910:	4689      	mov	r9, r1
 8006912:	107f      	asrs	r7, r7, #1
 8006914:	3608      	adds	r6, #8
 8006916:	e7e5      	b.n	80068e4 <_dtoa_r+0x36c>
 8006918:	f000 809b 	beq.w	8006a52 <_dtoa_r+0x4da>
 800691c:	9b00      	ldr	r3, [sp, #0]
 800691e:	4f9d      	ldr	r7, [pc, #628]	; (8006b94 <_dtoa_r+0x61c>)
 8006920:	425e      	negs	r6, r3
 8006922:	4b9b      	ldr	r3, [pc, #620]	; (8006b90 <_dtoa_r+0x618>)
 8006924:	f006 020f 	and.w	r2, r6, #15
 8006928:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	ec51 0b19 	vmov	r0, r1, d9
 8006934:	f7f9 fe88 	bl	8000648 <__aeabi_dmul>
 8006938:	1136      	asrs	r6, r6, #4
 800693a:	4682      	mov	sl, r0
 800693c:	468b      	mov	fp, r1
 800693e:	2300      	movs	r3, #0
 8006940:	2502      	movs	r5, #2
 8006942:	2e00      	cmp	r6, #0
 8006944:	d17a      	bne.n	8006a3c <_dtoa_r+0x4c4>
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1d3      	bne.n	80068f2 <_dtoa_r+0x37a>
 800694a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 8082 	beq.w	8006a56 <_dtoa_r+0x4de>
 8006952:	4b91      	ldr	r3, [pc, #580]	; (8006b98 <_dtoa_r+0x620>)
 8006954:	2200      	movs	r2, #0
 8006956:	4650      	mov	r0, sl
 8006958:	4659      	mov	r1, fp
 800695a:	f7fa f8e7 	bl	8000b2c <__aeabi_dcmplt>
 800695e:	2800      	cmp	r0, #0
 8006960:	d079      	beq.n	8006a56 <_dtoa_r+0x4de>
 8006962:	9b03      	ldr	r3, [sp, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d076      	beq.n	8006a56 <_dtoa_r+0x4de>
 8006968:	9b02      	ldr	r3, [sp, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	dd36      	ble.n	80069dc <_dtoa_r+0x464>
 800696e:	9b00      	ldr	r3, [sp, #0]
 8006970:	4650      	mov	r0, sl
 8006972:	4659      	mov	r1, fp
 8006974:	1e5f      	subs	r7, r3, #1
 8006976:	2200      	movs	r2, #0
 8006978:	4b88      	ldr	r3, [pc, #544]	; (8006b9c <_dtoa_r+0x624>)
 800697a:	f7f9 fe65 	bl	8000648 <__aeabi_dmul>
 800697e:	9e02      	ldr	r6, [sp, #8]
 8006980:	4682      	mov	sl, r0
 8006982:	468b      	mov	fp, r1
 8006984:	3501      	adds	r5, #1
 8006986:	4628      	mov	r0, r5
 8006988:	f7f9 fdf4 	bl	8000574 <__aeabi_i2d>
 800698c:	4652      	mov	r2, sl
 800698e:	465b      	mov	r3, fp
 8006990:	f7f9 fe5a 	bl	8000648 <__aeabi_dmul>
 8006994:	4b82      	ldr	r3, [pc, #520]	; (8006ba0 <_dtoa_r+0x628>)
 8006996:	2200      	movs	r2, #0
 8006998:	f7f9 fca0 	bl	80002dc <__adddf3>
 800699c:	46d0      	mov	r8, sl
 800699e:	46d9      	mov	r9, fp
 80069a0:	4682      	mov	sl, r0
 80069a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80069a6:	2e00      	cmp	r6, #0
 80069a8:	d158      	bne.n	8006a5c <_dtoa_r+0x4e4>
 80069aa:	4b7e      	ldr	r3, [pc, #504]	; (8006ba4 <_dtoa_r+0x62c>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	4640      	mov	r0, r8
 80069b0:	4649      	mov	r1, r9
 80069b2:	f7f9 fc91 	bl	80002d8 <__aeabi_dsub>
 80069b6:	4652      	mov	r2, sl
 80069b8:	465b      	mov	r3, fp
 80069ba:	4680      	mov	r8, r0
 80069bc:	4689      	mov	r9, r1
 80069be:	f7fa f8d3 	bl	8000b68 <__aeabi_dcmpgt>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	f040 8295 	bne.w	8006ef2 <_dtoa_r+0x97a>
 80069c8:	4652      	mov	r2, sl
 80069ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80069ce:	4640      	mov	r0, r8
 80069d0:	4649      	mov	r1, r9
 80069d2:	f7fa f8ab 	bl	8000b2c <__aeabi_dcmplt>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f040 8289 	bne.w	8006eee <_dtoa_r+0x976>
 80069dc:	ec5b ab19 	vmov	sl, fp, d9
 80069e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f2c0 8148 	blt.w	8006c78 <_dtoa_r+0x700>
 80069e8:	9a00      	ldr	r2, [sp, #0]
 80069ea:	2a0e      	cmp	r2, #14
 80069ec:	f300 8144 	bgt.w	8006c78 <_dtoa_r+0x700>
 80069f0:	4b67      	ldr	r3, [pc, #412]	; (8006b90 <_dtoa_r+0x618>)
 80069f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f280 80d5 	bge.w	8006bac <_dtoa_r+0x634>
 8006a02:	9b03      	ldr	r3, [sp, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f300 80d1 	bgt.w	8006bac <_dtoa_r+0x634>
 8006a0a:	f040 826f 	bne.w	8006eec <_dtoa_r+0x974>
 8006a0e:	4b65      	ldr	r3, [pc, #404]	; (8006ba4 <_dtoa_r+0x62c>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	4640      	mov	r0, r8
 8006a14:	4649      	mov	r1, r9
 8006a16:	f7f9 fe17 	bl	8000648 <__aeabi_dmul>
 8006a1a:	4652      	mov	r2, sl
 8006a1c:	465b      	mov	r3, fp
 8006a1e:	f7fa f899 	bl	8000b54 <__aeabi_dcmpge>
 8006a22:	9e03      	ldr	r6, [sp, #12]
 8006a24:	4637      	mov	r7, r6
 8006a26:	2800      	cmp	r0, #0
 8006a28:	f040 8245 	bne.w	8006eb6 <_dtoa_r+0x93e>
 8006a2c:	9d01      	ldr	r5, [sp, #4]
 8006a2e:	2331      	movs	r3, #49	; 0x31
 8006a30:	f805 3b01 	strb.w	r3, [r5], #1
 8006a34:	9b00      	ldr	r3, [sp, #0]
 8006a36:	3301      	adds	r3, #1
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	e240      	b.n	8006ebe <_dtoa_r+0x946>
 8006a3c:	07f2      	lsls	r2, r6, #31
 8006a3e:	d505      	bpl.n	8006a4c <_dtoa_r+0x4d4>
 8006a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a44:	f7f9 fe00 	bl	8000648 <__aeabi_dmul>
 8006a48:	3501      	adds	r5, #1
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	1076      	asrs	r6, r6, #1
 8006a4e:	3708      	adds	r7, #8
 8006a50:	e777      	b.n	8006942 <_dtoa_r+0x3ca>
 8006a52:	2502      	movs	r5, #2
 8006a54:	e779      	b.n	800694a <_dtoa_r+0x3d2>
 8006a56:	9f00      	ldr	r7, [sp, #0]
 8006a58:	9e03      	ldr	r6, [sp, #12]
 8006a5a:	e794      	b.n	8006986 <_dtoa_r+0x40e>
 8006a5c:	9901      	ldr	r1, [sp, #4]
 8006a5e:	4b4c      	ldr	r3, [pc, #304]	; (8006b90 <_dtoa_r+0x618>)
 8006a60:	4431      	add	r1, r6
 8006a62:	910d      	str	r1, [sp, #52]	; 0x34
 8006a64:	9908      	ldr	r1, [sp, #32]
 8006a66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a6e:	2900      	cmp	r1, #0
 8006a70:	d043      	beq.n	8006afa <_dtoa_r+0x582>
 8006a72:	494d      	ldr	r1, [pc, #308]	; (8006ba8 <_dtoa_r+0x630>)
 8006a74:	2000      	movs	r0, #0
 8006a76:	f7f9 ff11 	bl	800089c <__aeabi_ddiv>
 8006a7a:	4652      	mov	r2, sl
 8006a7c:	465b      	mov	r3, fp
 8006a7e:	f7f9 fc2b 	bl	80002d8 <__aeabi_dsub>
 8006a82:	9d01      	ldr	r5, [sp, #4]
 8006a84:	4682      	mov	sl, r0
 8006a86:	468b      	mov	fp, r1
 8006a88:	4649      	mov	r1, r9
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	f7fa f88c 	bl	8000ba8 <__aeabi_d2iz>
 8006a90:	4606      	mov	r6, r0
 8006a92:	f7f9 fd6f 	bl	8000574 <__aeabi_i2d>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	f7f9 fc1b 	bl	80002d8 <__aeabi_dsub>
 8006aa2:	3630      	adds	r6, #48	; 0x30
 8006aa4:	f805 6b01 	strb.w	r6, [r5], #1
 8006aa8:	4652      	mov	r2, sl
 8006aaa:	465b      	mov	r3, fp
 8006aac:	4680      	mov	r8, r0
 8006aae:	4689      	mov	r9, r1
 8006ab0:	f7fa f83c 	bl	8000b2c <__aeabi_dcmplt>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d163      	bne.n	8006b80 <_dtoa_r+0x608>
 8006ab8:	4642      	mov	r2, r8
 8006aba:	464b      	mov	r3, r9
 8006abc:	4936      	ldr	r1, [pc, #216]	; (8006b98 <_dtoa_r+0x620>)
 8006abe:	2000      	movs	r0, #0
 8006ac0:	f7f9 fc0a 	bl	80002d8 <__aeabi_dsub>
 8006ac4:	4652      	mov	r2, sl
 8006ac6:	465b      	mov	r3, fp
 8006ac8:	f7fa f830 	bl	8000b2c <__aeabi_dcmplt>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	f040 80b5 	bne.w	8006c3c <_dtoa_r+0x6c4>
 8006ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ad4:	429d      	cmp	r5, r3
 8006ad6:	d081      	beq.n	80069dc <_dtoa_r+0x464>
 8006ad8:	4b30      	ldr	r3, [pc, #192]	; (8006b9c <_dtoa_r+0x624>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	4650      	mov	r0, sl
 8006ade:	4659      	mov	r1, fp
 8006ae0:	f7f9 fdb2 	bl	8000648 <__aeabi_dmul>
 8006ae4:	4b2d      	ldr	r3, [pc, #180]	; (8006b9c <_dtoa_r+0x624>)
 8006ae6:	4682      	mov	sl, r0
 8006ae8:	468b      	mov	fp, r1
 8006aea:	4640      	mov	r0, r8
 8006aec:	4649      	mov	r1, r9
 8006aee:	2200      	movs	r2, #0
 8006af0:	f7f9 fdaa 	bl	8000648 <__aeabi_dmul>
 8006af4:	4680      	mov	r8, r0
 8006af6:	4689      	mov	r9, r1
 8006af8:	e7c6      	b.n	8006a88 <_dtoa_r+0x510>
 8006afa:	4650      	mov	r0, sl
 8006afc:	4659      	mov	r1, fp
 8006afe:	f7f9 fda3 	bl	8000648 <__aeabi_dmul>
 8006b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b04:	9d01      	ldr	r5, [sp, #4]
 8006b06:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b08:	4682      	mov	sl, r0
 8006b0a:	468b      	mov	fp, r1
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	4640      	mov	r0, r8
 8006b10:	f7fa f84a 	bl	8000ba8 <__aeabi_d2iz>
 8006b14:	4606      	mov	r6, r0
 8006b16:	f7f9 fd2d 	bl	8000574 <__aeabi_i2d>
 8006b1a:	3630      	adds	r6, #48	; 0x30
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4640      	mov	r0, r8
 8006b22:	4649      	mov	r1, r9
 8006b24:	f7f9 fbd8 	bl	80002d8 <__aeabi_dsub>
 8006b28:	f805 6b01 	strb.w	r6, [r5], #1
 8006b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b2e:	429d      	cmp	r5, r3
 8006b30:	4680      	mov	r8, r0
 8006b32:	4689      	mov	r9, r1
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	d124      	bne.n	8006b84 <_dtoa_r+0x60c>
 8006b3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ba8 <_dtoa_r+0x630>)
 8006b3c:	4650      	mov	r0, sl
 8006b3e:	4659      	mov	r1, fp
 8006b40:	f7f9 fbcc 	bl	80002dc <__adddf3>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4640      	mov	r0, r8
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	f7fa f80c 	bl	8000b68 <__aeabi_dcmpgt>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d173      	bne.n	8006c3c <_dtoa_r+0x6c4>
 8006b54:	4652      	mov	r2, sl
 8006b56:	465b      	mov	r3, fp
 8006b58:	4913      	ldr	r1, [pc, #76]	; (8006ba8 <_dtoa_r+0x630>)
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	f7f9 fbbc 	bl	80002d8 <__aeabi_dsub>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4640      	mov	r0, r8
 8006b66:	4649      	mov	r1, r9
 8006b68:	f7f9 ffe0 	bl	8000b2c <__aeabi_dcmplt>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	f43f af35 	beq.w	80069dc <_dtoa_r+0x464>
 8006b72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b74:	1e6b      	subs	r3, r5, #1
 8006b76:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b7c:	2b30      	cmp	r3, #48	; 0x30
 8006b7e:	d0f8      	beq.n	8006b72 <_dtoa_r+0x5fa>
 8006b80:	9700      	str	r7, [sp, #0]
 8006b82:	e049      	b.n	8006c18 <_dtoa_r+0x6a0>
 8006b84:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <_dtoa_r+0x624>)
 8006b86:	f7f9 fd5f 	bl	8000648 <__aeabi_dmul>
 8006b8a:	4680      	mov	r8, r0
 8006b8c:	4689      	mov	r9, r1
 8006b8e:	e7bd      	b.n	8006b0c <_dtoa_r+0x594>
 8006b90:	080097c8 	.word	0x080097c8
 8006b94:	080097a0 	.word	0x080097a0
 8006b98:	3ff00000 	.word	0x3ff00000
 8006b9c:	40240000 	.word	0x40240000
 8006ba0:	401c0000 	.word	0x401c0000
 8006ba4:	40140000 	.word	0x40140000
 8006ba8:	3fe00000 	.word	0x3fe00000
 8006bac:	9d01      	ldr	r5, [sp, #4]
 8006bae:	4656      	mov	r6, sl
 8006bb0:	465f      	mov	r7, fp
 8006bb2:	4642      	mov	r2, r8
 8006bb4:	464b      	mov	r3, r9
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	4639      	mov	r1, r7
 8006bba:	f7f9 fe6f 	bl	800089c <__aeabi_ddiv>
 8006bbe:	f7f9 fff3 	bl	8000ba8 <__aeabi_d2iz>
 8006bc2:	4682      	mov	sl, r0
 8006bc4:	f7f9 fcd6 	bl	8000574 <__aeabi_i2d>
 8006bc8:	4642      	mov	r2, r8
 8006bca:	464b      	mov	r3, r9
 8006bcc:	f7f9 fd3c 	bl	8000648 <__aeabi_dmul>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006bdc:	f7f9 fb7c 	bl	80002d8 <__aeabi_dsub>
 8006be0:	f805 6b01 	strb.w	r6, [r5], #1
 8006be4:	9e01      	ldr	r6, [sp, #4]
 8006be6:	9f03      	ldr	r7, [sp, #12]
 8006be8:	1bae      	subs	r6, r5, r6
 8006bea:	42b7      	cmp	r7, r6
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	d135      	bne.n	8006c5e <_dtoa_r+0x6e6>
 8006bf2:	f7f9 fb73 	bl	80002dc <__adddf3>
 8006bf6:	4642      	mov	r2, r8
 8006bf8:	464b      	mov	r3, r9
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	460f      	mov	r7, r1
 8006bfe:	f7f9 ffb3 	bl	8000b68 <__aeabi_dcmpgt>
 8006c02:	b9d0      	cbnz	r0, 8006c3a <_dtoa_r+0x6c2>
 8006c04:	4642      	mov	r2, r8
 8006c06:	464b      	mov	r3, r9
 8006c08:	4630      	mov	r0, r6
 8006c0a:	4639      	mov	r1, r7
 8006c0c:	f7f9 ff84 	bl	8000b18 <__aeabi_dcmpeq>
 8006c10:	b110      	cbz	r0, 8006c18 <_dtoa_r+0x6a0>
 8006c12:	f01a 0f01 	tst.w	sl, #1
 8006c16:	d110      	bne.n	8006c3a <_dtoa_r+0x6c2>
 8006c18:	4620      	mov	r0, r4
 8006c1a:	ee18 1a10 	vmov	r1, s16
 8006c1e:	f000 fd13 	bl	8007648 <_Bfree>
 8006c22:	2300      	movs	r3, #0
 8006c24:	9800      	ldr	r0, [sp, #0]
 8006c26:	702b      	strb	r3, [r5, #0]
 8006c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	6018      	str	r0, [r3, #0]
 8006c2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f43f acf1 	beq.w	8006618 <_dtoa_r+0xa0>
 8006c36:	601d      	str	r5, [r3, #0]
 8006c38:	e4ee      	b.n	8006618 <_dtoa_r+0xa0>
 8006c3a:	9f00      	ldr	r7, [sp, #0]
 8006c3c:	462b      	mov	r3, r5
 8006c3e:	461d      	mov	r5, r3
 8006c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c44:	2a39      	cmp	r2, #57	; 0x39
 8006c46:	d106      	bne.n	8006c56 <_dtoa_r+0x6de>
 8006c48:	9a01      	ldr	r2, [sp, #4]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d1f7      	bne.n	8006c3e <_dtoa_r+0x6c6>
 8006c4e:	9901      	ldr	r1, [sp, #4]
 8006c50:	2230      	movs	r2, #48	; 0x30
 8006c52:	3701      	adds	r7, #1
 8006c54:	700a      	strb	r2, [r1, #0]
 8006c56:	781a      	ldrb	r2, [r3, #0]
 8006c58:	3201      	adds	r2, #1
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	e790      	b.n	8006b80 <_dtoa_r+0x608>
 8006c5e:	4ba6      	ldr	r3, [pc, #664]	; (8006ef8 <_dtoa_r+0x980>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	f7f9 fcf1 	bl	8000648 <__aeabi_dmul>
 8006c66:	2200      	movs	r2, #0
 8006c68:	2300      	movs	r3, #0
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	460f      	mov	r7, r1
 8006c6e:	f7f9 ff53 	bl	8000b18 <__aeabi_dcmpeq>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d09d      	beq.n	8006bb2 <_dtoa_r+0x63a>
 8006c76:	e7cf      	b.n	8006c18 <_dtoa_r+0x6a0>
 8006c78:	9a08      	ldr	r2, [sp, #32]
 8006c7a:	2a00      	cmp	r2, #0
 8006c7c:	f000 80d7 	beq.w	8006e2e <_dtoa_r+0x8b6>
 8006c80:	9a06      	ldr	r2, [sp, #24]
 8006c82:	2a01      	cmp	r2, #1
 8006c84:	f300 80ba 	bgt.w	8006dfc <_dtoa_r+0x884>
 8006c88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c8a:	2a00      	cmp	r2, #0
 8006c8c:	f000 80b2 	beq.w	8006df4 <_dtoa_r+0x87c>
 8006c90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c94:	9e07      	ldr	r6, [sp, #28]
 8006c96:	9d04      	ldr	r5, [sp, #16]
 8006c98:	9a04      	ldr	r2, [sp, #16]
 8006c9a:	441a      	add	r2, r3
 8006c9c:	9204      	str	r2, [sp, #16]
 8006c9e:	9a05      	ldr	r2, [sp, #20]
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	441a      	add	r2, r3
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	9205      	str	r2, [sp, #20]
 8006ca8:	f000 fd86 	bl	80077b8 <__i2b>
 8006cac:	4607      	mov	r7, r0
 8006cae:	2d00      	cmp	r5, #0
 8006cb0:	dd0c      	ble.n	8006ccc <_dtoa_r+0x754>
 8006cb2:	9b05      	ldr	r3, [sp, #20]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	dd09      	ble.n	8006ccc <_dtoa_r+0x754>
 8006cb8:	42ab      	cmp	r3, r5
 8006cba:	9a04      	ldr	r2, [sp, #16]
 8006cbc:	bfa8      	it	ge
 8006cbe:	462b      	movge	r3, r5
 8006cc0:	1ad2      	subs	r2, r2, r3
 8006cc2:	9204      	str	r2, [sp, #16]
 8006cc4:	9a05      	ldr	r2, [sp, #20]
 8006cc6:	1aed      	subs	r5, r5, r3
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	9305      	str	r3, [sp, #20]
 8006ccc:	9b07      	ldr	r3, [sp, #28]
 8006cce:	b31b      	cbz	r3, 8006d18 <_dtoa_r+0x7a0>
 8006cd0:	9b08      	ldr	r3, [sp, #32]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 80af 	beq.w	8006e36 <_dtoa_r+0x8be>
 8006cd8:	2e00      	cmp	r6, #0
 8006cda:	dd13      	ble.n	8006d04 <_dtoa_r+0x78c>
 8006cdc:	4639      	mov	r1, r7
 8006cde:	4632      	mov	r2, r6
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f000 fe29 	bl	8007938 <__pow5mult>
 8006ce6:	ee18 2a10 	vmov	r2, s16
 8006cea:	4601      	mov	r1, r0
 8006cec:	4607      	mov	r7, r0
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f000 fd78 	bl	80077e4 <__multiply>
 8006cf4:	ee18 1a10 	vmov	r1, s16
 8006cf8:	4680      	mov	r8, r0
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f000 fca4 	bl	8007648 <_Bfree>
 8006d00:	ee08 8a10 	vmov	s16, r8
 8006d04:	9b07      	ldr	r3, [sp, #28]
 8006d06:	1b9a      	subs	r2, r3, r6
 8006d08:	d006      	beq.n	8006d18 <_dtoa_r+0x7a0>
 8006d0a:	ee18 1a10 	vmov	r1, s16
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f000 fe12 	bl	8007938 <__pow5mult>
 8006d14:	ee08 0a10 	vmov	s16, r0
 8006d18:	2101      	movs	r1, #1
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 fd4c 	bl	80077b8 <__i2b>
 8006d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	4606      	mov	r6, r0
 8006d26:	f340 8088 	ble.w	8006e3a <_dtoa_r+0x8c2>
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	4601      	mov	r1, r0
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f000 fe02 	bl	8007938 <__pow5mult>
 8006d34:	9b06      	ldr	r3, [sp, #24]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	4606      	mov	r6, r0
 8006d3a:	f340 8081 	ble.w	8006e40 <_dtoa_r+0x8c8>
 8006d3e:	f04f 0800 	mov.w	r8, #0
 8006d42:	6933      	ldr	r3, [r6, #16]
 8006d44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d48:	6918      	ldr	r0, [r3, #16]
 8006d4a:	f000 fce5 	bl	8007718 <__hi0bits>
 8006d4e:	f1c0 0020 	rsb	r0, r0, #32
 8006d52:	9b05      	ldr	r3, [sp, #20]
 8006d54:	4418      	add	r0, r3
 8006d56:	f010 001f 	ands.w	r0, r0, #31
 8006d5a:	f000 8092 	beq.w	8006e82 <_dtoa_r+0x90a>
 8006d5e:	f1c0 0320 	rsb	r3, r0, #32
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	f340 808a 	ble.w	8006e7c <_dtoa_r+0x904>
 8006d68:	f1c0 001c 	rsb	r0, r0, #28
 8006d6c:	9b04      	ldr	r3, [sp, #16]
 8006d6e:	4403      	add	r3, r0
 8006d70:	9304      	str	r3, [sp, #16]
 8006d72:	9b05      	ldr	r3, [sp, #20]
 8006d74:	4403      	add	r3, r0
 8006d76:	4405      	add	r5, r0
 8006d78:	9305      	str	r3, [sp, #20]
 8006d7a:	9b04      	ldr	r3, [sp, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	dd07      	ble.n	8006d90 <_dtoa_r+0x818>
 8006d80:	ee18 1a10 	vmov	r1, s16
 8006d84:	461a      	mov	r2, r3
 8006d86:	4620      	mov	r0, r4
 8006d88:	f000 fe30 	bl	80079ec <__lshift>
 8006d8c:	ee08 0a10 	vmov	s16, r0
 8006d90:	9b05      	ldr	r3, [sp, #20]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	dd05      	ble.n	8006da2 <_dtoa_r+0x82a>
 8006d96:	4631      	mov	r1, r6
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 fe26 	bl	80079ec <__lshift>
 8006da0:	4606      	mov	r6, r0
 8006da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d06e      	beq.n	8006e86 <_dtoa_r+0x90e>
 8006da8:	ee18 0a10 	vmov	r0, s16
 8006dac:	4631      	mov	r1, r6
 8006dae:	f000 fe8d 	bl	8007acc <__mcmp>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	da67      	bge.n	8006e86 <_dtoa_r+0x90e>
 8006db6:	9b00      	ldr	r3, [sp, #0]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	ee18 1a10 	vmov	r1, s16
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	220a      	movs	r2, #10
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 fc61 	bl	800768c <__multadd>
 8006dca:	9b08      	ldr	r3, [sp, #32]
 8006dcc:	ee08 0a10 	vmov	s16, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 81b1 	beq.w	8007138 <_dtoa_r+0xbc0>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	4639      	mov	r1, r7
 8006dda:	220a      	movs	r2, #10
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 fc55 	bl	800768c <__multadd>
 8006de2:	9b02      	ldr	r3, [sp, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	4607      	mov	r7, r0
 8006de8:	f300 808e 	bgt.w	8006f08 <_dtoa_r+0x990>
 8006dec:	9b06      	ldr	r3, [sp, #24]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	dc51      	bgt.n	8006e96 <_dtoa_r+0x91e>
 8006df2:	e089      	b.n	8006f08 <_dtoa_r+0x990>
 8006df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006df6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006dfa:	e74b      	b.n	8006c94 <_dtoa_r+0x71c>
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	1e5e      	subs	r6, r3, #1
 8006e00:	9b07      	ldr	r3, [sp, #28]
 8006e02:	42b3      	cmp	r3, r6
 8006e04:	bfbf      	itttt	lt
 8006e06:	9b07      	ldrlt	r3, [sp, #28]
 8006e08:	9607      	strlt	r6, [sp, #28]
 8006e0a:	1af2      	sublt	r2, r6, r3
 8006e0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e0e:	bfb6      	itet	lt
 8006e10:	189b      	addlt	r3, r3, r2
 8006e12:	1b9e      	subge	r6, r3, r6
 8006e14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006e16:	9b03      	ldr	r3, [sp, #12]
 8006e18:	bfb8      	it	lt
 8006e1a:	2600      	movlt	r6, #0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	bfb7      	itett	lt
 8006e20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006e24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006e28:	1a9d      	sublt	r5, r3, r2
 8006e2a:	2300      	movlt	r3, #0
 8006e2c:	e734      	b.n	8006c98 <_dtoa_r+0x720>
 8006e2e:	9e07      	ldr	r6, [sp, #28]
 8006e30:	9d04      	ldr	r5, [sp, #16]
 8006e32:	9f08      	ldr	r7, [sp, #32]
 8006e34:	e73b      	b.n	8006cae <_dtoa_r+0x736>
 8006e36:	9a07      	ldr	r2, [sp, #28]
 8006e38:	e767      	b.n	8006d0a <_dtoa_r+0x792>
 8006e3a:	9b06      	ldr	r3, [sp, #24]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	dc18      	bgt.n	8006e72 <_dtoa_r+0x8fa>
 8006e40:	f1ba 0f00 	cmp.w	sl, #0
 8006e44:	d115      	bne.n	8006e72 <_dtoa_r+0x8fa>
 8006e46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e4a:	b993      	cbnz	r3, 8006e72 <_dtoa_r+0x8fa>
 8006e4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e50:	0d1b      	lsrs	r3, r3, #20
 8006e52:	051b      	lsls	r3, r3, #20
 8006e54:	b183      	cbz	r3, 8006e78 <_dtoa_r+0x900>
 8006e56:	9b04      	ldr	r3, [sp, #16]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	9304      	str	r3, [sp, #16]
 8006e5c:	9b05      	ldr	r3, [sp, #20]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	9305      	str	r3, [sp, #20]
 8006e62:	f04f 0801 	mov.w	r8, #1
 8006e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f47f af6a 	bne.w	8006d42 <_dtoa_r+0x7ca>
 8006e6e:	2001      	movs	r0, #1
 8006e70:	e76f      	b.n	8006d52 <_dtoa_r+0x7da>
 8006e72:	f04f 0800 	mov.w	r8, #0
 8006e76:	e7f6      	b.n	8006e66 <_dtoa_r+0x8ee>
 8006e78:	4698      	mov	r8, r3
 8006e7a:	e7f4      	b.n	8006e66 <_dtoa_r+0x8ee>
 8006e7c:	f43f af7d 	beq.w	8006d7a <_dtoa_r+0x802>
 8006e80:	4618      	mov	r0, r3
 8006e82:	301c      	adds	r0, #28
 8006e84:	e772      	b.n	8006d6c <_dtoa_r+0x7f4>
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	dc37      	bgt.n	8006efc <_dtoa_r+0x984>
 8006e8c:	9b06      	ldr	r3, [sp, #24]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	dd34      	ble.n	8006efc <_dtoa_r+0x984>
 8006e92:	9b03      	ldr	r3, [sp, #12]
 8006e94:	9302      	str	r3, [sp, #8]
 8006e96:	9b02      	ldr	r3, [sp, #8]
 8006e98:	b96b      	cbnz	r3, 8006eb6 <_dtoa_r+0x93e>
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	2205      	movs	r2, #5
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f000 fbf4 	bl	800768c <__multadd>
 8006ea4:	4601      	mov	r1, r0
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	ee18 0a10 	vmov	r0, s16
 8006eac:	f000 fe0e 	bl	8007acc <__mcmp>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	f73f adbb 	bgt.w	8006a2c <_dtoa_r+0x4b4>
 8006eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb8:	9d01      	ldr	r5, [sp, #4]
 8006eba:	43db      	mvns	r3, r3
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	f04f 0800 	mov.w	r8, #0
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f000 fbbf 	bl	8007648 <_Bfree>
 8006eca:	2f00      	cmp	r7, #0
 8006ecc:	f43f aea4 	beq.w	8006c18 <_dtoa_r+0x6a0>
 8006ed0:	f1b8 0f00 	cmp.w	r8, #0
 8006ed4:	d005      	beq.n	8006ee2 <_dtoa_r+0x96a>
 8006ed6:	45b8      	cmp	r8, r7
 8006ed8:	d003      	beq.n	8006ee2 <_dtoa_r+0x96a>
 8006eda:	4641      	mov	r1, r8
 8006edc:	4620      	mov	r0, r4
 8006ede:	f000 fbb3 	bl	8007648 <_Bfree>
 8006ee2:	4639      	mov	r1, r7
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f000 fbaf 	bl	8007648 <_Bfree>
 8006eea:	e695      	b.n	8006c18 <_dtoa_r+0x6a0>
 8006eec:	2600      	movs	r6, #0
 8006eee:	4637      	mov	r7, r6
 8006ef0:	e7e1      	b.n	8006eb6 <_dtoa_r+0x93e>
 8006ef2:	9700      	str	r7, [sp, #0]
 8006ef4:	4637      	mov	r7, r6
 8006ef6:	e599      	b.n	8006a2c <_dtoa_r+0x4b4>
 8006ef8:	40240000 	.word	0x40240000
 8006efc:	9b08      	ldr	r3, [sp, #32]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 80ca 	beq.w	8007098 <_dtoa_r+0xb20>
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	9302      	str	r3, [sp, #8]
 8006f08:	2d00      	cmp	r5, #0
 8006f0a:	dd05      	ble.n	8006f18 <_dtoa_r+0x9a0>
 8006f0c:	4639      	mov	r1, r7
 8006f0e:	462a      	mov	r2, r5
 8006f10:	4620      	mov	r0, r4
 8006f12:	f000 fd6b 	bl	80079ec <__lshift>
 8006f16:	4607      	mov	r7, r0
 8006f18:	f1b8 0f00 	cmp.w	r8, #0
 8006f1c:	d05b      	beq.n	8006fd6 <_dtoa_r+0xa5e>
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 fb51 	bl	80075c8 <_Balloc>
 8006f26:	4605      	mov	r5, r0
 8006f28:	b928      	cbnz	r0, 8006f36 <_dtoa_r+0x9be>
 8006f2a:	4b87      	ldr	r3, [pc, #540]	; (8007148 <_dtoa_r+0xbd0>)
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f32:	f7ff bb3b 	b.w	80065ac <_dtoa_r+0x34>
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	3202      	adds	r2, #2
 8006f3a:	0092      	lsls	r2, r2, #2
 8006f3c:	f107 010c 	add.w	r1, r7, #12
 8006f40:	300c      	adds	r0, #12
 8006f42:	f000 fb33 	bl	80075ac <memcpy>
 8006f46:	2201      	movs	r2, #1
 8006f48:	4629      	mov	r1, r5
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f000 fd4e 	bl	80079ec <__lshift>
 8006f50:	9b01      	ldr	r3, [sp, #4]
 8006f52:	f103 0901 	add.w	r9, r3, #1
 8006f56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	9305      	str	r3, [sp, #20]
 8006f5e:	f00a 0301 	and.w	r3, sl, #1
 8006f62:	46b8      	mov	r8, r7
 8006f64:	9304      	str	r3, [sp, #16]
 8006f66:	4607      	mov	r7, r0
 8006f68:	4631      	mov	r1, r6
 8006f6a:	ee18 0a10 	vmov	r0, s16
 8006f6e:	f7ff fa77 	bl	8006460 <quorem>
 8006f72:	4641      	mov	r1, r8
 8006f74:	9002      	str	r0, [sp, #8]
 8006f76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f7a:	ee18 0a10 	vmov	r0, s16
 8006f7e:	f000 fda5 	bl	8007acc <__mcmp>
 8006f82:	463a      	mov	r2, r7
 8006f84:	9003      	str	r0, [sp, #12]
 8006f86:	4631      	mov	r1, r6
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 fdbb 	bl	8007b04 <__mdiff>
 8006f8e:	68c2      	ldr	r2, [r0, #12]
 8006f90:	f109 3bff 	add.w	fp, r9, #4294967295
 8006f94:	4605      	mov	r5, r0
 8006f96:	bb02      	cbnz	r2, 8006fda <_dtoa_r+0xa62>
 8006f98:	4601      	mov	r1, r0
 8006f9a:	ee18 0a10 	vmov	r0, s16
 8006f9e:	f000 fd95 	bl	8007acc <__mcmp>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	9207      	str	r2, [sp, #28]
 8006faa:	f000 fb4d 	bl	8007648 <_Bfree>
 8006fae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006fb2:	ea43 0102 	orr.w	r1, r3, r2
 8006fb6:	9b04      	ldr	r3, [sp, #16]
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	464d      	mov	r5, r9
 8006fbc:	d10f      	bne.n	8006fde <_dtoa_r+0xa66>
 8006fbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006fc2:	d02a      	beq.n	800701a <_dtoa_r+0xaa2>
 8006fc4:	9b03      	ldr	r3, [sp, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	dd02      	ble.n	8006fd0 <_dtoa_r+0xa58>
 8006fca:	9b02      	ldr	r3, [sp, #8]
 8006fcc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006fd0:	f88b a000 	strb.w	sl, [fp]
 8006fd4:	e775      	b.n	8006ec2 <_dtoa_r+0x94a>
 8006fd6:	4638      	mov	r0, r7
 8006fd8:	e7ba      	b.n	8006f50 <_dtoa_r+0x9d8>
 8006fda:	2201      	movs	r2, #1
 8006fdc:	e7e2      	b.n	8006fa4 <_dtoa_r+0xa2c>
 8006fde:	9b03      	ldr	r3, [sp, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	db04      	blt.n	8006fee <_dtoa_r+0xa76>
 8006fe4:	9906      	ldr	r1, [sp, #24]
 8006fe6:	430b      	orrs	r3, r1
 8006fe8:	9904      	ldr	r1, [sp, #16]
 8006fea:	430b      	orrs	r3, r1
 8006fec:	d122      	bne.n	8007034 <_dtoa_r+0xabc>
 8006fee:	2a00      	cmp	r2, #0
 8006ff0:	ddee      	ble.n	8006fd0 <_dtoa_r+0xa58>
 8006ff2:	ee18 1a10 	vmov	r1, s16
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f000 fcf7 	bl	80079ec <__lshift>
 8006ffe:	4631      	mov	r1, r6
 8007000:	ee08 0a10 	vmov	s16, r0
 8007004:	f000 fd62 	bl	8007acc <__mcmp>
 8007008:	2800      	cmp	r0, #0
 800700a:	dc03      	bgt.n	8007014 <_dtoa_r+0xa9c>
 800700c:	d1e0      	bne.n	8006fd0 <_dtoa_r+0xa58>
 800700e:	f01a 0f01 	tst.w	sl, #1
 8007012:	d0dd      	beq.n	8006fd0 <_dtoa_r+0xa58>
 8007014:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007018:	d1d7      	bne.n	8006fca <_dtoa_r+0xa52>
 800701a:	2339      	movs	r3, #57	; 0x39
 800701c:	f88b 3000 	strb.w	r3, [fp]
 8007020:	462b      	mov	r3, r5
 8007022:	461d      	mov	r5, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800702a:	2a39      	cmp	r2, #57	; 0x39
 800702c:	d071      	beq.n	8007112 <_dtoa_r+0xb9a>
 800702e:	3201      	adds	r2, #1
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	e746      	b.n	8006ec2 <_dtoa_r+0x94a>
 8007034:	2a00      	cmp	r2, #0
 8007036:	dd07      	ble.n	8007048 <_dtoa_r+0xad0>
 8007038:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800703c:	d0ed      	beq.n	800701a <_dtoa_r+0xaa2>
 800703e:	f10a 0301 	add.w	r3, sl, #1
 8007042:	f88b 3000 	strb.w	r3, [fp]
 8007046:	e73c      	b.n	8006ec2 <_dtoa_r+0x94a>
 8007048:	9b05      	ldr	r3, [sp, #20]
 800704a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800704e:	4599      	cmp	r9, r3
 8007050:	d047      	beq.n	80070e2 <_dtoa_r+0xb6a>
 8007052:	ee18 1a10 	vmov	r1, s16
 8007056:	2300      	movs	r3, #0
 8007058:	220a      	movs	r2, #10
 800705a:	4620      	mov	r0, r4
 800705c:	f000 fb16 	bl	800768c <__multadd>
 8007060:	45b8      	cmp	r8, r7
 8007062:	ee08 0a10 	vmov	s16, r0
 8007066:	f04f 0300 	mov.w	r3, #0
 800706a:	f04f 020a 	mov.w	r2, #10
 800706e:	4641      	mov	r1, r8
 8007070:	4620      	mov	r0, r4
 8007072:	d106      	bne.n	8007082 <_dtoa_r+0xb0a>
 8007074:	f000 fb0a 	bl	800768c <__multadd>
 8007078:	4680      	mov	r8, r0
 800707a:	4607      	mov	r7, r0
 800707c:	f109 0901 	add.w	r9, r9, #1
 8007080:	e772      	b.n	8006f68 <_dtoa_r+0x9f0>
 8007082:	f000 fb03 	bl	800768c <__multadd>
 8007086:	4639      	mov	r1, r7
 8007088:	4680      	mov	r8, r0
 800708a:	2300      	movs	r3, #0
 800708c:	220a      	movs	r2, #10
 800708e:	4620      	mov	r0, r4
 8007090:	f000 fafc 	bl	800768c <__multadd>
 8007094:	4607      	mov	r7, r0
 8007096:	e7f1      	b.n	800707c <_dtoa_r+0xb04>
 8007098:	9b03      	ldr	r3, [sp, #12]
 800709a:	9302      	str	r3, [sp, #8]
 800709c:	9d01      	ldr	r5, [sp, #4]
 800709e:	ee18 0a10 	vmov	r0, s16
 80070a2:	4631      	mov	r1, r6
 80070a4:	f7ff f9dc 	bl	8006460 <quorem>
 80070a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80070ac:	9b01      	ldr	r3, [sp, #4]
 80070ae:	f805 ab01 	strb.w	sl, [r5], #1
 80070b2:	1aea      	subs	r2, r5, r3
 80070b4:	9b02      	ldr	r3, [sp, #8]
 80070b6:	4293      	cmp	r3, r2
 80070b8:	dd09      	ble.n	80070ce <_dtoa_r+0xb56>
 80070ba:	ee18 1a10 	vmov	r1, s16
 80070be:	2300      	movs	r3, #0
 80070c0:	220a      	movs	r2, #10
 80070c2:	4620      	mov	r0, r4
 80070c4:	f000 fae2 	bl	800768c <__multadd>
 80070c8:	ee08 0a10 	vmov	s16, r0
 80070cc:	e7e7      	b.n	800709e <_dtoa_r+0xb26>
 80070ce:	9b02      	ldr	r3, [sp, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bfc8      	it	gt
 80070d4:	461d      	movgt	r5, r3
 80070d6:	9b01      	ldr	r3, [sp, #4]
 80070d8:	bfd8      	it	le
 80070da:	2501      	movle	r5, #1
 80070dc:	441d      	add	r5, r3
 80070de:	f04f 0800 	mov.w	r8, #0
 80070e2:	ee18 1a10 	vmov	r1, s16
 80070e6:	2201      	movs	r2, #1
 80070e8:	4620      	mov	r0, r4
 80070ea:	f000 fc7f 	bl	80079ec <__lshift>
 80070ee:	4631      	mov	r1, r6
 80070f0:	ee08 0a10 	vmov	s16, r0
 80070f4:	f000 fcea 	bl	8007acc <__mcmp>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	dc91      	bgt.n	8007020 <_dtoa_r+0xaa8>
 80070fc:	d102      	bne.n	8007104 <_dtoa_r+0xb8c>
 80070fe:	f01a 0f01 	tst.w	sl, #1
 8007102:	d18d      	bne.n	8007020 <_dtoa_r+0xaa8>
 8007104:	462b      	mov	r3, r5
 8007106:	461d      	mov	r5, r3
 8007108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800710c:	2a30      	cmp	r2, #48	; 0x30
 800710e:	d0fa      	beq.n	8007106 <_dtoa_r+0xb8e>
 8007110:	e6d7      	b.n	8006ec2 <_dtoa_r+0x94a>
 8007112:	9a01      	ldr	r2, [sp, #4]
 8007114:	429a      	cmp	r2, r3
 8007116:	d184      	bne.n	8007022 <_dtoa_r+0xaaa>
 8007118:	9b00      	ldr	r3, [sp, #0]
 800711a:	3301      	adds	r3, #1
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	2331      	movs	r3, #49	; 0x31
 8007120:	7013      	strb	r3, [r2, #0]
 8007122:	e6ce      	b.n	8006ec2 <_dtoa_r+0x94a>
 8007124:	4b09      	ldr	r3, [pc, #36]	; (800714c <_dtoa_r+0xbd4>)
 8007126:	f7ff ba95 	b.w	8006654 <_dtoa_r+0xdc>
 800712a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800712c:	2b00      	cmp	r3, #0
 800712e:	f47f aa6e 	bne.w	800660e <_dtoa_r+0x96>
 8007132:	4b07      	ldr	r3, [pc, #28]	; (8007150 <_dtoa_r+0xbd8>)
 8007134:	f7ff ba8e 	b.w	8006654 <_dtoa_r+0xdc>
 8007138:	9b02      	ldr	r3, [sp, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	dcae      	bgt.n	800709c <_dtoa_r+0xb24>
 800713e:	9b06      	ldr	r3, [sp, #24]
 8007140:	2b02      	cmp	r3, #2
 8007142:	f73f aea8 	bgt.w	8006e96 <_dtoa_r+0x91e>
 8007146:	e7a9      	b.n	800709c <_dtoa_r+0xb24>
 8007148:	080096cf 	.word	0x080096cf
 800714c:	0800962c 	.word	0x0800962c
 8007150:	08009650 	.word	0x08009650

08007154 <__sflush_r>:
 8007154:	898a      	ldrh	r2, [r1, #12]
 8007156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800715a:	4605      	mov	r5, r0
 800715c:	0710      	lsls	r0, r2, #28
 800715e:	460c      	mov	r4, r1
 8007160:	d458      	bmi.n	8007214 <__sflush_r+0xc0>
 8007162:	684b      	ldr	r3, [r1, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	dc05      	bgt.n	8007174 <__sflush_r+0x20>
 8007168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	dc02      	bgt.n	8007174 <__sflush_r+0x20>
 800716e:	2000      	movs	r0, #0
 8007170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007176:	2e00      	cmp	r6, #0
 8007178:	d0f9      	beq.n	800716e <__sflush_r+0x1a>
 800717a:	2300      	movs	r3, #0
 800717c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007180:	682f      	ldr	r7, [r5, #0]
 8007182:	602b      	str	r3, [r5, #0]
 8007184:	d032      	beq.n	80071ec <__sflush_r+0x98>
 8007186:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	075a      	lsls	r2, r3, #29
 800718c:	d505      	bpl.n	800719a <__sflush_r+0x46>
 800718e:	6863      	ldr	r3, [r4, #4]
 8007190:	1ac0      	subs	r0, r0, r3
 8007192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007194:	b10b      	cbz	r3, 800719a <__sflush_r+0x46>
 8007196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007198:	1ac0      	subs	r0, r0, r3
 800719a:	2300      	movs	r3, #0
 800719c:	4602      	mov	r2, r0
 800719e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071a0:	6a21      	ldr	r1, [r4, #32]
 80071a2:	4628      	mov	r0, r5
 80071a4:	47b0      	blx	r6
 80071a6:	1c43      	adds	r3, r0, #1
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	d106      	bne.n	80071ba <__sflush_r+0x66>
 80071ac:	6829      	ldr	r1, [r5, #0]
 80071ae:	291d      	cmp	r1, #29
 80071b0:	d82c      	bhi.n	800720c <__sflush_r+0xb8>
 80071b2:	4a2a      	ldr	r2, [pc, #168]	; (800725c <__sflush_r+0x108>)
 80071b4:	40ca      	lsrs	r2, r1
 80071b6:	07d6      	lsls	r6, r2, #31
 80071b8:	d528      	bpl.n	800720c <__sflush_r+0xb8>
 80071ba:	2200      	movs	r2, #0
 80071bc:	6062      	str	r2, [r4, #4]
 80071be:	04d9      	lsls	r1, r3, #19
 80071c0:	6922      	ldr	r2, [r4, #16]
 80071c2:	6022      	str	r2, [r4, #0]
 80071c4:	d504      	bpl.n	80071d0 <__sflush_r+0x7c>
 80071c6:	1c42      	adds	r2, r0, #1
 80071c8:	d101      	bne.n	80071ce <__sflush_r+0x7a>
 80071ca:	682b      	ldr	r3, [r5, #0]
 80071cc:	b903      	cbnz	r3, 80071d0 <__sflush_r+0x7c>
 80071ce:	6560      	str	r0, [r4, #84]	; 0x54
 80071d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071d2:	602f      	str	r7, [r5, #0]
 80071d4:	2900      	cmp	r1, #0
 80071d6:	d0ca      	beq.n	800716e <__sflush_r+0x1a>
 80071d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071dc:	4299      	cmp	r1, r3
 80071de:	d002      	beq.n	80071e6 <__sflush_r+0x92>
 80071e0:	4628      	mov	r0, r5
 80071e2:	f000 fd8b 	bl	8007cfc <_free_r>
 80071e6:	2000      	movs	r0, #0
 80071e8:	6360      	str	r0, [r4, #52]	; 0x34
 80071ea:	e7c1      	b.n	8007170 <__sflush_r+0x1c>
 80071ec:	6a21      	ldr	r1, [r4, #32]
 80071ee:	2301      	movs	r3, #1
 80071f0:	4628      	mov	r0, r5
 80071f2:	47b0      	blx	r6
 80071f4:	1c41      	adds	r1, r0, #1
 80071f6:	d1c7      	bne.n	8007188 <__sflush_r+0x34>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0c4      	beq.n	8007188 <__sflush_r+0x34>
 80071fe:	2b1d      	cmp	r3, #29
 8007200:	d001      	beq.n	8007206 <__sflush_r+0xb2>
 8007202:	2b16      	cmp	r3, #22
 8007204:	d101      	bne.n	800720a <__sflush_r+0xb6>
 8007206:	602f      	str	r7, [r5, #0]
 8007208:	e7b1      	b.n	800716e <__sflush_r+0x1a>
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007210:	81a3      	strh	r3, [r4, #12]
 8007212:	e7ad      	b.n	8007170 <__sflush_r+0x1c>
 8007214:	690f      	ldr	r7, [r1, #16]
 8007216:	2f00      	cmp	r7, #0
 8007218:	d0a9      	beq.n	800716e <__sflush_r+0x1a>
 800721a:	0793      	lsls	r3, r2, #30
 800721c:	680e      	ldr	r6, [r1, #0]
 800721e:	bf08      	it	eq
 8007220:	694b      	ldreq	r3, [r1, #20]
 8007222:	600f      	str	r7, [r1, #0]
 8007224:	bf18      	it	ne
 8007226:	2300      	movne	r3, #0
 8007228:	eba6 0807 	sub.w	r8, r6, r7
 800722c:	608b      	str	r3, [r1, #8]
 800722e:	f1b8 0f00 	cmp.w	r8, #0
 8007232:	dd9c      	ble.n	800716e <__sflush_r+0x1a>
 8007234:	6a21      	ldr	r1, [r4, #32]
 8007236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007238:	4643      	mov	r3, r8
 800723a:	463a      	mov	r2, r7
 800723c:	4628      	mov	r0, r5
 800723e:	47b0      	blx	r6
 8007240:	2800      	cmp	r0, #0
 8007242:	dc06      	bgt.n	8007252 <__sflush_r+0xfe>
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800724a:	81a3      	strh	r3, [r4, #12]
 800724c:	f04f 30ff 	mov.w	r0, #4294967295
 8007250:	e78e      	b.n	8007170 <__sflush_r+0x1c>
 8007252:	4407      	add	r7, r0
 8007254:	eba8 0800 	sub.w	r8, r8, r0
 8007258:	e7e9      	b.n	800722e <__sflush_r+0xda>
 800725a:	bf00      	nop
 800725c:	20400001 	.word	0x20400001

08007260 <_fflush_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	690b      	ldr	r3, [r1, #16]
 8007264:	4605      	mov	r5, r0
 8007266:	460c      	mov	r4, r1
 8007268:	b913      	cbnz	r3, 8007270 <_fflush_r+0x10>
 800726a:	2500      	movs	r5, #0
 800726c:	4628      	mov	r0, r5
 800726e:	bd38      	pop	{r3, r4, r5, pc}
 8007270:	b118      	cbz	r0, 800727a <_fflush_r+0x1a>
 8007272:	6983      	ldr	r3, [r0, #24]
 8007274:	b90b      	cbnz	r3, 800727a <_fflush_r+0x1a>
 8007276:	f000 f887 	bl	8007388 <__sinit>
 800727a:	4b14      	ldr	r3, [pc, #80]	; (80072cc <_fflush_r+0x6c>)
 800727c:	429c      	cmp	r4, r3
 800727e:	d11b      	bne.n	80072b8 <_fflush_r+0x58>
 8007280:	686c      	ldr	r4, [r5, #4]
 8007282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0ef      	beq.n	800726a <_fflush_r+0xa>
 800728a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800728c:	07d0      	lsls	r0, r2, #31
 800728e:	d404      	bmi.n	800729a <_fflush_r+0x3a>
 8007290:	0599      	lsls	r1, r3, #22
 8007292:	d402      	bmi.n	800729a <_fflush_r+0x3a>
 8007294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007296:	f000 f91a 	bl	80074ce <__retarget_lock_acquire_recursive>
 800729a:	4628      	mov	r0, r5
 800729c:	4621      	mov	r1, r4
 800729e:	f7ff ff59 	bl	8007154 <__sflush_r>
 80072a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072a4:	07da      	lsls	r2, r3, #31
 80072a6:	4605      	mov	r5, r0
 80072a8:	d4e0      	bmi.n	800726c <_fflush_r+0xc>
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	059b      	lsls	r3, r3, #22
 80072ae:	d4dd      	bmi.n	800726c <_fflush_r+0xc>
 80072b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072b2:	f000 f90d 	bl	80074d0 <__retarget_lock_release_recursive>
 80072b6:	e7d9      	b.n	800726c <_fflush_r+0xc>
 80072b8:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <_fflush_r+0x70>)
 80072ba:	429c      	cmp	r4, r3
 80072bc:	d101      	bne.n	80072c2 <_fflush_r+0x62>
 80072be:	68ac      	ldr	r4, [r5, #8]
 80072c0:	e7df      	b.n	8007282 <_fflush_r+0x22>
 80072c2:	4b04      	ldr	r3, [pc, #16]	; (80072d4 <_fflush_r+0x74>)
 80072c4:	429c      	cmp	r4, r3
 80072c6:	bf08      	it	eq
 80072c8:	68ec      	ldreq	r4, [r5, #12]
 80072ca:	e7da      	b.n	8007282 <_fflush_r+0x22>
 80072cc:	08009700 	.word	0x08009700
 80072d0:	08009720 	.word	0x08009720
 80072d4:	080096e0 	.word	0x080096e0

080072d8 <std>:
 80072d8:	2300      	movs	r3, #0
 80072da:	b510      	push	{r4, lr}
 80072dc:	4604      	mov	r4, r0
 80072de:	e9c0 3300 	strd	r3, r3, [r0]
 80072e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072e6:	6083      	str	r3, [r0, #8]
 80072e8:	8181      	strh	r1, [r0, #12]
 80072ea:	6643      	str	r3, [r0, #100]	; 0x64
 80072ec:	81c2      	strh	r2, [r0, #14]
 80072ee:	6183      	str	r3, [r0, #24]
 80072f0:	4619      	mov	r1, r3
 80072f2:	2208      	movs	r2, #8
 80072f4:	305c      	adds	r0, #92	; 0x5c
 80072f6:	f7fe fa25 	bl	8005744 <memset>
 80072fa:	4b05      	ldr	r3, [pc, #20]	; (8007310 <std+0x38>)
 80072fc:	6263      	str	r3, [r4, #36]	; 0x24
 80072fe:	4b05      	ldr	r3, [pc, #20]	; (8007314 <std+0x3c>)
 8007300:	62a3      	str	r3, [r4, #40]	; 0x28
 8007302:	4b05      	ldr	r3, [pc, #20]	; (8007318 <std+0x40>)
 8007304:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007306:	4b05      	ldr	r3, [pc, #20]	; (800731c <std+0x44>)
 8007308:	6224      	str	r4, [r4, #32]
 800730a:	6323      	str	r3, [r4, #48]	; 0x30
 800730c:	bd10      	pop	{r4, pc}
 800730e:	bf00      	nop
 8007310:	08008191 	.word	0x08008191
 8007314:	080081b3 	.word	0x080081b3
 8007318:	080081eb 	.word	0x080081eb
 800731c:	0800820f 	.word	0x0800820f

08007320 <_cleanup_r>:
 8007320:	4901      	ldr	r1, [pc, #4]	; (8007328 <_cleanup_r+0x8>)
 8007322:	f000 b8af 	b.w	8007484 <_fwalk_reent>
 8007326:	bf00      	nop
 8007328:	08007261 	.word	0x08007261

0800732c <__sfmoreglue>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	2268      	movs	r2, #104	; 0x68
 8007330:	1e4d      	subs	r5, r1, #1
 8007332:	4355      	muls	r5, r2
 8007334:	460e      	mov	r6, r1
 8007336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800733a:	f000 fd4b 	bl	8007dd4 <_malloc_r>
 800733e:	4604      	mov	r4, r0
 8007340:	b140      	cbz	r0, 8007354 <__sfmoreglue+0x28>
 8007342:	2100      	movs	r1, #0
 8007344:	e9c0 1600 	strd	r1, r6, [r0]
 8007348:	300c      	adds	r0, #12
 800734a:	60a0      	str	r0, [r4, #8]
 800734c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007350:	f7fe f9f8 	bl	8005744 <memset>
 8007354:	4620      	mov	r0, r4
 8007356:	bd70      	pop	{r4, r5, r6, pc}

08007358 <__sfp_lock_acquire>:
 8007358:	4801      	ldr	r0, [pc, #4]	; (8007360 <__sfp_lock_acquire+0x8>)
 800735a:	f000 b8b8 	b.w	80074ce <__retarget_lock_acquire_recursive>
 800735e:	bf00      	nop
 8007360:	200003e5 	.word	0x200003e5

08007364 <__sfp_lock_release>:
 8007364:	4801      	ldr	r0, [pc, #4]	; (800736c <__sfp_lock_release+0x8>)
 8007366:	f000 b8b3 	b.w	80074d0 <__retarget_lock_release_recursive>
 800736a:	bf00      	nop
 800736c:	200003e5 	.word	0x200003e5

08007370 <__sinit_lock_acquire>:
 8007370:	4801      	ldr	r0, [pc, #4]	; (8007378 <__sinit_lock_acquire+0x8>)
 8007372:	f000 b8ac 	b.w	80074ce <__retarget_lock_acquire_recursive>
 8007376:	bf00      	nop
 8007378:	200003e6 	.word	0x200003e6

0800737c <__sinit_lock_release>:
 800737c:	4801      	ldr	r0, [pc, #4]	; (8007384 <__sinit_lock_release+0x8>)
 800737e:	f000 b8a7 	b.w	80074d0 <__retarget_lock_release_recursive>
 8007382:	bf00      	nop
 8007384:	200003e6 	.word	0x200003e6

08007388 <__sinit>:
 8007388:	b510      	push	{r4, lr}
 800738a:	4604      	mov	r4, r0
 800738c:	f7ff fff0 	bl	8007370 <__sinit_lock_acquire>
 8007390:	69a3      	ldr	r3, [r4, #24]
 8007392:	b11b      	cbz	r3, 800739c <__sinit+0x14>
 8007394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007398:	f7ff bff0 	b.w	800737c <__sinit_lock_release>
 800739c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80073a0:	6523      	str	r3, [r4, #80]	; 0x50
 80073a2:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <__sinit+0x68>)
 80073a4:	4a13      	ldr	r2, [pc, #76]	; (80073f4 <__sinit+0x6c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80073aa:	42a3      	cmp	r3, r4
 80073ac:	bf04      	itt	eq
 80073ae:	2301      	moveq	r3, #1
 80073b0:	61a3      	streq	r3, [r4, #24]
 80073b2:	4620      	mov	r0, r4
 80073b4:	f000 f820 	bl	80073f8 <__sfp>
 80073b8:	6060      	str	r0, [r4, #4]
 80073ba:	4620      	mov	r0, r4
 80073bc:	f000 f81c 	bl	80073f8 <__sfp>
 80073c0:	60a0      	str	r0, [r4, #8]
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 f818 	bl	80073f8 <__sfp>
 80073c8:	2200      	movs	r2, #0
 80073ca:	60e0      	str	r0, [r4, #12]
 80073cc:	2104      	movs	r1, #4
 80073ce:	6860      	ldr	r0, [r4, #4]
 80073d0:	f7ff ff82 	bl	80072d8 <std>
 80073d4:	68a0      	ldr	r0, [r4, #8]
 80073d6:	2201      	movs	r2, #1
 80073d8:	2109      	movs	r1, #9
 80073da:	f7ff ff7d 	bl	80072d8 <std>
 80073de:	68e0      	ldr	r0, [r4, #12]
 80073e0:	2202      	movs	r2, #2
 80073e2:	2112      	movs	r1, #18
 80073e4:	f7ff ff78 	bl	80072d8 <std>
 80073e8:	2301      	movs	r3, #1
 80073ea:	61a3      	str	r3, [r4, #24]
 80073ec:	e7d2      	b.n	8007394 <__sinit+0xc>
 80073ee:	bf00      	nop
 80073f0:	08009618 	.word	0x08009618
 80073f4:	08007321 	.word	0x08007321

080073f8 <__sfp>:
 80073f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fa:	4607      	mov	r7, r0
 80073fc:	f7ff ffac 	bl	8007358 <__sfp_lock_acquire>
 8007400:	4b1e      	ldr	r3, [pc, #120]	; (800747c <__sfp+0x84>)
 8007402:	681e      	ldr	r6, [r3, #0]
 8007404:	69b3      	ldr	r3, [r6, #24]
 8007406:	b913      	cbnz	r3, 800740e <__sfp+0x16>
 8007408:	4630      	mov	r0, r6
 800740a:	f7ff ffbd 	bl	8007388 <__sinit>
 800740e:	3648      	adds	r6, #72	; 0x48
 8007410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007414:	3b01      	subs	r3, #1
 8007416:	d503      	bpl.n	8007420 <__sfp+0x28>
 8007418:	6833      	ldr	r3, [r6, #0]
 800741a:	b30b      	cbz	r3, 8007460 <__sfp+0x68>
 800741c:	6836      	ldr	r6, [r6, #0]
 800741e:	e7f7      	b.n	8007410 <__sfp+0x18>
 8007420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007424:	b9d5      	cbnz	r5, 800745c <__sfp+0x64>
 8007426:	4b16      	ldr	r3, [pc, #88]	; (8007480 <__sfp+0x88>)
 8007428:	60e3      	str	r3, [r4, #12]
 800742a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800742e:	6665      	str	r5, [r4, #100]	; 0x64
 8007430:	f000 f84c 	bl	80074cc <__retarget_lock_init_recursive>
 8007434:	f7ff ff96 	bl	8007364 <__sfp_lock_release>
 8007438:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800743c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007440:	6025      	str	r5, [r4, #0]
 8007442:	61a5      	str	r5, [r4, #24]
 8007444:	2208      	movs	r2, #8
 8007446:	4629      	mov	r1, r5
 8007448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800744c:	f7fe f97a 	bl	8005744 <memset>
 8007450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007458:	4620      	mov	r0, r4
 800745a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800745c:	3468      	adds	r4, #104	; 0x68
 800745e:	e7d9      	b.n	8007414 <__sfp+0x1c>
 8007460:	2104      	movs	r1, #4
 8007462:	4638      	mov	r0, r7
 8007464:	f7ff ff62 	bl	800732c <__sfmoreglue>
 8007468:	4604      	mov	r4, r0
 800746a:	6030      	str	r0, [r6, #0]
 800746c:	2800      	cmp	r0, #0
 800746e:	d1d5      	bne.n	800741c <__sfp+0x24>
 8007470:	f7ff ff78 	bl	8007364 <__sfp_lock_release>
 8007474:	230c      	movs	r3, #12
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	e7ee      	b.n	8007458 <__sfp+0x60>
 800747a:	bf00      	nop
 800747c:	08009618 	.word	0x08009618
 8007480:	ffff0001 	.word	0xffff0001

08007484 <_fwalk_reent>:
 8007484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007488:	4606      	mov	r6, r0
 800748a:	4688      	mov	r8, r1
 800748c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007490:	2700      	movs	r7, #0
 8007492:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007496:	f1b9 0901 	subs.w	r9, r9, #1
 800749a:	d505      	bpl.n	80074a8 <_fwalk_reent+0x24>
 800749c:	6824      	ldr	r4, [r4, #0]
 800749e:	2c00      	cmp	r4, #0
 80074a0:	d1f7      	bne.n	8007492 <_fwalk_reent+0xe>
 80074a2:	4638      	mov	r0, r7
 80074a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074a8:	89ab      	ldrh	r3, [r5, #12]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d907      	bls.n	80074be <_fwalk_reent+0x3a>
 80074ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074b2:	3301      	adds	r3, #1
 80074b4:	d003      	beq.n	80074be <_fwalk_reent+0x3a>
 80074b6:	4629      	mov	r1, r5
 80074b8:	4630      	mov	r0, r6
 80074ba:	47c0      	blx	r8
 80074bc:	4307      	orrs	r7, r0
 80074be:	3568      	adds	r5, #104	; 0x68
 80074c0:	e7e9      	b.n	8007496 <_fwalk_reent+0x12>
	...

080074c4 <_localeconv_r>:
 80074c4:	4800      	ldr	r0, [pc, #0]	; (80074c8 <_localeconv_r+0x4>)
 80074c6:	4770      	bx	lr
 80074c8:	20000160 	.word	0x20000160

080074cc <__retarget_lock_init_recursive>:
 80074cc:	4770      	bx	lr

080074ce <__retarget_lock_acquire_recursive>:
 80074ce:	4770      	bx	lr

080074d0 <__retarget_lock_release_recursive>:
 80074d0:	4770      	bx	lr

080074d2 <__swhatbuf_r>:
 80074d2:	b570      	push	{r4, r5, r6, lr}
 80074d4:	460e      	mov	r6, r1
 80074d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074da:	2900      	cmp	r1, #0
 80074dc:	b096      	sub	sp, #88	; 0x58
 80074de:	4614      	mov	r4, r2
 80074e0:	461d      	mov	r5, r3
 80074e2:	da08      	bge.n	80074f6 <__swhatbuf_r+0x24>
 80074e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	602a      	str	r2, [r5, #0]
 80074ec:	061a      	lsls	r2, r3, #24
 80074ee:	d410      	bmi.n	8007512 <__swhatbuf_r+0x40>
 80074f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074f4:	e00e      	b.n	8007514 <__swhatbuf_r+0x42>
 80074f6:	466a      	mov	r2, sp
 80074f8:	f000 fee0 	bl	80082bc <_fstat_r>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	dbf1      	blt.n	80074e4 <__swhatbuf_r+0x12>
 8007500:	9a01      	ldr	r2, [sp, #4]
 8007502:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007506:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800750a:	425a      	negs	r2, r3
 800750c:	415a      	adcs	r2, r3
 800750e:	602a      	str	r2, [r5, #0]
 8007510:	e7ee      	b.n	80074f0 <__swhatbuf_r+0x1e>
 8007512:	2340      	movs	r3, #64	; 0x40
 8007514:	2000      	movs	r0, #0
 8007516:	6023      	str	r3, [r4, #0]
 8007518:	b016      	add	sp, #88	; 0x58
 800751a:	bd70      	pop	{r4, r5, r6, pc}

0800751c <__smakebuf_r>:
 800751c:	898b      	ldrh	r3, [r1, #12]
 800751e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007520:	079d      	lsls	r5, r3, #30
 8007522:	4606      	mov	r6, r0
 8007524:	460c      	mov	r4, r1
 8007526:	d507      	bpl.n	8007538 <__smakebuf_r+0x1c>
 8007528:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	6123      	str	r3, [r4, #16]
 8007530:	2301      	movs	r3, #1
 8007532:	6163      	str	r3, [r4, #20]
 8007534:	b002      	add	sp, #8
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	ab01      	add	r3, sp, #4
 800753a:	466a      	mov	r2, sp
 800753c:	f7ff ffc9 	bl	80074d2 <__swhatbuf_r>
 8007540:	9900      	ldr	r1, [sp, #0]
 8007542:	4605      	mov	r5, r0
 8007544:	4630      	mov	r0, r6
 8007546:	f000 fc45 	bl	8007dd4 <_malloc_r>
 800754a:	b948      	cbnz	r0, 8007560 <__smakebuf_r+0x44>
 800754c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007550:	059a      	lsls	r2, r3, #22
 8007552:	d4ef      	bmi.n	8007534 <__smakebuf_r+0x18>
 8007554:	f023 0303 	bic.w	r3, r3, #3
 8007558:	f043 0302 	orr.w	r3, r3, #2
 800755c:	81a3      	strh	r3, [r4, #12]
 800755e:	e7e3      	b.n	8007528 <__smakebuf_r+0xc>
 8007560:	4b0d      	ldr	r3, [pc, #52]	; (8007598 <__smakebuf_r+0x7c>)
 8007562:	62b3      	str	r3, [r6, #40]	; 0x28
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	6020      	str	r0, [r4, #0]
 8007568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800756c:	81a3      	strh	r3, [r4, #12]
 800756e:	9b00      	ldr	r3, [sp, #0]
 8007570:	6163      	str	r3, [r4, #20]
 8007572:	9b01      	ldr	r3, [sp, #4]
 8007574:	6120      	str	r0, [r4, #16]
 8007576:	b15b      	cbz	r3, 8007590 <__smakebuf_r+0x74>
 8007578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800757c:	4630      	mov	r0, r6
 800757e:	f000 feaf 	bl	80082e0 <_isatty_r>
 8007582:	b128      	cbz	r0, 8007590 <__smakebuf_r+0x74>
 8007584:	89a3      	ldrh	r3, [r4, #12]
 8007586:	f023 0303 	bic.w	r3, r3, #3
 800758a:	f043 0301 	orr.w	r3, r3, #1
 800758e:	81a3      	strh	r3, [r4, #12]
 8007590:	89a0      	ldrh	r0, [r4, #12]
 8007592:	4305      	orrs	r5, r0
 8007594:	81a5      	strh	r5, [r4, #12]
 8007596:	e7cd      	b.n	8007534 <__smakebuf_r+0x18>
 8007598:	08007321 	.word	0x08007321

0800759c <malloc>:
 800759c:	4b02      	ldr	r3, [pc, #8]	; (80075a8 <malloc+0xc>)
 800759e:	4601      	mov	r1, r0
 80075a0:	6818      	ldr	r0, [r3, #0]
 80075a2:	f000 bc17 	b.w	8007dd4 <_malloc_r>
 80075a6:	bf00      	nop
 80075a8:	2000000c 	.word	0x2000000c

080075ac <memcpy>:
 80075ac:	440a      	add	r2, r1
 80075ae:	4291      	cmp	r1, r2
 80075b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80075b4:	d100      	bne.n	80075b8 <memcpy+0xc>
 80075b6:	4770      	bx	lr
 80075b8:	b510      	push	{r4, lr}
 80075ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075c2:	4291      	cmp	r1, r2
 80075c4:	d1f9      	bne.n	80075ba <memcpy+0xe>
 80075c6:	bd10      	pop	{r4, pc}

080075c8 <_Balloc>:
 80075c8:	b570      	push	{r4, r5, r6, lr}
 80075ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075cc:	4604      	mov	r4, r0
 80075ce:	460d      	mov	r5, r1
 80075d0:	b976      	cbnz	r6, 80075f0 <_Balloc+0x28>
 80075d2:	2010      	movs	r0, #16
 80075d4:	f7ff ffe2 	bl	800759c <malloc>
 80075d8:	4602      	mov	r2, r0
 80075da:	6260      	str	r0, [r4, #36]	; 0x24
 80075dc:	b920      	cbnz	r0, 80075e8 <_Balloc+0x20>
 80075de:	4b18      	ldr	r3, [pc, #96]	; (8007640 <_Balloc+0x78>)
 80075e0:	4818      	ldr	r0, [pc, #96]	; (8007644 <_Balloc+0x7c>)
 80075e2:	2166      	movs	r1, #102	; 0x66
 80075e4:	f000 fe2a 	bl	800823c <__assert_func>
 80075e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075ec:	6006      	str	r6, [r0, #0]
 80075ee:	60c6      	str	r6, [r0, #12]
 80075f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075f2:	68f3      	ldr	r3, [r6, #12]
 80075f4:	b183      	cbz	r3, 8007618 <_Balloc+0x50>
 80075f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075fe:	b9b8      	cbnz	r0, 8007630 <_Balloc+0x68>
 8007600:	2101      	movs	r1, #1
 8007602:	fa01 f605 	lsl.w	r6, r1, r5
 8007606:	1d72      	adds	r2, r6, #5
 8007608:	0092      	lsls	r2, r2, #2
 800760a:	4620      	mov	r0, r4
 800760c:	f000 fb60 	bl	8007cd0 <_calloc_r>
 8007610:	b160      	cbz	r0, 800762c <_Balloc+0x64>
 8007612:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007616:	e00e      	b.n	8007636 <_Balloc+0x6e>
 8007618:	2221      	movs	r2, #33	; 0x21
 800761a:	2104      	movs	r1, #4
 800761c:	4620      	mov	r0, r4
 800761e:	f000 fb57 	bl	8007cd0 <_calloc_r>
 8007622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007624:	60f0      	str	r0, [r6, #12]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e4      	bne.n	80075f6 <_Balloc+0x2e>
 800762c:	2000      	movs	r0, #0
 800762e:	bd70      	pop	{r4, r5, r6, pc}
 8007630:	6802      	ldr	r2, [r0, #0]
 8007632:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007636:	2300      	movs	r3, #0
 8007638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800763c:	e7f7      	b.n	800762e <_Balloc+0x66>
 800763e:	bf00      	nop
 8007640:	0800965d 	.word	0x0800965d
 8007644:	08009740 	.word	0x08009740

08007648 <_Bfree>:
 8007648:	b570      	push	{r4, r5, r6, lr}
 800764a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800764c:	4605      	mov	r5, r0
 800764e:	460c      	mov	r4, r1
 8007650:	b976      	cbnz	r6, 8007670 <_Bfree+0x28>
 8007652:	2010      	movs	r0, #16
 8007654:	f7ff ffa2 	bl	800759c <malloc>
 8007658:	4602      	mov	r2, r0
 800765a:	6268      	str	r0, [r5, #36]	; 0x24
 800765c:	b920      	cbnz	r0, 8007668 <_Bfree+0x20>
 800765e:	4b09      	ldr	r3, [pc, #36]	; (8007684 <_Bfree+0x3c>)
 8007660:	4809      	ldr	r0, [pc, #36]	; (8007688 <_Bfree+0x40>)
 8007662:	218a      	movs	r1, #138	; 0x8a
 8007664:	f000 fdea 	bl	800823c <__assert_func>
 8007668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800766c:	6006      	str	r6, [r0, #0]
 800766e:	60c6      	str	r6, [r0, #12]
 8007670:	b13c      	cbz	r4, 8007682 <_Bfree+0x3a>
 8007672:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007674:	6862      	ldr	r2, [r4, #4]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800767c:	6021      	str	r1, [r4, #0]
 800767e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007682:	bd70      	pop	{r4, r5, r6, pc}
 8007684:	0800965d 	.word	0x0800965d
 8007688:	08009740 	.word	0x08009740

0800768c <__multadd>:
 800768c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007690:	690d      	ldr	r5, [r1, #16]
 8007692:	4607      	mov	r7, r0
 8007694:	460c      	mov	r4, r1
 8007696:	461e      	mov	r6, r3
 8007698:	f101 0c14 	add.w	ip, r1, #20
 800769c:	2000      	movs	r0, #0
 800769e:	f8dc 3000 	ldr.w	r3, [ip]
 80076a2:	b299      	uxth	r1, r3
 80076a4:	fb02 6101 	mla	r1, r2, r1, r6
 80076a8:	0c1e      	lsrs	r6, r3, #16
 80076aa:	0c0b      	lsrs	r3, r1, #16
 80076ac:	fb02 3306 	mla	r3, r2, r6, r3
 80076b0:	b289      	uxth	r1, r1
 80076b2:	3001      	adds	r0, #1
 80076b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80076b8:	4285      	cmp	r5, r0
 80076ba:	f84c 1b04 	str.w	r1, [ip], #4
 80076be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80076c2:	dcec      	bgt.n	800769e <__multadd+0x12>
 80076c4:	b30e      	cbz	r6, 800770a <__multadd+0x7e>
 80076c6:	68a3      	ldr	r3, [r4, #8]
 80076c8:	42ab      	cmp	r3, r5
 80076ca:	dc19      	bgt.n	8007700 <__multadd+0x74>
 80076cc:	6861      	ldr	r1, [r4, #4]
 80076ce:	4638      	mov	r0, r7
 80076d0:	3101      	adds	r1, #1
 80076d2:	f7ff ff79 	bl	80075c8 <_Balloc>
 80076d6:	4680      	mov	r8, r0
 80076d8:	b928      	cbnz	r0, 80076e6 <__multadd+0x5a>
 80076da:	4602      	mov	r2, r0
 80076dc:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <__multadd+0x84>)
 80076de:	480d      	ldr	r0, [pc, #52]	; (8007714 <__multadd+0x88>)
 80076e0:	21b5      	movs	r1, #181	; 0xb5
 80076e2:	f000 fdab 	bl	800823c <__assert_func>
 80076e6:	6922      	ldr	r2, [r4, #16]
 80076e8:	3202      	adds	r2, #2
 80076ea:	f104 010c 	add.w	r1, r4, #12
 80076ee:	0092      	lsls	r2, r2, #2
 80076f0:	300c      	adds	r0, #12
 80076f2:	f7ff ff5b 	bl	80075ac <memcpy>
 80076f6:	4621      	mov	r1, r4
 80076f8:	4638      	mov	r0, r7
 80076fa:	f7ff ffa5 	bl	8007648 <_Bfree>
 80076fe:	4644      	mov	r4, r8
 8007700:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007704:	3501      	adds	r5, #1
 8007706:	615e      	str	r6, [r3, #20]
 8007708:	6125      	str	r5, [r4, #16]
 800770a:	4620      	mov	r0, r4
 800770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007710:	080096cf 	.word	0x080096cf
 8007714:	08009740 	.word	0x08009740

08007718 <__hi0bits>:
 8007718:	0c03      	lsrs	r3, r0, #16
 800771a:	041b      	lsls	r3, r3, #16
 800771c:	b9d3      	cbnz	r3, 8007754 <__hi0bits+0x3c>
 800771e:	0400      	lsls	r0, r0, #16
 8007720:	2310      	movs	r3, #16
 8007722:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007726:	bf04      	itt	eq
 8007728:	0200      	lsleq	r0, r0, #8
 800772a:	3308      	addeq	r3, #8
 800772c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007730:	bf04      	itt	eq
 8007732:	0100      	lsleq	r0, r0, #4
 8007734:	3304      	addeq	r3, #4
 8007736:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800773a:	bf04      	itt	eq
 800773c:	0080      	lsleq	r0, r0, #2
 800773e:	3302      	addeq	r3, #2
 8007740:	2800      	cmp	r0, #0
 8007742:	db05      	blt.n	8007750 <__hi0bits+0x38>
 8007744:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007748:	f103 0301 	add.w	r3, r3, #1
 800774c:	bf08      	it	eq
 800774e:	2320      	moveq	r3, #32
 8007750:	4618      	mov	r0, r3
 8007752:	4770      	bx	lr
 8007754:	2300      	movs	r3, #0
 8007756:	e7e4      	b.n	8007722 <__hi0bits+0xa>

08007758 <__lo0bits>:
 8007758:	6803      	ldr	r3, [r0, #0]
 800775a:	f013 0207 	ands.w	r2, r3, #7
 800775e:	4601      	mov	r1, r0
 8007760:	d00b      	beq.n	800777a <__lo0bits+0x22>
 8007762:	07da      	lsls	r2, r3, #31
 8007764:	d423      	bmi.n	80077ae <__lo0bits+0x56>
 8007766:	0798      	lsls	r0, r3, #30
 8007768:	bf49      	itett	mi
 800776a:	085b      	lsrmi	r3, r3, #1
 800776c:	089b      	lsrpl	r3, r3, #2
 800776e:	2001      	movmi	r0, #1
 8007770:	600b      	strmi	r3, [r1, #0]
 8007772:	bf5c      	itt	pl
 8007774:	600b      	strpl	r3, [r1, #0]
 8007776:	2002      	movpl	r0, #2
 8007778:	4770      	bx	lr
 800777a:	b298      	uxth	r0, r3
 800777c:	b9a8      	cbnz	r0, 80077aa <__lo0bits+0x52>
 800777e:	0c1b      	lsrs	r3, r3, #16
 8007780:	2010      	movs	r0, #16
 8007782:	b2da      	uxtb	r2, r3
 8007784:	b90a      	cbnz	r2, 800778a <__lo0bits+0x32>
 8007786:	3008      	adds	r0, #8
 8007788:	0a1b      	lsrs	r3, r3, #8
 800778a:	071a      	lsls	r2, r3, #28
 800778c:	bf04      	itt	eq
 800778e:	091b      	lsreq	r3, r3, #4
 8007790:	3004      	addeq	r0, #4
 8007792:	079a      	lsls	r2, r3, #30
 8007794:	bf04      	itt	eq
 8007796:	089b      	lsreq	r3, r3, #2
 8007798:	3002      	addeq	r0, #2
 800779a:	07da      	lsls	r2, r3, #31
 800779c:	d403      	bmi.n	80077a6 <__lo0bits+0x4e>
 800779e:	085b      	lsrs	r3, r3, #1
 80077a0:	f100 0001 	add.w	r0, r0, #1
 80077a4:	d005      	beq.n	80077b2 <__lo0bits+0x5a>
 80077a6:	600b      	str	r3, [r1, #0]
 80077a8:	4770      	bx	lr
 80077aa:	4610      	mov	r0, r2
 80077ac:	e7e9      	b.n	8007782 <__lo0bits+0x2a>
 80077ae:	2000      	movs	r0, #0
 80077b0:	4770      	bx	lr
 80077b2:	2020      	movs	r0, #32
 80077b4:	4770      	bx	lr
	...

080077b8 <__i2b>:
 80077b8:	b510      	push	{r4, lr}
 80077ba:	460c      	mov	r4, r1
 80077bc:	2101      	movs	r1, #1
 80077be:	f7ff ff03 	bl	80075c8 <_Balloc>
 80077c2:	4602      	mov	r2, r0
 80077c4:	b928      	cbnz	r0, 80077d2 <__i2b+0x1a>
 80077c6:	4b05      	ldr	r3, [pc, #20]	; (80077dc <__i2b+0x24>)
 80077c8:	4805      	ldr	r0, [pc, #20]	; (80077e0 <__i2b+0x28>)
 80077ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80077ce:	f000 fd35 	bl	800823c <__assert_func>
 80077d2:	2301      	movs	r3, #1
 80077d4:	6144      	str	r4, [r0, #20]
 80077d6:	6103      	str	r3, [r0, #16]
 80077d8:	bd10      	pop	{r4, pc}
 80077da:	bf00      	nop
 80077dc:	080096cf 	.word	0x080096cf
 80077e0:	08009740 	.word	0x08009740

080077e4 <__multiply>:
 80077e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e8:	4691      	mov	r9, r2
 80077ea:	690a      	ldr	r2, [r1, #16]
 80077ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	bfb8      	it	lt
 80077f4:	460b      	movlt	r3, r1
 80077f6:	460c      	mov	r4, r1
 80077f8:	bfbc      	itt	lt
 80077fa:	464c      	movlt	r4, r9
 80077fc:	4699      	movlt	r9, r3
 80077fe:	6927      	ldr	r7, [r4, #16]
 8007800:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007804:	68a3      	ldr	r3, [r4, #8]
 8007806:	6861      	ldr	r1, [r4, #4]
 8007808:	eb07 060a 	add.w	r6, r7, sl
 800780c:	42b3      	cmp	r3, r6
 800780e:	b085      	sub	sp, #20
 8007810:	bfb8      	it	lt
 8007812:	3101      	addlt	r1, #1
 8007814:	f7ff fed8 	bl	80075c8 <_Balloc>
 8007818:	b930      	cbnz	r0, 8007828 <__multiply+0x44>
 800781a:	4602      	mov	r2, r0
 800781c:	4b44      	ldr	r3, [pc, #272]	; (8007930 <__multiply+0x14c>)
 800781e:	4845      	ldr	r0, [pc, #276]	; (8007934 <__multiply+0x150>)
 8007820:	f240 115d 	movw	r1, #349	; 0x15d
 8007824:	f000 fd0a 	bl	800823c <__assert_func>
 8007828:	f100 0514 	add.w	r5, r0, #20
 800782c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007830:	462b      	mov	r3, r5
 8007832:	2200      	movs	r2, #0
 8007834:	4543      	cmp	r3, r8
 8007836:	d321      	bcc.n	800787c <__multiply+0x98>
 8007838:	f104 0314 	add.w	r3, r4, #20
 800783c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007840:	f109 0314 	add.w	r3, r9, #20
 8007844:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007848:	9202      	str	r2, [sp, #8]
 800784a:	1b3a      	subs	r2, r7, r4
 800784c:	3a15      	subs	r2, #21
 800784e:	f022 0203 	bic.w	r2, r2, #3
 8007852:	3204      	adds	r2, #4
 8007854:	f104 0115 	add.w	r1, r4, #21
 8007858:	428f      	cmp	r7, r1
 800785a:	bf38      	it	cc
 800785c:	2204      	movcc	r2, #4
 800785e:	9201      	str	r2, [sp, #4]
 8007860:	9a02      	ldr	r2, [sp, #8]
 8007862:	9303      	str	r3, [sp, #12]
 8007864:	429a      	cmp	r2, r3
 8007866:	d80c      	bhi.n	8007882 <__multiply+0x9e>
 8007868:	2e00      	cmp	r6, #0
 800786a:	dd03      	ble.n	8007874 <__multiply+0x90>
 800786c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007870:	2b00      	cmp	r3, #0
 8007872:	d05a      	beq.n	800792a <__multiply+0x146>
 8007874:	6106      	str	r6, [r0, #16]
 8007876:	b005      	add	sp, #20
 8007878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800787c:	f843 2b04 	str.w	r2, [r3], #4
 8007880:	e7d8      	b.n	8007834 <__multiply+0x50>
 8007882:	f8b3 a000 	ldrh.w	sl, [r3]
 8007886:	f1ba 0f00 	cmp.w	sl, #0
 800788a:	d024      	beq.n	80078d6 <__multiply+0xf2>
 800788c:	f104 0e14 	add.w	lr, r4, #20
 8007890:	46a9      	mov	r9, r5
 8007892:	f04f 0c00 	mov.w	ip, #0
 8007896:	f85e 2b04 	ldr.w	r2, [lr], #4
 800789a:	f8d9 1000 	ldr.w	r1, [r9]
 800789e:	fa1f fb82 	uxth.w	fp, r2
 80078a2:	b289      	uxth	r1, r1
 80078a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80078a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80078ac:	f8d9 2000 	ldr.w	r2, [r9]
 80078b0:	4461      	add	r1, ip
 80078b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80078ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80078be:	b289      	uxth	r1, r1
 80078c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078c4:	4577      	cmp	r7, lr
 80078c6:	f849 1b04 	str.w	r1, [r9], #4
 80078ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078ce:	d8e2      	bhi.n	8007896 <__multiply+0xb2>
 80078d0:	9a01      	ldr	r2, [sp, #4]
 80078d2:	f845 c002 	str.w	ip, [r5, r2]
 80078d6:	9a03      	ldr	r2, [sp, #12]
 80078d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80078dc:	3304      	adds	r3, #4
 80078de:	f1b9 0f00 	cmp.w	r9, #0
 80078e2:	d020      	beq.n	8007926 <__multiply+0x142>
 80078e4:	6829      	ldr	r1, [r5, #0]
 80078e6:	f104 0c14 	add.w	ip, r4, #20
 80078ea:	46ae      	mov	lr, r5
 80078ec:	f04f 0a00 	mov.w	sl, #0
 80078f0:	f8bc b000 	ldrh.w	fp, [ip]
 80078f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80078f8:	fb09 220b 	mla	r2, r9, fp, r2
 80078fc:	4492      	add	sl, r2
 80078fe:	b289      	uxth	r1, r1
 8007900:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007904:	f84e 1b04 	str.w	r1, [lr], #4
 8007908:	f85c 2b04 	ldr.w	r2, [ip], #4
 800790c:	f8be 1000 	ldrh.w	r1, [lr]
 8007910:	0c12      	lsrs	r2, r2, #16
 8007912:	fb09 1102 	mla	r1, r9, r2, r1
 8007916:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800791a:	4567      	cmp	r7, ip
 800791c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007920:	d8e6      	bhi.n	80078f0 <__multiply+0x10c>
 8007922:	9a01      	ldr	r2, [sp, #4]
 8007924:	50a9      	str	r1, [r5, r2]
 8007926:	3504      	adds	r5, #4
 8007928:	e79a      	b.n	8007860 <__multiply+0x7c>
 800792a:	3e01      	subs	r6, #1
 800792c:	e79c      	b.n	8007868 <__multiply+0x84>
 800792e:	bf00      	nop
 8007930:	080096cf 	.word	0x080096cf
 8007934:	08009740 	.word	0x08009740

08007938 <__pow5mult>:
 8007938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800793c:	4615      	mov	r5, r2
 800793e:	f012 0203 	ands.w	r2, r2, #3
 8007942:	4606      	mov	r6, r0
 8007944:	460f      	mov	r7, r1
 8007946:	d007      	beq.n	8007958 <__pow5mult+0x20>
 8007948:	4c25      	ldr	r4, [pc, #148]	; (80079e0 <__pow5mult+0xa8>)
 800794a:	3a01      	subs	r2, #1
 800794c:	2300      	movs	r3, #0
 800794e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007952:	f7ff fe9b 	bl	800768c <__multadd>
 8007956:	4607      	mov	r7, r0
 8007958:	10ad      	asrs	r5, r5, #2
 800795a:	d03d      	beq.n	80079d8 <__pow5mult+0xa0>
 800795c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800795e:	b97c      	cbnz	r4, 8007980 <__pow5mult+0x48>
 8007960:	2010      	movs	r0, #16
 8007962:	f7ff fe1b 	bl	800759c <malloc>
 8007966:	4602      	mov	r2, r0
 8007968:	6270      	str	r0, [r6, #36]	; 0x24
 800796a:	b928      	cbnz	r0, 8007978 <__pow5mult+0x40>
 800796c:	4b1d      	ldr	r3, [pc, #116]	; (80079e4 <__pow5mult+0xac>)
 800796e:	481e      	ldr	r0, [pc, #120]	; (80079e8 <__pow5mult+0xb0>)
 8007970:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007974:	f000 fc62 	bl	800823c <__assert_func>
 8007978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800797c:	6004      	str	r4, [r0, #0]
 800797e:	60c4      	str	r4, [r0, #12]
 8007980:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007988:	b94c      	cbnz	r4, 800799e <__pow5mult+0x66>
 800798a:	f240 2171 	movw	r1, #625	; 0x271
 800798e:	4630      	mov	r0, r6
 8007990:	f7ff ff12 	bl	80077b8 <__i2b>
 8007994:	2300      	movs	r3, #0
 8007996:	f8c8 0008 	str.w	r0, [r8, #8]
 800799a:	4604      	mov	r4, r0
 800799c:	6003      	str	r3, [r0, #0]
 800799e:	f04f 0900 	mov.w	r9, #0
 80079a2:	07eb      	lsls	r3, r5, #31
 80079a4:	d50a      	bpl.n	80079bc <__pow5mult+0x84>
 80079a6:	4639      	mov	r1, r7
 80079a8:	4622      	mov	r2, r4
 80079aa:	4630      	mov	r0, r6
 80079ac:	f7ff ff1a 	bl	80077e4 <__multiply>
 80079b0:	4639      	mov	r1, r7
 80079b2:	4680      	mov	r8, r0
 80079b4:	4630      	mov	r0, r6
 80079b6:	f7ff fe47 	bl	8007648 <_Bfree>
 80079ba:	4647      	mov	r7, r8
 80079bc:	106d      	asrs	r5, r5, #1
 80079be:	d00b      	beq.n	80079d8 <__pow5mult+0xa0>
 80079c0:	6820      	ldr	r0, [r4, #0]
 80079c2:	b938      	cbnz	r0, 80079d4 <__pow5mult+0x9c>
 80079c4:	4622      	mov	r2, r4
 80079c6:	4621      	mov	r1, r4
 80079c8:	4630      	mov	r0, r6
 80079ca:	f7ff ff0b 	bl	80077e4 <__multiply>
 80079ce:	6020      	str	r0, [r4, #0]
 80079d0:	f8c0 9000 	str.w	r9, [r0]
 80079d4:	4604      	mov	r4, r0
 80079d6:	e7e4      	b.n	80079a2 <__pow5mult+0x6a>
 80079d8:	4638      	mov	r0, r7
 80079da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079de:	bf00      	nop
 80079e0:	08009890 	.word	0x08009890
 80079e4:	0800965d 	.word	0x0800965d
 80079e8:	08009740 	.word	0x08009740

080079ec <__lshift>:
 80079ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f0:	460c      	mov	r4, r1
 80079f2:	6849      	ldr	r1, [r1, #4]
 80079f4:	6923      	ldr	r3, [r4, #16]
 80079f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079fa:	68a3      	ldr	r3, [r4, #8]
 80079fc:	4607      	mov	r7, r0
 80079fe:	4691      	mov	r9, r2
 8007a00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a04:	f108 0601 	add.w	r6, r8, #1
 8007a08:	42b3      	cmp	r3, r6
 8007a0a:	db0b      	blt.n	8007a24 <__lshift+0x38>
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	f7ff fddb 	bl	80075c8 <_Balloc>
 8007a12:	4605      	mov	r5, r0
 8007a14:	b948      	cbnz	r0, 8007a2a <__lshift+0x3e>
 8007a16:	4602      	mov	r2, r0
 8007a18:	4b2a      	ldr	r3, [pc, #168]	; (8007ac4 <__lshift+0xd8>)
 8007a1a:	482b      	ldr	r0, [pc, #172]	; (8007ac8 <__lshift+0xdc>)
 8007a1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007a20:	f000 fc0c 	bl	800823c <__assert_func>
 8007a24:	3101      	adds	r1, #1
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	e7ee      	b.n	8007a08 <__lshift+0x1c>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	f100 0114 	add.w	r1, r0, #20
 8007a30:	f100 0210 	add.w	r2, r0, #16
 8007a34:	4618      	mov	r0, r3
 8007a36:	4553      	cmp	r3, sl
 8007a38:	db37      	blt.n	8007aaa <__lshift+0xbe>
 8007a3a:	6920      	ldr	r0, [r4, #16]
 8007a3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a40:	f104 0314 	add.w	r3, r4, #20
 8007a44:	f019 091f 	ands.w	r9, r9, #31
 8007a48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007a50:	d02f      	beq.n	8007ab2 <__lshift+0xc6>
 8007a52:	f1c9 0e20 	rsb	lr, r9, #32
 8007a56:	468a      	mov	sl, r1
 8007a58:	f04f 0c00 	mov.w	ip, #0
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	fa02 f209 	lsl.w	r2, r2, r9
 8007a62:	ea42 020c 	orr.w	r2, r2, ip
 8007a66:	f84a 2b04 	str.w	r2, [sl], #4
 8007a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a6e:	4298      	cmp	r0, r3
 8007a70:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007a74:	d8f2      	bhi.n	8007a5c <__lshift+0x70>
 8007a76:	1b03      	subs	r3, r0, r4
 8007a78:	3b15      	subs	r3, #21
 8007a7a:	f023 0303 	bic.w	r3, r3, #3
 8007a7e:	3304      	adds	r3, #4
 8007a80:	f104 0215 	add.w	r2, r4, #21
 8007a84:	4290      	cmp	r0, r2
 8007a86:	bf38      	it	cc
 8007a88:	2304      	movcc	r3, #4
 8007a8a:	f841 c003 	str.w	ip, [r1, r3]
 8007a8e:	f1bc 0f00 	cmp.w	ip, #0
 8007a92:	d001      	beq.n	8007a98 <__lshift+0xac>
 8007a94:	f108 0602 	add.w	r6, r8, #2
 8007a98:	3e01      	subs	r6, #1
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	612e      	str	r6, [r5, #16]
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	f7ff fdd2 	bl	8007648 <_Bfree>
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8007aae:	3301      	adds	r3, #1
 8007ab0:	e7c1      	b.n	8007a36 <__lshift+0x4a>
 8007ab2:	3904      	subs	r1, #4
 8007ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ab8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007abc:	4298      	cmp	r0, r3
 8007abe:	d8f9      	bhi.n	8007ab4 <__lshift+0xc8>
 8007ac0:	e7ea      	b.n	8007a98 <__lshift+0xac>
 8007ac2:	bf00      	nop
 8007ac4:	080096cf 	.word	0x080096cf
 8007ac8:	08009740 	.word	0x08009740

08007acc <__mcmp>:
 8007acc:	b530      	push	{r4, r5, lr}
 8007ace:	6902      	ldr	r2, [r0, #16]
 8007ad0:	690c      	ldr	r4, [r1, #16]
 8007ad2:	1b12      	subs	r2, r2, r4
 8007ad4:	d10e      	bne.n	8007af4 <__mcmp+0x28>
 8007ad6:	f100 0314 	add.w	r3, r0, #20
 8007ada:	3114      	adds	r1, #20
 8007adc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ae0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ae4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ae8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007aec:	42a5      	cmp	r5, r4
 8007aee:	d003      	beq.n	8007af8 <__mcmp+0x2c>
 8007af0:	d305      	bcc.n	8007afe <__mcmp+0x32>
 8007af2:	2201      	movs	r2, #1
 8007af4:	4610      	mov	r0, r2
 8007af6:	bd30      	pop	{r4, r5, pc}
 8007af8:	4283      	cmp	r3, r0
 8007afa:	d3f3      	bcc.n	8007ae4 <__mcmp+0x18>
 8007afc:	e7fa      	b.n	8007af4 <__mcmp+0x28>
 8007afe:	f04f 32ff 	mov.w	r2, #4294967295
 8007b02:	e7f7      	b.n	8007af4 <__mcmp+0x28>

08007b04 <__mdiff>:
 8007b04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b08:	460c      	mov	r4, r1
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4620      	mov	r0, r4
 8007b10:	4690      	mov	r8, r2
 8007b12:	f7ff ffdb 	bl	8007acc <__mcmp>
 8007b16:	1e05      	subs	r5, r0, #0
 8007b18:	d110      	bne.n	8007b3c <__mdiff+0x38>
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f7ff fd53 	bl	80075c8 <_Balloc>
 8007b22:	b930      	cbnz	r0, 8007b32 <__mdiff+0x2e>
 8007b24:	4b3a      	ldr	r3, [pc, #232]	; (8007c10 <__mdiff+0x10c>)
 8007b26:	4602      	mov	r2, r0
 8007b28:	f240 2132 	movw	r1, #562	; 0x232
 8007b2c:	4839      	ldr	r0, [pc, #228]	; (8007c14 <__mdiff+0x110>)
 8007b2e:	f000 fb85 	bl	800823c <__assert_func>
 8007b32:	2301      	movs	r3, #1
 8007b34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3c:	bfa4      	itt	ge
 8007b3e:	4643      	movge	r3, r8
 8007b40:	46a0      	movge	r8, r4
 8007b42:	4630      	mov	r0, r6
 8007b44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b48:	bfa6      	itte	ge
 8007b4a:	461c      	movge	r4, r3
 8007b4c:	2500      	movge	r5, #0
 8007b4e:	2501      	movlt	r5, #1
 8007b50:	f7ff fd3a 	bl	80075c8 <_Balloc>
 8007b54:	b920      	cbnz	r0, 8007b60 <__mdiff+0x5c>
 8007b56:	4b2e      	ldr	r3, [pc, #184]	; (8007c10 <__mdiff+0x10c>)
 8007b58:	4602      	mov	r2, r0
 8007b5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b5e:	e7e5      	b.n	8007b2c <__mdiff+0x28>
 8007b60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b64:	6926      	ldr	r6, [r4, #16]
 8007b66:	60c5      	str	r5, [r0, #12]
 8007b68:	f104 0914 	add.w	r9, r4, #20
 8007b6c:	f108 0514 	add.w	r5, r8, #20
 8007b70:	f100 0e14 	add.w	lr, r0, #20
 8007b74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007b78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b7c:	f108 0210 	add.w	r2, r8, #16
 8007b80:	46f2      	mov	sl, lr
 8007b82:	2100      	movs	r1, #0
 8007b84:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b8c:	fa1f f883 	uxth.w	r8, r3
 8007b90:	fa11 f18b 	uxtah	r1, r1, fp
 8007b94:	0c1b      	lsrs	r3, r3, #16
 8007b96:	eba1 0808 	sub.w	r8, r1, r8
 8007b9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ba2:	fa1f f888 	uxth.w	r8, r8
 8007ba6:	1419      	asrs	r1, r3, #16
 8007ba8:	454e      	cmp	r6, r9
 8007baa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007bae:	f84a 3b04 	str.w	r3, [sl], #4
 8007bb2:	d8e7      	bhi.n	8007b84 <__mdiff+0x80>
 8007bb4:	1b33      	subs	r3, r6, r4
 8007bb6:	3b15      	subs	r3, #21
 8007bb8:	f023 0303 	bic.w	r3, r3, #3
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	3415      	adds	r4, #21
 8007bc0:	42a6      	cmp	r6, r4
 8007bc2:	bf38      	it	cc
 8007bc4:	2304      	movcc	r3, #4
 8007bc6:	441d      	add	r5, r3
 8007bc8:	4473      	add	r3, lr
 8007bca:	469e      	mov	lr, r3
 8007bcc:	462e      	mov	r6, r5
 8007bce:	4566      	cmp	r6, ip
 8007bd0:	d30e      	bcc.n	8007bf0 <__mdiff+0xec>
 8007bd2:	f10c 0203 	add.w	r2, ip, #3
 8007bd6:	1b52      	subs	r2, r2, r5
 8007bd8:	f022 0203 	bic.w	r2, r2, #3
 8007bdc:	3d03      	subs	r5, #3
 8007bde:	45ac      	cmp	ip, r5
 8007be0:	bf38      	it	cc
 8007be2:	2200      	movcc	r2, #0
 8007be4:	441a      	add	r2, r3
 8007be6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007bea:	b17b      	cbz	r3, 8007c0c <__mdiff+0x108>
 8007bec:	6107      	str	r7, [r0, #16]
 8007bee:	e7a3      	b.n	8007b38 <__mdiff+0x34>
 8007bf0:	f856 8b04 	ldr.w	r8, [r6], #4
 8007bf4:	fa11 f288 	uxtah	r2, r1, r8
 8007bf8:	1414      	asrs	r4, r2, #16
 8007bfa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007bfe:	b292      	uxth	r2, r2
 8007c00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007c04:	f84e 2b04 	str.w	r2, [lr], #4
 8007c08:	1421      	asrs	r1, r4, #16
 8007c0a:	e7e0      	b.n	8007bce <__mdiff+0xca>
 8007c0c:	3f01      	subs	r7, #1
 8007c0e:	e7ea      	b.n	8007be6 <__mdiff+0xe2>
 8007c10:	080096cf 	.word	0x080096cf
 8007c14:	08009740 	.word	0x08009740

08007c18 <__d2b>:
 8007c18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c1c:	4689      	mov	r9, r1
 8007c1e:	2101      	movs	r1, #1
 8007c20:	ec57 6b10 	vmov	r6, r7, d0
 8007c24:	4690      	mov	r8, r2
 8007c26:	f7ff fccf 	bl	80075c8 <_Balloc>
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	b930      	cbnz	r0, 8007c3c <__d2b+0x24>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	4b25      	ldr	r3, [pc, #148]	; (8007cc8 <__d2b+0xb0>)
 8007c32:	4826      	ldr	r0, [pc, #152]	; (8007ccc <__d2b+0xb4>)
 8007c34:	f240 310a 	movw	r1, #778	; 0x30a
 8007c38:	f000 fb00 	bl	800823c <__assert_func>
 8007c3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007c40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c44:	bb35      	cbnz	r5, 8007c94 <__d2b+0x7c>
 8007c46:	2e00      	cmp	r6, #0
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	d028      	beq.n	8007c9e <__d2b+0x86>
 8007c4c:	4668      	mov	r0, sp
 8007c4e:	9600      	str	r6, [sp, #0]
 8007c50:	f7ff fd82 	bl	8007758 <__lo0bits>
 8007c54:	9900      	ldr	r1, [sp, #0]
 8007c56:	b300      	cbz	r0, 8007c9a <__d2b+0x82>
 8007c58:	9a01      	ldr	r2, [sp, #4]
 8007c5a:	f1c0 0320 	rsb	r3, r0, #32
 8007c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c62:	430b      	orrs	r3, r1
 8007c64:	40c2      	lsrs	r2, r0
 8007c66:	6163      	str	r3, [r4, #20]
 8007c68:	9201      	str	r2, [sp, #4]
 8007c6a:	9b01      	ldr	r3, [sp, #4]
 8007c6c:	61a3      	str	r3, [r4, #24]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	bf14      	ite	ne
 8007c72:	2202      	movne	r2, #2
 8007c74:	2201      	moveq	r2, #1
 8007c76:	6122      	str	r2, [r4, #16]
 8007c78:	b1d5      	cbz	r5, 8007cb0 <__d2b+0x98>
 8007c7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c7e:	4405      	add	r5, r0
 8007c80:	f8c9 5000 	str.w	r5, [r9]
 8007c84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c88:	f8c8 0000 	str.w	r0, [r8]
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	b003      	add	sp, #12
 8007c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c98:	e7d5      	b.n	8007c46 <__d2b+0x2e>
 8007c9a:	6161      	str	r1, [r4, #20]
 8007c9c:	e7e5      	b.n	8007c6a <__d2b+0x52>
 8007c9e:	a801      	add	r0, sp, #4
 8007ca0:	f7ff fd5a 	bl	8007758 <__lo0bits>
 8007ca4:	9b01      	ldr	r3, [sp, #4]
 8007ca6:	6163      	str	r3, [r4, #20]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	6122      	str	r2, [r4, #16]
 8007cac:	3020      	adds	r0, #32
 8007cae:	e7e3      	b.n	8007c78 <__d2b+0x60>
 8007cb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007cb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007cb8:	f8c9 0000 	str.w	r0, [r9]
 8007cbc:	6918      	ldr	r0, [r3, #16]
 8007cbe:	f7ff fd2b 	bl	8007718 <__hi0bits>
 8007cc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007cc6:	e7df      	b.n	8007c88 <__d2b+0x70>
 8007cc8:	080096cf 	.word	0x080096cf
 8007ccc:	08009740 	.word	0x08009740

08007cd0 <_calloc_r>:
 8007cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cd2:	fba1 2402 	umull	r2, r4, r1, r2
 8007cd6:	b94c      	cbnz	r4, 8007cec <_calloc_r+0x1c>
 8007cd8:	4611      	mov	r1, r2
 8007cda:	9201      	str	r2, [sp, #4]
 8007cdc:	f000 f87a 	bl	8007dd4 <_malloc_r>
 8007ce0:	9a01      	ldr	r2, [sp, #4]
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	b930      	cbnz	r0, 8007cf4 <_calloc_r+0x24>
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	b003      	add	sp, #12
 8007cea:	bd30      	pop	{r4, r5, pc}
 8007cec:	220c      	movs	r2, #12
 8007cee:	6002      	str	r2, [r0, #0]
 8007cf0:	2500      	movs	r5, #0
 8007cf2:	e7f8      	b.n	8007ce6 <_calloc_r+0x16>
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	f7fd fd25 	bl	8005744 <memset>
 8007cfa:	e7f4      	b.n	8007ce6 <_calloc_r+0x16>

08007cfc <_free_r>:
 8007cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cfe:	2900      	cmp	r1, #0
 8007d00:	d044      	beq.n	8007d8c <_free_r+0x90>
 8007d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d06:	9001      	str	r0, [sp, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d0e:	bfb8      	it	lt
 8007d10:	18e4      	addlt	r4, r4, r3
 8007d12:	f000 fb19 	bl	8008348 <__malloc_lock>
 8007d16:	4a1e      	ldr	r2, [pc, #120]	; (8007d90 <_free_r+0x94>)
 8007d18:	9801      	ldr	r0, [sp, #4]
 8007d1a:	6813      	ldr	r3, [r2, #0]
 8007d1c:	b933      	cbnz	r3, 8007d2c <_free_r+0x30>
 8007d1e:	6063      	str	r3, [r4, #4]
 8007d20:	6014      	str	r4, [r2, #0]
 8007d22:	b003      	add	sp, #12
 8007d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d28:	f000 bb14 	b.w	8008354 <__malloc_unlock>
 8007d2c:	42a3      	cmp	r3, r4
 8007d2e:	d908      	bls.n	8007d42 <_free_r+0x46>
 8007d30:	6825      	ldr	r5, [r4, #0]
 8007d32:	1961      	adds	r1, r4, r5
 8007d34:	428b      	cmp	r3, r1
 8007d36:	bf01      	itttt	eq
 8007d38:	6819      	ldreq	r1, [r3, #0]
 8007d3a:	685b      	ldreq	r3, [r3, #4]
 8007d3c:	1949      	addeq	r1, r1, r5
 8007d3e:	6021      	streq	r1, [r4, #0]
 8007d40:	e7ed      	b.n	8007d1e <_free_r+0x22>
 8007d42:	461a      	mov	r2, r3
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	b10b      	cbz	r3, 8007d4c <_free_r+0x50>
 8007d48:	42a3      	cmp	r3, r4
 8007d4a:	d9fa      	bls.n	8007d42 <_free_r+0x46>
 8007d4c:	6811      	ldr	r1, [r2, #0]
 8007d4e:	1855      	adds	r5, r2, r1
 8007d50:	42a5      	cmp	r5, r4
 8007d52:	d10b      	bne.n	8007d6c <_free_r+0x70>
 8007d54:	6824      	ldr	r4, [r4, #0]
 8007d56:	4421      	add	r1, r4
 8007d58:	1854      	adds	r4, r2, r1
 8007d5a:	42a3      	cmp	r3, r4
 8007d5c:	6011      	str	r1, [r2, #0]
 8007d5e:	d1e0      	bne.n	8007d22 <_free_r+0x26>
 8007d60:	681c      	ldr	r4, [r3, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	6053      	str	r3, [r2, #4]
 8007d66:	4421      	add	r1, r4
 8007d68:	6011      	str	r1, [r2, #0]
 8007d6a:	e7da      	b.n	8007d22 <_free_r+0x26>
 8007d6c:	d902      	bls.n	8007d74 <_free_r+0x78>
 8007d6e:	230c      	movs	r3, #12
 8007d70:	6003      	str	r3, [r0, #0]
 8007d72:	e7d6      	b.n	8007d22 <_free_r+0x26>
 8007d74:	6825      	ldr	r5, [r4, #0]
 8007d76:	1961      	adds	r1, r4, r5
 8007d78:	428b      	cmp	r3, r1
 8007d7a:	bf04      	itt	eq
 8007d7c:	6819      	ldreq	r1, [r3, #0]
 8007d7e:	685b      	ldreq	r3, [r3, #4]
 8007d80:	6063      	str	r3, [r4, #4]
 8007d82:	bf04      	itt	eq
 8007d84:	1949      	addeq	r1, r1, r5
 8007d86:	6021      	streq	r1, [r4, #0]
 8007d88:	6054      	str	r4, [r2, #4]
 8007d8a:	e7ca      	b.n	8007d22 <_free_r+0x26>
 8007d8c:	b003      	add	sp, #12
 8007d8e:	bd30      	pop	{r4, r5, pc}
 8007d90:	200003e8 	.word	0x200003e8

08007d94 <sbrk_aligned>:
 8007d94:	b570      	push	{r4, r5, r6, lr}
 8007d96:	4e0e      	ldr	r6, [pc, #56]	; (8007dd0 <sbrk_aligned+0x3c>)
 8007d98:	460c      	mov	r4, r1
 8007d9a:	6831      	ldr	r1, [r6, #0]
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	b911      	cbnz	r1, 8007da6 <sbrk_aligned+0x12>
 8007da0:	f000 f9e6 	bl	8008170 <_sbrk_r>
 8007da4:	6030      	str	r0, [r6, #0]
 8007da6:	4621      	mov	r1, r4
 8007da8:	4628      	mov	r0, r5
 8007daa:	f000 f9e1 	bl	8008170 <_sbrk_r>
 8007dae:	1c43      	adds	r3, r0, #1
 8007db0:	d00a      	beq.n	8007dc8 <sbrk_aligned+0x34>
 8007db2:	1cc4      	adds	r4, r0, #3
 8007db4:	f024 0403 	bic.w	r4, r4, #3
 8007db8:	42a0      	cmp	r0, r4
 8007dba:	d007      	beq.n	8007dcc <sbrk_aligned+0x38>
 8007dbc:	1a21      	subs	r1, r4, r0
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	f000 f9d6 	bl	8008170 <_sbrk_r>
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	d101      	bne.n	8007dcc <sbrk_aligned+0x38>
 8007dc8:	f04f 34ff 	mov.w	r4, #4294967295
 8007dcc:	4620      	mov	r0, r4
 8007dce:	bd70      	pop	{r4, r5, r6, pc}
 8007dd0:	200003ec 	.word	0x200003ec

08007dd4 <_malloc_r>:
 8007dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd8:	1ccd      	adds	r5, r1, #3
 8007dda:	f025 0503 	bic.w	r5, r5, #3
 8007dde:	3508      	adds	r5, #8
 8007de0:	2d0c      	cmp	r5, #12
 8007de2:	bf38      	it	cc
 8007de4:	250c      	movcc	r5, #12
 8007de6:	2d00      	cmp	r5, #0
 8007de8:	4607      	mov	r7, r0
 8007dea:	db01      	blt.n	8007df0 <_malloc_r+0x1c>
 8007dec:	42a9      	cmp	r1, r5
 8007dee:	d905      	bls.n	8007dfc <_malloc_r+0x28>
 8007df0:	230c      	movs	r3, #12
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	2600      	movs	r6, #0
 8007df6:	4630      	mov	r0, r6
 8007df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dfc:	4e2e      	ldr	r6, [pc, #184]	; (8007eb8 <_malloc_r+0xe4>)
 8007dfe:	f000 faa3 	bl	8008348 <__malloc_lock>
 8007e02:	6833      	ldr	r3, [r6, #0]
 8007e04:	461c      	mov	r4, r3
 8007e06:	bb34      	cbnz	r4, 8007e56 <_malloc_r+0x82>
 8007e08:	4629      	mov	r1, r5
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	f7ff ffc2 	bl	8007d94 <sbrk_aligned>
 8007e10:	1c43      	adds	r3, r0, #1
 8007e12:	4604      	mov	r4, r0
 8007e14:	d14d      	bne.n	8007eb2 <_malloc_r+0xde>
 8007e16:	6834      	ldr	r4, [r6, #0]
 8007e18:	4626      	mov	r6, r4
 8007e1a:	2e00      	cmp	r6, #0
 8007e1c:	d140      	bne.n	8007ea0 <_malloc_r+0xcc>
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	4631      	mov	r1, r6
 8007e22:	4638      	mov	r0, r7
 8007e24:	eb04 0803 	add.w	r8, r4, r3
 8007e28:	f000 f9a2 	bl	8008170 <_sbrk_r>
 8007e2c:	4580      	cmp	r8, r0
 8007e2e:	d13a      	bne.n	8007ea6 <_malloc_r+0xd2>
 8007e30:	6821      	ldr	r1, [r4, #0]
 8007e32:	3503      	adds	r5, #3
 8007e34:	1a6d      	subs	r5, r5, r1
 8007e36:	f025 0503 	bic.w	r5, r5, #3
 8007e3a:	3508      	adds	r5, #8
 8007e3c:	2d0c      	cmp	r5, #12
 8007e3e:	bf38      	it	cc
 8007e40:	250c      	movcc	r5, #12
 8007e42:	4629      	mov	r1, r5
 8007e44:	4638      	mov	r0, r7
 8007e46:	f7ff ffa5 	bl	8007d94 <sbrk_aligned>
 8007e4a:	3001      	adds	r0, #1
 8007e4c:	d02b      	beq.n	8007ea6 <_malloc_r+0xd2>
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	442b      	add	r3, r5
 8007e52:	6023      	str	r3, [r4, #0]
 8007e54:	e00e      	b.n	8007e74 <_malloc_r+0xa0>
 8007e56:	6822      	ldr	r2, [r4, #0]
 8007e58:	1b52      	subs	r2, r2, r5
 8007e5a:	d41e      	bmi.n	8007e9a <_malloc_r+0xc6>
 8007e5c:	2a0b      	cmp	r2, #11
 8007e5e:	d916      	bls.n	8007e8e <_malloc_r+0xba>
 8007e60:	1961      	adds	r1, r4, r5
 8007e62:	42a3      	cmp	r3, r4
 8007e64:	6025      	str	r5, [r4, #0]
 8007e66:	bf18      	it	ne
 8007e68:	6059      	strne	r1, [r3, #4]
 8007e6a:	6863      	ldr	r3, [r4, #4]
 8007e6c:	bf08      	it	eq
 8007e6e:	6031      	streq	r1, [r6, #0]
 8007e70:	5162      	str	r2, [r4, r5]
 8007e72:	604b      	str	r3, [r1, #4]
 8007e74:	4638      	mov	r0, r7
 8007e76:	f104 060b 	add.w	r6, r4, #11
 8007e7a:	f000 fa6b 	bl	8008354 <__malloc_unlock>
 8007e7e:	f026 0607 	bic.w	r6, r6, #7
 8007e82:	1d23      	adds	r3, r4, #4
 8007e84:	1af2      	subs	r2, r6, r3
 8007e86:	d0b6      	beq.n	8007df6 <_malloc_r+0x22>
 8007e88:	1b9b      	subs	r3, r3, r6
 8007e8a:	50a3      	str	r3, [r4, r2]
 8007e8c:	e7b3      	b.n	8007df6 <_malloc_r+0x22>
 8007e8e:	6862      	ldr	r2, [r4, #4]
 8007e90:	42a3      	cmp	r3, r4
 8007e92:	bf0c      	ite	eq
 8007e94:	6032      	streq	r2, [r6, #0]
 8007e96:	605a      	strne	r2, [r3, #4]
 8007e98:	e7ec      	b.n	8007e74 <_malloc_r+0xa0>
 8007e9a:	4623      	mov	r3, r4
 8007e9c:	6864      	ldr	r4, [r4, #4]
 8007e9e:	e7b2      	b.n	8007e06 <_malloc_r+0x32>
 8007ea0:	4634      	mov	r4, r6
 8007ea2:	6876      	ldr	r6, [r6, #4]
 8007ea4:	e7b9      	b.n	8007e1a <_malloc_r+0x46>
 8007ea6:	230c      	movs	r3, #12
 8007ea8:	603b      	str	r3, [r7, #0]
 8007eaa:	4638      	mov	r0, r7
 8007eac:	f000 fa52 	bl	8008354 <__malloc_unlock>
 8007eb0:	e7a1      	b.n	8007df6 <_malloc_r+0x22>
 8007eb2:	6025      	str	r5, [r4, #0]
 8007eb4:	e7de      	b.n	8007e74 <_malloc_r+0xa0>
 8007eb6:	bf00      	nop
 8007eb8:	200003e8 	.word	0x200003e8

08007ebc <__sfputc_r>:
 8007ebc:	6893      	ldr	r3, [r2, #8]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	b410      	push	{r4}
 8007ec4:	6093      	str	r3, [r2, #8]
 8007ec6:	da08      	bge.n	8007eda <__sfputc_r+0x1e>
 8007ec8:	6994      	ldr	r4, [r2, #24]
 8007eca:	42a3      	cmp	r3, r4
 8007ecc:	db01      	blt.n	8007ed2 <__sfputc_r+0x16>
 8007ece:	290a      	cmp	r1, #10
 8007ed0:	d103      	bne.n	8007eda <__sfputc_r+0x1e>
 8007ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ed6:	f7fe ba03 	b.w	80062e0 <__swbuf_r>
 8007eda:	6813      	ldr	r3, [r2, #0]
 8007edc:	1c58      	adds	r0, r3, #1
 8007ede:	6010      	str	r0, [r2, #0]
 8007ee0:	7019      	strb	r1, [r3, #0]
 8007ee2:	4608      	mov	r0, r1
 8007ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <__sfputs_r>:
 8007eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eec:	4606      	mov	r6, r0
 8007eee:	460f      	mov	r7, r1
 8007ef0:	4614      	mov	r4, r2
 8007ef2:	18d5      	adds	r5, r2, r3
 8007ef4:	42ac      	cmp	r4, r5
 8007ef6:	d101      	bne.n	8007efc <__sfputs_r+0x12>
 8007ef8:	2000      	movs	r0, #0
 8007efa:	e007      	b.n	8007f0c <__sfputs_r+0x22>
 8007efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f00:	463a      	mov	r2, r7
 8007f02:	4630      	mov	r0, r6
 8007f04:	f7ff ffda 	bl	8007ebc <__sfputc_r>
 8007f08:	1c43      	adds	r3, r0, #1
 8007f0a:	d1f3      	bne.n	8007ef4 <__sfputs_r+0xa>
 8007f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f10 <_vfiprintf_r>:
 8007f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f14:	460d      	mov	r5, r1
 8007f16:	b09d      	sub	sp, #116	; 0x74
 8007f18:	4614      	mov	r4, r2
 8007f1a:	4698      	mov	r8, r3
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	b118      	cbz	r0, 8007f28 <_vfiprintf_r+0x18>
 8007f20:	6983      	ldr	r3, [r0, #24]
 8007f22:	b90b      	cbnz	r3, 8007f28 <_vfiprintf_r+0x18>
 8007f24:	f7ff fa30 	bl	8007388 <__sinit>
 8007f28:	4b89      	ldr	r3, [pc, #548]	; (8008150 <_vfiprintf_r+0x240>)
 8007f2a:	429d      	cmp	r5, r3
 8007f2c:	d11b      	bne.n	8007f66 <_vfiprintf_r+0x56>
 8007f2e:	6875      	ldr	r5, [r6, #4]
 8007f30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f32:	07d9      	lsls	r1, r3, #31
 8007f34:	d405      	bmi.n	8007f42 <_vfiprintf_r+0x32>
 8007f36:	89ab      	ldrh	r3, [r5, #12]
 8007f38:	059a      	lsls	r2, r3, #22
 8007f3a:	d402      	bmi.n	8007f42 <_vfiprintf_r+0x32>
 8007f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f3e:	f7ff fac6 	bl	80074ce <__retarget_lock_acquire_recursive>
 8007f42:	89ab      	ldrh	r3, [r5, #12]
 8007f44:	071b      	lsls	r3, r3, #28
 8007f46:	d501      	bpl.n	8007f4c <_vfiprintf_r+0x3c>
 8007f48:	692b      	ldr	r3, [r5, #16]
 8007f4a:	b9eb      	cbnz	r3, 8007f88 <_vfiprintf_r+0x78>
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f7fe fa18 	bl	8006384 <__swsetup_r>
 8007f54:	b1c0      	cbz	r0, 8007f88 <_vfiprintf_r+0x78>
 8007f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f58:	07dc      	lsls	r4, r3, #31
 8007f5a:	d50e      	bpl.n	8007f7a <_vfiprintf_r+0x6a>
 8007f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f60:	b01d      	add	sp, #116	; 0x74
 8007f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f66:	4b7b      	ldr	r3, [pc, #492]	; (8008154 <_vfiprintf_r+0x244>)
 8007f68:	429d      	cmp	r5, r3
 8007f6a:	d101      	bne.n	8007f70 <_vfiprintf_r+0x60>
 8007f6c:	68b5      	ldr	r5, [r6, #8]
 8007f6e:	e7df      	b.n	8007f30 <_vfiprintf_r+0x20>
 8007f70:	4b79      	ldr	r3, [pc, #484]	; (8008158 <_vfiprintf_r+0x248>)
 8007f72:	429d      	cmp	r5, r3
 8007f74:	bf08      	it	eq
 8007f76:	68f5      	ldreq	r5, [r6, #12]
 8007f78:	e7da      	b.n	8007f30 <_vfiprintf_r+0x20>
 8007f7a:	89ab      	ldrh	r3, [r5, #12]
 8007f7c:	0598      	lsls	r0, r3, #22
 8007f7e:	d4ed      	bmi.n	8007f5c <_vfiprintf_r+0x4c>
 8007f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f82:	f7ff faa5 	bl	80074d0 <__retarget_lock_release_recursive>
 8007f86:	e7e9      	b.n	8007f5c <_vfiprintf_r+0x4c>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f8c:	2320      	movs	r3, #32
 8007f8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f96:	2330      	movs	r3, #48	; 0x30
 8007f98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800815c <_vfiprintf_r+0x24c>
 8007f9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fa0:	f04f 0901 	mov.w	r9, #1
 8007fa4:	4623      	mov	r3, r4
 8007fa6:	469a      	mov	sl, r3
 8007fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fac:	b10a      	cbz	r2, 8007fb2 <_vfiprintf_r+0xa2>
 8007fae:	2a25      	cmp	r2, #37	; 0x25
 8007fb0:	d1f9      	bne.n	8007fa6 <_vfiprintf_r+0x96>
 8007fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8007fb6:	d00b      	beq.n	8007fd0 <_vfiprintf_r+0xc0>
 8007fb8:	465b      	mov	r3, fp
 8007fba:	4622      	mov	r2, r4
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f7ff ff93 	bl	8007eea <__sfputs_r>
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	f000 80aa 	beq.w	800811e <_vfiprintf_r+0x20e>
 8007fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fcc:	445a      	add	r2, fp
 8007fce:	9209      	str	r2, [sp, #36]	; 0x24
 8007fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 80a2 	beq.w	800811e <_vfiprintf_r+0x20e>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fe4:	f10a 0a01 	add.w	sl, sl, #1
 8007fe8:	9304      	str	r3, [sp, #16]
 8007fea:	9307      	str	r3, [sp, #28]
 8007fec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ff0:	931a      	str	r3, [sp, #104]	; 0x68
 8007ff2:	4654      	mov	r4, sl
 8007ff4:	2205      	movs	r2, #5
 8007ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ffa:	4858      	ldr	r0, [pc, #352]	; (800815c <_vfiprintf_r+0x24c>)
 8007ffc:	f7f8 f918 	bl	8000230 <memchr>
 8008000:	9a04      	ldr	r2, [sp, #16]
 8008002:	b9d8      	cbnz	r0, 800803c <_vfiprintf_r+0x12c>
 8008004:	06d1      	lsls	r1, r2, #27
 8008006:	bf44      	itt	mi
 8008008:	2320      	movmi	r3, #32
 800800a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800800e:	0713      	lsls	r3, r2, #28
 8008010:	bf44      	itt	mi
 8008012:	232b      	movmi	r3, #43	; 0x2b
 8008014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008018:	f89a 3000 	ldrb.w	r3, [sl]
 800801c:	2b2a      	cmp	r3, #42	; 0x2a
 800801e:	d015      	beq.n	800804c <_vfiprintf_r+0x13c>
 8008020:	9a07      	ldr	r2, [sp, #28]
 8008022:	4654      	mov	r4, sl
 8008024:	2000      	movs	r0, #0
 8008026:	f04f 0c0a 	mov.w	ip, #10
 800802a:	4621      	mov	r1, r4
 800802c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008030:	3b30      	subs	r3, #48	; 0x30
 8008032:	2b09      	cmp	r3, #9
 8008034:	d94e      	bls.n	80080d4 <_vfiprintf_r+0x1c4>
 8008036:	b1b0      	cbz	r0, 8008066 <_vfiprintf_r+0x156>
 8008038:	9207      	str	r2, [sp, #28]
 800803a:	e014      	b.n	8008066 <_vfiprintf_r+0x156>
 800803c:	eba0 0308 	sub.w	r3, r0, r8
 8008040:	fa09 f303 	lsl.w	r3, r9, r3
 8008044:	4313      	orrs	r3, r2
 8008046:	9304      	str	r3, [sp, #16]
 8008048:	46a2      	mov	sl, r4
 800804a:	e7d2      	b.n	8007ff2 <_vfiprintf_r+0xe2>
 800804c:	9b03      	ldr	r3, [sp, #12]
 800804e:	1d19      	adds	r1, r3, #4
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	9103      	str	r1, [sp, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	bfbb      	ittet	lt
 8008058:	425b      	neglt	r3, r3
 800805a:	f042 0202 	orrlt.w	r2, r2, #2
 800805e:	9307      	strge	r3, [sp, #28]
 8008060:	9307      	strlt	r3, [sp, #28]
 8008062:	bfb8      	it	lt
 8008064:	9204      	strlt	r2, [sp, #16]
 8008066:	7823      	ldrb	r3, [r4, #0]
 8008068:	2b2e      	cmp	r3, #46	; 0x2e
 800806a:	d10c      	bne.n	8008086 <_vfiprintf_r+0x176>
 800806c:	7863      	ldrb	r3, [r4, #1]
 800806e:	2b2a      	cmp	r3, #42	; 0x2a
 8008070:	d135      	bne.n	80080de <_vfiprintf_r+0x1ce>
 8008072:	9b03      	ldr	r3, [sp, #12]
 8008074:	1d1a      	adds	r2, r3, #4
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	9203      	str	r2, [sp, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	bfb8      	it	lt
 800807e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008082:	3402      	adds	r4, #2
 8008084:	9305      	str	r3, [sp, #20]
 8008086:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800816c <_vfiprintf_r+0x25c>
 800808a:	7821      	ldrb	r1, [r4, #0]
 800808c:	2203      	movs	r2, #3
 800808e:	4650      	mov	r0, sl
 8008090:	f7f8 f8ce 	bl	8000230 <memchr>
 8008094:	b140      	cbz	r0, 80080a8 <_vfiprintf_r+0x198>
 8008096:	2340      	movs	r3, #64	; 0x40
 8008098:	eba0 000a 	sub.w	r0, r0, sl
 800809c:	fa03 f000 	lsl.w	r0, r3, r0
 80080a0:	9b04      	ldr	r3, [sp, #16]
 80080a2:	4303      	orrs	r3, r0
 80080a4:	3401      	adds	r4, #1
 80080a6:	9304      	str	r3, [sp, #16]
 80080a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ac:	482c      	ldr	r0, [pc, #176]	; (8008160 <_vfiprintf_r+0x250>)
 80080ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080b2:	2206      	movs	r2, #6
 80080b4:	f7f8 f8bc 	bl	8000230 <memchr>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d03f      	beq.n	800813c <_vfiprintf_r+0x22c>
 80080bc:	4b29      	ldr	r3, [pc, #164]	; (8008164 <_vfiprintf_r+0x254>)
 80080be:	bb1b      	cbnz	r3, 8008108 <_vfiprintf_r+0x1f8>
 80080c0:	9b03      	ldr	r3, [sp, #12]
 80080c2:	3307      	adds	r3, #7
 80080c4:	f023 0307 	bic.w	r3, r3, #7
 80080c8:	3308      	adds	r3, #8
 80080ca:	9303      	str	r3, [sp, #12]
 80080cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ce:	443b      	add	r3, r7
 80080d0:	9309      	str	r3, [sp, #36]	; 0x24
 80080d2:	e767      	b.n	8007fa4 <_vfiprintf_r+0x94>
 80080d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80080d8:	460c      	mov	r4, r1
 80080da:	2001      	movs	r0, #1
 80080dc:	e7a5      	b.n	800802a <_vfiprintf_r+0x11a>
 80080de:	2300      	movs	r3, #0
 80080e0:	3401      	adds	r4, #1
 80080e2:	9305      	str	r3, [sp, #20]
 80080e4:	4619      	mov	r1, r3
 80080e6:	f04f 0c0a 	mov.w	ip, #10
 80080ea:	4620      	mov	r0, r4
 80080ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080f0:	3a30      	subs	r2, #48	; 0x30
 80080f2:	2a09      	cmp	r2, #9
 80080f4:	d903      	bls.n	80080fe <_vfiprintf_r+0x1ee>
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d0c5      	beq.n	8008086 <_vfiprintf_r+0x176>
 80080fa:	9105      	str	r1, [sp, #20]
 80080fc:	e7c3      	b.n	8008086 <_vfiprintf_r+0x176>
 80080fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008102:	4604      	mov	r4, r0
 8008104:	2301      	movs	r3, #1
 8008106:	e7f0      	b.n	80080ea <_vfiprintf_r+0x1da>
 8008108:	ab03      	add	r3, sp, #12
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	462a      	mov	r2, r5
 800810e:	4b16      	ldr	r3, [pc, #88]	; (8008168 <_vfiprintf_r+0x258>)
 8008110:	a904      	add	r1, sp, #16
 8008112:	4630      	mov	r0, r6
 8008114:	f7fd fbbe 	bl	8005894 <_printf_float>
 8008118:	4607      	mov	r7, r0
 800811a:	1c78      	adds	r0, r7, #1
 800811c:	d1d6      	bne.n	80080cc <_vfiprintf_r+0x1bc>
 800811e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008120:	07d9      	lsls	r1, r3, #31
 8008122:	d405      	bmi.n	8008130 <_vfiprintf_r+0x220>
 8008124:	89ab      	ldrh	r3, [r5, #12]
 8008126:	059a      	lsls	r2, r3, #22
 8008128:	d402      	bmi.n	8008130 <_vfiprintf_r+0x220>
 800812a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800812c:	f7ff f9d0 	bl	80074d0 <__retarget_lock_release_recursive>
 8008130:	89ab      	ldrh	r3, [r5, #12]
 8008132:	065b      	lsls	r3, r3, #25
 8008134:	f53f af12 	bmi.w	8007f5c <_vfiprintf_r+0x4c>
 8008138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800813a:	e711      	b.n	8007f60 <_vfiprintf_r+0x50>
 800813c:	ab03      	add	r3, sp, #12
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	462a      	mov	r2, r5
 8008142:	4b09      	ldr	r3, [pc, #36]	; (8008168 <_vfiprintf_r+0x258>)
 8008144:	a904      	add	r1, sp, #16
 8008146:	4630      	mov	r0, r6
 8008148:	f7fd fe48 	bl	8005ddc <_printf_i>
 800814c:	e7e4      	b.n	8008118 <_vfiprintf_r+0x208>
 800814e:	bf00      	nop
 8008150:	08009700 	.word	0x08009700
 8008154:	08009720 	.word	0x08009720
 8008158:	080096e0 	.word	0x080096e0
 800815c:	0800989c 	.word	0x0800989c
 8008160:	080098a6 	.word	0x080098a6
 8008164:	08005895 	.word	0x08005895
 8008168:	08007eeb 	.word	0x08007eeb
 800816c:	080098a2 	.word	0x080098a2

08008170 <_sbrk_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d06      	ldr	r5, [pc, #24]	; (800818c <_sbrk_r+0x1c>)
 8008174:	2300      	movs	r3, #0
 8008176:	4604      	mov	r4, r0
 8008178:	4608      	mov	r0, r1
 800817a:	602b      	str	r3, [r5, #0]
 800817c:	f7f9 fdc0 	bl	8001d00 <_sbrk>
 8008180:	1c43      	adds	r3, r0, #1
 8008182:	d102      	bne.n	800818a <_sbrk_r+0x1a>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	b103      	cbz	r3, 800818a <_sbrk_r+0x1a>
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	200003f0 	.word	0x200003f0

08008190 <__sread>:
 8008190:	b510      	push	{r4, lr}
 8008192:	460c      	mov	r4, r1
 8008194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008198:	f000 f8e2 	bl	8008360 <_read_r>
 800819c:	2800      	cmp	r0, #0
 800819e:	bfab      	itete	ge
 80081a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081a2:	89a3      	ldrhlt	r3, [r4, #12]
 80081a4:	181b      	addge	r3, r3, r0
 80081a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081aa:	bfac      	ite	ge
 80081ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80081ae:	81a3      	strhlt	r3, [r4, #12]
 80081b0:	bd10      	pop	{r4, pc}

080081b2 <__swrite>:
 80081b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b6:	461f      	mov	r7, r3
 80081b8:	898b      	ldrh	r3, [r1, #12]
 80081ba:	05db      	lsls	r3, r3, #23
 80081bc:	4605      	mov	r5, r0
 80081be:	460c      	mov	r4, r1
 80081c0:	4616      	mov	r6, r2
 80081c2:	d505      	bpl.n	80081d0 <__swrite+0x1e>
 80081c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c8:	2302      	movs	r3, #2
 80081ca:	2200      	movs	r2, #0
 80081cc:	f000 f898 	bl	8008300 <_lseek_r>
 80081d0:	89a3      	ldrh	r3, [r4, #12]
 80081d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081da:	81a3      	strh	r3, [r4, #12]
 80081dc:	4632      	mov	r2, r6
 80081de:	463b      	mov	r3, r7
 80081e0:	4628      	mov	r0, r5
 80081e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081e6:	f000 b817 	b.w	8008218 <_write_r>

080081ea <__sseek>:
 80081ea:	b510      	push	{r4, lr}
 80081ec:	460c      	mov	r4, r1
 80081ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081f2:	f000 f885 	bl	8008300 <_lseek_r>
 80081f6:	1c43      	adds	r3, r0, #1
 80081f8:	89a3      	ldrh	r3, [r4, #12]
 80081fa:	bf15      	itete	ne
 80081fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80081fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008206:	81a3      	strheq	r3, [r4, #12]
 8008208:	bf18      	it	ne
 800820a:	81a3      	strhne	r3, [r4, #12]
 800820c:	bd10      	pop	{r4, pc}

0800820e <__sclose>:
 800820e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008212:	f000 b831 	b.w	8008278 <_close_r>
	...

08008218 <_write_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4d07      	ldr	r5, [pc, #28]	; (8008238 <_write_r+0x20>)
 800821c:	4604      	mov	r4, r0
 800821e:	4608      	mov	r0, r1
 8008220:	4611      	mov	r1, r2
 8008222:	2200      	movs	r2, #0
 8008224:	602a      	str	r2, [r5, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	f7f8 feb8 	bl	8000f9c <_write>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_write_r+0x1e>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_write_r+0x1e>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	200003f0 	.word	0x200003f0

0800823c <__assert_func>:
 800823c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800823e:	4614      	mov	r4, r2
 8008240:	461a      	mov	r2, r3
 8008242:	4b09      	ldr	r3, [pc, #36]	; (8008268 <__assert_func+0x2c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4605      	mov	r5, r0
 8008248:	68d8      	ldr	r0, [r3, #12]
 800824a:	b14c      	cbz	r4, 8008260 <__assert_func+0x24>
 800824c:	4b07      	ldr	r3, [pc, #28]	; (800826c <__assert_func+0x30>)
 800824e:	9100      	str	r1, [sp, #0]
 8008250:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008254:	4906      	ldr	r1, [pc, #24]	; (8008270 <__assert_func+0x34>)
 8008256:	462b      	mov	r3, r5
 8008258:	f000 f81e 	bl	8008298 <fiprintf>
 800825c:	f000 f89f 	bl	800839e <abort>
 8008260:	4b04      	ldr	r3, [pc, #16]	; (8008274 <__assert_func+0x38>)
 8008262:	461c      	mov	r4, r3
 8008264:	e7f3      	b.n	800824e <__assert_func+0x12>
 8008266:	bf00      	nop
 8008268:	2000000c 	.word	0x2000000c
 800826c:	080098ad 	.word	0x080098ad
 8008270:	080098ba 	.word	0x080098ba
 8008274:	080098e8 	.word	0x080098e8

08008278 <_close_r>:
 8008278:	b538      	push	{r3, r4, r5, lr}
 800827a:	4d06      	ldr	r5, [pc, #24]	; (8008294 <_close_r+0x1c>)
 800827c:	2300      	movs	r3, #0
 800827e:	4604      	mov	r4, r0
 8008280:	4608      	mov	r0, r1
 8008282:	602b      	str	r3, [r5, #0]
 8008284:	f7f9 fd07 	bl	8001c96 <_close>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	d102      	bne.n	8008292 <_close_r+0x1a>
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	b103      	cbz	r3, 8008292 <_close_r+0x1a>
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	200003f0 	.word	0x200003f0

08008298 <fiprintf>:
 8008298:	b40e      	push	{r1, r2, r3}
 800829a:	b503      	push	{r0, r1, lr}
 800829c:	4601      	mov	r1, r0
 800829e:	ab03      	add	r3, sp, #12
 80082a0:	4805      	ldr	r0, [pc, #20]	; (80082b8 <fiprintf+0x20>)
 80082a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082a6:	6800      	ldr	r0, [r0, #0]
 80082a8:	9301      	str	r3, [sp, #4]
 80082aa:	f7ff fe31 	bl	8007f10 <_vfiprintf_r>
 80082ae:	b002      	add	sp, #8
 80082b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082b4:	b003      	add	sp, #12
 80082b6:	4770      	bx	lr
 80082b8:	2000000c 	.word	0x2000000c

080082bc <_fstat_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4d07      	ldr	r5, [pc, #28]	; (80082dc <_fstat_r+0x20>)
 80082c0:	2300      	movs	r3, #0
 80082c2:	4604      	mov	r4, r0
 80082c4:	4608      	mov	r0, r1
 80082c6:	4611      	mov	r1, r2
 80082c8:	602b      	str	r3, [r5, #0]
 80082ca:	f7f9 fcf0 	bl	8001cae <_fstat>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	d102      	bne.n	80082d8 <_fstat_r+0x1c>
 80082d2:	682b      	ldr	r3, [r5, #0]
 80082d4:	b103      	cbz	r3, 80082d8 <_fstat_r+0x1c>
 80082d6:	6023      	str	r3, [r4, #0]
 80082d8:	bd38      	pop	{r3, r4, r5, pc}
 80082da:	bf00      	nop
 80082dc:	200003f0 	.word	0x200003f0

080082e0 <_isatty_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4d06      	ldr	r5, [pc, #24]	; (80082fc <_isatty_r+0x1c>)
 80082e4:	2300      	movs	r3, #0
 80082e6:	4604      	mov	r4, r0
 80082e8:	4608      	mov	r0, r1
 80082ea:	602b      	str	r3, [r5, #0]
 80082ec:	f7f9 fcef 	bl	8001cce <_isatty>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	d102      	bne.n	80082fa <_isatty_r+0x1a>
 80082f4:	682b      	ldr	r3, [r5, #0]
 80082f6:	b103      	cbz	r3, 80082fa <_isatty_r+0x1a>
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	bd38      	pop	{r3, r4, r5, pc}
 80082fc:	200003f0 	.word	0x200003f0

08008300 <_lseek_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4d07      	ldr	r5, [pc, #28]	; (8008320 <_lseek_r+0x20>)
 8008304:	4604      	mov	r4, r0
 8008306:	4608      	mov	r0, r1
 8008308:	4611      	mov	r1, r2
 800830a:	2200      	movs	r2, #0
 800830c:	602a      	str	r2, [r5, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	f7f9 fce8 	bl	8001ce4 <_lseek>
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d102      	bne.n	800831e <_lseek_r+0x1e>
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	b103      	cbz	r3, 800831e <_lseek_r+0x1e>
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	bd38      	pop	{r3, r4, r5, pc}
 8008320:	200003f0 	.word	0x200003f0

08008324 <__ascii_mbtowc>:
 8008324:	b082      	sub	sp, #8
 8008326:	b901      	cbnz	r1, 800832a <__ascii_mbtowc+0x6>
 8008328:	a901      	add	r1, sp, #4
 800832a:	b142      	cbz	r2, 800833e <__ascii_mbtowc+0x1a>
 800832c:	b14b      	cbz	r3, 8008342 <__ascii_mbtowc+0x1e>
 800832e:	7813      	ldrb	r3, [r2, #0]
 8008330:	600b      	str	r3, [r1, #0]
 8008332:	7812      	ldrb	r2, [r2, #0]
 8008334:	1e10      	subs	r0, r2, #0
 8008336:	bf18      	it	ne
 8008338:	2001      	movne	r0, #1
 800833a:	b002      	add	sp, #8
 800833c:	4770      	bx	lr
 800833e:	4610      	mov	r0, r2
 8008340:	e7fb      	b.n	800833a <__ascii_mbtowc+0x16>
 8008342:	f06f 0001 	mvn.w	r0, #1
 8008346:	e7f8      	b.n	800833a <__ascii_mbtowc+0x16>

08008348 <__malloc_lock>:
 8008348:	4801      	ldr	r0, [pc, #4]	; (8008350 <__malloc_lock+0x8>)
 800834a:	f7ff b8c0 	b.w	80074ce <__retarget_lock_acquire_recursive>
 800834e:	bf00      	nop
 8008350:	200003e4 	.word	0x200003e4

08008354 <__malloc_unlock>:
 8008354:	4801      	ldr	r0, [pc, #4]	; (800835c <__malloc_unlock+0x8>)
 8008356:	f7ff b8bb 	b.w	80074d0 <__retarget_lock_release_recursive>
 800835a:	bf00      	nop
 800835c:	200003e4 	.word	0x200003e4

08008360 <_read_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d07      	ldr	r5, [pc, #28]	; (8008380 <_read_r+0x20>)
 8008364:	4604      	mov	r4, r0
 8008366:	4608      	mov	r0, r1
 8008368:	4611      	mov	r1, r2
 800836a:	2200      	movs	r2, #0
 800836c:	602a      	str	r2, [r5, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	f7f9 fc74 	bl	8001c5c <_read>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d102      	bne.n	800837e <_read_r+0x1e>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b103      	cbz	r3, 800837e <_read_r+0x1e>
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	200003f0 	.word	0x200003f0

08008384 <__ascii_wctomb>:
 8008384:	b149      	cbz	r1, 800839a <__ascii_wctomb+0x16>
 8008386:	2aff      	cmp	r2, #255	; 0xff
 8008388:	bf85      	ittet	hi
 800838a:	238a      	movhi	r3, #138	; 0x8a
 800838c:	6003      	strhi	r3, [r0, #0]
 800838e:	700a      	strbls	r2, [r1, #0]
 8008390:	f04f 30ff 	movhi.w	r0, #4294967295
 8008394:	bf98      	it	ls
 8008396:	2001      	movls	r0, #1
 8008398:	4770      	bx	lr
 800839a:	4608      	mov	r0, r1
 800839c:	4770      	bx	lr

0800839e <abort>:
 800839e:	b508      	push	{r3, lr}
 80083a0:	2006      	movs	r0, #6
 80083a2:	f000 f82b 	bl	80083fc <raise>
 80083a6:	2001      	movs	r0, #1
 80083a8:	f7f9 fc4e 	bl	8001c48 <_exit>

080083ac <_raise_r>:
 80083ac:	291f      	cmp	r1, #31
 80083ae:	b538      	push	{r3, r4, r5, lr}
 80083b0:	4604      	mov	r4, r0
 80083b2:	460d      	mov	r5, r1
 80083b4:	d904      	bls.n	80083c0 <_raise_r+0x14>
 80083b6:	2316      	movs	r3, #22
 80083b8:	6003      	str	r3, [r0, #0]
 80083ba:	f04f 30ff 	mov.w	r0, #4294967295
 80083be:	bd38      	pop	{r3, r4, r5, pc}
 80083c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80083c2:	b112      	cbz	r2, 80083ca <_raise_r+0x1e>
 80083c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083c8:	b94b      	cbnz	r3, 80083de <_raise_r+0x32>
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 f830 	bl	8008430 <_getpid_r>
 80083d0:	462a      	mov	r2, r5
 80083d2:	4601      	mov	r1, r0
 80083d4:	4620      	mov	r0, r4
 80083d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083da:	f000 b817 	b.w	800840c <_kill_r>
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d00a      	beq.n	80083f8 <_raise_r+0x4c>
 80083e2:	1c59      	adds	r1, r3, #1
 80083e4:	d103      	bne.n	80083ee <_raise_r+0x42>
 80083e6:	2316      	movs	r3, #22
 80083e8:	6003      	str	r3, [r0, #0]
 80083ea:	2001      	movs	r0, #1
 80083ec:	e7e7      	b.n	80083be <_raise_r+0x12>
 80083ee:	2400      	movs	r4, #0
 80083f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083f4:	4628      	mov	r0, r5
 80083f6:	4798      	blx	r3
 80083f8:	2000      	movs	r0, #0
 80083fa:	e7e0      	b.n	80083be <_raise_r+0x12>

080083fc <raise>:
 80083fc:	4b02      	ldr	r3, [pc, #8]	; (8008408 <raise+0xc>)
 80083fe:	4601      	mov	r1, r0
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	f7ff bfd3 	b.w	80083ac <_raise_r>
 8008406:	bf00      	nop
 8008408:	2000000c 	.word	0x2000000c

0800840c <_kill_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4d07      	ldr	r5, [pc, #28]	; (800842c <_kill_r+0x20>)
 8008410:	2300      	movs	r3, #0
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	4611      	mov	r1, r2
 8008418:	602b      	str	r3, [r5, #0]
 800841a:	f7f9 fc05 	bl	8001c28 <_kill>
 800841e:	1c43      	adds	r3, r0, #1
 8008420:	d102      	bne.n	8008428 <_kill_r+0x1c>
 8008422:	682b      	ldr	r3, [r5, #0]
 8008424:	b103      	cbz	r3, 8008428 <_kill_r+0x1c>
 8008426:	6023      	str	r3, [r4, #0]
 8008428:	bd38      	pop	{r3, r4, r5, pc}
 800842a:	bf00      	nop
 800842c:	200003f0 	.word	0x200003f0

08008430 <_getpid_r>:
 8008430:	f7f9 bbf2 	b.w	8001c18 <_getpid>
 8008434:	0000      	movs	r0, r0
	...

08008438 <cos>:
 8008438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800843a:	ec53 2b10 	vmov	r2, r3, d0
 800843e:	4826      	ldr	r0, [pc, #152]	; (80084d8 <cos+0xa0>)
 8008440:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008444:	4281      	cmp	r1, r0
 8008446:	dc06      	bgt.n	8008456 <cos+0x1e>
 8008448:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80084d0 <cos+0x98>
 800844c:	b005      	add	sp, #20
 800844e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008452:	f000 baa9 	b.w	80089a8 <__kernel_cos>
 8008456:	4821      	ldr	r0, [pc, #132]	; (80084dc <cos+0xa4>)
 8008458:	4281      	cmp	r1, r0
 800845a:	dd09      	ble.n	8008470 <cos+0x38>
 800845c:	ee10 0a10 	vmov	r0, s0
 8008460:	4619      	mov	r1, r3
 8008462:	f7f7 ff39 	bl	80002d8 <__aeabi_dsub>
 8008466:	ec41 0b10 	vmov	d0, r0, r1
 800846a:	b005      	add	sp, #20
 800846c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008470:	4668      	mov	r0, sp
 8008472:	f000 f88d 	bl	8008590 <__ieee754_rem_pio2>
 8008476:	f000 0003 	and.w	r0, r0, #3
 800847a:	2801      	cmp	r0, #1
 800847c:	d00b      	beq.n	8008496 <cos+0x5e>
 800847e:	2802      	cmp	r0, #2
 8008480:	d016      	beq.n	80084b0 <cos+0x78>
 8008482:	b9e0      	cbnz	r0, 80084be <cos+0x86>
 8008484:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008488:	ed9d 0b00 	vldr	d0, [sp]
 800848c:	f000 fa8c 	bl	80089a8 <__kernel_cos>
 8008490:	ec51 0b10 	vmov	r0, r1, d0
 8008494:	e7e7      	b.n	8008466 <cos+0x2e>
 8008496:	ed9d 1b02 	vldr	d1, [sp, #8]
 800849a:	ed9d 0b00 	vldr	d0, [sp]
 800849e:	f000 fe9b 	bl	80091d8 <__kernel_sin>
 80084a2:	ec53 2b10 	vmov	r2, r3, d0
 80084a6:	ee10 0a10 	vmov	r0, s0
 80084aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80084ae:	e7da      	b.n	8008466 <cos+0x2e>
 80084b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084b4:	ed9d 0b00 	vldr	d0, [sp]
 80084b8:	f000 fa76 	bl	80089a8 <__kernel_cos>
 80084bc:	e7f1      	b.n	80084a2 <cos+0x6a>
 80084be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084c2:	ed9d 0b00 	vldr	d0, [sp]
 80084c6:	2001      	movs	r0, #1
 80084c8:	f000 fe86 	bl	80091d8 <__kernel_sin>
 80084cc:	e7e0      	b.n	8008490 <cos+0x58>
 80084ce:	bf00      	nop
	...
 80084d8:	3fe921fb 	.word	0x3fe921fb
 80084dc:	7fefffff 	.word	0x7fefffff

080084e0 <sin>:
 80084e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084e2:	ec53 2b10 	vmov	r2, r3, d0
 80084e6:	4828      	ldr	r0, [pc, #160]	; (8008588 <sin+0xa8>)
 80084e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084ec:	4281      	cmp	r1, r0
 80084ee:	dc07      	bgt.n	8008500 <sin+0x20>
 80084f0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008580 <sin+0xa0>
 80084f4:	2000      	movs	r0, #0
 80084f6:	b005      	add	sp, #20
 80084f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084fc:	f000 be6c 	b.w	80091d8 <__kernel_sin>
 8008500:	4822      	ldr	r0, [pc, #136]	; (800858c <sin+0xac>)
 8008502:	4281      	cmp	r1, r0
 8008504:	dd09      	ble.n	800851a <sin+0x3a>
 8008506:	ee10 0a10 	vmov	r0, s0
 800850a:	4619      	mov	r1, r3
 800850c:	f7f7 fee4 	bl	80002d8 <__aeabi_dsub>
 8008510:	ec41 0b10 	vmov	d0, r0, r1
 8008514:	b005      	add	sp, #20
 8008516:	f85d fb04 	ldr.w	pc, [sp], #4
 800851a:	4668      	mov	r0, sp
 800851c:	f000 f838 	bl	8008590 <__ieee754_rem_pio2>
 8008520:	f000 0003 	and.w	r0, r0, #3
 8008524:	2801      	cmp	r0, #1
 8008526:	d00c      	beq.n	8008542 <sin+0x62>
 8008528:	2802      	cmp	r0, #2
 800852a:	d011      	beq.n	8008550 <sin+0x70>
 800852c:	b9f0      	cbnz	r0, 800856c <sin+0x8c>
 800852e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008532:	ed9d 0b00 	vldr	d0, [sp]
 8008536:	2001      	movs	r0, #1
 8008538:	f000 fe4e 	bl	80091d8 <__kernel_sin>
 800853c:	ec51 0b10 	vmov	r0, r1, d0
 8008540:	e7e6      	b.n	8008510 <sin+0x30>
 8008542:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008546:	ed9d 0b00 	vldr	d0, [sp]
 800854a:	f000 fa2d 	bl	80089a8 <__kernel_cos>
 800854e:	e7f5      	b.n	800853c <sin+0x5c>
 8008550:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008554:	ed9d 0b00 	vldr	d0, [sp]
 8008558:	2001      	movs	r0, #1
 800855a:	f000 fe3d 	bl	80091d8 <__kernel_sin>
 800855e:	ec53 2b10 	vmov	r2, r3, d0
 8008562:	ee10 0a10 	vmov	r0, s0
 8008566:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800856a:	e7d1      	b.n	8008510 <sin+0x30>
 800856c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008570:	ed9d 0b00 	vldr	d0, [sp]
 8008574:	f000 fa18 	bl	80089a8 <__kernel_cos>
 8008578:	e7f1      	b.n	800855e <sin+0x7e>
 800857a:	bf00      	nop
 800857c:	f3af 8000 	nop.w
	...
 8008588:	3fe921fb 	.word	0x3fe921fb
 800858c:	7fefffff 	.word	0x7fefffff

08008590 <__ieee754_rem_pio2>:
 8008590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	ed2d 8b02 	vpush	{d8}
 8008598:	ec55 4b10 	vmov	r4, r5, d0
 800859c:	4bca      	ldr	r3, [pc, #808]	; (80088c8 <__ieee754_rem_pio2+0x338>)
 800859e:	b08b      	sub	sp, #44	; 0x2c
 80085a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80085a4:	4598      	cmp	r8, r3
 80085a6:	4682      	mov	sl, r0
 80085a8:	9502      	str	r5, [sp, #8]
 80085aa:	dc08      	bgt.n	80085be <__ieee754_rem_pio2+0x2e>
 80085ac:	2200      	movs	r2, #0
 80085ae:	2300      	movs	r3, #0
 80085b0:	ed80 0b00 	vstr	d0, [r0]
 80085b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80085b8:	f04f 0b00 	mov.w	fp, #0
 80085bc:	e028      	b.n	8008610 <__ieee754_rem_pio2+0x80>
 80085be:	4bc3      	ldr	r3, [pc, #780]	; (80088cc <__ieee754_rem_pio2+0x33c>)
 80085c0:	4598      	cmp	r8, r3
 80085c2:	dc78      	bgt.n	80086b6 <__ieee754_rem_pio2+0x126>
 80085c4:	9b02      	ldr	r3, [sp, #8]
 80085c6:	4ec2      	ldr	r6, [pc, #776]	; (80088d0 <__ieee754_rem_pio2+0x340>)
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	ee10 0a10 	vmov	r0, s0
 80085ce:	a3b0      	add	r3, pc, #704	; (adr r3, 8008890 <__ieee754_rem_pio2+0x300>)
 80085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d4:	4629      	mov	r1, r5
 80085d6:	dd39      	ble.n	800864c <__ieee754_rem_pio2+0xbc>
 80085d8:	f7f7 fe7e 	bl	80002d8 <__aeabi_dsub>
 80085dc:	45b0      	cmp	r8, r6
 80085de:	4604      	mov	r4, r0
 80085e0:	460d      	mov	r5, r1
 80085e2:	d01b      	beq.n	800861c <__ieee754_rem_pio2+0x8c>
 80085e4:	a3ac      	add	r3, pc, #688	; (adr r3, 8008898 <__ieee754_rem_pio2+0x308>)
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f7f7 fe75 	bl	80002d8 <__aeabi_dsub>
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	e9ca 2300 	strd	r2, r3, [sl]
 80085f6:	4620      	mov	r0, r4
 80085f8:	4629      	mov	r1, r5
 80085fa:	f7f7 fe6d 	bl	80002d8 <__aeabi_dsub>
 80085fe:	a3a6      	add	r3, pc, #664	; (adr r3, 8008898 <__ieee754_rem_pio2+0x308>)
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f7f7 fe68 	bl	80002d8 <__aeabi_dsub>
 8008608:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800860c:	f04f 0b01 	mov.w	fp, #1
 8008610:	4658      	mov	r0, fp
 8008612:	b00b      	add	sp, #44	; 0x2c
 8008614:	ecbd 8b02 	vpop	{d8}
 8008618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800861c:	a3a0      	add	r3, pc, #640	; (adr r3, 80088a0 <__ieee754_rem_pio2+0x310>)
 800861e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008622:	f7f7 fe59 	bl	80002d8 <__aeabi_dsub>
 8008626:	a3a0      	add	r3, pc, #640	; (adr r3, 80088a8 <__ieee754_rem_pio2+0x318>)
 8008628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862c:	4604      	mov	r4, r0
 800862e:	460d      	mov	r5, r1
 8008630:	f7f7 fe52 	bl	80002d8 <__aeabi_dsub>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	e9ca 2300 	strd	r2, r3, [sl]
 800863c:	4620      	mov	r0, r4
 800863e:	4629      	mov	r1, r5
 8008640:	f7f7 fe4a 	bl	80002d8 <__aeabi_dsub>
 8008644:	a398      	add	r3, pc, #608	; (adr r3, 80088a8 <__ieee754_rem_pio2+0x318>)
 8008646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864a:	e7db      	b.n	8008604 <__ieee754_rem_pio2+0x74>
 800864c:	f7f7 fe46 	bl	80002dc <__adddf3>
 8008650:	45b0      	cmp	r8, r6
 8008652:	4604      	mov	r4, r0
 8008654:	460d      	mov	r5, r1
 8008656:	d016      	beq.n	8008686 <__ieee754_rem_pio2+0xf6>
 8008658:	a38f      	add	r3, pc, #572	; (adr r3, 8008898 <__ieee754_rem_pio2+0x308>)
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	f7f7 fe3d 	bl	80002dc <__adddf3>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	e9ca 2300 	strd	r2, r3, [sl]
 800866a:	4620      	mov	r0, r4
 800866c:	4629      	mov	r1, r5
 800866e:	f7f7 fe33 	bl	80002d8 <__aeabi_dsub>
 8008672:	a389      	add	r3, pc, #548	; (adr r3, 8008898 <__ieee754_rem_pio2+0x308>)
 8008674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008678:	f7f7 fe30 	bl	80002dc <__adddf3>
 800867c:	f04f 3bff 	mov.w	fp, #4294967295
 8008680:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008684:	e7c4      	b.n	8008610 <__ieee754_rem_pio2+0x80>
 8008686:	a386      	add	r3, pc, #536	; (adr r3, 80088a0 <__ieee754_rem_pio2+0x310>)
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	f7f7 fe26 	bl	80002dc <__adddf3>
 8008690:	a385      	add	r3, pc, #532	; (adr r3, 80088a8 <__ieee754_rem_pio2+0x318>)
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	4604      	mov	r4, r0
 8008698:	460d      	mov	r5, r1
 800869a:	f7f7 fe1f 	bl	80002dc <__adddf3>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	e9ca 2300 	strd	r2, r3, [sl]
 80086a6:	4620      	mov	r0, r4
 80086a8:	4629      	mov	r1, r5
 80086aa:	f7f7 fe15 	bl	80002d8 <__aeabi_dsub>
 80086ae:	a37e      	add	r3, pc, #504	; (adr r3, 80088a8 <__ieee754_rem_pio2+0x318>)
 80086b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b4:	e7e0      	b.n	8008678 <__ieee754_rem_pio2+0xe8>
 80086b6:	4b87      	ldr	r3, [pc, #540]	; (80088d4 <__ieee754_rem_pio2+0x344>)
 80086b8:	4598      	cmp	r8, r3
 80086ba:	f300 80d9 	bgt.w	8008870 <__ieee754_rem_pio2+0x2e0>
 80086be:	f000 fe49 	bl	8009354 <fabs>
 80086c2:	ec55 4b10 	vmov	r4, r5, d0
 80086c6:	ee10 0a10 	vmov	r0, s0
 80086ca:	a379      	add	r3, pc, #484	; (adr r3, 80088b0 <__ieee754_rem_pio2+0x320>)
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d0:	4629      	mov	r1, r5
 80086d2:	f7f7 ffb9 	bl	8000648 <__aeabi_dmul>
 80086d6:	4b80      	ldr	r3, [pc, #512]	; (80088d8 <__ieee754_rem_pio2+0x348>)
 80086d8:	2200      	movs	r2, #0
 80086da:	f7f7 fdff 	bl	80002dc <__adddf3>
 80086de:	f7f8 fa63 	bl	8000ba8 <__aeabi_d2iz>
 80086e2:	4683      	mov	fp, r0
 80086e4:	f7f7 ff46 	bl	8000574 <__aeabi_i2d>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	ec43 2b18 	vmov	d8, r2, r3
 80086f0:	a367      	add	r3, pc, #412	; (adr r3, 8008890 <__ieee754_rem_pio2+0x300>)
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f7f7 ffa7 	bl	8000648 <__aeabi_dmul>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4620      	mov	r0, r4
 8008700:	4629      	mov	r1, r5
 8008702:	f7f7 fde9 	bl	80002d8 <__aeabi_dsub>
 8008706:	a364      	add	r3, pc, #400	; (adr r3, 8008898 <__ieee754_rem_pio2+0x308>)
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	4606      	mov	r6, r0
 800870e:	460f      	mov	r7, r1
 8008710:	ec51 0b18 	vmov	r0, r1, d8
 8008714:	f7f7 ff98 	bl	8000648 <__aeabi_dmul>
 8008718:	f1bb 0f1f 	cmp.w	fp, #31
 800871c:	4604      	mov	r4, r0
 800871e:	460d      	mov	r5, r1
 8008720:	dc0d      	bgt.n	800873e <__ieee754_rem_pio2+0x1ae>
 8008722:	4b6e      	ldr	r3, [pc, #440]	; (80088dc <__ieee754_rem_pio2+0x34c>)
 8008724:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872c:	4543      	cmp	r3, r8
 800872e:	d006      	beq.n	800873e <__ieee754_rem_pio2+0x1ae>
 8008730:	4622      	mov	r2, r4
 8008732:	462b      	mov	r3, r5
 8008734:	4630      	mov	r0, r6
 8008736:	4639      	mov	r1, r7
 8008738:	f7f7 fdce 	bl	80002d8 <__aeabi_dsub>
 800873c:	e00f      	b.n	800875e <__ieee754_rem_pio2+0x1ce>
 800873e:	462b      	mov	r3, r5
 8008740:	4622      	mov	r2, r4
 8008742:	4630      	mov	r0, r6
 8008744:	4639      	mov	r1, r7
 8008746:	f7f7 fdc7 	bl	80002d8 <__aeabi_dsub>
 800874a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800874e:	9303      	str	r3, [sp, #12]
 8008750:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008754:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008758:	f1b8 0f10 	cmp.w	r8, #16
 800875c:	dc02      	bgt.n	8008764 <__ieee754_rem_pio2+0x1d4>
 800875e:	e9ca 0100 	strd	r0, r1, [sl]
 8008762:	e039      	b.n	80087d8 <__ieee754_rem_pio2+0x248>
 8008764:	a34e      	add	r3, pc, #312	; (adr r3, 80088a0 <__ieee754_rem_pio2+0x310>)
 8008766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876a:	ec51 0b18 	vmov	r0, r1, d8
 800876e:	f7f7 ff6b 	bl	8000648 <__aeabi_dmul>
 8008772:	4604      	mov	r4, r0
 8008774:	460d      	mov	r5, r1
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	4630      	mov	r0, r6
 800877c:	4639      	mov	r1, r7
 800877e:	f7f7 fdab 	bl	80002d8 <__aeabi_dsub>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	4680      	mov	r8, r0
 8008788:	4689      	mov	r9, r1
 800878a:	4630      	mov	r0, r6
 800878c:	4639      	mov	r1, r7
 800878e:	f7f7 fda3 	bl	80002d8 <__aeabi_dsub>
 8008792:	4622      	mov	r2, r4
 8008794:	462b      	mov	r3, r5
 8008796:	f7f7 fd9f 	bl	80002d8 <__aeabi_dsub>
 800879a:	a343      	add	r3, pc, #268	; (adr r3, 80088a8 <__ieee754_rem_pio2+0x318>)
 800879c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a0:	4604      	mov	r4, r0
 80087a2:	460d      	mov	r5, r1
 80087a4:	ec51 0b18 	vmov	r0, r1, d8
 80087a8:	f7f7 ff4e 	bl	8000648 <__aeabi_dmul>
 80087ac:	4622      	mov	r2, r4
 80087ae:	462b      	mov	r3, r5
 80087b0:	f7f7 fd92 	bl	80002d8 <__aeabi_dsub>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4604      	mov	r4, r0
 80087ba:	460d      	mov	r5, r1
 80087bc:	4640      	mov	r0, r8
 80087be:	4649      	mov	r1, r9
 80087c0:	f7f7 fd8a 	bl	80002d8 <__aeabi_dsub>
 80087c4:	9a03      	ldr	r2, [sp, #12]
 80087c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	2b31      	cmp	r3, #49	; 0x31
 80087ce:	dc24      	bgt.n	800881a <__ieee754_rem_pio2+0x28a>
 80087d0:	e9ca 0100 	strd	r0, r1, [sl]
 80087d4:	4646      	mov	r6, r8
 80087d6:	464f      	mov	r7, r9
 80087d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80087dc:	4630      	mov	r0, r6
 80087de:	4642      	mov	r2, r8
 80087e0:	464b      	mov	r3, r9
 80087e2:	4639      	mov	r1, r7
 80087e4:	f7f7 fd78 	bl	80002d8 <__aeabi_dsub>
 80087e8:	462b      	mov	r3, r5
 80087ea:	4622      	mov	r2, r4
 80087ec:	f7f7 fd74 	bl	80002d8 <__aeabi_dsub>
 80087f0:	9b02      	ldr	r3, [sp, #8]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80087f8:	f6bf af0a 	bge.w	8008610 <__ieee754_rem_pio2+0x80>
 80087fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008800:	f8ca 3004 	str.w	r3, [sl, #4]
 8008804:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008808:	f8ca 8000 	str.w	r8, [sl]
 800880c:	f8ca 0008 	str.w	r0, [sl, #8]
 8008810:	f8ca 300c 	str.w	r3, [sl, #12]
 8008814:	f1cb 0b00 	rsb	fp, fp, #0
 8008818:	e6fa      	b.n	8008610 <__ieee754_rem_pio2+0x80>
 800881a:	a327      	add	r3, pc, #156	; (adr r3, 80088b8 <__ieee754_rem_pio2+0x328>)
 800881c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008820:	ec51 0b18 	vmov	r0, r1, d8
 8008824:	f7f7 ff10 	bl	8000648 <__aeabi_dmul>
 8008828:	4604      	mov	r4, r0
 800882a:	460d      	mov	r5, r1
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4640      	mov	r0, r8
 8008832:	4649      	mov	r1, r9
 8008834:	f7f7 fd50 	bl	80002d8 <__aeabi_dsub>
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	4606      	mov	r6, r0
 800883e:	460f      	mov	r7, r1
 8008840:	4640      	mov	r0, r8
 8008842:	4649      	mov	r1, r9
 8008844:	f7f7 fd48 	bl	80002d8 <__aeabi_dsub>
 8008848:	4622      	mov	r2, r4
 800884a:	462b      	mov	r3, r5
 800884c:	f7f7 fd44 	bl	80002d8 <__aeabi_dsub>
 8008850:	a31b      	add	r3, pc, #108	; (adr r3, 80088c0 <__ieee754_rem_pio2+0x330>)
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	4604      	mov	r4, r0
 8008858:	460d      	mov	r5, r1
 800885a:	ec51 0b18 	vmov	r0, r1, d8
 800885e:	f7f7 fef3 	bl	8000648 <__aeabi_dmul>
 8008862:	4622      	mov	r2, r4
 8008864:	462b      	mov	r3, r5
 8008866:	f7f7 fd37 	bl	80002d8 <__aeabi_dsub>
 800886a:	4604      	mov	r4, r0
 800886c:	460d      	mov	r5, r1
 800886e:	e75f      	b.n	8008730 <__ieee754_rem_pio2+0x1a0>
 8008870:	4b1b      	ldr	r3, [pc, #108]	; (80088e0 <__ieee754_rem_pio2+0x350>)
 8008872:	4598      	cmp	r8, r3
 8008874:	dd36      	ble.n	80088e4 <__ieee754_rem_pio2+0x354>
 8008876:	ee10 2a10 	vmov	r2, s0
 800887a:	462b      	mov	r3, r5
 800887c:	4620      	mov	r0, r4
 800887e:	4629      	mov	r1, r5
 8008880:	f7f7 fd2a 	bl	80002d8 <__aeabi_dsub>
 8008884:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008888:	e9ca 0100 	strd	r0, r1, [sl]
 800888c:	e694      	b.n	80085b8 <__ieee754_rem_pio2+0x28>
 800888e:	bf00      	nop
 8008890:	54400000 	.word	0x54400000
 8008894:	3ff921fb 	.word	0x3ff921fb
 8008898:	1a626331 	.word	0x1a626331
 800889c:	3dd0b461 	.word	0x3dd0b461
 80088a0:	1a600000 	.word	0x1a600000
 80088a4:	3dd0b461 	.word	0x3dd0b461
 80088a8:	2e037073 	.word	0x2e037073
 80088ac:	3ba3198a 	.word	0x3ba3198a
 80088b0:	6dc9c883 	.word	0x6dc9c883
 80088b4:	3fe45f30 	.word	0x3fe45f30
 80088b8:	2e000000 	.word	0x2e000000
 80088bc:	3ba3198a 	.word	0x3ba3198a
 80088c0:	252049c1 	.word	0x252049c1
 80088c4:	397b839a 	.word	0x397b839a
 80088c8:	3fe921fb 	.word	0x3fe921fb
 80088cc:	4002d97b 	.word	0x4002d97b
 80088d0:	3ff921fb 	.word	0x3ff921fb
 80088d4:	413921fb 	.word	0x413921fb
 80088d8:	3fe00000 	.word	0x3fe00000
 80088dc:	080099f4 	.word	0x080099f4
 80088e0:	7fefffff 	.word	0x7fefffff
 80088e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80088e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80088ec:	ee10 0a10 	vmov	r0, s0
 80088f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80088f4:	ee10 6a10 	vmov	r6, s0
 80088f8:	460f      	mov	r7, r1
 80088fa:	f7f8 f955 	bl	8000ba8 <__aeabi_d2iz>
 80088fe:	f7f7 fe39 	bl	8000574 <__aeabi_i2d>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4630      	mov	r0, r6
 8008908:	4639      	mov	r1, r7
 800890a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800890e:	f7f7 fce3 	bl	80002d8 <__aeabi_dsub>
 8008912:	4b23      	ldr	r3, [pc, #140]	; (80089a0 <__ieee754_rem_pio2+0x410>)
 8008914:	2200      	movs	r2, #0
 8008916:	f7f7 fe97 	bl	8000648 <__aeabi_dmul>
 800891a:	460f      	mov	r7, r1
 800891c:	4606      	mov	r6, r0
 800891e:	f7f8 f943 	bl	8000ba8 <__aeabi_d2iz>
 8008922:	f7f7 fe27 	bl	8000574 <__aeabi_i2d>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4630      	mov	r0, r6
 800892c:	4639      	mov	r1, r7
 800892e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008932:	f7f7 fcd1 	bl	80002d8 <__aeabi_dsub>
 8008936:	4b1a      	ldr	r3, [pc, #104]	; (80089a0 <__ieee754_rem_pio2+0x410>)
 8008938:	2200      	movs	r2, #0
 800893a:	f7f7 fe85 	bl	8000648 <__aeabi_dmul>
 800893e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008942:	ad04      	add	r5, sp, #16
 8008944:	f04f 0803 	mov.w	r8, #3
 8008948:	46a9      	mov	r9, r5
 800894a:	2600      	movs	r6, #0
 800894c:	2700      	movs	r7, #0
 800894e:	4632      	mov	r2, r6
 8008950:	463b      	mov	r3, r7
 8008952:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008956:	46c3      	mov	fp, r8
 8008958:	3d08      	subs	r5, #8
 800895a:	f108 38ff 	add.w	r8, r8, #4294967295
 800895e:	f7f8 f8db 	bl	8000b18 <__aeabi_dcmpeq>
 8008962:	2800      	cmp	r0, #0
 8008964:	d1f3      	bne.n	800894e <__ieee754_rem_pio2+0x3be>
 8008966:	4b0f      	ldr	r3, [pc, #60]	; (80089a4 <__ieee754_rem_pio2+0x414>)
 8008968:	9301      	str	r3, [sp, #4]
 800896a:	2302      	movs	r3, #2
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	4622      	mov	r2, r4
 8008970:	465b      	mov	r3, fp
 8008972:	4651      	mov	r1, sl
 8008974:	4648      	mov	r0, r9
 8008976:	f000 f8df 	bl	8008b38 <__kernel_rem_pio2>
 800897a:	9b02      	ldr	r3, [sp, #8]
 800897c:	2b00      	cmp	r3, #0
 800897e:	4683      	mov	fp, r0
 8008980:	f6bf ae46 	bge.w	8008610 <__ieee754_rem_pio2+0x80>
 8008984:	e9da 2100 	ldrd	r2, r1, [sl]
 8008988:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800898c:	e9ca 2300 	strd	r2, r3, [sl]
 8008990:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008994:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008998:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800899c:	e73a      	b.n	8008814 <__ieee754_rem_pio2+0x284>
 800899e:	bf00      	nop
 80089a0:	41700000 	.word	0x41700000
 80089a4:	08009a74 	.word	0x08009a74

080089a8 <__kernel_cos>:
 80089a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ac:	ec57 6b10 	vmov	r6, r7, d0
 80089b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80089b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80089b8:	ed8d 1b00 	vstr	d1, [sp]
 80089bc:	da07      	bge.n	80089ce <__kernel_cos+0x26>
 80089be:	ee10 0a10 	vmov	r0, s0
 80089c2:	4639      	mov	r1, r7
 80089c4:	f7f8 f8f0 	bl	8000ba8 <__aeabi_d2iz>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	f000 8088 	beq.w	8008ade <__kernel_cos+0x136>
 80089ce:	4632      	mov	r2, r6
 80089d0:	463b      	mov	r3, r7
 80089d2:	4630      	mov	r0, r6
 80089d4:	4639      	mov	r1, r7
 80089d6:	f7f7 fe37 	bl	8000648 <__aeabi_dmul>
 80089da:	4b51      	ldr	r3, [pc, #324]	; (8008b20 <__kernel_cos+0x178>)
 80089dc:	2200      	movs	r2, #0
 80089de:	4604      	mov	r4, r0
 80089e0:	460d      	mov	r5, r1
 80089e2:	f7f7 fe31 	bl	8000648 <__aeabi_dmul>
 80089e6:	a340      	add	r3, pc, #256	; (adr r3, 8008ae8 <__kernel_cos+0x140>)
 80089e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ec:	4682      	mov	sl, r0
 80089ee:	468b      	mov	fp, r1
 80089f0:	4620      	mov	r0, r4
 80089f2:	4629      	mov	r1, r5
 80089f4:	f7f7 fe28 	bl	8000648 <__aeabi_dmul>
 80089f8:	a33d      	add	r3, pc, #244	; (adr r3, 8008af0 <__kernel_cos+0x148>)
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	f7f7 fc6d 	bl	80002dc <__adddf3>
 8008a02:	4622      	mov	r2, r4
 8008a04:	462b      	mov	r3, r5
 8008a06:	f7f7 fe1f 	bl	8000648 <__aeabi_dmul>
 8008a0a:	a33b      	add	r3, pc, #236	; (adr r3, 8008af8 <__kernel_cos+0x150>)
 8008a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a10:	f7f7 fc62 	bl	80002d8 <__aeabi_dsub>
 8008a14:	4622      	mov	r2, r4
 8008a16:	462b      	mov	r3, r5
 8008a18:	f7f7 fe16 	bl	8000648 <__aeabi_dmul>
 8008a1c:	a338      	add	r3, pc, #224	; (adr r3, 8008b00 <__kernel_cos+0x158>)
 8008a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a22:	f7f7 fc5b 	bl	80002dc <__adddf3>
 8008a26:	4622      	mov	r2, r4
 8008a28:	462b      	mov	r3, r5
 8008a2a:	f7f7 fe0d 	bl	8000648 <__aeabi_dmul>
 8008a2e:	a336      	add	r3, pc, #216	; (adr r3, 8008b08 <__kernel_cos+0x160>)
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	f7f7 fc50 	bl	80002d8 <__aeabi_dsub>
 8008a38:	4622      	mov	r2, r4
 8008a3a:	462b      	mov	r3, r5
 8008a3c:	f7f7 fe04 	bl	8000648 <__aeabi_dmul>
 8008a40:	a333      	add	r3, pc, #204	; (adr r3, 8008b10 <__kernel_cos+0x168>)
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	f7f7 fc49 	bl	80002dc <__adddf3>
 8008a4a:	4622      	mov	r2, r4
 8008a4c:	462b      	mov	r3, r5
 8008a4e:	f7f7 fdfb 	bl	8000648 <__aeabi_dmul>
 8008a52:	4622      	mov	r2, r4
 8008a54:	462b      	mov	r3, r5
 8008a56:	f7f7 fdf7 	bl	8000648 <__aeabi_dmul>
 8008a5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a5e:	4604      	mov	r4, r0
 8008a60:	460d      	mov	r5, r1
 8008a62:	4630      	mov	r0, r6
 8008a64:	4639      	mov	r1, r7
 8008a66:	f7f7 fdef 	bl	8000648 <__aeabi_dmul>
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	4629      	mov	r1, r5
 8008a70:	4620      	mov	r0, r4
 8008a72:	f7f7 fc31 	bl	80002d8 <__aeabi_dsub>
 8008a76:	4b2b      	ldr	r3, [pc, #172]	; (8008b24 <__kernel_cos+0x17c>)
 8008a78:	4598      	cmp	r8, r3
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	460f      	mov	r7, r1
 8008a7e:	dc10      	bgt.n	8008aa2 <__kernel_cos+0xfa>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4650      	mov	r0, sl
 8008a86:	4659      	mov	r1, fp
 8008a88:	f7f7 fc26 	bl	80002d8 <__aeabi_dsub>
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4926      	ldr	r1, [pc, #152]	; (8008b28 <__kernel_cos+0x180>)
 8008a90:	4602      	mov	r2, r0
 8008a92:	2000      	movs	r0, #0
 8008a94:	f7f7 fc20 	bl	80002d8 <__aeabi_dsub>
 8008a98:	ec41 0b10 	vmov	d0, r0, r1
 8008a9c:	b003      	add	sp, #12
 8008a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa2:	4b22      	ldr	r3, [pc, #136]	; (8008b2c <__kernel_cos+0x184>)
 8008aa4:	4920      	ldr	r1, [pc, #128]	; (8008b28 <__kernel_cos+0x180>)
 8008aa6:	4598      	cmp	r8, r3
 8008aa8:	bfcc      	ite	gt
 8008aaa:	4d21      	ldrgt	r5, [pc, #132]	; (8008b30 <__kernel_cos+0x188>)
 8008aac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008ab0:	2400      	movs	r4, #0
 8008ab2:	4622      	mov	r2, r4
 8008ab4:	462b      	mov	r3, r5
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	f7f7 fc0e 	bl	80002d8 <__aeabi_dsub>
 8008abc:	4622      	mov	r2, r4
 8008abe:	4680      	mov	r8, r0
 8008ac0:	4689      	mov	r9, r1
 8008ac2:	462b      	mov	r3, r5
 8008ac4:	4650      	mov	r0, sl
 8008ac6:	4659      	mov	r1, fp
 8008ac8:	f7f7 fc06 	bl	80002d8 <__aeabi_dsub>
 8008acc:	4632      	mov	r2, r6
 8008ace:	463b      	mov	r3, r7
 8008ad0:	f7f7 fc02 	bl	80002d8 <__aeabi_dsub>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4640      	mov	r0, r8
 8008ada:	4649      	mov	r1, r9
 8008adc:	e7da      	b.n	8008a94 <__kernel_cos+0xec>
 8008ade:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008b18 <__kernel_cos+0x170>
 8008ae2:	e7db      	b.n	8008a9c <__kernel_cos+0xf4>
 8008ae4:	f3af 8000 	nop.w
 8008ae8:	be8838d4 	.word	0xbe8838d4
 8008aec:	bda8fae9 	.word	0xbda8fae9
 8008af0:	bdb4b1c4 	.word	0xbdb4b1c4
 8008af4:	3e21ee9e 	.word	0x3e21ee9e
 8008af8:	809c52ad 	.word	0x809c52ad
 8008afc:	3e927e4f 	.word	0x3e927e4f
 8008b00:	19cb1590 	.word	0x19cb1590
 8008b04:	3efa01a0 	.word	0x3efa01a0
 8008b08:	16c15177 	.word	0x16c15177
 8008b0c:	3f56c16c 	.word	0x3f56c16c
 8008b10:	5555554c 	.word	0x5555554c
 8008b14:	3fa55555 	.word	0x3fa55555
 8008b18:	00000000 	.word	0x00000000
 8008b1c:	3ff00000 	.word	0x3ff00000
 8008b20:	3fe00000 	.word	0x3fe00000
 8008b24:	3fd33332 	.word	0x3fd33332
 8008b28:	3ff00000 	.word	0x3ff00000
 8008b2c:	3fe90000 	.word	0x3fe90000
 8008b30:	3fd20000 	.word	0x3fd20000
 8008b34:	00000000 	.word	0x00000000

08008b38 <__kernel_rem_pio2>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	ed2d 8b02 	vpush	{d8}
 8008b40:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008b44:	f112 0f14 	cmn.w	r2, #20
 8008b48:	9308      	str	r3, [sp, #32]
 8008b4a:	9101      	str	r1, [sp, #4]
 8008b4c:	4bc4      	ldr	r3, [pc, #784]	; (8008e60 <__kernel_rem_pio2+0x328>)
 8008b4e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008b50:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b56:	9302      	str	r3, [sp, #8]
 8008b58:	9b08      	ldr	r3, [sp, #32]
 8008b5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b5e:	bfa8      	it	ge
 8008b60:	1ed4      	subge	r4, r2, #3
 8008b62:	9306      	str	r3, [sp, #24]
 8008b64:	bfb2      	itee	lt
 8008b66:	2400      	movlt	r4, #0
 8008b68:	2318      	movge	r3, #24
 8008b6a:	fb94 f4f3 	sdivge	r4, r4, r3
 8008b6e:	f06f 0317 	mvn.w	r3, #23
 8008b72:	fb04 3303 	mla	r3, r4, r3, r3
 8008b76:	eb03 0a02 	add.w	sl, r3, r2
 8008b7a:	9b02      	ldr	r3, [sp, #8]
 8008b7c:	9a06      	ldr	r2, [sp, #24]
 8008b7e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008e50 <__kernel_rem_pio2+0x318>
 8008b82:	eb03 0802 	add.w	r8, r3, r2
 8008b86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008b88:	1aa7      	subs	r7, r4, r2
 8008b8a:	ae22      	add	r6, sp, #136	; 0x88
 8008b8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008b90:	2500      	movs	r5, #0
 8008b92:	4545      	cmp	r5, r8
 8008b94:	dd13      	ble.n	8008bbe <__kernel_rem_pio2+0x86>
 8008b96:	9b08      	ldr	r3, [sp, #32]
 8008b98:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008e50 <__kernel_rem_pio2+0x318>
 8008b9c:	aa22      	add	r2, sp, #136	; 0x88
 8008b9e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008ba2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008ba6:	f04f 0800 	mov.w	r8, #0
 8008baa:	9b02      	ldr	r3, [sp, #8]
 8008bac:	4598      	cmp	r8, r3
 8008bae:	dc2f      	bgt.n	8008c10 <__kernel_rem_pio2+0xd8>
 8008bb0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008bb4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008bb8:	462f      	mov	r7, r5
 8008bba:	2600      	movs	r6, #0
 8008bbc:	e01b      	b.n	8008bf6 <__kernel_rem_pio2+0xbe>
 8008bbe:	42ef      	cmn	r7, r5
 8008bc0:	d407      	bmi.n	8008bd2 <__kernel_rem_pio2+0x9a>
 8008bc2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008bc6:	f7f7 fcd5 	bl	8000574 <__aeabi_i2d>
 8008bca:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008bce:	3501      	adds	r5, #1
 8008bd0:	e7df      	b.n	8008b92 <__kernel_rem_pio2+0x5a>
 8008bd2:	ec51 0b18 	vmov	r0, r1, d8
 8008bd6:	e7f8      	b.n	8008bca <__kernel_rem_pio2+0x92>
 8008bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bdc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008be0:	f7f7 fd32 	bl	8000648 <__aeabi_dmul>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bec:	f7f7 fb76 	bl	80002dc <__adddf3>
 8008bf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bf4:	3601      	adds	r6, #1
 8008bf6:	9b06      	ldr	r3, [sp, #24]
 8008bf8:	429e      	cmp	r6, r3
 8008bfa:	f1a7 0708 	sub.w	r7, r7, #8
 8008bfe:	ddeb      	ble.n	8008bd8 <__kernel_rem_pio2+0xa0>
 8008c00:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008c04:	f108 0801 	add.w	r8, r8, #1
 8008c08:	ecab 7b02 	vstmia	fp!, {d7}
 8008c0c:	3508      	adds	r5, #8
 8008c0e:	e7cc      	b.n	8008baa <__kernel_rem_pio2+0x72>
 8008c10:	9b02      	ldr	r3, [sp, #8]
 8008c12:	aa0e      	add	r2, sp, #56	; 0x38
 8008c14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c18:	930d      	str	r3, [sp, #52]	; 0x34
 8008c1a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008c1c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008c20:	9c02      	ldr	r4, [sp, #8]
 8008c22:	930c      	str	r3, [sp, #48]	; 0x30
 8008c24:	00e3      	lsls	r3, r4, #3
 8008c26:	930a      	str	r3, [sp, #40]	; 0x28
 8008c28:	ab9a      	add	r3, sp, #616	; 0x268
 8008c2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c2e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008c32:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008c36:	ab72      	add	r3, sp, #456	; 0x1c8
 8008c38:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008c3c:	46c3      	mov	fp, r8
 8008c3e:	46a1      	mov	r9, r4
 8008c40:	f1b9 0f00 	cmp.w	r9, #0
 8008c44:	f1a5 0508 	sub.w	r5, r5, #8
 8008c48:	dc77      	bgt.n	8008d3a <__kernel_rem_pio2+0x202>
 8008c4a:	ec47 6b10 	vmov	d0, r6, r7
 8008c4e:	4650      	mov	r0, sl
 8008c50:	f000 fc0a 	bl	8009468 <scalbn>
 8008c54:	ec57 6b10 	vmov	r6, r7, d0
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008c5e:	ee10 0a10 	vmov	r0, s0
 8008c62:	4639      	mov	r1, r7
 8008c64:	f7f7 fcf0 	bl	8000648 <__aeabi_dmul>
 8008c68:	ec41 0b10 	vmov	d0, r0, r1
 8008c6c:	f000 fb7c 	bl	8009368 <floor>
 8008c70:	4b7c      	ldr	r3, [pc, #496]	; (8008e64 <__kernel_rem_pio2+0x32c>)
 8008c72:	ec51 0b10 	vmov	r0, r1, d0
 8008c76:	2200      	movs	r2, #0
 8008c78:	f7f7 fce6 	bl	8000648 <__aeabi_dmul>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4630      	mov	r0, r6
 8008c82:	4639      	mov	r1, r7
 8008c84:	f7f7 fb28 	bl	80002d8 <__aeabi_dsub>
 8008c88:	460f      	mov	r7, r1
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	f7f7 ff8c 	bl	8000ba8 <__aeabi_d2iz>
 8008c90:	9004      	str	r0, [sp, #16]
 8008c92:	f7f7 fc6f 	bl	8000574 <__aeabi_i2d>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	4639      	mov	r1, r7
 8008c9e:	f7f7 fb1b 	bl	80002d8 <__aeabi_dsub>
 8008ca2:	f1ba 0f00 	cmp.w	sl, #0
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	460f      	mov	r7, r1
 8008caa:	dd6d      	ble.n	8008d88 <__kernel_rem_pio2+0x250>
 8008cac:	1e62      	subs	r2, r4, #1
 8008cae:	ab0e      	add	r3, sp, #56	; 0x38
 8008cb0:	9d04      	ldr	r5, [sp, #16]
 8008cb2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008cb6:	f1ca 0118 	rsb	r1, sl, #24
 8008cba:	fa40 f301 	asr.w	r3, r0, r1
 8008cbe:	441d      	add	r5, r3
 8008cc0:	408b      	lsls	r3, r1
 8008cc2:	1ac0      	subs	r0, r0, r3
 8008cc4:	ab0e      	add	r3, sp, #56	; 0x38
 8008cc6:	9504      	str	r5, [sp, #16]
 8008cc8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008ccc:	f1ca 0317 	rsb	r3, sl, #23
 8008cd0:	fa40 fb03 	asr.w	fp, r0, r3
 8008cd4:	f1bb 0f00 	cmp.w	fp, #0
 8008cd8:	dd65      	ble.n	8008da6 <__kernel_rem_pio2+0x26e>
 8008cda:	9b04      	ldr	r3, [sp, #16]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	3301      	adds	r3, #1
 8008ce0:	9304      	str	r3, [sp, #16]
 8008ce2:	4615      	mov	r5, r2
 8008ce4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008ce8:	4294      	cmp	r4, r2
 8008cea:	f300 809c 	bgt.w	8008e26 <__kernel_rem_pio2+0x2ee>
 8008cee:	f1ba 0f00 	cmp.w	sl, #0
 8008cf2:	dd07      	ble.n	8008d04 <__kernel_rem_pio2+0x1cc>
 8008cf4:	f1ba 0f01 	cmp.w	sl, #1
 8008cf8:	f000 80c0 	beq.w	8008e7c <__kernel_rem_pio2+0x344>
 8008cfc:	f1ba 0f02 	cmp.w	sl, #2
 8008d00:	f000 80c6 	beq.w	8008e90 <__kernel_rem_pio2+0x358>
 8008d04:	f1bb 0f02 	cmp.w	fp, #2
 8008d08:	d14d      	bne.n	8008da6 <__kernel_rem_pio2+0x26e>
 8008d0a:	4632      	mov	r2, r6
 8008d0c:	463b      	mov	r3, r7
 8008d0e:	4956      	ldr	r1, [pc, #344]	; (8008e68 <__kernel_rem_pio2+0x330>)
 8008d10:	2000      	movs	r0, #0
 8008d12:	f7f7 fae1 	bl	80002d8 <__aeabi_dsub>
 8008d16:	4606      	mov	r6, r0
 8008d18:	460f      	mov	r7, r1
 8008d1a:	2d00      	cmp	r5, #0
 8008d1c:	d043      	beq.n	8008da6 <__kernel_rem_pio2+0x26e>
 8008d1e:	4650      	mov	r0, sl
 8008d20:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008e58 <__kernel_rem_pio2+0x320>
 8008d24:	f000 fba0 	bl	8009468 <scalbn>
 8008d28:	4630      	mov	r0, r6
 8008d2a:	4639      	mov	r1, r7
 8008d2c:	ec53 2b10 	vmov	r2, r3, d0
 8008d30:	f7f7 fad2 	bl	80002d8 <__aeabi_dsub>
 8008d34:	4606      	mov	r6, r0
 8008d36:	460f      	mov	r7, r1
 8008d38:	e035      	b.n	8008da6 <__kernel_rem_pio2+0x26e>
 8008d3a:	4b4c      	ldr	r3, [pc, #304]	; (8008e6c <__kernel_rem_pio2+0x334>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	4630      	mov	r0, r6
 8008d40:	4639      	mov	r1, r7
 8008d42:	f7f7 fc81 	bl	8000648 <__aeabi_dmul>
 8008d46:	f7f7 ff2f 	bl	8000ba8 <__aeabi_d2iz>
 8008d4a:	f7f7 fc13 	bl	8000574 <__aeabi_i2d>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	ec43 2b18 	vmov	d8, r2, r3
 8008d56:	4b46      	ldr	r3, [pc, #280]	; (8008e70 <__kernel_rem_pio2+0x338>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f7f7 fc75 	bl	8000648 <__aeabi_dmul>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	4630      	mov	r0, r6
 8008d64:	4639      	mov	r1, r7
 8008d66:	f7f7 fab7 	bl	80002d8 <__aeabi_dsub>
 8008d6a:	f7f7 ff1d 	bl	8000ba8 <__aeabi_d2iz>
 8008d6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d72:	f84b 0b04 	str.w	r0, [fp], #4
 8008d76:	ec51 0b18 	vmov	r0, r1, d8
 8008d7a:	f7f7 faaf 	bl	80002dc <__adddf3>
 8008d7e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008d82:	4606      	mov	r6, r0
 8008d84:	460f      	mov	r7, r1
 8008d86:	e75b      	b.n	8008c40 <__kernel_rem_pio2+0x108>
 8008d88:	d106      	bne.n	8008d98 <__kernel_rem_pio2+0x260>
 8008d8a:	1e63      	subs	r3, r4, #1
 8008d8c:	aa0e      	add	r2, sp, #56	; 0x38
 8008d8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008d92:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008d96:	e79d      	b.n	8008cd4 <__kernel_rem_pio2+0x19c>
 8008d98:	4b36      	ldr	r3, [pc, #216]	; (8008e74 <__kernel_rem_pio2+0x33c>)
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f7f7 feda 	bl	8000b54 <__aeabi_dcmpge>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d13d      	bne.n	8008e20 <__kernel_rem_pio2+0x2e8>
 8008da4:	4683      	mov	fp, r0
 8008da6:	2200      	movs	r2, #0
 8008da8:	2300      	movs	r3, #0
 8008daa:	4630      	mov	r0, r6
 8008dac:	4639      	mov	r1, r7
 8008dae:	f7f7 feb3 	bl	8000b18 <__aeabi_dcmpeq>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	f000 80c0 	beq.w	8008f38 <__kernel_rem_pio2+0x400>
 8008db8:	1e65      	subs	r5, r4, #1
 8008dba:	462b      	mov	r3, r5
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	9902      	ldr	r1, [sp, #8]
 8008dc0:	428b      	cmp	r3, r1
 8008dc2:	da6c      	bge.n	8008e9e <__kernel_rem_pio2+0x366>
 8008dc4:	2a00      	cmp	r2, #0
 8008dc6:	f000 8089 	beq.w	8008edc <__kernel_rem_pio2+0x3a4>
 8008dca:	ab0e      	add	r3, sp, #56	; 0x38
 8008dcc:	f1aa 0a18 	sub.w	sl, sl, #24
 8008dd0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 80ad 	beq.w	8008f34 <__kernel_rem_pio2+0x3fc>
 8008dda:	4650      	mov	r0, sl
 8008ddc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008e58 <__kernel_rem_pio2+0x320>
 8008de0:	f000 fb42 	bl	8009468 <scalbn>
 8008de4:	ab9a      	add	r3, sp, #616	; 0x268
 8008de6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008dea:	ec57 6b10 	vmov	r6, r7, d0
 8008dee:	00ec      	lsls	r4, r5, #3
 8008df0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8008df4:	46aa      	mov	sl, r5
 8008df6:	f1ba 0f00 	cmp.w	sl, #0
 8008dfa:	f280 80d6 	bge.w	8008faa <__kernel_rem_pio2+0x472>
 8008dfe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008e50 <__kernel_rem_pio2+0x318>
 8008e02:	462e      	mov	r6, r5
 8008e04:	2e00      	cmp	r6, #0
 8008e06:	f2c0 8104 	blt.w	8009012 <__kernel_rem_pio2+0x4da>
 8008e0a:	ab72      	add	r3, sp, #456	; 0x1c8
 8008e0c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008e10:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008e78 <__kernel_rem_pio2+0x340>
 8008e14:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008e18:	f04f 0800 	mov.w	r8, #0
 8008e1c:	1baf      	subs	r7, r5, r6
 8008e1e:	e0ea      	b.n	8008ff6 <__kernel_rem_pio2+0x4be>
 8008e20:	f04f 0b02 	mov.w	fp, #2
 8008e24:	e759      	b.n	8008cda <__kernel_rem_pio2+0x1a2>
 8008e26:	f8d8 3000 	ldr.w	r3, [r8]
 8008e2a:	b955      	cbnz	r5, 8008e42 <__kernel_rem_pio2+0x30a>
 8008e2c:	b123      	cbz	r3, 8008e38 <__kernel_rem_pio2+0x300>
 8008e2e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008e32:	f8c8 3000 	str.w	r3, [r8]
 8008e36:	2301      	movs	r3, #1
 8008e38:	3201      	adds	r2, #1
 8008e3a:	f108 0804 	add.w	r8, r8, #4
 8008e3e:	461d      	mov	r5, r3
 8008e40:	e752      	b.n	8008ce8 <__kernel_rem_pio2+0x1b0>
 8008e42:	1acb      	subs	r3, r1, r3
 8008e44:	f8c8 3000 	str.w	r3, [r8]
 8008e48:	462b      	mov	r3, r5
 8008e4a:	e7f5      	b.n	8008e38 <__kernel_rem_pio2+0x300>
 8008e4c:	f3af 8000 	nop.w
	...
 8008e5c:	3ff00000 	.word	0x3ff00000
 8008e60:	08009bc0 	.word	0x08009bc0
 8008e64:	40200000 	.word	0x40200000
 8008e68:	3ff00000 	.word	0x3ff00000
 8008e6c:	3e700000 	.word	0x3e700000
 8008e70:	41700000 	.word	0x41700000
 8008e74:	3fe00000 	.word	0x3fe00000
 8008e78:	08009b80 	.word	0x08009b80
 8008e7c:	1e62      	subs	r2, r4, #1
 8008e7e:	ab0e      	add	r3, sp, #56	; 0x38
 8008e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e84:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008e88:	a90e      	add	r1, sp, #56	; 0x38
 8008e8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008e8e:	e739      	b.n	8008d04 <__kernel_rem_pio2+0x1cc>
 8008e90:	1e62      	subs	r2, r4, #1
 8008e92:	ab0e      	add	r3, sp, #56	; 0x38
 8008e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008e9c:	e7f4      	b.n	8008e88 <__kernel_rem_pio2+0x350>
 8008e9e:	a90e      	add	r1, sp, #56	; 0x38
 8008ea0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	e789      	b.n	8008dbe <__kernel_rem_pio2+0x286>
 8008eaa:	3301      	adds	r3, #1
 8008eac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008eb0:	2900      	cmp	r1, #0
 8008eb2:	d0fa      	beq.n	8008eaa <__kernel_rem_pio2+0x372>
 8008eb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eb6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008eba:	446a      	add	r2, sp
 8008ebc:	3a98      	subs	r2, #152	; 0x98
 8008ebe:	920a      	str	r2, [sp, #40]	; 0x28
 8008ec0:	9a08      	ldr	r2, [sp, #32]
 8008ec2:	18e3      	adds	r3, r4, r3
 8008ec4:	18a5      	adds	r5, r4, r2
 8008ec6:	aa22      	add	r2, sp, #136	; 0x88
 8008ec8:	f104 0801 	add.w	r8, r4, #1
 8008ecc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008ed0:	9304      	str	r3, [sp, #16]
 8008ed2:	9b04      	ldr	r3, [sp, #16]
 8008ed4:	4543      	cmp	r3, r8
 8008ed6:	da04      	bge.n	8008ee2 <__kernel_rem_pio2+0x3aa>
 8008ed8:	461c      	mov	r4, r3
 8008eda:	e6a3      	b.n	8008c24 <__kernel_rem_pio2+0xec>
 8008edc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e7e4      	b.n	8008eac <__kernel_rem_pio2+0x374>
 8008ee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ee4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008ee8:	f7f7 fb44 	bl	8000574 <__aeabi_i2d>
 8008eec:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ef2:	46ab      	mov	fp, r5
 8008ef4:	461c      	mov	r4, r3
 8008ef6:	f04f 0900 	mov.w	r9, #0
 8008efa:	2600      	movs	r6, #0
 8008efc:	2700      	movs	r7, #0
 8008efe:	9b06      	ldr	r3, [sp, #24]
 8008f00:	4599      	cmp	r9, r3
 8008f02:	dd06      	ble.n	8008f12 <__kernel_rem_pio2+0x3da>
 8008f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f06:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008f0a:	f108 0801 	add.w	r8, r8, #1
 8008f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f10:	e7df      	b.n	8008ed2 <__kernel_rem_pio2+0x39a>
 8008f12:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008f16:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008f1a:	f7f7 fb95 	bl	8000648 <__aeabi_dmul>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4630      	mov	r0, r6
 8008f24:	4639      	mov	r1, r7
 8008f26:	f7f7 f9d9 	bl	80002dc <__adddf3>
 8008f2a:	f109 0901 	add.w	r9, r9, #1
 8008f2e:	4606      	mov	r6, r0
 8008f30:	460f      	mov	r7, r1
 8008f32:	e7e4      	b.n	8008efe <__kernel_rem_pio2+0x3c6>
 8008f34:	3d01      	subs	r5, #1
 8008f36:	e748      	b.n	8008dca <__kernel_rem_pio2+0x292>
 8008f38:	ec47 6b10 	vmov	d0, r6, r7
 8008f3c:	f1ca 0000 	rsb	r0, sl, #0
 8008f40:	f000 fa92 	bl	8009468 <scalbn>
 8008f44:	ec57 6b10 	vmov	r6, r7, d0
 8008f48:	4ba0      	ldr	r3, [pc, #640]	; (80091cc <__kernel_rem_pio2+0x694>)
 8008f4a:	ee10 0a10 	vmov	r0, s0
 8008f4e:	2200      	movs	r2, #0
 8008f50:	4639      	mov	r1, r7
 8008f52:	f7f7 fdff 	bl	8000b54 <__aeabi_dcmpge>
 8008f56:	b1f8      	cbz	r0, 8008f98 <__kernel_rem_pio2+0x460>
 8008f58:	4b9d      	ldr	r3, [pc, #628]	; (80091d0 <__kernel_rem_pio2+0x698>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	4639      	mov	r1, r7
 8008f60:	f7f7 fb72 	bl	8000648 <__aeabi_dmul>
 8008f64:	f7f7 fe20 	bl	8000ba8 <__aeabi_d2iz>
 8008f68:	4680      	mov	r8, r0
 8008f6a:	f7f7 fb03 	bl	8000574 <__aeabi_i2d>
 8008f6e:	4b97      	ldr	r3, [pc, #604]	; (80091cc <__kernel_rem_pio2+0x694>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	f7f7 fb69 	bl	8000648 <__aeabi_dmul>
 8008f76:	460b      	mov	r3, r1
 8008f78:	4602      	mov	r2, r0
 8008f7a:	4639      	mov	r1, r7
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f7f7 f9ab 	bl	80002d8 <__aeabi_dsub>
 8008f82:	f7f7 fe11 	bl	8000ba8 <__aeabi_d2iz>
 8008f86:	1c65      	adds	r5, r4, #1
 8008f88:	ab0e      	add	r3, sp, #56	; 0x38
 8008f8a:	f10a 0a18 	add.w	sl, sl, #24
 8008f8e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008f92:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008f96:	e720      	b.n	8008dda <__kernel_rem_pio2+0x2a2>
 8008f98:	4630      	mov	r0, r6
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	f7f7 fe04 	bl	8000ba8 <__aeabi_d2iz>
 8008fa0:	ab0e      	add	r3, sp, #56	; 0x38
 8008fa2:	4625      	mov	r5, r4
 8008fa4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008fa8:	e717      	b.n	8008dda <__kernel_rem_pio2+0x2a2>
 8008faa:	ab0e      	add	r3, sp, #56	; 0x38
 8008fac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008fb0:	f7f7 fae0 	bl	8000574 <__aeabi_i2d>
 8008fb4:	4632      	mov	r2, r6
 8008fb6:	463b      	mov	r3, r7
 8008fb8:	f7f7 fb46 	bl	8000648 <__aeabi_dmul>
 8008fbc:	4b84      	ldr	r3, [pc, #528]	; (80091d0 <__kernel_rem_pio2+0x698>)
 8008fbe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	f7f7 fb3e 	bl	8000648 <__aeabi_dmul>
 8008fcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fd0:	4606      	mov	r6, r0
 8008fd2:	460f      	mov	r7, r1
 8008fd4:	e70f      	b.n	8008df6 <__kernel_rem_pio2+0x2be>
 8008fd6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008fda:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008fde:	f7f7 fb33 	bl	8000648 <__aeabi_dmul>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fea:	f7f7 f977 	bl	80002dc <__adddf3>
 8008fee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ff2:	f108 0801 	add.w	r8, r8, #1
 8008ff6:	9b02      	ldr	r3, [sp, #8]
 8008ff8:	4598      	cmp	r8, r3
 8008ffa:	dc01      	bgt.n	8009000 <__kernel_rem_pio2+0x4c8>
 8008ffc:	45b8      	cmp	r8, r7
 8008ffe:	ddea      	ble.n	8008fd6 <__kernel_rem_pio2+0x49e>
 8009000:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009004:	ab4a      	add	r3, sp, #296	; 0x128
 8009006:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800900a:	ed87 7b00 	vstr	d7, [r7]
 800900e:	3e01      	subs	r6, #1
 8009010:	e6f8      	b.n	8008e04 <__kernel_rem_pio2+0x2cc>
 8009012:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009014:	2b02      	cmp	r3, #2
 8009016:	dc0b      	bgt.n	8009030 <__kernel_rem_pio2+0x4f8>
 8009018:	2b00      	cmp	r3, #0
 800901a:	dc35      	bgt.n	8009088 <__kernel_rem_pio2+0x550>
 800901c:	d059      	beq.n	80090d2 <__kernel_rem_pio2+0x59a>
 800901e:	9b04      	ldr	r3, [sp, #16]
 8009020:	f003 0007 	and.w	r0, r3, #7
 8009024:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009028:	ecbd 8b02 	vpop	{d8}
 800902c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009030:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009032:	2b03      	cmp	r3, #3
 8009034:	d1f3      	bne.n	800901e <__kernel_rem_pio2+0x4e6>
 8009036:	ab4a      	add	r3, sp, #296	; 0x128
 8009038:	4423      	add	r3, r4
 800903a:	9306      	str	r3, [sp, #24]
 800903c:	461c      	mov	r4, r3
 800903e:	469a      	mov	sl, r3
 8009040:	9502      	str	r5, [sp, #8]
 8009042:	9b02      	ldr	r3, [sp, #8]
 8009044:	2b00      	cmp	r3, #0
 8009046:	f1aa 0a08 	sub.w	sl, sl, #8
 800904a:	dc6b      	bgt.n	8009124 <__kernel_rem_pio2+0x5ec>
 800904c:	46aa      	mov	sl, r5
 800904e:	f1ba 0f01 	cmp.w	sl, #1
 8009052:	f1a4 0408 	sub.w	r4, r4, #8
 8009056:	f300 8085 	bgt.w	8009164 <__kernel_rem_pio2+0x62c>
 800905a:	9c06      	ldr	r4, [sp, #24]
 800905c:	2000      	movs	r0, #0
 800905e:	3408      	adds	r4, #8
 8009060:	2100      	movs	r1, #0
 8009062:	2d01      	cmp	r5, #1
 8009064:	f300 809d 	bgt.w	80091a2 <__kernel_rem_pio2+0x66a>
 8009068:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800906c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009070:	f1bb 0f00 	cmp.w	fp, #0
 8009074:	f040 809b 	bne.w	80091ae <__kernel_rem_pio2+0x676>
 8009078:	9b01      	ldr	r3, [sp, #4]
 800907a:	e9c3 5600 	strd	r5, r6, [r3]
 800907e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009082:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009086:	e7ca      	b.n	800901e <__kernel_rem_pio2+0x4e6>
 8009088:	3408      	adds	r4, #8
 800908a:	ab4a      	add	r3, sp, #296	; 0x128
 800908c:	441c      	add	r4, r3
 800908e:	462e      	mov	r6, r5
 8009090:	2000      	movs	r0, #0
 8009092:	2100      	movs	r1, #0
 8009094:	2e00      	cmp	r6, #0
 8009096:	da36      	bge.n	8009106 <__kernel_rem_pio2+0x5ce>
 8009098:	f1bb 0f00 	cmp.w	fp, #0
 800909c:	d039      	beq.n	8009112 <__kernel_rem_pio2+0x5da>
 800909e:	4602      	mov	r2, r0
 80090a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090a4:	9c01      	ldr	r4, [sp, #4]
 80090a6:	e9c4 2300 	strd	r2, r3, [r4]
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80090b2:	f7f7 f911 	bl	80002d8 <__aeabi_dsub>
 80090b6:	ae4c      	add	r6, sp, #304	; 0x130
 80090b8:	2401      	movs	r4, #1
 80090ba:	42a5      	cmp	r5, r4
 80090bc:	da2c      	bge.n	8009118 <__kernel_rem_pio2+0x5e0>
 80090be:	f1bb 0f00 	cmp.w	fp, #0
 80090c2:	d002      	beq.n	80090ca <__kernel_rem_pio2+0x592>
 80090c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090c8:	4619      	mov	r1, r3
 80090ca:	9b01      	ldr	r3, [sp, #4]
 80090cc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80090d0:	e7a5      	b.n	800901e <__kernel_rem_pio2+0x4e6>
 80090d2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80090d6:	eb0d 0403 	add.w	r4, sp, r3
 80090da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80090de:	2000      	movs	r0, #0
 80090e0:	2100      	movs	r1, #0
 80090e2:	2d00      	cmp	r5, #0
 80090e4:	da09      	bge.n	80090fa <__kernel_rem_pio2+0x5c2>
 80090e6:	f1bb 0f00 	cmp.w	fp, #0
 80090ea:	d002      	beq.n	80090f2 <__kernel_rem_pio2+0x5ba>
 80090ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090f0:	4619      	mov	r1, r3
 80090f2:	9b01      	ldr	r3, [sp, #4]
 80090f4:	e9c3 0100 	strd	r0, r1, [r3]
 80090f8:	e791      	b.n	800901e <__kernel_rem_pio2+0x4e6>
 80090fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80090fe:	f7f7 f8ed 	bl	80002dc <__adddf3>
 8009102:	3d01      	subs	r5, #1
 8009104:	e7ed      	b.n	80090e2 <__kernel_rem_pio2+0x5aa>
 8009106:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800910a:	f7f7 f8e7 	bl	80002dc <__adddf3>
 800910e:	3e01      	subs	r6, #1
 8009110:	e7c0      	b.n	8009094 <__kernel_rem_pio2+0x55c>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	e7c5      	b.n	80090a4 <__kernel_rem_pio2+0x56c>
 8009118:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800911c:	f7f7 f8de 	bl	80002dc <__adddf3>
 8009120:	3401      	adds	r4, #1
 8009122:	e7ca      	b.n	80090ba <__kernel_rem_pio2+0x582>
 8009124:	e9da 8900 	ldrd	r8, r9, [sl]
 8009128:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800912c:	9b02      	ldr	r3, [sp, #8]
 800912e:	3b01      	subs	r3, #1
 8009130:	9302      	str	r3, [sp, #8]
 8009132:	4632      	mov	r2, r6
 8009134:	463b      	mov	r3, r7
 8009136:	4640      	mov	r0, r8
 8009138:	4649      	mov	r1, r9
 800913a:	f7f7 f8cf 	bl	80002dc <__adddf3>
 800913e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	4640      	mov	r0, r8
 8009148:	4649      	mov	r1, r9
 800914a:	f7f7 f8c5 	bl	80002d8 <__aeabi_dsub>
 800914e:	4632      	mov	r2, r6
 8009150:	463b      	mov	r3, r7
 8009152:	f7f7 f8c3 	bl	80002dc <__adddf3>
 8009156:	ed9d 7b08 	vldr	d7, [sp, #32]
 800915a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800915e:	ed8a 7b00 	vstr	d7, [sl]
 8009162:	e76e      	b.n	8009042 <__kernel_rem_pio2+0x50a>
 8009164:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009168:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800916c:	4640      	mov	r0, r8
 800916e:	4632      	mov	r2, r6
 8009170:	463b      	mov	r3, r7
 8009172:	4649      	mov	r1, r9
 8009174:	f7f7 f8b2 	bl	80002dc <__adddf3>
 8009178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	4640      	mov	r0, r8
 8009182:	4649      	mov	r1, r9
 8009184:	f7f7 f8a8 	bl	80002d8 <__aeabi_dsub>
 8009188:	4632      	mov	r2, r6
 800918a:	463b      	mov	r3, r7
 800918c:	f7f7 f8a6 	bl	80002dc <__adddf3>
 8009190:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009194:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009198:	ed84 7b00 	vstr	d7, [r4]
 800919c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091a0:	e755      	b.n	800904e <__kernel_rem_pio2+0x516>
 80091a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80091a6:	f7f7 f899 	bl	80002dc <__adddf3>
 80091aa:	3d01      	subs	r5, #1
 80091ac:	e759      	b.n	8009062 <__kernel_rem_pio2+0x52a>
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	9a01      	ldr	r2, [sp, #4]
 80091b2:	601d      	str	r5, [r3, #0]
 80091b4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80091b8:	605c      	str	r4, [r3, #4]
 80091ba:	609f      	str	r7, [r3, #8]
 80091bc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80091c0:	60d3      	str	r3, [r2, #12]
 80091c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091c6:	6110      	str	r0, [r2, #16]
 80091c8:	6153      	str	r3, [r2, #20]
 80091ca:	e728      	b.n	800901e <__kernel_rem_pio2+0x4e6>
 80091cc:	41700000 	.word	0x41700000
 80091d0:	3e700000 	.word	0x3e700000
 80091d4:	00000000 	.word	0x00000000

080091d8 <__kernel_sin>:
 80091d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091dc:	ed2d 8b04 	vpush	{d8-d9}
 80091e0:	eeb0 8a41 	vmov.f32	s16, s2
 80091e4:	eef0 8a61 	vmov.f32	s17, s3
 80091e8:	ec55 4b10 	vmov	r4, r5, d0
 80091ec:	b083      	sub	sp, #12
 80091ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80091f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80091f6:	9001      	str	r0, [sp, #4]
 80091f8:	da06      	bge.n	8009208 <__kernel_sin+0x30>
 80091fa:	ee10 0a10 	vmov	r0, s0
 80091fe:	4629      	mov	r1, r5
 8009200:	f7f7 fcd2 	bl	8000ba8 <__aeabi_d2iz>
 8009204:	2800      	cmp	r0, #0
 8009206:	d051      	beq.n	80092ac <__kernel_sin+0xd4>
 8009208:	4622      	mov	r2, r4
 800920a:	462b      	mov	r3, r5
 800920c:	4620      	mov	r0, r4
 800920e:	4629      	mov	r1, r5
 8009210:	f7f7 fa1a 	bl	8000648 <__aeabi_dmul>
 8009214:	4682      	mov	sl, r0
 8009216:	468b      	mov	fp, r1
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4620      	mov	r0, r4
 800921e:	4629      	mov	r1, r5
 8009220:	f7f7 fa12 	bl	8000648 <__aeabi_dmul>
 8009224:	a341      	add	r3, pc, #260	; (adr r3, 800932c <__kernel_sin+0x154>)
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	4680      	mov	r8, r0
 800922c:	4689      	mov	r9, r1
 800922e:	4650      	mov	r0, sl
 8009230:	4659      	mov	r1, fp
 8009232:	f7f7 fa09 	bl	8000648 <__aeabi_dmul>
 8009236:	a33f      	add	r3, pc, #252	; (adr r3, 8009334 <__kernel_sin+0x15c>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	f7f7 f84c 	bl	80002d8 <__aeabi_dsub>
 8009240:	4652      	mov	r2, sl
 8009242:	465b      	mov	r3, fp
 8009244:	f7f7 fa00 	bl	8000648 <__aeabi_dmul>
 8009248:	a33c      	add	r3, pc, #240	; (adr r3, 800933c <__kernel_sin+0x164>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	f7f7 f845 	bl	80002dc <__adddf3>
 8009252:	4652      	mov	r2, sl
 8009254:	465b      	mov	r3, fp
 8009256:	f7f7 f9f7 	bl	8000648 <__aeabi_dmul>
 800925a:	a33a      	add	r3, pc, #232	; (adr r3, 8009344 <__kernel_sin+0x16c>)
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	f7f7 f83a 	bl	80002d8 <__aeabi_dsub>
 8009264:	4652      	mov	r2, sl
 8009266:	465b      	mov	r3, fp
 8009268:	f7f7 f9ee 	bl	8000648 <__aeabi_dmul>
 800926c:	a337      	add	r3, pc, #220	; (adr r3, 800934c <__kernel_sin+0x174>)
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	f7f7 f833 	bl	80002dc <__adddf3>
 8009276:	9b01      	ldr	r3, [sp, #4]
 8009278:	4606      	mov	r6, r0
 800927a:	460f      	mov	r7, r1
 800927c:	b9eb      	cbnz	r3, 80092ba <__kernel_sin+0xe2>
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	4650      	mov	r0, sl
 8009284:	4659      	mov	r1, fp
 8009286:	f7f7 f9df 	bl	8000648 <__aeabi_dmul>
 800928a:	a325      	add	r3, pc, #148	; (adr r3, 8009320 <__kernel_sin+0x148>)
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	f7f7 f822 	bl	80002d8 <__aeabi_dsub>
 8009294:	4642      	mov	r2, r8
 8009296:	464b      	mov	r3, r9
 8009298:	f7f7 f9d6 	bl	8000648 <__aeabi_dmul>
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	4620      	mov	r0, r4
 80092a2:	4629      	mov	r1, r5
 80092a4:	f7f7 f81a 	bl	80002dc <__adddf3>
 80092a8:	4604      	mov	r4, r0
 80092aa:	460d      	mov	r5, r1
 80092ac:	ec45 4b10 	vmov	d0, r4, r5
 80092b0:	b003      	add	sp, #12
 80092b2:	ecbd 8b04 	vpop	{d8-d9}
 80092b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ba:	4b1b      	ldr	r3, [pc, #108]	; (8009328 <__kernel_sin+0x150>)
 80092bc:	ec51 0b18 	vmov	r0, r1, d8
 80092c0:	2200      	movs	r2, #0
 80092c2:	f7f7 f9c1 	bl	8000648 <__aeabi_dmul>
 80092c6:	4632      	mov	r2, r6
 80092c8:	ec41 0b19 	vmov	d9, r0, r1
 80092cc:	463b      	mov	r3, r7
 80092ce:	4640      	mov	r0, r8
 80092d0:	4649      	mov	r1, r9
 80092d2:	f7f7 f9b9 	bl	8000648 <__aeabi_dmul>
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	ec51 0b19 	vmov	r0, r1, d9
 80092de:	f7f6 fffb 	bl	80002d8 <__aeabi_dsub>
 80092e2:	4652      	mov	r2, sl
 80092e4:	465b      	mov	r3, fp
 80092e6:	f7f7 f9af 	bl	8000648 <__aeabi_dmul>
 80092ea:	ec53 2b18 	vmov	r2, r3, d8
 80092ee:	f7f6 fff3 	bl	80002d8 <__aeabi_dsub>
 80092f2:	a30b      	add	r3, pc, #44	; (adr r3, 8009320 <__kernel_sin+0x148>)
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	4606      	mov	r6, r0
 80092fa:	460f      	mov	r7, r1
 80092fc:	4640      	mov	r0, r8
 80092fe:	4649      	mov	r1, r9
 8009300:	f7f7 f9a2 	bl	8000648 <__aeabi_dmul>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4630      	mov	r0, r6
 800930a:	4639      	mov	r1, r7
 800930c:	f7f6 ffe6 	bl	80002dc <__adddf3>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4620      	mov	r0, r4
 8009316:	4629      	mov	r1, r5
 8009318:	f7f6 ffde 	bl	80002d8 <__aeabi_dsub>
 800931c:	e7c4      	b.n	80092a8 <__kernel_sin+0xd0>
 800931e:	bf00      	nop
 8009320:	55555549 	.word	0x55555549
 8009324:	3fc55555 	.word	0x3fc55555
 8009328:	3fe00000 	.word	0x3fe00000
 800932c:	5acfd57c 	.word	0x5acfd57c
 8009330:	3de5d93a 	.word	0x3de5d93a
 8009334:	8a2b9ceb 	.word	0x8a2b9ceb
 8009338:	3e5ae5e6 	.word	0x3e5ae5e6
 800933c:	57b1fe7d 	.word	0x57b1fe7d
 8009340:	3ec71de3 	.word	0x3ec71de3
 8009344:	19c161d5 	.word	0x19c161d5
 8009348:	3f2a01a0 	.word	0x3f2a01a0
 800934c:	1110f8a6 	.word	0x1110f8a6
 8009350:	3f811111 	.word	0x3f811111

08009354 <fabs>:
 8009354:	ec51 0b10 	vmov	r0, r1, d0
 8009358:	ee10 2a10 	vmov	r2, s0
 800935c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009360:	ec43 2b10 	vmov	d0, r2, r3
 8009364:	4770      	bx	lr
	...

08009368 <floor>:
 8009368:	ec51 0b10 	vmov	r0, r1, d0
 800936c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009370:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009374:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009378:	2e13      	cmp	r6, #19
 800937a:	ee10 5a10 	vmov	r5, s0
 800937e:	ee10 8a10 	vmov	r8, s0
 8009382:	460c      	mov	r4, r1
 8009384:	dc32      	bgt.n	80093ec <floor+0x84>
 8009386:	2e00      	cmp	r6, #0
 8009388:	da14      	bge.n	80093b4 <floor+0x4c>
 800938a:	a333      	add	r3, pc, #204	; (adr r3, 8009458 <floor+0xf0>)
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	f7f6 ffa4 	bl	80002dc <__adddf3>
 8009394:	2200      	movs	r2, #0
 8009396:	2300      	movs	r3, #0
 8009398:	f7f7 fbe6 	bl	8000b68 <__aeabi_dcmpgt>
 800939c:	b138      	cbz	r0, 80093ae <floor+0x46>
 800939e:	2c00      	cmp	r4, #0
 80093a0:	da57      	bge.n	8009452 <floor+0xea>
 80093a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80093a6:	431d      	orrs	r5, r3
 80093a8:	d001      	beq.n	80093ae <floor+0x46>
 80093aa:	4c2d      	ldr	r4, [pc, #180]	; (8009460 <floor+0xf8>)
 80093ac:	2500      	movs	r5, #0
 80093ae:	4621      	mov	r1, r4
 80093b0:	4628      	mov	r0, r5
 80093b2:	e025      	b.n	8009400 <floor+0x98>
 80093b4:	4f2b      	ldr	r7, [pc, #172]	; (8009464 <floor+0xfc>)
 80093b6:	4137      	asrs	r7, r6
 80093b8:	ea01 0307 	and.w	r3, r1, r7
 80093bc:	4303      	orrs	r3, r0
 80093be:	d01f      	beq.n	8009400 <floor+0x98>
 80093c0:	a325      	add	r3, pc, #148	; (adr r3, 8009458 <floor+0xf0>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f6 ff89 	bl	80002dc <__adddf3>
 80093ca:	2200      	movs	r2, #0
 80093cc:	2300      	movs	r3, #0
 80093ce:	f7f7 fbcb 	bl	8000b68 <__aeabi_dcmpgt>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d0eb      	beq.n	80093ae <floor+0x46>
 80093d6:	2c00      	cmp	r4, #0
 80093d8:	bfbe      	ittt	lt
 80093da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80093de:	fa43 f606 	asrlt.w	r6, r3, r6
 80093e2:	19a4      	addlt	r4, r4, r6
 80093e4:	ea24 0407 	bic.w	r4, r4, r7
 80093e8:	2500      	movs	r5, #0
 80093ea:	e7e0      	b.n	80093ae <floor+0x46>
 80093ec:	2e33      	cmp	r6, #51	; 0x33
 80093ee:	dd0b      	ble.n	8009408 <floor+0xa0>
 80093f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80093f4:	d104      	bne.n	8009400 <floor+0x98>
 80093f6:	ee10 2a10 	vmov	r2, s0
 80093fa:	460b      	mov	r3, r1
 80093fc:	f7f6 ff6e 	bl	80002dc <__adddf3>
 8009400:	ec41 0b10 	vmov	d0, r0, r1
 8009404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009408:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800940c:	f04f 33ff 	mov.w	r3, #4294967295
 8009410:	fa23 f707 	lsr.w	r7, r3, r7
 8009414:	4207      	tst	r7, r0
 8009416:	d0f3      	beq.n	8009400 <floor+0x98>
 8009418:	a30f      	add	r3, pc, #60	; (adr r3, 8009458 <floor+0xf0>)
 800941a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941e:	f7f6 ff5d 	bl	80002dc <__adddf3>
 8009422:	2200      	movs	r2, #0
 8009424:	2300      	movs	r3, #0
 8009426:	f7f7 fb9f 	bl	8000b68 <__aeabi_dcmpgt>
 800942a:	2800      	cmp	r0, #0
 800942c:	d0bf      	beq.n	80093ae <floor+0x46>
 800942e:	2c00      	cmp	r4, #0
 8009430:	da02      	bge.n	8009438 <floor+0xd0>
 8009432:	2e14      	cmp	r6, #20
 8009434:	d103      	bne.n	800943e <floor+0xd6>
 8009436:	3401      	adds	r4, #1
 8009438:	ea25 0507 	bic.w	r5, r5, r7
 800943c:	e7b7      	b.n	80093ae <floor+0x46>
 800943e:	2301      	movs	r3, #1
 8009440:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009444:	fa03 f606 	lsl.w	r6, r3, r6
 8009448:	4435      	add	r5, r6
 800944a:	4545      	cmp	r5, r8
 800944c:	bf38      	it	cc
 800944e:	18e4      	addcc	r4, r4, r3
 8009450:	e7f2      	b.n	8009438 <floor+0xd0>
 8009452:	2500      	movs	r5, #0
 8009454:	462c      	mov	r4, r5
 8009456:	e7aa      	b.n	80093ae <floor+0x46>
 8009458:	8800759c 	.word	0x8800759c
 800945c:	7e37e43c 	.word	0x7e37e43c
 8009460:	bff00000 	.word	0xbff00000
 8009464:	000fffff 	.word	0x000fffff

08009468 <scalbn>:
 8009468:	b570      	push	{r4, r5, r6, lr}
 800946a:	ec55 4b10 	vmov	r4, r5, d0
 800946e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009472:	4606      	mov	r6, r0
 8009474:	462b      	mov	r3, r5
 8009476:	b99a      	cbnz	r2, 80094a0 <scalbn+0x38>
 8009478:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800947c:	4323      	orrs	r3, r4
 800947e:	d036      	beq.n	80094ee <scalbn+0x86>
 8009480:	4b39      	ldr	r3, [pc, #228]	; (8009568 <scalbn+0x100>)
 8009482:	4629      	mov	r1, r5
 8009484:	ee10 0a10 	vmov	r0, s0
 8009488:	2200      	movs	r2, #0
 800948a:	f7f7 f8dd 	bl	8000648 <__aeabi_dmul>
 800948e:	4b37      	ldr	r3, [pc, #220]	; (800956c <scalbn+0x104>)
 8009490:	429e      	cmp	r6, r3
 8009492:	4604      	mov	r4, r0
 8009494:	460d      	mov	r5, r1
 8009496:	da10      	bge.n	80094ba <scalbn+0x52>
 8009498:	a32b      	add	r3, pc, #172	; (adr r3, 8009548 <scalbn+0xe0>)
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	e03a      	b.n	8009516 <scalbn+0xae>
 80094a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80094a4:	428a      	cmp	r2, r1
 80094a6:	d10c      	bne.n	80094c2 <scalbn+0x5a>
 80094a8:	ee10 2a10 	vmov	r2, s0
 80094ac:	4620      	mov	r0, r4
 80094ae:	4629      	mov	r1, r5
 80094b0:	f7f6 ff14 	bl	80002dc <__adddf3>
 80094b4:	4604      	mov	r4, r0
 80094b6:	460d      	mov	r5, r1
 80094b8:	e019      	b.n	80094ee <scalbn+0x86>
 80094ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80094be:	460b      	mov	r3, r1
 80094c0:	3a36      	subs	r2, #54	; 0x36
 80094c2:	4432      	add	r2, r6
 80094c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80094c8:	428a      	cmp	r2, r1
 80094ca:	dd08      	ble.n	80094de <scalbn+0x76>
 80094cc:	2d00      	cmp	r5, #0
 80094ce:	a120      	add	r1, pc, #128	; (adr r1, 8009550 <scalbn+0xe8>)
 80094d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094d4:	da1c      	bge.n	8009510 <scalbn+0xa8>
 80094d6:	a120      	add	r1, pc, #128	; (adr r1, 8009558 <scalbn+0xf0>)
 80094d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094dc:	e018      	b.n	8009510 <scalbn+0xa8>
 80094de:	2a00      	cmp	r2, #0
 80094e0:	dd08      	ble.n	80094f4 <scalbn+0x8c>
 80094e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80094e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80094ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80094ee:	ec45 4b10 	vmov	d0, r4, r5
 80094f2:	bd70      	pop	{r4, r5, r6, pc}
 80094f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80094f8:	da19      	bge.n	800952e <scalbn+0xc6>
 80094fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80094fe:	429e      	cmp	r6, r3
 8009500:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009504:	dd0a      	ble.n	800951c <scalbn+0xb4>
 8009506:	a112      	add	r1, pc, #72	; (adr r1, 8009550 <scalbn+0xe8>)
 8009508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1e2      	bne.n	80094d6 <scalbn+0x6e>
 8009510:	a30f      	add	r3, pc, #60	; (adr r3, 8009550 <scalbn+0xe8>)
 8009512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009516:	f7f7 f897 	bl	8000648 <__aeabi_dmul>
 800951a:	e7cb      	b.n	80094b4 <scalbn+0x4c>
 800951c:	a10a      	add	r1, pc, #40	; (adr r1, 8009548 <scalbn+0xe0>)
 800951e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d0b8      	beq.n	8009498 <scalbn+0x30>
 8009526:	a10e      	add	r1, pc, #56	; (adr r1, 8009560 <scalbn+0xf8>)
 8009528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800952c:	e7b4      	b.n	8009498 <scalbn+0x30>
 800952e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009532:	3236      	adds	r2, #54	; 0x36
 8009534:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009538:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800953c:	4620      	mov	r0, r4
 800953e:	4b0c      	ldr	r3, [pc, #48]	; (8009570 <scalbn+0x108>)
 8009540:	2200      	movs	r2, #0
 8009542:	e7e8      	b.n	8009516 <scalbn+0xae>
 8009544:	f3af 8000 	nop.w
 8009548:	c2f8f359 	.word	0xc2f8f359
 800954c:	01a56e1f 	.word	0x01a56e1f
 8009550:	8800759c 	.word	0x8800759c
 8009554:	7e37e43c 	.word	0x7e37e43c
 8009558:	8800759c 	.word	0x8800759c
 800955c:	fe37e43c 	.word	0xfe37e43c
 8009560:	c2f8f359 	.word	0xc2f8f359
 8009564:	81a56e1f 	.word	0x81a56e1f
 8009568:	43500000 	.word	0x43500000
 800956c:	ffff3cb0 	.word	0xffff3cb0
 8009570:	3c900000 	.word	0x3c900000

08009574 <_init>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	bf00      	nop
 8009578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957a:	bc08      	pop	{r3}
 800957c:	469e      	mov	lr, r3
 800957e:	4770      	bx	lr

08009580 <_fini>:
 8009580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009582:	bf00      	nop
 8009584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009586:	bc08      	pop	{r3}
 8009588:	469e      	mov	lr, r3
 800958a:	4770      	bx	lr
