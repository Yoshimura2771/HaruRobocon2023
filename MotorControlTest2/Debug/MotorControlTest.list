
MotorControlTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007884  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08007a68  08007a68  00017a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d80  08007d80  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08007d80  08007d80  00017d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d88  08007d88  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d88  08007d88  00017d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d8c  08007d8c  00017d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08007d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000098  08007e28  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08007e28  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ea7  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002692  00000000  00000000  00035f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  00038608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  00039888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fac9  00000000  00000000  0003aa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142b7  00000000  00000000  0005a4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd35d  00000000  00000000  0006e7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013bafd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf8  00000000  00000000  0013bb50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000098 	.word	0x20000098
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007a4c 	.word	0x08007a4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000009c 	.word	0x2000009c
 800021c:	08007a4c 	.word	0x08007a4c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b974 	b.w	8000ebc <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	468e      	mov	lr, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14d      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4694      	mov	ip, r2
 8000bfe:	d969      	bls.n	8000cd4 <__udivmoddi4+0xe8>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b152      	cbz	r2, 8000c1c <__udivmoddi4+0x30>
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	f1c2 0120 	rsb	r1, r2, #32
 8000c0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c16:	ea41 0e03 	orr.w	lr, r1, r3
 8000c1a:	4094      	lsls	r4, r2
 8000c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c20:	0c21      	lsrs	r1, r4, #16
 8000c22:	fbbe f6f8 	udiv	r6, lr, r8
 8000c26:	fa1f f78c 	uxth.w	r7, ip
 8000c2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c32:	fb06 f107 	mul.w	r1, r6, r7
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c42:	f080 811f 	bcs.w	8000e84 <__udivmoddi4+0x298>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 811c 	bls.w	8000e84 <__udivmoddi4+0x298>
 8000c4c:	3e02      	subs	r6, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a5b      	subs	r3, r3, r1
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c58:	fb08 3310 	mls	r3, r8, r0, r3
 8000c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c60:	fb00 f707 	mul.w	r7, r0, r7
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	d90a      	bls.n	8000c7e <__udivmoddi4+0x92>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c70:	f080 810a 	bcs.w	8000e88 <__udivmoddi4+0x29c>
 8000c74:	42a7      	cmp	r7, r4
 8000c76:	f240 8107 	bls.w	8000e88 <__udivmoddi4+0x29c>
 8000c7a:	4464      	add	r4, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c82:	1be4      	subs	r4, r4, r7
 8000c84:	2600      	movs	r6, #0
 8000c86:	b11d      	cbz	r5, 8000c90 <__udivmoddi4+0xa4>
 8000c88:	40d4      	lsrs	r4, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d909      	bls.n	8000cae <__udivmoddi4+0xc2>
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	f000 80ef 	beq.w	8000e7e <__udivmoddi4+0x292>
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	fab3 f683 	clz	r6, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d14a      	bne.n	8000d4c <__udivmoddi4+0x160>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xd4>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80f9 	bhi.w	8000eb2 <__udivmoddi4+0x2c6>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	469e      	mov	lr, r3
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e0      	beq.n	8000c90 <__udivmoddi4+0xa4>
 8000cce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cd2:	e7dd      	b.n	8000c90 <__udivmoddi4+0xa4>
 8000cd4:	b902      	cbnz	r2, 8000cd8 <__udivmoddi4+0xec>
 8000cd6:	deff      	udf	#255	; 0xff
 8000cd8:	fab2 f282 	clz	r2, r2
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	f040 8092 	bne.w	8000e06 <__udivmoddi4+0x21a>
 8000ce2:	eba1 010c 	sub.w	r1, r1, ip
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	2601      	movs	r6, #1
 8000cf0:	0c20      	lsrs	r0, r4, #16
 8000cf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfe:	fb0e f003 	mul.w	r0, lr, r3
 8000d02:	4288      	cmp	r0, r1
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x12c>
 8000d06:	eb1c 0101 	adds.w	r1, ip, r1
 8000d0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x12a>
 8000d10:	4288      	cmp	r0, r1
 8000d12:	f200 80cb 	bhi.w	8000eac <__udivmoddi4+0x2c0>
 8000d16:	4643      	mov	r3, r8
 8000d18:	1a09      	subs	r1, r1, r0
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d20:	fb07 1110 	mls	r1, r7, r0, r1
 8000d24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d28:	fb0e fe00 	mul.w	lr, lr, r0
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x156>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x154>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f200 80bb 	bhi.w	8000eb6 <__udivmoddi4+0x2ca>
 8000d40:	4608      	mov	r0, r1
 8000d42:	eba4 040e 	sub.w	r4, r4, lr
 8000d46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d4a:	e79c      	b.n	8000c86 <__udivmoddi4+0x9a>
 8000d4c:	f1c6 0720 	rsb	r7, r6, #32
 8000d50:	40b3      	lsls	r3, r6
 8000d52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d62:	431c      	orrs	r4, r3
 8000d64:	40f9      	lsrs	r1, r7
 8000d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d72:	0c20      	lsrs	r0, r4, #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fb09 1118 	mls	r1, r9, r8, r1
 8000d7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d80:	fb08 f00e 	mul.w	r0, r8, lr
 8000d84:	4288      	cmp	r0, r1
 8000d86:	fa02 f206 	lsl.w	r2, r2, r6
 8000d8a:	d90b      	bls.n	8000da4 <__udivmoddi4+0x1b8>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d94:	f080 8088 	bcs.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	f240 8085 	bls.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000da2:	4461      	add	r1, ip
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dac:	fb09 1110 	mls	r1, r9, r0, r1
 8000db0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	458e      	cmp	lr, r1
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x1e2>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc4:	d26c      	bcs.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dc6:	458e      	cmp	lr, r1
 8000dc8:	d96a      	bls.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dca:	3802      	subs	r0, #2
 8000dcc:	4461      	add	r1, ip
 8000dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd6:	eba1 010e 	sub.w	r1, r1, lr
 8000dda:	42a1      	cmp	r1, r4
 8000ddc:	46c8      	mov	r8, r9
 8000dde:	46a6      	mov	lr, r4
 8000de0:	d356      	bcc.n	8000e90 <__udivmoddi4+0x2a4>
 8000de2:	d053      	beq.n	8000e8c <__udivmoddi4+0x2a0>
 8000de4:	b15d      	cbz	r5, 8000dfe <__udivmoddi4+0x212>
 8000de6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dea:	eb61 010e 	sbc.w	r1, r1, lr
 8000dee:	fa01 f707 	lsl.w	r7, r1, r7
 8000df2:	fa22 f306 	lsr.w	r3, r2, r6
 8000df6:	40f1      	lsrs	r1, r6
 8000df8:	431f      	orrs	r7, r3
 8000dfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfe:	2600      	movs	r6, #0
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	f1c2 0320 	rsb	r3, r2, #32
 8000e0a:	40d8      	lsrs	r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa21 f303 	lsr.w	r3, r1, r3
 8000e14:	4091      	lsls	r1, r2
 8000e16:	4301      	orrs	r1, r0
 8000e18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1c:	fa1f fe8c 	uxth.w	lr, ip
 8000e20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e24:	fb07 3610 	mls	r6, r7, r0, r3
 8000e28:	0c0b      	lsrs	r3, r1, #16
 8000e2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e32:	429e      	cmp	r6, r3
 8000e34:	fa04 f402 	lsl.w	r4, r4, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x260>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e42:	d22f      	bcs.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e44:	429e      	cmp	r6, r3
 8000e46:	d92d      	bls.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1b9b      	subs	r3, r3, r6
 8000e4e:	b289      	uxth	r1, r1
 8000e50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e54:	fb07 3316 	mls	r3, r7, r6, r3
 8000e58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x28a>
 8000e64:	eb1c 0101 	adds.w	r1, ip, r1
 8000e68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e6c:	d216      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d914      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e72:	3e02      	subs	r6, #2
 8000e74:	4461      	add	r1, ip
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e7c:	e738      	b.n	8000cf0 <__udivmoddi4+0x104>
 8000e7e:	462e      	mov	r6, r5
 8000e80:	4628      	mov	r0, r5
 8000e82:	e705      	b.n	8000c90 <__udivmoddi4+0xa4>
 8000e84:	4606      	mov	r6, r0
 8000e86:	e6e3      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6f8      	b.n	8000c7e <__udivmoddi4+0x92>
 8000e8c:	454b      	cmp	r3, r9
 8000e8e:	d2a9      	bcs.n	8000de4 <__udivmoddi4+0x1f8>
 8000e90:	ebb9 0802 	subs.w	r8, r9, r2
 8000e94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e98:	3801      	subs	r0, #1
 8000e9a:	e7a3      	b.n	8000de4 <__udivmoddi4+0x1f8>
 8000e9c:	4646      	mov	r6, r8
 8000e9e:	e7ea      	b.n	8000e76 <__udivmoddi4+0x28a>
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	e794      	b.n	8000dce <__udivmoddi4+0x1e2>
 8000ea4:	4640      	mov	r0, r8
 8000ea6:	e7d1      	b.n	8000e4c <__udivmoddi4+0x260>
 8000ea8:	46d0      	mov	r8, sl
 8000eaa:	e77b      	b.n	8000da4 <__udivmoddi4+0x1b8>
 8000eac:	3b02      	subs	r3, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	e732      	b.n	8000d18 <__udivmoddi4+0x12c>
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e709      	b.n	8000cca <__udivmoddi4+0xde>
 8000eb6:	4464      	add	r4, ip
 8000eb8:	3802      	subs	r0, #2
 8000eba:	e742      	b.n	8000d42 <__udivmoddi4+0x156>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <_write+0x24>)
 8000ed6:	f003 fe6b 	bl	8004bb0 <HAL_UART_Transmit>
	return len;
 8000eda:	687b      	ldr	r3, [r7, #4]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000164 	.word	0x20000164

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eec:	f000 ff37 	bl	8001d5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef0:	f000 f8f2 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef4:	f000 fa80 	bl	80013f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ef8:	f000 fa28 	bl	800134c <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000efc:	f000 f938 	bl	8001170 <MX_FDCAN1_Init>
  MX_TIM3_Init();
 8000f00:	f000 f9d6 	bl	80012b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim3);
 8000f04:	486c      	ldr	r0, [pc, #432]	; (80010b8 <main+0x1d0>)
 8000f06:	f003 f903 	bl	8004110 <HAL_TIM_Base_Start_IT>
	 	  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)==GPIO_PIN_RESET){
	 		 trgMotorVel[0] = 0;
	 		 	 		 trgMotorVel[1] = 0;
	 		 	 		trgMotorVel[2] = 0;
	 	  }
	 	  else */if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_RESET){
 8000f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f002 f8ad 	bl	8003070 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d120      	bne.n	8000f5e <main+0x76>
	 		  trgMotorVel[0] = spd;
 8000f1c:	4b67      	ldr	r3, [pc, #412]	; (80010bc <main+0x1d4>)
 8000f1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f22:	4b67      	ldr	r3, [pc, #412]	; (80010c0 <main+0x1d8>)
 8000f24:	801a      	strh	r2, [r3, #0]
	 		  trgMotorVel[1] = -2*spd;
 8000f26:	4b65      	ldr	r3, [pc, #404]	; (80010bc <main+0x1d4>)
 8000f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	03d2      	lsls	r2, r2, #15
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	4b61      	ldr	r3, [pc, #388]	; (80010c0 <main+0x1d8>)
 8000f3c:	805a      	strh	r2, [r3, #2]
	 		  trgMotorVel[2] = -2*spd;
 8000f3e:	4b5f      	ldr	r3, [pc, #380]	; (80010bc <main+0x1d4>)
 8000f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	461a      	mov	r2, r3
 8000f48:	03d2      	lsls	r2, r2, #15
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	4b5b      	ldr	r3, [pc, #364]	; (80010c0 <main+0x1d8>)
 8000f54:	809a      	strh	r2, [r3, #4]
	 		  printf("L pressed");
 8000f56:	485b      	ldr	r0, [pc, #364]	; (80010c4 <main+0x1dc>)
 8000f58:	f004 fc76 	bl	8005848 <iprintf>
 8000f5c:	e7d5      	b.n	8000f0a <main+0x22>
	 	  }
	 	  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)==GPIO_PIN_RESET){
 8000f5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f66:	f002 f883 	bl	8003070 <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d11e      	bne.n	8000fae <main+0xc6>
	 		 trgMotorVel[0] = -1*spd;
 8000f70:	4b52      	ldr	r3, [pc, #328]	; (80010bc <main+0x1d4>)
 8000f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	425b      	negs	r3, r3
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	4b50      	ldr	r3, [pc, #320]	; (80010c0 <main+0x1d8>)
 8000f80:	801a      	strh	r2, [r3, #0]
			  trgMotorVel[1] = 2*spd;
 8000f82:	4b4e      	ldr	r3, [pc, #312]	; (80010bc <main+0x1d4>)
 8000f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	4b4b      	ldr	r3, [pc, #300]	; (80010c0 <main+0x1d8>)
 8000f92:	805a      	strh	r2, [r3, #2]
			  trgMotorVel[2] = 2*spd;
 8000f94:	4b49      	ldr	r3, [pc, #292]	; (80010bc <main+0x1d4>)
 8000f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	4b47      	ldr	r3, [pc, #284]	; (80010c0 <main+0x1d8>)
 8000fa4:	809a      	strh	r2, [r3, #4]
			  printf("R pressed");
 8000fa6:	4848      	ldr	r0, [pc, #288]	; (80010c8 <main+0x1e0>)
 8000fa8:	f004 fc4e 	bl	8005848 <iprintf>
 8000fac:	e7ad      	b.n	8000f0a <main+0x22>
	 	  }
	 	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_RESET){
 8000fae:	2120      	movs	r1, #32
 8000fb0:	4846      	ldr	r0, [pc, #280]	; (80010cc <main+0x1e4>)
 8000fb2:	f002 f85d 	bl	8003070 <HAL_GPIO_ReadPin>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d130      	bne.n	800101e <main+0x136>
	 		 trgMotorVel[0] = 0;
 8000fbc:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <main+0x1d8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	801a      	strh	r2, [r3, #0]
			  trgMotorVel[1] = (2*sqrt(3)/3)*spd;
 8000fc2:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <main+0x1d4>)
 8000fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff facb 	bl	8000564 <__aeabi_i2d>
 8000fce:	a336      	add	r3, pc, #216	; (adr r3, 80010a8 <main+0x1c0>)
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	f7ff fb30 	bl	8000638 <__aeabi_dmul>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fdc4 	bl	8000b6c <__aeabi_d2iz>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <main+0x1d8>)
 8000fea:	805a      	strh	r2, [r3, #2]
			  trgMotorVel[2] = -(2*sqrt(3)/3)*spd;
 8000fec:	4b33      	ldr	r3, [pc, #204]	; (80010bc <main+0x1d4>)
 8000fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fab6 	bl	8000564 <__aeabi_i2d>
 8000ff8:	a32d      	add	r3, pc, #180	; (adr r3, 80010b0 <main+0x1c8>)
 8000ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffe:	f7ff fb1b 	bl	8000638 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff fdaf 	bl	8000b6c <__aeabi_d2iz>
 800100e:	4603      	mov	r3, r0
 8001010:	b21a      	sxth	r2, r3
 8001012:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <main+0x1d8>)
 8001014:	809a      	strh	r2, [r3, #4]
			  printf("BACK pressed");
 8001016:	482e      	ldr	r0, [pc, #184]	; (80010d0 <main+0x1e8>)
 8001018:	f004 fc16 	bl	8005848 <iprintf>
 800101c:	e775      	b.n	8000f0a <main+0x22>
	 	  }
	 	  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==GPIO_PIN_RESET){
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f002 f823 	bl	8003070 <HAL_GPIO_ReadPin>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d130      	bne.n	8001092 <main+0x1aa>
	 		 trgMotorVel[0] = 0;
 8001030:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <main+0x1d8>)
 8001032:	2200      	movs	r2, #0
 8001034:	801a      	strh	r2, [r3, #0]
			  trgMotorVel[1] = -(2*sqrt(3)/3)*spd;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <main+0x1d4>)
 8001038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa91 	bl	8000564 <__aeabi_i2d>
 8001042:	a31b      	add	r3, pc, #108	; (adr r3, 80010b0 <main+0x1c8>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff faf6 	bl	8000638 <__aeabi_dmul>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fd8a 	bl	8000b6c <__aeabi_d2iz>
 8001058:	4603      	mov	r3, r0
 800105a:	b21a      	sxth	r2, r3
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <main+0x1d8>)
 800105e:	805a      	strh	r2, [r3, #2]
			  trgMotorVel[2] = (2*sqrt(3)/3)*spd;
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <main+0x1d4>)
 8001062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fa7c 	bl	8000564 <__aeabi_i2d>
 800106c:	a30e      	add	r3, pc, #56	; (adr r3, 80010a8 <main+0x1c0>)
 800106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001072:	f7ff fae1 	bl	8000638 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f7ff fd75 	bl	8000b6c <__aeabi_d2iz>
 8001082:	4603      	mov	r3, r0
 8001084:	b21a      	sxth	r2, r3
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <main+0x1d8>)
 8001088:	809a      	strh	r2, [r3, #4]
			  printf("FOR pressed");
 800108a:	4812      	ldr	r0, [pc, #72]	; (80010d4 <main+0x1ec>)
 800108c:	f004 fbdc 	bl	8005848 <iprintf>
 8001090:	e73b      	b.n	8000f0a <main+0x22>
	 	  }
	 	  else{
	 		  trgMotorVel[0] = 0;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <main+0x1d8>)
 8001094:	2200      	movs	r2, #0
 8001096:	801a      	strh	r2, [r3, #0]
	 		 trgMotorVel[1] = 0;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <main+0x1d8>)
 800109a:	2200      	movs	r2, #0
 800109c:	805a      	strh	r2, [r3, #2]
	 		trgMotorVel[2] = 0;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <main+0x1d8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	809a      	strh	r2, [r3, #4]
	 	  else */if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_RESET){
 80010a4:	e731      	b.n	8000f0a <main+0x22>
 80010a6:	bf00      	nop
 80010a8:	4590331c 	.word	0x4590331c
 80010ac:	3ff279a7 	.word	0x3ff279a7
 80010b0:	4590331c 	.word	0x4590331c
 80010b4:	bff279a7 	.word	0xbff279a7
 80010b8:	20000118 	.word	0x20000118
 80010bc:	20000002 	.word	0x20000002
 80010c0:	20000228 	.word	0x20000228
 80010c4:	08007a68 	.word	0x08007a68
 80010c8:	08007a74 	.word	0x08007a74
 80010cc:	48000400 	.word	0x48000400
 80010d0:	08007a80 	.word	0x08007a80
 80010d4:	08007a90 	.word	0x08007a90

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	; 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	2238      	movs	r2, #56	; 0x38
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f004 fba6 	bl	8005838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010fe:	f001 ffe7 	bl	80030d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110c:	2340      	movs	r3, #64	; 0x40
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001110:	2302      	movs	r3, #2
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001114:	2302      	movs	r3, #2
 8001116:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001118:	2301      	movs	r3, #1
 800111a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 800111c:	230a      	movs	r3, #10
 800111e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001120:	2302      	movs	r3, #2
 8001122:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001124:	2302      	movs	r3, #2
 8001126:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001128:	2302      	movs	r3, #2
 800112a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112c:	f107 0318 	add.w	r3, r7, #24
 8001130:	4618      	mov	r0, r3
 8001132:	f002 f871 	bl	8003218 <HAL_RCC_OscConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800113c:	f000 fc04 	bl	8001948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001140:	230f      	movs	r3, #15
 8001142:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001144:	2303      	movs	r3, #3
 8001146:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2102      	movs	r1, #2
 8001158:	4618      	mov	r0, r3
 800115a:	f002 fb75 	bl	8003848 <HAL_RCC_ClockConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001164:	f000 fbf0 	bl	8001948 <Error_Handler>
  }
}
 8001168:	bf00      	nop
 800116a:	3750      	adds	r7, #80	; 0x50
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001176:	4b4b      	ldr	r3, [pc, #300]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 8001178:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <MX_FDCAN1_Init+0x138>)
 800117a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800117c:	4b49      	ldr	r3, [pc, #292]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001182:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001188:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800118e:	4b45      	ldr	r3, [pc, #276]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 8001190:	2200      	movs	r2, #0
 8001192:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001194:	4b43      	ldr	r3, [pc, #268]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 8001196:	2200      	movs	r2, #0
 8001198:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800119a:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 800119c:	2200      	movs	r2, #0
 800119e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 80011a0:	4b40      	ldr	r3, [pc, #256]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 80011a2:	2205      	movs	r2, #5
 80011a4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 80011a6:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 80011a8:	2210      	movs	r2, #16
 80011aa:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80011ac:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 80011ae:	220d      	movs	r2, #13
 80011b0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80011b2:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 80011b4:	2202      	movs	r2, #2
 80011b6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80011b8:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80011be:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 80011c0:	2204      	movs	r2, #4
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80011c4:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 80011c6:	2205      	movs	r2, #5
 80011c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80011ca:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 80011cc:	2204      	movs	r2, #4
 80011ce:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80011d6:	4b33      	ldr	r3, [pc, #204]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 80011d8:	2200      	movs	r2, #0
 80011da:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80011dc:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 80011de:	2200      	movs	r2, #0
 80011e0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80011e2:	4830      	ldr	r0, [pc, #192]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 80011e4:	f000 ff3c 	bl	8002060 <HAL_FDCAN_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80011ee:	f000 fbab 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80011fa:	2302      	movs	r3, #2
 80011fc:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80011fe:	2301      	movs	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_MOTORS;
 8001202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001206:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FC;
 8001208:	f240 73fc 	movw	r3, #2044	; 0x7fc
 800120c:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 800120e:	463b      	mov	r3, r7
 8001210:	4619      	mov	r1, r3
 8001212:	4824      	ldr	r0, [pc, #144]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 8001214:	f001 f87e 	bl	8002314 <HAL_FDCAN_ConfigFilter>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_FDCAN1_Init+0xb2>
		Error_Handler();
 800121e:	f000 fb93 	bl	8001948 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8001222:	2300      	movs	r3, #0
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2300      	movs	r3, #0
 8001228:	2202      	movs	r2, #2
 800122a:	2102      	movs	r1, #2
 800122c:	481d      	ldr	r0, [pc, #116]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 800122e:	f001 f8cb 	bl	80023c8 <HAL_FDCAN_ConfigGlobalFilter>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_FDCAN1_Init+0xcc>
		Error_Handler();
 8001238:	f000 fb86 	bl	8001948 <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 800123c:	4819      	ldr	r0, [pc, #100]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 800123e:	f001 f8f4 	bl	800242a <HAL_FDCAN_Start>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_FDCAN1_Init+0xdc>
		Error_Handler();
 8001248:	f000 fb7e 	bl	8001948 <Error_Handler>
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800124c:	2200      	movs	r2, #0
 800124e:	2101      	movs	r1, #1
 8001250:	4814      	ldr	r0, [pc, #80]	; (80012a4 <MX_FDCAN1_Init+0x134>)
 8001252:	f001 fa31 	bl	80026b8 <HAL_FDCAN_ActivateNotification>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_FDCAN1_Init+0xf0>
	  Error_Handler();
 800125c:	f000 fb74 	bl	8001948 <Error_Handler>
	}

	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_FDCAN1_Init+0x13c>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_FDCAN1_Init+0x13c>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_FDCAN1_Init+0x13c>)
 800126e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001272:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001274:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <MX_FDCAN1_Init+0x13c>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_FDCAN1_Init+0x13c>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <MX_FDCAN1_Init+0x13c>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_FDCAN1_Init+0x13c>)
 8001288:	2200      	movs	r2, #0
 800128a:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <MX_FDCAN1_Init+0x13c>)
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
	TxHeader.Identifier = CANID_MOTORS;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_FDCAN1_Init+0x13c>)
 8001294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001298:	601a      	str	r2, [r3, #0]

	//printf("CAN initialized\n");

  /* USER CODE END FDCAN1_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200000b4 	.word	0x200000b4
 80012a8:	40006400 	.word	0x40006400
 80012ac:	200001f4 	.word	0x200001f4

080012b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <MX_TIM3_Init+0x94>)
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <MX_TIM3_Init+0x98>)
 80012d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_TIM3_Init+0x94>)
 80012d6:	f240 321f 	movw	r2, #799	; 0x31f
 80012da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MX_TIM3_Init+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_TIM3_Init+0x94>)
 80012e4:	2263      	movs	r2, #99	; 0x63
 80012e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <MX_TIM3_Init+0x94>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_TIM3_Init+0x94>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012f4:	4813      	ldr	r0, [pc, #76]	; (8001344 <MX_TIM3_Init+0x94>)
 80012f6:	f002 feb3 	bl	8004060 <HAL_TIM_Base_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001300:	f000 fb22 	bl	8001948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001308:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <MX_TIM3_Init+0x94>)
 8001312:	f003 f8e7 	bl	80044e4 <HAL_TIM_ConfigClockSource>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800131c:	f000 fb14 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_TIM3_Init+0x94>)
 800132e:	f003 fb27 	bl	8004980 <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001338:	f000 fb06 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000118 	.word	0x20000118
 8001348:	40000400 	.word	0x40000400

0800134c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <MX_USART2_UART_Init+0xa0>)
 8001352:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <MX_USART2_UART_Init+0xa4>)
 8001354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200*4;
 8001356:	4b25      	ldr	r3, [pc, #148]	; (80013ec <MX_USART2_UART_Init+0xa0>)
 8001358:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 800135c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b23      	ldr	r3, [pc, #140]	; (80013ec <MX_USART2_UART_Init+0xa0>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_USART2_UART_Init+0xa0>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <MX_USART2_UART_Init+0xa0>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_USART2_UART_Init+0xa0>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_USART2_UART_Init+0xa0>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <MX_USART2_UART_Init+0xa0>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_USART2_UART_Init+0xa0>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_USART2_UART_Init+0xa0>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_USART2_UART_Init+0xa0>)
 8001390:	2200      	movs	r2, #0
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001394:	4815      	ldr	r0, [pc, #84]	; (80013ec <MX_USART2_UART_Init+0xa0>)
 8001396:	f003 fbbb 	bl	8004b10 <HAL_UART_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013a0:	f000 fad2 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a4:	2100      	movs	r1, #0
 80013a6:	4811      	ldr	r0, [pc, #68]	; (80013ec <MX_USART2_UART_Init+0xa0>)
 80013a8:	f004 f952 	bl	8005650 <HAL_UARTEx_SetTxFifoThreshold>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013b2:	f000 fac9 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b6:	2100      	movs	r1, #0
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <MX_USART2_UART_Init+0xa0>)
 80013ba:	f004 f987 	bl	80056cc <HAL_UARTEx_SetRxFifoThreshold>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013c4:	f000 fac0 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013c8:	4808      	ldr	r0, [pc, #32]	; (80013ec <MX_USART2_UART_Init+0xa0>)
 80013ca:	f004 f908 	bl	80055de <HAL_UARTEx_DisableFifoMode>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013d4:	f000 fab8 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  setbuf(stdout, NULL);
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_USART2_UART_Init+0xa8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 fa49 	bl	8005878 <setbuf>

  /* USER CODE END USART2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000164 	.word	0x20000164
 80013f0:	40004400 	.word	0x40004400
 80013f4:	20000034 	.word	0x20000034

080013f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <MX_GPIO_Init+0xac>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a24      	ldr	r2, [pc, #144]	; (80014a4 <MX_GPIO_Init+0xac>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <MX_GPIO_Init+0xac>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_GPIO_Init+0xac>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <MX_GPIO_Init+0xac>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_GPIO_Init+0xac>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001444:	4818      	ldr	r0, [pc, #96]	; (80014a8 <MX_GPIO_Init+0xb0>)
 8001446:	f001 fe2b 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800144a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800144e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001454:	2301      	movs	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	4619      	mov	r1, r3
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f001 fc83 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001466:	2330      	movs	r3, #48	; 0x30
 8001468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146e:	2301      	movs	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	4619      	mov	r1, r3
 8001478:	480b      	ldr	r0, [pc, #44]	; (80014a8 <MX_GPIO_Init+0xb0>)
 800147a:	f001 fc77 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800147e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001482:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_GPIO_Init+0xb0>)
 8001498:	f001 fc68 	bl	8002d6c <HAL_GPIO_Init>

}
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000
 80014a8:	48000400 	.word	0x48000400

080014ac <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08e      	sub	sp, #56	; 0x38
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	//printf("Get message\n");
	if (hfdcan == &hfdcan1) {
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <HAL_FDCAN_RxFifo0Callback+0x78>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d12d      	bne.n	800151a <HAL_FDCAN_RxFifo0Callback+0x6e>
		if(Flag==0)Flag=1;
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <HAL_FDCAN_RxFifo0Callback+0x20>
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	f107 0210 	add.w	r2, r7, #16
 80014d4:	2140      	movs	r1, #64	; 0x40
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f001 f814 	bl	8002504 <HAL_FDCAN_GetRxMessage>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_FDCAN_RxFifo0Callback+0x3a>
			Error_Handler();
 80014e2:	f000 fa31 	bl	8001948 <Error_Handler>
		}
		actMotorVel[RxHeader.Identifier - 0x201] = RxData[2]<<8 | RxData[3];
 80014e6:	7abb      	ldrb	r3, [r7, #10]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	b219      	sxth	r1, r3
 80014ec:	7afb      	ldrb	r3, [r7, #11]
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80014f6:	430a      	orrs	r2, r1
 80014f8:	b211      	sxth	r1, r2
 80014fa:	4a0c      	ldr	r2, [pc, #48]	; (800152c <HAL_FDCAN_RxFifo0Callback+0x80>)
 80014fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		printf("Motor%x:%d\r\n", RxHeader.Identifier- 0x201, actMotorVel[RxHeader.Identifier- 0x201]); //index is motorID-201 (0x201 - 0x201 =0)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	f2a3 2101 	subw	r1, r3, #513	; 0x201
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800150c:	4a07      	ldr	r2, [pc, #28]	; (800152c <HAL_FDCAN_RxFifo0Callback+0x80>)
 800150e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001512:	461a      	mov	r2, r3
 8001514:	4806      	ldr	r0, [pc, #24]	; (8001530 <HAL_FDCAN_RxFifo0Callback+0x84>)
 8001516:	f004 f997 	bl	8005848 <iprintf>
		//Motor%x:RxHeader.Identifier- 0x201,
	}
}
 800151a:	bf00      	nop
 800151c:	3738      	adds	r7, #56	; 0x38
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200000b4 	.word	0x200000b4
 8001528:	20000260 	.word	0x20000260
 800152c:	20000220 	.word	0x20000220
 8001530:	08007a9c 	.word	0x08007a9c

08001534 <CAN_Motordrive>:

void CAN_Motordrive(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0

	uint8_t i;
	uint8_t TxData[8];

	for(i=0; i<3; i++){
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	e034      	b.n	80015aa <CAN_Motordrive+0x76>
		if(Output[i]<-16384)Output[i]=-16384;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	4a23      	ldr	r2, [pc, #140]	; (80015d0 <CAN_Motordrive+0x9c>)
 8001544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001548:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 800154c:	da05      	bge.n	800155a <CAN_Motordrive+0x26>
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <CAN_Motordrive+0x9c>)
 8001552:	4920      	ldr	r1, [pc, #128]	; (80015d4 <CAN_Motordrive+0xa0>)
 8001554:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001558:	e00c      	b.n	8001574 <CAN_Motordrive+0x40>
		else if(Output[i]>16384)Output[i]=16384;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	4a1c      	ldr	r2, [pc, #112]	; (80015d0 <CAN_Motordrive+0x9c>)
 800155e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001566:	dd05      	ble.n	8001574 <CAN_Motordrive+0x40>
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <CAN_Motordrive+0x9c>)
 800156c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001570:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		TxData[i*2]=Output[i]>>8;//上位ビ????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <CAN_Motordrive+0x9c>)
 8001578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157c:	121a      	asrs	r2, r3, #8
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	3310      	adds	r3, #16
 8001586:	443b      	add	r3, r7
 8001588:	f803 2c0c 	strb.w	r2, [r3, #-12]
		TxData[i*2+1]=Output[i]&0x00FF;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <CAN_Motordrive+0x9c>)
 8001590:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	3301      	adds	r3, #1
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	3310      	adds	r3, #16
 800159e:	443b      	add	r3, r7
 80015a0:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i=0; i<3; i++){
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	3301      	adds	r3, #1
 80015a8:	73fb      	strb	r3, [r7, #15]
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d9c7      	bls.n	8001540 <CAN_Motordrive+0xc>
	}



	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	461a      	mov	r2, r3
 80015b4:	4908      	ldr	r1, [pc, #32]	; (80015d8 <CAN_Motordrive+0xa4>)
 80015b6:	4809      	ldr	r0, [pc, #36]	; (80015dc <CAN_Motordrive+0xa8>)
 80015b8:	f000 ff5f 	bl	800247a <HAL_FDCAN_AddMessageToTxFifoQ>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <CAN_Motordrive+0x92>
		/* Transmission request Error */
		Error_Handler();
 80015c2:	f000 f9c1 	bl	8001948 <Error_Handler>
	}
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000248 	.word	0x20000248
 80015d4:	ffffc000 	.word	0xffffc000
 80015d8:	200001f4 	.word	0x200001f4
 80015dc:	200000b4 	.word	0x200000b4

080015e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]



	if(htim==&htim3){
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4ac5      	ldr	r2, [pc, #788]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	f040 8175 	bne.w	80018dc <HAL_TIM_PeriodElapsedCallback+0x2fc>
		uint8_t i;
		static uint32_t Count=0;
		RobotVel[0] = 3000*cos((double)Count/1000);
 80015f2:	4bc4      	ldr	r3, [pc, #784]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffa4 	bl	8000544 <__aeabi_ui2d>
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	4bc1      	ldr	r3, [pc, #772]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001602:	f7ff f943 	bl	800088c <__aeabi_ddiv>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	ec43 2b17 	vmov	d7, r2, r3
 800160e:	eeb0 0a47 	vmov.f32	s0, s14
 8001612:	eef0 0a67 	vmov.f32	s1, s15
 8001616:	f005 f97b 	bl	8006910 <cos>
 800161a:	ec51 0b10 	vmov	r0, r1, d0
 800161e:	a3b4      	add	r3, pc, #720	; (adr r3, 80018f0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7ff f808 	bl	8000638 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff fa9c 	bl	8000b6c <__aeabi_d2iz>
 8001634:	4603      	mov	r3, r0
 8001636:	b21a      	sxth	r2, r3
 8001638:	4bb4      	ldr	r3, [pc, #720]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800163a:	801a      	strh	r2, [r3, #0]
		RobotVel[1] = 3000*sin((double)Count/1000);
 800163c:	4bb1      	ldr	r3, [pc, #708]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff7f 	bl	8000544 <__aeabi_ui2d>
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4baf      	ldr	r3, [pc, #700]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800164c:	f7ff f91e 	bl	800088c <__aeabi_ddiv>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	ec43 2b17 	vmov	d7, r2, r3
 8001658:	eeb0 0a47 	vmov.f32	s0, s14
 800165c:	eef0 0a67 	vmov.f32	s1, s15
 8001660:	f005 f9aa 	bl	80069b8 <sin>
 8001664:	ec51 0b10 	vmov	r0, r1, d0
 8001668:	a3a1      	add	r3, pc, #644	; (adr r3, 80018f0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7fe ffe3 	bl	8000638 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff fa77 	bl	8000b6c <__aeabi_d2iz>
 800167e:	4603      	mov	r3, r0
 8001680:	b21a      	sxth	r2, r3
 8001682:	4ba2      	ldr	r3, [pc, #648]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001684:	805a      	strh	r2, [r3, #2]
		RobotVel[2] = 0;
 8001686:	4ba1      	ldr	r3, [pc, #644]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001688:	2200      	movs	r2, #0
 800168a:	809a      	strh	r2, [r3, #4]

		trgMotorVel[0] = (RobotVel[2] + 2*RobotVel[0])/3;
 800168c:	4b9f      	ldr	r3, [pc, #636]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800168e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001692:	461a      	mov	r2, r3
 8001694:	4b9d      	ldr	r3, [pc, #628]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	4a9c      	ldr	r2, [pc, #624]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016a0:	fb82 1203 	smull	r1, r2, r2, r3
 80016a4:	17db      	asrs	r3, r3, #31
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	4b9a      	ldr	r3, [pc, #616]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80016ac:	801a      	strh	r2, [r3, #0]
		trgMotorVel[1] = (RobotVel[2] - RobotVel[0] -sqrt(3)*RobotVel[1])/3;
 80016ae:	4b97      	ldr	r3, [pc, #604]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b95      	ldr	r3, [pc, #596]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff50 	bl	8000564 <__aeabi_i2d>
 80016c4:	4604      	mov	r4, r0
 80016c6:	460d      	mov	r5, r1
 80016c8:	4b90      	ldr	r3, [pc, #576]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe ff48 	bl	8000564 <__aeabi_i2d>
 80016d4:	a388      	add	r3, pc, #544	; (adr r3, 80018f8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80016d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016da:	f7fe ffad 	bl	8000638 <__aeabi_dmul>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4620      	mov	r0, r4
 80016e4:	4629      	mov	r1, r5
 80016e6:	f7fe fdef 	bl	80002c8 <__aeabi_dsub>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b88      	ldr	r3, [pc, #544]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80016f8:	f7ff f8c8 	bl	800088c <__aeabi_ddiv>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff fa32 	bl	8000b6c <__aeabi_d2iz>
 8001708:	4603      	mov	r3, r0
 800170a:	b21a      	sxth	r2, r3
 800170c:	4b81      	ldr	r3, [pc, #516]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800170e:	805a      	strh	r2, [r3, #2]
		trgMotorVel[2] = (RobotVel[2] - RobotVel[0] +sqrt(3)*RobotVel[1])/3;
 8001710:	4b7e      	ldr	r3, [pc, #504]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001712:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001716:	461a      	mov	r2, r3
 8001718:	4b7c      	ldr	r3, [pc, #496]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800171a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff1f 	bl	8000564 <__aeabi_i2d>
 8001726:	4604      	mov	r4, r0
 8001728:	460d      	mov	r5, r1
 800172a:	4b78      	ldr	r3, [pc, #480]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800172c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe ff17 	bl	8000564 <__aeabi_i2d>
 8001736:	a370      	add	r3, pc, #448	; (adr r3, 80018f8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7fe ff7c 	bl	8000638 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4620      	mov	r0, r4
 8001746:	4629      	mov	r1, r5
 8001748:	f7fe fdc0 	bl	80002cc <__adddf3>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4b6f      	ldr	r3, [pc, #444]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800175a:	f7ff f897 	bl	800088c <__aeabi_ddiv>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff fa01 	bl	8000b6c <__aeabi_d2iz>
 800176a:	4603      	mov	r3, r0
 800176c:	b21a      	sxth	r2, r3
 800176e:	4b69      	ldr	r3, [pc, #420]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001770:	809a      	strh	r2, [r3, #4]
		Count++;
 8001772:	4b64      	ldr	r3, [pc, #400]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	4a62      	ldr	r2, [pc, #392]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800177a:	6013      	str	r3, [r2, #0]

		for(i=0; i<3; i++){
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	e0a6      	b.n	80018d0 <HAL_TIM_PeriodElapsedCallback+0x2f0>

			//trgMotorVel[i]=500;
			error[i] = actMotorVel[i] - trgMotorVel[i];
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	4a65      	ldr	r2, [pc, #404]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001786:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800178a:	4619      	mov	r1, r3
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	4a61      	ldr	r2, [pc, #388]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001790:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001794:	461a      	mov	r2, r3
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	1a8a      	subs	r2, r1, r2
 800179a:	4961      	ldr	r1, [pc, #388]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800179c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			integral[i] += (error[i] + prverror[i])/(2*frq);
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	4a60      	ldr	r2, [pc, #384]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80017a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	4a5d      	ldr	r2, [pc, #372]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80017ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	485d      	ldr	r0, [pc, #372]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80017b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80017b8:	441a      	add	r2, r3
 80017ba:	4b5c      	ldr	r3, [pc, #368]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fb92 f2f3 	sdiv	r2, r2, r3
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	440a      	add	r2, r1
 80017c8:	4956      	ldr	r1, [pc, #344]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			integral[i] *= integral[i]*Flag;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	4a54      	ldr	r2, [pc, #336]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80017d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	4952      	ldr	r1, [pc, #328]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80017da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017de:	4954      	ldr	r1, [pc, #336]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80017e0:	7809      	ldrb	r1, [r1, #0]
 80017e2:	fb03 f101 	mul.w	r1, r3, r1
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	fb01 f202 	mul.w	r2, r1, r2
 80017ec:	494d      	ldr	r1, [pc, #308]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(integral[i]>10)integral[i]= 10;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	4a4b      	ldr	r2, [pc, #300]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80017f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fa:	2b0a      	cmp	r3, #10
 80017fc:	dd05      	ble.n	800180a <HAL_TIM_PeriodElapsedCallback+0x22a>
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	4a48      	ldr	r2, [pc, #288]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001802:	210a      	movs	r1, #10
 8001804:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001808:	e00c      	b.n	8001824 <HAL_TIM_PeriodElapsedCallback+0x244>
			else if(integral[i]<-10) integral[i]=-10;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	4a45      	ldr	r2, [pc, #276]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800180e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001812:	f113 0f0a 	cmn.w	r3, #10
 8001816:	da05      	bge.n	8001824 <HAL_TIM_PeriodElapsedCallback+0x244>
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	4a42      	ldr	r2, [pc, #264]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800181c:	f06f 0109 	mvn.w	r1, #9
 8001820:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			Output[i]=/*trgMotorVel[i]*/ - (error[i]*Kp[i] + (error[i] - prverror[i])*Kd[i]*frq+integral[i]*Ki[i]);
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	4a3e      	ldr	r2, [pc, #248]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	4a3f      	ldr	r2, [pc, #252]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	4a36      	ldr	r2, [pc, #216]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001848:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	4936      	ldr	r1, [pc, #216]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001850:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	4a35      	ldr	r2, [pc, #212]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800186e:	4b2f      	ldr	r3, [pc, #188]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	4a27      	ldr	r2, [pc, #156]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	4a29      	ldr	r2, [pc, #164]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a6:	eef1 7a67 	vneg.f32	s15, s15
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018b0:	ee17 1a90 	vmov	r1, s15
 80018b4:	4a22      	ldr	r2, [pc, #136]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80018b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			prverror[i]=error[i];
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	4918      	ldr	r1, [pc, #96]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80018c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80018c4:	4918      	ldr	r1, [pc, #96]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i=0; i<3; i++){
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	3301      	adds	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	f67f af55 	bls.w	8001782 <HAL_TIM_PeriodElapsedCallback+0x1a2>

			}
		}*/
		//trgMotorVel[0] = 1000; trgMotorVel[1] = 1000; trgMotorVel[2] = 1000;

		CAN_Motordrive();
 80018d8:	f7ff fe2c 	bl	8001534 <CAN_Motordrive>
	}


	printf("Output: %d\r\n", Output[1]);
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4619      	mov	r1, r3
 80018e2:	4818      	ldr	r0, [pc, #96]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80018e4:	f003 ffb0 	bl	8005848 <iprintf>
	//printf("Error: %d\r\n", error[1]);


}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bdb0      	pop	{r4, r5, r7, pc}
 80018f0:	00000000 	.word	0x00000000
 80018f4:	40a77000 	.word	0x40a77000
 80018f8:	e8584caa 	.word	0xe8584caa
 80018fc:	3ffbb67a 	.word	0x3ffbb67a
 8001900:	20000118 	.word	0x20000118
 8001904:	20000264 	.word	0x20000264
 8001908:	408f4000 	.word	0x408f4000
 800190c:	20000218 	.word	0x20000218
 8001910:	55555556 	.word	0x55555556
 8001914:	20000228 	.word	0x20000228
 8001918:	40080000 	.word	0x40080000
 800191c:	20000220 	.word	0x20000220
 8001920:	20000230 	.word	0x20000230
 8001924:	20000254 	.word	0x20000254
 8001928:	2000023c 	.word	0x2000023c
 800192c:	20000000 	.word	0x20000000
 8001930:	20000260 	.word	0x20000260
 8001934:	20000004 	.word	0x20000004
 8001938:	2000001c 	.word	0x2000001c
 800193c:	20000010 	.word	0x20000010
 8001940:	20000248 	.word	0x20000248
 8001944:	08007aac 	.word	0x08007aac

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001950:	e7fe      	b.n	8001950 <Error_Handler+0x8>
	...

08001954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_MspInit+0x44>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <HAL_MspInit+0x44>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6613      	str	r3, [r2, #96]	; 0x60
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_MspInit+0x44>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_MspInit+0x44>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <HAL_MspInit+0x44>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	6593      	str	r3, [r2, #88]	; 0x58
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_MspInit+0x44>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000

0800199c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b09a      	sub	sp, #104	; 0x68
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	2244      	movs	r2, #68	; 0x44
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f003 ff3b 	bl	8005838 <memset>
  if(hfdcan->Instance==FDCAN1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a24      	ldr	r2, [pc, #144]	; (8001a58 <HAL_FDCAN_MspInit+0xbc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d141      	bne.n	8001a50 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80019cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80019d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019d6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 f94f 	bl	8003c80 <HAL_RCCEx_PeriphCLKConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80019e8:	f7ff ffae 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_FDCAN_MspInit+0xc0>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f0:	4a1a      	ldr	r2, [pc, #104]	; (8001a5c <HAL_FDCAN_MspInit+0xc0>)
 80019f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019f6:	6593      	str	r3, [r2, #88]	; 0x58
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_FDCAN_MspInit+0xc0>)
 80019fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_FDCAN_MspInit+0xc0>)
 8001a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a08:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <HAL_FDCAN_MspInit+0xc0>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_FDCAN_MspInit+0xc0>)
 8001a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a20:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001a2e:	2309      	movs	r3, #9
 8001a30:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3c:	f001 f996 	bl	8002d6c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2101      	movs	r1, #1
 8001a44:	2015      	movs	r0, #21
 8001a46:	f000 fad6 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001a4a:	2015      	movs	r0, #21
 8001a4c:	f000 faed 	bl	800202a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001a50:	bf00      	nop
 8001a52:	3768      	adds	r7, #104	; 0x68
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40006400 	.word	0x40006400
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_TIM_Base_MspInit+0x44>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d113      	bne.n	8001a9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_TIM_Base_MspInit+0x48>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	4a0c      	ldr	r2, [pc, #48]	; (8001aa8 <HAL_TIM_Base_MspInit+0x48>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_TIM_Base_MspInit+0x48>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	201d      	movs	r0, #29
 8001a90:	f000 fab1 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a94:	201d      	movs	r0, #29
 8001a96:	f000 fac8 	bl	800202a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40000400 	.word	0x40000400
 8001aa8:	40021000 	.word	0x40021000

08001aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b09a      	sub	sp, #104	; 0x68
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	2244      	movs	r2, #68	; 0x44
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 feb3 	bl	8005838 <memset>
  if(huart->Instance==USART2)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <HAL_UART_MspInit+0xa8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d136      	bne.n	8001b4a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001adc:	2302      	movs	r3, #2
 8001ade:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae4:	f107 0310 	add.w	r3, r7, #16
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 f8c9 	bl	8003c80 <HAL_RCCEx_PeriphCLKConfig>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001af4:	f7ff ff28 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_UART_MspInit+0xac>)
 8001afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afc:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <HAL_UART_MspInit+0xac>)
 8001afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b02:	6593      	str	r3, [r2, #88]	; 0x58
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_UART_MspInit+0xac>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_UART_MspInit+0xac>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b14:	4a10      	ldr	r2, [pc, #64]	; (8001b58 <HAL_UART_MspInit+0xac>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_UART_MspInit+0xac>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001b28:	230c      	movs	r3, #12
 8001b2a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b38:	2307      	movs	r3, #7
 8001b3a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b40:	4619      	mov	r1, r3
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b46:	f001 f911 	bl	8002d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3768      	adds	r7, #104	; 0x68
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40004400 	.word	0x40004400
 8001b58:	40021000 	.word	0x40021000

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <NMI_Handler+0x4>

08001b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <MemManage_Handler+0x4>

08001b6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba8:	f000 f92c 	bl	8001e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <FDCAN1_IT0_IRQHandler+0x10>)
 8001bb6:	f000 fe65 	bl	8002884 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200000b4 	.word	0x200000b4

08001bc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <TIM3_IRQHandler+0x10>)
 8001bca:	f002 fb0b 	bl	80041e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000118 	.word	0x20000118

08001bd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e00a      	b.n	8001c00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bea:	f3af 8000 	nop.w
 8001bee:	4601      	mov	r1, r0
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	60ba      	str	r2, [r7, #8]
 8001bf6:	b2ca      	uxtb	r2, r1
 8001bf8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	dbf0      	blt.n	8001bea <_read+0x12>
	}

return len;
 8001c08:	687b      	ldr	r3, [r7, #4]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
	return -1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c3a:	605a      	str	r2, [r3, #4]
	return 0;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <_isatty>:

int _isatty(int file)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
	return 1;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
	return 0;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c84:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <_sbrk+0x5c>)
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <_sbrk+0x60>)
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <_sbrk+0x64>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <_sbrk+0x64>)
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <_sbrk+0x68>)
 8001c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d207      	bcs.n	8001cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cac:	f003 fd9a 	bl	80057e4 <__errno>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cba:	e009      	b.n	8001cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <_sbrk+0x64>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <_sbrk+0x64>)
 8001ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cce:	68fb      	ldr	r3, [r7, #12]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20008000 	.word	0x20008000
 8001cdc:	00000400 	.word	0x00000400
 8001ce0:	20000268 	.word	0x20000268
 8001ce4:	20000280 	.word	0x20000280

08001ce8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <SystemInit+0x20>)
 8001cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <SystemInit+0x20>)
 8001cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d0c:	480d      	ldr	r0, [pc, #52]	; (8001d44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d10:	480d      	ldr	r0, [pc, #52]	; (8001d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d12:	490e      	ldr	r1, [pc, #56]	; (8001d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d14:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <LoopForever+0xe>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d18:	e002      	b.n	8001d20 <LoopCopyDataInit>

08001d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1e:	3304      	adds	r3, #4

08001d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d24:	d3f9      	bcc.n	8001d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d26:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d28:	4c0b      	ldr	r4, [pc, #44]	; (8001d58 <LoopForever+0x16>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d2c:	e001      	b.n	8001d32 <LoopFillZerobss>

08001d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d30:	3204      	adds	r2, #4

08001d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d34:	d3fb      	bcc.n	8001d2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d36:	f7ff ffd7 	bl	8001ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d3a:	f003 fd59 	bl	80057f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d3e:	f7ff f8d3 	bl	8000ee8 <main>

08001d42 <LoopForever>:

LoopForever:
    b LoopForever
 8001d42:	e7fe      	b.n	8001d42 <LoopForever>
  ldr   r0, =_estack
 8001d44:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d4c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001d50:	08007d90 	.word	0x08007d90
  ldr r2, =_sbss
 8001d54:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001d58:	20000280 	.word	0x20000280

08001d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <ADC1_2_IRQHandler>

08001d5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f000 f939 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f000 f80e 	bl	8001d90 <HAL_InitTick>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	71fb      	strb	r3, [r7, #7]
 8001d7e:	e001      	b.n	8001d84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d80:	f7ff fde8 	bl	8001954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d84:	79fb      	ldrb	r3, [r7, #7]

}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <HAL_InitTick+0x68>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d022      	beq.n	8001dea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001da4:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <HAL_InitTick+0x6c>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_InitTick+0x68>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001db0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 f944 	bl	8002046 <HAL_SYSTICK_Config>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10f      	bne.n	8001de4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b0f      	cmp	r3, #15
 8001dc8:	d809      	bhi.n	8001dde <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd2:	f000 f910 	bl	8001ff6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_InitTick+0x70>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	e007      	b.n	8001dee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	73fb      	strb	r3, [r7, #15]
 8001de2:	e004      	b.n	8001dee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
 8001de8:	e001      	b.n	8001dee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000030 	.word	0x20000030
 8001dfc:	20000028 	.word	0x20000028
 8001e00:	2000002c 	.word	0x2000002c

08001e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_IncTick+0x1c>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_IncTick+0x20>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4413      	add	r3, r2
 8001e12:	4a03      	ldr	r2, [pc, #12]	; (8001e20 <HAL_IncTick+0x1c>)
 8001e14:	6013      	str	r3, [r2, #0]
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	2000026c 	.word	0x2000026c
 8001e24:	20000030 	.word	0x20000030

08001e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_GetTick+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	2000026c 	.word	0x2000026c

08001e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e72:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	60d3      	str	r3, [r2, #12]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	f003 0307 	and.w	r3, r3, #7
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	db0b      	blt.n	8001ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	f003 021f 	and.w	r2, r3, #31
 8001ebc:	4907      	ldr	r1, [pc, #28]	; (8001edc <__NVIC_EnableIRQ+0x38>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000e100 	.word	0xe000e100

08001ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	db0a      	blt.n	8001f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	490c      	ldr	r1, [pc, #48]	; (8001f2c <__NVIC_SetPriority+0x4c>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	440b      	add	r3, r1
 8001f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f08:	e00a      	b.n	8001f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4908      	ldr	r1, [pc, #32]	; (8001f30 <__NVIC_SetPriority+0x50>)
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3b04      	subs	r3, #4
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	761a      	strb	r2, [r3, #24]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f1c3 0307 	rsb	r3, r3, #7
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	bf28      	it	cs
 8001f52:	2304      	movcs	r3, #4
 8001f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d902      	bls.n	8001f64 <NVIC_EncodePriority+0x30>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3b03      	subs	r3, #3
 8001f62:	e000      	b.n	8001f66 <NVIC_EncodePriority+0x32>
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	43d9      	mvns	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	4313      	orrs	r3, r2
         );
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fac:	d301      	bcc.n	8001fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00f      	b.n	8001fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <SysTick_Config+0x40>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fba:	210f      	movs	r1, #15
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f7ff ff8e 	bl	8001ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <SysTick_Config+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <SysTick_Config+0x40>)
 8001fcc:	2207      	movs	r2, #7
 8001fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	e000e010 	.word	0xe000e010

08001fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff29 	bl	8001e40 <__NVIC_SetPriorityGrouping>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002004:	f7ff ff40 	bl	8001e88 <__NVIC_GetPriorityGrouping>
 8002008:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	6978      	ldr	r0, [r7, #20]
 8002010:	f7ff ff90 	bl	8001f34 <NVIC_EncodePriority>
 8002014:	4602      	mov	r2, r0
 8002016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff5f 	bl	8001ee0 <__NVIC_SetPriority>
}
 8002022:	bf00      	nop
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff33 	bl	8001ea4 <__NVIC_EnableIRQ>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ffa4 	bl	8001f9c <SysTick_Config>
 8002054:	4603      	mov	r3, r0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e147      	b.n	8002302 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d106      	bne.n	800208c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fc88 	bl	800199c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699a      	ldr	r2, [r3, #24]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0210 	bic.w	r2, r2, #16
 800209a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800209c:	f7ff fec4 	bl	8001e28 <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80020a2:	e012      	b.n	80020ca <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80020a4:	f7ff fec0 	bl	8001e28 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b0a      	cmp	r3, #10
 80020b0:	d90b      	bls.n	80020ca <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2203      	movs	r2, #3
 80020c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e11b      	b.n	8002302 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d0e5      	beq.n	80020a4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020e8:	f7ff fe9e 	bl	8001e28 <HAL_GetTick>
 80020ec:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80020ee:	e012      	b.n	8002116 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80020f0:	f7ff fe9a 	bl	8001e28 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b0a      	cmp	r3, #10
 80020fc:	d90b      	bls.n	8002116 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2203      	movs	r2, #3
 800210e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e0f5      	b.n	8002302 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0e5      	beq.n	80020f0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0202 	orr.w	r2, r2, #2
 8002132:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a74      	ldr	r2, [pc, #464]	; (800230c <HAL_FDCAN_Init+0x2ac>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d103      	bne.n	8002146 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800213e:	4a74      	ldr	r2, [pc, #464]	; (8002310 <HAL_FDCAN_Init+0x2b0>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7c1b      	ldrb	r3, [r3, #16]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d108      	bne.n	8002160 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699a      	ldr	r2, [r3, #24]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800215c:	619a      	str	r2, [r3, #24]
 800215e:	e007      	b.n	8002170 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800216e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7c5b      	ldrb	r3, [r3, #17]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d108      	bne.n	800218a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002186:	619a      	str	r2, [r3, #24]
 8002188:	e007      	b.n	800219a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699a      	ldr	r2, [r3, #24]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002198:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7c9b      	ldrb	r3, [r3, #18]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d108      	bne.n	80021b4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021b0:	619a      	str	r2, [r3, #24]
 80021b2:	e007      	b.n	80021c4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021c2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	699a      	ldr	r2, [r3, #24]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80021e8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0210 	bic.w	r2, r2, #16
 80021f8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d108      	bne.n	8002214 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699a      	ldr	r2, [r3, #24]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0204 	orr.w	r2, r2, #4
 8002210:	619a      	str	r2, [r3, #24]
 8002212:	e02c      	b.n	800226e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d028      	beq.n	800226e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d01c      	beq.n	800225e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002232:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0210 	orr.w	r2, r2, #16
 8002242:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d110      	bne.n	800226e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699a      	ldr	r2, [r3, #24]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0220 	orr.w	r2, r2, #32
 800225a:	619a      	str	r2, [r3, #24]
 800225c:	e007      	b.n	800226e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699a      	ldr	r2, [r3, #24]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0220 	orr.w	r2, r2, #32
 800226c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	3b01      	subs	r3, #1
 8002274:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	3b01      	subs	r3, #1
 800227c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800227e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002286:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	3b01      	subs	r3, #1
 8002290:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002296:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002298:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022a2:	d115      	bne.n	80022d0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	3b01      	subs	r3, #1
 80022b0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022b2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	3b01      	subs	r3, #1
 80022ba:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80022bc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	3b01      	subs	r3, #1
 80022c6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80022cc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022ce:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fc6e 	bl	8002bc8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40006400 	.word	0x40006400
 8002310:	40006500 	.word	0x40006500

08002314 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002324:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002326:	7dfb      	ldrb	r3, [r7, #23]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d002      	beq.n	8002332 <HAL_FDCAN_ConfigFilter+0x1e>
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d13d      	bne.n	80023ae <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d119      	bne.n	800236e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002346:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800234e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e01d      	b.n	80023aa <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	075a      	lsls	r2, r3, #29
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	079a      	lsls	r2, r3, #30
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3304      	adds	r3, #4
 80023a2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e006      	b.n	80023bc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b2:	f043 0202 	orr.w	r2, r3, #2
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
  }
}
 80023bc:	4618      	mov	r0, r3
 80023be:	371c      	adds	r7, #28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d116      	bne.n	8002410 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ea:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	011a      	lsls	r2, r3, #4
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	431a      	orrs	r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	431a      	orrs	r2, r3
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	431a      	orrs	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e006      	b.n	800241e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002414:	f043 0204 	orr.w	r2, r3, #4
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
  }
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d110      	bne.n	8002460 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699a      	ldr	r2, [r3, #24]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0201 	bic.w	r2, r2, #1
 8002454:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	e006      	b.n	800246e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002464:	f043 0204 	orr.w	r2, r3, #4
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
  }
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d12c      	bne.n	80024ec <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800249a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e023      	b.n	80024fa <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024ba:	0c1b      	lsrs	r3, r3, #16
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fbd3 	bl	8002c74 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2101      	movs	r1, #1
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	fa01 f202 	lsl.w	r2, r1, r2
 80024da:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80024de:	2201      	movs	r2, #1
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e006      	b.n	80024fa <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f0:	f043 0208 	orr.w	r2, r3, #8
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
  }
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002504:	b480      	push	{r7}
 8002506:	b08b      	sub	sp, #44	; 0x2c
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002518:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800251a:	7efb      	ldrb	r3, [r7, #27]
 800251c:	2b02      	cmp	r3, #2
 800251e:	f040 80bc 	bne.w	800269a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	d121      	bne.n	800256c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0af      	b.n	80026a8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
 800256a:	e020      	b.n	80025ae <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	2b00      	cmp	r3, #0
 800257a:	d107      	bne.n	800258c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002580:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e08d      	b.n	80026a8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	440b      	add	r3, r1
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d107      	bne.n	80025d2 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	0c9b      	lsrs	r3, r3, #18
 80025c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	e005      	b.n	80025de <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	3304      	adds	r3, #4
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	b29a      	uxth	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	0e1b      	lsrs	r3, r3, #24
 8002630:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	0fda      	lsrs	r2, r3, #31
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	3304      	adds	r3, #4
 8002646:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800264c:	2300      	movs	r3, #0
 800264e:	623b      	str	r3, [r7, #32]
 8002650:	e00a      	b.n	8002668 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	441a      	add	r2, r3
 8002658:	6839      	ldr	r1, [r7, #0]
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	440b      	add	r3, r1
 800265e:	7812      	ldrb	r2, [r2, #0]
 8002660:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	3301      	adds	r3, #1
 8002666:	623b      	str	r3, [r7, #32]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8002670:	5cd3      	ldrb	r3, [r2, r3]
 8002672:	461a      	mov	r2, r3
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	4293      	cmp	r3, r2
 8002678:	d3eb      	bcc.n	8002652 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	d105      	bne.n	800268c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800268a:	e004      	b.n	8002696 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	e006      	b.n	80026a8 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269e:	f043 0208 	orr.w	r2, r3, #8
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
  }
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	372c      	adds	r7, #44	; 0x2c
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	08007ad4 	.word	0x08007ad4

080026b8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026ca:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80026cc:	7dfb      	ldrb	r3, [r7, #23]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d003      	beq.n	80026da <HAL_FDCAN_ActivateNotification+0x22>
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	f040 80c8 	bne.w	800286a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d03b      	beq.n	800276e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d031      	beq.n	800276e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002710:	2b00      	cmp	r3, #0
 8002712:	d004      	beq.n	800271e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	d027      	beq.n	800276e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002724:	2b00      	cmp	r3, #0
 8002726:	d004      	beq.n	8002732 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d01d      	beq.n	800276e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002738:	2b00      	cmp	r3, #0
 800273a:	d004      	beq.n	8002746 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d013      	beq.n	800276e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00c      	beq.n	800277e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d107      	bne.n	800277e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0201 	orr.w	r2, r2, #1
 800277c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	2b00      	cmp	r3, #0
 8002786:	d004      	beq.n	8002792 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d13b      	bne.n	800280a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d131      	bne.n	800280a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d004      	beq.n	80027ba <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d127      	bne.n	800280a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d004      	beq.n	80027ce <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d11d      	bne.n	800280a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d004      	beq.n	80027e2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d113      	bne.n	800280a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d004      	beq.n	80027f6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00c      	beq.n	800281a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0202 	orr.w	r2, r2, #2
 8002818:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002820:	2b00      	cmp	r3, #0
 8002822:	d009      	beq.n	8002838 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	430a      	orrs	r2, r1
 8002834:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	430a      	orrs	r2, r1
 8002852:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	430a      	orrs	r2, r1
 8002864:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e006      	b.n	8002878 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286e:	f043 0202 	orr.w	r2, r3, #2
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
  }
}
 8002878:	4618      	mov	r0, r3
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	; 0x28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002892:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a0:	4013      	ands	r3, r2
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	6a3a      	ldr	r2, [r7, #32]
 80028b8:	4013      	ands	r3, r2
 80028ba:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028c6:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028da:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80028de:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028f6:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4013      	ands	r3, r2
 8002902:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00d      	beq.n	800292e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d006      	beq.n	800292e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2240      	movs	r2, #64	; 0x40
 8002926:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f92e 	bl	8002b8a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01b      	beq.n	8002974 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d014      	beq.n	8002974 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002952:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800296a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800296c:	6939      	ldr	r1, [r7, #16]
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f8ec 	bl	8002b4c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002980:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f8b6 	bl	8002af6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6a3a      	ldr	r2, [r7, #32]
 8002996:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002998:	6a39      	ldr	r1, [r7, #32]
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe fd86 	bl	80014ac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80029ae:	69f9      	ldr	r1, [r7, #28]
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f8ab 	bl	8002b0c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00e      	beq.n	80029e2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029da:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f8a0 	bl	8002b22 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01a      	beq.n	8002a26 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d013      	beq.n	8002a26 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002a06:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4013      	ands	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002a1e:	68f9      	ldr	r1, [r7, #12]
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f888 	bl	8002b36 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00e      	beq.n	8002a52 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a4a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f888 	bl	8002b62 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00e      	beq.n	8002a7e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d007      	beq.n	8002a7e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a76:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f87c 	bl	8002b76 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d011      	beq.n	8002ab0 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aa2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002abe:	6979      	ldr	r1, [r7, #20]
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f876 	bl	8002bb2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f858 	bl	8002b9e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002aee:	bf00      	nop
 8002af0:	3728      	adds	r7, #40	; 0x28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002bd0:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002bd2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bea:	041a      	lsls	r2, r3, #16
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c08:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	061a      	lsls	r2, r3, #24
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	e005      	b.n	8002c56 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3304      	adds	r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d3f3      	bcc.n	8002c4a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002c62:	bf00      	nop
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	4000a400 	.word	0x4000a400

08002c74 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b089      	sub	sp, #36	; 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10a      	bne.n	8002ca0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002c92:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	e00a      	b.n	8002cb6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002ca8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002cae:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002cb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cb4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002cc0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002cc6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002ccc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	440b      	add	r3, r1
 8002ce6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e020      	b.n	8002d48 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	3303      	adds	r3, #3
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3302      	adds	r3, #2
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	440b      	add	r3, r1
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002d1e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	3301      	adds	r3, #1
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	440b      	add	r3, r1
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002d2c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	440a      	add	r2, r1
 8002d34:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002d36:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	3304      	adds	r3, #4
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0c1b      	lsrs	r3, r3, #16
 8002d4e:	4a06      	ldr	r2, [pc, #24]	; (8002d68 <FDCAN_CopyMessageToRAM+0xf4>)
 8002d50:	5cd3      	ldrb	r3, [r2, r3]
 8002d52:	461a      	mov	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d3d5      	bcc.n	8002d06 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	3724      	adds	r7, #36	; 0x24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	08007ad4 	.word	0x08007ad4

08002d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d7a:	e15a      	b.n	8003032 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2101      	movs	r1, #1
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 814c 	beq.w	800302c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d005      	beq.n	8002dac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d130      	bne.n	8002e0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	2203      	movs	r2, #3
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002de2:	2201      	movs	r2, #1
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4013      	ands	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	f003 0201 	and.w	r2, r3, #1
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d017      	beq.n	8002e4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	2203      	movs	r2, #3
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d123      	bne.n	8002e9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	08da      	lsrs	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3208      	adds	r2, #8
 8002e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	220f      	movs	r2, #15
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	08da      	lsrs	r2, r3, #3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3208      	adds	r2, #8
 8002e98:	6939      	ldr	r1, [r7, #16]
 8002e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 0203 	and.w	r2, r3, #3
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 80a6 	beq.w	800302c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee0:	4b5b      	ldr	r3, [pc, #364]	; (8003050 <HAL_GPIO_Init+0x2e4>)
 8002ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee4:	4a5a      	ldr	r2, [pc, #360]	; (8003050 <HAL_GPIO_Init+0x2e4>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6613      	str	r3, [r2, #96]	; 0x60
 8002eec:	4b58      	ldr	r3, [pc, #352]	; (8003050 <HAL_GPIO_Init+0x2e4>)
 8002eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ef8:	4a56      	ldr	r2, [pc, #344]	; (8003054 <HAL_GPIO_Init+0x2e8>)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	3302      	adds	r3, #2
 8002f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	220f      	movs	r2, #15
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f22:	d01f      	beq.n	8002f64 <HAL_GPIO_Init+0x1f8>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a4c      	ldr	r2, [pc, #304]	; (8003058 <HAL_GPIO_Init+0x2ec>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d019      	beq.n	8002f60 <HAL_GPIO_Init+0x1f4>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a4b      	ldr	r2, [pc, #300]	; (800305c <HAL_GPIO_Init+0x2f0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d013      	beq.n	8002f5c <HAL_GPIO_Init+0x1f0>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a4a      	ldr	r2, [pc, #296]	; (8003060 <HAL_GPIO_Init+0x2f4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00d      	beq.n	8002f58 <HAL_GPIO_Init+0x1ec>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a49      	ldr	r2, [pc, #292]	; (8003064 <HAL_GPIO_Init+0x2f8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d007      	beq.n	8002f54 <HAL_GPIO_Init+0x1e8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a48      	ldr	r2, [pc, #288]	; (8003068 <HAL_GPIO_Init+0x2fc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d101      	bne.n	8002f50 <HAL_GPIO_Init+0x1e4>
 8002f4c:	2305      	movs	r3, #5
 8002f4e:	e00a      	b.n	8002f66 <HAL_GPIO_Init+0x1fa>
 8002f50:	2306      	movs	r3, #6
 8002f52:	e008      	b.n	8002f66 <HAL_GPIO_Init+0x1fa>
 8002f54:	2304      	movs	r3, #4
 8002f56:	e006      	b.n	8002f66 <HAL_GPIO_Init+0x1fa>
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e004      	b.n	8002f66 <HAL_GPIO_Init+0x1fa>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e002      	b.n	8002f66 <HAL_GPIO_Init+0x1fa>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <HAL_GPIO_Init+0x1fa>
 8002f64:	2300      	movs	r3, #0
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	f002 0203 	and.w	r2, r2, #3
 8002f6c:	0092      	lsls	r2, r2, #2
 8002f6e:	4093      	lsls	r3, r2
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f76:	4937      	ldr	r1, [pc, #220]	; (8003054 <HAL_GPIO_Init+0x2e8>)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f84:	4b39      	ldr	r3, [pc, #228]	; (800306c <HAL_GPIO_Init+0x300>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4013      	ands	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fa8:	4a30      	ldr	r2, [pc, #192]	; (800306c <HAL_GPIO_Init+0x300>)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fae:	4b2f      	ldr	r3, [pc, #188]	; (800306c <HAL_GPIO_Init+0x300>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fd2:	4a26      	ldr	r2, [pc, #152]	; (800306c <HAL_GPIO_Init+0x300>)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002fd8:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_GPIO_Init+0x300>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ffc:	4a1b      	ldr	r2, [pc, #108]	; (800306c <HAL_GPIO_Init+0x300>)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_GPIO_Init+0x300>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	43db      	mvns	r3, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003026:	4a11      	ldr	r2, [pc, #68]	; (800306c <HAL_GPIO_Init+0x300>)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	3301      	adds	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	f47f ae9d 	bne.w	8002d7c <HAL_GPIO_Init+0x10>
  }
}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	40021000 	.word	0x40021000
 8003054:	40010000 	.word	0x40010000
 8003058:	48000400 	.word	0x48000400
 800305c:	48000800 	.word	0x48000800
 8003060:	48000c00 	.word	0x48000c00
 8003064:	48001000 	.word	0x48001000
 8003068:	48001400 	.word	0x48001400
 800306c:	40010400 	.word	0x40010400

08003070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	887b      	ldrh	r3, [r7, #2]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
 800308c:	e001      	b.n	8003092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030b0:	787b      	ldrb	r3, [r7, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030bc:	e002      	b.n	80030c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030be:	887a      	ldrh	r2, [r7, #2]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d141      	bne.n	8003162 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030de:	4b4b      	ldr	r3, [pc, #300]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ea:	d131      	bne.n	8003150 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030ec:	4b47      	ldr	r3, [pc, #284]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f2:	4a46      	ldr	r2, [pc, #280]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030fc:	4b43      	ldr	r3, [pc, #268]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003104:	4a41      	ldr	r2, [pc, #260]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800310a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800310c:	4b40      	ldr	r3, [pc, #256]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2232      	movs	r2, #50	; 0x32
 8003112:	fb02 f303 	mul.w	r3, r2, r3
 8003116:	4a3f      	ldr	r2, [pc, #252]	; (8003214 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	0c9b      	lsrs	r3, r3, #18
 800311e:	3301      	adds	r3, #1
 8003120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003122:	e002      	b.n	800312a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3b01      	subs	r3, #1
 8003128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800312a:	4b38      	ldr	r3, [pc, #224]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003136:	d102      	bne.n	800313e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f2      	bne.n	8003124 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800313e:	4b33      	ldr	r3, [pc, #204]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314a:	d158      	bne.n	80031fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e057      	b.n	8003200 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003150:	4b2e      	ldr	r3, [pc, #184]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003156:	4a2d      	ldr	r2, [pc, #180]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800315c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003160:	e04d      	b.n	80031fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003168:	d141      	bne.n	80031ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800316a:	4b28      	ldr	r3, [pc, #160]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003176:	d131      	bne.n	80031dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003178:	4b24      	ldr	r3, [pc, #144]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800317e:	4a23      	ldr	r2, [pc, #140]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003184:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003188:	4b20      	ldr	r3, [pc, #128]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003190:	4a1e      	ldr	r2, [pc, #120]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003196:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2232      	movs	r2, #50	; 0x32
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	4a1c      	ldr	r2, [pc, #112]	; (8003214 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	0c9b      	lsrs	r3, r3, #18
 80031aa:	3301      	adds	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031ae:	e002      	b.n	80031b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c2:	d102      	bne.n	80031ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f2      	bne.n	80031b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d6:	d112      	bne.n	80031fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e011      	b.n	8003200 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031e2:	4a0a      	ldr	r2, [pc, #40]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031ec:	e007      	b.n	80031fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031ee:	4b07      	ldr	r3, [pc, #28]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031f6:	4a05      	ldr	r2, [pc, #20]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	40007000 	.word	0x40007000
 8003210:	20000028 	.word	0x20000028
 8003214:	431bde83 	.word	0x431bde83

08003218 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e306      	b.n	8003838 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d075      	beq.n	8003322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003236:	4b97      	ldr	r3, [pc, #604]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003240:	4b94      	ldr	r3, [pc, #592]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b0c      	cmp	r3, #12
 800324e:	d102      	bne.n	8003256 <HAL_RCC_OscConfig+0x3e>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d002      	beq.n	800325c <HAL_RCC_OscConfig+0x44>
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d10b      	bne.n	8003274 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325c:	4b8d      	ldr	r3, [pc, #564]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d05b      	beq.n	8003320 <HAL_RCC_OscConfig+0x108>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d157      	bne.n	8003320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e2e1      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327c:	d106      	bne.n	800328c <HAL_RCC_OscConfig+0x74>
 800327e:	4b85      	ldr	r3, [pc, #532]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a84      	ldr	r2, [pc, #528]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e01d      	b.n	80032c8 <HAL_RCC_OscConfig+0xb0>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0x98>
 8003296:	4b7f      	ldr	r3, [pc, #508]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a7e      	ldr	r2, [pc, #504]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 800329c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b7c      	ldr	r3, [pc, #496]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a7b      	ldr	r2, [pc, #492]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e00b      	b.n	80032c8 <HAL_RCC_OscConfig+0xb0>
 80032b0:	4b78      	ldr	r3, [pc, #480]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a77      	ldr	r2, [pc, #476]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 80032b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b75      	ldr	r3, [pc, #468]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a74      	ldr	r2, [pc, #464]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 80032c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d013      	beq.n	80032f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe fdaa 	bl	8001e28 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7fe fda6 	bl	8001e28 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e2a6      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ea:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0xc0>
 80032f6:	e014      	b.n	8003322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fe fd96 	bl	8001e28 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003300:	f7fe fd92 	bl	8001e28 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	; 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e292      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003312:	4b60      	ldr	r3, [pc, #384]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0xe8>
 800331e:	e000      	b.n	8003322 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d075      	beq.n	800341a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800332e:	4b59      	ldr	r3, [pc, #356]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003338:	4b56      	ldr	r3, [pc, #344]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	2b0c      	cmp	r3, #12
 8003346:	d102      	bne.n	800334e <HAL_RCC_OscConfig+0x136>
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d002      	beq.n	8003354 <HAL_RCC_OscConfig+0x13c>
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b04      	cmp	r3, #4
 8003352:	d11f      	bne.n	8003394 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003354:	4b4f      	ldr	r3, [pc, #316]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_OscConfig+0x154>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e265      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336c:	4b49      	ldr	r3, [pc, #292]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	061b      	lsls	r3, r3, #24
 800337a:	4946      	ldr	r1, [pc, #280]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 800337c:	4313      	orrs	r3, r2
 800337e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003380:	4b45      	ldr	r3, [pc, #276]	; (8003498 <HAL_RCC_OscConfig+0x280>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe fd03 	bl	8001d90 <HAL_InitTick>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d043      	beq.n	8003418 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e251      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d023      	beq.n	80033e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800339c:	4b3d      	ldr	r3, [pc, #244]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a3c      	ldr	r2, [pc, #240]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 80033a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fe fd3e 	bl	8001e28 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b0:	f7fe fd3a 	bl	8001e28 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e23a      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c2:	4b34      	ldr	r3, [pc, #208]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ce:	4b31      	ldr	r3, [pc, #196]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	061b      	lsls	r3, r3, #24
 80033dc:	492d      	ldr	r1, [pc, #180]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
 80033e2:	e01a      	b.n	800341a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e4:	4b2b      	ldr	r3, [pc, #172]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a2a      	ldr	r2, [pc, #168]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 80033ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fe fd1a 	bl	8001e28 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f8:	f7fe fd16 	bl	8001e28 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e216      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800340a:	4b22      	ldr	r3, [pc, #136]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x1e0>
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003418:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d041      	beq.n	80034aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01c      	beq.n	8003468 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800342e:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 8003430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003434:	4a17      	ldr	r2, [pc, #92]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343e:	f7fe fcf3 	bl	8001e28 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003446:	f7fe fcef 	bl	8001e28 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e1ef      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 800345a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0ef      	beq.n	8003446 <HAL_RCC_OscConfig+0x22e>
 8003466:	e020      	b.n	80034aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 800346a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800346e:	4a09      	ldr	r2, [pc, #36]	; (8003494 <HAL_RCC_OscConfig+0x27c>)
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003478:	f7fe fcd6 	bl	8001e28 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800347e:	e00d      	b.n	800349c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003480:	f7fe fcd2 	bl	8001e28 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d906      	bls.n	800349c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e1d2      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
 8003498:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800349c:	4b8c      	ldr	r3, [pc, #560]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 800349e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1ea      	bne.n	8003480 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80a6 	beq.w	8003604 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b8:	2300      	movs	r3, #0
 80034ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034bc:	4b84      	ldr	r3, [pc, #528]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 80034be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_OscConfig+0x2b4>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x2b6>
 80034cc:	2300      	movs	r3, #0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00d      	beq.n	80034ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d2:	4b7f      	ldr	r3, [pc, #508]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	4a7e      	ldr	r2, [pc, #504]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6593      	str	r3, [r2, #88]	; 0x58
 80034de:	4b7c      	ldr	r3, [pc, #496]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034ea:	2301      	movs	r3, #1
 80034ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ee:	4b79      	ldr	r3, [pc, #484]	; (80036d4 <HAL_RCC_OscConfig+0x4bc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d118      	bne.n	800352c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034fa:	4b76      	ldr	r3, [pc, #472]	; (80036d4 <HAL_RCC_OscConfig+0x4bc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a75      	ldr	r2, [pc, #468]	; (80036d4 <HAL_RCC_OscConfig+0x4bc>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003506:	f7fe fc8f 	bl	8001e28 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350e:	f7fe fc8b 	bl	8001e28 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e18b      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003520:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <HAL_RCC_OscConfig+0x4bc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d108      	bne.n	8003546 <HAL_RCC_OscConfig+0x32e>
 8003534:	4b66      	ldr	r3, [pc, #408]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353a:	4a65      	ldr	r2, [pc, #404]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003544:	e024      	b.n	8003590 <HAL_RCC_OscConfig+0x378>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b05      	cmp	r3, #5
 800354c:	d110      	bne.n	8003570 <HAL_RCC_OscConfig+0x358>
 800354e:	4b60      	ldr	r3, [pc, #384]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003554:	4a5e      	ldr	r2, [pc, #376]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 8003556:	f043 0304 	orr.w	r3, r3, #4
 800355a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800355e:	4b5c      	ldr	r3, [pc, #368]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 8003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003564:	4a5a      	ldr	r2, [pc, #360]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800356e:	e00f      	b.n	8003590 <HAL_RCC_OscConfig+0x378>
 8003570:	4b57      	ldr	r3, [pc, #348]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	4a56      	ldr	r2, [pc, #344]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 8003578:	f023 0301 	bic.w	r3, r3, #1
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003580:	4b53      	ldr	r3, [pc, #332]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003586:	4a52      	ldr	r2, [pc, #328]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d016      	beq.n	80035c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003598:	f7fe fc46 	bl	8001e28 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800359e:	e00a      	b.n	80035b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a0:	f7fe fc42 	bl	8001e28 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e140      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b6:	4b46      	ldr	r3, [pc, #280]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0ed      	beq.n	80035a0 <HAL_RCC_OscConfig+0x388>
 80035c4:	e015      	b.n	80035f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c6:	f7fe fc2f 	bl	8001e28 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fe fc2b 	bl	8001e28 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e129      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035e4:	4b3a      	ldr	r3, [pc, #232]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1ed      	bne.n	80035ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035f2:	7ffb      	ldrb	r3, [r7, #31]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d105      	bne.n	8003604 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f8:	4b35      	ldr	r3, [pc, #212]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 80035fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fc:	4a34      	ldr	r2, [pc, #208]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 80035fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003602:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b00      	cmp	r3, #0
 800360e:	d03c      	beq.n	800368a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01c      	beq.n	8003652 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003618:	4b2d      	ldr	r3, [pc, #180]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 800361a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800361e:	4a2c      	ldr	r2, [pc, #176]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe fbfe 	bl	8001e28 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003630:	f7fe fbfa 	bl	8001e28 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e0fa      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003642:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 8003644:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0ef      	beq.n	8003630 <HAL_RCC_OscConfig+0x418>
 8003650:	e01b      	b.n	800368a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003652:	4b1f      	ldr	r3, [pc, #124]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 8003654:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003658:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003662:	f7fe fbe1 	bl	8001e28 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800366a:	f7fe fbdd 	bl	8001e28 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e0dd      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800367c:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 800367e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ef      	bne.n	800366a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80d1 	beq.w	8003836 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003694:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b0c      	cmp	r3, #12
 800369e:	f000 808b 	beq.w	80037b8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d15e      	bne.n	8003768 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a08      	ldr	r2, [pc, #32]	; (80036d0 <HAL_RCC_OscConfig+0x4b8>)
 80036b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b6:	f7fe fbb7 	bl	8001e28 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036bc:	e00c      	b.n	80036d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036be:	f7fe fbb3 	bl	8001e28 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d905      	bls.n	80036d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e0b3      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d8:	4b59      	ldr	r3, [pc, #356]	; (8003840 <HAL_RCC_OscConfig+0x628>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ec      	bne.n	80036be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e4:	4b56      	ldr	r3, [pc, #344]	; (8003840 <HAL_RCC_OscConfig+0x628>)
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	4b56      	ldr	r3, [pc, #344]	; (8003844 <HAL_RCC_OscConfig+0x62c>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6a11      	ldr	r1, [r2, #32]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036f4:	3a01      	subs	r2, #1
 80036f6:	0112      	lsls	r2, r2, #4
 80036f8:	4311      	orrs	r1, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80036fe:	0212      	lsls	r2, r2, #8
 8003700:	4311      	orrs	r1, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003706:	0852      	lsrs	r2, r2, #1
 8003708:	3a01      	subs	r2, #1
 800370a:	0552      	lsls	r2, r2, #21
 800370c:	4311      	orrs	r1, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003712:	0852      	lsrs	r2, r2, #1
 8003714:	3a01      	subs	r2, #1
 8003716:	0652      	lsls	r2, r2, #25
 8003718:	4311      	orrs	r1, r2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800371e:	06d2      	lsls	r2, r2, #27
 8003720:	430a      	orrs	r2, r1
 8003722:	4947      	ldr	r1, [pc, #284]	; (8003840 <HAL_RCC_OscConfig+0x628>)
 8003724:	4313      	orrs	r3, r2
 8003726:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003728:	4b45      	ldr	r3, [pc, #276]	; (8003840 <HAL_RCC_OscConfig+0x628>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a44      	ldr	r2, [pc, #272]	; (8003840 <HAL_RCC_OscConfig+0x628>)
 800372e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003732:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003734:	4b42      	ldr	r3, [pc, #264]	; (8003840 <HAL_RCC_OscConfig+0x628>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a41      	ldr	r2, [pc, #260]	; (8003840 <HAL_RCC_OscConfig+0x628>)
 800373a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800373e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe fb72 	bl	8001e28 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003748:	f7fe fb6e 	bl	8001e28 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e06e      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375a:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_OscConfig+0x628>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x530>
 8003766:	e066      	b.n	8003836 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003768:	4b35      	ldr	r3, [pc, #212]	; (8003840 <HAL_RCC_OscConfig+0x628>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a34      	ldr	r2, [pc, #208]	; (8003840 <HAL_RCC_OscConfig+0x628>)
 800376e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003772:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003774:	4b32      	ldr	r3, [pc, #200]	; (8003840 <HAL_RCC_OscConfig+0x628>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4a31      	ldr	r2, [pc, #196]	; (8003840 <HAL_RCC_OscConfig+0x628>)
 800377a:	f023 0303 	bic.w	r3, r3, #3
 800377e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003780:	4b2f      	ldr	r3, [pc, #188]	; (8003840 <HAL_RCC_OscConfig+0x628>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a2e      	ldr	r2, [pc, #184]	; (8003840 <HAL_RCC_OscConfig+0x628>)
 8003786:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800378a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fe fb4a 	bl	8001e28 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003798:	f7fe fb46 	bl	8001e28 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e046      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037aa:	4b25      	ldr	r3, [pc, #148]	; (8003840 <HAL_RCC_OscConfig+0x628>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x580>
 80037b6:	e03e      	b.n	8003836 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e039      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80037c4:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <HAL_RCC_OscConfig+0x628>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f003 0203 	and.w	r2, r3, #3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d12c      	bne.n	8003832 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	3b01      	subs	r3, #1
 80037e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d123      	bne.n	8003832 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d11b      	bne.n	8003832 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d113      	bne.n	8003832 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	085b      	lsrs	r3, r3, #1
 8003816:	3b01      	subs	r3, #1
 8003818:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d109      	bne.n	8003832 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	3b01      	subs	r3, #1
 800382c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d001      	beq.n	8003836 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000
 8003844:	019f800c 	.word	0x019f800c

08003848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e11e      	b.n	8003a9e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003860:	4b91      	ldr	r3, [pc, #580]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d910      	bls.n	8003890 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386e:	4b8e      	ldr	r3, [pc, #568]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 020f 	bic.w	r2, r3, #15
 8003876:	498c      	ldr	r1, [pc, #560]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b8a      	ldr	r3, [pc, #552]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e106      	b.n	8003a9e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d073      	beq.n	8003984 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d129      	bne.n	80038f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a4:	4b81      	ldr	r3, [pc, #516]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0f4      	b.n	8003a9e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80038b4:	f000 f99e 	bl	8003bf4 <RCC_GetSysClockFreqFromPLLSource>
 80038b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4a7c      	ldr	r2, [pc, #496]	; (8003ab0 <HAL_RCC_ClockConfig+0x268>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d93f      	bls.n	8003942 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80038c2:	4b7a      	ldr	r3, [pc, #488]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d033      	beq.n	8003942 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d12f      	bne.n	8003942 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038e2:	4b72      	ldr	r3, [pc, #456]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ea:	4a70      	ldr	r2, [pc, #448]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 80038ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038f2:	2380      	movs	r3, #128	; 0x80
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	e024      	b.n	8003942 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d107      	bne.n	8003910 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003900:	4b6a      	ldr	r3, [pc, #424]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d109      	bne.n	8003920 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0c6      	b.n	8003a9e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003910:	4b66      	ldr	r3, [pc, #408]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0be      	b.n	8003a9e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003920:	f000 f8ce 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8003924:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4a61      	ldr	r2, [pc, #388]	; (8003ab0 <HAL_RCC_ClockConfig+0x268>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d909      	bls.n	8003942 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800392e:	4b5f      	ldr	r3, [pc, #380]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003936:	4a5d      	ldr	r2, [pc, #372]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 8003938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800393e:	2380      	movs	r3, #128	; 0x80
 8003940:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003942:	4b5a      	ldr	r3, [pc, #360]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f023 0203 	bic.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4957      	ldr	r1, [pc, #348]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 8003950:	4313      	orrs	r3, r2
 8003952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003954:	f7fe fa68 	bl	8001e28 <HAL_GetTick>
 8003958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	e00a      	b.n	8003972 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800395c:	f7fe fa64 	bl	8001e28 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	; 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e095      	b.n	8003a9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	4b4e      	ldr	r3, [pc, #312]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 020c 	and.w	r2, r3, #12
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	429a      	cmp	r2, r3
 8003982:	d1eb      	bne.n	800395c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d023      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800399c:	4b43      	ldr	r3, [pc, #268]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	4a42      	ldr	r2, [pc, #264]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 80039a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80039b4:	4b3d      	ldr	r3, [pc, #244]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80039bc:	4a3b      	ldr	r2, [pc, #236]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 80039be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c4:	4b39      	ldr	r3, [pc, #228]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4936      	ldr	r1, [pc, #216]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
 80039d6:	e008      	b.n	80039ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b80      	cmp	r3, #128	; 0x80
 80039dc:	d105      	bne.n	80039ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039de:	4b33      	ldr	r3, [pc, #204]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	4a32      	ldr	r2, [pc, #200]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 80039e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039ea:	4b2f      	ldr	r3, [pc, #188]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d21d      	bcs.n	8003a34 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f8:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f023 020f 	bic.w	r2, r3, #15
 8003a00:	4929      	ldr	r1, [pc, #164]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a08:	f7fe fa0e 	bl	8001e28 <HAL_GetTick>
 8003a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a10:	f7fe fa0a 	bl	8001e28 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e03b      	b.n	8003a9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <HAL_RCC_ClockConfig+0x260>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d1ed      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a40:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4917      	ldr	r1, [pc, #92]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	490f      	ldr	r1, [pc, #60]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a72:	f000 f825 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8003a76:	4602      	mov	r2, r0
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_RCC_ClockConfig+0x264>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	490c      	ldr	r1, [pc, #48]	; (8003ab4 <HAL_RCC_ClockConfig+0x26c>)
 8003a84:	5ccb      	ldrb	r3, [r1, r3]
 8003a86:	f003 031f 	and.w	r3, r3, #31
 8003a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <HAL_RCC_ClockConfig+0x270>)
 8003a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <HAL_RCC_ClockConfig+0x274>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe f97a 	bl	8001d90 <HAL_InitTick>
 8003a9c:	4603      	mov	r3, r0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40022000 	.word	0x40022000
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	04c4b400 	.word	0x04c4b400
 8003ab4:	08007abc 	.word	0x08007abc
 8003ab8:	20000028 	.word	0x20000028
 8003abc:	2000002c 	.word	0x2000002c

08003ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ac6:	4b2c      	ldr	r3, [pc, #176]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d102      	bne.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ad2:	4b2a      	ldr	r3, [pc, #168]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	e047      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ad8:	4b27      	ldr	r3, [pc, #156]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d102      	bne.n	8003aea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ae4:	4b26      	ldr	r3, [pc, #152]	; (8003b80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	e03e      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003aea:	4b23      	ldr	r3, [pc, #140]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b0c      	cmp	r3, #12
 8003af4:	d136      	bne.n	8003b64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b00:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d10c      	bne.n	8003b2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b14:	4a1a      	ldr	r2, [pc, #104]	; (8003b80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	4a16      	ldr	r2, [pc, #88]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b1e:	68d2      	ldr	r2, [r2, #12]
 8003b20:	0a12      	lsrs	r2, r2, #8
 8003b22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	617b      	str	r3, [r7, #20]
      break;
 8003b2c:	e00c      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b2e:	4a13      	ldr	r2, [pc, #76]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b36:	4a10      	ldr	r2, [pc, #64]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b38:	68d2      	ldr	r2, [r2, #12]
 8003b3a:	0a12      	lsrs	r2, r2, #8
 8003b3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b40:	fb02 f303 	mul.w	r3, r2, r3
 8003b44:	617b      	str	r3, [r7, #20]
      break;
 8003b46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	0e5b      	lsrs	r3, r3, #25
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	3301      	adds	r3, #1
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	e001      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b68:	693b      	ldr	r3, [r7, #16]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	00f42400 	.word	0x00f42400
 8003b80:	007a1200 	.word	0x007a1200

08003b84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000028 	.word	0x20000028

08003b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ba0:	f7ff fff0 	bl	8003b84 <HAL_RCC_GetHCLKFreq>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	0a1b      	lsrs	r3, r3, #8
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	4904      	ldr	r1, [pc, #16]	; (8003bc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bb2:	5ccb      	ldrb	r3, [r1, r3]
 8003bb4:	f003 031f 	and.w	r3, r3, #31
 8003bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	08007acc 	.word	0x08007acc

08003bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bcc:	f7ff ffda 	bl	8003b84 <HAL_RCC_GetHCLKFreq>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	0adb      	lsrs	r3, r3, #11
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	4904      	ldr	r1, [pc, #16]	; (8003bf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bde:	5ccb      	ldrb	r3, [r1, r3]
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	08007acc 	.word	0x08007acc

08003bf4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bfa:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c04:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	091b      	lsrs	r3, r3, #4
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	3301      	adds	r3, #1
 8003c10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d10c      	bne.n	8003c32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c18:	4a17      	ldr	r2, [pc, #92]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c20:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c22:	68d2      	ldr	r2, [r2, #12]
 8003c24:	0a12      	lsrs	r2, r2, #8
 8003c26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	617b      	str	r3, [r7, #20]
    break;
 8003c30:	e00c      	b.n	8003c4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c32:	4a12      	ldr	r2, [pc, #72]	; (8003c7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3a:	4a0e      	ldr	r2, [pc, #56]	; (8003c74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c3c:	68d2      	ldr	r2, [r2, #12]
 8003c3e:	0a12      	lsrs	r2, r2, #8
 8003c40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c44:	fb02 f303 	mul.w	r3, r2, r3
 8003c48:	617b      	str	r3, [r7, #20]
    break;
 8003c4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	0e5b      	lsrs	r3, r3, #25
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	3301      	adds	r3, #1
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c66:	687b      	ldr	r3, [r7, #4]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	40021000 	.word	0x40021000
 8003c78:	007a1200 	.word	0x007a1200
 8003c7c:	00f42400 	.word	0x00f42400

08003c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c88:	2300      	movs	r3, #0
 8003c8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8098 	beq.w	8003dce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca2:	4b43      	ldr	r3, [pc, #268]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10d      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cae:	4b40      	ldr	r3, [pc, #256]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb2:	4a3f      	ldr	r2, [pc, #252]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8003cba:	4b3d      	ldr	r3, [pc, #244]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cca:	4b3a      	ldr	r3, [pc, #232]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a39      	ldr	r2, [pc, #228]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd6:	f7fe f8a7 	bl	8001e28 <HAL_GetTick>
 8003cda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cdc:	e009      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cde:	f7fe f8a3 	bl	8001e28 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d902      	bls.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	74fb      	strb	r3, [r7, #19]
        break;
 8003cf0:	e005      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf2:	4b30      	ldr	r3, [pc, #192]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0ef      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d159      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d04:	4b2a      	ldr	r3, [pc, #168]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d01e      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d019      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d20:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d2c:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	4a1f      	ldr	r2, [pc, #124]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d3c:	4b1c      	ldr	r3, [pc, #112]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	4a1b      	ldr	r2, [pc, #108]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d4c:	4a18      	ldr	r2, [pc, #96]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d016      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5e:	f7fe f863 	bl	8001e28 <HAL_GetTick>
 8003d62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d64:	e00b      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fe f85f 	bl	8001e28 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d902      	bls.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	74fb      	strb	r3, [r7, #19]
            break;
 8003d7c:	e006      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7e:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0ec      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d92:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	4903      	ldr	r1, [pc, #12]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003da8:	e008      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003daa:	7cfb      	ldrb	r3, [r7, #19]
 8003dac:	74bb      	strb	r3, [r7, #18]
 8003dae:	e005      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dbc:	7c7b      	ldrb	r3, [r7, #17]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d105      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc2:	4ba6      	ldr	r3, [pc, #664]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc6:	4aa5      	ldr	r2, [pc, #660]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dda:	4ba0      	ldr	r3, [pc, #640]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	f023 0203 	bic.w	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	499c      	ldr	r1, [pc, #624]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dfc:	4b97      	ldr	r3, [pc, #604]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f023 020c 	bic.w	r2, r3, #12
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	4994      	ldr	r1, [pc, #592]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e1e:	4b8f      	ldr	r3, [pc, #572]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	498b      	ldr	r1, [pc, #556]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e40:	4b86      	ldr	r3, [pc, #536]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	4983      	ldr	r1, [pc, #524]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e62:	4b7e      	ldr	r3, [pc, #504]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	497a      	ldr	r1, [pc, #488]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e84:	4b75      	ldr	r3, [pc, #468]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	4972      	ldr	r1, [pc, #456]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ea6:	4b6d      	ldr	r3, [pc, #436]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	4969      	ldr	r1, [pc, #420]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ec8:	4b64      	ldr	r3, [pc, #400]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	4961      	ldr	r1, [pc, #388]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eea:	4b5c      	ldr	r3, [pc, #368]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	4958      	ldr	r1, [pc, #352]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d015      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f0c:	4b53      	ldr	r3, [pc, #332]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	4950      	ldr	r1, [pc, #320]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f2a:	d105      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f2c:	4b4b      	ldr	r3, [pc, #300]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4a4a      	ldr	r2, [pc, #296]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f36:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d015      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f44:	4b45      	ldr	r3, [pc, #276]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	4942      	ldr	r1, [pc, #264]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f62:	d105      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f64:	4b3d      	ldr	r3, [pc, #244]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4a3c      	ldr	r2, [pc, #240]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f6e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d015      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f7c:	4b37      	ldr	r3, [pc, #220]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	4934      	ldr	r1, [pc, #208]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f9a:	d105      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f9c:	4b2f      	ldr	r3, [pc, #188]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4a2e      	ldr	r2, [pc, #184]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fa6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d015      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fb4:	4b29      	ldr	r3, [pc, #164]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc2:	4926      	ldr	r1, [pc, #152]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fd2:	d105      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd4:	4b21      	ldr	r3, [pc, #132]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	4a20      	ldr	r2, [pc, #128]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fde:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d015      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fec:	4b1b      	ldr	r3, [pc, #108]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	4918      	ldr	r1, [pc, #96]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800400a:	d105      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800400c:	4b13      	ldr	r3, [pc, #76]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a12      	ldr	r2, [pc, #72]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004016:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d015      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004024:	4b0d      	ldr	r3, [pc, #52]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004032:	490a      	ldr	r1, [pc, #40]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004042:	d105      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4a04      	ldr	r2, [pc, #16]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004050:	7cbb      	ldrb	r3, [r7, #18]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40021000 	.word	0x40021000

08004060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e049      	b.n	8004106 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fd fcea 	bl	8001a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	4619      	mov	r1, r3
 800409e:	4610      	mov	r0, r2
 80040a0:	f000 fb42 	bl	8004728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d001      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e04a      	b.n	80041be <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a21      	ldr	r2, [pc, #132]	; (80041cc <HAL_TIM_Base_Start_IT+0xbc>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d018      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x6c>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004152:	d013      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x6c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1d      	ldr	r2, [pc, #116]	; (80041d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00e      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x6c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1c      	ldr	r2, [pc, #112]	; (80041d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d009      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x6c>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1a      	ldr	r2, [pc, #104]	; (80041d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d004      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x6c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a19      	ldr	r2, [pc, #100]	; (80041dc <HAL_TIM_Base_Start_IT+0xcc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d115      	bne.n	80041a8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004184:	4013      	ands	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b06      	cmp	r3, #6
 800418c:	d015      	beq.n	80041ba <HAL_TIM_Base_Start_IT+0xaa>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004194:	d011      	beq.n	80041ba <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a6:	e008      	b.n	80041ba <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	e000      	b.n	80041bc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40000800 	.word	0x40000800
 80041d8:	40013400 	.word	0x40013400
 80041dc:	40014000 	.word	0x40014000
 80041e0:	00010007 	.word	0x00010007

080041e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d122      	bne.n	8004240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b02      	cmp	r3, #2
 8004206:	d11b      	bne.n	8004240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0202 	mvn.w	r2, #2
 8004210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fa60 	bl	80046ec <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fa52 	bl	80046d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fa63 	bl	8004700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b04      	cmp	r3, #4
 800424c:	d122      	bne.n	8004294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b04      	cmp	r3, #4
 800425a:	d11b      	bne.n	8004294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0204 	mvn.w	r2, #4
 8004264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fa36 	bl	80046ec <HAL_TIM_IC_CaptureCallback>
 8004280:	e005      	b.n	800428e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fa28 	bl	80046d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fa39 	bl	8004700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d122      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d11b      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0208 	mvn.w	r2, #8
 80042b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2204      	movs	r2, #4
 80042be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fa0c 	bl	80046ec <HAL_TIM_IC_CaptureCallback>
 80042d4:	e005      	b.n	80042e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f9fe 	bl	80046d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fa0f 	bl	8004700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d122      	bne.n	800433c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b10      	cmp	r3, #16
 8004302:	d11b      	bne.n	800433c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0210 	mvn.w	r2, #16
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2208      	movs	r2, #8
 8004312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f9e2 	bl	80046ec <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f9d4 	bl	80046d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f9e5 	bl	8004700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b01      	cmp	r3, #1
 8004348:	d10e      	bne.n	8004368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b01      	cmp	r3, #1
 8004356:	d107      	bne.n	8004368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0201 	mvn.w	r2, #1
 8004360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fd f93c 	bl	80015e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b80      	cmp	r3, #128	; 0x80
 8004374:	d10e      	bne.n	8004394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004380:	2b80      	cmp	r3, #128	; 0x80
 8004382:	d107      	bne.n	8004394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800438c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fb82 	bl	8004a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a2:	d10e      	bne.n	80043c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b80      	cmp	r3, #128	; 0x80
 80043b0:	d107      	bne.n	80043c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fb75 	bl	8004aac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043cc:	2b40      	cmp	r3, #64	; 0x40
 80043ce:	d10e      	bne.n	80043ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b40      	cmp	r3, #64	; 0x40
 80043dc:	d107      	bne.n	80043ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f993 	bl	8004714 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d10e      	bne.n	800441a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b20      	cmp	r3, #32
 8004408:	d107      	bne.n	800441a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f06f 0220 	mvn.w	r2, #32
 8004412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fb35 	bl	8004a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004428:	d10f      	bne.n	800444a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004438:	d107      	bne.n	800444a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fb3b 	bl	8004ac0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004458:	d10f      	bne.n	800447a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004464:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004468:	d107      	bne.n	800447a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fb2d 	bl	8004ad4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004488:	d10f      	bne.n	80044aa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004498:	d107      	bne.n	80044aa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80044a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fb1f 	bl	8004ae8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044b8:	d10f      	bne.n	80044da <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044c8:	d107      	bne.n	80044da <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80044d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fb11 	bl	8004afc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_TIM_ConfigClockSource+0x1c>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e0de      	b.n	80046be <HAL_TIM_ConfigClockSource+0x1da>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800451e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800452a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a63      	ldr	r2, [pc, #396]	; (80046c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	f000 80a9 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x1ae>
 8004540:	4a61      	ldr	r2, [pc, #388]	; (80046c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	f200 80ae 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004548:	4a60      	ldr	r2, [pc, #384]	; (80046cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	f000 80a1 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x1ae>
 8004550:	4a5e      	ldr	r2, [pc, #376]	; (80046cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	f200 80a6 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004558:	4a5d      	ldr	r2, [pc, #372]	; (80046d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800455a:	4293      	cmp	r3, r2
 800455c:	f000 8099 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x1ae>
 8004560:	4a5b      	ldr	r2, [pc, #364]	; (80046d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004562:	4293      	cmp	r3, r2
 8004564:	f200 809e 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004568:	4a5a      	ldr	r2, [pc, #360]	; (80046d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	f000 8091 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x1ae>
 8004570:	4a58      	ldr	r2, [pc, #352]	; (80046d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	f200 8096 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004578:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800457c:	f000 8089 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x1ae>
 8004580:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004584:	f200 808e 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458c:	d03e      	beq.n	800460c <HAL_TIM_ConfigClockSource+0x128>
 800458e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004592:	f200 8087 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459a:	f000 8086 	beq.w	80046aa <HAL_TIM_ConfigClockSource+0x1c6>
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a2:	d87f      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80045a4:	2b70      	cmp	r3, #112	; 0x70
 80045a6:	d01a      	beq.n	80045de <HAL_TIM_ConfigClockSource+0xfa>
 80045a8:	2b70      	cmp	r3, #112	; 0x70
 80045aa:	d87b      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80045ac:	2b60      	cmp	r3, #96	; 0x60
 80045ae:	d050      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
 80045b0:	2b60      	cmp	r3, #96	; 0x60
 80045b2:	d877      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80045b4:	2b50      	cmp	r3, #80	; 0x50
 80045b6:	d03c      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x14e>
 80045b8:	2b50      	cmp	r3, #80	; 0x50
 80045ba:	d873      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	d058      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x18e>
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d86f      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80045c4:	2b30      	cmp	r3, #48	; 0x30
 80045c6:	d064      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x1ae>
 80045c8:	2b30      	cmp	r3, #48	; 0x30
 80045ca:	d86b      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d060      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x1ae>
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d867      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d05c      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x1ae>
 80045d8:	2b10      	cmp	r3, #16
 80045da:	d05a      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x1ae>
 80045dc:	e062      	b.n	80046a4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6899      	ldr	r1, [r3, #8]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f000 f9a7 	bl	8004940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	609a      	str	r2, [r3, #8]
      break;
 800460a:	e04f      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6899      	ldr	r1, [r3, #8]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f000 f990 	bl	8004940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800462e:	609a      	str	r2, [r3, #8]
      break;
 8004630:	e03c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	461a      	mov	r2, r3
 8004640:	f000 f902 	bl	8004848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2150      	movs	r1, #80	; 0x50
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f95b 	bl	8004906 <TIM_ITRx_SetConfig>
      break;
 8004650:	e02c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6859      	ldr	r1, [r3, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	461a      	mov	r2, r3
 8004660:	f000 f921 	bl	80048a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2160      	movs	r1, #96	; 0x60
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f94b 	bl	8004906 <TIM_ITRx_SetConfig>
      break;
 8004670:	e01c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6859      	ldr	r1, [r3, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	461a      	mov	r2, r3
 8004680:	f000 f8e2 	bl	8004848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2140      	movs	r1, #64	; 0x40
 800468a:	4618      	mov	r0, r3
 800468c:	f000 f93b 	bl	8004906 <TIM_ITRx_SetConfig>
      break;
 8004690:	e00c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f000 f932 	bl	8004906 <TIM_ITRx_SetConfig>
      break;
 80046a2:	e003      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
      break;
 80046a8:	e000      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80046aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	00100070 	.word	0x00100070
 80046cc:	00100040 	.word	0x00100040
 80046d0:	00100030 	.word	0x00100030
 80046d4:	00100020 	.word	0x00100020

080046d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a3c      	ldr	r2, [pc, #240]	; (800482c <TIM_Base_SetConfig+0x104>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00f      	beq.n	8004760 <TIM_Base_SetConfig+0x38>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004746:	d00b      	beq.n	8004760 <TIM_Base_SetConfig+0x38>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a39      	ldr	r2, [pc, #228]	; (8004830 <TIM_Base_SetConfig+0x108>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d007      	beq.n	8004760 <TIM_Base_SetConfig+0x38>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a38      	ldr	r2, [pc, #224]	; (8004834 <TIM_Base_SetConfig+0x10c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d003      	beq.n	8004760 <TIM_Base_SetConfig+0x38>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a37      	ldr	r2, [pc, #220]	; (8004838 <TIM_Base_SetConfig+0x110>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d108      	bne.n	8004772 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a2d      	ldr	r2, [pc, #180]	; (800482c <TIM_Base_SetConfig+0x104>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d01b      	beq.n	80047b2 <TIM_Base_SetConfig+0x8a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004780:	d017      	beq.n	80047b2 <TIM_Base_SetConfig+0x8a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a2a      	ldr	r2, [pc, #168]	; (8004830 <TIM_Base_SetConfig+0x108>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d013      	beq.n	80047b2 <TIM_Base_SetConfig+0x8a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a29      	ldr	r2, [pc, #164]	; (8004834 <TIM_Base_SetConfig+0x10c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00f      	beq.n	80047b2 <TIM_Base_SetConfig+0x8a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a28      	ldr	r2, [pc, #160]	; (8004838 <TIM_Base_SetConfig+0x110>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00b      	beq.n	80047b2 <TIM_Base_SetConfig+0x8a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a27      	ldr	r2, [pc, #156]	; (800483c <TIM_Base_SetConfig+0x114>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d007      	beq.n	80047b2 <TIM_Base_SetConfig+0x8a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a26      	ldr	r2, [pc, #152]	; (8004840 <TIM_Base_SetConfig+0x118>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <TIM_Base_SetConfig+0x8a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a25      	ldr	r2, [pc, #148]	; (8004844 <TIM_Base_SetConfig+0x11c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d108      	bne.n	80047c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a10      	ldr	r2, [pc, #64]	; (800482c <TIM_Base_SetConfig+0x104>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00f      	beq.n	8004810 <TIM_Base_SetConfig+0xe8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a11      	ldr	r2, [pc, #68]	; (8004838 <TIM_Base_SetConfig+0x110>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00b      	beq.n	8004810 <TIM_Base_SetConfig+0xe8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a10      	ldr	r2, [pc, #64]	; (800483c <TIM_Base_SetConfig+0x114>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d007      	beq.n	8004810 <TIM_Base_SetConfig+0xe8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a0f      	ldr	r2, [pc, #60]	; (8004840 <TIM_Base_SetConfig+0x118>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d003      	beq.n	8004810 <TIM_Base_SetConfig+0xe8>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a0e      	ldr	r2, [pc, #56]	; (8004844 <TIM_Base_SetConfig+0x11c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d103      	bne.n	8004818 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	615a      	str	r2, [r3, #20]
}
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40000400 	.word	0x40000400
 8004834:	40000800 	.word	0x40000800
 8004838:	40013400 	.word	0x40013400
 800483c:	40014000 	.word	0x40014000
 8004840:	40014400 	.word	0x40014400
 8004844:	40014800 	.word	0x40014800

08004848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f023 0201 	bic.w	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f023 030a 	bic.w	r3, r3, #10
 8004884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	621a      	str	r2, [r3, #32]
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b087      	sub	sp, #28
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f023 0210 	bic.w	r2, r3, #16
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	031b      	lsls	r3, r3, #12
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	621a      	str	r2, [r3, #32]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004906:	b480      	push	{r7}
 8004908:	b085      	sub	sp, #20
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800491c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	f043 0307 	orr.w	r3, r3, #7
 800492c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	609a      	str	r2, [r3, #8]
}
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800495a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	021a      	lsls	r2, r3, #8
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	431a      	orrs	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4313      	orrs	r3, r2
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	609a      	str	r2, [r3, #8]
}
 8004974:	bf00      	nop
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004994:	2302      	movs	r3, #2
 8004996:	e065      	b.n	8004a64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a2c      	ldr	r2, [pc, #176]	; (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a2b      	ldr	r2, [pc, #172]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d108      	bne.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80049e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1b      	ldr	r2, [pc, #108]	; (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d018      	beq.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a0e:	d013      	beq.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a18      	ldr	r2, [pc, #96]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00e      	beq.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a17      	ldr	r2, [pc, #92]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d009      	beq.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a12      	ldr	r2, [pc, #72]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d004      	beq.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a13      	ldr	r2, [pc, #76]	; (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d10c      	bne.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	40012c00 	.word	0x40012c00
 8004a74:	40013400 	.word	0x40013400
 8004a78:	40000400 	.word	0x40000400
 8004a7c:	40000800 	.word	0x40000800
 8004a80:	40014000 	.word	0x40014000

08004a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e042      	b.n	8004ba8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d106      	bne.n	8004b3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7fc ffb9 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2224      	movs	r2, #36	; 0x24
 8004b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0201 	bic.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f8c2 	bl	8004cdc <UART_SetConfig>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e022      	b.n	8004ba8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fb82 	bl	8005274 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fc09 	bl	80053b8 <UART_CheckIdleState>
 8004ba6:	4603      	mov	r3, r0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	; 0x28
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	f040 8083 	bne.w	8004cd2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_UART_Transmit+0x28>
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e07b      	b.n	8004cd4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_UART_Transmit+0x3a>
 8004be6:	2302      	movs	r3, #2
 8004be8:	e074      	b.n	8004cd4 <HAL_UART_Transmit+0x124>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2221      	movs	r2, #33	; 0x21
 8004bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c02:	f7fd f911 	bl	8001e28 <HAL_GetTick>
 8004c06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	88fa      	ldrh	r2, [r7, #6]
 8004c0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	88fa      	ldrh	r2, [r7, #6]
 8004c14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c20:	d108      	bne.n	8004c34 <HAL_UART_Transmit+0x84>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d104      	bne.n	8004c34 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	e003      	b.n	8004c3c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004c44:	e02c      	b.n	8004ca0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2180      	movs	r1, #128	; 0x80
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 fbfc 	bl	800544e <UART_WaitOnFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e039      	b.n	8004cd4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10b      	bne.n	8004c7e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	3302      	adds	r3, #2
 8004c7a:	61bb      	str	r3, [r7, #24]
 8004c7c:	e007      	b.n	8004c8e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	781a      	ldrb	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1cc      	bne.n	8004c46 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2140      	movs	r1, #64	; 0x40
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 fbc9 	bl	800544e <UART_WaitOnFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e006      	b.n	8004cd4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e000      	b.n	8004cd4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
  }
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce0:	b08c      	sub	sp, #48	; 0x30
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4bab      	ldr	r3, [pc, #684]	; (8004fb8 <UART_SetConfig+0x2dc>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d14:	430b      	orrs	r3, r1
 8004d16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4aa0      	ldr	r2, [pc, #640]	; (8004fbc <UART_SetConfig+0x2e0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d44:	4313      	orrs	r3, r2
 8004d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	f023 010f 	bic.w	r1, r3, #15
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a91      	ldr	r2, [pc, #580]	; (8004fc0 <UART_SetConfig+0x2e4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d125      	bne.n	8004dcc <UART_SetConfig+0xf0>
 8004d80:	4b90      	ldr	r3, [pc, #576]	; (8004fc4 <UART_SetConfig+0x2e8>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d81a      	bhi.n	8004dc4 <UART_SetConfig+0xe8>
 8004d8e:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <UART_SetConfig+0xb8>)
 8004d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d94:	08004da5 	.word	0x08004da5
 8004d98:	08004db5 	.word	0x08004db5
 8004d9c:	08004dad 	.word	0x08004dad
 8004da0:	08004dbd 	.word	0x08004dbd
 8004da4:	2301      	movs	r3, #1
 8004da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004daa:	e0d6      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004dac:	2302      	movs	r3, #2
 8004dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004db2:	e0d2      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004db4:	2304      	movs	r3, #4
 8004db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dba:	e0ce      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004dbc:	2308      	movs	r3, #8
 8004dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dc2:	e0ca      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dca:	e0c6      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a7d      	ldr	r2, [pc, #500]	; (8004fc8 <UART_SetConfig+0x2ec>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d138      	bne.n	8004e48 <UART_SetConfig+0x16c>
 8004dd6:	4b7b      	ldr	r3, [pc, #492]	; (8004fc4 <UART_SetConfig+0x2e8>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ddc:	f003 030c 	and.w	r3, r3, #12
 8004de0:	2b0c      	cmp	r3, #12
 8004de2:	d82d      	bhi.n	8004e40 <UART_SetConfig+0x164>
 8004de4:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <UART_SetConfig+0x110>)
 8004de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dea:	bf00      	nop
 8004dec:	08004e21 	.word	0x08004e21
 8004df0:	08004e41 	.word	0x08004e41
 8004df4:	08004e41 	.word	0x08004e41
 8004df8:	08004e41 	.word	0x08004e41
 8004dfc:	08004e31 	.word	0x08004e31
 8004e00:	08004e41 	.word	0x08004e41
 8004e04:	08004e41 	.word	0x08004e41
 8004e08:	08004e41 	.word	0x08004e41
 8004e0c:	08004e29 	.word	0x08004e29
 8004e10:	08004e41 	.word	0x08004e41
 8004e14:	08004e41 	.word	0x08004e41
 8004e18:	08004e41 	.word	0x08004e41
 8004e1c:	08004e39 	.word	0x08004e39
 8004e20:	2300      	movs	r3, #0
 8004e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e26:	e098      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e2e:	e094      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004e30:	2304      	movs	r3, #4
 8004e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e36:	e090      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004e38:	2308      	movs	r3, #8
 8004e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e3e:	e08c      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004e40:	2310      	movs	r3, #16
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e46:	e088      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a5f      	ldr	r2, [pc, #380]	; (8004fcc <UART_SetConfig+0x2f0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d125      	bne.n	8004e9e <UART_SetConfig+0x1c2>
 8004e52:	4b5c      	ldr	r3, [pc, #368]	; (8004fc4 <UART_SetConfig+0x2e8>)
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e5c:	2b30      	cmp	r3, #48	; 0x30
 8004e5e:	d016      	beq.n	8004e8e <UART_SetConfig+0x1b2>
 8004e60:	2b30      	cmp	r3, #48	; 0x30
 8004e62:	d818      	bhi.n	8004e96 <UART_SetConfig+0x1ba>
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d00a      	beq.n	8004e7e <UART_SetConfig+0x1a2>
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	d814      	bhi.n	8004e96 <UART_SetConfig+0x1ba>
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <UART_SetConfig+0x19a>
 8004e70:	2b10      	cmp	r3, #16
 8004e72:	d008      	beq.n	8004e86 <UART_SetConfig+0x1aa>
 8004e74:	e00f      	b.n	8004e96 <UART_SetConfig+0x1ba>
 8004e76:	2300      	movs	r3, #0
 8004e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e7c:	e06d      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e84:	e069      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004e86:	2304      	movs	r3, #4
 8004e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e8c:	e065      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004e8e:	2308      	movs	r3, #8
 8004e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e94:	e061      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004e96:	2310      	movs	r3, #16
 8004e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e9c:	e05d      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a4b      	ldr	r2, [pc, #300]	; (8004fd0 <UART_SetConfig+0x2f4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d125      	bne.n	8004ef4 <UART_SetConfig+0x218>
 8004ea8:	4b46      	ldr	r3, [pc, #280]	; (8004fc4 <UART_SetConfig+0x2e8>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8004eb4:	d016      	beq.n	8004ee4 <UART_SetConfig+0x208>
 8004eb6:	2bc0      	cmp	r3, #192	; 0xc0
 8004eb8:	d818      	bhi.n	8004eec <UART_SetConfig+0x210>
 8004eba:	2b80      	cmp	r3, #128	; 0x80
 8004ebc:	d00a      	beq.n	8004ed4 <UART_SetConfig+0x1f8>
 8004ebe:	2b80      	cmp	r3, #128	; 0x80
 8004ec0:	d814      	bhi.n	8004eec <UART_SetConfig+0x210>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <UART_SetConfig+0x1f0>
 8004ec6:	2b40      	cmp	r3, #64	; 0x40
 8004ec8:	d008      	beq.n	8004edc <UART_SetConfig+0x200>
 8004eca:	e00f      	b.n	8004eec <UART_SetConfig+0x210>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ed2:	e042      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eda:	e03e      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004edc:	2304      	movs	r3, #4
 8004ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ee2:	e03a      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004ee4:	2308      	movs	r3, #8
 8004ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eea:	e036      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004eec:	2310      	movs	r3, #16
 8004eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ef2:	e032      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a30      	ldr	r2, [pc, #192]	; (8004fbc <UART_SetConfig+0x2e0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d12a      	bne.n	8004f54 <UART_SetConfig+0x278>
 8004efe:	4b31      	ldr	r3, [pc, #196]	; (8004fc4 <UART_SetConfig+0x2e8>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f0c:	d01a      	beq.n	8004f44 <UART_SetConfig+0x268>
 8004f0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f12:	d81b      	bhi.n	8004f4c <UART_SetConfig+0x270>
 8004f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f18:	d00c      	beq.n	8004f34 <UART_SetConfig+0x258>
 8004f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f1e:	d815      	bhi.n	8004f4c <UART_SetConfig+0x270>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <UART_SetConfig+0x250>
 8004f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f28:	d008      	beq.n	8004f3c <UART_SetConfig+0x260>
 8004f2a:	e00f      	b.n	8004f4c <UART_SetConfig+0x270>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f32:	e012      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004f34:	2302      	movs	r3, #2
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f3a:	e00e      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004f3c:	2304      	movs	r3, #4
 8004f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f42:	e00a      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004f44:	2308      	movs	r3, #8
 8004f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f4a:	e006      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004f4c:	2310      	movs	r3, #16
 8004f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f52:	e002      	b.n	8004f5a <UART_SetConfig+0x27e>
 8004f54:	2310      	movs	r3, #16
 8004f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a17      	ldr	r2, [pc, #92]	; (8004fbc <UART_SetConfig+0x2e0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	f040 80a8 	bne.w	80050b6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d834      	bhi.n	8004fd8 <UART_SetConfig+0x2fc>
 8004f6e:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <UART_SetConfig+0x298>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004f99 	.word	0x08004f99
 8004f78:	08004fd9 	.word	0x08004fd9
 8004f7c:	08004fa1 	.word	0x08004fa1
 8004f80:	08004fd9 	.word	0x08004fd9
 8004f84:	08004fa7 	.word	0x08004fa7
 8004f88:	08004fd9 	.word	0x08004fd9
 8004f8c:	08004fd9 	.word	0x08004fd9
 8004f90:	08004fd9 	.word	0x08004fd9
 8004f94:	08004faf 	.word	0x08004faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f98:	f7fe fe00 	bl	8003b9c <HAL_RCC_GetPCLK1Freq>
 8004f9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f9e:	e021      	b.n	8004fe4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fa0:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <UART_SetConfig+0x2f8>)
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fa4:	e01e      	b.n	8004fe4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa6:	f7fe fd8b 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8004faa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fac:	e01a      	b.n	8004fe4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fb4:	e016      	b.n	8004fe4 <UART_SetConfig+0x308>
 8004fb6:	bf00      	nop
 8004fb8:	cfff69f3 	.word	0xcfff69f3
 8004fbc:	40008000 	.word	0x40008000
 8004fc0:	40013800 	.word	0x40013800
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40004400 	.word	0x40004400
 8004fcc:	40004800 	.word	0x40004800
 8004fd0:	40004c00 	.word	0x40004c00
 8004fd4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004fe2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 812a 	beq.w	8005240 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	4a9e      	ldr	r2, [pc, #632]	; (800526c <UART_SetConfig+0x590>)
 8004ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	4413      	add	r3, r2
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	429a      	cmp	r2, r3
 800500e:	d305      	bcc.n	800501c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	429a      	cmp	r2, r3
 800501a:	d903      	bls.n	8005024 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005022:	e10d      	b.n	8005240 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	2200      	movs	r2, #0
 8005028:	60bb      	str	r3, [r7, #8]
 800502a:	60fa      	str	r2, [r7, #12]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	4a8e      	ldr	r2, [pc, #568]	; (800526c <UART_SetConfig+0x590>)
 8005032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005036:	b29b      	uxth	r3, r3
 8005038:	2200      	movs	r2, #0
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	607a      	str	r2, [r7, #4]
 800503e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005042:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005046:	f7fb fdb9 	bl	8000bbc <__aeabi_uldivmod>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4610      	mov	r0, r2
 8005050:	4619      	mov	r1, r3
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	020b      	lsls	r3, r1, #8
 800505c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005060:	0202      	lsls	r2, r0, #8
 8005062:	6979      	ldr	r1, [r7, #20]
 8005064:	6849      	ldr	r1, [r1, #4]
 8005066:	0849      	lsrs	r1, r1, #1
 8005068:	2000      	movs	r0, #0
 800506a:	460c      	mov	r4, r1
 800506c:	4605      	mov	r5, r0
 800506e:	eb12 0804 	adds.w	r8, r2, r4
 8005072:	eb43 0905 	adc.w	r9, r3, r5
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	469a      	mov	sl, r3
 800507e:	4693      	mov	fp, r2
 8005080:	4652      	mov	r2, sl
 8005082:	465b      	mov	r3, fp
 8005084:	4640      	mov	r0, r8
 8005086:	4649      	mov	r1, r9
 8005088:	f7fb fd98 	bl	8000bbc <__aeabi_uldivmod>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4613      	mov	r3, r2
 8005092:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800509a:	d308      	bcc.n	80050ae <UART_SetConfig+0x3d2>
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050a2:	d204      	bcs.n	80050ae <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6a3a      	ldr	r2, [r7, #32]
 80050aa:	60da      	str	r2, [r3, #12]
 80050ac:	e0c8      	b.n	8005240 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050b4:	e0c4      	b.n	8005240 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050be:	d167      	bne.n	8005190 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80050c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d828      	bhi.n	800511a <UART_SetConfig+0x43e>
 80050c8:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <UART_SetConfig+0x3f4>)
 80050ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ce:	bf00      	nop
 80050d0:	080050f5 	.word	0x080050f5
 80050d4:	080050fd 	.word	0x080050fd
 80050d8:	08005105 	.word	0x08005105
 80050dc:	0800511b 	.word	0x0800511b
 80050e0:	0800510b 	.word	0x0800510b
 80050e4:	0800511b 	.word	0x0800511b
 80050e8:	0800511b 	.word	0x0800511b
 80050ec:	0800511b 	.word	0x0800511b
 80050f0:	08005113 	.word	0x08005113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f4:	f7fe fd52 	bl	8003b9c <HAL_RCC_GetPCLK1Freq>
 80050f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050fa:	e014      	b.n	8005126 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050fc:	f7fe fd64 	bl	8003bc8 <HAL_RCC_GetPCLK2Freq>
 8005100:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005102:	e010      	b.n	8005126 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005104:	4b5a      	ldr	r3, [pc, #360]	; (8005270 <UART_SetConfig+0x594>)
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005108:	e00d      	b.n	8005126 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800510a:	f7fe fcd9 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 800510e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005110:	e009      	b.n	8005126 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005118:	e005      	b.n	8005126 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005124:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 8089 	beq.w	8005240 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	4a4e      	ldr	r2, [pc, #312]	; (800526c <UART_SetConfig+0x590>)
 8005134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005138:	461a      	mov	r2, r3
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005140:	005a      	lsls	r2, r3, #1
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	085b      	lsrs	r3, r3, #1
 8005148:	441a      	add	r2, r3
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005152:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	2b0f      	cmp	r3, #15
 8005158:	d916      	bls.n	8005188 <UART_SetConfig+0x4ac>
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005160:	d212      	bcs.n	8005188 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f023 030f 	bic.w	r3, r3, #15
 800516a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	b29b      	uxth	r3, r3
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	b29a      	uxth	r2, r3
 8005178:	8bfb      	ldrh	r3, [r7, #30]
 800517a:	4313      	orrs	r3, r2
 800517c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	8bfa      	ldrh	r2, [r7, #30]
 8005184:	60da      	str	r2, [r3, #12]
 8005186:	e05b      	b.n	8005240 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800518e:	e057      	b.n	8005240 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005190:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005194:	2b08      	cmp	r3, #8
 8005196:	d828      	bhi.n	80051ea <UART_SetConfig+0x50e>
 8005198:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <UART_SetConfig+0x4c4>)
 800519a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519e:	bf00      	nop
 80051a0:	080051c5 	.word	0x080051c5
 80051a4:	080051cd 	.word	0x080051cd
 80051a8:	080051d5 	.word	0x080051d5
 80051ac:	080051eb 	.word	0x080051eb
 80051b0:	080051db 	.word	0x080051db
 80051b4:	080051eb 	.word	0x080051eb
 80051b8:	080051eb 	.word	0x080051eb
 80051bc:	080051eb 	.word	0x080051eb
 80051c0:	080051e3 	.word	0x080051e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c4:	f7fe fcea 	bl	8003b9c <HAL_RCC_GetPCLK1Freq>
 80051c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051ca:	e014      	b.n	80051f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051cc:	f7fe fcfc 	bl	8003bc8 <HAL_RCC_GetPCLK2Freq>
 80051d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051d2:	e010      	b.n	80051f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d4:	4b26      	ldr	r3, [pc, #152]	; (8005270 <UART_SetConfig+0x594>)
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051d8:	e00d      	b.n	80051f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051da:	f7fe fc71 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 80051de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051e0:	e009      	b.n	80051f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051e8:	e005      	b.n	80051f6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80051f4:	bf00      	nop
    }

    if (pclk != 0U)
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d021      	beq.n	8005240 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	4a1a      	ldr	r2, [pc, #104]	; (800526c <UART_SetConfig+0x590>)
 8005202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005206:	461a      	mov	r2, r3
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	fbb3 f2f2 	udiv	r2, r3, r2
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	441a      	add	r2, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	fbb2 f3f3 	udiv	r3, r2, r3
 800521e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	2b0f      	cmp	r3, #15
 8005224:	d909      	bls.n	800523a <UART_SetConfig+0x55e>
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522c:	d205      	bcs.n	800523a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	b29a      	uxth	r2, r3
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60da      	str	r2, [r3, #12]
 8005238:	e002      	b.n	8005240 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2201      	movs	r2, #1
 8005244:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2201      	movs	r2, #1
 800524c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2200      	movs	r2, #0
 8005254:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2200      	movs	r2, #0
 800525a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800525c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005260:	4618      	mov	r0, r3
 8005262:	3730      	adds	r7, #48	; 0x30
 8005264:	46bd      	mov	sp, r7
 8005266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800526a:	bf00      	nop
 800526c:	08007ae4 	.word	0x08007ae4
 8005270:	00f42400 	.word	0x00f42400

08005274 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01a      	beq.n	800538a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005372:	d10a      	bne.n	800538a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	605a      	str	r2, [r3, #4]
  }
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af02      	add	r7, sp, #8
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053c8:	f7fc fd2e 	bl	8001e28 <HAL_GetTick>
 80053cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d10e      	bne.n	80053fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f82f 	bl	800544e <UART_WaitOnFlagUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e025      	b.n	8005446 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b04      	cmp	r3, #4
 8005406:	d10e      	bne.n	8005426 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005408:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f819 	bl	800544e <UART_WaitOnFlagUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e00f      	b.n	8005446 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b09c      	sub	sp, #112	; 0x70
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	603b      	str	r3, [r7, #0]
 800545a:	4613      	mov	r3, r2
 800545c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800545e:	e0a9      	b.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005466:	f000 80a5 	beq.w	80055b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546a:	f7fc fcdd 	bl	8001e28 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005476:	429a      	cmp	r2, r3
 8005478:	d302      	bcc.n	8005480 <UART_WaitOnFlagUntilTimeout+0x32>
 800547a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800547c:	2b00      	cmp	r3, #0
 800547e:	d140      	bne.n	8005502 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800548e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005490:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005494:	667b      	str	r3, [r7, #100]	; 0x64
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800549e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e6      	bne.n	8005480 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3308      	adds	r3, #8
 80054b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c4:	f023 0301 	bic.w	r3, r3, #1
 80054c8:	663b      	str	r3, [r7, #96]	; 0x60
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3308      	adds	r3, #8
 80054d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80054d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054da:	e841 2300 	strex	r3, r2, [r1]
 80054de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e5      	bne.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e069      	b.n	80055d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d051      	beq.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551e:	d149      	bne.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005528:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800553e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005548:	637b      	str	r3, [r7, #52]	; 0x34
 800554a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800554e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e6      	bne.n	800552a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3308      	adds	r3, #8
 8005562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	613b      	str	r3, [r7, #16]
   return(result);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	66bb      	str	r3, [r7, #104]	; 0x68
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3308      	adds	r3, #8
 800557a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800557c:	623a      	str	r2, [r7, #32]
 800557e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	69f9      	ldr	r1, [r7, #28]
 8005582:	6a3a      	ldr	r2, [r7, #32]
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	61bb      	str	r3, [r7, #24]
   return(result);
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e5      	bne.n	800555c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2220      	movs	r2, #32
 8005594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e010      	b.n	80055d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	69da      	ldr	r2, [r3, #28]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4013      	ands	r3, r2
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	bf0c      	ite	eq
 80055c4:	2301      	moveq	r3, #1
 80055c6:	2300      	movne	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	461a      	mov	r2, r3
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	f43f af46 	beq.w	8005460 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3770      	adds	r7, #112	; 0x70
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055de:	b480      	push	{r7}
 80055e0:	b085      	sub	sp, #20
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e027      	b.n	8005644 <HAL_UARTEx_DisableFifoMode+0x66>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2224      	movs	r2, #36	; 0x24
 8005600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0201 	bic.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005622:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005664:	2302      	movs	r3, #2
 8005666:	e02d      	b.n	80056c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2224      	movs	r2, #36	; 0x24
 8005674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f84f 	bl	8005748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e02d      	b.n	8005740 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2224      	movs	r2, #36	; 0x24
 80056f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0201 	bic.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f811 	bl	8005748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005754:	2b00      	cmp	r3, #0
 8005756:	d108      	bne.n	800576a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005768:	e031      	b.n	80057ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800576a:	2308      	movs	r3, #8
 800576c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800576e:	2308      	movs	r3, #8
 8005770:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	0e5b      	lsrs	r3, r3, #25
 800577a:	b2db      	uxtb	r3, r3
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	0f5b      	lsrs	r3, r3, #29
 800578a:	b2db      	uxtb	r3, r3
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005792:	7bbb      	ldrb	r3, [r7, #14]
 8005794:	7b3a      	ldrb	r2, [r7, #12]
 8005796:	4911      	ldr	r1, [pc, #68]	; (80057dc <UARTEx_SetNbDataToProcess+0x94>)
 8005798:	5c8a      	ldrb	r2, [r1, r2]
 800579a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800579e:	7b3a      	ldrb	r2, [r7, #12]
 80057a0:	490f      	ldr	r1, [pc, #60]	; (80057e0 <UARTEx_SetNbDataToProcess+0x98>)
 80057a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	7b7a      	ldrb	r2, [r7, #13]
 80057b4:	4909      	ldr	r1, [pc, #36]	; (80057dc <UARTEx_SetNbDataToProcess+0x94>)
 80057b6:	5c8a      	ldrb	r2, [r1, r2]
 80057b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057bc:	7b7a      	ldrb	r2, [r7, #13]
 80057be:	4908      	ldr	r1, [pc, #32]	; (80057e0 <UARTEx_SetNbDataToProcess+0x98>)
 80057c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80057ce:	bf00      	nop
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	08007afc 	.word	0x08007afc
 80057e0:	08007b04 	.word	0x08007b04

080057e4 <__errno>:
 80057e4:	4b01      	ldr	r3, [pc, #4]	; (80057ec <__errno+0x8>)
 80057e6:	6818      	ldr	r0, [r3, #0]
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	20000034 	.word	0x20000034

080057f0 <__libc_init_array>:
 80057f0:	b570      	push	{r4, r5, r6, lr}
 80057f2:	4d0d      	ldr	r5, [pc, #52]	; (8005828 <__libc_init_array+0x38>)
 80057f4:	4c0d      	ldr	r4, [pc, #52]	; (800582c <__libc_init_array+0x3c>)
 80057f6:	1b64      	subs	r4, r4, r5
 80057f8:	10a4      	asrs	r4, r4, #2
 80057fa:	2600      	movs	r6, #0
 80057fc:	42a6      	cmp	r6, r4
 80057fe:	d109      	bne.n	8005814 <__libc_init_array+0x24>
 8005800:	4d0b      	ldr	r5, [pc, #44]	; (8005830 <__libc_init_array+0x40>)
 8005802:	4c0c      	ldr	r4, [pc, #48]	; (8005834 <__libc_init_array+0x44>)
 8005804:	f002 f922 	bl	8007a4c <_init>
 8005808:	1b64      	subs	r4, r4, r5
 800580a:	10a4      	asrs	r4, r4, #2
 800580c:	2600      	movs	r6, #0
 800580e:	42a6      	cmp	r6, r4
 8005810:	d105      	bne.n	800581e <__libc_init_array+0x2e>
 8005812:	bd70      	pop	{r4, r5, r6, pc}
 8005814:	f855 3b04 	ldr.w	r3, [r5], #4
 8005818:	4798      	blx	r3
 800581a:	3601      	adds	r6, #1
 800581c:	e7ee      	b.n	80057fc <__libc_init_array+0xc>
 800581e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005822:	4798      	blx	r3
 8005824:	3601      	adds	r6, #1
 8005826:	e7f2      	b.n	800580e <__libc_init_array+0x1e>
 8005828:	08007d88 	.word	0x08007d88
 800582c:	08007d88 	.word	0x08007d88
 8005830:	08007d88 	.word	0x08007d88
 8005834:	08007d8c 	.word	0x08007d8c

08005838 <memset>:
 8005838:	4402      	add	r2, r0
 800583a:	4603      	mov	r3, r0
 800583c:	4293      	cmp	r3, r2
 800583e:	d100      	bne.n	8005842 <memset+0xa>
 8005840:	4770      	bx	lr
 8005842:	f803 1b01 	strb.w	r1, [r3], #1
 8005846:	e7f9      	b.n	800583c <memset+0x4>

08005848 <iprintf>:
 8005848:	b40f      	push	{r0, r1, r2, r3}
 800584a:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <iprintf+0x2c>)
 800584c:	b513      	push	{r0, r1, r4, lr}
 800584e:	681c      	ldr	r4, [r3, #0]
 8005850:	b124      	cbz	r4, 800585c <iprintf+0x14>
 8005852:	69a3      	ldr	r3, [r4, #24]
 8005854:	b913      	cbnz	r3, 800585c <iprintf+0x14>
 8005856:	4620      	mov	r0, r4
 8005858:	f000 f9f6 	bl	8005c48 <__sinit>
 800585c:	ab05      	add	r3, sp, #20
 800585e:	9a04      	ldr	r2, [sp, #16]
 8005860:	68a1      	ldr	r1, [r4, #8]
 8005862:	9301      	str	r3, [sp, #4]
 8005864:	4620      	mov	r0, r4
 8005866:	f000 fc07 	bl	8006078 <_vfiprintf_r>
 800586a:	b002      	add	sp, #8
 800586c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005870:	b004      	add	sp, #16
 8005872:	4770      	bx	lr
 8005874:	20000034 	.word	0x20000034

08005878 <setbuf>:
 8005878:	2900      	cmp	r1, #0
 800587a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800587e:	bf0c      	ite	eq
 8005880:	2202      	moveq	r2, #2
 8005882:	2200      	movne	r2, #0
 8005884:	f000 b800 	b.w	8005888 <setvbuf>

08005888 <setvbuf>:
 8005888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800588c:	461d      	mov	r5, r3
 800588e:	4b5d      	ldr	r3, [pc, #372]	; (8005a04 <setvbuf+0x17c>)
 8005890:	681f      	ldr	r7, [r3, #0]
 8005892:	4604      	mov	r4, r0
 8005894:	460e      	mov	r6, r1
 8005896:	4690      	mov	r8, r2
 8005898:	b127      	cbz	r7, 80058a4 <setvbuf+0x1c>
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	b913      	cbnz	r3, 80058a4 <setvbuf+0x1c>
 800589e:	4638      	mov	r0, r7
 80058a0:	f000 f9d2 	bl	8005c48 <__sinit>
 80058a4:	4b58      	ldr	r3, [pc, #352]	; (8005a08 <setvbuf+0x180>)
 80058a6:	429c      	cmp	r4, r3
 80058a8:	d167      	bne.n	800597a <setvbuf+0xf2>
 80058aa:	687c      	ldr	r4, [r7, #4]
 80058ac:	f1b8 0f02 	cmp.w	r8, #2
 80058b0:	d006      	beq.n	80058c0 <setvbuf+0x38>
 80058b2:	f1b8 0f01 	cmp.w	r8, #1
 80058b6:	f200 809f 	bhi.w	80059f8 <setvbuf+0x170>
 80058ba:	2d00      	cmp	r5, #0
 80058bc:	f2c0 809c 	blt.w	80059f8 <setvbuf+0x170>
 80058c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058c2:	07db      	lsls	r3, r3, #31
 80058c4:	d405      	bmi.n	80058d2 <setvbuf+0x4a>
 80058c6:	89a3      	ldrh	r3, [r4, #12]
 80058c8:	0598      	lsls	r0, r3, #22
 80058ca:	d402      	bmi.n	80058d2 <setvbuf+0x4a>
 80058cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ce:	f000 fa59 	bl	8005d84 <__retarget_lock_acquire_recursive>
 80058d2:	4621      	mov	r1, r4
 80058d4:	4638      	mov	r0, r7
 80058d6:	f000 f923 	bl	8005b20 <_fflush_r>
 80058da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058dc:	b141      	cbz	r1, 80058f0 <setvbuf+0x68>
 80058de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058e2:	4299      	cmp	r1, r3
 80058e4:	d002      	beq.n	80058ec <setvbuf+0x64>
 80058e6:	4638      	mov	r0, r7
 80058e8:	f000 fabc 	bl	8005e64 <_free_r>
 80058ec:	2300      	movs	r3, #0
 80058ee:	6363      	str	r3, [r4, #52]	; 0x34
 80058f0:	2300      	movs	r3, #0
 80058f2:	61a3      	str	r3, [r4, #24]
 80058f4:	6063      	str	r3, [r4, #4]
 80058f6:	89a3      	ldrh	r3, [r4, #12]
 80058f8:	0619      	lsls	r1, r3, #24
 80058fa:	d503      	bpl.n	8005904 <setvbuf+0x7c>
 80058fc:	6921      	ldr	r1, [r4, #16]
 80058fe:	4638      	mov	r0, r7
 8005900:	f000 fab0 	bl	8005e64 <_free_r>
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	f1b8 0f02 	cmp.w	r8, #2
 8005912:	81a3      	strh	r3, [r4, #12]
 8005914:	d06c      	beq.n	80059f0 <setvbuf+0x168>
 8005916:	ab01      	add	r3, sp, #4
 8005918:	466a      	mov	r2, sp
 800591a:	4621      	mov	r1, r4
 800591c:	4638      	mov	r0, r7
 800591e:	f000 fa33 	bl	8005d88 <__swhatbuf_r>
 8005922:	89a3      	ldrh	r3, [r4, #12]
 8005924:	4318      	orrs	r0, r3
 8005926:	81a0      	strh	r0, [r4, #12]
 8005928:	2d00      	cmp	r5, #0
 800592a:	d130      	bne.n	800598e <setvbuf+0x106>
 800592c:	9d00      	ldr	r5, [sp, #0]
 800592e:	4628      	mov	r0, r5
 8005930:	f000 fa90 	bl	8005e54 <malloc>
 8005934:	4606      	mov	r6, r0
 8005936:	2800      	cmp	r0, #0
 8005938:	d155      	bne.n	80059e6 <setvbuf+0x15e>
 800593a:	f8dd 9000 	ldr.w	r9, [sp]
 800593e:	45a9      	cmp	r9, r5
 8005940:	d14a      	bne.n	80059d8 <setvbuf+0x150>
 8005942:	f04f 35ff 	mov.w	r5, #4294967295
 8005946:	2200      	movs	r2, #0
 8005948:	60a2      	str	r2, [r4, #8]
 800594a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800594e:	6022      	str	r2, [r4, #0]
 8005950:	6122      	str	r2, [r4, #16]
 8005952:	2201      	movs	r2, #1
 8005954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005958:	6162      	str	r2, [r4, #20]
 800595a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800595c:	f043 0302 	orr.w	r3, r3, #2
 8005960:	07d2      	lsls	r2, r2, #31
 8005962:	81a3      	strh	r3, [r4, #12]
 8005964:	d405      	bmi.n	8005972 <setvbuf+0xea>
 8005966:	f413 7f00 	tst.w	r3, #512	; 0x200
 800596a:	d102      	bne.n	8005972 <setvbuf+0xea>
 800596c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800596e:	f000 fa0a 	bl	8005d86 <__retarget_lock_release_recursive>
 8005972:	4628      	mov	r0, r5
 8005974:	b003      	add	sp, #12
 8005976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800597a:	4b24      	ldr	r3, [pc, #144]	; (8005a0c <setvbuf+0x184>)
 800597c:	429c      	cmp	r4, r3
 800597e:	d101      	bne.n	8005984 <setvbuf+0xfc>
 8005980:	68bc      	ldr	r4, [r7, #8]
 8005982:	e793      	b.n	80058ac <setvbuf+0x24>
 8005984:	4b22      	ldr	r3, [pc, #136]	; (8005a10 <setvbuf+0x188>)
 8005986:	429c      	cmp	r4, r3
 8005988:	bf08      	it	eq
 800598a:	68fc      	ldreq	r4, [r7, #12]
 800598c:	e78e      	b.n	80058ac <setvbuf+0x24>
 800598e:	2e00      	cmp	r6, #0
 8005990:	d0cd      	beq.n	800592e <setvbuf+0xa6>
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	b913      	cbnz	r3, 800599c <setvbuf+0x114>
 8005996:	4638      	mov	r0, r7
 8005998:	f000 f956 	bl	8005c48 <__sinit>
 800599c:	f1b8 0f01 	cmp.w	r8, #1
 80059a0:	bf08      	it	eq
 80059a2:	89a3      	ldrheq	r3, [r4, #12]
 80059a4:	6026      	str	r6, [r4, #0]
 80059a6:	bf04      	itt	eq
 80059a8:	f043 0301 	orreq.w	r3, r3, #1
 80059ac:	81a3      	strheq	r3, [r4, #12]
 80059ae:	89a2      	ldrh	r2, [r4, #12]
 80059b0:	f012 0308 	ands.w	r3, r2, #8
 80059b4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80059b8:	d01c      	beq.n	80059f4 <setvbuf+0x16c>
 80059ba:	07d3      	lsls	r3, r2, #31
 80059bc:	bf41      	itttt	mi
 80059be:	2300      	movmi	r3, #0
 80059c0:	426d      	negmi	r5, r5
 80059c2:	60a3      	strmi	r3, [r4, #8]
 80059c4:	61a5      	strmi	r5, [r4, #24]
 80059c6:	bf58      	it	pl
 80059c8:	60a5      	strpl	r5, [r4, #8]
 80059ca:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80059cc:	f015 0501 	ands.w	r5, r5, #1
 80059d0:	d115      	bne.n	80059fe <setvbuf+0x176>
 80059d2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80059d6:	e7c8      	b.n	800596a <setvbuf+0xe2>
 80059d8:	4648      	mov	r0, r9
 80059da:	f000 fa3b 	bl	8005e54 <malloc>
 80059de:	4606      	mov	r6, r0
 80059e0:	2800      	cmp	r0, #0
 80059e2:	d0ae      	beq.n	8005942 <setvbuf+0xba>
 80059e4:	464d      	mov	r5, r9
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ec:	81a3      	strh	r3, [r4, #12]
 80059ee:	e7d0      	b.n	8005992 <setvbuf+0x10a>
 80059f0:	2500      	movs	r5, #0
 80059f2:	e7a8      	b.n	8005946 <setvbuf+0xbe>
 80059f4:	60a3      	str	r3, [r4, #8]
 80059f6:	e7e8      	b.n	80059ca <setvbuf+0x142>
 80059f8:	f04f 35ff 	mov.w	r5, #4294967295
 80059fc:	e7b9      	b.n	8005972 <setvbuf+0xea>
 80059fe:	2500      	movs	r5, #0
 8005a00:	e7b7      	b.n	8005972 <setvbuf+0xea>
 8005a02:	bf00      	nop
 8005a04:	20000034 	.word	0x20000034
 8005a08:	08007b30 	.word	0x08007b30
 8005a0c:	08007b50 	.word	0x08007b50
 8005a10:	08007b10 	.word	0x08007b10

08005a14 <__sflush_r>:
 8005a14:	898a      	ldrh	r2, [r1, #12]
 8005a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	0710      	lsls	r0, r2, #28
 8005a1e:	460c      	mov	r4, r1
 8005a20:	d458      	bmi.n	8005ad4 <__sflush_r+0xc0>
 8005a22:	684b      	ldr	r3, [r1, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	dc05      	bgt.n	8005a34 <__sflush_r+0x20>
 8005a28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	dc02      	bgt.n	8005a34 <__sflush_r+0x20>
 8005a2e:	2000      	movs	r0, #0
 8005a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a36:	2e00      	cmp	r6, #0
 8005a38:	d0f9      	beq.n	8005a2e <__sflush_r+0x1a>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a40:	682f      	ldr	r7, [r5, #0]
 8005a42:	602b      	str	r3, [r5, #0]
 8005a44:	d032      	beq.n	8005aac <__sflush_r+0x98>
 8005a46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	075a      	lsls	r2, r3, #29
 8005a4c:	d505      	bpl.n	8005a5a <__sflush_r+0x46>
 8005a4e:	6863      	ldr	r3, [r4, #4]
 8005a50:	1ac0      	subs	r0, r0, r3
 8005a52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a54:	b10b      	cbz	r3, 8005a5a <__sflush_r+0x46>
 8005a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a58:	1ac0      	subs	r0, r0, r3
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a60:	6a21      	ldr	r1, [r4, #32]
 8005a62:	4628      	mov	r0, r5
 8005a64:	47b0      	blx	r6
 8005a66:	1c43      	adds	r3, r0, #1
 8005a68:	89a3      	ldrh	r3, [r4, #12]
 8005a6a:	d106      	bne.n	8005a7a <__sflush_r+0x66>
 8005a6c:	6829      	ldr	r1, [r5, #0]
 8005a6e:	291d      	cmp	r1, #29
 8005a70:	d82c      	bhi.n	8005acc <__sflush_r+0xb8>
 8005a72:	4a2a      	ldr	r2, [pc, #168]	; (8005b1c <__sflush_r+0x108>)
 8005a74:	40ca      	lsrs	r2, r1
 8005a76:	07d6      	lsls	r6, r2, #31
 8005a78:	d528      	bpl.n	8005acc <__sflush_r+0xb8>
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	6062      	str	r2, [r4, #4]
 8005a7e:	04d9      	lsls	r1, r3, #19
 8005a80:	6922      	ldr	r2, [r4, #16]
 8005a82:	6022      	str	r2, [r4, #0]
 8005a84:	d504      	bpl.n	8005a90 <__sflush_r+0x7c>
 8005a86:	1c42      	adds	r2, r0, #1
 8005a88:	d101      	bne.n	8005a8e <__sflush_r+0x7a>
 8005a8a:	682b      	ldr	r3, [r5, #0]
 8005a8c:	b903      	cbnz	r3, 8005a90 <__sflush_r+0x7c>
 8005a8e:	6560      	str	r0, [r4, #84]	; 0x54
 8005a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a92:	602f      	str	r7, [r5, #0]
 8005a94:	2900      	cmp	r1, #0
 8005a96:	d0ca      	beq.n	8005a2e <__sflush_r+0x1a>
 8005a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a9c:	4299      	cmp	r1, r3
 8005a9e:	d002      	beq.n	8005aa6 <__sflush_r+0x92>
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	f000 f9df 	bl	8005e64 <_free_r>
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	6360      	str	r0, [r4, #52]	; 0x34
 8005aaa:	e7c1      	b.n	8005a30 <__sflush_r+0x1c>
 8005aac:	6a21      	ldr	r1, [r4, #32]
 8005aae:	2301      	movs	r3, #1
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	47b0      	blx	r6
 8005ab4:	1c41      	adds	r1, r0, #1
 8005ab6:	d1c7      	bne.n	8005a48 <__sflush_r+0x34>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0c4      	beq.n	8005a48 <__sflush_r+0x34>
 8005abe:	2b1d      	cmp	r3, #29
 8005ac0:	d001      	beq.n	8005ac6 <__sflush_r+0xb2>
 8005ac2:	2b16      	cmp	r3, #22
 8005ac4:	d101      	bne.n	8005aca <__sflush_r+0xb6>
 8005ac6:	602f      	str	r7, [r5, #0]
 8005ac8:	e7b1      	b.n	8005a2e <__sflush_r+0x1a>
 8005aca:	89a3      	ldrh	r3, [r4, #12]
 8005acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ad0:	81a3      	strh	r3, [r4, #12]
 8005ad2:	e7ad      	b.n	8005a30 <__sflush_r+0x1c>
 8005ad4:	690f      	ldr	r7, [r1, #16]
 8005ad6:	2f00      	cmp	r7, #0
 8005ad8:	d0a9      	beq.n	8005a2e <__sflush_r+0x1a>
 8005ada:	0793      	lsls	r3, r2, #30
 8005adc:	680e      	ldr	r6, [r1, #0]
 8005ade:	bf08      	it	eq
 8005ae0:	694b      	ldreq	r3, [r1, #20]
 8005ae2:	600f      	str	r7, [r1, #0]
 8005ae4:	bf18      	it	ne
 8005ae6:	2300      	movne	r3, #0
 8005ae8:	eba6 0807 	sub.w	r8, r6, r7
 8005aec:	608b      	str	r3, [r1, #8]
 8005aee:	f1b8 0f00 	cmp.w	r8, #0
 8005af2:	dd9c      	ble.n	8005a2e <__sflush_r+0x1a>
 8005af4:	6a21      	ldr	r1, [r4, #32]
 8005af6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005af8:	4643      	mov	r3, r8
 8005afa:	463a      	mov	r2, r7
 8005afc:	4628      	mov	r0, r5
 8005afe:	47b0      	blx	r6
 8005b00:	2800      	cmp	r0, #0
 8005b02:	dc06      	bgt.n	8005b12 <__sflush_r+0xfe>
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b0a:	81a3      	strh	r3, [r4, #12]
 8005b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b10:	e78e      	b.n	8005a30 <__sflush_r+0x1c>
 8005b12:	4407      	add	r7, r0
 8005b14:	eba8 0800 	sub.w	r8, r8, r0
 8005b18:	e7e9      	b.n	8005aee <__sflush_r+0xda>
 8005b1a:	bf00      	nop
 8005b1c:	20400001 	.word	0x20400001

08005b20 <_fflush_r>:
 8005b20:	b538      	push	{r3, r4, r5, lr}
 8005b22:	690b      	ldr	r3, [r1, #16]
 8005b24:	4605      	mov	r5, r0
 8005b26:	460c      	mov	r4, r1
 8005b28:	b913      	cbnz	r3, 8005b30 <_fflush_r+0x10>
 8005b2a:	2500      	movs	r5, #0
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	bd38      	pop	{r3, r4, r5, pc}
 8005b30:	b118      	cbz	r0, 8005b3a <_fflush_r+0x1a>
 8005b32:	6983      	ldr	r3, [r0, #24]
 8005b34:	b90b      	cbnz	r3, 8005b3a <_fflush_r+0x1a>
 8005b36:	f000 f887 	bl	8005c48 <__sinit>
 8005b3a:	4b14      	ldr	r3, [pc, #80]	; (8005b8c <_fflush_r+0x6c>)
 8005b3c:	429c      	cmp	r4, r3
 8005b3e:	d11b      	bne.n	8005b78 <_fflush_r+0x58>
 8005b40:	686c      	ldr	r4, [r5, #4]
 8005b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0ef      	beq.n	8005b2a <_fflush_r+0xa>
 8005b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b4c:	07d0      	lsls	r0, r2, #31
 8005b4e:	d404      	bmi.n	8005b5a <_fflush_r+0x3a>
 8005b50:	0599      	lsls	r1, r3, #22
 8005b52:	d402      	bmi.n	8005b5a <_fflush_r+0x3a>
 8005b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b56:	f000 f915 	bl	8005d84 <__retarget_lock_acquire_recursive>
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	4621      	mov	r1, r4
 8005b5e:	f7ff ff59 	bl	8005a14 <__sflush_r>
 8005b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b64:	07da      	lsls	r2, r3, #31
 8005b66:	4605      	mov	r5, r0
 8005b68:	d4e0      	bmi.n	8005b2c <_fflush_r+0xc>
 8005b6a:	89a3      	ldrh	r3, [r4, #12]
 8005b6c:	059b      	lsls	r3, r3, #22
 8005b6e:	d4dd      	bmi.n	8005b2c <_fflush_r+0xc>
 8005b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b72:	f000 f908 	bl	8005d86 <__retarget_lock_release_recursive>
 8005b76:	e7d9      	b.n	8005b2c <_fflush_r+0xc>
 8005b78:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <_fflush_r+0x70>)
 8005b7a:	429c      	cmp	r4, r3
 8005b7c:	d101      	bne.n	8005b82 <_fflush_r+0x62>
 8005b7e:	68ac      	ldr	r4, [r5, #8]
 8005b80:	e7df      	b.n	8005b42 <_fflush_r+0x22>
 8005b82:	4b04      	ldr	r3, [pc, #16]	; (8005b94 <_fflush_r+0x74>)
 8005b84:	429c      	cmp	r4, r3
 8005b86:	bf08      	it	eq
 8005b88:	68ec      	ldreq	r4, [r5, #12]
 8005b8a:	e7da      	b.n	8005b42 <_fflush_r+0x22>
 8005b8c:	08007b30 	.word	0x08007b30
 8005b90:	08007b50 	.word	0x08007b50
 8005b94:	08007b10 	.word	0x08007b10

08005b98 <std>:
 8005b98:	2300      	movs	r3, #0
 8005b9a:	b510      	push	{r4, lr}
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8005ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ba6:	6083      	str	r3, [r0, #8]
 8005ba8:	8181      	strh	r1, [r0, #12]
 8005baa:	6643      	str	r3, [r0, #100]	; 0x64
 8005bac:	81c2      	strh	r2, [r0, #14]
 8005bae:	6183      	str	r3, [r0, #24]
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	2208      	movs	r2, #8
 8005bb4:	305c      	adds	r0, #92	; 0x5c
 8005bb6:	f7ff fe3f 	bl	8005838 <memset>
 8005bba:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <std+0x38>)
 8005bbc:	6263      	str	r3, [r4, #36]	; 0x24
 8005bbe:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <std+0x3c>)
 8005bc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bc2:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <std+0x40>)
 8005bc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bc6:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <std+0x44>)
 8005bc8:	6224      	str	r4, [r4, #32]
 8005bca:	6323      	str	r3, [r4, #48]	; 0x30
 8005bcc:	bd10      	pop	{r4, pc}
 8005bce:	bf00      	nop
 8005bd0:	08006621 	.word	0x08006621
 8005bd4:	08006643 	.word	0x08006643
 8005bd8:	0800667b 	.word	0x0800667b
 8005bdc:	0800669f 	.word	0x0800669f

08005be0 <_cleanup_r>:
 8005be0:	4901      	ldr	r1, [pc, #4]	; (8005be8 <_cleanup_r+0x8>)
 8005be2:	f000 b8af 	b.w	8005d44 <_fwalk_reent>
 8005be6:	bf00      	nop
 8005be8:	08005b21 	.word	0x08005b21

08005bec <__sfmoreglue>:
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	2268      	movs	r2, #104	; 0x68
 8005bf0:	1e4d      	subs	r5, r1, #1
 8005bf2:	4355      	muls	r5, r2
 8005bf4:	460e      	mov	r6, r1
 8005bf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bfa:	f000 f99f 	bl	8005f3c <_malloc_r>
 8005bfe:	4604      	mov	r4, r0
 8005c00:	b140      	cbz	r0, 8005c14 <__sfmoreglue+0x28>
 8005c02:	2100      	movs	r1, #0
 8005c04:	e9c0 1600 	strd	r1, r6, [r0]
 8005c08:	300c      	adds	r0, #12
 8005c0a:	60a0      	str	r0, [r4, #8]
 8005c0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c10:	f7ff fe12 	bl	8005838 <memset>
 8005c14:	4620      	mov	r0, r4
 8005c16:	bd70      	pop	{r4, r5, r6, pc}

08005c18 <__sfp_lock_acquire>:
 8005c18:	4801      	ldr	r0, [pc, #4]	; (8005c20 <__sfp_lock_acquire+0x8>)
 8005c1a:	f000 b8b3 	b.w	8005d84 <__retarget_lock_acquire_recursive>
 8005c1e:	bf00      	nop
 8005c20:	20000271 	.word	0x20000271

08005c24 <__sfp_lock_release>:
 8005c24:	4801      	ldr	r0, [pc, #4]	; (8005c2c <__sfp_lock_release+0x8>)
 8005c26:	f000 b8ae 	b.w	8005d86 <__retarget_lock_release_recursive>
 8005c2a:	bf00      	nop
 8005c2c:	20000271 	.word	0x20000271

08005c30 <__sinit_lock_acquire>:
 8005c30:	4801      	ldr	r0, [pc, #4]	; (8005c38 <__sinit_lock_acquire+0x8>)
 8005c32:	f000 b8a7 	b.w	8005d84 <__retarget_lock_acquire_recursive>
 8005c36:	bf00      	nop
 8005c38:	20000272 	.word	0x20000272

08005c3c <__sinit_lock_release>:
 8005c3c:	4801      	ldr	r0, [pc, #4]	; (8005c44 <__sinit_lock_release+0x8>)
 8005c3e:	f000 b8a2 	b.w	8005d86 <__retarget_lock_release_recursive>
 8005c42:	bf00      	nop
 8005c44:	20000272 	.word	0x20000272

08005c48 <__sinit>:
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	f7ff fff0 	bl	8005c30 <__sinit_lock_acquire>
 8005c50:	69a3      	ldr	r3, [r4, #24]
 8005c52:	b11b      	cbz	r3, 8005c5c <__sinit+0x14>
 8005c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c58:	f7ff bff0 	b.w	8005c3c <__sinit_lock_release>
 8005c5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c60:	6523      	str	r3, [r4, #80]	; 0x50
 8005c62:	4b13      	ldr	r3, [pc, #76]	; (8005cb0 <__sinit+0x68>)
 8005c64:	4a13      	ldr	r2, [pc, #76]	; (8005cb4 <__sinit+0x6c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c6a:	42a3      	cmp	r3, r4
 8005c6c:	bf04      	itt	eq
 8005c6e:	2301      	moveq	r3, #1
 8005c70:	61a3      	streq	r3, [r4, #24]
 8005c72:	4620      	mov	r0, r4
 8005c74:	f000 f820 	bl	8005cb8 <__sfp>
 8005c78:	6060      	str	r0, [r4, #4]
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f000 f81c 	bl	8005cb8 <__sfp>
 8005c80:	60a0      	str	r0, [r4, #8]
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 f818 	bl	8005cb8 <__sfp>
 8005c88:	2200      	movs	r2, #0
 8005c8a:	60e0      	str	r0, [r4, #12]
 8005c8c:	2104      	movs	r1, #4
 8005c8e:	6860      	ldr	r0, [r4, #4]
 8005c90:	f7ff ff82 	bl	8005b98 <std>
 8005c94:	68a0      	ldr	r0, [r4, #8]
 8005c96:	2201      	movs	r2, #1
 8005c98:	2109      	movs	r1, #9
 8005c9a:	f7ff ff7d 	bl	8005b98 <std>
 8005c9e:	68e0      	ldr	r0, [r4, #12]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	2112      	movs	r1, #18
 8005ca4:	f7ff ff78 	bl	8005b98 <std>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	61a3      	str	r3, [r4, #24]
 8005cac:	e7d2      	b.n	8005c54 <__sinit+0xc>
 8005cae:	bf00      	nop
 8005cb0:	08007b0c 	.word	0x08007b0c
 8005cb4:	08005be1 	.word	0x08005be1

08005cb8 <__sfp>:
 8005cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cba:	4607      	mov	r7, r0
 8005cbc:	f7ff ffac 	bl	8005c18 <__sfp_lock_acquire>
 8005cc0:	4b1e      	ldr	r3, [pc, #120]	; (8005d3c <__sfp+0x84>)
 8005cc2:	681e      	ldr	r6, [r3, #0]
 8005cc4:	69b3      	ldr	r3, [r6, #24]
 8005cc6:	b913      	cbnz	r3, 8005cce <__sfp+0x16>
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f7ff ffbd 	bl	8005c48 <__sinit>
 8005cce:	3648      	adds	r6, #72	; 0x48
 8005cd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	d503      	bpl.n	8005ce0 <__sfp+0x28>
 8005cd8:	6833      	ldr	r3, [r6, #0]
 8005cda:	b30b      	cbz	r3, 8005d20 <__sfp+0x68>
 8005cdc:	6836      	ldr	r6, [r6, #0]
 8005cde:	e7f7      	b.n	8005cd0 <__sfp+0x18>
 8005ce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ce4:	b9d5      	cbnz	r5, 8005d1c <__sfp+0x64>
 8005ce6:	4b16      	ldr	r3, [pc, #88]	; (8005d40 <__sfp+0x88>)
 8005ce8:	60e3      	str	r3, [r4, #12]
 8005cea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cee:	6665      	str	r5, [r4, #100]	; 0x64
 8005cf0:	f000 f847 	bl	8005d82 <__retarget_lock_init_recursive>
 8005cf4:	f7ff ff96 	bl	8005c24 <__sfp_lock_release>
 8005cf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d00:	6025      	str	r5, [r4, #0]
 8005d02:	61a5      	str	r5, [r4, #24]
 8005d04:	2208      	movs	r2, #8
 8005d06:	4629      	mov	r1, r5
 8005d08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d0c:	f7ff fd94 	bl	8005838 <memset>
 8005d10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d18:	4620      	mov	r0, r4
 8005d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d1c:	3468      	adds	r4, #104	; 0x68
 8005d1e:	e7d9      	b.n	8005cd4 <__sfp+0x1c>
 8005d20:	2104      	movs	r1, #4
 8005d22:	4638      	mov	r0, r7
 8005d24:	f7ff ff62 	bl	8005bec <__sfmoreglue>
 8005d28:	4604      	mov	r4, r0
 8005d2a:	6030      	str	r0, [r6, #0]
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	d1d5      	bne.n	8005cdc <__sfp+0x24>
 8005d30:	f7ff ff78 	bl	8005c24 <__sfp_lock_release>
 8005d34:	230c      	movs	r3, #12
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	e7ee      	b.n	8005d18 <__sfp+0x60>
 8005d3a:	bf00      	nop
 8005d3c:	08007b0c 	.word	0x08007b0c
 8005d40:	ffff0001 	.word	0xffff0001

08005d44 <_fwalk_reent>:
 8005d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d48:	4606      	mov	r6, r0
 8005d4a:	4688      	mov	r8, r1
 8005d4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d50:	2700      	movs	r7, #0
 8005d52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d56:	f1b9 0901 	subs.w	r9, r9, #1
 8005d5a:	d505      	bpl.n	8005d68 <_fwalk_reent+0x24>
 8005d5c:	6824      	ldr	r4, [r4, #0]
 8005d5e:	2c00      	cmp	r4, #0
 8005d60:	d1f7      	bne.n	8005d52 <_fwalk_reent+0xe>
 8005d62:	4638      	mov	r0, r7
 8005d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d68:	89ab      	ldrh	r3, [r5, #12]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d907      	bls.n	8005d7e <_fwalk_reent+0x3a>
 8005d6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d72:	3301      	adds	r3, #1
 8005d74:	d003      	beq.n	8005d7e <_fwalk_reent+0x3a>
 8005d76:	4629      	mov	r1, r5
 8005d78:	4630      	mov	r0, r6
 8005d7a:	47c0      	blx	r8
 8005d7c:	4307      	orrs	r7, r0
 8005d7e:	3568      	adds	r5, #104	; 0x68
 8005d80:	e7e9      	b.n	8005d56 <_fwalk_reent+0x12>

08005d82 <__retarget_lock_init_recursive>:
 8005d82:	4770      	bx	lr

08005d84 <__retarget_lock_acquire_recursive>:
 8005d84:	4770      	bx	lr

08005d86 <__retarget_lock_release_recursive>:
 8005d86:	4770      	bx	lr

08005d88 <__swhatbuf_r>:
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	460e      	mov	r6, r1
 8005d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d90:	2900      	cmp	r1, #0
 8005d92:	b096      	sub	sp, #88	; 0x58
 8005d94:	4614      	mov	r4, r2
 8005d96:	461d      	mov	r5, r3
 8005d98:	da08      	bge.n	8005dac <__swhatbuf_r+0x24>
 8005d9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	602a      	str	r2, [r5, #0]
 8005da2:	061a      	lsls	r2, r3, #24
 8005da4:	d410      	bmi.n	8005dc8 <__swhatbuf_r+0x40>
 8005da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005daa:	e00e      	b.n	8005dca <__swhatbuf_r+0x42>
 8005dac:	466a      	mov	r2, sp
 8005dae:	f000 fd5d 	bl	800686c <_fstat_r>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	dbf1      	blt.n	8005d9a <__swhatbuf_r+0x12>
 8005db6:	9a01      	ldr	r2, [sp, #4]
 8005db8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005dbc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005dc0:	425a      	negs	r2, r3
 8005dc2:	415a      	adcs	r2, r3
 8005dc4:	602a      	str	r2, [r5, #0]
 8005dc6:	e7ee      	b.n	8005da6 <__swhatbuf_r+0x1e>
 8005dc8:	2340      	movs	r3, #64	; 0x40
 8005dca:	2000      	movs	r0, #0
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	b016      	add	sp, #88	; 0x58
 8005dd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005dd4 <__smakebuf_r>:
 8005dd4:	898b      	ldrh	r3, [r1, #12]
 8005dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dd8:	079d      	lsls	r5, r3, #30
 8005dda:	4606      	mov	r6, r0
 8005ddc:	460c      	mov	r4, r1
 8005dde:	d507      	bpl.n	8005df0 <__smakebuf_r+0x1c>
 8005de0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	6123      	str	r3, [r4, #16]
 8005de8:	2301      	movs	r3, #1
 8005dea:	6163      	str	r3, [r4, #20]
 8005dec:	b002      	add	sp, #8
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	ab01      	add	r3, sp, #4
 8005df2:	466a      	mov	r2, sp
 8005df4:	f7ff ffc8 	bl	8005d88 <__swhatbuf_r>
 8005df8:	9900      	ldr	r1, [sp, #0]
 8005dfa:	4605      	mov	r5, r0
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	f000 f89d 	bl	8005f3c <_malloc_r>
 8005e02:	b948      	cbnz	r0, 8005e18 <__smakebuf_r+0x44>
 8005e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e08:	059a      	lsls	r2, r3, #22
 8005e0a:	d4ef      	bmi.n	8005dec <__smakebuf_r+0x18>
 8005e0c:	f023 0303 	bic.w	r3, r3, #3
 8005e10:	f043 0302 	orr.w	r3, r3, #2
 8005e14:	81a3      	strh	r3, [r4, #12]
 8005e16:	e7e3      	b.n	8005de0 <__smakebuf_r+0xc>
 8005e18:	4b0d      	ldr	r3, [pc, #52]	; (8005e50 <__smakebuf_r+0x7c>)
 8005e1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	6020      	str	r0, [r4, #0]
 8005e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e24:	81a3      	strh	r3, [r4, #12]
 8005e26:	9b00      	ldr	r3, [sp, #0]
 8005e28:	6163      	str	r3, [r4, #20]
 8005e2a:	9b01      	ldr	r3, [sp, #4]
 8005e2c:	6120      	str	r0, [r4, #16]
 8005e2e:	b15b      	cbz	r3, 8005e48 <__smakebuf_r+0x74>
 8005e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e34:	4630      	mov	r0, r6
 8005e36:	f000 fd2b 	bl	8006890 <_isatty_r>
 8005e3a:	b128      	cbz	r0, 8005e48 <__smakebuf_r+0x74>
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	f023 0303 	bic.w	r3, r3, #3
 8005e42:	f043 0301 	orr.w	r3, r3, #1
 8005e46:	81a3      	strh	r3, [r4, #12]
 8005e48:	89a0      	ldrh	r0, [r4, #12]
 8005e4a:	4305      	orrs	r5, r0
 8005e4c:	81a5      	strh	r5, [r4, #12]
 8005e4e:	e7cd      	b.n	8005dec <__smakebuf_r+0x18>
 8005e50:	08005be1 	.word	0x08005be1

08005e54 <malloc>:
 8005e54:	4b02      	ldr	r3, [pc, #8]	; (8005e60 <malloc+0xc>)
 8005e56:	4601      	mov	r1, r0
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	f000 b86f 	b.w	8005f3c <_malloc_r>
 8005e5e:	bf00      	nop
 8005e60:	20000034 	.word	0x20000034

08005e64 <_free_r>:
 8005e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e66:	2900      	cmp	r1, #0
 8005e68:	d044      	beq.n	8005ef4 <_free_r+0x90>
 8005e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e6e:	9001      	str	r0, [sp, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f1a1 0404 	sub.w	r4, r1, #4
 8005e76:	bfb8      	it	lt
 8005e78:	18e4      	addlt	r4, r4, r3
 8005e7a:	f000 fd2b 	bl	80068d4 <__malloc_lock>
 8005e7e:	4a1e      	ldr	r2, [pc, #120]	; (8005ef8 <_free_r+0x94>)
 8005e80:	9801      	ldr	r0, [sp, #4]
 8005e82:	6813      	ldr	r3, [r2, #0]
 8005e84:	b933      	cbnz	r3, 8005e94 <_free_r+0x30>
 8005e86:	6063      	str	r3, [r4, #4]
 8005e88:	6014      	str	r4, [r2, #0]
 8005e8a:	b003      	add	sp, #12
 8005e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e90:	f000 bd26 	b.w	80068e0 <__malloc_unlock>
 8005e94:	42a3      	cmp	r3, r4
 8005e96:	d908      	bls.n	8005eaa <_free_r+0x46>
 8005e98:	6825      	ldr	r5, [r4, #0]
 8005e9a:	1961      	adds	r1, r4, r5
 8005e9c:	428b      	cmp	r3, r1
 8005e9e:	bf01      	itttt	eq
 8005ea0:	6819      	ldreq	r1, [r3, #0]
 8005ea2:	685b      	ldreq	r3, [r3, #4]
 8005ea4:	1949      	addeq	r1, r1, r5
 8005ea6:	6021      	streq	r1, [r4, #0]
 8005ea8:	e7ed      	b.n	8005e86 <_free_r+0x22>
 8005eaa:	461a      	mov	r2, r3
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	b10b      	cbz	r3, 8005eb4 <_free_r+0x50>
 8005eb0:	42a3      	cmp	r3, r4
 8005eb2:	d9fa      	bls.n	8005eaa <_free_r+0x46>
 8005eb4:	6811      	ldr	r1, [r2, #0]
 8005eb6:	1855      	adds	r5, r2, r1
 8005eb8:	42a5      	cmp	r5, r4
 8005eba:	d10b      	bne.n	8005ed4 <_free_r+0x70>
 8005ebc:	6824      	ldr	r4, [r4, #0]
 8005ebe:	4421      	add	r1, r4
 8005ec0:	1854      	adds	r4, r2, r1
 8005ec2:	42a3      	cmp	r3, r4
 8005ec4:	6011      	str	r1, [r2, #0]
 8005ec6:	d1e0      	bne.n	8005e8a <_free_r+0x26>
 8005ec8:	681c      	ldr	r4, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	6053      	str	r3, [r2, #4]
 8005ece:	4421      	add	r1, r4
 8005ed0:	6011      	str	r1, [r2, #0]
 8005ed2:	e7da      	b.n	8005e8a <_free_r+0x26>
 8005ed4:	d902      	bls.n	8005edc <_free_r+0x78>
 8005ed6:	230c      	movs	r3, #12
 8005ed8:	6003      	str	r3, [r0, #0]
 8005eda:	e7d6      	b.n	8005e8a <_free_r+0x26>
 8005edc:	6825      	ldr	r5, [r4, #0]
 8005ede:	1961      	adds	r1, r4, r5
 8005ee0:	428b      	cmp	r3, r1
 8005ee2:	bf04      	itt	eq
 8005ee4:	6819      	ldreq	r1, [r3, #0]
 8005ee6:	685b      	ldreq	r3, [r3, #4]
 8005ee8:	6063      	str	r3, [r4, #4]
 8005eea:	bf04      	itt	eq
 8005eec:	1949      	addeq	r1, r1, r5
 8005eee:	6021      	streq	r1, [r4, #0]
 8005ef0:	6054      	str	r4, [r2, #4]
 8005ef2:	e7ca      	b.n	8005e8a <_free_r+0x26>
 8005ef4:	b003      	add	sp, #12
 8005ef6:	bd30      	pop	{r4, r5, pc}
 8005ef8:	20000274 	.word	0x20000274

08005efc <sbrk_aligned>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	4e0e      	ldr	r6, [pc, #56]	; (8005f38 <sbrk_aligned+0x3c>)
 8005f00:	460c      	mov	r4, r1
 8005f02:	6831      	ldr	r1, [r6, #0]
 8005f04:	4605      	mov	r5, r0
 8005f06:	b911      	cbnz	r1, 8005f0e <sbrk_aligned+0x12>
 8005f08:	f000 fb7a 	bl	8006600 <_sbrk_r>
 8005f0c:	6030      	str	r0, [r6, #0]
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4628      	mov	r0, r5
 8005f12:	f000 fb75 	bl	8006600 <_sbrk_r>
 8005f16:	1c43      	adds	r3, r0, #1
 8005f18:	d00a      	beq.n	8005f30 <sbrk_aligned+0x34>
 8005f1a:	1cc4      	adds	r4, r0, #3
 8005f1c:	f024 0403 	bic.w	r4, r4, #3
 8005f20:	42a0      	cmp	r0, r4
 8005f22:	d007      	beq.n	8005f34 <sbrk_aligned+0x38>
 8005f24:	1a21      	subs	r1, r4, r0
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 fb6a 	bl	8006600 <_sbrk_r>
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	d101      	bne.n	8005f34 <sbrk_aligned+0x38>
 8005f30:	f04f 34ff 	mov.w	r4, #4294967295
 8005f34:	4620      	mov	r0, r4
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	20000278 	.word	0x20000278

08005f3c <_malloc_r>:
 8005f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f40:	1ccd      	adds	r5, r1, #3
 8005f42:	f025 0503 	bic.w	r5, r5, #3
 8005f46:	3508      	adds	r5, #8
 8005f48:	2d0c      	cmp	r5, #12
 8005f4a:	bf38      	it	cc
 8005f4c:	250c      	movcc	r5, #12
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	4607      	mov	r7, r0
 8005f52:	db01      	blt.n	8005f58 <_malloc_r+0x1c>
 8005f54:	42a9      	cmp	r1, r5
 8005f56:	d905      	bls.n	8005f64 <_malloc_r+0x28>
 8005f58:	230c      	movs	r3, #12
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	2600      	movs	r6, #0
 8005f5e:	4630      	mov	r0, r6
 8005f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f64:	4e2e      	ldr	r6, [pc, #184]	; (8006020 <_malloc_r+0xe4>)
 8005f66:	f000 fcb5 	bl	80068d4 <__malloc_lock>
 8005f6a:	6833      	ldr	r3, [r6, #0]
 8005f6c:	461c      	mov	r4, r3
 8005f6e:	bb34      	cbnz	r4, 8005fbe <_malloc_r+0x82>
 8005f70:	4629      	mov	r1, r5
 8005f72:	4638      	mov	r0, r7
 8005f74:	f7ff ffc2 	bl	8005efc <sbrk_aligned>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	d14d      	bne.n	800601a <_malloc_r+0xde>
 8005f7e:	6834      	ldr	r4, [r6, #0]
 8005f80:	4626      	mov	r6, r4
 8005f82:	2e00      	cmp	r6, #0
 8005f84:	d140      	bne.n	8006008 <_malloc_r+0xcc>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	4631      	mov	r1, r6
 8005f8a:	4638      	mov	r0, r7
 8005f8c:	eb04 0803 	add.w	r8, r4, r3
 8005f90:	f000 fb36 	bl	8006600 <_sbrk_r>
 8005f94:	4580      	cmp	r8, r0
 8005f96:	d13a      	bne.n	800600e <_malloc_r+0xd2>
 8005f98:	6821      	ldr	r1, [r4, #0]
 8005f9a:	3503      	adds	r5, #3
 8005f9c:	1a6d      	subs	r5, r5, r1
 8005f9e:	f025 0503 	bic.w	r5, r5, #3
 8005fa2:	3508      	adds	r5, #8
 8005fa4:	2d0c      	cmp	r5, #12
 8005fa6:	bf38      	it	cc
 8005fa8:	250c      	movcc	r5, #12
 8005faa:	4629      	mov	r1, r5
 8005fac:	4638      	mov	r0, r7
 8005fae:	f7ff ffa5 	bl	8005efc <sbrk_aligned>
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d02b      	beq.n	800600e <_malloc_r+0xd2>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	442b      	add	r3, r5
 8005fba:	6023      	str	r3, [r4, #0]
 8005fbc:	e00e      	b.n	8005fdc <_malloc_r+0xa0>
 8005fbe:	6822      	ldr	r2, [r4, #0]
 8005fc0:	1b52      	subs	r2, r2, r5
 8005fc2:	d41e      	bmi.n	8006002 <_malloc_r+0xc6>
 8005fc4:	2a0b      	cmp	r2, #11
 8005fc6:	d916      	bls.n	8005ff6 <_malloc_r+0xba>
 8005fc8:	1961      	adds	r1, r4, r5
 8005fca:	42a3      	cmp	r3, r4
 8005fcc:	6025      	str	r5, [r4, #0]
 8005fce:	bf18      	it	ne
 8005fd0:	6059      	strne	r1, [r3, #4]
 8005fd2:	6863      	ldr	r3, [r4, #4]
 8005fd4:	bf08      	it	eq
 8005fd6:	6031      	streq	r1, [r6, #0]
 8005fd8:	5162      	str	r2, [r4, r5]
 8005fda:	604b      	str	r3, [r1, #4]
 8005fdc:	4638      	mov	r0, r7
 8005fde:	f104 060b 	add.w	r6, r4, #11
 8005fe2:	f000 fc7d 	bl	80068e0 <__malloc_unlock>
 8005fe6:	f026 0607 	bic.w	r6, r6, #7
 8005fea:	1d23      	adds	r3, r4, #4
 8005fec:	1af2      	subs	r2, r6, r3
 8005fee:	d0b6      	beq.n	8005f5e <_malloc_r+0x22>
 8005ff0:	1b9b      	subs	r3, r3, r6
 8005ff2:	50a3      	str	r3, [r4, r2]
 8005ff4:	e7b3      	b.n	8005f5e <_malloc_r+0x22>
 8005ff6:	6862      	ldr	r2, [r4, #4]
 8005ff8:	42a3      	cmp	r3, r4
 8005ffa:	bf0c      	ite	eq
 8005ffc:	6032      	streq	r2, [r6, #0]
 8005ffe:	605a      	strne	r2, [r3, #4]
 8006000:	e7ec      	b.n	8005fdc <_malloc_r+0xa0>
 8006002:	4623      	mov	r3, r4
 8006004:	6864      	ldr	r4, [r4, #4]
 8006006:	e7b2      	b.n	8005f6e <_malloc_r+0x32>
 8006008:	4634      	mov	r4, r6
 800600a:	6876      	ldr	r6, [r6, #4]
 800600c:	e7b9      	b.n	8005f82 <_malloc_r+0x46>
 800600e:	230c      	movs	r3, #12
 8006010:	603b      	str	r3, [r7, #0]
 8006012:	4638      	mov	r0, r7
 8006014:	f000 fc64 	bl	80068e0 <__malloc_unlock>
 8006018:	e7a1      	b.n	8005f5e <_malloc_r+0x22>
 800601a:	6025      	str	r5, [r4, #0]
 800601c:	e7de      	b.n	8005fdc <_malloc_r+0xa0>
 800601e:	bf00      	nop
 8006020:	20000274 	.word	0x20000274

08006024 <__sfputc_r>:
 8006024:	6893      	ldr	r3, [r2, #8]
 8006026:	3b01      	subs	r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	b410      	push	{r4}
 800602c:	6093      	str	r3, [r2, #8]
 800602e:	da08      	bge.n	8006042 <__sfputc_r+0x1e>
 8006030:	6994      	ldr	r4, [r2, #24]
 8006032:	42a3      	cmp	r3, r4
 8006034:	db01      	blt.n	800603a <__sfputc_r+0x16>
 8006036:	290a      	cmp	r1, #10
 8006038:	d103      	bne.n	8006042 <__sfputc_r+0x1e>
 800603a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800603e:	f000 bb33 	b.w	80066a8 <__swbuf_r>
 8006042:	6813      	ldr	r3, [r2, #0]
 8006044:	1c58      	adds	r0, r3, #1
 8006046:	6010      	str	r0, [r2, #0]
 8006048:	7019      	strb	r1, [r3, #0]
 800604a:	4608      	mov	r0, r1
 800604c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006050:	4770      	bx	lr

08006052 <__sfputs_r>:
 8006052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006054:	4606      	mov	r6, r0
 8006056:	460f      	mov	r7, r1
 8006058:	4614      	mov	r4, r2
 800605a:	18d5      	adds	r5, r2, r3
 800605c:	42ac      	cmp	r4, r5
 800605e:	d101      	bne.n	8006064 <__sfputs_r+0x12>
 8006060:	2000      	movs	r0, #0
 8006062:	e007      	b.n	8006074 <__sfputs_r+0x22>
 8006064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006068:	463a      	mov	r2, r7
 800606a:	4630      	mov	r0, r6
 800606c:	f7ff ffda 	bl	8006024 <__sfputc_r>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d1f3      	bne.n	800605c <__sfputs_r+0xa>
 8006074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006078 <_vfiprintf_r>:
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	460d      	mov	r5, r1
 800607e:	b09d      	sub	sp, #116	; 0x74
 8006080:	4614      	mov	r4, r2
 8006082:	4698      	mov	r8, r3
 8006084:	4606      	mov	r6, r0
 8006086:	b118      	cbz	r0, 8006090 <_vfiprintf_r+0x18>
 8006088:	6983      	ldr	r3, [r0, #24]
 800608a:	b90b      	cbnz	r3, 8006090 <_vfiprintf_r+0x18>
 800608c:	f7ff fddc 	bl	8005c48 <__sinit>
 8006090:	4b89      	ldr	r3, [pc, #548]	; (80062b8 <_vfiprintf_r+0x240>)
 8006092:	429d      	cmp	r5, r3
 8006094:	d11b      	bne.n	80060ce <_vfiprintf_r+0x56>
 8006096:	6875      	ldr	r5, [r6, #4]
 8006098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800609a:	07d9      	lsls	r1, r3, #31
 800609c:	d405      	bmi.n	80060aa <_vfiprintf_r+0x32>
 800609e:	89ab      	ldrh	r3, [r5, #12]
 80060a0:	059a      	lsls	r2, r3, #22
 80060a2:	d402      	bmi.n	80060aa <_vfiprintf_r+0x32>
 80060a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060a6:	f7ff fe6d 	bl	8005d84 <__retarget_lock_acquire_recursive>
 80060aa:	89ab      	ldrh	r3, [r5, #12]
 80060ac:	071b      	lsls	r3, r3, #28
 80060ae:	d501      	bpl.n	80060b4 <_vfiprintf_r+0x3c>
 80060b0:	692b      	ldr	r3, [r5, #16]
 80060b2:	b9eb      	cbnz	r3, 80060f0 <_vfiprintf_r+0x78>
 80060b4:	4629      	mov	r1, r5
 80060b6:	4630      	mov	r0, r6
 80060b8:	f000 fb5a 	bl	8006770 <__swsetup_r>
 80060bc:	b1c0      	cbz	r0, 80060f0 <_vfiprintf_r+0x78>
 80060be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060c0:	07dc      	lsls	r4, r3, #31
 80060c2:	d50e      	bpl.n	80060e2 <_vfiprintf_r+0x6a>
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295
 80060c8:	b01d      	add	sp, #116	; 0x74
 80060ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ce:	4b7b      	ldr	r3, [pc, #492]	; (80062bc <_vfiprintf_r+0x244>)
 80060d0:	429d      	cmp	r5, r3
 80060d2:	d101      	bne.n	80060d8 <_vfiprintf_r+0x60>
 80060d4:	68b5      	ldr	r5, [r6, #8]
 80060d6:	e7df      	b.n	8006098 <_vfiprintf_r+0x20>
 80060d8:	4b79      	ldr	r3, [pc, #484]	; (80062c0 <_vfiprintf_r+0x248>)
 80060da:	429d      	cmp	r5, r3
 80060dc:	bf08      	it	eq
 80060de:	68f5      	ldreq	r5, [r6, #12]
 80060e0:	e7da      	b.n	8006098 <_vfiprintf_r+0x20>
 80060e2:	89ab      	ldrh	r3, [r5, #12]
 80060e4:	0598      	lsls	r0, r3, #22
 80060e6:	d4ed      	bmi.n	80060c4 <_vfiprintf_r+0x4c>
 80060e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060ea:	f7ff fe4c 	bl	8005d86 <__retarget_lock_release_recursive>
 80060ee:	e7e9      	b.n	80060c4 <_vfiprintf_r+0x4c>
 80060f0:	2300      	movs	r3, #0
 80060f2:	9309      	str	r3, [sp, #36]	; 0x24
 80060f4:	2320      	movs	r3, #32
 80060f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80060fe:	2330      	movs	r3, #48	; 0x30
 8006100:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80062c4 <_vfiprintf_r+0x24c>
 8006104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006108:	f04f 0901 	mov.w	r9, #1
 800610c:	4623      	mov	r3, r4
 800610e:	469a      	mov	sl, r3
 8006110:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006114:	b10a      	cbz	r2, 800611a <_vfiprintf_r+0xa2>
 8006116:	2a25      	cmp	r2, #37	; 0x25
 8006118:	d1f9      	bne.n	800610e <_vfiprintf_r+0x96>
 800611a:	ebba 0b04 	subs.w	fp, sl, r4
 800611e:	d00b      	beq.n	8006138 <_vfiprintf_r+0xc0>
 8006120:	465b      	mov	r3, fp
 8006122:	4622      	mov	r2, r4
 8006124:	4629      	mov	r1, r5
 8006126:	4630      	mov	r0, r6
 8006128:	f7ff ff93 	bl	8006052 <__sfputs_r>
 800612c:	3001      	adds	r0, #1
 800612e:	f000 80aa 	beq.w	8006286 <_vfiprintf_r+0x20e>
 8006132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006134:	445a      	add	r2, fp
 8006136:	9209      	str	r2, [sp, #36]	; 0x24
 8006138:	f89a 3000 	ldrb.w	r3, [sl]
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 80a2 	beq.w	8006286 <_vfiprintf_r+0x20e>
 8006142:	2300      	movs	r3, #0
 8006144:	f04f 32ff 	mov.w	r2, #4294967295
 8006148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800614c:	f10a 0a01 	add.w	sl, sl, #1
 8006150:	9304      	str	r3, [sp, #16]
 8006152:	9307      	str	r3, [sp, #28]
 8006154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006158:	931a      	str	r3, [sp, #104]	; 0x68
 800615a:	4654      	mov	r4, sl
 800615c:	2205      	movs	r2, #5
 800615e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006162:	4858      	ldr	r0, [pc, #352]	; (80062c4 <_vfiprintf_r+0x24c>)
 8006164:	f7fa f85c 	bl	8000220 <memchr>
 8006168:	9a04      	ldr	r2, [sp, #16]
 800616a:	b9d8      	cbnz	r0, 80061a4 <_vfiprintf_r+0x12c>
 800616c:	06d1      	lsls	r1, r2, #27
 800616e:	bf44      	itt	mi
 8006170:	2320      	movmi	r3, #32
 8006172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006176:	0713      	lsls	r3, r2, #28
 8006178:	bf44      	itt	mi
 800617a:	232b      	movmi	r3, #43	; 0x2b
 800617c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006180:	f89a 3000 	ldrb.w	r3, [sl]
 8006184:	2b2a      	cmp	r3, #42	; 0x2a
 8006186:	d015      	beq.n	80061b4 <_vfiprintf_r+0x13c>
 8006188:	9a07      	ldr	r2, [sp, #28]
 800618a:	4654      	mov	r4, sl
 800618c:	2000      	movs	r0, #0
 800618e:	f04f 0c0a 	mov.w	ip, #10
 8006192:	4621      	mov	r1, r4
 8006194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006198:	3b30      	subs	r3, #48	; 0x30
 800619a:	2b09      	cmp	r3, #9
 800619c:	d94e      	bls.n	800623c <_vfiprintf_r+0x1c4>
 800619e:	b1b0      	cbz	r0, 80061ce <_vfiprintf_r+0x156>
 80061a0:	9207      	str	r2, [sp, #28]
 80061a2:	e014      	b.n	80061ce <_vfiprintf_r+0x156>
 80061a4:	eba0 0308 	sub.w	r3, r0, r8
 80061a8:	fa09 f303 	lsl.w	r3, r9, r3
 80061ac:	4313      	orrs	r3, r2
 80061ae:	9304      	str	r3, [sp, #16]
 80061b0:	46a2      	mov	sl, r4
 80061b2:	e7d2      	b.n	800615a <_vfiprintf_r+0xe2>
 80061b4:	9b03      	ldr	r3, [sp, #12]
 80061b6:	1d19      	adds	r1, r3, #4
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	9103      	str	r1, [sp, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	bfbb      	ittet	lt
 80061c0:	425b      	neglt	r3, r3
 80061c2:	f042 0202 	orrlt.w	r2, r2, #2
 80061c6:	9307      	strge	r3, [sp, #28]
 80061c8:	9307      	strlt	r3, [sp, #28]
 80061ca:	bfb8      	it	lt
 80061cc:	9204      	strlt	r2, [sp, #16]
 80061ce:	7823      	ldrb	r3, [r4, #0]
 80061d0:	2b2e      	cmp	r3, #46	; 0x2e
 80061d2:	d10c      	bne.n	80061ee <_vfiprintf_r+0x176>
 80061d4:	7863      	ldrb	r3, [r4, #1]
 80061d6:	2b2a      	cmp	r3, #42	; 0x2a
 80061d8:	d135      	bne.n	8006246 <_vfiprintf_r+0x1ce>
 80061da:	9b03      	ldr	r3, [sp, #12]
 80061dc:	1d1a      	adds	r2, r3, #4
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	9203      	str	r2, [sp, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	bfb8      	it	lt
 80061e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80061ea:	3402      	adds	r4, #2
 80061ec:	9305      	str	r3, [sp, #20]
 80061ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80062d4 <_vfiprintf_r+0x25c>
 80061f2:	7821      	ldrb	r1, [r4, #0]
 80061f4:	2203      	movs	r2, #3
 80061f6:	4650      	mov	r0, sl
 80061f8:	f7fa f812 	bl	8000220 <memchr>
 80061fc:	b140      	cbz	r0, 8006210 <_vfiprintf_r+0x198>
 80061fe:	2340      	movs	r3, #64	; 0x40
 8006200:	eba0 000a 	sub.w	r0, r0, sl
 8006204:	fa03 f000 	lsl.w	r0, r3, r0
 8006208:	9b04      	ldr	r3, [sp, #16]
 800620a:	4303      	orrs	r3, r0
 800620c:	3401      	adds	r4, #1
 800620e:	9304      	str	r3, [sp, #16]
 8006210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006214:	482c      	ldr	r0, [pc, #176]	; (80062c8 <_vfiprintf_r+0x250>)
 8006216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800621a:	2206      	movs	r2, #6
 800621c:	f7fa f800 	bl	8000220 <memchr>
 8006220:	2800      	cmp	r0, #0
 8006222:	d03f      	beq.n	80062a4 <_vfiprintf_r+0x22c>
 8006224:	4b29      	ldr	r3, [pc, #164]	; (80062cc <_vfiprintf_r+0x254>)
 8006226:	bb1b      	cbnz	r3, 8006270 <_vfiprintf_r+0x1f8>
 8006228:	9b03      	ldr	r3, [sp, #12]
 800622a:	3307      	adds	r3, #7
 800622c:	f023 0307 	bic.w	r3, r3, #7
 8006230:	3308      	adds	r3, #8
 8006232:	9303      	str	r3, [sp, #12]
 8006234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006236:	443b      	add	r3, r7
 8006238:	9309      	str	r3, [sp, #36]	; 0x24
 800623a:	e767      	b.n	800610c <_vfiprintf_r+0x94>
 800623c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006240:	460c      	mov	r4, r1
 8006242:	2001      	movs	r0, #1
 8006244:	e7a5      	b.n	8006192 <_vfiprintf_r+0x11a>
 8006246:	2300      	movs	r3, #0
 8006248:	3401      	adds	r4, #1
 800624a:	9305      	str	r3, [sp, #20]
 800624c:	4619      	mov	r1, r3
 800624e:	f04f 0c0a 	mov.w	ip, #10
 8006252:	4620      	mov	r0, r4
 8006254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006258:	3a30      	subs	r2, #48	; 0x30
 800625a:	2a09      	cmp	r2, #9
 800625c:	d903      	bls.n	8006266 <_vfiprintf_r+0x1ee>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0c5      	beq.n	80061ee <_vfiprintf_r+0x176>
 8006262:	9105      	str	r1, [sp, #20]
 8006264:	e7c3      	b.n	80061ee <_vfiprintf_r+0x176>
 8006266:	fb0c 2101 	mla	r1, ip, r1, r2
 800626a:	4604      	mov	r4, r0
 800626c:	2301      	movs	r3, #1
 800626e:	e7f0      	b.n	8006252 <_vfiprintf_r+0x1da>
 8006270:	ab03      	add	r3, sp, #12
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	462a      	mov	r2, r5
 8006276:	4b16      	ldr	r3, [pc, #88]	; (80062d0 <_vfiprintf_r+0x258>)
 8006278:	a904      	add	r1, sp, #16
 800627a:	4630      	mov	r0, r6
 800627c:	f3af 8000 	nop.w
 8006280:	4607      	mov	r7, r0
 8006282:	1c78      	adds	r0, r7, #1
 8006284:	d1d6      	bne.n	8006234 <_vfiprintf_r+0x1bc>
 8006286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006288:	07d9      	lsls	r1, r3, #31
 800628a:	d405      	bmi.n	8006298 <_vfiprintf_r+0x220>
 800628c:	89ab      	ldrh	r3, [r5, #12]
 800628e:	059a      	lsls	r2, r3, #22
 8006290:	d402      	bmi.n	8006298 <_vfiprintf_r+0x220>
 8006292:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006294:	f7ff fd77 	bl	8005d86 <__retarget_lock_release_recursive>
 8006298:	89ab      	ldrh	r3, [r5, #12]
 800629a:	065b      	lsls	r3, r3, #25
 800629c:	f53f af12 	bmi.w	80060c4 <_vfiprintf_r+0x4c>
 80062a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062a2:	e711      	b.n	80060c8 <_vfiprintf_r+0x50>
 80062a4:	ab03      	add	r3, sp, #12
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	462a      	mov	r2, r5
 80062aa:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <_vfiprintf_r+0x258>)
 80062ac:	a904      	add	r1, sp, #16
 80062ae:	4630      	mov	r0, r6
 80062b0:	f000 f880 	bl	80063b4 <_printf_i>
 80062b4:	e7e4      	b.n	8006280 <_vfiprintf_r+0x208>
 80062b6:	bf00      	nop
 80062b8:	08007b30 	.word	0x08007b30
 80062bc:	08007b50 	.word	0x08007b50
 80062c0:	08007b10 	.word	0x08007b10
 80062c4:	08007b70 	.word	0x08007b70
 80062c8:	08007b7a 	.word	0x08007b7a
 80062cc:	00000000 	.word	0x00000000
 80062d0:	08006053 	.word	0x08006053
 80062d4:	08007b76 	.word	0x08007b76

080062d8 <_printf_common>:
 80062d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062dc:	4616      	mov	r6, r2
 80062de:	4699      	mov	r9, r3
 80062e0:	688a      	ldr	r2, [r1, #8]
 80062e2:	690b      	ldr	r3, [r1, #16]
 80062e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062e8:	4293      	cmp	r3, r2
 80062ea:	bfb8      	it	lt
 80062ec:	4613      	movlt	r3, r2
 80062ee:	6033      	str	r3, [r6, #0]
 80062f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062f4:	4607      	mov	r7, r0
 80062f6:	460c      	mov	r4, r1
 80062f8:	b10a      	cbz	r2, 80062fe <_printf_common+0x26>
 80062fa:	3301      	adds	r3, #1
 80062fc:	6033      	str	r3, [r6, #0]
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	0699      	lsls	r1, r3, #26
 8006302:	bf42      	ittt	mi
 8006304:	6833      	ldrmi	r3, [r6, #0]
 8006306:	3302      	addmi	r3, #2
 8006308:	6033      	strmi	r3, [r6, #0]
 800630a:	6825      	ldr	r5, [r4, #0]
 800630c:	f015 0506 	ands.w	r5, r5, #6
 8006310:	d106      	bne.n	8006320 <_printf_common+0x48>
 8006312:	f104 0a19 	add.w	sl, r4, #25
 8006316:	68e3      	ldr	r3, [r4, #12]
 8006318:	6832      	ldr	r2, [r6, #0]
 800631a:	1a9b      	subs	r3, r3, r2
 800631c:	42ab      	cmp	r3, r5
 800631e:	dc26      	bgt.n	800636e <_printf_common+0x96>
 8006320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006324:	1e13      	subs	r3, r2, #0
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	bf18      	it	ne
 800632a:	2301      	movne	r3, #1
 800632c:	0692      	lsls	r2, r2, #26
 800632e:	d42b      	bmi.n	8006388 <_printf_common+0xb0>
 8006330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006334:	4649      	mov	r1, r9
 8006336:	4638      	mov	r0, r7
 8006338:	47c0      	blx	r8
 800633a:	3001      	adds	r0, #1
 800633c:	d01e      	beq.n	800637c <_printf_common+0xa4>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	68e5      	ldr	r5, [r4, #12]
 8006342:	6832      	ldr	r2, [r6, #0]
 8006344:	f003 0306 	and.w	r3, r3, #6
 8006348:	2b04      	cmp	r3, #4
 800634a:	bf08      	it	eq
 800634c:	1aad      	subeq	r5, r5, r2
 800634e:	68a3      	ldr	r3, [r4, #8]
 8006350:	6922      	ldr	r2, [r4, #16]
 8006352:	bf0c      	ite	eq
 8006354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006358:	2500      	movne	r5, #0
 800635a:	4293      	cmp	r3, r2
 800635c:	bfc4      	itt	gt
 800635e:	1a9b      	subgt	r3, r3, r2
 8006360:	18ed      	addgt	r5, r5, r3
 8006362:	2600      	movs	r6, #0
 8006364:	341a      	adds	r4, #26
 8006366:	42b5      	cmp	r5, r6
 8006368:	d11a      	bne.n	80063a0 <_printf_common+0xc8>
 800636a:	2000      	movs	r0, #0
 800636c:	e008      	b.n	8006380 <_printf_common+0xa8>
 800636e:	2301      	movs	r3, #1
 8006370:	4652      	mov	r2, sl
 8006372:	4649      	mov	r1, r9
 8006374:	4638      	mov	r0, r7
 8006376:	47c0      	blx	r8
 8006378:	3001      	adds	r0, #1
 800637a:	d103      	bne.n	8006384 <_printf_common+0xac>
 800637c:	f04f 30ff 	mov.w	r0, #4294967295
 8006380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006384:	3501      	adds	r5, #1
 8006386:	e7c6      	b.n	8006316 <_printf_common+0x3e>
 8006388:	18e1      	adds	r1, r4, r3
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	2030      	movs	r0, #48	; 0x30
 800638e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006392:	4422      	add	r2, r4
 8006394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800639c:	3302      	adds	r3, #2
 800639e:	e7c7      	b.n	8006330 <_printf_common+0x58>
 80063a0:	2301      	movs	r3, #1
 80063a2:	4622      	mov	r2, r4
 80063a4:	4649      	mov	r1, r9
 80063a6:	4638      	mov	r0, r7
 80063a8:	47c0      	blx	r8
 80063aa:	3001      	adds	r0, #1
 80063ac:	d0e6      	beq.n	800637c <_printf_common+0xa4>
 80063ae:	3601      	adds	r6, #1
 80063b0:	e7d9      	b.n	8006366 <_printf_common+0x8e>
	...

080063b4 <_printf_i>:
 80063b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063b8:	7e0f      	ldrb	r7, [r1, #24]
 80063ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063bc:	2f78      	cmp	r7, #120	; 0x78
 80063be:	4691      	mov	r9, r2
 80063c0:	4680      	mov	r8, r0
 80063c2:	460c      	mov	r4, r1
 80063c4:	469a      	mov	sl, r3
 80063c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063ca:	d807      	bhi.n	80063dc <_printf_i+0x28>
 80063cc:	2f62      	cmp	r7, #98	; 0x62
 80063ce:	d80a      	bhi.n	80063e6 <_printf_i+0x32>
 80063d0:	2f00      	cmp	r7, #0
 80063d2:	f000 80d8 	beq.w	8006586 <_printf_i+0x1d2>
 80063d6:	2f58      	cmp	r7, #88	; 0x58
 80063d8:	f000 80a3 	beq.w	8006522 <_printf_i+0x16e>
 80063dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063e4:	e03a      	b.n	800645c <_printf_i+0xa8>
 80063e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063ea:	2b15      	cmp	r3, #21
 80063ec:	d8f6      	bhi.n	80063dc <_printf_i+0x28>
 80063ee:	a101      	add	r1, pc, #4	; (adr r1, 80063f4 <_printf_i+0x40>)
 80063f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063f4:	0800644d 	.word	0x0800644d
 80063f8:	08006461 	.word	0x08006461
 80063fc:	080063dd 	.word	0x080063dd
 8006400:	080063dd 	.word	0x080063dd
 8006404:	080063dd 	.word	0x080063dd
 8006408:	080063dd 	.word	0x080063dd
 800640c:	08006461 	.word	0x08006461
 8006410:	080063dd 	.word	0x080063dd
 8006414:	080063dd 	.word	0x080063dd
 8006418:	080063dd 	.word	0x080063dd
 800641c:	080063dd 	.word	0x080063dd
 8006420:	0800656d 	.word	0x0800656d
 8006424:	08006491 	.word	0x08006491
 8006428:	0800654f 	.word	0x0800654f
 800642c:	080063dd 	.word	0x080063dd
 8006430:	080063dd 	.word	0x080063dd
 8006434:	0800658f 	.word	0x0800658f
 8006438:	080063dd 	.word	0x080063dd
 800643c:	08006491 	.word	0x08006491
 8006440:	080063dd 	.word	0x080063dd
 8006444:	080063dd 	.word	0x080063dd
 8006448:	08006557 	.word	0x08006557
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	1d1a      	adds	r2, r3, #4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	602a      	str	r2, [r5, #0]
 8006454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800645c:	2301      	movs	r3, #1
 800645e:	e0a3      	b.n	80065a8 <_printf_i+0x1f4>
 8006460:	6820      	ldr	r0, [r4, #0]
 8006462:	6829      	ldr	r1, [r5, #0]
 8006464:	0606      	lsls	r6, r0, #24
 8006466:	f101 0304 	add.w	r3, r1, #4
 800646a:	d50a      	bpl.n	8006482 <_printf_i+0xce>
 800646c:	680e      	ldr	r6, [r1, #0]
 800646e:	602b      	str	r3, [r5, #0]
 8006470:	2e00      	cmp	r6, #0
 8006472:	da03      	bge.n	800647c <_printf_i+0xc8>
 8006474:	232d      	movs	r3, #45	; 0x2d
 8006476:	4276      	negs	r6, r6
 8006478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800647c:	485e      	ldr	r0, [pc, #376]	; (80065f8 <_printf_i+0x244>)
 800647e:	230a      	movs	r3, #10
 8006480:	e019      	b.n	80064b6 <_printf_i+0x102>
 8006482:	680e      	ldr	r6, [r1, #0]
 8006484:	602b      	str	r3, [r5, #0]
 8006486:	f010 0f40 	tst.w	r0, #64	; 0x40
 800648a:	bf18      	it	ne
 800648c:	b236      	sxthne	r6, r6
 800648e:	e7ef      	b.n	8006470 <_printf_i+0xbc>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	6820      	ldr	r0, [r4, #0]
 8006494:	1d19      	adds	r1, r3, #4
 8006496:	6029      	str	r1, [r5, #0]
 8006498:	0601      	lsls	r1, r0, #24
 800649a:	d501      	bpl.n	80064a0 <_printf_i+0xec>
 800649c:	681e      	ldr	r6, [r3, #0]
 800649e:	e002      	b.n	80064a6 <_printf_i+0xf2>
 80064a0:	0646      	lsls	r6, r0, #25
 80064a2:	d5fb      	bpl.n	800649c <_printf_i+0xe8>
 80064a4:	881e      	ldrh	r6, [r3, #0]
 80064a6:	4854      	ldr	r0, [pc, #336]	; (80065f8 <_printf_i+0x244>)
 80064a8:	2f6f      	cmp	r7, #111	; 0x6f
 80064aa:	bf0c      	ite	eq
 80064ac:	2308      	moveq	r3, #8
 80064ae:	230a      	movne	r3, #10
 80064b0:	2100      	movs	r1, #0
 80064b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064b6:	6865      	ldr	r5, [r4, #4]
 80064b8:	60a5      	str	r5, [r4, #8]
 80064ba:	2d00      	cmp	r5, #0
 80064bc:	bfa2      	ittt	ge
 80064be:	6821      	ldrge	r1, [r4, #0]
 80064c0:	f021 0104 	bicge.w	r1, r1, #4
 80064c4:	6021      	strge	r1, [r4, #0]
 80064c6:	b90e      	cbnz	r6, 80064cc <_printf_i+0x118>
 80064c8:	2d00      	cmp	r5, #0
 80064ca:	d04d      	beq.n	8006568 <_printf_i+0x1b4>
 80064cc:	4615      	mov	r5, r2
 80064ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80064d2:	fb03 6711 	mls	r7, r3, r1, r6
 80064d6:	5dc7      	ldrb	r7, [r0, r7]
 80064d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064dc:	4637      	mov	r7, r6
 80064de:	42bb      	cmp	r3, r7
 80064e0:	460e      	mov	r6, r1
 80064e2:	d9f4      	bls.n	80064ce <_printf_i+0x11a>
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d10b      	bne.n	8006500 <_printf_i+0x14c>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	07de      	lsls	r6, r3, #31
 80064ec:	d508      	bpl.n	8006500 <_printf_i+0x14c>
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	6861      	ldr	r1, [r4, #4]
 80064f2:	4299      	cmp	r1, r3
 80064f4:	bfde      	ittt	le
 80064f6:	2330      	movle	r3, #48	; 0x30
 80064f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006500:	1b52      	subs	r2, r2, r5
 8006502:	6122      	str	r2, [r4, #16]
 8006504:	f8cd a000 	str.w	sl, [sp]
 8006508:	464b      	mov	r3, r9
 800650a:	aa03      	add	r2, sp, #12
 800650c:	4621      	mov	r1, r4
 800650e:	4640      	mov	r0, r8
 8006510:	f7ff fee2 	bl	80062d8 <_printf_common>
 8006514:	3001      	adds	r0, #1
 8006516:	d14c      	bne.n	80065b2 <_printf_i+0x1fe>
 8006518:	f04f 30ff 	mov.w	r0, #4294967295
 800651c:	b004      	add	sp, #16
 800651e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006522:	4835      	ldr	r0, [pc, #212]	; (80065f8 <_printf_i+0x244>)
 8006524:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006528:	6829      	ldr	r1, [r5, #0]
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006530:	6029      	str	r1, [r5, #0]
 8006532:	061d      	lsls	r5, r3, #24
 8006534:	d514      	bpl.n	8006560 <_printf_i+0x1ac>
 8006536:	07df      	lsls	r7, r3, #31
 8006538:	bf44      	itt	mi
 800653a:	f043 0320 	orrmi.w	r3, r3, #32
 800653e:	6023      	strmi	r3, [r4, #0]
 8006540:	b91e      	cbnz	r6, 800654a <_printf_i+0x196>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	f023 0320 	bic.w	r3, r3, #32
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	2310      	movs	r3, #16
 800654c:	e7b0      	b.n	80064b0 <_printf_i+0xfc>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	f043 0320 	orr.w	r3, r3, #32
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	2378      	movs	r3, #120	; 0x78
 8006558:	4828      	ldr	r0, [pc, #160]	; (80065fc <_printf_i+0x248>)
 800655a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800655e:	e7e3      	b.n	8006528 <_printf_i+0x174>
 8006560:	0659      	lsls	r1, r3, #25
 8006562:	bf48      	it	mi
 8006564:	b2b6      	uxthmi	r6, r6
 8006566:	e7e6      	b.n	8006536 <_printf_i+0x182>
 8006568:	4615      	mov	r5, r2
 800656a:	e7bb      	b.n	80064e4 <_printf_i+0x130>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	6826      	ldr	r6, [r4, #0]
 8006570:	6961      	ldr	r1, [r4, #20]
 8006572:	1d18      	adds	r0, r3, #4
 8006574:	6028      	str	r0, [r5, #0]
 8006576:	0635      	lsls	r5, r6, #24
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	d501      	bpl.n	8006580 <_printf_i+0x1cc>
 800657c:	6019      	str	r1, [r3, #0]
 800657e:	e002      	b.n	8006586 <_printf_i+0x1d2>
 8006580:	0670      	lsls	r0, r6, #25
 8006582:	d5fb      	bpl.n	800657c <_printf_i+0x1c8>
 8006584:	8019      	strh	r1, [r3, #0]
 8006586:	2300      	movs	r3, #0
 8006588:	6123      	str	r3, [r4, #16]
 800658a:	4615      	mov	r5, r2
 800658c:	e7ba      	b.n	8006504 <_printf_i+0x150>
 800658e:	682b      	ldr	r3, [r5, #0]
 8006590:	1d1a      	adds	r2, r3, #4
 8006592:	602a      	str	r2, [r5, #0]
 8006594:	681d      	ldr	r5, [r3, #0]
 8006596:	6862      	ldr	r2, [r4, #4]
 8006598:	2100      	movs	r1, #0
 800659a:	4628      	mov	r0, r5
 800659c:	f7f9 fe40 	bl	8000220 <memchr>
 80065a0:	b108      	cbz	r0, 80065a6 <_printf_i+0x1f2>
 80065a2:	1b40      	subs	r0, r0, r5
 80065a4:	6060      	str	r0, [r4, #4]
 80065a6:	6863      	ldr	r3, [r4, #4]
 80065a8:	6123      	str	r3, [r4, #16]
 80065aa:	2300      	movs	r3, #0
 80065ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065b0:	e7a8      	b.n	8006504 <_printf_i+0x150>
 80065b2:	6923      	ldr	r3, [r4, #16]
 80065b4:	462a      	mov	r2, r5
 80065b6:	4649      	mov	r1, r9
 80065b8:	4640      	mov	r0, r8
 80065ba:	47d0      	blx	sl
 80065bc:	3001      	adds	r0, #1
 80065be:	d0ab      	beq.n	8006518 <_printf_i+0x164>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	079b      	lsls	r3, r3, #30
 80065c4:	d413      	bmi.n	80065ee <_printf_i+0x23a>
 80065c6:	68e0      	ldr	r0, [r4, #12]
 80065c8:	9b03      	ldr	r3, [sp, #12]
 80065ca:	4298      	cmp	r0, r3
 80065cc:	bfb8      	it	lt
 80065ce:	4618      	movlt	r0, r3
 80065d0:	e7a4      	b.n	800651c <_printf_i+0x168>
 80065d2:	2301      	movs	r3, #1
 80065d4:	4632      	mov	r2, r6
 80065d6:	4649      	mov	r1, r9
 80065d8:	4640      	mov	r0, r8
 80065da:	47d0      	blx	sl
 80065dc:	3001      	adds	r0, #1
 80065de:	d09b      	beq.n	8006518 <_printf_i+0x164>
 80065e0:	3501      	adds	r5, #1
 80065e2:	68e3      	ldr	r3, [r4, #12]
 80065e4:	9903      	ldr	r1, [sp, #12]
 80065e6:	1a5b      	subs	r3, r3, r1
 80065e8:	42ab      	cmp	r3, r5
 80065ea:	dcf2      	bgt.n	80065d2 <_printf_i+0x21e>
 80065ec:	e7eb      	b.n	80065c6 <_printf_i+0x212>
 80065ee:	2500      	movs	r5, #0
 80065f0:	f104 0619 	add.w	r6, r4, #25
 80065f4:	e7f5      	b.n	80065e2 <_printf_i+0x22e>
 80065f6:	bf00      	nop
 80065f8:	08007b81 	.word	0x08007b81
 80065fc:	08007b92 	.word	0x08007b92

08006600 <_sbrk_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4d06      	ldr	r5, [pc, #24]	; (800661c <_sbrk_r+0x1c>)
 8006604:	2300      	movs	r3, #0
 8006606:	4604      	mov	r4, r0
 8006608:	4608      	mov	r0, r1
 800660a:	602b      	str	r3, [r5, #0]
 800660c:	f7fb fb36 	bl	8001c7c <_sbrk>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d102      	bne.n	800661a <_sbrk_r+0x1a>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	b103      	cbz	r3, 800661a <_sbrk_r+0x1a>
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	2000027c 	.word	0x2000027c

08006620 <__sread>:
 8006620:	b510      	push	{r4, lr}
 8006622:	460c      	mov	r4, r1
 8006624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006628:	f000 f960 	bl	80068ec <_read_r>
 800662c:	2800      	cmp	r0, #0
 800662e:	bfab      	itete	ge
 8006630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006632:	89a3      	ldrhlt	r3, [r4, #12]
 8006634:	181b      	addge	r3, r3, r0
 8006636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800663a:	bfac      	ite	ge
 800663c:	6563      	strge	r3, [r4, #84]	; 0x54
 800663e:	81a3      	strhlt	r3, [r4, #12]
 8006640:	bd10      	pop	{r4, pc}

08006642 <__swrite>:
 8006642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006646:	461f      	mov	r7, r3
 8006648:	898b      	ldrh	r3, [r1, #12]
 800664a:	05db      	lsls	r3, r3, #23
 800664c:	4605      	mov	r5, r0
 800664e:	460c      	mov	r4, r1
 8006650:	4616      	mov	r6, r2
 8006652:	d505      	bpl.n	8006660 <__swrite+0x1e>
 8006654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006658:	2302      	movs	r3, #2
 800665a:	2200      	movs	r2, #0
 800665c:	f000 f928 	bl	80068b0 <_lseek_r>
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	4632      	mov	r2, r6
 800666e:	463b      	mov	r3, r7
 8006670:	4628      	mov	r0, r5
 8006672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006676:	f000 b869 	b.w	800674c <_write_r>

0800667a <__sseek>:
 800667a:	b510      	push	{r4, lr}
 800667c:	460c      	mov	r4, r1
 800667e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006682:	f000 f915 	bl	80068b0 <_lseek_r>
 8006686:	1c43      	adds	r3, r0, #1
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	bf15      	itete	ne
 800668c:	6560      	strne	r0, [r4, #84]	; 0x54
 800668e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006696:	81a3      	strheq	r3, [r4, #12]
 8006698:	bf18      	it	ne
 800669a:	81a3      	strhne	r3, [r4, #12]
 800669c:	bd10      	pop	{r4, pc}

0800669e <__sclose>:
 800669e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a2:	f000 b8d3 	b.w	800684c <_close_r>
	...

080066a8 <__swbuf_r>:
 80066a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066aa:	460e      	mov	r6, r1
 80066ac:	4614      	mov	r4, r2
 80066ae:	4605      	mov	r5, r0
 80066b0:	b118      	cbz	r0, 80066ba <__swbuf_r+0x12>
 80066b2:	6983      	ldr	r3, [r0, #24]
 80066b4:	b90b      	cbnz	r3, 80066ba <__swbuf_r+0x12>
 80066b6:	f7ff fac7 	bl	8005c48 <__sinit>
 80066ba:	4b21      	ldr	r3, [pc, #132]	; (8006740 <__swbuf_r+0x98>)
 80066bc:	429c      	cmp	r4, r3
 80066be:	d12b      	bne.n	8006718 <__swbuf_r+0x70>
 80066c0:	686c      	ldr	r4, [r5, #4]
 80066c2:	69a3      	ldr	r3, [r4, #24]
 80066c4:	60a3      	str	r3, [r4, #8]
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	071a      	lsls	r2, r3, #28
 80066ca:	d52f      	bpl.n	800672c <__swbuf_r+0x84>
 80066cc:	6923      	ldr	r3, [r4, #16]
 80066ce:	b36b      	cbz	r3, 800672c <__swbuf_r+0x84>
 80066d0:	6923      	ldr	r3, [r4, #16]
 80066d2:	6820      	ldr	r0, [r4, #0]
 80066d4:	1ac0      	subs	r0, r0, r3
 80066d6:	6963      	ldr	r3, [r4, #20]
 80066d8:	b2f6      	uxtb	r6, r6
 80066da:	4283      	cmp	r3, r0
 80066dc:	4637      	mov	r7, r6
 80066de:	dc04      	bgt.n	80066ea <__swbuf_r+0x42>
 80066e0:	4621      	mov	r1, r4
 80066e2:	4628      	mov	r0, r5
 80066e4:	f7ff fa1c 	bl	8005b20 <_fflush_r>
 80066e8:	bb30      	cbnz	r0, 8006738 <__swbuf_r+0x90>
 80066ea:	68a3      	ldr	r3, [r4, #8]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	60a3      	str	r3, [r4, #8]
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	6022      	str	r2, [r4, #0]
 80066f6:	701e      	strb	r6, [r3, #0]
 80066f8:	6963      	ldr	r3, [r4, #20]
 80066fa:	3001      	adds	r0, #1
 80066fc:	4283      	cmp	r3, r0
 80066fe:	d004      	beq.n	800670a <__swbuf_r+0x62>
 8006700:	89a3      	ldrh	r3, [r4, #12]
 8006702:	07db      	lsls	r3, r3, #31
 8006704:	d506      	bpl.n	8006714 <__swbuf_r+0x6c>
 8006706:	2e0a      	cmp	r6, #10
 8006708:	d104      	bne.n	8006714 <__swbuf_r+0x6c>
 800670a:	4621      	mov	r1, r4
 800670c:	4628      	mov	r0, r5
 800670e:	f7ff fa07 	bl	8005b20 <_fflush_r>
 8006712:	b988      	cbnz	r0, 8006738 <__swbuf_r+0x90>
 8006714:	4638      	mov	r0, r7
 8006716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006718:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <__swbuf_r+0x9c>)
 800671a:	429c      	cmp	r4, r3
 800671c:	d101      	bne.n	8006722 <__swbuf_r+0x7a>
 800671e:	68ac      	ldr	r4, [r5, #8]
 8006720:	e7cf      	b.n	80066c2 <__swbuf_r+0x1a>
 8006722:	4b09      	ldr	r3, [pc, #36]	; (8006748 <__swbuf_r+0xa0>)
 8006724:	429c      	cmp	r4, r3
 8006726:	bf08      	it	eq
 8006728:	68ec      	ldreq	r4, [r5, #12]
 800672a:	e7ca      	b.n	80066c2 <__swbuf_r+0x1a>
 800672c:	4621      	mov	r1, r4
 800672e:	4628      	mov	r0, r5
 8006730:	f000 f81e 	bl	8006770 <__swsetup_r>
 8006734:	2800      	cmp	r0, #0
 8006736:	d0cb      	beq.n	80066d0 <__swbuf_r+0x28>
 8006738:	f04f 37ff 	mov.w	r7, #4294967295
 800673c:	e7ea      	b.n	8006714 <__swbuf_r+0x6c>
 800673e:	bf00      	nop
 8006740:	08007b30 	.word	0x08007b30
 8006744:	08007b50 	.word	0x08007b50
 8006748:	08007b10 	.word	0x08007b10

0800674c <_write_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4d07      	ldr	r5, [pc, #28]	; (800676c <_write_r+0x20>)
 8006750:	4604      	mov	r4, r0
 8006752:	4608      	mov	r0, r1
 8006754:	4611      	mov	r1, r2
 8006756:	2200      	movs	r2, #0
 8006758:	602a      	str	r2, [r5, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	f7fa fbb0 	bl	8000ec0 <_write>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_write_r+0x1e>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	b103      	cbz	r3, 800676a <_write_r+0x1e>
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	2000027c 	.word	0x2000027c

08006770 <__swsetup_r>:
 8006770:	4b32      	ldr	r3, [pc, #200]	; (800683c <__swsetup_r+0xcc>)
 8006772:	b570      	push	{r4, r5, r6, lr}
 8006774:	681d      	ldr	r5, [r3, #0]
 8006776:	4606      	mov	r6, r0
 8006778:	460c      	mov	r4, r1
 800677a:	b125      	cbz	r5, 8006786 <__swsetup_r+0x16>
 800677c:	69ab      	ldr	r3, [r5, #24]
 800677e:	b913      	cbnz	r3, 8006786 <__swsetup_r+0x16>
 8006780:	4628      	mov	r0, r5
 8006782:	f7ff fa61 	bl	8005c48 <__sinit>
 8006786:	4b2e      	ldr	r3, [pc, #184]	; (8006840 <__swsetup_r+0xd0>)
 8006788:	429c      	cmp	r4, r3
 800678a:	d10f      	bne.n	80067ac <__swsetup_r+0x3c>
 800678c:	686c      	ldr	r4, [r5, #4]
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006794:	0719      	lsls	r1, r3, #28
 8006796:	d42c      	bmi.n	80067f2 <__swsetup_r+0x82>
 8006798:	06dd      	lsls	r5, r3, #27
 800679a:	d411      	bmi.n	80067c0 <__swsetup_r+0x50>
 800679c:	2309      	movs	r3, #9
 800679e:	6033      	str	r3, [r6, #0]
 80067a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067a4:	81a3      	strh	r3, [r4, #12]
 80067a6:	f04f 30ff 	mov.w	r0, #4294967295
 80067aa:	e03e      	b.n	800682a <__swsetup_r+0xba>
 80067ac:	4b25      	ldr	r3, [pc, #148]	; (8006844 <__swsetup_r+0xd4>)
 80067ae:	429c      	cmp	r4, r3
 80067b0:	d101      	bne.n	80067b6 <__swsetup_r+0x46>
 80067b2:	68ac      	ldr	r4, [r5, #8]
 80067b4:	e7eb      	b.n	800678e <__swsetup_r+0x1e>
 80067b6:	4b24      	ldr	r3, [pc, #144]	; (8006848 <__swsetup_r+0xd8>)
 80067b8:	429c      	cmp	r4, r3
 80067ba:	bf08      	it	eq
 80067bc:	68ec      	ldreq	r4, [r5, #12]
 80067be:	e7e6      	b.n	800678e <__swsetup_r+0x1e>
 80067c0:	0758      	lsls	r0, r3, #29
 80067c2:	d512      	bpl.n	80067ea <__swsetup_r+0x7a>
 80067c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067c6:	b141      	cbz	r1, 80067da <__swsetup_r+0x6a>
 80067c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067cc:	4299      	cmp	r1, r3
 80067ce:	d002      	beq.n	80067d6 <__swsetup_r+0x66>
 80067d0:	4630      	mov	r0, r6
 80067d2:	f7ff fb47 	bl	8005e64 <_free_r>
 80067d6:	2300      	movs	r3, #0
 80067d8:	6363      	str	r3, [r4, #52]	; 0x34
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067e0:	81a3      	strh	r3, [r4, #12]
 80067e2:	2300      	movs	r3, #0
 80067e4:	6063      	str	r3, [r4, #4]
 80067e6:	6923      	ldr	r3, [r4, #16]
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	f043 0308 	orr.w	r3, r3, #8
 80067f0:	81a3      	strh	r3, [r4, #12]
 80067f2:	6923      	ldr	r3, [r4, #16]
 80067f4:	b94b      	cbnz	r3, 800680a <__swsetup_r+0x9a>
 80067f6:	89a3      	ldrh	r3, [r4, #12]
 80067f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006800:	d003      	beq.n	800680a <__swsetup_r+0x9a>
 8006802:	4621      	mov	r1, r4
 8006804:	4630      	mov	r0, r6
 8006806:	f7ff fae5 	bl	8005dd4 <__smakebuf_r>
 800680a:	89a0      	ldrh	r0, [r4, #12]
 800680c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006810:	f010 0301 	ands.w	r3, r0, #1
 8006814:	d00a      	beq.n	800682c <__swsetup_r+0xbc>
 8006816:	2300      	movs	r3, #0
 8006818:	60a3      	str	r3, [r4, #8]
 800681a:	6963      	ldr	r3, [r4, #20]
 800681c:	425b      	negs	r3, r3
 800681e:	61a3      	str	r3, [r4, #24]
 8006820:	6923      	ldr	r3, [r4, #16]
 8006822:	b943      	cbnz	r3, 8006836 <__swsetup_r+0xc6>
 8006824:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006828:	d1ba      	bne.n	80067a0 <__swsetup_r+0x30>
 800682a:	bd70      	pop	{r4, r5, r6, pc}
 800682c:	0781      	lsls	r1, r0, #30
 800682e:	bf58      	it	pl
 8006830:	6963      	ldrpl	r3, [r4, #20]
 8006832:	60a3      	str	r3, [r4, #8]
 8006834:	e7f4      	b.n	8006820 <__swsetup_r+0xb0>
 8006836:	2000      	movs	r0, #0
 8006838:	e7f7      	b.n	800682a <__swsetup_r+0xba>
 800683a:	bf00      	nop
 800683c:	20000034 	.word	0x20000034
 8006840:	08007b30 	.word	0x08007b30
 8006844:	08007b50 	.word	0x08007b50
 8006848:	08007b10 	.word	0x08007b10

0800684c <_close_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4d06      	ldr	r5, [pc, #24]	; (8006868 <_close_r+0x1c>)
 8006850:	2300      	movs	r3, #0
 8006852:	4604      	mov	r4, r0
 8006854:	4608      	mov	r0, r1
 8006856:	602b      	str	r3, [r5, #0]
 8006858:	f7fb f9db 	bl	8001c12 <_close>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d102      	bne.n	8006866 <_close_r+0x1a>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	b103      	cbz	r3, 8006866 <_close_r+0x1a>
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	bd38      	pop	{r3, r4, r5, pc}
 8006868:	2000027c 	.word	0x2000027c

0800686c <_fstat_r>:
 800686c:	b538      	push	{r3, r4, r5, lr}
 800686e:	4d07      	ldr	r5, [pc, #28]	; (800688c <_fstat_r+0x20>)
 8006870:	2300      	movs	r3, #0
 8006872:	4604      	mov	r4, r0
 8006874:	4608      	mov	r0, r1
 8006876:	4611      	mov	r1, r2
 8006878:	602b      	str	r3, [r5, #0]
 800687a:	f7fb f9d6 	bl	8001c2a <_fstat>
 800687e:	1c43      	adds	r3, r0, #1
 8006880:	d102      	bne.n	8006888 <_fstat_r+0x1c>
 8006882:	682b      	ldr	r3, [r5, #0]
 8006884:	b103      	cbz	r3, 8006888 <_fstat_r+0x1c>
 8006886:	6023      	str	r3, [r4, #0]
 8006888:	bd38      	pop	{r3, r4, r5, pc}
 800688a:	bf00      	nop
 800688c:	2000027c 	.word	0x2000027c

08006890 <_isatty_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4d06      	ldr	r5, [pc, #24]	; (80068ac <_isatty_r+0x1c>)
 8006894:	2300      	movs	r3, #0
 8006896:	4604      	mov	r4, r0
 8006898:	4608      	mov	r0, r1
 800689a:	602b      	str	r3, [r5, #0]
 800689c:	f7fb f9d5 	bl	8001c4a <_isatty>
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	d102      	bne.n	80068aa <_isatty_r+0x1a>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	b103      	cbz	r3, 80068aa <_isatty_r+0x1a>
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
 80068ac:	2000027c 	.word	0x2000027c

080068b0 <_lseek_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	4d07      	ldr	r5, [pc, #28]	; (80068d0 <_lseek_r+0x20>)
 80068b4:	4604      	mov	r4, r0
 80068b6:	4608      	mov	r0, r1
 80068b8:	4611      	mov	r1, r2
 80068ba:	2200      	movs	r2, #0
 80068bc:	602a      	str	r2, [r5, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	f7fb f9ce 	bl	8001c60 <_lseek>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	d102      	bne.n	80068ce <_lseek_r+0x1e>
 80068c8:	682b      	ldr	r3, [r5, #0]
 80068ca:	b103      	cbz	r3, 80068ce <_lseek_r+0x1e>
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	bd38      	pop	{r3, r4, r5, pc}
 80068d0:	2000027c 	.word	0x2000027c

080068d4 <__malloc_lock>:
 80068d4:	4801      	ldr	r0, [pc, #4]	; (80068dc <__malloc_lock+0x8>)
 80068d6:	f7ff ba55 	b.w	8005d84 <__retarget_lock_acquire_recursive>
 80068da:	bf00      	nop
 80068dc:	20000270 	.word	0x20000270

080068e0 <__malloc_unlock>:
 80068e0:	4801      	ldr	r0, [pc, #4]	; (80068e8 <__malloc_unlock+0x8>)
 80068e2:	f7ff ba50 	b.w	8005d86 <__retarget_lock_release_recursive>
 80068e6:	bf00      	nop
 80068e8:	20000270 	.word	0x20000270

080068ec <_read_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	4d07      	ldr	r5, [pc, #28]	; (800690c <_read_r+0x20>)
 80068f0:	4604      	mov	r4, r0
 80068f2:	4608      	mov	r0, r1
 80068f4:	4611      	mov	r1, r2
 80068f6:	2200      	movs	r2, #0
 80068f8:	602a      	str	r2, [r5, #0]
 80068fa:	461a      	mov	r2, r3
 80068fc:	f7fb f96c 	bl	8001bd8 <_read>
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	d102      	bne.n	800690a <_read_r+0x1e>
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	b103      	cbz	r3, 800690a <_read_r+0x1e>
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	bd38      	pop	{r3, r4, r5, pc}
 800690c:	2000027c 	.word	0x2000027c

08006910 <cos>:
 8006910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006912:	ec53 2b10 	vmov	r2, r3, d0
 8006916:	4826      	ldr	r0, [pc, #152]	; (80069b0 <cos+0xa0>)
 8006918:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800691c:	4281      	cmp	r1, r0
 800691e:	dc06      	bgt.n	800692e <cos+0x1e>
 8006920:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80069a8 <cos+0x98>
 8006924:	b005      	add	sp, #20
 8006926:	f85d eb04 	ldr.w	lr, [sp], #4
 800692a:	f000 baa9 	b.w	8006e80 <__kernel_cos>
 800692e:	4821      	ldr	r0, [pc, #132]	; (80069b4 <cos+0xa4>)
 8006930:	4281      	cmp	r1, r0
 8006932:	dd09      	ble.n	8006948 <cos+0x38>
 8006934:	ee10 0a10 	vmov	r0, s0
 8006938:	4619      	mov	r1, r3
 800693a:	f7f9 fcc5 	bl	80002c8 <__aeabi_dsub>
 800693e:	ec41 0b10 	vmov	d0, r0, r1
 8006942:	b005      	add	sp, #20
 8006944:	f85d fb04 	ldr.w	pc, [sp], #4
 8006948:	4668      	mov	r0, sp
 800694a:	f000 f88d 	bl	8006a68 <__ieee754_rem_pio2>
 800694e:	f000 0003 	and.w	r0, r0, #3
 8006952:	2801      	cmp	r0, #1
 8006954:	d00b      	beq.n	800696e <cos+0x5e>
 8006956:	2802      	cmp	r0, #2
 8006958:	d016      	beq.n	8006988 <cos+0x78>
 800695a:	b9e0      	cbnz	r0, 8006996 <cos+0x86>
 800695c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006960:	ed9d 0b00 	vldr	d0, [sp]
 8006964:	f000 fa8c 	bl	8006e80 <__kernel_cos>
 8006968:	ec51 0b10 	vmov	r0, r1, d0
 800696c:	e7e7      	b.n	800693e <cos+0x2e>
 800696e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006972:	ed9d 0b00 	vldr	d0, [sp]
 8006976:	f000 fe9b 	bl	80076b0 <__kernel_sin>
 800697a:	ec53 2b10 	vmov	r2, r3, d0
 800697e:	ee10 0a10 	vmov	r0, s0
 8006982:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006986:	e7da      	b.n	800693e <cos+0x2e>
 8006988:	ed9d 1b02 	vldr	d1, [sp, #8]
 800698c:	ed9d 0b00 	vldr	d0, [sp]
 8006990:	f000 fa76 	bl	8006e80 <__kernel_cos>
 8006994:	e7f1      	b.n	800697a <cos+0x6a>
 8006996:	ed9d 1b02 	vldr	d1, [sp, #8]
 800699a:	ed9d 0b00 	vldr	d0, [sp]
 800699e:	2001      	movs	r0, #1
 80069a0:	f000 fe86 	bl	80076b0 <__kernel_sin>
 80069a4:	e7e0      	b.n	8006968 <cos+0x58>
 80069a6:	bf00      	nop
	...
 80069b0:	3fe921fb 	.word	0x3fe921fb
 80069b4:	7fefffff 	.word	0x7fefffff

080069b8 <sin>:
 80069b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069ba:	ec53 2b10 	vmov	r2, r3, d0
 80069be:	4828      	ldr	r0, [pc, #160]	; (8006a60 <sin+0xa8>)
 80069c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80069c4:	4281      	cmp	r1, r0
 80069c6:	dc07      	bgt.n	80069d8 <sin+0x20>
 80069c8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006a58 <sin+0xa0>
 80069cc:	2000      	movs	r0, #0
 80069ce:	b005      	add	sp, #20
 80069d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069d4:	f000 be6c 	b.w	80076b0 <__kernel_sin>
 80069d8:	4822      	ldr	r0, [pc, #136]	; (8006a64 <sin+0xac>)
 80069da:	4281      	cmp	r1, r0
 80069dc:	dd09      	ble.n	80069f2 <sin+0x3a>
 80069de:	ee10 0a10 	vmov	r0, s0
 80069e2:	4619      	mov	r1, r3
 80069e4:	f7f9 fc70 	bl	80002c8 <__aeabi_dsub>
 80069e8:	ec41 0b10 	vmov	d0, r0, r1
 80069ec:	b005      	add	sp, #20
 80069ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80069f2:	4668      	mov	r0, sp
 80069f4:	f000 f838 	bl	8006a68 <__ieee754_rem_pio2>
 80069f8:	f000 0003 	and.w	r0, r0, #3
 80069fc:	2801      	cmp	r0, #1
 80069fe:	d00c      	beq.n	8006a1a <sin+0x62>
 8006a00:	2802      	cmp	r0, #2
 8006a02:	d011      	beq.n	8006a28 <sin+0x70>
 8006a04:	b9f0      	cbnz	r0, 8006a44 <sin+0x8c>
 8006a06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a0a:	ed9d 0b00 	vldr	d0, [sp]
 8006a0e:	2001      	movs	r0, #1
 8006a10:	f000 fe4e 	bl	80076b0 <__kernel_sin>
 8006a14:	ec51 0b10 	vmov	r0, r1, d0
 8006a18:	e7e6      	b.n	80069e8 <sin+0x30>
 8006a1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a1e:	ed9d 0b00 	vldr	d0, [sp]
 8006a22:	f000 fa2d 	bl	8006e80 <__kernel_cos>
 8006a26:	e7f5      	b.n	8006a14 <sin+0x5c>
 8006a28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a2c:	ed9d 0b00 	vldr	d0, [sp]
 8006a30:	2001      	movs	r0, #1
 8006a32:	f000 fe3d 	bl	80076b0 <__kernel_sin>
 8006a36:	ec53 2b10 	vmov	r2, r3, d0
 8006a3a:	ee10 0a10 	vmov	r0, s0
 8006a3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006a42:	e7d1      	b.n	80069e8 <sin+0x30>
 8006a44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a48:	ed9d 0b00 	vldr	d0, [sp]
 8006a4c:	f000 fa18 	bl	8006e80 <__kernel_cos>
 8006a50:	e7f1      	b.n	8006a36 <sin+0x7e>
 8006a52:	bf00      	nop
 8006a54:	f3af 8000 	nop.w
	...
 8006a60:	3fe921fb 	.word	0x3fe921fb
 8006a64:	7fefffff 	.word	0x7fefffff

08006a68 <__ieee754_rem_pio2>:
 8006a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	ed2d 8b02 	vpush	{d8}
 8006a70:	ec55 4b10 	vmov	r4, r5, d0
 8006a74:	4bca      	ldr	r3, [pc, #808]	; (8006da0 <__ieee754_rem_pio2+0x338>)
 8006a76:	b08b      	sub	sp, #44	; 0x2c
 8006a78:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006a7c:	4598      	cmp	r8, r3
 8006a7e:	4682      	mov	sl, r0
 8006a80:	9502      	str	r5, [sp, #8]
 8006a82:	dc08      	bgt.n	8006a96 <__ieee754_rem_pio2+0x2e>
 8006a84:	2200      	movs	r2, #0
 8006a86:	2300      	movs	r3, #0
 8006a88:	ed80 0b00 	vstr	d0, [r0]
 8006a8c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006a90:	f04f 0b00 	mov.w	fp, #0
 8006a94:	e028      	b.n	8006ae8 <__ieee754_rem_pio2+0x80>
 8006a96:	4bc3      	ldr	r3, [pc, #780]	; (8006da4 <__ieee754_rem_pio2+0x33c>)
 8006a98:	4598      	cmp	r8, r3
 8006a9a:	dc78      	bgt.n	8006b8e <__ieee754_rem_pio2+0x126>
 8006a9c:	9b02      	ldr	r3, [sp, #8]
 8006a9e:	4ec2      	ldr	r6, [pc, #776]	; (8006da8 <__ieee754_rem_pio2+0x340>)
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	ee10 0a10 	vmov	r0, s0
 8006aa6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006d68 <__ieee754_rem_pio2+0x300>)
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	4629      	mov	r1, r5
 8006aae:	dd39      	ble.n	8006b24 <__ieee754_rem_pio2+0xbc>
 8006ab0:	f7f9 fc0a 	bl	80002c8 <__aeabi_dsub>
 8006ab4:	45b0      	cmp	r8, r6
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	460d      	mov	r5, r1
 8006aba:	d01b      	beq.n	8006af4 <__ieee754_rem_pio2+0x8c>
 8006abc:	a3ac      	add	r3, pc, #688	; (adr r3, 8006d70 <__ieee754_rem_pio2+0x308>)
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	f7f9 fc01 	bl	80002c8 <__aeabi_dsub>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	e9ca 2300 	strd	r2, r3, [sl]
 8006ace:	4620      	mov	r0, r4
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	f7f9 fbf9 	bl	80002c8 <__aeabi_dsub>
 8006ad6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006d70 <__ieee754_rem_pio2+0x308>)
 8006ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006adc:	f7f9 fbf4 	bl	80002c8 <__aeabi_dsub>
 8006ae0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ae4:	f04f 0b01 	mov.w	fp, #1
 8006ae8:	4658      	mov	r0, fp
 8006aea:	b00b      	add	sp, #44	; 0x2c
 8006aec:	ecbd 8b02 	vpop	{d8}
 8006af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af4:	a3a0      	add	r3, pc, #640	; (adr r3, 8006d78 <__ieee754_rem_pio2+0x310>)
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	f7f9 fbe5 	bl	80002c8 <__aeabi_dsub>
 8006afe:	a3a0      	add	r3, pc, #640	; (adr r3, 8006d80 <__ieee754_rem_pio2+0x318>)
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	4604      	mov	r4, r0
 8006b06:	460d      	mov	r5, r1
 8006b08:	f7f9 fbde 	bl	80002c8 <__aeabi_dsub>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	e9ca 2300 	strd	r2, r3, [sl]
 8006b14:	4620      	mov	r0, r4
 8006b16:	4629      	mov	r1, r5
 8006b18:	f7f9 fbd6 	bl	80002c8 <__aeabi_dsub>
 8006b1c:	a398      	add	r3, pc, #608	; (adr r3, 8006d80 <__ieee754_rem_pio2+0x318>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	e7db      	b.n	8006adc <__ieee754_rem_pio2+0x74>
 8006b24:	f7f9 fbd2 	bl	80002cc <__adddf3>
 8006b28:	45b0      	cmp	r8, r6
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	460d      	mov	r5, r1
 8006b2e:	d016      	beq.n	8006b5e <__ieee754_rem_pio2+0xf6>
 8006b30:	a38f      	add	r3, pc, #572	; (adr r3, 8006d70 <__ieee754_rem_pio2+0x308>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f7f9 fbc9 	bl	80002cc <__adddf3>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	e9ca 2300 	strd	r2, r3, [sl]
 8006b42:	4620      	mov	r0, r4
 8006b44:	4629      	mov	r1, r5
 8006b46:	f7f9 fbbf 	bl	80002c8 <__aeabi_dsub>
 8006b4a:	a389      	add	r3, pc, #548	; (adr r3, 8006d70 <__ieee754_rem_pio2+0x308>)
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	f7f9 fbbc 	bl	80002cc <__adddf3>
 8006b54:	f04f 3bff 	mov.w	fp, #4294967295
 8006b58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006b5c:	e7c4      	b.n	8006ae8 <__ieee754_rem_pio2+0x80>
 8006b5e:	a386      	add	r3, pc, #536	; (adr r3, 8006d78 <__ieee754_rem_pio2+0x310>)
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f7f9 fbb2 	bl	80002cc <__adddf3>
 8006b68:	a385      	add	r3, pc, #532	; (adr r3, 8006d80 <__ieee754_rem_pio2+0x318>)
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	4604      	mov	r4, r0
 8006b70:	460d      	mov	r5, r1
 8006b72:	f7f9 fbab 	bl	80002cc <__adddf3>
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	e9ca 2300 	strd	r2, r3, [sl]
 8006b7e:	4620      	mov	r0, r4
 8006b80:	4629      	mov	r1, r5
 8006b82:	f7f9 fba1 	bl	80002c8 <__aeabi_dsub>
 8006b86:	a37e      	add	r3, pc, #504	; (adr r3, 8006d80 <__ieee754_rem_pio2+0x318>)
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	e7e0      	b.n	8006b50 <__ieee754_rem_pio2+0xe8>
 8006b8e:	4b87      	ldr	r3, [pc, #540]	; (8006dac <__ieee754_rem_pio2+0x344>)
 8006b90:	4598      	cmp	r8, r3
 8006b92:	f300 80d9 	bgt.w	8006d48 <__ieee754_rem_pio2+0x2e0>
 8006b96:	f000 fe49 	bl	800782c <fabs>
 8006b9a:	ec55 4b10 	vmov	r4, r5, d0
 8006b9e:	ee10 0a10 	vmov	r0, s0
 8006ba2:	a379      	add	r3, pc, #484	; (adr r3, 8006d88 <__ieee754_rem_pio2+0x320>)
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	4629      	mov	r1, r5
 8006baa:	f7f9 fd45 	bl	8000638 <__aeabi_dmul>
 8006bae:	4b80      	ldr	r3, [pc, #512]	; (8006db0 <__ieee754_rem_pio2+0x348>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f7f9 fb8b 	bl	80002cc <__adddf3>
 8006bb6:	f7f9 ffd9 	bl	8000b6c <__aeabi_d2iz>
 8006bba:	4683      	mov	fp, r0
 8006bbc:	f7f9 fcd2 	bl	8000564 <__aeabi_i2d>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	ec43 2b18 	vmov	d8, r2, r3
 8006bc8:	a367      	add	r3, pc, #412	; (adr r3, 8006d68 <__ieee754_rem_pio2+0x300>)
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	f7f9 fd33 	bl	8000638 <__aeabi_dmul>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	4629      	mov	r1, r5
 8006bda:	f7f9 fb75 	bl	80002c8 <__aeabi_dsub>
 8006bde:	a364      	add	r3, pc, #400	; (adr r3, 8006d70 <__ieee754_rem_pio2+0x308>)
 8006be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be4:	4606      	mov	r6, r0
 8006be6:	460f      	mov	r7, r1
 8006be8:	ec51 0b18 	vmov	r0, r1, d8
 8006bec:	f7f9 fd24 	bl	8000638 <__aeabi_dmul>
 8006bf0:	f1bb 0f1f 	cmp.w	fp, #31
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	460d      	mov	r5, r1
 8006bf8:	dc0d      	bgt.n	8006c16 <__ieee754_rem_pio2+0x1ae>
 8006bfa:	4b6e      	ldr	r3, [pc, #440]	; (8006db4 <__ieee754_rem_pio2+0x34c>)
 8006bfc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c04:	4543      	cmp	r3, r8
 8006c06:	d006      	beq.n	8006c16 <__ieee754_rem_pio2+0x1ae>
 8006c08:	4622      	mov	r2, r4
 8006c0a:	462b      	mov	r3, r5
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	4639      	mov	r1, r7
 8006c10:	f7f9 fb5a 	bl	80002c8 <__aeabi_dsub>
 8006c14:	e00f      	b.n	8006c36 <__ieee754_rem_pio2+0x1ce>
 8006c16:	462b      	mov	r3, r5
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	f7f9 fb53 	bl	80002c8 <__aeabi_dsub>
 8006c22:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006c26:	9303      	str	r3, [sp, #12]
 8006c28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c2c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006c30:	f1b8 0f10 	cmp.w	r8, #16
 8006c34:	dc02      	bgt.n	8006c3c <__ieee754_rem_pio2+0x1d4>
 8006c36:	e9ca 0100 	strd	r0, r1, [sl]
 8006c3a:	e039      	b.n	8006cb0 <__ieee754_rem_pio2+0x248>
 8006c3c:	a34e      	add	r3, pc, #312	; (adr r3, 8006d78 <__ieee754_rem_pio2+0x310>)
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	ec51 0b18 	vmov	r0, r1, d8
 8006c46:	f7f9 fcf7 	bl	8000638 <__aeabi_dmul>
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	460d      	mov	r5, r1
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4630      	mov	r0, r6
 8006c54:	4639      	mov	r1, r7
 8006c56:	f7f9 fb37 	bl	80002c8 <__aeabi_dsub>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4680      	mov	r8, r0
 8006c60:	4689      	mov	r9, r1
 8006c62:	4630      	mov	r0, r6
 8006c64:	4639      	mov	r1, r7
 8006c66:	f7f9 fb2f 	bl	80002c8 <__aeabi_dsub>
 8006c6a:	4622      	mov	r2, r4
 8006c6c:	462b      	mov	r3, r5
 8006c6e:	f7f9 fb2b 	bl	80002c8 <__aeabi_dsub>
 8006c72:	a343      	add	r3, pc, #268	; (adr r3, 8006d80 <__ieee754_rem_pio2+0x318>)
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c78:	4604      	mov	r4, r0
 8006c7a:	460d      	mov	r5, r1
 8006c7c:	ec51 0b18 	vmov	r0, r1, d8
 8006c80:	f7f9 fcda 	bl	8000638 <__aeabi_dmul>
 8006c84:	4622      	mov	r2, r4
 8006c86:	462b      	mov	r3, r5
 8006c88:	f7f9 fb1e 	bl	80002c8 <__aeabi_dsub>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	4604      	mov	r4, r0
 8006c92:	460d      	mov	r5, r1
 8006c94:	4640      	mov	r0, r8
 8006c96:	4649      	mov	r1, r9
 8006c98:	f7f9 fb16 	bl	80002c8 <__aeabi_dsub>
 8006c9c:	9a03      	ldr	r2, [sp, #12]
 8006c9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b31      	cmp	r3, #49	; 0x31
 8006ca6:	dc24      	bgt.n	8006cf2 <__ieee754_rem_pio2+0x28a>
 8006ca8:	e9ca 0100 	strd	r0, r1, [sl]
 8006cac:	4646      	mov	r6, r8
 8006cae:	464f      	mov	r7, r9
 8006cb0:	e9da 8900 	ldrd	r8, r9, [sl]
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	4642      	mov	r2, r8
 8006cb8:	464b      	mov	r3, r9
 8006cba:	4639      	mov	r1, r7
 8006cbc:	f7f9 fb04 	bl	80002c8 <__aeabi_dsub>
 8006cc0:	462b      	mov	r3, r5
 8006cc2:	4622      	mov	r2, r4
 8006cc4:	f7f9 fb00 	bl	80002c8 <__aeabi_dsub>
 8006cc8:	9b02      	ldr	r3, [sp, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006cd0:	f6bf af0a 	bge.w	8006ae8 <__ieee754_rem_pio2+0x80>
 8006cd4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006cd8:	f8ca 3004 	str.w	r3, [sl, #4]
 8006cdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ce0:	f8ca 8000 	str.w	r8, [sl]
 8006ce4:	f8ca 0008 	str.w	r0, [sl, #8]
 8006ce8:	f8ca 300c 	str.w	r3, [sl, #12]
 8006cec:	f1cb 0b00 	rsb	fp, fp, #0
 8006cf0:	e6fa      	b.n	8006ae8 <__ieee754_rem_pio2+0x80>
 8006cf2:	a327      	add	r3, pc, #156	; (adr r3, 8006d90 <__ieee754_rem_pio2+0x328>)
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	ec51 0b18 	vmov	r0, r1, d8
 8006cfc:	f7f9 fc9c 	bl	8000638 <__aeabi_dmul>
 8006d00:	4604      	mov	r4, r0
 8006d02:	460d      	mov	r5, r1
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4640      	mov	r0, r8
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	f7f9 fadc 	bl	80002c8 <__aeabi_dsub>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4606      	mov	r6, r0
 8006d16:	460f      	mov	r7, r1
 8006d18:	4640      	mov	r0, r8
 8006d1a:	4649      	mov	r1, r9
 8006d1c:	f7f9 fad4 	bl	80002c8 <__aeabi_dsub>
 8006d20:	4622      	mov	r2, r4
 8006d22:	462b      	mov	r3, r5
 8006d24:	f7f9 fad0 	bl	80002c8 <__aeabi_dsub>
 8006d28:	a31b      	add	r3, pc, #108	; (adr r3, 8006d98 <__ieee754_rem_pio2+0x330>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	4604      	mov	r4, r0
 8006d30:	460d      	mov	r5, r1
 8006d32:	ec51 0b18 	vmov	r0, r1, d8
 8006d36:	f7f9 fc7f 	bl	8000638 <__aeabi_dmul>
 8006d3a:	4622      	mov	r2, r4
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	f7f9 fac3 	bl	80002c8 <__aeabi_dsub>
 8006d42:	4604      	mov	r4, r0
 8006d44:	460d      	mov	r5, r1
 8006d46:	e75f      	b.n	8006c08 <__ieee754_rem_pio2+0x1a0>
 8006d48:	4b1b      	ldr	r3, [pc, #108]	; (8006db8 <__ieee754_rem_pio2+0x350>)
 8006d4a:	4598      	cmp	r8, r3
 8006d4c:	dd36      	ble.n	8006dbc <__ieee754_rem_pio2+0x354>
 8006d4e:	ee10 2a10 	vmov	r2, s0
 8006d52:	462b      	mov	r3, r5
 8006d54:	4620      	mov	r0, r4
 8006d56:	4629      	mov	r1, r5
 8006d58:	f7f9 fab6 	bl	80002c8 <__aeabi_dsub>
 8006d5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d60:	e9ca 0100 	strd	r0, r1, [sl]
 8006d64:	e694      	b.n	8006a90 <__ieee754_rem_pio2+0x28>
 8006d66:	bf00      	nop
 8006d68:	54400000 	.word	0x54400000
 8006d6c:	3ff921fb 	.word	0x3ff921fb
 8006d70:	1a626331 	.word	0x1a626331
 8006d74:	3dd0b461 	.word	0x3dd0b461
 8006d78:	1a600000 	.word	0x1a600000
 8006d7c:	3dd0b461 	.word	0x3dd0b461
 8006d80:	2e037073 	.word	0x2e037073
 8006d84:	3ba3198a 	.word	0x3ba3198a
 8006d88:	6dc9c883 	.word	0x6dc9c883
 8006d8c:	3fe45f30 	.word	0x3fe45f30
 8006d90:	2e000000 	.word	0x2e000000
 8006d94:	3ba3198a 	.word	0x3ba3198a
 8006d98:	252049c1 	.word	0x252049c1
 8006d9c:	397b839a 	.word	0x397b839a
 8006da0:	3fe921fb 	.word	0x3fe921fb
 8006da4:	4002d97b 	.word	0x4002d97b
 8006da8:	3ff921fb 	.word	0x3ff921fb
 8006dac:	413921fb 	.word	0x413921fb
 8006db0:	3fe00000 	.word	0x3fe00000
 8006db4:	08007ba4 	.word	0x08007ba4
 8006db8:	7fefffff 	.word	0x7fefffff
 8006dbc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006dc0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006dc4:	ee10 0a10 	vmov	r0, s0
 8006dc8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006dcc:	ee10 6a10 	vmov	r6, s0
 8006dd0:	460f      	mov	r7, r1
 8006dd2:	f7f9 fecb 	bl	8000b6c <__aeabi_d2iz>
 8006dd6:	f7f9 fbc5 	bl	8000564 <__aeabi_i2d>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4630      	mov	r0, r6
 8006de0:	4639      	mov	r1, r7
 8006de2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006de6:	f7f9 fa6f 	bl	80002c8 <__aeabi_dsub>
 8006dea:	4b23      	ldr	r3, [pc, #140]	; (8006e78 <__ieee754_rem_pio2+0x410>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	f7f9 fc23 	bl	8000638 <__aeabi_dmul>
 8006df2:	460f      	mov	r7, r1
 8006df4:	4606      	mov	r6, r0
 8006df6:	f7f9 feb9 	bl	8000b6c <__aeabi_d2iz>
 8006dfa:	f7f9 fbb3 	bl	8000564 <__aeabi_i2d>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	4630      	mov	r0, r6
 8006e04:	4639      	mov	r1, r7
 8006e06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e0a:	f7f9 fa5d 	bl	80002c8 <__aeabi_dsub>
 8006e0e:	4b1a      	ldr	r3, [pc, #104]	; (8006e78 <__ieee754_rem_pio2+0x410>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	f7f9 fc11 	bl	8000638 <__aeabi_dmul>
 8006e16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006e1a:	ad04      	add	r5, sp, #16
 8006e1c:	f04f 0803 	mov.w	r8, #3
 8006e20:	46a9      	mov	r9, r5
 8006e22:	2600      	movs	r6, #0
 8006e24:	2700      	movs	r7, #0
 8006e26:	4632      	mov	r2, r6
 8006e28:	463b      	mov	r3, r7
 8006e2a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006e2e:	46c3      	mov	fp, r8
 8006e30:	3d08      	subs	r5, #8
 8006e32:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e36:	f7f9 fe67 	bl	8000b08 <__aeabi_dcmpeq>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d1f3      	bne.n	8006e26 <__ieee754_rem_pio2+0x3be>
 8006e3e:	4b0f      	ldr	r3, [pc, #60]	; (8006e7c <__ieee754_rem_pio2+0x414>)
 8006e40:	9301      	str	r3, [sp, #4]
 8006e42:	2302      	movs	r3, #2
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	4622      	mov	r2, r4
 8006e48:	465b      	mov	r3, fp
 8006e4a:	4651      	mov	r1, sl
 8006e4c:	4648      	mov	r0, r9
 8006e4e:	f000 f8df 	bl	8007010 <__kernel_rem_pio2>
 8006e52:	9b02      	ldr	r3, [sp, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	4683      	mov	fp, r0
 8006e58:	f6bf ae46 	bge.w	8006ae8 <__ieee754_rem_pio2+0x80>
 8006e5c:	e9da 2100 	ldrd	r2, r1, [sl]
 8006e60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e64:	e9ca 2300 	strd	r2, r3, [sl]
 8006e68:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006e6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e70:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006e74:	e73a      	b.n	8006cec <__ieee754_rem_pio2+0x284>
 8006e76:	bf00      	nop
 8006e78:	41700000 	.word	0x41700000
 8006e7c:	08007c24 	.word	0x08007c24

08006e80 <__kernel_cos>:
 8006e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e84:	ec57 6b10 	vmov	r6, r7, d0
 8006e88:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006e8c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006e90:	ed8d 1b00 	vstr	d1, [sp]
 8006e94:	da07      	bge.n	8006ea6 <__kernel_cos+0x26>
 8006e96:	ee10 0a10 	vmov	r0, s0
 8006e9a:	4639      	mov	r1, r7
 8006e9c:	f7f9 fe66 	bl	8000b6c <__aeabi_d2iz>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	f000 8088 	beq.w	8006fb6 <__kernel_cos+0x136>
 8006ea6:	4632      	mov	r2, r6
 8006ea8:	463b      	mov	r3, r7
 8006eaa:	4630      	mov	r0, r6
 8006eac:	4639      	mov	r1, r7
 8006eae:	f7f9 fbc3 	bl	8000638 <__aeabi_dmul>
 8006eb2:	4b51      	ldr	r3, [pc, #324]	; (8006ff8 <__kernel_cos+0x178>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	460d      	mov	r5, r1
 8006eba:	f7f9 fbbd 	bl	8000638 <__aeabi_dmul>
 8006ebe:	a340      	add	r3, pc, #256	; (adr r3, 8006fc0 <__kernel_cos+0x140>)
 8006ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec4:	4682      	mov	sl, r0
 8006ec6:	468b      	mov	fp, r1
 8006ec8:	4620      	mov	r0, r4
 8006eca:	4629      	mov	r1, r5
 8006ecc:	f7f9 fbb4 	bl	8000638 <__aeabi_dmul>
 8006ed0:	a33d      	add	r3, pc, #244	; (adr r3, 8006fc8 <__kernel_cos+0x148>)
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	f7f9 f9f9 	bl	80002cc <__adddf3>
 8006eda:	4622      	mov	r2, r4
 8006edc:	462b      	mov	r3, r5
 8006ede:	f7f9 fbab 	bl	8000638 <__aeabi_dmul>
 8006ee2:	a33b      	add	r3, pc, #236	; (adr r3, 8006fd0 <__kernel_cos+0x150>)
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	f7f9 f9ee 	bl	80002c8 <__aeabi_dsub>
 8006eec:	4622      	mov	r2, r4
 8006eee:	462b      	mov	r3, r5
 8006ef0:	f7f9 fba2 	bl	8000638 <__aeabi_dmul>
 8006ef4:	a338      	add	r3, pc, #224	; (adr r3, 8006fd8 <__kernel_cos+0x158>)
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f7f9 f9e7 	bl	80002cc <__adddf3>
 8006efe:	4622      	mov	r2, r4
 8006f00:	462b      	mov	r3, r5
 8006f02:	f7f9 fb99 	bl	8000638 <__aeabi_dmul>
 8006f06:	a336      	add	r3, pc, #216	; (adr r3, 8006fe0 <__kernel_cos+0x160>)
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	f7f9 f9dc 	bl	80002c8 <__aeabi_dsub>
 8006f10:	4622      	mov	r2, r4
 8006f12:	462b      	mov	r3, r5
 8006f14:	f7f9 fb90 	bl	8000638 <__aeabi_dmul>
 8006f18:	a333      	add	r3, pc, #204	; (adr r3, 8006fe8 <__kernel_cos+0x168>)
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	f7f9 f9d5 	bl	80002cc <__adddf3>
 8006f22:	4622      	mov	r2, r4
 8006f24:	462b      	mov	r3, r5
 8006f26:	f7f9 fb87 	bl	8000638 <__aeabi_dmul>
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	462b      	mov	r3, r5
 8006f2e:	f7f9 fb83 	bl	8000638 <__aeabi_dmul>
 8006f32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f36:	4604      	mov	r4, r0
 8006f38:	460d      	mov	r5, r1
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	4639      	mov	r1, r7
 8006f3e:	f7f9 fb7b 	bl	8000638 <__aeabi_dmul>
 8006f42:	460b      	mov	r3, r1
 8006f44:	4602      	mov	r2, r0
 8006f46:	4629      	mov	r1, r5
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f7f9 f9bd 	bl	80002c8 <__aeabi_dsub>
 8006f4e:	4b2b      	ldr	r3, [pc, #172]	; (8006ffc <__kernel_cos+0x17c>)
 8006f50:	4598      	cmp	r8, r3
 8006f52:	4606      	mov	r6, r0
 8006f54:	460f      	mov	r7, r1
 8006f56:	dc10      	bgt.n	8006f7a <__kernel_cos+0xfa>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4650      	mov	r0, sl
 8006f5e:	4659      	mov	r1, fp
 8006f60:	f7f9 f9b2 	bl	80002c8 <__aeabi_dsub>
 8006f64:	460b      	mov	r3, r1
 8006f66:	4926      	ldr	r1, [pc, #152]	; (8007000 <__kernel_cos+0x180>)
 8006f68:	4602      	mov	r2, r0
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	f7f9 f9ac 	bl	80002c8 <__aeabi_dsub>
 8006f70:	ec41 0b10 	vmov	d0, r0, r1
 8006f74:	b003      	add	sp, #12
 8006f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7a:	4b22      	ldr	r3, [pc, #136]	; (8007004 <__kernel_cos+0x184>)
 8006f7c:	4920      	ldr	r1, [pc, #128]	; (8007000 <__kernel_cos+0x180>)
 8006f7e:	4598      	cmp	r8, r3
 8006f80:	bfcc      	ite	gt
 8006f82:	4d21      	ldrgt	r5, [pc, #132]	; (8007008 <__kernel_cos+0x188>)
 8006f84:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006f88:	2400      	movs	r4, #0
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	462b      	mov	r3, r5
 8006f8e:	2000      	movs	r0, #0
 8006f90:	f7f9 f99a 	bl	80002c8 <__aeabi_dsub>
 8006f94:	4622      	mov	r2, r4
 8006f96:	4680      	mov	r8, r0
 8006f98:	4689      	mov	r9, r1
 8006f9a:	462b      	mov	r3, r5
 8006f9c:	4650      	mov	r0, sl
 8006f9e:	4659      	mov	r1, fp
 8006fa0:	f7f9 f992 	bl	80002c8 <__aeabi_dsub>
 8006fa4:	4632      	mov	r2, r6
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	f7f9 f98e 	bl	80002c8 <__aeabi_dsub>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	e7da      	b.n	8006f6c <__kernel_cos+0xec>
 8006fb6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006ff0 <__kernel_cos+0x170>
 8006fba:	e7db      	b.n	8006f74 <__kernel_cos+0xf4>
 8006fbc:	f3af 8000 	nop.w
 8006fc0:	be8838d4 	.word	0xbe8838d4
 8006fc4:	bda8fae9 	.word	0xbda8fae9
 8006fc8:	bdb4b1c4 	.word	0xbdb4b1c4
 8006fcc:	3e21ee9e 	.word	0x3e21ee9e
 8006fd0:	809c52ad 	.word	0x809c52ad
 8006fd4:	3e927e4f 	.word	0x3e927e4f
 8006fd8:	19cb1590 	.word	0x19cb1590
 8006fdc:	3efa01a0 	.word	0x3efa01a0
 8006fe0:	16c15177 	.word	0x16c15177
 8006fe4:	3f56c16c 	.word	0x3f56c16c
 8006fe8:	5555554c 	.word	0x5555554c
 8006fec:	3fa55555 	.word	0x3fa55555
 8006ff0:	00000000 	.word	0x00000000
 8006ff4:	3ff00000 	.word	0x3ff00000
 8006ff8:	3fe00000 	.word	0x3fe00000
 8006ffc:	3fd33332 	.word	0x3fd33332
 8007000:	3ff00000 	.word	0x3ff00000
 8007004:	3fe90000 	.word	0x3fe90000
 8007008:	3fd20000 	.word	0x3fd20000
 800700c:	00000000 	.word	0x00000000

08007010 <__kernel_rem_pio2>:
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	ed2d 8b02 	vpush	{d8}
 8007018:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800701c:	f112 0f14 	cmn.w	r2, #20
 8007020:	9308      	str	r3, [sp, #32]
 8007022:	9101      	str	r1, [sp, #4]
 8007024:	4bc4      	ldr	r3, [pc, #784]	; (8007338 <__kernel_rem_pio2+0x328>)
 8007026:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007028:	900b      	str	r0, [sp, #44]	; 0x2c
 800702a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800702e:	9302      	str	r3, [sp, #8]
 8007030:	9b08      	ldr	r3, [sp, #32]
 8007032:	f103 33ff 	add.w	r3, r3, #4294967295
 8007036:	bfa8      	it	ge
 8007038:	1ed4      	subge	r4, r2, #3
 800703a:	9306      	str	r3, [sp, #24]
 800703c:	bfb2      	itee	lt
 800703e:	2400      	movlt	r4, #0
 8007040:	2318      	movge	r3, #24
 8007042:	fb94 f4f3 	sdivge	r4, r4, r3
 8007046:	f06f 0317 	mvn.w	r3, #23
 800704a:	fb04 3303 	mla	r3, r4, r3, r3
 800704e:	eb03 0a02 	add.w	sl, r3, r2
 8007052:	9b02      	ldr	r3, [sp, #8]
 8007054:	9a06      	ldr	r2, [sp, #24]
 8007056:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007328 <__kernel_rem_pio2+0x318>
 800705a:	eb03 0802 	add.w	r8, r3, r2
 800705e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007060:	1aa7      	subs	r7, r4, r2
 8007062:	ae22      	add	r6, sp, #136	; 0x88
 8007064:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007068:	2500      	movs	r5, #0
 800706a:	4545      	cmp	r5, r8
 800706c:	dd13      	ble.n	8007096 <__kernel_rem_pio2+0x86>
 800706e:	9b08      	ldr	r3, [sp, #32]
 8007070:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007328 <__kernel_rem_pio2+0x318>
 8007074:	aa22      	add	r2, sp, #136	; 0x88
 8007076:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800707a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800707e:	f04f 0800 	mov.w	r8, #0
 8007082:	9b02      	ldr	r3, [sp, #8]
 8007084:	4598      	cmp	r8, r3
 8007086:	dc2f      	bgt.n	80070e8 <__kernel_rem_pio2+0xd8>
 8007088:	ed8d 8b04 	vstr	d8, [sp, #16]
 800708c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007090:	462f      	mov	r7, r5
 8007092:	2600      	movs	r6, #0
 8007094:	e01b      	b.n	80070ce <__kernel_rem_pio2+0xbe>
 8007096:	42ef      	cmn	r7, r5
 8007098:	d407      	bmi.n	80070aa <__kernel_rem_pio2+0x9a>
 800709a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800709e:	f7f9 fa61 	bl	8000564 <__aeabi_i2d>
 80070a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80070a6:	3501      	adds	r5, #1
 80070a8:	e7df      	b.n	800706a <__kernel_rem_pio2+0x5a>
 80070aa:	ec51 0b18 	vmov	r0, r1, d8
 80070ae:	e7f8      	b.n	80070a2 <__kernel_rem_pio2+0x92>
 80070b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80070b8:	f7f9 fabe 	bl	8000638 <__aeabi_dmul>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070c4:	f7f9 f902 	bl	80002cc <__adddf3>
 80070c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070cc:	3601      	adds	r6, #1
 80070ce:	9b06      	ldr	r3, [sp, #24]
 80070d0:	429e      	cmp	r6, r3
 80070d2:	f1a7 0708 	sub.w	r7, r7, #8
 80070d6:	ddeb      	ble.n	80070b0 <__kernel_rem_pio2+0xa0>
 80070d8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80070dc:	f108 0801 	add.w	r8, r8, #1
 80070e0:	ecab 7b02 	vstmia	fp!, {d7}
 80070e4:	3508      	adds	r5, #8
 80070e6:	e7cc      	b.n	8007082 <__kernel_rem_pio2+0x72>
 80070e8:	9b02      	ldr	r3, [sp, #8]
 80070ea:	aa0e      	add	r2, sp, #56	; 0x38
 80070ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80070f0:	930d      	str	r3, [sp, #52]	; 0x34
 80070f2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80070f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80070f8:	9c02      	ldr	r4, [sp, #8]
 80070fa:	930c      	str	r3, [sp, #48]	; 0x30
 80070fc:	00e3      	lsls	r3, r4, #3
 80070fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007100:	ab9a      	add	r3, sp, #616	; 0x268
 8007102:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007106:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800710a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800710e:	ab72      	add	r3, sp, #456	; 0x1c8
 8007110:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007114:	46c3      	mov	fp, r8
 8007116:	46a1      	mov	r9, r4
 8007118:	f1b9 0f00 	cmp.w	r9, #0
 800711c:	f1a5 0508 	sub.w	r5, r5, #8
 8007120:	dc77      	bgt.n	8007212 <__kernel_rem_pio2+0x202>
 8007122:	ec47 6b10 	vmov	d0, r6, r7
 8007126:	4650      	mov	r0, sl
 8007128:	f000 fc0a 	bl	8007940 <scalbn>
 800712c:	ec57 6b10 	vmov	r6, r7, d0
 8007130:	2200      	movs	r2, #0
 8007132:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007136:	ee10 0a10 	vmov	r0, s0
 800713a:	4639      	mov	r1, r7
 800713c:	f7f9 fa7c 	bl	8000638 <__aeabi_dmul>
 8007140:	ec41 0b10 	vmov	d0, r0, r1
 8007144:	f000 fb7c 	bl	8007840 <floor>
 8007148:	4b7c      	ldr	r3, [pc, #496]	; (800733c <__kernel_rem_pio2+0x32c>)
 800714a:	ec51 0b10 	vmov	r0, r1, d0
 800714e:	2200      	movs	r2, #0
 8007150:	f7f9 fa72 	bl	8000638 <__aeabi_dmul>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	4630      	mov	r0, r6
 800715a:	4639      	mov	r1, r7
 800715c:	f7f9 f8b4 	bl	80002c8 <__aeabi_dsub>
 8007160:	460f      	mov	r7, r1
 8007162:	4606      	mov	r6, r0
 8007164:	f7f9 fd02 	bl	8000b6c <__aeabi_d2iz>
 8007168:	9004      	str	r0, [sp, #16]
 800716a:	f7f9 f9fb 	bl	8000564 <__aeabi_i2d>
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	4630      	mov	r0, r6
 8007174:	4639      	mov	r1, r7
 8007176:	f7f9 f8a7 	bl	80002c8 <__aeabi_dsub>
 800717a:	f1ba 0f00 	cmp.w	sl, #0
 800717e:	4606      	mov	r6, r0
 8007180:	460f      	mov	r7, r1
 8007182:	dd6d      	ble.n	8007260 <__kernel_rem_pio2+0x250>
 8007184:	1e62      	subs	r2, r4, #1
 8007186:	ab0e      	add	r3, sp, #56	; 0x38
 8007188:	9d04      	ldr	r5, [sp, #16]
 800718a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800718e:	f1ca 0118 	rsb	r1, sl, #24
 8007192:	fa40 f301 	asr.w	r3, r0, r1
 8007196:	441d      	add	r5, r3
 8007198:	408b      	lsls	r3, r1
 800719a:	1ac0      	subs	r0, r0, r3
 800719c:	ab0e      	add	r3, sp, #56	; 0x38
 800719e:	9504      	str	r5, [sp, #16]
 80071a0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80071a4:	f1ca 0317 	rsb	r3, sl, #23
 80071a8:	fa40 fb03 	asr.w	fp, r0, r3
 80071ac:	f1bb 0f00 	cmp.w	fp, #0
 80071b0:	dd65      	ble.n	800727e <__kernel_rem_pio2+0x26e>
 80071b2:	9b04      	ldr	r3, [sp, #16]
 80071b4:	2200      	movs	r2, #0
 80071b6:	3301      	adds	r3, #1
 80071b8:	9304      	str	r3, [sp, #16]
 80071ba:	4615      	mov	r5, r2
 80071bc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80071c0:	4294      	cmp	r4, r2
 80071c2:	f300 809c 	bgt.w	80072fe <__kernel_rem_pio2+0x2ee>
 80071c6:	f1ba 0f00 	cmp.w	sl, #0
 80071ca:	dd07      	ble.n	80071dc <__kernel_rem_pio2+0x1cc>
 80071cc:	f1ba 0f01 	cmp.w	sl, #1
 80071d0:	f000 80c0 	beq.w	8007354 <__kernel_rem_pio2+0x344>
 80071d4:	f1ba 0f02 	cmp.w	sl, #2
 80071d8:	f000 80c6 	beq.w	8007368 <__kernel_rem_pio2+0x358>
 80071dc:	f1bb 0f02 	cmp.w	fp, #2
 80071e0:	d14d      	bne.n	800727e <__kernel_rem_pio2+0x26e>
 80071e2:	4632      	mov	r2, r6
 80071e4:	463b      	mov	r3, r7
 80071e6:	4956      	ldr	r1, [pc, #344]	; (8007340 <__kernel_rem_pio2+0x330>)
 80071e8:	2000      	movs	r0, #0
 80071ea:	f7f9 f86d 	bl	80002c8 <__aeabi_dsub>
 80071ee:	4606      	mov	r6, r0
 80071f0:	460f      	mov	r7, r1
 80071f2:	2d00      	cmp	r5, #0
 80071f4:	d043      	beq.n	800727e <__kernel_rem_pio2+0x26e>
 80071f6:	4650      	mov	r0, sl
 80071f8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007330 <__kernel_rem_pio2+0x320>
 80071fc:	f000 fba0 	bl	8007940 <scalbn>
 8007200:	4630      	mov	r0, r6
 8007202:	4639      	mov	r1, r7
 8007204:	ec53 2b10 	vmov	r2, r3, d0
 8007208:	f7f9 f85e 	bl	80002c8 <__aeabi_dsub>
 800720c:	4606      	mov	r6, r0
 800720e:	460f      	mov	r7, r1
 8007210:	e035      	b.n	800727e <__kernel_rem_pio2+0x26e>
 8007212:	4b4c      	ldr	r3, [pc, #304]	; (8007344 <__kernel_rem_pio2+0x334>)
 8007214:	2200      	movs	r2, #0
 8007216:	4630      	mov	r0, r6
 8007218:	4639      	mov	r1, r7
 800721a:	f7f9 fa0d 	bl	8000638 <__aeabi_dmul>
 800721e:	f7f9 fca5 	bl	8000b6c <__aeabi_d2iz>
 8007222:	f7f9 f99f 	bl	8000564 <__aeabi_i2d>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	ec43 2b18 	vmov	d8, r2, r3
 800722e:	4b46      	ldr	r3, [pc, #280]	; (8007348 <__kernel_rem_pio2+0x338>)
 8007230:	2200      	movs	r2, #0
 8007232:	f7f9 fa01 	bl	8000638 <__aeabi_dmul>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4630      	mov	r0, r6
 800723c:	4639      	mov	r1, r7
 800723e:	f7f9 f843 	bl	80002c8 <__aeabi_dsub>
 8007242:	f7f9 fc93 	bl	8000b6c <__aeabi_d2iz>
 8007246:	e9d5 2300 	ldrd	r2, r3, [r5]
 800724a:	f84b 0b04 	str.w	r0, [fp], #4
 800724e:	ec51 0b18 	vmov	r0, r1, d8
 8007252:	f7f9 f83b 	bl	80002cc <__adddf3>
 8007256:	f109 39ff 	add.w	r9, r9, #4294967295
 800725a:	4606      	mov	r6, r0
 800725c:	460f      	mov	r7, r1
 800725e:	e75b      	b.n	8007118 <__kernel_rem_pio2+0x108>
 8007260:	d106      	bne.n	8007270 <__kernel_rem_pio2+0x260>
 8007262:	1e63      	subs	r3, r4, #1
 8007264:	aa0e      	add	r2, sp, #56	; 0x38
 8007266:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800726a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800726e:	e79d      	b.n	80071ac <__kernel_rem_pio2+0x19c>
 8007270:	4b36      	ldr	r3, [pc, #216]	; (800734c <__kernel_rem_pio2+0x33c>)
 8007272:	2200      	movs	r2, #0
 8007274:	f7f9 fc66 	bl	8000b44 <__aeabi_dcmpge>
 8007278:	2800      	cmp	r0, #0
 800727a:	d13d      	bne.n	80072f8 <__kernel_rem_pio2+0x2e8>
 800727c:	4683      	mov	fp, r0
 800727e:	2200      	movs	r2, #0
 8007280:	2300      	movs	r3, #0
 8007282:	4630      	mov	r0, r6
 8007284:	4639      	mov	r1, r7
 8007286:	f7f9 fc3f 	bl	8000b08 <__aeabi_dcmpeq>
 800728a:	2800      	cmp	r0, #0
 800728c:	f000 80c0 	beq.w	8007410 <__kernel_rem_pio2+0x400>
 8007290:	1e65      	subs	r5, r4, #1
 8007292:	462b      	mov	r3, r5
 8007294:	2200      	movs	r2, #0
 8007296:	9902      	ldr	r1, [sp, #8]
 8007298:	428b      	cmp	r3, r1
 800729a:	da6c      	bge.n	8007376 <__kernel_rem_pio2+0x366>
 800729c:	2a00      	cmp	r2, #0
 800729e:	f000 8089 	beq.w	80073b4 <__kernel_rem_pio2+0x3a4>
 80072a2:	ab0e      	add	r3, sp, #56	; 0x38
 80072a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80072a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 80ad 	beq.w	800740c <__kernel_rem_pio2+0x3fc>
 80072b2:	4650      	mov	r0, sl
 80072b4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007330 <__kernel_rem_pio2+0x320>
 80072b8:	f000 fb42 	bl	8007940 <scalbn>
 80072bc:	ab9a      	add	r3, sp, #616	; 0x268
 80072be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80072c2:	ec57 6b10 	vmov	r6, r7, d0
 80072c6:	00ec      	lsls	r4, r5, #3
 80072c8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80072cc:	46aa      	mov	sl, r5
 80072ce:	f1ba 0f00 	cmp.w	sl, #0
 80072d2:	f280 80d6 	bge.w	8007482 <__kernel_rem_pio2+0x472>
 80072d6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007328 <__kernel_rem_pio2+0x318>
 80072da:	462e      	mov	r6, r5
 80072dc:	2e00      	cmp	r6, #0
 80072de:	f2c0 8104 	blt.w	80074ea <__kernel_rem_pio2+0x4da>
 80072e2:	ab72      	add	r3, sp, #456	; 0x1c8
 80072e4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80072e8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007350 <__kernel_rem_pio2+0x340>
 80072ec:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80072f0:	f04f 0800 	mov.w	r8, #0
 80072f4:	1baf      	subs	r7, r5, r6
 80072f6:	e0ea      	b.n	80074ce <__kernel_rem_pio2+0x4be>
 80072f8:	f04f 0b02 	mov.w	fp, #2
 80072fc:	e759      	b.n	80071b2 <__kernel_rem_pio2+0x1a2>
 80072fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007302:	b955      	cbnz	r5, 800731a <__kernel_rem_pio2+0x30a>
 8007304:	b123      	cbz	r3, 8007310 <__kernel_rem_pio2+0x300>
 8007306:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800730a:	f8c8 3000 	str.w	r3, [r8]
 800730e:	2301      	movs	r3, #1
 8007310:	3201      	adds	r2, #1
 8007312:	f108 0804 	add.w	r8, r8, #4
 8007316:	461d      	mov	r5, r3
 8007318:	e752      	b.n	80071c0 <__kernel_rem_pio2+0x1b0>
 800731a:	1acb      	subs	r3, r1, r3
 800731c:	f8c8 3000 	str.w	r3, [r8]
 8007320:	462b      	mov	r3, r5
 8007322:	e7f5      	b.n	8007310 <__kernel_rem_pio2+0x300>
 8007324:	f3af 8000 	nop.w
	...
 8007334:	3ff00000 	.word	0x3ff00000
 8007338:	08007d70 	.word	0x08007d70
 800733c:	40200000 	.word	0x40200000
 8007340:	3ff00000 	.word	0x3ff00000
 8007344:	3e700000 	.word	0x3e700000
 8007348:	41700000 	.word	0x41700000
 800734c:	3fe00000 	.word	0x3fe00000
 8007350:	08007d30 	.word	0x08007d30
 8007354:	1e62      	subs	r2, r4, #1
 8007356:	ab0e      	add	r3, sp, #56	; 0x38
 8007358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007360:	a90e      	add	r1, sp, #56	; 0x38
 8007362:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007366:	e739      	b.n	80071dc <__kernel_rem_pio2+0x1cc>
 8007368:	1e62      	subs	r2, r4, #1
 800736a:	ab0e      	add	r3, sp, #56	; 0x38
 800736c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007370:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007374:	e7f4      	b.n	8007360 <__kernel_rem_pio2+0x350>
 8007376:	a90e      	add	r1, sp, #56	; 0x38
 8007378:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800737c:	3b01      	subs	r3, #1
 800737e:	430a      	orrs	r2, r1
 8007380:	e789      	b.n	8007296 <__kernel_rem_pio2+0x286>
 8007382:	3301      	adds	r3, #1
 8007384:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007388:	2900      	cmp	r1, #0
 800738a:	d0fa      	beq.n	8007382 <__kernel_rem_pio2+0x372>
 800738c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800738e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007392:	446a      	add	r2, sp
 8007394:	3a98      	subs	r2, #152	; 0x98
 8007396:	920a      	str	r2, [sp, #40]	; 0x28
 8007398:	9a08      	ldr	r2, [sp, #32]
 800739a:	18e3      	adds	r3, r4, r3
 800739c:	18a5      	adds	r5, r4, r2
 800739e:	aa22      	add	r2, sp, #136	; 0x88
 80073a0:	f104 0801 	add.w	r8, r4, #1
 80073a4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	9b04      	ldr	r3, [sp, #16]
 80073ac:	4543      	cmp	r3, r8
 80073ae:	da04      	bge.n	80073ba <__kernel_rem_pio2+0x3aa>
 80073b0:	461c      	mov	r4, r3
 80073b2:	e6a3      	b.n	80070fc <__kernel_rem_pio2+0xec>
 80073b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073b6:	2301      	movs	r3, #1
 80073b8:	e7e4      	b.n	8007384 <__kernel_rem_pio2+0x374>
 80073ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80073c0:	f7f9 f8d0 	bl	8000564 <__aeabi_i2d>
 80073c4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80073c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ca:	46ab      	mov	fp, r5
 80073cc:	461c      	mov	r4, r3
 80073ce:	f04f 0900 	mov.w	r9, #0
 80073d2:	2600      	movs	r6, #0
 80073d4:	2700      	movs	r7, #0
 80073d6:	9b06      	ldr	r3, [sp, #24]
 80073d8:	4599      	cmp	r9, r3
 80073da:	dd06      	ble.n	80073ea <__kernel_rem_pio2+0x3da>
 80073dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073de:	e8e3 6702 	strd	r6, r7, [r3], #8
 80073e2:	f108 0801 	add.w	r8, r8, #1
 80073e6:	930a      	str	r3, [sp, #40]	; 0x28
 80073e8:	e7df      	b.n	80073aa <__kernel_rem_pio2+0x39a>
 80073ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80073ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80073f2:	f7f9 f921 	bl	8000638 <__aeabi_dmul>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4630      	mov	r0, r6
 80073fc:	4639      	mov	r1, r7
 80073fe:	f7f8 ff65 	bl	80002cc <__adddf3>
 8007402:	f109 0901 	add.w	r9, r9, #1
 8007406:	4606      	mov	r6, r0
 8007408:	460f      	mov	r7, r1
 800740a:	e7e4      	b.n	80073d6 <__kernel_rem_pio2+0x3c6>
 800740c:	3d01      	subs	r5, #1
 800740e:	e748      	b.n	80072a2 <__kernel_rem_pio2+0x292>
 8007410:	ec47 6b10 	vmov	d0, r6, r7
 8007414:	f1ca 0000 	rsb	r0, sl, #0
 8007418:	f000 fa92 	bl	8007940 <scalbn>
 800741c:	ec57 6b10 	vmov	r6, r7, d0
 8007420:	4ba0      	ldr	r3, [pc, #640]	; (80076a4 <__kernel_rem_pio2+0x694>)
 8007422:	ee10 0a10 	vmov	r0, s0
 8007426:	2200      	movs	r2, #0
 8007428:	4639      	mov	r1, r7
 800742a:	f7f9 fb8b 	bl	8000b44 <__aeabi_dcmpge>
 800742e:	b1f8      	cbz	r0, 8007470 <__kernel_rem_pio2+0x460>
 8007430:	4b9d      	ldr	r3, [pc, #628]	; (80076a8 <__kernel_rem_pio2+0x698>)
 8007432:	2200      	movs	r2, #0
 8007434:	4630      	mov	r0, r6
 8007436:	4639      	mov	r1, r7
 8007438:	f7f9 f8fe 	bl	8000638 <__aeabi_dmul>
 800743c:	f7f9 fb96 	bl	8000b6c <__aeabi_d2iz>
 8007440:	4680      	mov	r8, r0
 8007442:	f7f9 f88f 	bl	8000564 <__aeabi_i2d>
 8007446:	4b97      	ldr	r3, [pc, #604]	; (80076a4 <__kernel_rem_pio2+0x694>)
 8007448:	2200      	movs	r2, #0
 800744a:	f7f9 f8f5 	bl	8000638 <__aeabi_dmul>
 800744e:	460b      	mov	r3, r1
 8007450:	4602      	mov	r2, r0
 8007452:	4639      	mov	r1, r7
 8007454:	4630      	mov	r0, r6
 8007456:	f7f8 ff37 	bl	80002c8 <__aeabi_dsub>
 800745a:	f7f9 fb87 	bl	8000b6c <__aeabi_d2iz>
 800745e:	1c65      	adds	r5, r4, #1
 8007460:	ab0e      	add	r3, sp, #56	; 0x38
 8007462:	f10a 0a18 	add.w	sl, sl, #24
 8007466:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800746a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800746e:	e720      	b.n	80072b2 <__kernel_rem_pio2+0x2a2>
 8007470:	4630      	mov	r0, r6
 8007472:	4639      	mov	r1, r7
 8007474:	f7f9 fb7a 	bl	8000b6c <__aeabi_d2iz>
 8007478:	ab0e      	add	r3, sp, #56	; 0x38
 800747a:	4625      	mov	r5, r4
 800747c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007480:	e717      	b.n	80072b2 <__kernel_rem_pio2+0x2a2>
 8007482:	ab0e      	add	r3, sp, #56	; 0x38
 8007484:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007488:	f7f9 f86c 	bl	8000564 <__aeabi_i2d>
 800748c:	4632      	mov	r2, r6
 800748e:	463b      	mov	r3, r7
 8007490:	f7f9 f8d2 	bl	8000638 <__aeabi_dmul>
 8007494:	4b84      	ldr	r3, [pc, #528]	; (80076a8 <__kernel_rem_pio2+0x698>)
 8007496:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800749a:	2200      	movs	r2, #0
 800749c:	4630      	mov	r0, r6
 800749e:	4639      	mov	r1, r7
 80074a0:	f7f9 f8ca 	bl	8000638 <__aeabi_dmul>
 80074a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074a8:	4606      	mov	r6, r0
 80074aa:	460f      	mov	r7, r1
 80074ac:	e70f      	b.n	80072ce <__kernel_rem_pio2+0x2be>
 80074ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80074b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80074b6:	f7f9 f8bf 	bl	8000638 <__aeabi_dmul>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074c2:	f7f8 ff03 	bl	80002cc <__adddf3>
 80074c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80074ca:	f108 0801 	add.w	r8, r8, #1
 80074ce:	9b02      	ldr	r3, [sp, #8]
 80074d0:	4598      	cmp	r8, r3
 80074d2:	dc01      	bgt.n	80074d8 <__kernel_rem_pio2+0x4c8>
 80074d4:	45b8      	cmp	r8, r7
 80074d6:	ddea      	ble.n	80074ae <__kernel_rem_pio2+0x49e>
 80074d8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80074dc:	ab4a      	add	r3, sp, #296	; 0x128
 80074de:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80074e2:	ed87 7b00 	vstr	d7, [r7]
 80074e6:	3e01      	subs	r6, #1
 80074e8:	e6f8      	b.n	80072dc <__kernel_rem_pio2+0x2cc>
 80074ea:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	dc0b      	bgt.n	8007508 <__kernel_rem_pio2+0x4f8>
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	dc35      	bgt.n	8007560 <__kernel_rem_pio2+0x550>
 80074f4:	d059      	beq.n	80075aa <__kernel_rem_pio2+0x59a>
 80074f6:	9b04      	ldr	r3, [sp, #16]
 80074f8:	f003 0007 	and.w	r0, r3, #7
 80074fc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007500:	ecbd 8b02 	vpop	{d8}
 8007504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007508:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800750a:	2b03      	cmp	r3, #3
 800750c:	d1f3      	bne.n	80074f6 <__kernel_rem_pio2+0x4e6>
 800750e:	ab4a      	add	r3, sp, #296	; 0x128
 8007510:	4423      	add	r3, r4
 8007512:	9306      	str	r3, [sp, #24]
 8007514:	461c      	mov	r4, r3
 8007516:	469a      	mov	sl, r3
 8007518:	9502      	str	r5, [sp, #8]
 800751a:	9b02      	ldr	r3, [sp, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	f1aa 0a08 	sub.w	sl, sl, #8
 8007522:	dc6b      	bgt.n	80075fc <__kernel_rem_pio2+0x5ec>
 8007524:	46aa      	mov	sl, r5
 8007526:	f1ba 0f01 	cmp.w	sl, #1
 800752a:	f1a4 0408 	sub.w	r4, r4, #8
 800752e:	f300 8085 	bgt.w	800763c <__kernel_rem_pio2+0x62c>
 8007532:	9c06      	ldr	r4, [sp, #24]
 8007534:	2000      	movs	r0, #0
 8007536:	3408      	adds	r4, #8
 8007538:	2100      	movs	r1, #0
 800753a:	2d01      	cmp	r5, #1
 800753c:	f300 809d 	bgt.w	800767a <__kernel_rem_pio2+0x66a>
 8007540:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007544:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007548:	f1bb 0f00 	cmp.w	fp, #0
 800754c:	f040 809b 	bne.w	8007686 <__kernel_rem_pio2+0x676>
 8007550:	9b01      	ldr	r3, [sp, #4]
 8007552:	e9c3 5600 	strd	r5, r6, [r3]
 8007556:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800755a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800755e:	e7ca      	b.n	80074f6 <__kernel_rem_pio2+0x4e6>
 8007560:	3408      	adds	r4, #8
 8007562:	ab4a      	add	r3, sp, #296	; 0x128
 8007564:	441c      	add	r4, r3
 8007566:	462e      	mov	r6, r5
 8007568:	2000      	movs	r0, #0
 800756a:	2100      	movs	r1, #0
 800756c:	2e00      	cmp	r6, #0
 800756e:	da36      	bge.n	80075de <__kernel_rem_pio2+0x5ce>
 8007570:	f1bb 0f00 	cmp.w	fp, #0
 8007574:	d039      	beq.n	80075ea <__kernel_rem_pio2+0x5da>
 8007576:	4602      	mov	r2, r0
 8007578:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800757c:	9c01      	ldr	r4, [sp, #4]
 800757e:	e9c4 2300 	strd	r2, r3, [r4]
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800758a:	f7f8 fe9d 	bl	80002c8 <__aeabi_dsub>
 800758e:	ae4c      	add	r6, sp, #304	; 0x130
 8007590:	2401      	movs	r4, #1
 8007592:	42a5      	cmp	r5, r4
 8007594:	da2c      	bge.n	80075f0 <__kernel_rem_pio2+0x5e0>
 8007596:	f1bb 0f00 	cmp.w	fp, #0
 800759a:	d002      	beq.n	80075a2 <__kernel_rem_pio2+0x592>
 800759c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075a0:	4619      	mov	r1, r3
 80075a2:	9b01      	ldr	r3, [sp, #4]
 80075a4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80075a8:	e7a5      	b.n	80074f6 <__kernel_rem_pio2+0x4e6>
 80075aa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80075ae:	eb0d 0403 	add.w	r4, sp, r3
 80075b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80075b6:	2000      	movs	r0, #0
 80075b8:	2100      	movs	r1, #0
 80075ba:	2d00      	cmp	r5, #0
 80075bc:	da09      	bge.n	80075d2 <__kernel_rem_pio2+0x5c2>
 80075be:	f1bb 0f00 	cmp.w	fp, #0
 80075c2:	d002      	beq.n	80075ca <__kernel_rem_pio2+0x5ba>
 80075c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075c8:	4619      	mov	r1, r3
 80075ca:	9b01      	ldr	r3, [sp, #4]
 80075cc:	e9c3 0100 	strd	r0, r1, [r3]
 80075d0:	e791      	b.n	80074f6 <__kernel_rem_pio2+0x4e6>
 80075d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80075d6:	f7f8 fe79 	bl	80002cc <__adddf3>
 80075da:	3d01      	subs	r5, #1
 80075dc:	e7ed      	b.n	80075ba <__kernel_rem_pio2+0x5aa>
 80075de:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80075e2:	f7f8 fe73 	bl	80002cc <__adddf3>
 80075e6:	3e01      	subs	r6, #1
 80075e8:	e7c0      	b.n	800756c <__kernel_rem_pio2+0x55c>
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	e7c5      	b.n	800757c <__kernel_rem_pio2+0x56c>
 80075f0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80075f4:	f7f8 fe6a 	bl	80002cc <__adddf3>
 80075f8:	3401      	adds	r4, #1
 80075fa:	e7ca      	b.n	8007592 <__kernel_rem_pio2+0x582>
 80075fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8007600:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007604:	9b02      	ldr	r3, [sp, #8]
 8007606:	3b01      	subs	r3, #1
 8007608:	9302      	str	r3, [sp, #8]
 800760a:	4632      	mov	r2, r6
 800760c:	463b      	mov	r3, r7
 800760e:	4640      	mov	r0, r8
 8007610:	4649      	mov	r1, r9
 8007612:	f7f8 fe5b 	bl	80002cc <__adddf3>
 8007616:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	4640      	mov	r0, r8
 8007620:	4649      	mov	r1, r9
 8007622:	f7f8 fe51 	bl	80002c8 <__aeabi_dsub>
 8007626:	4632      	mov	r2, r6
 8007628:	463b      	mov	r3, r7
 800762a:	f7f8 fe4f 	bl	80002cc <__adddf3>
 800762e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007632:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007636:	ed8a 7b00 	vstr	d7, [sl]
 800763a:	e76e      	b.n	800751a <__kernel_rem_pio2+0x50a>
 800763c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007640:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007644:	4640      	mov	r0, r8
 8007646:	4632      	mov	r2, r6
 8007648:	463b      	mov	r3, r7
 800764a:	4649      	mov	r1, r9
 800764c:	f7f8 fe3e 	bl	80002cc <__adddf3>
 8007650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4640      	mov	r0, r8
 800765a:	4649      	mov	r1, r9
 800765c:	f7f8 fe34 	bl	80002c8 <__aeabi_dsub>
 8007660:	4632      	mov	r2, r6
 8007662:	463b      	mov	r3, r7
 8007664:	f7f8 fe32 	bl	80002cc <__adddf3>
 8007668:	ed9d 7b02 	vldr	d7, [sp, #8]
 800766c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007670:	ed84 7b00 	vstr	d7, [r4]
 8007674:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007678:	e755      	b.n	8007526 <__kernel_rem_pio2+0x516>
 800767a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800767e:	f7f8 fe25 	bl	80002cc <__adddf3>
 8007682:	3d01      	subs	r5, #1
 8007684:	e759      	b.n	800753a <__kernel_rem_pio2+0x52a>
 8007686:	9b01      	ldr	r3, [sp, #4]
 8007688:	9a01      	ldr	r2, [sp, #4]
 800768a:	601d      	str	r5, [r3, #0]
 800768c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007690:	605c      	str	r4, [r3, #4]
 8007692:	609f      	str	r7, [r3, #8]
 8007694:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007698:	60d3      	str	r3, [r2, #12]
 800769a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800769e:	6110      	str	r0, [r2, #16]
 80076a0:	6153      	str	r3, [r2, #20]
 80076a2:	e728      	b.n	80074f6 <__kernel_rem_pio2+0x4e6>
 80076a4:	41700000 	.word	0x41700000
 80076a8:	3e700000 	.word	0x3e700000
 80076ac:	00000000 	.word	0x00000000

080076b0 <__kernel_sin>:
 80076b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b4:	ed2d 8b04 	vpush	{d8-d9}
 80076b8:	eeb0 8a41 	vmov.f32	s16, s2
 80076bc:	eef0 8a61 	vmov.f32	s17, s3
 80076c0:	ec55 4b10 	vmov	r4, r5, d0
 80076c4:	b083      	sub	sp, #12
 80076c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80076ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80076ce:	9001      	str	r0, [sp, #4]
 80076d0:	da06      	bge.n	80076e0 <__kernel_sin+0x30>
 80076d2:	ee10 0a10 	vmov	r0, s0
 80076d6:	4629      	mov	r1, r5
 80076d8:	f7f9 fa48 	bl	8000b6c <__aeabi_d2iz>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d051      	beq.n	8007784 <__kernel_sin+0xd4>
 80076e0:	4622      	mov	r2, r4
 80076e2:	462b      	mov	r3, r5
 80076e4:	4620      	mov	r0, r4
 80076e6:	4629      	mov	r1, r5
 80076e8:	f7f8 ffa6 	bl	8000638 <__aeabi_dmul>
 80076ec:	4682      	mov	sl, r0
 80076ee:	468b      	mov	fp, r1
 80076f0:	4602      	mov	r2, r0
 80076f2:	460b      	mov	r3, r1
 80076f4:	4620      	mov	r0, r4
 80076f6:	4629      	mov	r1, r5
 80076f8:	f7f8 ff9e 	bl	8000638 <__aeabi_dmul>
 80076fc:	a341      	add	r3, pc, #260	; (adr r3, 8007804 <__kernel_sin+0x154>)
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	4680      	mov	r8, r0
 8007704:	4689      	mov	r9, r1
 8007706:	4650      	mov	r0, sl
 8007708:	4659      	mov	r1, fp
 800770a:	f7f8 ff95 	bl	8000638 <__aeabi_dmul>
 800770e:	a33f      	add	r3, pc, #252	; (adr r3, 800780c <__kernel_sin+0x15c>)
 8007710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007714:	f7f8 fdd8 	bl	80002c8 <__aeabi_dsub>
 8007718:	4652      	mov	r2, sl
 800771a:	465b      	mov	r3, fp
 800771c:	f7f8 ff8c 	bl	8000638 <__aeabi_dmul>
 8007720:	a33c      	add	r3, pc, #240	; (adr r3, 8007814 <__kernel_sin+0x164>)
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	f7f8 fdd1 	bl	80002cc <__adddf3>
 800772a:	4652      	mov	r2, sl
 800772c:	465b      	mov	r3, fp
 800772e:	f7f8 ff83 	bl	8000638 <__aeabi_dmul>
 8007732:	a33a      	add	r3, pc, #232	; (adr r3, 800781c <__kernel_sin+0x16c>)
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	f7f8 fdc6 	bl	80002c8 <__aeabi_dsub>
 800773c:	4652      	mov	r2, sl
 800773e:	465b      	mov	r3, fp
 8007740:	f7f8 ff7a 	bl	8000638 <__aeabi_dmul>
 8007744:	a337      	add	r3, pc, #220	; (adr r3, 8007824 <__kernel_sin+0x174>)
 8007746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774a:	f7f8 fdbf 	bl	80002cc <__adddf3>
 800774e:	9b01      	ldr	r3, [sp, #4]
 8007750:	4606      	mov	r6, r0
 8007752:	460f      	mov	r7, r1
 8007754:	b9eb      	cbnz	r3, 8007792 <__kernel_sin+0xe2>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4650      	mov	r0, sl
 800775c:	4659      	mov	r1, fp
 800775e:	f7f8 ff6b 	bl	8000638 <__aeabi_dmul>
 8007762:	a325      	add	r3, pc, #148	; (adr r3, 80077f8 <__kernel_sin+0x148>)
 8007764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007768:	f7f8 fdae 	bl	80002c8 <__aeabi_dsub>
 800776c:	4642      	mov	r2, r8
 800776e:	464b      	mov	r3, r9
 8007770:	f7f8 ff62 	bl	8000638 <__aeabi_dmul>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4620      	mov	r0, r4
 800777a:	4629      	mov	r1, r5
 800777c:	f7f8 fda6 	bl	80002cc <__adddf3>
 8007780:	4604      	mov	r4, r0
 8007782:	460d      	mov	r5, r1
 8007784:	ec45 4b10 	vmov	d0, r4, r5
 8007788:	b003      	add	sp, #12
 800778a:	ecbd 8b04 	vpop	{d8-d9}
 800778e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007792:	4b1b      	ldr	r3, [pc, #108]	; (8007800 <__kernel_sin+0x150>)
 8007794:	ec51 0b18 	vmov	r0, r1, d8
 8007798:	2200      	movs	r2, #0
 800779a:	f7f8 ff4d 	bl	8000638 <__aeabi_dmul>
 800779e:	4632      	mov	r2, r6
 80077a0:	ec41 0b19 	vmov	d9, r0, r1
 80077a4:	463b      	mov	r3, r7
 80077a6:	4640      	mov	r0, r8
 80077a8:	4649      	mov	r1, r9
 80077aa:	f7f8 ff45 	bl	8000638 <__aeabi_dmul>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	ec51 0b19 	vmov	r0, r1, d9
 80077b6:	f7f8 fd87 	bl	80002c8 <__aeabi_dsub>
 80077ba:	4652      	mov	r2, sl
 80077bc:	465b      	mov	r3, fp
 80077be:	f7f8 ff3b 	bl	8000638 <__aeabi_dmul>
 80077c2:	ec53 2b18 	vmov	r2, r3, d8
 80077c6:	f7f8 fd7f 	bl	80002c8 <__aeabi_dsub>
 80077ca:	a30b      	add	r3, pc, #44	; (adr r3, 80077f8 <__kernel_sin+0x148>)
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	4606      	mov	r6, r0
 80077d2:	460f      	mov	r7, r1
 80077d4:	4640      	mov	r0, r8
 80077d6:	4649      	mov	r1, r9
 80077d8:	f7f8 ff2e 	bl	8000638 <__aeabi_dmul>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4630      	mov	r0, r6
 80077e2:	4639      	mov	r1, r7
 80077e4:	f7f8 fd72 	bl	80002cc <__adddf3>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4620      	mov	r0, r4
 80077ee:	4629      	mov	r1, r5
 80077f0:	f7f8 fd6a 	bl	80002c8 <__aeabi_dsub>
 80077f4:	e7c4      	b.n	8007780 <__kernel_sin+0xd0>
 80077f6:	bf00      	nop
 80077f8:	55555549 	.word	0x55555549
 80077fc:	3fc55555 	.word	0x3fc55555
 8007800:	3fe00000 	.word	0x3fe00000
 8007804:	5acfd57c 	.word	0x5acfd57c
 8007808:	3de5d93a 	.word	0x3de5d93a
 800780c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007810:	3e5ae5e6 	.word	0x3e5ae5e6
 8007814:	57b1fe7d 	.word	0x57b1fe7d
 8007818:	3ec71de3 	.word	0x3ec71de3
 800781c:	19c161d5 	.word	0x19c161d5
 8007820:	3f2a01a0 	.word	0x3f2a01a0
 8007824:	1110f8a6 	.word	0x1110f8a6
 8007828:	3f811111 	.word	0x3f811111

0800782c <fabs>:
 800782c:	ec51 0b10 	vmov	r0, r1, d0
 8007830:	ee10 2a10 	vmov	r2, s0
 8007834:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007838:	ec43 2b10 	vmov	d0, r2, r3
 800783c:	4770      	bx	lr
	...

08007840 <floor>:
 8007840:	ec51 0b10 	vmov	r0, r1, d0
 8007844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007848:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800784c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007850:	2e13      	cmp	r6, #19
 8007852:	ee10 5a10 	vmov	r5, s0
 8007856:	ee10 8a10 	vmov	r8, s0
 800785a:	460c      	mov	r4, r1
 800785c:	dc32      	bgt.n	80078c4 <floor+0x84>
 800785e:	2e00      	cmp	r6, #0
 8007860:	da14      	bge.n	800788c <floor+0x4c>
 8007862:	a333      	add	r3, pc, #204	; (adr r3, 8007930 <floor+0xf0>)
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f7f8 fd30 	bl	80002cc <__adddf3>
 800786c:	2200      	movs	r2, #0
 800786e:	2300      	movs	r3, #0
 8007870:	f7f9 f972 	bl	8000b58 <__aeabi_dcmpgt>
 8007874:	b138      	cbz	r0, 8007886 <floor+0x46>
 8007876:	2c00      	cmp	r4, #0
 8007878:	da57      	bge.n	800792a <floor+0xea>
 800787a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800787e:	431d      	orrs	r5, r3
 8007880:	d001      	beq.n	8007886 <floor+0x46>
 8007882:	4c2d      	ldr	r4, [pc, #180]	; (8007938 <floor+0xf8>)
 8007884:	2500      	movs	r5, #0
 8007886:	4621      	mov	r1, r4
 8007888:	4628      	mov	r0, r5
 800788a:	e025      	b.n	80078d8 <floor+0x98>
 800788c:	4f2b      	ldr	r7, [pc, #172]	; (800793c <floor+0xfc>)
 800788e:	4137      	asrs	r7, r6
 8007890:	ea01 0307 	and.w	r3, r1, r7
 8007894:	4303      	orrs	r3, r0
 8007896:	d01f      	beq.n	80078d8 <floor+0x98>
 8007898:	a325      	add	r3, pc, #148	; (adr r3, 8007930 <floor+0xf0>)
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f7f8 fd15 	bl	80002cc <__adddf3>
 80078a2:	2200      	movs	r2, #0
 80078a4:	2300      	movs	r3, #0
 80078a6:	f7f9 f957 	bl	8000b58 <__aeabi_dcmpgt>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d0eb      	beq.n	8007886 <floor+0x46>
 80078ae:	2c00      	cmp	r4, #0
 80078b0:	bfbe      	ittt	lt
 80078b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80078b6:	fa43 f606 	asrlt.w	r6, r3, r6
 80078ba:	19a4      	addlt	r4, r4, r6
 80078bc:	ea24 0407 	bic.w	r4, r4, r7
 80078c0:	2500      	movs	r5, #0
 80078c2:	e7e0      	b.n	8007886 <floor+0x46>
 80078c4:	2e33      	cmp	r6, #51	; 0x33
 80078c6:	dd0b      	ble.n	80078e0 <floor+0xa0>
 80078c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80078cc:	d104      	bne.n	80078d8 <floor+0x98>
 80078ce:	ee10 2a10 	vmov	r2, s0
 80078d2:	460b      	mov	r3, r1
 80078d4:	f7f8 fcfa 	bl	80002cc <__adddf3>
 80078d8:	ec41 0b10 	vmov	d0, r0, r1
 80078dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80078e4:	f04f 33ff 	mov.w	r3, #4294967295
 80078e8:	fa23 f707 	lsr.w	r7, r3, r7
 80078ec:	4207      	tst	r7, r0
 80078ee:	d0f3      	beq.n	80078d8 <floor+0x98>
 80078f0:	a30f      	add	r3, pc, #60	; (adr r3, 8007930 <floor+0xf0>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	f7f8 fce9 	bl	80002cc <__adddf3>
 80078fa:	2200      	movs	r2, #0
 80078fc:	2300      	movs	r3, #0
 80078fe:	f7f9 f92b 	bl	8000b58 <__aeabi_dcmpgt>
 8007902:	2800      	cmp	r0, #0
 8007904:	d0bf      	beq.n	8007886 <floor+0x46>
 8007906:	2c00      	cmp	r4, #0
 8007908:	da02      	bge.n	8007910 <floor+0xd0>
 800790a:	2e14      	cmp	r6, #20
 800790c:	d103      	bne.n	8007916 <floor+0xd6>
 800790e:	3401      	adds	r4, #1
 8007910:	ea25 0507 	bic.w	r5, r5, r7
 8007914:	e7b7      	b.n	8007886 <floor+0x46>
 8007916:	2301      	movs	r3, #1
 8007918:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800791c:	fa03 f606 	lsl.w	r6, r3, r6
 8007920:	4435      	add	r5, r6
 8007922:	4545      	cmp	r5, r8
 8007924:	bf38      	it	cc
 8007926:	18e4      	addcc	r4, r4, r3
 8007928:	e7f2      	b.n	8007910 <floor+0xd0>
 800792a:	2500      	movs	r5, #0
 800792c:	462c      	mov	r4, r5
 800792e:	e7aa      	b.n	8007886 <floor+0x46>
 8007930:	8800759c 	.word	0x8800759c
 8007934:	7e37e43c 	.word	0x7e37e43c
 8007938:	bff00000 	.word	0xbff00000
 800793c:	000fffff 	.word	0x000fffff

08007940 <scalbn>:
 8007940:	b570      	push	{r4, r5, r6, lr}
 8007942:	ec55 4b10 	vmov	r4, r5, d0
 8007946:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800794a:	4606      	mov	r6, r0
 800794c:	462b      	mov	r3, r5
 800794e:	b99a      	cbnz	r2, 8007978 <scalbn+0x38>
 8007950:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007954:	4323      	orrs	r3, r4
 8007956:	d036      	beq.n	80079c6 <scalbn+0x86>
 8007958:	4b39      	ldr	r3, [pc, #228]	; (8007a40 <scalbn+0x100>)
 800795a:	4629      	mov	r1, r5
 800795c:	ee10 0a10 	vmov	r0, s0
 8007960:	2200      	movs	r2, #0
 8007962:	f7f8 fe69 	bl	8000638 <__aeabi_dmul>
 8007966:	4b37      	ldr	r3, [pc, #220]	; (8007a44 <scalbn+0x104>)
 8007968:	429e      	cmp	r6, r3
 800796a:	4604      	mov	r4, r0
 800796c:	460d      	mov	r5, r1
 800796e:	da10      	bge.n	8007992 <scalbn+0x52>
 8007970:	a32b      	add	r3, pc, #172	; (adr r3, 8007a20 <scalbn+0xe0>)
 8007972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007976:	e03a      	b.n	80079ee <scalbn+0xae>
 8007978:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800797c:	428a      	cmp	r2, r1
 800797e:	d10c      	bne.n	800799a <scalbn+0x5a>
 8007980:	ee10 2a10 	vmov	r2, s0
 8007984:	4620      	mov	r0, r4
 8007986:	4629      	mov	r1, r5
 8007988:	f7f8 fca0 	bl	80002cc <__adddf3>
 800798c:	4604      	mov	r4, r0
 800798e:	460d      	mov	r5, r1
 8007990:	e019      	b.n	80079c6 <scalbn+0x86>
 8007992:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007996:	460b      	mov	r3, r1
 8007998:	3a36      	subs	r2, #54	; 0x36
 800799a:	4432      	add	r2, r6
 800799c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80079a0:	428a      	cmp	r2, r1
 80079a2:	dd08      	ble.n	80079b6 <scalbn+0x76>
 80079a4:	2d00      	cmp	r5, #0
 80079a6:	a120      	add	r1, pc, #128	; (adr r1, 8007a28 <scalbn+0xe8>)
 80079a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079ac:	da1c      	bge.n	80079e8 <scalbn+0xa8>
 80079ae:	a120      	add	r1, pc, #128	; (adr r1, 8007a30 <scalbn+0xf0>)
 80079b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079b4:	e018      	b.n	80079e8 <scalbn+0xa8>
 80079b6:	2a00      	cmp	r2, #0
 80079b8:	dd08      	ble.n	80079cc <scalbn+0x8c>
 80079ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80079be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80079c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80079c6:	ec45 4b10 	vmov	d0, r4, r5
 80079ca:	bd70      	pop	{r4, r5, r6, pc}
 80079cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80079d0:	da19      	bge.n	8007a06 <scalbn+0xc6>
 80079d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80079d6:	429e      	cmp	r6, r3
 80079d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80079dc:	dd0a      	ble.n	80079f4 <scalbn+0xb4>
 80079de:	a112      	add	r1, pc, #72	; (adr r1, 8007a28 <scalbn+0xe8>)
 80079e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e2      	bne.n	80079ae <scalbn+0x6e>
 80079e8:	a30f      	add	r3, pc, #60	; (adr r3, 8007a28 <scalbn+0xe8>)
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	f7f8 fe23 	bl	8000638 <__aeabi_dmul>
 80079f2:	e7cb      	b.n	800798c <scalbn+0x4c>
 80079f4:	a10a      	add	r1, pc, #40	; (adr r1, 8007a20 <scalbn+0xe0>)
 80079f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d0b8      	beq.n	8007970 <scalbn+0x30>
 80079fe:	a10e      	add	r1, pc, #56	; (adr r1, 8007a38 <scalbn+0xf8>)
 8007a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a04:	e7b4      	b.n	8007970 <scalbn+0x30>
 8007a06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a0a:	3236      	adds	r2, #54	; 0x36
 8007a0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007a14:	4620      	mov	r0, r4
 8007a16:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <scalbn+0x108>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	e7e8      	b.n	80079ee <scalbn+0xae>
 8007a1c:	f3af 8000 	nop.w
 8007a20:	c2f8f359 	.word	0xc2f8f359
 8007a24:	01a56e1f 	.word	0x01a56e1f
 8007a28:	8800759c 	.word	0x8800759c
 8007a2c:	7e37e43c 	.word	0x7e37e43c
 8007a30:	8800759c 	.word	0x8800759c
 8007a34:	fe37e43c 	.word	0xfe37e43c
 8007a38:	c2f8f359 	.word	0xc2f8f359
 8007a3c:	81a56e1f 	.word	0x81a56e1f
 8007a40:	43500000 	.word	0x43500000
 8007a44:	ffff3cb0 	.word	0xffff3cb0
 8007a48:	3c900000 	.word	0x3c900000

08007a4c <_init>:
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	bf00      	nop
 8007a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a52:	bc08      	pop	{r3}
 8007a54:	469e      	mov	lr, r3
 8007a56:	4770      	bx	lr

08007a58 <_fini>:
 8007a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5a:	bf00      	nop
 8007a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5e:	bc08      	pop	{r3}
 8007a60:	469e      	mov	lr, r3
 8007a62:	4770      	bx	lr
