
AirCylinderDriver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004734  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e8  080049e8  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f0  080049f0  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080049f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  200000a0  08004a98  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08004a98  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd87  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fee  00000000  00000000  0002fe57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00031e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  00032a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e44d  00000000  00000000  000335f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df15  00000000  00000000  00051a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd679  00000000  00000000  0005f952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011cfcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000396c  00000000  00000000  0011d01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a0 	.word	0x200000a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080048f4 	.word	0x080048f4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000a4 	.word	0x200000a4
 8000214:	080048f4 	.word	0x080048f4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	b29a      	uxth	r2, r3
 800052c:	230a      	movs	r3, #10
 800052e:	68b9      	ldr	r1, [r7, #8]
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <_write+0x24>)
 8000532:	f002 fdbf 	bl	80030b4 <HAL_UART_Transmit>
	return len;
 8000536:	687b      	ldr	r3, [r7, #4]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000120 	.word	0x20000120

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fc99 	bl	8000e7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f807 	bl	800055e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f928 	bl	80007a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000554:	f000 f8d0 	bl	80006f8 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000558:	f000 f84e 	bl	80005f8 <MX_FDCAN1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	e7fe      	b.n	800055c <main+0x18>

0800055e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b094      	sub	sp, #80	; 0x50
 8000562:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000564:	f107 0318 	add.w	r3, r7, #24
 8000568:	2238      	movs	r2, #56	; 0x38
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f003 fbe5 	bl	8003d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000584:	f001 fd7e 	bl	8002084 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2340      	movs	r3, #64	; 0x40
 8000594:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800059e:	2301      	movs	r3, #1
 80005a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005a2:	230a      	movs	r3, #10
 80005a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0318 	add.w	r3, r7, #24
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fe08 	bl	80021cc <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80005c2:	f000 fa6f 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2303      	movs	r3, #3
 80005cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2102      	movs	r1, #2
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 f90c 	bl	80027fc <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005ea:	f000 fa5b 	bl	8000aa4 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80005fe:	4b3c      	ldr	r3, [pc, #240]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 8000600:	4a3c      	ldr	r2, [pc, #240]	; (80006f4 <MX_FDCAN1_Init+0xfc>)
 8000602:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000604:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800060a:	4b39      	ldr	r3, [pc, #228]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000610:	4b37      	ldr	r3, [pc, #220]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000616:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 8000618:	2200      	movs	r2, #0
 800061a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800061c:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 800061e:	2200      	movs	r2, #0
 8000620:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000622:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 8000624:	2200      	movs	r2, #0
 8000626:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000628:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 800062a:	2205      	movs	r2, #5
 800062c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 800062e:	4b30      	ldr	r3, [pc, #192]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 8000630:	2210      	movs	r2, #16
 8000632:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 8000636:	220d      	movs	r2, #13
 8000638:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 800063c:	2202      	movs	r2, #2
 800063e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 8000642:	2201      	movs	r2, #1
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000646:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 8000648:	2204      	movs	r2, #4
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 800064e:	2205      	movs	r2, #5
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000652:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 8000654:	2204      	movs	r2, #4
 8000656:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000658:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 800065a:	2201      	movs	r2, #1
 800065c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800065e:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 8000660:	2200      	movs	r2, #0
 8000662:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 8000666:	2200      	movs	r2, #0
 8000668:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800066a:	4821      	ldr	r0, [pc, #132]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 800066c:	f000 fdaa 	bl	80011c4 <HAL_FDCAN_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000676:	f000 fa15 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800067a:	2300      	movs	r3, #0
 800067c:	603b      	str	r3, [r7, #0]
  	sFilterConfig.FilterIndex = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000682:	2302      	movs	r3, #2
 8000684:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000686:	2301      	movs	r3, #1
 8000688:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterID1 = CANID_FSTCYL;
 800068a:	f44f 7304 	mov.w	r3, #528	; 0x210
 800068e:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterID2 = 0x7FC;
 8000690:	f240 73fc 	movw	r3, #2044	; 0x7fc
 8000694:	617b      	str	r3, [r7, #20]

  	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000696:	463b      	mov	r3, r7
 8000698:	4619      	mov	r1, r3
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 800069c:	f000 feec 	bl	8001478 <HAL_FDCAN_ConfigFilter>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_FDCAN1_Init+0xb2>
  		Error_Handler();
 80006a6:	f000 f9fd 	bl	8000aa4 <Error_Handler>
  	}
  	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	2202      	movs	r2, #2
 80006b2:	2102      	movs	r1, #2
 80006b4:	480e      	ldr	r0, [pc, #56]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 80006b6:	f000 ff39 	bl	800152c <HAL_FDCAN_ConfigGlobalFilter>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_FDCAN1_Init+0xcc>
  		Error_Handler();
 80006c0:	f000 f9f0 	bl	8000aa4 <Error_Handler>
  	}

  	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80006c4:	480a      	ldr	r0, [pc, #40]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 80006c6:	f000 ff62 	bl	800158e <HAL_FDCAN_Start>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_FDCAN1_Init+0xdc>
  		Error_Handler();
 80006d0:	f000 f9e8 	bl	8000aa4 <Error_Handler>
  	}
  	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80006d4:	2200      	movs	r2, #0
 80006d6:	2101      	movs	r1, #1
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_FDCAN1_Init+0xf8>)
 80006da:	f001 f85b 	bl	8001794 <HAL_FDCAN_ActivateNotification>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_FDCAN1_Init+0xf0>
  	  Error_Handler();
 80006e4:	f000 f9de 	bl	8000aa4 <Error_Handler>
  	}

  /* USER CODE END FDCAN1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000bc 	.word	0x200000bc
 80006f4:	40006400 	.word	0x40006400

080006f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_USART2_UART_Init+0xa0>)
 80006fe:	4a27      	ldr	r2, [pc, #156]	; (800079c <MX_USART2_UART_Init+0xa4>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b25      	ldr	r3, [pc, #148]	; (8000798 <MX_USART2_UART_Init+0xa0>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_USART2_UART_Init+0xa0>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_USART2_UART_Init+0xa0>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_USART2_UART_Init+0xa0>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_USART2_UART_Init+0xa0>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_USART2_UART_Init+0xa0>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_USART2_UART_Init+0xa0>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_USART2_UART_Init+0xa0>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_USART2_UART_Init+0xa0>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_USART2_UART_Init+0xa0>)
 800073c:	2200      	movs	r2, #0
 800073e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000740:	4815      	ldr	r0, [pc, #84]	; (8000798 <MX_USART2_UART_Init+0xa0>)
 8000742:	f002 fc67 	bl	8003014 <HAL_UART_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800074c:	f000 f9aa 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000750:	2100      	movs	r1, #0
 8000752:	4811      	ldr	r0, [pc, #68]	; (8000798 <MX_USART2_UART_Init+0xa0>)
 8000754:	f003 f9fe 	bl	8003b54 <HAL_UARTEx_SetTxFifoThreshold>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800075e:	f000 f9a1 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000762:	2100      	movs	r1, #0
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_USART2_UART_Init+0xa0>)
 8000766:	f003 fa33 	bl	8003bd0 <HAL_UARTEx_SetRxFifoThreshold>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000770:	f000 f998 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <MX_USART2_UART_Init+0xa0>)
 8000776:	f003 f9b4 	bl	8003ae2 <HAL_UARTEx_DisableFifoMode>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000780:	f000 f990 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  setbuf(stdout, NULL);
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART2_UART_Init+0xa8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f003 fb53 	bl	8003e38 <setbuf>
  /* USER CODE END USART2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000120 	.word	0x20000120
 800079c:	40004400 	.word	0x40004400
 80007a0:	2000003c 	.word	0x2000003c

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b24      	ldr	r3, [pc, #144]	; (800084c <MX_GPIO_Init+0xa8>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a23      	ldr	r2, [pc, #140]	; (800084c <MX_GPIO_Init+0xa8>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_GPIO_Init+0xa8>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <MX_GPIO_Init+0xa8>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a1d      	ldr	r2, [pc, #116]	; (800084c <MX_GPIO_Init+0xa8>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_GPIO_Init+0xa8>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CYL1A_Pin|CYL1B_Pin|CYL2A_Pin|CYL2B_Pin
 80007ea:	2200      	movs	r2, #0
 80007ec:	f240 7103 	movw	r1, #1795	; 0x703
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f4:	f001 fc2e 	bl	8002054 <HAL_GPIO_WritePin>
                          |CYL3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CYL3B_Pin|CYL4A_Pin|CYL4B_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 719c 	mov.w	r1, #312	; 0x138
 80007fe:	4814      	ldr	r0, [pc, #80]	; (8000850 <MX_GPIO_Init+0xac>)
 8000800:	f001 fc28 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CYL1A_Pin CYL1B_Pin CYL2A_Pin CYL2B_Pin
                           CYL3A_Pin */
  GPIO_InitStruct.Pin = CYL1A_Pin|CYL1B_Pin|CYL2A_Pin|CYL2B_Pin
 8000804:	f240 7303 	movw	r3, #1795	; 0x703
 8000808:	60fb      	str	r3, [r7, #12]
                          |CYL3A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f001 fa96 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : CYL3B_Pin CYL4A_Pin CYL4B_Pin LD2_Pin */
  GPIO_InitStruct.Pin = CYL3B_Pin|CYL4A_Pin|CYL4B_Pin|LD2_Pin;
 8000824:	f44f 739c 	mov.w	r3, #312	; 0x138
 8000828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4619      	mov	r1, r3
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_GPIO_Init+0xac>)
 800083e:	f001 fa87 	bl	8001d50 <HAL_GPIO_Init>

}
 8000842:	bf00      	nop
 8000844:	3720      	adds	r7, #32
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000
 8000850:	48000400 	.word	0x48000400

08000854 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b08e      	sub	sp, #56	; 0x38
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[1];
	uint8_t CylID;

	if (hfdcan == &hfdcan1) {
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a88      	ldr	r2, [pc, #544]	; (8000a84 <HAL_FDCAN_RxFifo0Callback+0x230>)
 8000862:	4293      	cmp	r3, r2
 8000864:	f040 8108 	bne.w	8000a78 <HAL_FDCAN_RxFifo0Callback+0x224>
		printf("Get message\n");
 8000868:	4887      	ldr	r0, [pc, #540]	; (8000a88 <HAL_FDCAN_RxFifo0Callback+0x234>)
 800086a:	f003 fadd 	bl	8003e28 <puts>
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	f107 020c 	add.w	r2, r7, #12
 8000876:	2140      	movs	r1, #64	; 0x40
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f000 feb1 	bl	80015e0 <HAL_FDCAN_GetRxMessage>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <HAL_FDCAN_RxFifo0Callback+0x34>
			Error_Handler();
 8000884:	f000 f90e 	bl	8000aa4 <Error_Handler>
		}
		CylID = RxHeader.Identifier - 0x210;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	3b10      	subs	r3, #16
 800088e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		switch(RxData[0]){
 8000892:	7a3b      	ldrb	r3, [r7, #8]
 8000894:	2b03      	cmp	r3, #3
 8000896:	f200 80f0 	bhi.w	8000a7a <HAL_FDCAN_RxFifo0Callback+0x226>
 800089a:	a201      	add	r2, pc, #4	; (adr r2, 80008a0 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800089c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a0:	080008b1 	.word	0x080008b1
 80008a4:	080008fd 	.word	0x080008fd
 80008a8:	08000949 	.word	0x08000949
 80008ac:	08000995 	.word	0x08000995
		case 0:
			printf("N\r\n");
 80008b0:	4876      	ldr	r0, [pc, #472]	; (8000a8c <HAL_FDCAN_RxFifo0Callback+0x238>)
 80008b2:	f003 fab9 	bl	8003e28 <puts>
			HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_RESET);
 80008b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	4a74      	ldr	r2, [pc, #464]	; (8000a90 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 80008be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4a72      	ldr	r2, [pc, #456]	; (8000a94 <HAL_FDCAN_RxFifo0Callback+0x240>)
 80008ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ce:	2200      	movs	r2, #0
 80008d0:	4619      	mov	r1, r3
 80008d2:	f001 fbbf 	bl	8002054 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_RESET);
 80008d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	3301      	adds	r3, #1
 80008de:	4a6c      	ldr	r2, [pc, #432]	; (8000a90 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 80008e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	3301      	adds	r3, #1
 80008ec:	4a69      	ldr	r2, [pc, #420]	; (8000a94 <HAL_FDCAN_RxFifo0Callback+0x240>)
 80008ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008f2:	2200      	movs	r2, #0
 80008f4:	4619      	mov	r1, r3
 80008f6:	f001 fbad 	bl	8002054 <HAL_GPIO_WritePin>
			break;
 80008fa:	e0be      	b.n	8000a7a <HAL_FDCAN_RxFifo0Callback+0x226>

		case 1:
			printf("Move A\r\n");
 80008fc:	4866      	ldr	r0, [pc, #408]	; (8000a98 <HAL_FDCAN_RxFifo0Callback+0x244>)
 80008fe:	f003 fa93 	bl	8003e28 <puts>
			HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_SET);
 8000902:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	4a61      	ldr	r2, [pc, #388]	; (8000a90 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 800090a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800090e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	4a5f      	ldr	r2, [pc, #380]	; (8000a94 <HAL_FDCAN_RxFifo0Callback+0x240>)
 8000916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800091a:	2201      	movs	r2, #1
 800091c:	4619      	mov	r1, r3
 800091e:	f001 fb99 	bl	8002054 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_RESET);
 8000922:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	3301      	adds	r3, #1
 800092a:	4a59      	ldr	r2, [pc, #356]	; (8000a90 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 800092c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000930:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	3301      	adds	r3, #1
 8000938:	4a56      	ldr	r2, [pc, #344]	; (8000a94 <HAL_FDCAN_RxFifo0Callback+0x240>)
 800093a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	f001 fb87 	bl	8002054 <HAL_GPIO_WritePin>
			break;
 8000946:	e098      	b.n	8000a7a <HAL_FDCAN_RxFifo0Callback+0x226>

		case 2:
			printf("Move B\r\n");
 8000948:	4854      	ldr	r0, [pc, #336]	; (8000a9c <HAL_FDCAN_RxFifo0Callback+0x248>)
 800094a:	f003 fa6d 	bl	8003e28 <puts>
			HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_RESET);
 800094e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4a4e      	ldr	r2, [pc, #312]	; (8000a90 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 8000956:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800095a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4a4c      	ldr	r2, [pc, #304]	; (8000a94 <HAL_FDCAN_RxFifo0Callback+0x240>)
 8000962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000966:	2200      	movs	r2, #0
 8000968:	4619      	mov	r1, r3
 800096a:	f001 fb73 	bl	8002054 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_SET);
 800096e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	3301      	adds	r3, #1
 8000976:	4a46      	ldr	r2, [pc, #280]	; (8000a90 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 8000978:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800097c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	3301      	adds	r3, #1
 8000984:	4a43      	ldr	r2, [pc, #268]	; (8000a94 <HAL_FDCAN_RxFifo0Callback+0x240>)
 8000986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800098a:	2201      	movs	r2, #1
 800098c:	4619      	mov	r1, r3
 800098e:	f001 fb61 	bl	8002054 <HAL_GPIO_WritePin>
			break;
 8000992:	e072      	b.n	8000a7a <HAL_FDCAN_RxFifo0Callback+0x226>

		case 3:
			printf("Throw\r\n");
 8000994:	4842      	ldr	r0, [pc, #264]	; (8000aa0 <HAL_FDCAN_RxFifo0Callback+0x24c>)
 8000996:	f003 fa47 	bl	8003e28 <puts>
			HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_SET);
 800099a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	4a3b      	ldr	r2, [pc, #236]	; (8000a90 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 80009a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4a39      	ldr	r2, [pc, #228]	; (8000a94 <HAL_FDCAN_RxFifo0Callback+0x240>)
 80009ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009b2:	2201      	movs	r2, #1
 80009b4:	4619      	mov	r1, r3
 80009b6:	f001 fb4d 	bl	8002054 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_RESET);
 80009ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	3301      	adds	r3, #1
 80009c2:	4a33      	ldr	r2, [pc, #204]	; (8000a90 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 80009c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	3301      	adds	r3, #1
 80009d0:	4a30      	ldr	r2, [pc, #192]	; (8000a94 <HAL_FDCAN_RxFifo0Callback+0x240>)
 80009d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009d6:	2200      	movs	r2, #0
 80009d8:	4619      	mov	r1, r3
 80009da:	f001 fb3b 	bl	8002054 <HAL_GPIO_WritePin>
			HAL_Delay(DELAYMS);
 80009de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e2:	f000 fabd 	bl	8000f60 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_RESET);
 80009e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	4a28      	ldr	r2, [pc, #160]	; (8000a90 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 80009ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4a26      	ldr	r2, [pc, #152]	; (8000a94 <HAL_FDCAN_RxFifo0Callback+0x240>)
 80009fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009fe:	2200      	movs	r2, #0
 8000a00:	4619      	mov	r1, r3
 8000a02:	f001 fb27 	bl	8002054 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_SET);
 8000a06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	4a20      	ldr	r2, [pc, #128]	; (8000a90 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 8000a10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <HAL_FDCAN_RxFifo0Callback+0x240>)
 8000a1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a22:	2201      	movs	r2, #1
 8000a24:	4619      	mov	r1, r3
 8000a26:	f001 fb15 	bl	8002054 <HAL_GPIO_WritePin>
			HAL_Delay(DELAYMS);
 8000a2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a2e:	f000 fa97 	bl	8000f60 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], GPIO_PIN_RESET);
 8000a32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 8000a3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <HAL_FDCAN_RxFifo0Callback+0x240>)
 8000a46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f001 fb01 	bl	8002054 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOs[CylID*2+1], GPIOPins[CylID*2+1], GPIO_PIN_RESET);
 8000a52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	3301      	adds	r3, #1
 8000a5a:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 8000a5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	3301      	adds	r3, #1
 8000a68:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <HAL_FDCAN_RxFifo0Callback+0x240>)
 8000a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4619      	mov	r1, r3
 8000a72:	f001 faef 	bl	8002054 <HAL_GPIO_WritePin>
			break;
 8000a76:	e000      	b.n	8000a7a <HAL_FDCAN_RxFifo0Callback+0x226>
		}
		//HAL_GPIO_WritePin(GPIOs[CylID*2], GPIOPins[CylID*2], RxData[0]);

		//printf("Motor%x:%d\r\n", RxHeader.Identifier- 0x201, actMotorVel[MOTOR1]); //index is motorID-201 (0x201 - 0x201 =0)
		//Motor%x:RxHeader.Identifier- 0x201,
	}
 8000a78:	bf00      	nop
}
 8000a7a:	bf00      	nop
 8000a7c:	3738      	adds	r7, #56	; 0x38
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000bc 	.word	0x200000bc
 8000a88:	0800490c 	.word	0x0800490c
 8000a8c:	08004918 	.word	0x08004918
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000020 	.word	0x20000020
 8000a98:	0800491c 	.word	0x0800491c
 8000a9c:	08004924 	.word	0x08004924
 8000aa0:	0800492c 	.word	0x0800492c

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_MspInit+0x44>)
 8000ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_MspInit+0x44>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_MspInit+0x44>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x44>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b09a      	sub	sp, #104	; 0x68
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	2244      	movs	r2, #68	; 0x44
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 f90f 	bl	8003d3c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a28      	ldr	r2, [pc, #160]	; (8000bc4 <HAL_FDCAN_MspInit+0xcc>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d149      	bne.n	8000bbc <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b32:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f002 f87b 	bl	8002c34 <HAL_RCCEx_PeriphCLKConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000b44:	f7ff ffae 	bl	8000aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <HAL_FDCAN_MspInit+0xd0>)
 8000b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4c:	4a1e      	ldr	r2, [pc, #120]	; (8000bc8 <HAL_FDCAN_MspInit+0xd0>)
 8000b4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b52:	6593      	str	r3, [r2, #88]	; 0x58
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_FDCAN_MspInit+0xd0>)
 8000b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <HAL_FDCAN_MspInit+0xd0>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b64:	4a18      	ldr	r2, [pc, #96]	; (8000bc8 <HAL_FDCAN_MspInit+0xd0>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_FDCAN_MspInit+0xd0>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b78:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b7c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b8a:	2309      	movs	r3, #9
 8000b8c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b92:	4619      	mov	r1, r3
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b98:	f001 f8da 	bl	8001d50 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2015      	movs	r0, #21
 8000ba2:	f000 fada 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000ba6:	2015      	movs	r0, #21
 8000ba8:	f000 faf1 	bl	800118e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2016      	movs	r0, #22
 8000bb2:	f000 fad2 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000bb6:	2016      	movs	r0, #22
 8000bb8:	f000 fae9 	bl	800118e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3768      	adds	r7, #104	; 0x68
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40006400 	.word	0x40006400
 8000bc8:	40021000 	.word	0x40021000

08000bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b09a      	sub	sp, #104	; 0x68
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	2244      	movs	r2, #68	; 0x44
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f003 f8a5 	bl	8003d3c <memset>
  if(huart->Instance==USART2)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <HAL_UART_MspInit+0xa8>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d136      	bne.n	8000c6a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 f813 	bl	8002c34 <HAL_RCCEx_PeriphCLKConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c14:	f7ff ff46 	bl	8000aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <HAL_UART_MspInit+0xac>)
 8000c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1c:	4a16      	ldr	r2, [pc, #88]	; (8000c78 <HAL_UART_MspInit+0xac>)
 8000c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c22:	6593      	str	r3, [r2, #88]	; 0x58
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_UART_MspInit+0xac>)
 8000c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_UART_MspInit+0xac>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c34:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_UART_MspInit+0xac>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_UART_MspInit+0xac>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c48:	230c      	movs	r3, #12
 8000c4a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c60:	4619      	mov	r1, r3
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c66:	f001 f873 	bl	8001d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3768      	adds	r7, #104	; 0x68
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40004400 	.word	0x40004400
 8000c78:	40021000 	.word	0x40021000

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f92c 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <FDCAN1_IT0_IRQHandler+0x10>)
 8000cd6:	f000 fe43 	bl	8001960 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000bc 	.word	0x200000bc

08000ce4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <FDCAN1_IT1_IRQHandler+0x10>)
 8000cea:	f000 fe39 	bl	8001960 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200000bc 	.word	0x200000bc

08000cf8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	e00a      	b.n	8000d20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d0a:	f3af 8000 	nop.w
 8000d0e:	4601      	mov	r1, r0
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	60ba      	str	r2, [r7, #8]
 8000d16:	b2ca      	uxtb	r2, r1
 8000d18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	dbf0      	blt.n	8000d0a <_read+0x12>
	}

return len;
 8000d28:	687b      	ldr	r3, [r7, #4]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
	return -1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <_isatty>:

int _isatty(int file)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
	return 1;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f002 ff8c 	bl	8003ce8 <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20008000 	.word	0x20008000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	200001b0 	.word	0x200001b0
 8000e04:	200001c8 	.word	0x200001c8

08000e08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <SystemInit+0x20>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <SystemInit+0x20>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e2c:	480d      	ldr	r0, [pc, #52]	; (8000e64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490e      	ldr	r1, [pc, #56]	; (8000e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0b      	ldr	r4, [pc, #44]	; (8000e78 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e56:	f7ff ffd7 	bl	8000e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f002 ff4b 	bl	8003cf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e5e:	f7ff fb71 	bl	8000544 <main>

08000e62 <LoopForever>:

LoopForever:
    b LoopForever
 8000e62:	e7fe      	b.n	8000e62 <LoopForever>
  ldr   r0, =_estack
 8000e64:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000e70:	080049f8 	.word	0x080049f8
  ldr r2, =_sbss
 8000e74:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000e78:	200001c8 	.word	0x200001c8

08000e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_2_IRQHandler>

08000e7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f95b 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f000 f80e 	bl	8000eb0 <HAL_InitTick>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d002      	beq.n	8000ea0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	71fb      	strb	r3, [r7, #7]
 8000e9e:	e001      	b.n	8000ea4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea0:	f7ff fe06 	bl	8000ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <HAL_InitTick+0x68>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d022      	beq.n	8000f0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_InitTick+0x6c>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <HAL_InitTick+0x68>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ed0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 f966 	bl	80011aa <HAL_SYSTICK_Config>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10f      	bne.n	8000f04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b0f      	cmp	r3, #15
 8000ee8:	d809      	bhi.n	8000efe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eea:	2200      	movs	r2, #0
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef2:	f000 f932 	bl	800115a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_InitTick+0x70>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e007      	b.n	8000f0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	e004      	b.n	8000f0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	e001      	b.n	8000f0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000038 	.word	0x20000038
 8000f1c:	20000030 	.word	0x20000030
 8000f20:	20000034 	.word	0x20000034

08000f24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_IncTick+0x1c>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a03      	ldr	r2, [pc, #12]	; (8000f40 <HAL_IncTick+0x1c>)
 8000f34:	6013      	str	r3, [r2, #0]
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	200001b4 	.word	0x200001b4
 8000f44:	20000038 	.word	0x20000038

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	200001b4 	.word	0x200001b4

08000f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f68:	f7ff ffee 	bl	8000f48 <HAL_GetTick>
 8000f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f78:	d004      	beq.n	8000f84 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_Delay+0x40>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	4413      	add	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f84:	bf00      	nop
 8000f86:	f7ff ffdf 	bl	8000f48 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d8f7      	bhi.n	8000f86 <HAL_Delay+0x26>
  {
  }
}
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000038 	.word	0x20000038

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 021f 	and.w	r2, r3, #31
 8001020:	4907      	ldr	r1, [pc, #28]	; (8001040 <__NVIC_EnableIRQ+0x38>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f7ff ff8e 	bl	8001044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff29 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001168:	f7ff ff40 	bl	8000fec <__NVIC_GetPriorityGrouping>
 800116c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ff90 	bl	8001098 <NVIC_EncodePriority>
 8001178:	4602      	mov	r2, r0
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5f 	bl	8001044 <__NVIC_SetPriority>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff33 	bl	8001008 <__NVIC_EnableIRQ>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffa4 	bl	8001100 <SysTick_Config>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e147      	b.n	8001466 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d106      	bne.n	80011f0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fc84 	bl	8000af8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	699a      	ldr	r2, [r3, #24]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0210 	bic.w	r2, r2, #16
 80011fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001200:	f7ff fea2 	bl	8000f48 <HAL_GetTick>
 8001204:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001206:	e012      	b.n	800122e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001208:	f7ff fe9e 	bl	8000f48 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b0a      	cmp	r3, #10
 8001214:	d90b      	bls.n	800122e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121a:	f043 0201 	orr.w	r2, r3, #1
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2203      	movs	r2, #3
 8001226:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e11b      	b.n	8001466 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	2b08      	cmp	r3, #8
 800123a:	d0e5      	beq.n	8001208 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	699a      	ldr	r2, [r3, #24]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0201 	orr.w	r2, r2, #1
 800124a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800124c:	f7ff fe7c 	bl	8000f48 <HAL_GetTick>
 8001250:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001252:	e012      	b.n	800127a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001254:	f7ff fe78 	bl	8000f48 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b0a      	cmp	r3, #10
 8001260:	d90b      	bls.n	800127a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001266:	f043 0201 	orr.w	r2, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2203      	movs	r2, #3
 8001272:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0f5      	b.n	8001466 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0e5      	beq.n	8001254 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	699a      	ldr	r2, [r3, #24]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0202 	orr.w	r2, r2, #2
 8001296:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a74      	ldr	r2, [pc, #464]	; (8001470 <HAL_FDCAN_Init+0x2ac>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d103      	bne.n	80012aa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80012a2:	4a74      	ldr	r2, [pc, #464]	; (8001474 <HAL_FDCAN_Init+0x2b0>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7c1b      	ldrb	r3, [r3, #16]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d108      	bne.n	80012c4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	699a      	ldr	r2, [r3, #24]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012c0:	619a      	str	r2, [r3, #24]
 80012c2:	e007      	b.n	80012d4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	699a      	ldr	r2, [r3, #24]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012d2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	7c5b      	ldrb	r3, [r3, #17]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d108      	bne.n	80012ee <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	699a      	ldr	r2, [r3, #24]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012ea:	619a      	str	r2, [r3, #24]
 80012ec:	e007      	b.n	80012fe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	699a      	ldr	r2, [r3, #24]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012fc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7c9b      	ldrb	r3, [r3, #18]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d108      	bne.n	8001318 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	699a      	ldr	r2, [r3, #24]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001314:	619a      	str	r2, [r3, #24]
 8001316:	e007      	b.n	8001328 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	699a      	ldr	r2, [r3, #24]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001326:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	699a      	ldr	r2, [r3, #24]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800134c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0210 	bic.w	r2, r2, #16
 800135c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d108      	bne.n	8001378 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	699a      	ldr	r2, [r3, #24]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 0204 	orr.w	r2, r2, #4
 8001374:	619a      	str	r2, [r3, #24]
 8001376:	e02c      	b.n	80013d2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d028      	beq.n	80013d2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d01c      	beq.n	80013c2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	699a      	ldr	r2, [r3, #24]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001396:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0210 	orr.w	r2, r2, #16
 80013a6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d110      	bne.n	80013d2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	699a      	ldr	r2, [r3, #24]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0220 	orr.w	r2, r2, #32
 80013be:	619a      	str	r2, [r3, #24]
 80013c0:	e007      	b.n	80013d2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0220 	orr.w	r2, r2, #32
 80013d0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	3b01      	subs	r3, #1
 80013e0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013e2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80013ea:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80013fa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013fc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001406:	d115      	bne.n	8001434 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001412:	3b01      	subs	r3, #1
 8001414:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001416:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	3b01      	subs	r3, #1
 800141e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001420:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	3b01      	subs	r3, #1
 800142a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001430:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001432:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fc2a 	bl	8001ca4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40006400 	.word	0x40006400
 8001474:	40006500 	.word	0x40006500

08001478 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001488:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800148a:	7dfb      	ldrb	r3, [r7, #23]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d002      	beq.n	8001496 <HAL_FDCAN_ConfigFilter+0x1e>
 8001490:	7dfb      	ldrb	r3, [r7, #23]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d13d      	bne.n	8001512 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d119      	bne.n	80014d2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014aa:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80014b2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e01d      	b.n	800150e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	075a      	lsls	r2, r3, #29
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	079a      	lsls	r2, r3, #30
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4413      	add	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	3304      	adds	r3, #4
 8001506:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e006      	b.n	8001520 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001516:	f043 0202 	orr.w	r2, r3, #2
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
  }
}
 8001520:	4618      	mov	r0, r3
 8001522:	371c      	adds	r7, #28
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d116      	bne.n	8001574 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800154e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	011a      	lsls	r2, r3, #4
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	431a      	orrs	r2, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	431a      	orrs	r2, r3
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	431a      	orrs	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	e006      	b.n	8001582 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001578:	f043 0204 	orr.w	r2, r3, #4
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
  }
}
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d110      	bne.n	80015c4 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2202      	movs	r2, #2
 80015a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	699a      	ldr	r2, [r3, #24]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0201 	bic.w	r2, r2, #1
 80015b8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e006      	b.n	80015d2 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c8:	f043 0204 	orr.w	r2, r3, #4
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
  }
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b08b      	sub	sp, #44	; 0x2c
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80015f4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80015f6:	7efb      	ldrb	r3, [r7, #27]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	f040 80bc 	bne.w	8001776 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2b40      	cmp	r3, #64	; 0x40
 8001602:	d121      	bne.n	8001648 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800160c:	f003 030f 	and.w	r3, r3, #15
 8001610:	2b00      	cmp	r3, #0
 8001612:	d107      	bne.n	8001624 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001618:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0af      	b.n	8001784 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
 8001646:	e020      	b.n	800168a <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	2b00      	cmp	r3, #0
 8001656:	d107      	bne.n	8001668 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e08d      	b.n	8001784 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d107      	bne.n	80016ae <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	0c9b      	lsrs	r3, r3, #18
 80016a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e005      	b.n	80016ba <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	3304      	adds	r3, #4
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	0e1b      	lsrs	r3, r3, #24
 800170c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0fda      	lsrs	r2, r3, #31
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	3304      	adds	r3, #4
 8001722:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
 800172c:	e00a      	b.n	8001744 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	441a      	add	r2, r3
 8001734:	6839      	ldr	r1, [r7, #0]
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	440b      	add	r3, r1
 800173a:	7812      	ldrb	r2, [r2, #0]
 800173c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	3301      	adds	r3, #1
 8001742:	623b      	str	r3, [r7, #32]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	0c1b      	lsrs	r3, r3, #16
 800174a:	4a11      	ldr	r2, [pc, #68]	; (8001790 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800174c:	5cd3      	ldrb	r3, [r2, r3]
 800174e:	461a      	mov	r2, r3
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	4293      	cmp	r3, r2
 8001754:	d3eb      	bcc.n	800172e <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2b40      	cmp	r3, #64	; 0x40
 800175a:	d105      	bne.n	8001768 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001766:	e004      	b.n	8001772 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e006      	b.n	8001784 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177a:	f043 0208 	orr.w	r2, r3, #8
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
  }
}
 8001784:	4618      	mov	r0, r3
 8001786:	372c      	adds	r7, #44	; 0x2c
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	0800494c 	.word	0x0800494c

08001794 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80017a6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d003      	beq.n	80017b6 <HAL_FDCAN_ActivateNotification+0x22>
 80017ae:	7dfb      	ldrb	r3, [r7, #23]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	f040 80c8 	bne.w	8001946 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017bc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d03b      	beq.n	800184a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d004      	beq.n	80017e6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d031      	beq.n	800184a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d027      	beq.n	800184a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d01d      	beq.n	800184a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001814:	2b00      	cmp	r3, #0
 8001816:	d004      	beq.n	8001822 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	2b00      	cmp	r3, #0
 8001820:	d013      	beq.n	800184a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00c      	beq.n	800185a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001846:	2b00      	cmp	r3, #0
 8001848:	d107      	bne.n	800185a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0201 	orr.w	r2, r2, #1
 8001858:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d13b      	bne.n	80018e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d131      	bne.n	80018e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b00      	cmp	r3, #0
 8001894:	d127      	bne.n	80018e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800189c:	2b00      	cmp	r3, #0
 800189e:	d004      	beq.n	80018aa <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d11d      	bne.n	80018e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d004      	beq.n	80018be <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d113      	bne.n	80018e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	f003 0320 	and.w	r3, r3, #32
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00c      	beq.n	80018f6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d007      	beq.n	80018f6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 0202 	orr.w	r2, r2, #2
 80018f4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d009      	beq.n	8001914 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	430a      	orrs	r2, r1
 8001910:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	430a      	orrs	r2, r1
 800192e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	430a      	orrs	r2, r1
 8001940:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e006      	b.n	8001954 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	f043 0202 	orr.w	r2, r3, #2
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
  }
}
 8001954:	4618      	mov	r0, r3
 8001956:	371c      	adds	r7, #28
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197c:	4013      	ands	r3, r2
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001992:	6a3a      	ldr	r2, [r7, #32]
 8001994:	4013      	ands	r3, r2
 8001996:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800199e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019a2:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019b6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80019ba:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019d2:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4013      	ands	r3, r2
 80019de:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00d      	beq.n	8001a0a <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2240      	movs	r2, #64	; 0x40
 8001a02:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f92e 	bl	8001c66 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d01b      	beq.n	8001a50 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d014      	beq.n	8001a50 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a2e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a46:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001a48:	6939      	ldr	r1, [r7, #16]
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f8ec 	bl	8001c28 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001a5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f8b6 	bl	8001bd2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6a3a      	ldr	r2, [r7, #32]
 8001a72:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001a74:	6a39      	ldr	r1, [r7, #32]
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7fe feec 	bl	8000854 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d007      	beq.n	8001a92 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001a8a:	69f9      	ldr	r1, [r7, #28]
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f8ab 	bl	8001be8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00e      	beq.n	8001abe <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f8a0 	bl	8001bfe <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d01a      	beq.n	8001b02 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d013      	beq.n	8001b02 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ae2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	4013      	ands	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001afa:	68f9      	ldr	r1, [r7, #12]
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f888 	bl	8001c12 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00e      	beq.n	8001b2e <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b26:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f888 	bl	8001c3e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00e      	beq.n	8001b5a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b52:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f87c 	bl	8001c52 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d011      	beq.n	8001b8c <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00a      	beq.n	8001b8c <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001b9a:	6979      	ldr	r1, [r7, #20]
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f876 	bl	8001c8e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d009      	beq.n	8001bbc <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f858 	bl	8001c7a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	; 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001cae:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cbe:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc6:	041a      	lsls	r2, r3, #16
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ce4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cec:	061a      	lsls	r2, r3, #24
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	e005      	b.n	8001d32 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3304      	adds	r3, #4
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d3f3      	bcc.n	8001d26 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	4000a400 	.word	0x4000a400

08001d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d5e:	e15a      	b.n	8002016 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2101      	movs	r1, #1
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 814c 	beq.w	8002010 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d005      	beq.n	8001d90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d130      	bne.n	8001df2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	f003 0201 	and.w	r2, r3, #1
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d017      	beq.n	8001e2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d123      	bne.n	8001e82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3208      	adds	r2, #8
 8001e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	220f      	movs	r2, #15
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	08da      	lsrs	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	6939      	ldr	r1, [r7, #16]
 8001e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0203 	and.w	r2, r3, #3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80a6 	beq.w	8002010 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec4:	4b5b      	ldr	r3, [pc, #364]	; (8002034 <HAL_GPIO_Init+0x2e4>)
 8001ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec8:	4a5a      	ldr	r2, [pc, #360]	; (8002034 <HAL_GPIO_Init+0x2e4>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed0:	4b58      	ldr	r3, [pc, #352]	; (8002034 <HAL_GPIO_Init+0x2e4>)
 8001ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001edc:	4a56      	ldr	r2, [pc, #344]	; (8002038 <HAL_GPIO_Init+0x2e8>)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f06:	d01f      	beq.n	8001f48 <HAL_GPIO_Init+0x1f8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a4c      	ldr	r2, [pc, #304]	; (800203c <HAL_GPIO_Init+0x2ec>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d019      	beq.n	8001f44 <HAL_GPIO_Init+0x1f4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a4b      	ldr	r2, [pc, #300]	; (8002040 <HAL_GPIO_Init+0x2f0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d013      	beq.n	8001f40 <HAL_GPIO_Init+0x1f0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a4a      	ldr	r2, [pc, #296]	; (8002044 <HAL_GPIO_Init+0x2f4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00d      	beq.n	8001f3c <HAL_GPIO_Init+0x1ec>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a49      	ldr	r2, [pc, #292]	; (8002048 <HAL_GPIO_Init+0x2f8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d007      	beq.n	8001f38 <HAL_GPIO_Init+0x1e8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a48      	ldr	r2, [pc, #288]	; (800204c <HAL_GPIO_Init+0x2fc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d101      	bne.n	8001f34 <HAL_GPIO_Init+0x1e4>
 8001f30:	2305      	movs	r3, #5
 8001f32:	e00a      	b.n	8001f4a <HAL_GPIO_Init+0x1fa>
 8001f34:	2306      	movs	r3, #6
 8001f36:	e008      	b.n	8001f4a <HAL_GPIO_Init+0x1fa>
 8001f38:	2304      	movs	r3, #4
 8001f3a:	e006      	b.n	8001f4a <HAL_GPIO_Init+0x1fa>
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e004      	b.n	8001f4a <HAL_GPIO_Init+0x1fa>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e002      	b.n	8001f4a <HAL_GPIO_Init+0x1fa>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_GPIO_Init+0x1fa>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	f002 0203 	and.w	r2, r2, #3
 8001f50:	0092      	lsls	r2, r2, #2
 8001f52:	4093      	lsls	r3, r2
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f5a:	4937      	ldr	r1, [pc, #220]	; (8002038 <HAL_GPIO_Init+0x2e8>)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	3302      	adds	r3, #2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f68:	4b39      	ldr	r3, [pc, #228]	; (8002050 <HAL_GPIO_Init+0x300>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f8c:	4a30      	ldr	r2, [pc, #192]	; (8002050 <HAL_GPIO_Init+0x300>)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f92:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <HAL_GPIO_Init+0x300>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fb6:	4a26      	ldr	r2, [pc, #152]	; (8002050 <HAL_GPIO_Init+0x300>)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <HAL_GPIO_Init+0x300>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fe0:	4a1b      	ldr	r2, [pc, #108]	; (8002050 <HAL_GPIO_Init+0x300>)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_GPIO_Init+0x300>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800200a:	4a11      	ldr	r2, [pc, #68]	; (8002050 <HAL_GPIO_Init+0x300>)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	f47f ae9d 	bne.w	8001d60 <HAL_GPIO_Init+0x10>
  }
}
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	40021000 	.word	0x40021000
 8002038:	40010000 	.word	0x40010000
 800203c:	48000400 	.word	0x48000400
 8002040:	48000800 	.word	0x48000800
 8002044:	48000c00 	.word	0x48000c00
 8002048:	48001000 	.word	0x48001000
 800204c:	48001400 	.word	0x48001400
 8002050:	40010400 	.word	0x40010400

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
 8002060:	4613      	mov	r3, r2
 8002062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002064:	787b      	ldrb	r3, [r7, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002070:	e002      	b.n	8002078 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d141      	bne.n	8002116 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002092:	4b4b      	ldr	r3, [pc, #300]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209e:	d131      	bne.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020a0:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020a6:	4a46      	ldr	r2, [pc, #280]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020b0:	4b43      	ldr	r3, [pc, #268]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020b8:	4a41      	ldr	r2, [pc, #260]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020c0:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2232      	movs	r2, #50	; 0x32
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	4a3f      	ldr	r2, [pc, #252]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	0c9b      	lsrs	r3, r3, #18
 80020d2:	3301      	adds	r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020d6:	e002      	b.n	80020de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3b01      	subs	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020de:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ea:	d102      	bne.n	80020f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f2      	bne.n	80020d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020f2:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020fe:	d158      	bne.n	80021b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e057      	b.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002104:	4b2e      	ldr	r3, [pc, #184]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800210a:	4a2d      	ldr	r2, [pc, #180]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002110:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002114:	e04d      	b.n	80021b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800211c:	d141      	bne.n	80021a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800211e:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212a:	d131      	bne.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002132:	4a23      	ldr	r2, [pc, #140]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800213c:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002144:	4a1e      	ldr	r2, [pc, #120]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800214a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800214c:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2232      	movs	r2, #50	; 0x32
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	0c9b      	lsrs	r3, r3, #18
 800215e:	3301      	adds	r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002162:	e002      	b.n	800216a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3b01      	subs	r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002176:	d102      	bne.n	800217e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f2      	bne.n	8002164 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218a:	d112      	bne.n	80021b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e011      	b.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021a0:	e007      	b.n	80021b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40007000 	.word	0x40007000
 80021c4:	20000030 	.word	0x20000030
 80021c8:	431bde83 	.word	0x431bde83

080021cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e306      	b.n	80027ec <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d075      	beq.n	80022d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ea:	4b97      	ldr	r3, [pc, #604]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f4:	4b94      	ldr	r3, [pc, #592]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b0c      	cmp	r3, #12
 8002202:	d102      	bne.n	800220a <HAL_RCC_OscConfig+0x3e>
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d002      	beq.n	8002210 <HAL_RCC_OscConfig+0x44>
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b08      	cmp	r3, #8
 800220e:	d10b      	bne.n	8002228 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	4b8d      	ldr	r3, [pc, #564]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d05b      	beq.n	80022d4 <HAL_RCC_OscConfig+0x108>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d157      	bne.n	80022d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e2e1      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002230:	d106      	bne.n	8002240 <HAL_RCC_OscConfig+0x74>
 8002232:	4b85      	ldr	r3, [pc, #532]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a84      	ldr	r2, [pc, #528]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e01d      	b.n	800227c <HAL_RCC_OscConfig+0xb0>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x98>
 800224a:	4b7f      	ldr	r3, [pc, #508]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a7e      	ldr	r2, [pc, #504]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b7c      	ldr	r3, [pc, #496]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7b      	ldr	r2, [pc, #492]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e00b      	b.n	800227c <HAL_RCC_OscConfig+0xb0>
 8002264:	4b78      	ldr	r3, [pc, #480]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a77      	ldr	r2, [pc, #476]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 800226a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4b75      	ldr	r3, [pc, #468]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a74      	ldr	r2, [pc, #464]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d013      	beq.n	80022ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe fe60 	bl	8000f48 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228c:	f7fe fe5c 	bl	8000f48 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e2a6      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800229e:	4b6a      	ldr	r3, [pc, #424]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0xc0>
 80022aa:	e014      	b.n	80022d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe fe4c 	bl	8000f48 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b4:	f7fe fe48 	bl	8000f48 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b64      	cmp	r3, #100	; 0x64
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e292      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022c6:	4b60      	ldr	r3, [pc, #384]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0xe8>
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d075      	beq.n	80023ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e2:	4b59      	ldr	r3, [pc, #356]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ec:	4b56      	ldr	r3, [pc, #344]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b0c      	cmp	r3, #12
 80022fa:	d102      	bne.n	8002302 <HAL_RCC_OscConfig+0x136>
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d002      	beq.n	8002308 <HAL_RCC_OscConfig+0x13c>
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2b04      	cmp	r3, #4
 8002306:	d11f      	bne.n	8002348 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002308:	4b4f      	ldr	r3, [pc, #316]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_OscConfig+0x154>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e265      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002320:	4b49      	ldr	r3, [pc, #292]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	061b      	lsls	r3, r3, #24
 800232e:	4946      	ldr	r1, [pc, #280]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002334:	4b45      	ldr	r3, [pc, #276]	; (800244c <HAL_RCC_OscConfig+0x280>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe fdb9 	bl	8000eb0 <HAL_InitTick>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d043      	beq.n	80023cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e251      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d023      	beq.n	8002398 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002350:	4b3d      	ldr	r3, [pc, #244]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a3c      	ldr	r2, [pc, #240]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7fe fdf4 	bl	8000f48 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002364:	f7fe fdf0 	bl	8000f48 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e23a      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002376:	4b34      	ldr	r3, [pc, #208]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002382:	4b31      	ldr	r3, [pc, #196]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	061b      	lsls	r3, r3, #24
 8002390:	492d      	ldr	r1, [pc, #180]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
 8002396:	e01a      	b.n	80023ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002398:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a2a      	ldr	r2, [pc, #168]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 800239e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7fe fdd0 	bl	8000f48 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ac:	f7fe fdcc 	bl	8000f48 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e216      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x1e0>
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d041      	beq.n	800245e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d01c      	beq.n	800241c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 80023e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023e8:	4a17      	ldr	r2, [pc, #92]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f2:	f7fe fda9 	bl	8000f48 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fa:	f7fe fda5 	bl	8000f48 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e1ef      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800240c:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 800240e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0ef      	beq.n	80023fa <HAL_RCC_OscConfig+0x22e>
 800241a:	e020      	b.n	800245e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241c:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 800241e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7fe fd8c 	bl	8000f48 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002432:	e00d      	b.n	8002450 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002434:	f7fe fd88 	bl	8000f48 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d906      	bls.n	8002450 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e1d2      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000
 800244c:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002450:	4b8c      	ldr	r3, [pc, #560]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 8002452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ea      	bne.n	8002434 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 80a6 	beq.w	80025b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246c:	2300      	movs	r3, #0
 800246e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002470:	4b84      	ldr	r3, [pc, #528]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_OscConfig+0x2b4>
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x2b6>
 8002480:	2300      	movs	r3, #0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00d      	beq.n	80024a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002486:	4b7f      	ldr	r3, [pc, #508]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	4a7e      	ldr	r2, [pc, #504]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 800248c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002490:	6593      	str	r3, [r2, #88]	; 0x58
 8002492:	4b7c      	ldr	r3, [pc, #496]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800249e:	2301      	movs	r3, #1
 80024a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a2:	4b79      	ldr	r3, [pc, #484]	; (8002688 <HAL_RCC_OscConfig+0x4bc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d118      	bne.n	80024e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ae:	4b76      	ldr	r3, [pc, #472]	; (8002688 <HAL_RCC_OscConfig+0x4bc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a75      	ldr	r2, [pc, #468]	; (8002688 <HAL_RCC_OscConfig+0x4bc>)
 80024b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ba:	f7fe fd45 	bl	8000f48 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c2:	f7fe fd41 	bl	8000f48 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e18b      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d4:	4b6c      	ldr	r3, [pc, #432]	; (8002688 <HAL_RCC_OscConfig+0x4bc>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d108      	bne.n	80024fa <HAL_RCC_OscConfig+0x32e>
 80024e8:	4b66      	ldr	r3, [pc, #408]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	4a65      	ldr	r2, [pc, #404]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f8:	e024      	b.n	8002544 <HAL_RCC_OscConfig+0x378>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d110      	bne.n	8002524 <HAL_RCC_OscConfig+0x358>
 8002502:	4b60      	ldr	r3, [pc, #384]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002508:	4a5e      	ldr	r2, [pc, #376]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 800250a:	f043 0304 	orr.w	r3, r3, #4
 800250e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002512:	4b5c      	ldr	r3, [pc, #368]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002518:	4a5a      	ldr	r2, [pc, #360]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002522:	e00f      	b.n	8002544 <HAL_RCC_OscConfig+0x378>
 8002524:	4b57      	ldr	r3, [pc, #348]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	4a56      	ldr	r2, [pc, #344]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002534:	4b53      	ldr	r3, [pc, #332]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	4a52      	ldr	r2, [pc, #328]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d016      	beq.n	800257a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254c:	f7fe fcfc 	bl	8000f48 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002552:	e00a      	b.n	800256a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002554:	f7fe fcf8 	bl	8000f48 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e140      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800256a:	4b46      	ldr	r3, [pc, #280]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ed      	beq.n	8002554 <HAL_RCC_OscConfig+0x388>
 8002578:	e015      	b.n	80025a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257a:	f7fe fce5 	bl	8000f48 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7fe fce1 	bl	8000f48 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e129      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002598:	4b3a      	ldr	r3, [pc, #232]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1ed      	bne.n	8002582 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025a6:	7ffb      	ldrb	r3, [r7, #31]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d105      	bne.n	80025b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ac:	4b35      	ldr	r3, [pc, #212]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	4a34      	ldr	r2, [pc, #208]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 80025b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d03c      	beq.n	800263e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01c      	beq.n	8002606 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025cc:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 80025ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025d2:	4a2c      	ldr	r2, [pc, #176]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7fe fcb4 	bl	8000f48 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025e4:	f7fe fcb0 	bl	8000f48 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e0fa      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 80025f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ef      	beq.n	80025e4 <HAL_RCC_OscConfig+0x418>
 8002604:	e01b      	b.n	800263e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002606:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 8002608:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800260c:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7fe fc97 	bl	8000f48 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800261e:	f7fe fc93 	bl	8000f48 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e0dd      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 8002632:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1ef      	bne.n	800261e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 80d1 	beq.w	80027ea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b0c      	cmp	r3, #12
 8002652:	f000 808b 	beq.w	800276c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d15e      	bne.n	800271c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a08      	ldr	r2, [pc, #32]	; (8002684 <HAL_RCC_OscConfig+0x4b8>)
 8002664:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe fc6d 	bl	8000f48 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002670:	e00c      	b.n	800268c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002672:	f7fe fc69 	bl	8000f48 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d905      	bls.n	800268c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e0b3      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
 8002684:	40021000 	.word	0x40021000
 8002688:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800268c:	4b59      	ldr	r3, [pc, #356]	; (80027f4 <HAL_RCC_OscConfig+0x628>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ec      	bne.n	8002672 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002698:	4b56      	ldr	r3, [pc, #344]	; (80027f4 <HAL_RCC_OscConfig+0x628>)
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	4b56      	ldr	r3, [pc, #344]	; (80027f8 <HAL_RCC_OscConfig+0x62c>)
 800269e:	4013      	ands	r3, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6a11      	ldr	r1, [r2, #32]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026a8:	3a01      	subs	r2, #1
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	4311      	orrs	r1, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80026b2:	0212      	lsls	r2, r2, #8
 80026b4:	4311      	orrs	r1, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026ba:	0852      	lsrs	r2, r2, #1
 80026bc:	3a01      	subs	r2, #1
 80026be:	0552      	lsls	r2, r2, #21
 80026c0:	4311      	orrs	r1, r2
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026c6:	0852      	lsrs	r2, r2, #1
 80026c8:	3a01      	subs	r2, #1
 80026ca:	0652      	lsls	r2, r2, #25
 80026cc:	4311      	orrs	r1, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80026d2:	06d2      	lsls	r2, r2, #27
 80026d4:	430a      	orrs	r2, r1
 80026d6:	4947      	ldr	r1, [pc, #284]	; (80027f4 <HAL_RCC_OscConfig+0x628>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026dc:	4b45      	ldr	r3, [pc, #276]	; (80027f4 <HAL_RCC_OscConfig+0x628>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a44      	ldr	r2, [pc, #272]	; (80027f4 <HAL_RCC_OscConfig+0x628>)
 80026e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026e8:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <HAL_RCC_OscConfig+0x628>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4a41      	ldr	r2, [pc, #260]	; (80027f4 <HAL_RCC_OscConfig+0x628>)
 80026ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc28 	bl	8000f48 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc24 	bl	8000f48 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e06e      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <HAL_RCC_OscConfig+0x628>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x530>
 800271a:	e066      	b.n	80027ea <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271c:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <HAL_RCC_OscConfig+0x628>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a34      	ldr	r2, [pc, #208]	; (80027f4 <HAL_RCC_OscConfig+0x628>)
 8002722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002726:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002728:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <HAL_RCC_OscConfig+0x628>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a31      	ldr	r2, [pc, #196]	; (80027f4 <HAL_RCC_OscConfig+0x628>)
 800272e:	f023 0303 	bic.w	r3, r3, #3
 8002732:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002734:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <HAL_RCC_OscConfig+0x628>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a2e      	ldr	r2, [pc, #184]	; (80027f4 <HAL_RCC_OscConfig+0x628>)
 800273a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800273e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002742:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fc00 	bl	8000f48 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274c:	f7fe fbfc 	bl	8000f48 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e046      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800275e:	4b25      	ldr	r3, [pc, #148]	; (80027f4 <HAL_RCC_OscConfig+0x628>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x580>
 800276a:	e03e      	b.n	80027ea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e039      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002778:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <HAL_RCC_OscConfig+0x628>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0203 	and.w	r2, r3, #3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	429a      	cmp	r2, r3
 800278a:	d12c      	bne.n	80027e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	3b01      	subs	r3, #1
 8002798:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d123      	bne.n	80027e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d11b      	bne.n	80027e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d113      	bne.n	80027e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	085b      	lsrs	r3, r3, #1
 80027ca:	3b01      	subs	r3, #1
 80027cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d109      	bne.n	80027e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	085b      	lsrs	r3, r3, #1
 80027de:	3b01      	subs	r3, #1
 80027e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d001      	beq.n	80027ea <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3720      	adds	r7, #32
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	019f800c 	.word	0x019f800c

080027fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e11e      	b.n	8002a52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b91      	ldr	r3, [pc, #580]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d910      	bls.n	8002844 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b8e      	ldr	r3, [pc, #568]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 020f 	bic.w	r2, r3, #15
 800282a:	498c      	ldr	r1, [pc, #560]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b8a      	ldr	r3, [pc, #552]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e106      	b.n	8002a52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d073      	beq.n	8002938 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d129      	bne.n	80028ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002858:	4b81      	ldr	r3, [pc, #516]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0f4      	b.n	8002a52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002868:	f000 f99e 	bl	8002ba8 <RCC_GetSysClockFreqFromPLLSource>
 800286c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4a7c      	ldr	r2, [pc, #496]	; (8002a64 <HAL_RCC_ClockConfig+0x268>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d93f      	bls.n	80028f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002876:	4b7a      	ldr	r3, [pc, #488]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800288a:	2b00      	cmp	r3, #0
 800288c:	d033      	beq.n	80028f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002892:	2b00      	cmp	r3, #0
 8002894:	d12f      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002896:	4b72      	ldr	r3, [pc, #456]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800289e:	4a70      	ldr	r2, [pc, #448]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 80028a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e024      	b.n	80028f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b4:	4b6a      	ldr	r3, [pc, #424]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0c6      	b.n	8002a52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c4:	4b66      	ldr	r3, [pc, #408]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0be      	b.n	8002a52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028d4:	f000 f8ce 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4a61      	ldr	r2, [pc, #388]	; (8002a64 <HAL_RCC_ClockConfig+0x268>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d909      	bls.n	80028f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028e2:	4b5f      	ldr	r3, [pc, #380]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ea:	4a5d      	ldr	r2, [pc, #372]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 80028ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028f6:	4b5a      	ldr	r3, [pc, #360]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f023 0203 	bic.w	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4957      	ldr	r1, [pc, #348]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002908:	f7fe fb1e 	bl	8000f48 <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	e00a      	b.n	8002926 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002910:	f7fe fb1a 	bl	8000f48 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	; 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e095      	b.n	8002a52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002926:	4b4e      	ldr	r3, [pc, #312]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 020c 	and.w	r2, r3, #12
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	429a      	cmp	r2, r3
 8002936:	d1eb      	bne.n	8002910 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d023      	beq.n	800298c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002950:	4b43      	ldr	r3, [pc, #268]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a42      	ldr	r2, [pc, #264]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002956:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800295a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002968:	4b3d      	ldr	r3, [pc, #244]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002970:	4a3b      	ldr	r2, [pc, #236]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002972:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002976:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002978:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4936      	ldr	r1, [pc, #216]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
 800298a:	e008      	b.n	800299e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b80      	cmp	r3, #128	; 0x80
 8002990:	d105      	bne.n	800299e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002992:	4b33      	ldr	r3, [pc, #204]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	4a32      	ldr	r2, [pc, #200]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002998:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800299c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800299e:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d21d      	bcs.n	80029e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ac:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f023 020f 	bic.w	r2, r3, #15
 80029b4:	4929      	ldr	r1, [pc, #164]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029bc:	f7fe fac4 	bl	8000f48 <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	e00a      	b.n	80029da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c4:	f7fe fac0 	bl	8000f48 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e03b      	b.n	8002a52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d1ed      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f4:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4917      	ldr	r1, [pc, #92]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	490f      	ldr	r1, [pc, #60]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a26:	f000 f825 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <HAL_RCC_ClockConfig+0x264>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	490c      	ldr	r1, [pc, #48]	; (8002a68 <HAL_RCC_ClockConfig+0x26c>)
 8002a38:	5ccb      	ldrb	r3, [r1, r3]
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a42:	4a0a      	ldr	r2, [pc, #40]	; (8002a6c <HAL_RCC_ClockConfig+0x270>)
 8002a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a46:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <HAL_RCC_ClockConfig+0x274>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fa30 	bl	8000eb0 <HAL_InitTick>
 8002a50:	4603      	mov	r3, r0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40022000 	.word	0x40022000
 8002a60:	40021000 	.word	0x40021000
 8002a64:	04c4b400 	.word	0x04c4b400
 8002a68:	08004934 	.word	0x08004934
 8002a6c:	20000030 	.word	0x20000030
 8002a70:	20000034 	.word	0x20000034

08002a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a7a:	4b2c      	ldr	r3, [pc, #176]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d102      	bne.n	8002a8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a86:	4b2a      	ldr	r3, [pc, #168]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	e047      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a8c:	4b27      	ldr	r3, [pc, #156]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d102      	bne.n	8002a9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a98:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	e03e      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a9e:	4b23      	ldr	r3, [pc, #140]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d136      	bne.n	8002b18 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aaa:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3301      	adds	r3, #1
 8002ac0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d10c      	bne.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ac8:	4a1a      	ldr	r2, [pc, #104]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	4a16      	ldr	r2, [pc, #88]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad2:	68d2      	ldr	r2, [r2, #12]
 8002ad4:	0a12      	lsrs	r2, r2, #8
 8002ad6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	617b      	str	r3, [r7, #20]
      break;
 8002ae0:	e00c      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ae2:	4a13      	ldr	r2, [pc, #76]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aec:	68d2      	ldr	r2, [r2, #12]
 8002aee:	0a12      	lsrs	r2, r2, #8
 8002af0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002af4:	fb02 f303 	mul.w	r3, r2, r3
 8002af8:	617b      	str	r3, [r7, #20]
      break;
 8002afa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	0e5b      	lsrs	r3, r3, #25
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	3301      	adds	r3, #1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	e001      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b1c:	693b      	ldr	r3, [r7, #16]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	00f42400 	.word	0x00f42400
 8002b34:	007a1200 	.word	0x007a1200

08002b38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20000030 	.word	0x20000030

08002b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b54:	f7ff fff0 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	4904      	ldr	r1, [pc, #16]	; (8002b78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	08004944 	.word	0x08004944

08002b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b80:	f7ff ffda 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	0adb      	lsrs	r3, r3, #11
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	4904      	ldr	r1, [pc, #16]	; (8002ba4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	08004944 	.word	0x08004944

08002ba8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bae:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d10c      	bne.n	8002be6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bcc:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bd6:	68d2      	ldr	r2, [r2, #12]
 8002bd8:	0a12      	lsrs	r2, r2, #8
 8002bda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bde:	fb02 f303 	mul.w	r3, r2, r3
 8002be2:	617b      	str	r3, [r7, #20]
    break;
 8002be4:	e00c      	b.n	8002c00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002be6:	4a12      	ldr	r2, [pc, #72]	; (8002c30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bee:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bf0:	68d2      	ldr	r2, [r2, #12]
 8002bf2:	0a12      	lsrs	r2, r2, #8
 8002bf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bf8:	fb02 f303 	mul.w	r3, r2, r3
 8002bfc:	617b      	str	r3, [r7, #20]
    break;
 8002bfe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	0e5b      	lsrs	r3, r3, #25
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c1a:	687b      	ldr	r3, [r7, #4]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	371c      	adds	r7, #28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	007a1200 	.word	0x007a1200
 8002c30:	00f42400 	.word	0x00f42400

08002c34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c40:	2300      	movs	r3, #0
 8002c42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 8098 	beq.w	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c56:	4b43      	ldr	r3, [pc, #268]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10d      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	4b40      	ldr	r3, [pc, #256]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	4a3f      	ldr	r2, [pc, #252]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c6e:	4b3d      	ldr	r3, [pc, #244]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c7e:	4b3a      	ldr	r3, [pc, #232]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a39      	ldr	r2, [pc, #228]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c8a:	f7fe f95d 	bl	8000f48 <HAL_GetTick>
 8002c8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c90:	e009      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c92:	f7fe f959 	bl	8000f48 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d902      	bls.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	74fb      	strb	r3, [r7, #19]
        break;
 8002ca4:	e005      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca6:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0ef      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d159      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cb8:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01e      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d019      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cd4:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ce0:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce6:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf0:	4b1c      	ldr	r3, [pc, #112]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	4a1b      	ldr	r2, [pc, #108]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d00:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d016      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	f7fe f919 	bl	8000f48 <HAL_GetTick>
 8002d16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d18:	e00b      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1a:	f7fe f915 	bl	8000f48 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d902      	bls.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	74fb      	strb	r3, [r7, #19]
            break;
 8002d30:	e006      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ec      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10b      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	4903      	ldr	r1, [pc, #12]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d5c:	e008      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d5e:	7cfb      	ldrb	r3, [r7, #19]
 8002d60:	74bb      	strb	r3, [r7, #18]
 8002d62:	e005      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d70:	7c7b      	ldrb	r3, [r7, #17]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d105      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d76:	4ba6      	ldr	r3, [pc, #664]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	4aa5      	ldr	r2, [pc, #660]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d8e:	4ba0      	ldr	r3, [pc, #640]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d94:	f023 0203 	bic.w	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	499c      	ldr	r1, [pc, #624]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002db0:	4b97      	ldr	r3, [pc, #604]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	f023 020c 	bic.w	r2, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	4994      	ldr	r1, [pc, #592]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dd2:	4b8f      	ldr	r3, [pc, #572]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	498b      	ldr	r1, [pc, #556]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002df4:	4b86      	ldr	r3, [pc, #536]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	4983      	ldr	r1, [pc, #524]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e16:	4b7e      	ldr	r3, [pc, #504]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	497a      	ldr	r1, [pc, #488]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e38:	4b75      	ldr	r3, [pc, #468]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	4972      	ldr	r1, [pc, #456]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e5a:	4b6d      	ldr	r3, [pc, #436]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	4969      	ldr	r1, [pc, #420]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e7c:	4b64      	ldr	r3, [pc, #400]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4961      	ldr	r1, [pc, #388]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e9e:	4b5c      	ldr	r3, [pc, #368]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	4958      	ldr	r1, [pc, #352]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d015      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ec0:	4b53      	ldr	r3, [pc, #332]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	4950      	ldr	r1, [pc, #320]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ede:	d105      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee0:	4b4b      	ldr	r3, [pc, #300]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a4a      	ldr	r2, [pc, #296]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d015      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ef8:	4b45      	ldr	r3, [pc, #276]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	4942      	ldr	r1, [pc, #264]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f16:	d105      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f18:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4a3c      	ldr	r2, [pc, #240]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f22:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d015      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f30:	4b37      	ldr	r3, [pc, #220]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4934      	ldr	r1, [pc, #208]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f50:	4b2f      	ldr	r3, [pc, #188]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4a2e      	ldr	r2, [pc, #184]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f5a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d015      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f68:	4b29      	ldr	r3, [pc, #164]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f76:	4926      	ldr	r1, [pc, #152]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f86:	d105      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f88:	4b21      	ldr	r3, [pc, #132]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4a20      	ldr	r2, [pc, #128]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f92:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d015      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	4918      	ldr	r1, [pc, #96]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fbe:	d105      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc0:	4b13      	ldr	r3, [pc, #76]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4a12      	ldr	r2, [pc, #72]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d015      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe6:	490a      	ldr	r1, [pc, #40]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ff6:	d105      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003002:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003004:	7cbb      	ldrb	r3, [r7, #18]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000

08003014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e042      	b.n	80030ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800302c:	2b00      	cmp	r3, #0
 800302e:	d106      	bne.n	800303e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7fd fdc7 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2224      	movs	r2, #36	; 0x24
 8003042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0201 	bic.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f8c2 	bl	80031e0 <UART_SetConfig>
 800305c:	4603      	mov	r3, r0
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e022      	b.n	80030ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fb82 	bl	8003778 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fc09 	bl	80038bc <UART_CheckIdleState>
 80030aa:	4603      	mov	r3, r0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	f040 8083 	bne.w	80031d6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_UART_Transmit+0x28>
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e07b      	b.n	80031d8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_UART_Transmit+0x3a>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e074      	b.n	80031d8 <HAL_UART_Transmit+0x124>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2221      	movs	r2, #33	; 0x21
 8003102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003106:	f7fd ff1f 	bl	8000f48 <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	88fa      	ldrh	r2, [r7, #6]
 8003118:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003124:	d108      	bne.n	8003138 <HAL_UART_Transmit+0x84>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d104      	bne.n	8003138 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	e003      	b.n	8003140 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800313c:	2300      	movs	r3, #0
 800313e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003148:	e02c      	b.n	80031a4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2200      	movs	r2, #0
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 fbfc 	bl	8003952 <UART_WaitOnFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e039      	b.n	80031d8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10b      	bne.n	8003182 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003178:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	3302      	adds	r3, #2
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	e007      	b.n	8003192 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	781a      	ldrb	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	3301      	adds	r3, #1
 8003190:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1cc      	bne.n	800314a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2200      	movs	r2, #0
 80031b8:	2140      	movs	r1, #64	; 0x40
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fbc9 	bl	8003952 <UART_WaitOnFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e006      	b.n	80031d8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	e000      	b.n	80031d8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80031d6:	2302      	movs	r3, #2
  }
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031e4:	b08c      	sub	sp, #48	; 0x30
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	431a      	orrs	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	4313      	orrs	r3, r2
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4bab      	ldr	r3, [pc, #684]	; (80034bc <UART_SetConfig+0x2dc>)
 8003210:	4013      	ands	r3, r2
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003218:	430b      	orrs	r3, r1
 800321a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4aa0      	ldr	r2, [pc, #640]	; (80034c0 <UART_SetConfig+0x2e0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d004      	beq.n	800324c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003248:	4313      	orrs	r3, r2
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003256:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003260:	430b      	orrs	r3, r1
 8003262:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f023 010f 	bic.w	r1, r3, #15
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a91      	ldr	r2, [pc, #580]	; (80034c4 <UART_SetConfig+0x2e4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d125      	bne.n	80032d0 <UART_SetConfig+0xf0>
 8003284:	4b90      	ldr	r3, [pc, #576]	; (80034c8 <UART_SetConfig+0x2e8>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b03      	cmp	r3, #3
 8003290:	d81a      	bhi.n	80032c8 <UART_SetConfig+0xe8>
 8003292:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <UART_SetConfig+0xb8>)
 8003294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003298:	080032a9 	.word	0x080032a9
 800329c:	080032b9 	.word	0x080032b9
 80032a0:	080032b1 	.word	0x080032b1
 80032a4:	080032c1 	.word	0x080032c1
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ae:	e0d6      	b.n	800345e <UART_SetConfig+0x27e>
 80032b0:	2302      	movs	r3, #2
 80032b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032b6:	e0d2      	b.n	800345e <UART_SetConfig+0x27e>
 80032b8:	2304      	movs	r3, #4
 80032ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032be:	e0ce      	b.n	800345e <UART_SetConfig+0x27e>
 80032c0:	2308      	movs	r3, #8
 80032c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032c6:	e0ca      	b.n	800345e <UART_SetConfig+0x27e>
 80032c8:	2310      	movs	r3, #16
 80032ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ce:	e0c6      	b.n	800345e <UART_SetConfig+0x27e>
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a7d      	ldr	r2, [pc, #500]	; (80034cc <UART_SetConfig+0x2ec>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d138      	bne.n	800334c <UART_SetConfig+0x16c>
 80032da:	4b7b      	ldr	r3, [pc, #492]	; (80034c8 <UART_SetConfig+0x2e8>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	f003 030c 	and.w	r3, r3, #12
 80032e4:	2b0c      	cmp	r3, #12
 80032e6:	d82d      	bhi.n	8003344 <UART_SetConfig+0x164>
 80032e8:	a201      	add	r2, pc, #4	; (adr r2, 80032f0 <UART_SetConfig+0x110>)
 80032ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ee:	bf00      	nop
 80032f0:	08003325 	.word	0x08003325
 80032f4:	08003345 	.word	0x08003345
 80032f8:	08003345 	.word	0x08003345
 80032fc:	08003345 	.word	0x08003345
 8003300:	08003335 	.word	0x08003335
 8003304:	08003345 	.word	0x08003345
 8003308:	08003345 	.word	0x08003345
 800330c:	08003345 	.word	0x08003345
 8003310:	0800332d 	.word	0x0800332d
 8003314:	08003345 	.word	0x08003345
 8003318:	08003345 	.word	0x08003345
 800331c:	08003345 	.word	0x08003345
 8003320:	0800333d 	.word	0x0800333d
 8003324:	2300      	movs	r3, #0
 8003326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800332a:	e098      	b.n	800345e <UART_SetConfig+0x27e>
 800332c:	2302      	movs	r3, #2
 800332e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003332:	e094      	b.n	800345e <UART_SetConfig+0x27e>
 8003334:	2304      	movs	r3, #4
 8003336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800333a:	e090      	b.n	800345e <UART_SetConfig+0x27e>
 800333c:	2308      	movs	r3, #8
 800333e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003342:	e08c      	b.n	800345e <UART_SetConfig+0x27e>
 8003344:	2310      	movs	r3, #16
 8003346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800334a:	e088      	b.n	800345e <UART_SetConfig+0x27e>
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a5f      	ldr	r2, [pc, #380]	; (80034d0 <UART_SetConfig+0x2f0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d125      	bne.n	80033a2 <UART_SetConfig+0x1c2>
 8003356:	4b5c      	ldr	r3, [pc, #368]	; (80034c8 <UART_SetConfig+0x2e8>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003360:	2b30      	cmp	r3, #48	; 0x30
 8003362:	d016      	beq.n	8003392 <UART_SetConfig+0x1b2>
 8003364:	2b30      	cmp	r3, #48	; 0x30
 8003366:	d818      	bhi.n	800339a <UART_SetConfig+0x1ba>
 8003368:	2b20      	cmp	r3, #32
 800336a:	d00a      	beq.n	8003382 <UART_SetConfig+0x1a2>
 800336c:	2b20      	cmp	r3, #32
 800336e:	d814      	bhi.n	800339a <UART_SetConfig+0x1ba>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <UART_SetConfig+0x19a>
 8003374:	2b10      	cmp	r3, #16
 8003376:	d008      	beq.n	800338a <UART_SetConfig+0x1aa>
 8003378:	e00f      	b.n	800339a <UART_SetConfig+0x1ba>
 800337a:	2300      	movs	r3, #0
 800337c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003380:	e06d      	b.n	800345e <UART_SetConfig+0x27e>
 8003382:	2302      	movs	r3, #2
 8003384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003388:	e069      	b.n	800345e <UART_SetConfig+0x27e>
 800338a:	2304      	movs	r3, #4
 800338c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003390:	e065      	b.n	800345e <UART_SetConfig+0x27e>
 8003392:	2308      	movs	r3, #8
 8003394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003398:	e061      	b.n	800345e <UART_SetConfig+0x27e>
 800339a:	2310      	movs	r3, #16
 800339c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033a0:	e05d      	b.n	800345e <UART_SetConfig+0x27e>
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a4b      	ldr	r2, [pc, #300]	; (80034d4 <UART_SetConfig+0x2f4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d125      	bne.n	80033f8 <UART_SetConfig+0x218>
 80033ac:	4b46      	ldr	r3, [pc, #280]	; (80034c8 <UART_SetConfig+0x2e8>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033b6:	2bc0      	cmp	r3, #192	; 0xc0
 80033b8:	d016      	beq.n	80033e8 <UART_SetConfig+0x208>
 80033ba:	2bc0      	cmp	r3, #192	; 0xc0
 80033bc:	d818      	bhi.n	80033f0 <UART_SetConfig+0x210>
 80033be:	2b80      	cmp	r3, #128	; 0x80
 80033c0:	d00a      	beq.n	80033d8 <UART_SetConfig+0x1f8>
 80033c2:	2b80      	cmp	r3, #128	; 0x80
 80033c4:	d814      	bhi.n	80033f0 <UART_SetConfig+0x210>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <UART_SetConfig+0x1f0>
 80033ca:	2b40      	cmp	r3, #64	; 0x40
 80033cc:	d008      	beq.n	80033e0 <UART_SetConfig+0x200>
 80033ce:	e00f      	b.n	80033f0 <UART_SetConfig+0x210>
 80033d0:	2300      	movs	r3, #0
 80033d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033d6:	e042      	b.n	800345e <UART_SetConfig+0x27e>
 80033d8:	2302      	movs	r3, #2
 80033da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033de:	e03e      	b.n	800345e <UART_SetConfig+0x27e>
 80033e0:	2304      	movs	r3, #4
 80033e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033e6:	e03a      	b.n	800345e <UART_SetConfig+0x27e>
 80033e8:	2308      	movs	r3, #8
 80033ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033ee:	e036      	b.n	800345e <UART_SetConfig+0x27e>
 80033f0:	2310      	movs	r3, #16
 80033f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033f6:	e032      	b.n	800345e <UART_SetConfig+0x27e>
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a30      	ldr	r2, [pc, #192]	; (80034c0 <UART_SetConfig+0x2e0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d12a      	bne.n	8003458 <UART_SetConfig+0x278>
 8003402:	4b31      	ldr	r3, [pc, #196]	; (80034c8 <UART_SetConfig+0x2e8>)
 8003404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003408:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800340c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003410:	d01a      	beq.n	8003448 <UART_SetConfig+0x268>
 8003412:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003416:	d81b      	bhi.n	8003450 <UART_SetConfig+0x270>
 8003418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800341c:	d00c      	beq.n	8003438 <UART_SetConfig+0x258>
 800341e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003422:	d815      	bhi.n	8003450 <UART_SetConfig+0x270>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <UART_SetConfig+0x250>
 8003428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342c:	d008      	beq.n	8003440 <UART_SetConfig+0x260>
 800342e:	e00f      	b.n	8003450 <UART_SetConfig+0x270>
 8003430:	2300      	movs	r3, #0
 8003432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003436:	e012      	b.n	800345e <UART_SetConfig+0x27e>
 8003438:	2302      	movs	r3, #2
 800343a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800343e:	e00e      	b.n	800345e <UART_SetConfig+0x27e>
 8003440:	2304      	movs	r3, #4
 8003442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003446:	e00a      	b.n	800345e <UART_SetConfig+0x27e>
 8003448:	2308      	movs	r3, #8
 800344a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800344e:	e006      	b.n	800345e <UART_SetConfig+0x27e>
 8003450:	2310      	movs	r3, #16
 8003452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003456:	e002      	b.n	800345e <UART_SetConfig+0x27e>
 8003458:	2310      	movs	r3, #16
 800345a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a17      	ldr	r2, [pc, #92]	; (80034c0 <UART_SetConfig+0x2e0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	f040 80a8 	bne.w	80035ba <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800346a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800346e:	2b08      	cmp	r3, #8
 8003470:	d834      	bhi.n	80034dc <UART_SetConfig+0x2fc>
 8003472:	a201      	add	r2, pc, #4	; (adr r2, 8003478 <UART_SetConfig+0x298>)
 8003474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003478:	0800349d 	.word	0x0800349d
 800347c:	080034dd 	.word	0x080034dd
 8003480:	080034a5 	.word	0x080034a5
 8003484:	080034dd 	.word	0x080034dd
 8003488:	080034ab 	.word	0x080034ab
 800348c:	080034dd 	.word	0x080034dd
 8003490:	080034dd 	.word	0x080034dd
 8003494:	080034dd 	.word	0x080034dd
 8003498:	080034b3 	.word	0x080034b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800349c:	f7ff fb58 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 80034a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034a2:	e021      	b.n	80034e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <UART_SetConfig+0x2f8>)
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034a8:	e01e      	b.n	80034e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034aa:	f7ff fae3 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 80034ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034b0:	e01a      	b.n	80034e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034b8:	e016      	b.n	80034e8 <UART_SetConfig+0x308>
 80034ba:	bf00      	nop
 80034bc:	cfff69f3 	.word	0xcfff69f3
 80034c0:	40008000 	.word	0x40008000
 80034c4:	40013800 	.word	0x40013800
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40004400 	.word	0x40004400
 80034d0:	40004800 	.word	0x40004800
 80034d4:	40004c00 	.word	0x40004c00
 80034d8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80034e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 812a 	beq.w	8003744 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	4a9e      	ldr	r2, [pc, #632]	; (8003770 <UART_SetConfig+0x590>)
 80034f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034fa:	461a      	mov	r2, r3
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003502:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	429a      	cmp	r2, r3
 8003512:	d305      	bcc.n	8003520 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	429a      	cmp	r2, r3
 800351e:	d903      	bls.n	8003528 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003526:	e10d      	b.n	8003744 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	2200      	movs	r2, #0
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	60fa      	str	r2, [r7, #12]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	4a8e      	ldr	r2, [pc, #568]	; (8003770 <UART_SetConfig+0x590>)
 8003536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800353a:	b29b      	uxth	r3, r3
 800353c:	2200      	movs	r2, #0
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003546:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800354a:	f7fc fe65 	bl	8000218 <__aeabi_uldivmod>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4610      	mov	r0, r2
 8003554:	4619      	mov	r1, r3
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	020b      	lsls	r3, r1, #8
 8003560:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003564:	0202      	lsls	r2, r0, #8
 8003566:	6979      	ldr	r1, [r7, #20]
 8003568:	6849      	ldr	r1, [r1, #4]
 800356a:	0849      	lsrs	r1, r1, #1
 800356c:	2000      	movs	r0, #0
 800356e:	460c      	mov	r4, r1
 8003570:	4605      	mov	r5, r0
 8003572:	eb12 0804 	adds.w	r8, r2, r4
 8003576:	eb43 0905 	adc.w	r9, r3, r5
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	469a      	mov	sl, r3
 8003582:	4693      	mov	fp, r2
 8003584:	4652      	mov	r2, sl
 8003586:	465b      	mov	r3, fp
 8003588:	4640      	mov	r0, r8
 800358a:	4649      	mov	r1, r9
 800358c:	f7fc fe44 	bl	8000218 <__aeabi_uldivmod>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4613      	mov	r3, r2
 8003596:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800359e:	d308      	bcc.n	80035b2 <UART_SetConfig+0x3d2>
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035a6:	d204      	bcs.n	80035b2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6a3a      	ldr	r2, [r7, #32]
 80035ae:	60da      	str	r2, [r3, #12]
 80035b0:	e0c8      	b.n	8003744 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80035b8:	e0c4      	b.n	8003744 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c2:	d167      	bne.n	8003694 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80035c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d828      	bhi.n	800361e <UART_SetConfig+0x43e>
 80035cc:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <UART_SetConfig+0x3f4>)
 80035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d2:	bf00      	nop
 80035d4:	080035f9 	.word	0x080035f9
 80035d8:	08003601 	.word	0x08003601
 80035dc:	08003609 	.word	0x08003609
 80035e0:	0800361f 	.word	0x0800361f
 80035e4:	0800360f 	.word	0x0800360f
 80035e8:	0800361f 	.word	0x0800361f
 80035ec:	0800361f 	.word	0x0800361f
 80035f0:	0800361f 	.word	0x0800361f
 80035f4:	08003617 	.word	0x08003617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f8:	f7ff faaa 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 80035fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035fe:	e014      	b.n	800362a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003600:	f7ff fabc 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
 8003604:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003606:	e010      	b.n	800362a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003608:	4b5a      	ldr	r3, [pc, #360]	; (8003774 <UART_SetConfig+0x594>)
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800360c:	e00d      	b.n	800362a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800360e:	f7ff fa31 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8003612:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003614:	e009      	b.n	800362a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800361c:	e005      	b.n	800362a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003628:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8089 	beq.w	8003744 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	4a4e      	ldr	r2, [pc, #312]	; (8003770 <UART_SetConfig+0x590>)
 8003638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800363c:	461a      	mov	r2, r3
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	fbb3 f3f2 	udiv	r3, r3, r2
 8003644:	005a      	lsls	r2, r3, #1
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	085b      	lsrs	r3, r3, #1
 800364c:	441a      	add	r2, r3
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	2b0f      	cmp	r3, #15
 800365c:	d916      	bls.n	800368c <UART_SetConfig+0x4ac>
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003664:	d212      	bcs.n	800368c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	b29b      	uxth	r3, r3
 800366a:	f023 030f 	bic.w	r3, r3, #15
 800366e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	085b      	lsrs	r3, r3, #1
 8003674:	b29b      	uxth	r3, r3
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	b29a      	uxth	r2, r3
 800367c:	8bfb      	ldrh	r3, [r7, #30]
 800367e:	4313      	orrs	r3, r2
 8003680:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	8bfa      	ldrh	r2, [r7, #30]
 8003688:	60da      	str	r2, [r3, #12]
 800368a:	e05b      	b.n	8003744 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003692:	e057      	b.n	8003744 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003694:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003698:	2b08      	cmp	r3, #8
 800369a:	d828      	bhi.n	80036ee <UART_SetConfig+0x50e>
 800369c:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <UART_SetConfig+0x4c4>)
 800369e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a2:	bf00      	nop
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036d1 	.word	0x080036d1
 80036ac:	080036d9 	.word	0x080036d9
 80036b0:	080036ef 	.word	0x080036ef
 80036b4:	080036df 	.word	0x080036df
 80036b8:	080036ef 	.word	0x080036ef
 80036bc:	080036ef 	.word	0x080036ef
 80036c0:	080036ef 	.word	0x080036ef
 80036c4:	080036e7 	.word	0x080036e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c8:	f7ff fa42 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 80036cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036ce:	e014      	b.n	80036fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036d0:	f7ff fa54 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
 80036d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036d6:	e010      	b.n	80036fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d8:	4b26      	ldr	r3, [pc, #152]	; (8003774 <UART_SetConfig+0x594>)
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036dc:	e00d      	b.n	80036fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036de:	f7ff f9c9 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 80036e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036e4:	e009      	b.n	80036fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036ec:	e005      	b.n	80036fa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80036f8:	bf00      	nop
    }

    if (pclk != 0U)
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d021      	beq.n	8003744 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <UART_SetConfig+0x590>)
 8003706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800370a:	461a      	mov	r2, r3
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	085b      	lsrs	r3, r3, #1
 8003718:	441a      	add	r2, r3
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003722:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	2b0f      	cmp	r3, #15
 8003728:	d909      	bls.n	800373e <UART_SetConfig+0x55e>
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003730:	d205      	bcs.n	800373e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	b29a      	uxth	r2, r3
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	60da      	str	r2, [r3, #12]
 800373c:	e002      	b.n	8003744 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2201      	movs	r2, #1
 8003748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2201      	movs	r2, #1
 8003750:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2200      	movs	r2, #0
 8003758:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2200      	movs	r2, #0
 800375e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003760:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003764:	4618      	mov	r0, r3
 8003766:	3730      	adds	r7, #48	; 0x30
 8003768:	46bd      	mov	sp, r7
 800376a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800376e:	bf00      	nop
 8003770:	0800495c 	.word	0x0800495c
 8003774:	00f42400 	.word	0x00f42400

08003778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01a      	beq.n	800388e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003876:	d10a      	bne.n	800388e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]
  }
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038cc:	f7fd fb3c 	bl	8000f48 <HAL_GetTick>
 80038d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d10e      	bne.n	80038fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f82f 	bl	8003952 <UART_WaitOnFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e025      	b.n	800394a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b04      	cmp	r3, #4
 800390a:	d10e      	bne.n	800392a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800390c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f819 	bl	8003952 <UART_WaitOnFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e00f      	b.n	800394a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b09c      	sub	sp, #112	; 0x70
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	603b      	str	r3, [r7, #0]
 800395e:	4613      	mov	r3, r2
 8003960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003962:	e0a9      	b.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396a:	f000 80a5 	beq.w	8003ab8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396e:	f7fd faeb 	bl	8000f48 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800397a:	429a      	cmp	r2, r3
 800397c:	d302      	bcc.n	8003984 <UART_WaitOnFlagUntilTimeout+0x32>
 800397e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003980:	2b00      	cmp	r3, #0
 8003982:	d140      	bne.n	8003a06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003994:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003998:	667b      	str	r3, [r7, #100]	; 0x64
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1e6      	bne.n	8003984 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3308      	adds	r3, #8
 80039bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	663b      	str	r3, [r7, #96]	; 0x60
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3308      	adds	r3, #8
 80039d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80039d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e5      	bne.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e069      	b.n	8003ada <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d051      	beq.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a22:	d149      	bne.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a36:	e853 3f00 	ldrex	r3, [r3]
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a54:	e841 2300 	strex	r3, r2, [r1]
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e6      	bne.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3308      	adds	r3, #8
 8003a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a80:	623a      	str	r2, [r7, #32]
 8003a82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	69f9      	ldr	r1, [r7, #28]
 8003a86:	6a3a      	ldr	r2, [r7, #32]
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e5      	bne.n	8003a60 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e010      	b.n	8003ada <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	f43f af46 	beq.w	8003964 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3770      	adds	r7, #112	; 0x70
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_UARTEx_DisableFifoMode+0x16>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e027      	b.n	8003b48 <HAL_UARTEx_DisableFifoMode+0x66>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003b26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e02d      	b.n	8003bc8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2224      	movs	r2, #36	; 0x24
 8003b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f84f 	bl	8003c4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e02d      	b.n	8003c44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2224      	movs	r2, #36	; 0x24
 8003bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f811 	bl	8003c4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d108      	bne.n	8003c6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c6c:	e031      	b.n	8003cd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c6e:	2308      	movs	r3, #8
 8003c70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c72:	2308      	movs	r3, #8
 8003c74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	0e5b      	lsrs	r3, r3, #25
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	0f5b      	lsrs	r3, r3, #29
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c96:	7bbb      	ldrb	r3, [r7, #14]
 8003c98:	7b3a      	ldrb	r2, [r7, #12]
 8003c9a:	4911      	ldr	r1, [pc, #68]	; (8003ce0 <UARTEx_SetNbDataToProcess+0x94>)
 8003c9c:	5c8a      	ldrb	r2, [r1, r2]
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ca2:	7b3a      	ldrb	r2, [r7, #12]
 8003ca4:	490f      	ldr	r1, [pc, #60]	; (8003ce4 <UARTEx_SetNbDataToProcess+0x98>)
 8003ca6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ca8:	fb93 f3f2 	sdiv	r3, r3, r2
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	7b7a      	ldrb	r2, [r7, #13]
 8003cb8:	4909      	ldr	r1, [pc, #36]	; (8003ce0 <UARTEx_SetNbDataToProcess+0x94>)
 8003cba:	5c8a      	ldrb	r2, [r1, r2]
 8003cbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003cc0:	7b7a      	ldrb	r2, [r7, #13]
 8003cc2:	4908      	ldr	r1, [pc, #32]	; (8003ce4 <UARTEx_SetNbDataToProcess+0x98>)
 8003cc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003cc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	08004974 	.word	0x08004974
 8003ce4:	0800497c 	.word	0x0800497c

08003ce8 <__errno>:
 8003ce8:	4b01      	ldr	r3, [pc, #4]	; (8003cf0 <__errno+0x8>)
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	2000003c 	.word	0x2000003c

08003cf4 <__libc_init_array>:
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	4d0d      	ldr	r5, [pc, #52]	; (8003d2c <__libc_init_array+0x38>)
 8003cf8:	4c0d      	ldr	r4, [pc, #52]	; (8003d30 <__libc_init_array+0x3c>)
 8003cfa:	1b64      	subs	r4, r4, r5
 8003cfc:	10a4      	asrs	r4, r4, #2
 8003cfe:	2600      	movs	r6, #0
 8003d00:	42a6      	cmp	r6, r4
 8003d02:	d109      	bne.n	8003d18 <__libc_init_array+0x24>
 8003d04:	4d0b      	ldr	r5, [pc, #44]	; (8003d34 <__libc_init_array+0x40>)
 8003d06:	4c0c      	ldr	r4, [pc, #48]	; (8003d38 <__libc_init_array+0x44>)
 8003d08:	f000 fdf4 	bl	80048f4 <_init>
 8003d0c:	1b64      	subs	r4, r4, r5
 8003d0e:	10a4      	asrs	r4, r4, #2
 8003d10:	2600      	movs	r6, #0
 8003d12:	42a6      	cmp	r6, r4
 8003d14:	d105      	bne.n	8003d22 <__libc_init_array+0x2e>
 8003d16:	bd70      	pop	{r4, r5, r6, pc}
 8003d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1c:	4798      	blx	r3
 8003d1e:	3601      	adds	r6, #1
 8003d20:	e7ee      	b.n	8003d00 <__libc_init_array+0xc>
 8003d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d26:	4798      	blx	r3
 8003d28:	3601      	adds	r6, #1
 8003d2a:	e7f2      	b.n	8003d12 <__libc_init_array+0x1e>
 8003d2c:	080049f0 	.word	0x080049f0
 8003d30:	080049f0 	.word	0x080049f0
 8003d34:	080049f0 	.word	0x080049f0
 8003d38:	080049f4 	.word	0x080049f4

08003d3c <memset>:
 8003d3c:	4402      	add	r2, r0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d100      	bne.n	8003d46 <memset+0xa>
 8003d44:	4770      	bx	lr
 8003d46:	f803 1b01 	strb.w	r1, [r3], #1
 8003d4a:	e7f9      	b.n	8003d40 <memset+0x4>

08003d4c <_puts_r>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	460e      	mov	r6, r1
 8003d50:	4605      	mov	r5, r0
 8003d52:	b118      	cbz	r0, 8003d5c <_puts_r+0x10>
 8003d54:	6983      	ldr	r3, [r0, #24]
 8003d56:	b90b      	cbnz	r3, 8003d5c <_puts_r+0x10>
 8003d58:	f000 fb16 	bl	8004388 <__sinit>
 8003d5c:	69ab      	ldr	r3, [r5, #24]
 8003d5e:	68ac      	ldr	r4, [r5, #8]
 8003d60:	b913      	cbnz	r3, 8003d68 <_puts_r+0x1c>
 8003d62:	4628      	mov	r0, r5
 8003d64:	f000 fb10 	bl	8004388 <__sinit>
 8003d68:	4b2c      	ldr	r3, [pc, #176]	; (8003e1c <_puts_r+0xd0>)
 8003d6a:	429c      	cmp	r4, r3
 8003d6c:	d120      	bne.n	8003db0 <_puts_r+0x64>
 8003d6e:	686c      	ldr	r4, [r5, #4]
 8003d70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d72:	07db      	lsls	r3, r3, #31
 8003d74:	d405      	bmi.n	8003d82 <_puts_r+0x36>
 8003d76:	89a3      	ldrh	r3, [r4, #12]
 8003d78:	0598      	lsls	r0, r3, #22
 8003d7a:	d402      	bmi.n	8003d82 <_puts_r+0x36>
 8003d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d7e:	f000 fba1 	bl	80044c4 <__retarget_lock_acquire_recursive>
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	0719      	lsls	r1, r3, #28
 8003d86:	d51d      	bpl.n	8003dc4 <_puts_r+0x78>
 8003d88:	6923      	ldr	r3, [r4, #16]
 8003d8a:	b1db      	cbz	r3, 8003dc4 <_puts_r+0x78>
 8003d8c:	3e01      	subs	r6, #1
 8003d8e:	68a3      	ldr	r3, [r4, #8]
 8003d90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d94:	3b01      	subs	r3, #1
 8003d96:	60a3      	str	r3, [r4, #8]
 8003d98:	bb39      	cbnz	r1, 8003dea <_puts_r+0x9e>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	da38      	bge.n	8003e10 <_puts_r+0xc4>
 8003d9e:	4622      	mov	r2, r4
 8003da0:	210a      	movs	r1, #10
 8003da2:	4628      	mov	r0, r5
 8003da4:	f000 f916 	bl	8003fd4 <__swbuf_r>
 8003da8:	3001      	adds	r0, #1
 8003daa:	d011      	beq.n	8003dd0 <_puts_r+0x84>
 8003dac:	250a      	movs	r5, #10
 8003dae:	e011      	b.n	8003dd4 <_puts_r+0x88>
 8003db0:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <_puts_r+0xd4>)
 8003db2:	429c      	cmp	r4, r3
 8003db4:	d101      	bne.n	8003dba <_puts_r+0x6e>
 8003db6:	68ac      	ldr	r4, [r5, #8]
 8003db8:	e7da      	b.n	8003d70 <_puts_r+0x24>
 8003dba:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <_puts_r+0xd8>)
 8003dbc:	429c      	cmp	r4, r3
 8003dbe:	bf08      	it	eq
 8003dc0:	68ec      	ldreq	r4, [r5, #12]
 8003dc2:	e7d5      	b.n	8003d70 <_puts_r+0x24>
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	f000 f956 	bl	8004078 <__swsetup_r>
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	d0dd      	beq.n	8003d8c <_puts_r+0x40>
 8003dd0:	f04f 35ff 	mov.w	r5, #4294967295
 8003dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dd6:	07da      	lsls	r2, r3, #31
 8003dd8:	d405      	bmi.n	8003de6 <_puts_r+0x9a>
 8003dda:	89a3      	ldrh	r3, [r4, #12]
 8003ddc:	059b      	lsls	r3, r3, #22
 8003dde:	d402      	bmi.n	8003de6 <_puts_r+0x9a>
 8003de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003de2:	f000 fb70 	bl	80044c6 <__retarget_lock_release_recursive>
 8003de6:	4628      	mov	r0, r5
 8003de8:	bd70      	pop	{r4, r5, r6, pc}
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	da04      	bge.n	8003df8 <_puts_r+0xac>
 8003dee:	69a2      	ldr	r2, [r4, #24]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	dc06      	bgt.n	8003e02 <_puts_r+0xb6>
 8003df4:	290a      	cmp	r1, #10
 8003df6:	d004      	beq.n	8003e02 <_puts_r+0xb6>
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	6022      	str	r2, [r4, #0]
 8003dfe:	7019      	strb	r1, [r3, #0]
 8003e00:	e7c5      	b.n	8003d8e <_puts_r+0x42>
 8003e02:	4622      	mov	r2, r4
 8003e04:	4628      	mov	r0, r5
 8003e06:	f000 f8e5 	bl	8003fd4 <__swbuf_r>
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	d1bf      	bne.n	8003d8e <_puts_r+0x42>
 8003e0e:	e7df      	b.n	8003dd0 <_puts_r+0x84>
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	250a      	movs	r5, #10
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	6022      	str	r2, [r4, #0]
 8003e18:	701d      	strb	r5, [r3, #0]
 8003e1a:	e7db      	b.n	8003dd4 <_puts_r+0x88>
 8003e1c:	080049a8 	.word	0x080049a8
 8003e20:	080049c8 	.word	0x080049c8
 8003e24:	08004988 	.word	0x08004988

08003e28 <puts>:
 8003e28:	4b02      	ldr	r3, [pc, #8]	; (8003e34 <puts+0xc>)
 8003e2a:	4601      	mov	r1, r0
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	f7ff bf8d 	b.w	8003d4c <_puts_r>
 8003e32:	bf00      	nop
 8003e34:	2000003c 	.word	0x2000003c

08003e38 <setbuf>:
 8003e38:	2900      	cmp	r1, #0
 8003e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e3e:	bf0c      	ite	eq
 8003e40:	2202      	moveq	r2, #2
 8003e42:	2200      	movne	r2, #0
 8003e44:	f000 b800 	b.w	8003e48 <setvbuf>

08003e48 <setvbuf>:
 8003e48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003e4c:	461d      	mov	r5, r3
 8003e4e:	4b5d      	ldr	r3, [pc, #372]	; (8003fc4 <setvbuf+0x17c>)
 8003e50:	681f      	ldr	r7, [r3, #0]
 8003e52:	4604      	mov	r4, r0
 8003e54:	460e      	mov	r6, r1
 8003e56:	4690      	mov	r8, r2
 8003e58:	b127      	cbz	r7, 8003e64 <setvbuf+0x1c>
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	b913      	cbnz	r3, 8003e64 <setvbuf+0x1c>
 8003e5e:	4638      	mov	r0, r7
 8003e60:	f000 fa92 	bl	8004388 <__sinit>
 8003e64:	4b58      	ldr	r3, [pc, #352]	; (8003fc8 <setvbuf+0x180>)
 8003e66:	429c      	cmp	r4, r3
 8003e68:	d167      	bne.n	8003f3a <setvbuf+0xf2>
 8003e6a:	687c      	ldr	r4, [r7, #4]
 8003e6c:	f1b8 0f02 	cmp.w	r8, #2
 8003e70:	d006      	beq.n	8003e80 <setvbuf+0x38>
 8003e72:	f1b8 0f01 	cmp.w	r8, #1
 8003e76:	f200 809f 	bhi.w	8003fb8 <setvbuf+0x170>
 8003e7a:	2d00      	cmp	r5, #0
 8003e7c:	f2c0 809c 	blt.w	8003fb8 <setvbuf+0x170>
 8003e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e82:	07db      	lsls	r3, r3, #31
 8003e84:	d405      	bmi.n	8003e92 <setvbuf+0x4a>
 8003e86:	89a3      	ldrh	r3, [r4, #12]
 8003e88:	0598      	lsls	r0, r3, #22
 8003e8a:	d402      	bmi.n	8003e92 <setvbuf+0x4a>
 8003e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e8e:	f000 fb19 	bl	80044c4 <__retarget_lock_acquire_recursive>
 8003e92:	4621      	mov	r1, r4
 8003e94:	4638      	mov	r0, r7
 8003e96:	f000 f9e3 	bl	8004260 <_fflush_r>
 8003e9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e9c:	b141      	cbz	r1, 8003eb0 <setvbuf+0x68>
 8003e9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ea2:	4299      	cmp	r1, r3
 8003ea4:	d002      	beq.n	8003eac <setvbuf+0x64>
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	f000 fb7c 	bl	80045a4 <_free_r>
 8003eac:	2300      	movs	r3, #0
 8003eae:	6363      	str	r3, [r4, #52]	; 0x34
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61a3      	str	r3, [r4, #24]
 8003eb4:	6063      	str	r3, [r4, #4]
 8003eb6:	89a3      	ldrh	r3, [r4, #12]
 8003eb8:	0619      	lsls	r1, r3, #24
 8003eba:	d503      	bpl.n	8003ec4 <setvbuf+0x7c>
 8003ebc:	6921      	ldr	r1, [r4, #16]
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	f000 fb70 	bl	80045a4 <_free_r>
 8003ec4:	89a3      	ldrh	r3, [r4, #12]
 8003ec6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003eca:	f023 0303 	bic.w	r3, r3, #3
 8003ece:	f1b8 0f02 	cmp.w	r8, #2
 8003ed2:	81a3      	strh	r3, [r4, #12]
 8003ed4:	d06c      	beq.n	8003fb0 <setvbuf+0x168>
 8003ed6:	ab01      	add	r3, sp, #4
 8003ed8:	466a      	mov	r2, sp
 8003eda:	4621      	mov	r1, r4
 8003edc:	4638      	mov	r0, r7
 8003ede:	f000 faf3 	bl	80044c8 <__swhatbuf_r>
 8003ee2:	89a3      	ldrh	r3, [r4, #12]
 8003ee4:	4318      	orrs	r0, r3
 8003ee6:	81a0      	strh	r0, [r4, #12]
 8003ee8:	2d00      	cmp	r5, #0
 8003eea:	d130      	bne.n	8003f4e <setvbuf+0x106>
 8003eec:	9d00      	ldr	r5, [sp, #0]
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f000 fb50 	bl	8004594 <malloc>
 8003ef4:	4606      	mov	r6, r0
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	d155      	bne.n	8003fa6 <setvbuf+0x15e>
 8003efa:	f8dd 9000 	ldr.w	r9, [sp]
 8003efe:	45a9      	cmp	r9, r5
 8003f00:	d14a      	bne.n	8003f98 <setvbuf+0x150>
 8003f02:	f04f 35ff 	mov.w	r5, #4294967295
 8003f06:	2200      	movs	r2, #0
 8003f08:	60a2      	str	r2, [r4, #8]
 8003f0a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003f0e:	6022      	str	r2, [r4, #0]
 8003f10:	6122      	str	r2, [r4, #16]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f18:	6162      	str	r2, [r4, #20]
 8003f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f1c:	f043 0302 	orr.w	r3, r3, #2
 8003f20:	07d2      	lsls	r2, r2, #31
 8003f22:	81a3      	strh	r3, [r4, #12]
 8003f24:	d405      	bmi.n	8003f32 <setvbuf+0xea>
 8003f26:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003f2a:	d102      	bne.n	8003f32 <setvbuf+0xea>
 8003f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f2e:	f000 faca 	bl	80044c6 <__retarget_lock_release_recursive>
 8003f32:	4628      	mov	r0, r5
 8003f34:	b003      	add	sp, #12
 8003f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f3a:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <setvbuf+0x184>)
 8003f3c:	429c      	cmp	r4, r3
 8003f3e:	d101      	bne.n	8003f44 <setvbuf+0xfc>
 8003f40:	68bc      	ldr	r4, [r7, #8]
 8003f42:	e793      	b.n	8003e6c <setvbuf+0x24>
 8003f44:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <setvbuf+0x188>)
 8003f46:	429c      	cmp	r4, r3
 8003f48:	bf08      	it	eq
 8003f4a:	68fc      	ldreq	r4, [r7, #12]
 8003f4c:	e78e      	b.n	8003e6c <setvbuf+0x24>
 8003f4e:	2e00      	cmp	r6, #0
 8003f50:	d0cd      	beq.n	8003eee <setvbuf+0xa6>
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	b913      	cbnz	r3, 8003f5c <setvbuf+0x114>
 8003f56:	4638      	mov	r0, r7
 8003f58:	f000 fa16 	bl	8004388 <__sinit>
 8003f5c:	f1b8 0f01 	cmp.w	r8, #1
 8003f60:	bf08      	it	eq
 8003f62:	89a3      	ldrheq	r3, [r4, #12]
 8003f64:	6026      	str	r6, [r4, #0]
 8003f66:	bf04      	itt	eq
 8003f68:	f043 0301 	orreq.w	r3, r3, #1
 8003f6c:	81a3      	strheq	r3, [r4, #12]
 8003f6e:	89a2      	ldrh	r2, [r4, #12]
 8003f70:	f012 0308 	ands.w	r3, r2, #8
 8003f74:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003f78:	d01c      	beq.n	8003fb4 <setvbuf+0x16c>
 8003f7a:	07d3      	lsls	r3, r2, #31
 8003f7c:	bf41      	itttt	mi
 8003f7e:	2300      	movmi	r3, #0
 8003f80:	426d      	negmi	r5, r5
 8003f82:	60a3      	strmi	r3, [r4, #8]
 8003f84:	61a5      	strmi	r5, [r4, #24]
 8003f86:	bf58      	it	pl
 8003f88:	60a5      	strpl	r5, [r4, #8]
 8003f8a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003f8c:	f015 0501 	ands.w	r5, r5, #1
 8003f90:	d115      	bne.n	8003fbe <setvbuf+0x176>
 8003f92:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003f96:	e7c8      	b.n	8003f2a <setvbuf+0xe2>
 8003f98:	4648      	mov	r0, r9
 8003f9a:	f000 fafb 	bl	8004594 <malloc>
 8003f9e:	4606      	mov	r6, r0
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	d0ae      	beq.n	8003f02 <setvbuf+0xba>
 8003fa4:	464d      	mov	r5, r9
 8003fa6:	89a3      	ldrh	r3, [r4, #12]
 8003fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fac:	81a3      	strh	r3, [r4, #12]
 8003fae:	e7d0      	b.n	8003f52 <setvbuf+0x10a>
 8003fb0:	2500      	movs	r5, #0
 8003fb2:	e7a8      	b.n	8003f06 <setvbuf+0xbe>
 8003fb4:	60a3      	str	r3, [r4, #8]
 8003fb6:	e7e8      	b.n	8003f8a <setvbuf+0x142>
 8003fb8:	f04f 35ff 	mov.w	r5, #4294967295
 8003fbc:	e7b9      	b.n	8003f32 <setvbuf+0xea>
 8003fbe:	2500      	movs	r5, #0
 8003fc0:	e7b7      	b.n	8003f32 <setvbuf+0xea>
 8003fc2:	bf00      	nop
 8003fc4:	2000003c 	.word	0x2000003c
 8003fc8:	080049a8 	.word	0x080049a8
 8003fcc:	080049c8 	.word	0x080049c8
 8003fd0:	08004988 	.word	0x08004988

08003fd4 <__swbuf_r>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	460e      	mov	r6, r1
 8003fd8:	4614      	mov	r4, r2
 8003fda:	4605      	mov	r5, r0
 8003fdc:	b118      	cbz	r0, 8003fe6 <__swbuf_r+0x12>
 8003fde:	6983      	ldr	r3, [r0, #24]
 8003fe0:	b90b      	cbnz	r3, 8003fe6 <__swbuf_r+0x12>
 8003fe2:	f000 f9d1 	bl	8004388 <__sinit>
 8003fe6:	4b21      	ldr	r3, [pc, #132]	; (800406c <__swbuf_r+0x98>)
 8003fe8:	429c      	cmp	r4, r3
 8003fea:	d12b      	bne.n	8004044 <__swbuf_r+0x70>
 8003fec:	686c      	ldr	r4, [r5, #4]
 8003fee:	69a3      	ldr	r3, [r4, #24]
 8003ff0:	60a3      	str	r3, [r4, #8]
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	071a      	lsls	r2, r3, #28
 8003ff6:	d52f      	bpl.n	8004058 <__swbuf_r+0x84>
 8003ff8:	6923      	ldr	r3, [r4, #16]
 8003ffa:	b36b      	cbz	r3, 8004058 <__swbuf_r+0x84>
 8003ffc:	6923      	ldr	r3, [r4, #16]
 8003ffe:	6820      	ldr	r0, [r4, #0]
 8004000:	1ac0      	subs	r0, r0, r3
 8004002:	6963      	ldr	r3, [r4, #20]
 8004004:	b2f6      	uxtb	r6, r6
 8004006:	4283      	cmp	r3, r0
 8004008:	4637      	mov	r7, r6
 800400a:	dc04      	bgt.n	8004016 <__swbuf_r+0x42>
 800400c:	4621      	mov	r1, r4
 800400e:	4628      	mov	r0, r5
 8004010:	f000 f926 	bl	8004260 <_fflush_r>
 8004014:	bb30      	cbnz	r0, 8004064 <__swbuf_r+0x90>
 8004016:	68a3      	ldr	r3, [r4, #8]
 8004018:	3b01      	subs	r3, #1
 800401a:	60a3      	str	r3, [r4, #8]
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	6022      	str	r2, [r4, #0]
 8004022:	701e      	strb	r6, [r3, #0]
 8004024:	6963      	ldr	r3, [r4, #20]
 8004026:	3001      	adds	r0, #1
 8004028:	4283      	cmp	r3, r0
 800402a:	d004      	beq.n	8004036 <__swbuf_r+0x62>
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	07db      	lsls	r3, r3, #31
 8004030:	d506      	bpl.n	8004040 <__swbuf_r+0x6c>
 8004032:	2e0a      	cmp	r6, #10
 8004034:	d104      	bne.n	8004040 <__swbuf_r+0x6c>
 8004036:	4621      	mov	r1, r4
 8004038:	4628      	mov	r0, r5
 800403a:	f000 f911 	bl	8004260 <_fflush_r>
 800403e:	b988      	cbnz	r0, 8004064 <__swbuf_r+0x90>
 8004040:	4638      	mov	r0, r7
 8004042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004044:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <__swbuf_r+0x9c>)
 8004046:	429c      	cmp	r4, r3
 8004048:	d101      	bne.n	800404e <__swbuf_r+0x7a>
 800404a:	68ac      	ldr	r4, [r5, #8]
 800404c:	e7cf      	b.n	8003fee <__swbuf_r+0x1a>
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <__swbuf_r+0xa0>)
 8004050:	429c      	cmp	r4, r3
 8004052:	bf08      	it	eq
 8004054:	68ec      	ldreq	r4, [r5, #12]
 8004056:	e7ca      	b.n	8003fee <__swbuf_r+0x1a>
 8004058:	4621      	mov	r1, r4
 800405a:	4628      	mov	r0, r5
 800405c:	f000 f80c 	bl	8004078 <__swsetup_r>
 8004060:	2800      	cmp	r0, #0
 8004062:	d0cb      	beq.n	8003ffc <__swbuf_r+0x28>
 8004064:	f04f 37ff 	mov.w	r7, #4294967295
 8004068:	e7ea      	b.n	8004040 <__swbuf_r+0x6c>
 800406a:	bf00      	nop
 800406c:	080049a8 	.word	0x080049a8
 8004070:	080049c8 	.word	0x080049c8
 8004074:	08004988 	.word	0x08004988

08004078 <__swsetup_r>:
 8004078:	4b32      	ldr	r3, [pc, #200]	; (8004144 <__swsetup_r+0xcc>)
 800407a:	b570      	push	{r4, r5, r6, lr}
 800407c:	681d      	ldr	r5, [r3, #0]
 800407e:	4606      	mov	r6, r0
 8004080:	460c      	mov	r4, r1
 8004082:	b125      	cbz	r5, 800408e <__swsetup_r+0x16>
 8004084:	69ab      	ldr	r3, [r5, #24]
 8004086:	b913      	cbnz	r3, 800408e <__swsetup_r+0x16>
 8004088:	4628      	mov	r0, r5
 800408a:	f000 f97d 	bl	8004388 <__sinit>
 800408e:	4b2e      	ldr	r3, [pc, #184]	; (8004148 <__swsetup_r+0xd0>)
 8004090:	429c      	cmp	r4, r3
 8004092:	d10f      	bne.n	80040b4 <__swsetup_r+0x3c>
 8004094:	686c      	ldr	r4, [r5, #4]
 8004096:	89a3      	ldrh	r3, [r4, #12]
 8004098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800409c:	0719      	lsls	r1, r3, #28
 800409e:	d42c      	bmi.n	80040fa <__swsetup_r+0x82>
 80040a0:	06dd      	lsls	r5, r3, #27
 80040a2:	d411      	bmi.n	80040c8 <__swsetup_r+0x50>
 80040a4:	2309      	movs	r3, #9
 80040a6:	6033      	str	r3, [r6, #0]
 80040a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040ac:	81a3      	strh	r3, [r4, #12]
 80040ae:	f04f 30ff 	mov.w	r0, #4294967295
 80040b2:	e03e      	b.n	8004132 <__swsetup_r+0xba>
 80040b4:	4b25      	ldr	r3, [pc, #148]	; (800414c <__swsetup_r+0xd4>)
 80040b6:	429c      	cmp	r4, r3
 80040b8:	d101      	bne.n	80040be <__swsetup_r+0x46>
 80040ba:	68ac      	ldr	r4, [r5, #8]
 80040bc:	e7eb      	b.n	8004096 <__swsetup_r+0x1e>
 80040be:	4b24      	ldr	r3, [pc, #144]	; (8004150 <__swsetup_r+0xd8>)
 80040c0:	429c      	cmp	r4, r3
 80040c2:	bf08      	it	eq
 80040c4:	68ec      	ldreq	r4, [r5, #12]
 80040c6:	e7e6      	b.n	8004096 <__swsetup_r+0x1e>
 80040c8:	0758      	lsls	r0, r3, #29
 80040ca:	d512      	bpl.n	80040f2 <__swsetup_r+0x7a>
 80040cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040ce:	b141      	cbz	r1, 80040e2 <__swsetup_r+0x6a>
 80040d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040d4:	4299      	cmp	r1, r3
 80040d6:	d002      	beq.n	80040de <__swsetup_r+0x66>
 80040d8:	4630      	mov	r0, r6
 80040da:	f000 fa63 	bl	80045a4 <_free_r>
 80040de:	2300      	movs	r3, #0
 80040e0:	6363      	str	r3, [r4, #52]	; 0x34
 80040e2:	89a3      	ldrh	r3, [r4, #12]
 80040e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040e8:	81a3      	strh	r3, [r4, #12]
 80040ea:	2300      	movs	r3, #0
 80040ec:	6063      	str	r3, [r4, #4]
 80040ee:	6923      	ldr	r3, [r4, #16]
 80040f0:	6023      	str	r3, [r4, #0]
 80040f2:	89a3      	ldrh	r3, [r4, #12]
 80040f4:	f043 0308 	orr.w	r3, r3, #8
 80040f8:	81a3      	strh	r3, [r4, #12]
 80040fa:	6923      	ldr	r3, [r4, #16]
 80040fc:	b94b      	cbnz	r3, 8004112 <__swsetup_r+0x9a>
 80040fe:	89a3      	ldrh	r3, [r4, #12]
 8004100:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004108:	d003      	beq.n	8004112 <__swsetup_r+0x9a>
 800410a:	4621      	mov	r1, r4
 800410c:	4630      	mov	r0, r6
 800410e:	f000 fa01 	bl	8004514 <__smakebuf_r>
 8004112:	89a0      	ldrh	r0, [r4, #12]
 8004114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004118:	f010 0301 	ands.w	r3, r0, #1
 800411c:	d00a      	beq.n	8004134 <__swsetup_r+0xbc>
 800411e:	2300      	movs	r3, #0
 8004120:	60a3      	str	r3, [r4, #8]
 8004122:	6963      	ldr	r3, [r4, #20]
 8004124:	425b      	negs	r3, r3
 8004126:	61a3      	str	r3, [r4, #24]
 8004128:	6923      	ldr	r3, [r4, #16]
 800412a:	b943      	cbnz	r3, 800413e <__swsetup_r+0xc6>
 800412c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004130:	d1ba      	bne.n	80040a8 <__swsetup_r+0x30>
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	0781      	lsls	r1, r0, #30
 8004136:	bf58      	it	pl
 8004138:	6963      	ldrpl	r3, [r4, #20]
 800413a:	60a3      	str	r3, [r4, #8]
 800413c:	e7f4      	b.n	8004128 <__swsetup_r+0xb0>
 800413e:	2000      	movs	r0, #0
 8004140:	e7f7      	b.n	8004132 <__swsetup_r+0xba>
 8004142:	bf00      	nop
 8004144:	2000003c 	.word	0x2000003c
 8004148:	080049a8 	.word	0x080049a8
 800414c:	080049c8 	.word	0x080049c8
 8004150:	08004988 	.word	0x08004988

08004154 <__sflush_r>:
 8004154:	898a      	ldrh	r2, [r1, #12]
 8004156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800415a:	4605      	mov	r5, r0
 800415c:	0710      	lsls	r0, r2, #28
 800415e:	460c      	mov	r4, r1
 8004160:	d458      	bmi.n	8004214 <__sflush_r+0xc0>
 8004162:	684b      	ldr	r3, [r1, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	dc05      	bgt.n	8004174 <__sflush_r+0x20>
 8004168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	dc02      	bgt.n	8004174 <__sflush_r+0x20>
 800416e:	2000      	movs	r0, #0
 8004170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004176:	2e00      	cmp	r6, #0
 8004178:	d0f9      	beq.n	800416e <__sflush_r+0x1a>
 800417a:	2300      	movs	r3, #0
 800417c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004180:	682f      	ldr	r7, [r5, #0]
 8004182:	602b      	str	r3, [r5, #0]
 8004184:	d032      	beq.n	80041ec <__sflush_r+0x98>
 8004186:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004188:	89a3      	ldrh	r3, [r4, #12]
 800418a:	075a      	lsls	r2, r3, #29
 800418c:	d505      	bpl.n	800419a <__sflush_r+0x46>
 800418e:	6863      	ldr	r3, [r4, #4]
 8004190:	1ac0      	subs	r0, r0, r3
 8004192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004194:	b10b      	cbz	r3, 800419a <__sflush_r+0x46>
 8004196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004198:	1ac0      	subs	r0, r0, r3
 800419a:	2300      	movs	r3, #0
 800419c:	4602      	mov	r2, r0
 800419e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041a0:	6a21      	ldr	r1, [r4, #32]
 80041a2:	4628      	mov	r0, r5
 80041a4:	47b0      	blx	r6
 80041a6:	1c43      	adds	r3, r0, #1
 80041a8:	89a3      	ldrh	r3, [r4, #12]
 80041aa:	d106      	bne.n	80041ba <__sflush_r+0x66>
 80041ac:	6829      	ldr	r1, [r5, #0]
 80041ae:	291d      	cmp	r1, #29
 80041b0:	d82c      	bhi.n	800420c <__sflush_r+0xb8>
 80041b2:	4a2a      	ldr	r2, [pc, #168]	; (800425c <__sflush_r+0x108>)
 80041b4:	40ca      	lsrs	r2, r1
 80041b6:	07d6      	lsls	r6, r2, #31
 80041b8:	d528      	bpl.n	800420c <__sflush_r+0xb8>
 80041ba:	2200      	movs	r2, #0
 80041bc:	6062      	str	r2, [r4, #4]
 80041be:	04d9      	lsls	r1, r3, #19
 80041c0:	6922      	ldr	r2, [r4, #16]
 80041c2:	6022      	str	r2, [r4, #0]
 80041c4:	d504      	bpl.n	80041d0 <__sflush_r+0x7c>
 80041c6:	1c42      	adds	r2, r0, #1
 80041c8:	d101      	bne.n	80041ce <__sflush_r+0x7a>
 80041ca:	682b      	ldr	r3, [r5, #0]
 80041cc:	b903      	cbnz	r3, 80041d0 <__sflush_r+0x7c>
 80041ce:	6560      	str	r0, [r4, #84]	; 0x54
 80041d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041d2:	602f      	str	r7, [r5, #0]
 80041d4:	2900      	cmp	r1, #0
 80041d6:	d0ca      	beq.n	800416e <__sflush_r+0x1a>
 80041d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041dc:	4299      	cmp	r1, r3
 80041de:	d002      	beq.n	80041e6 <__sflush_r+0x92>
 80041e0:	4628      	mov	r0, r5
 80041e2:	f000 f9df 	bl	80045a4 <_free_r>
 80041e6:	2000      	movs	r0, #0
 80041e8:	6360      	str	r0, [r4, #52]	; 0x34
 80041ea:	e7c1      	b.n	8004170 <__sflush_r+0x1c>
 80041ec:	6a21      	ldr	r1, [r4, #32]
 80041ee:	2301      	movs	r3, #1
 80041f0:	4628      	mov	r0, r5
 80041f2:	47b0      	blx	r6
 80041f4:	1c41      	adds	r1, r0, #1
 80041f6:	d1c7      	bne.n	8004188 <__sflush_r+0x34>
 80041f8:	682b      	ldr	r3, [r5, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0c4      	beq.n	8004188 <__sflush_r+0x34>
 80041fe:	2b1d      	cmp	r3, #29
 8004200:	d001      	beq.n	8004206 <__sflush_r+0xb2>
 8004202:	2b16      	cmp	r3, #22
 8004204:	d101      	bne.n	800420a <__sflush_r+0xb6>
 8004206:	602f      	str	r7, [r5, #0]
 8004208:	e7b1      	b.n	800416e <__sflush_r+0x1a>
 800420a:	89a3      	ldrh	r3, [r4, #12]
 800420c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004210:	81a3      	strh	r3, [r4, #12]
 8004212:	e7ad      	b.n	8004170 <__sflush_r+0x1c>
 8004214:	690f      	ldr	r7, [r1, #16]
 8004216:	2f00      	cmp	r7, #0
 8004218:	d0a9      	beq.n	800416e <__sflush_r+0x1a>
 800421a:	0793      	lsls	r3, r2, #30
 800421c:	680e      	ldr	r6, [r1, #0]
 800421e:	bf08      	it	eq
 8004220:	694b      	ldreq	r3, [r1, #20]
 8004222:	600f      	str	r7, [r1, #0]
 8004224:	bf18      	it	ne
 8004226:	2300      	movne	r3, #0
 8004228:	eba6 0807 	sub.w	r8, r6, r7
 800422c:	608b      	str	r3, [r1, #8]
 800422e:	f1b8 0f00 	cmp.w	r8, #0
 8004232:	dd9c      	ble.n	800416e <__sflush_r+0x1a>
 8004234:	6a21      	ldr	r1, [r4, #32]
 8004236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004238:	4643      	mov	r3, r8
 800423a:	463a      	mov	r2, r7
 800423c:	4628      	mov	r0, r5
 800423e:	47b0      	blx	r6
 8004240:	2800      	cmp	r0, #0
 8004242:	dc06      	bgt.n	8004252 <__sflush_r+0xfe>
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800424a:	81a3      	strh	r3, [r4, #12]
 800424c:	f04f 30ff 	mov.w	r0, #4294967295
 8004250:	e78e      	b.n	8004170 <__sflush_r+0x1c>
 8004252:	4407      	add	r7, r0
 8004254:	eba8 0800 	sub.w	r8, r8, r0
 8004258:	e7e9      	b.n	800422e <__sflush_r+0xda>
 800425a:	bf00      	nop
 800425c:	20400001 	.word	0x20400001

08004260 <_fflush_r>:
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	690b      	ldr	r3, [r1, #16]
 8004264:	4605      	mov	r5, r0
 8004266:	460c      	mov	r4, r1
 8004268:	b913      	cbnz	r3, 8004270 <_fflush_r+0x10>
 800426a:	2500      	movs	r5, #0
 800426c:	4628      	mov	r0, r5
 800426e:	bd38      	pop	{r3, r4, r5, pc}
 8004270:	b118      	cbz	r0, 800427a <_fflush_r+0x1a>
 8004272:	6983      	ldr	r3, [r0, #24]
 8004274:	b90b      	cbnz	r3, 800427a <_fflush_r+0x1a>
 8004276:	f000 f887 	bl	8004388 <__sinit>
 800427a:	4b14      	ldr	r3, [pc, #80]	; (80042cc <_fflush_r+0x6c>)
 800427c:	429c      	cmp	r4, r3
 800427e:	d11b      	bne.n	80042b8 <_fflush_r+0x58>
 8004280:	686c      	ldr	r4, [r5, #4]
 8004282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0ef      	beq.n	800426a <_fflush_r+0xa>
 800428a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800428c:	07d0      	lsls	r0, r2, #31
 800428e:	d404      	bmi.n	800429a <_fflush_r+0x3a>
 8004290:	0599      	lsls	r1, r3, #22
 8004292:	d402      	bmi.n	800429a <_fflush_r+0x3a>
 8004294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004296:	f000 f915 	bl	80044c4 <__retarget_lock_acquire_recursive>
 800429a:	4628      	mov	r0, r5
 800429c:	4621      	mov	r1, r4
 800429e:	f7ff ff59 	bl	8004154 <__sflush_r>
 80042a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042a4:	07da      	lsls	r2, r3, #31
 80042a6:	4605      	mov	r5, r0
 80042a8:	d4e0      	bmi.n	800426c <_fflush_r+0xc>
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	059b      	lsls	r3, r3, #22
 80042ae:	d4dd      	bmi.n	800426c <_fflush_r+0xc>
 80042b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042b2:	f000 f908 	bl	80044c6 <__retarget_lock_release_recursive>
 80042b6:	e7d9      	b.n	800426c <_fflush_r+0xc>
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <_fflush_r+0x70>)
 80042ba:	429c      	cmp	r4, r3
 80042bc:	d101      	bne.n	80042c2 <_fflush_r+0x62>
 80042be:	68ac      	ldr	r4, [r5, #8]
 80042c0:	e7df      	b.n	8004282 <_fflush_r+0x22>
 80042c2:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <_fflush_r+0x74>)
 80042c4:	429c      	cmp	r4, r3
 80042c6:	bf08      	it	eq
 80042c8:	68ec      	ldreq	r4, [r5, #12]
 80042ca:	e7da      	b.n	8004282 <_fflush_r+0x22>
 80042cc:	080049a8 	.word	0x080049a8
 80042d0:	080049c8 	.word	0x080049c8
 80042d4:	08004988 	.word	0x08004988

080042d8 <std>:
 80042d8:	2300      	movs	r3, #0
 80042da:	b510      	push	{r4, lr}
 80042dc:	4604      	mov	r4, r0
 80042de:	e9c0 3300 	strd	r3, r3, [r0]
 80042e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042e6:	6083      	str	r3, [r0, #8]
 80042e8:	8181      	strh	r1, [r0, #12]
 80042ea:	6643      	str	r3, [r0, #100]	; 0x64
 80042ec:	81c2      	strh	r2, [r0, #14]
 80042ee:	6183      	str	r3, [r0, #24]
 80042f0:	4619      	mov	r1, r3
 80042f2:	2208      	movs	r2, #8
 80042f4:	305c      	adds	r0, #92	; 0x5c
 80042f6:	f7ff fd21 	bl	8003d3c <memset>
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <std+0x38>)
 80042fc:	6263      	str	r3, [r4, #36]	; 0x24
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <std+0x3c>)
 8004300:	62a3      	str	r3, [r4, #40]	; 0x28
 8004302:	4b05      	ldr	r3, [pc, #20]	; (8004318 <std+0x40>)
 8004304:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004306:	4b05      	ldr	r3, [pc, #20]	; (800431c <std+0x44>)
 8004308:	6224      	str	r4, [r4, #32]
 800430a:	6323      	str	r3, [r4, #48]	; 0x30
 800430c:	bd10      	pop	{r4, pc}
 800430e:	bf00      	nop
 8004310:	08004785 	.word	0x08004785
 8004314:	080047a7 	.word	0x080047a7
 8004318:	080047df 	.word	0x080047df
 800431c:	08004803 	.word	0x08004803

08004320 <_cleanup_r>:
 8004320:	4901      	ldr	r1, [pc, #4]	; (8004328 <_cleanup_r+0x8>)
 8004322:	f000 b8af 	b.w	8004484 <_fwalk_reent>
 8004326:	bf00      	nop
 8004328:	08004261 	.word	0x08004261

0800432c <__sfmoreglue>:
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	2268      	movs	r2, #104	; 0x68
 8004330:	1e4d      	subs	r5, r1, #1
 8004332:	4355      	muls	r5, r2
 8004334:	460e      	mov	r6, r1
 8004336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800433a:	f000 f99f 	bl	800467c <_malloc_r>
 800433e:	4604      	mov	r4, r0
 8004340:	b140      	cbz	r0, 8004354 <__sfmoreglue+0x28>
 8004342:	2100      	movs	r1, #0
 8004344:	e9c0 1600 	strd	r1, r6, [r0]
 8004348:	300c      	adds	r0, #12
 800434a:	60a0      	str	r0, [r4, #8]
 800434c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004350:	f7ff fcf4 	bl	8003d3c <memset>
 8004354:	4620      	mov	r0, r4
 8004356:	bd70      	pop	{r4, r5, r6, pc}

08004358 <__sfp_lock_acquire>:
 8004358:	4801      	ldr	r0, [pc, #4]	; (8004360 <__sfp_lock_acquire+0x8>)
 800435a:	f000 b8b3 	b.w	80044c4 <__retarget_lock_acquire_recursive>
 800435e:	bf00      	nop
 8004360:	200001b9 	.word	0x200001b9

08004364 <__sfp_lock_release>:
 8004364:	4801      	ldr	r0, [pc, #4]	; (800436c <__sfp_lock_release+0x8>)
 8004366:	f000 b8ae 	b.w	80044c6 <__retarget_lock_release_recursive>
 800436a:	bf00      	nop
 800436c:	200001b9 	.word	0x200001b9

08004370 <__sinit_lock_acquire>:
 8004370:	4801      	ldr	r0, [pc, #4]	; (8004378 <__sinit_lock_acquire+0x8>)
 8004372:	f000 b8a7 	b.w	80044c4 <__retarget_lock_acquire_recursive>
 8004376:	bf00      	nop
 8004378:	200001ba 	.word	0x200001ba

0800437c <__sinit_lock_release>:
 800437c:	4801      	ldr	r0, [pc, #4]	; (8004384 <__sinit_lock_release+0x8>)
 800437e:	f000 b8a2 	b.w	80044c6 <__retarget_lock_release_recursive>
 8004382:	bf00      	nop
 8004384:	200001ba 	.word	0x200001ba

08004388 <__sinit>:
 8004388:	b510      	push	{r4, lr}
 800438a:	4604      	mov	r4, r0
 800438c:	f7ff fff0 	bl	8004370 <__sinit_lock_acquire>
 8004390:	69a3      	ldr	r3, [r4, #24]
 8004392:	b11b      	cbz	r3, 800439c <__sinit+0x14>
 8004394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004398:	f7ff bff0 	b.w	800437c <__sinit_lock_release>
 800439c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80043a0:	6523      	str	r3, [r4, #80]	; 0x50
 80043a2:	4b13      	ldr	r3, [pc, #76]	; (80043f0 <__sinit+0x68>)
 80043a4:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <__sinit+0x6c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80043aa:	42a3      	cmp	r3, r4
 80043ac:	bf04      	itt	eq
 80043ae:	2301      	moveq	r3, #1
 80043b0:	61a3      	streq	r3, [r4, #24]
 80043b2:	4620      	mov	r0, r4
 80043b4:	f000 f820 	bl	80043f8 <__sfp>
 80043b8:	6060      	str	r0, [r4, #4]
 80043ba:	4620      	mov	r0, r4
 80043bc:	f000 f81c 	bl	80043f8 <__sfp>
 80043c0:	60a0      	str	r0, [r4, #8]
 80043c2:	4620      	mov	r0, r4
 80043c4:	f000 f818 	bl	80043f8 <__sfp>
 80043c8:	2200      	movs	r2, #0
 80043ca:	60e0      	str	r0, [r4, #12]
 80043cc:	2104      	movs	r1, #4
 80043ce:	6860      	ldr	r0, [r4, #4]
 80043d0:	f7ff ff82 	bl	80042d8 <std>
 80043d4:	68a0      	ldr	r0, [r4, #8]
 80043d6:	2201      	movs	r2, #1
 80043d8:	2109      	movs	r1, #9
 80043da:	f7ff ff7d 	bl	80042d8 <std>
 80043de:	68e0      	ldr	r0, [r4, #12]
 80043e0:	2202      	movs	r2, #2
 80043e2:	2112      	movs	r1, #18
 80043e4:	f7ff ff78 	bl	80042d8 <std>
 80043e8:	2301      	movs	r3, #1
 80043ea:	61a3      	str	r3, [r4, #24]
 80043ec:	e7d2      	b.n	8004394 <__sinit+0xc>
 80043ee:	bf00      	nop
 80043f0:	08004984 	.word	0x08004984
 80043f4:	08004321 	.word	0x08004321

080043f8 <__sfp>:
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fa:	4607      	mov	r7, r0
 80043fc:	f7ff ffac 	bl	8004358 <__sfp_lock_acquire>
 8004400:	4b1e      	ldr	r3, [pc, #120]	; (800447c <__sfp+0x84>)
 8004402:	681e      	ldr	r6, [r3, #0]
 8004404:	69b3      	ldr	r3, [r6, #24]
 8004406:	b913      	cbnz	r3, 800440e <__sfp+0x16>
 8004408:	4630      	mov	r0, r6
 800440a:	f7ff ffbd 	bl	8004388 <__sinit>
 800440e:	3648      	adds	r6, #72	; 0x48
 8004410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004414:	3b01      	subs	r3, #1
 8004416:	d503      	bpl.n	8004420 <__sfp+0x28>
 8004418:	6833      	ldr	r3, [r6, #0]
 800441a:	b30b      	cbz	r3, 8004460 <__sfp+0x68>
 800441c:	6836      	ldr	r6, [r6, #0]
 800441e:	e7f7      	b.n	8004410 <__sfp+0x18>
 8004420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004424:	b9d5      	cbnz	r5, 800445c <__sfp+0x64>
 8004426:	4b16      	ldr	r3, [pc, #88]	; (8004480 <__sfp+0x88>)
 8004428:	60e3      	str	r3, [r4, #12]
 800442a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800442e:	6665      	str	r5, [r4, #100]	; 0x64
 8004430:	f000 f847 	bl	80044c2 <__retarget_lock_init_recursive>
 8004434:	f7ff ff96 	bl	8004364 <__sfp_lock_release>
 8004438:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800443c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004440:	6025      	str	r5, [r4, #0]
 8004442:	61a5      	str	r5, [r4, #24]
 8004444:	2208      	movs	r2, #8
 8004446:	4629      	mov	r1, r5
 8004448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800444c:	f7ff fc76 	bl	8003d3c <memset>
 8004450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004458:	4620      	mov	r0, r4
 800445a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800445c:	3468      	adds	r4, #104	; 0x68
 800445e:	e7d9      	b.n	8004414 <__sfp+0x1c>
 8004460:	2104      	movs	r1, #4
 8004462:	4638      	mov	r0, r7
 8004464:	f7ff ff62 	bl	800432c <__sfmoreglue>
 8004468:	4604      	mov	r4, r0
 800446a:	6030      	str	r0, [r6, #0]
 800446c:	2800      	cmp	r0, #0
 800446e:	d1d5      	bne.n	800441c <__sfp+0x24>
 8004470:	f7ff ff78 	bl	8004364 <__sfp_lock_release>
 8004474:	230c      	movs	r3, #12
 8004476:	603b      	str	r3, [r7, #0]
 8004478:	e7ee      	b.n	8004458 <__sfp+0x60>
 800447a:	bf00      	nop
 800447c:	08004984 	.word	0x08004984
 8004480:	ffff0001 	.word	0xffff0001

08004484 <_fwalk_reent>:
 8004484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004488:	4606      	mov	r6, r0
 800448a:	4688      	mov	r8, r1
 800448c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004490:	2700      	movs	r7, #0
 8004492:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004496:	f1b9 0901 	subs.w	r9, r9, #1
 800449a:	d505      	bpl.n	80044a8 <_fwalk_reent+0x24>
 800449c:	6824      	ldr	r4, [r4, #0]
 800449e:	2c00      	cmp	r4, #0
 80044a0:	d1f7      	bne.n	8004492 <_fwalk_reent+0xe>
 80044a2:	4638      	mov	r0, r7
 80044a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044a8:	89ab      	ldrh	r3, [r5, #12]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d907      	bls.n	80044be <_fwalk_reent+0x3a>
 80044ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044b2:	3301      	adds	r3, #1
 80044b4:	d003      	beq.n	80044be <_fwalk_reent+0x3a>
 80044b6:	4629      	mov	r1, r5
 80044b8:	4630      	mov	r0, r6
 80044ba:	47c0      	blx	r8
 80044bc:	4307      	orrs	r7, r0
 80044be:	3568      	adds	r5, #104	; 0x68
 80044c0:	e7e9      	b.n	8004496 <_fwalk_reent+0x12>

080044c2 <__retarget_lock_init_recursive>:
 80044c2:	4770      	bx	lr

080044c4 <__retarget_lock_acquire_recursive>:
 80044c4:	4770      	bx	lr

080044c6 <__retarget_lock_release_recursive>:
 80044c6:	4770      	bx	lr

080044c8 <__swhatbuf_r>:
 80044c8:	b570      	push	{r4, r5, r6, lr}
 80044ca:	460e      	mov	r6, r1
 80044cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d0:	2900      	cmp	r1, #0
 80044d2:	b096      	sub	sp, #88	; 0x58
 80044d4:	4614      	mov	r4, r2
 80044d6:	461d      	mov	r5, r3
 80044d8:	da08      	bge.n	80044ec <__swhatbuf_r+0x24>
 80044da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	602a      	str	r2, [r5, #0]
 80044e2:	061a      	lsls	r2, r3, #24
 80044e4:	d410      	bmi.n	8004508 <__swhatbuf_r+0x40>
 80044e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044ea:	e00e      	b.n	800450a <__swhatbuf_r+0x42>
 80044ec:	466a      	mov	r2, sp
 80044ee:	f000 f9af 	bl	8004850 <_fstat_r>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	dbf1      	blt.n	80044da <__swhatbuf_r+0x12>
 80044f6:	9a01      	ldr	r2, [sp, #4]
 80044f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004500:	425a      	negs	r2, r3
 8004502:	415a      	adcs	r2, r3
 8004504:	602a      	str	r2, [r5, #0]
 8004506:	e7ee      	b.n	80044e6 <__swhatbuf_r+0x1e>
 8004508:	2340      	movs	r3, #64	; 0x40
 800450a:	2000      	movs	r0, #0
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	b016      	add	sp, #88	; 0x58
 8004510:	bd70      	pop	{r4, r5, r6, pc}
	...

08004514 <__smakebuf_r>:
 8004514:	898b      	ldrh	r3, [r1, #12]
 8004516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004518:	079d      	lsls	r5, r3, #30
 800451a:	4606      	mov	r6, r0
 800451c:	460c      	mov	r4, r1
 800451e:	d507      	bpl.n	8004530 <__smakebuf_r+0x1c>
 8004520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	6123      	str	r3, [r4, #16]
 8004528:	2301      	movs	r3, #1
 800452a:	6163      	str	r3, [r4, #20]
 800452c:	b002      	add	sp, #8
 800452e:	bd70      	pop	{r4, r5, r6, pc}
 8004530:	ab01      	add	r3, sp, #4
 8004532:	466a      	mov	r2, sp
 8004534:	f7ff ffc8 	bl	80044c8 <__swhatbuf_r>
 8004538:	9900      	ldr	r1, [sp, #0]
 800453a:	4605      	mov	r5, r0
 800453c:	4630      	mov	r0, r6
 800453e:	f000 f89d 	bl	800467c <_malloc_r>
 8004542:	b948      	cbnz	r0, 8004558 <__smakebuf_r+0x44>
 8004544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004548:	059a      	lsls	r2, r3, #22
 800454a:	d4ef      	bmi.n	800452c <__smakebuf_r+0x18>
 800454c:	f023 0303 	bic.w	r3, r3, #3
 8004550:	f043 0302 	orr.w	r3, r3, #2
 8004554:	81a3      	strh	r3, [r4, #12]
 8004556:	e7e3      	b.n	8004520 <__smakebuf_r+0xc>
 8004558:	4b0d      	ldr	r3, [pc, #52]	; (8004590 <__smakebuf_r+0x7c>)
 800455a:	62b3      	str	r3, [r6, #40]	; 0x28
 800455c:	89a3      	ldrh	r3, [r4, #12]
 800455e:	6020      	str	r0, [r4, #0]
 8004560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004564:	81a3      	strh	r3, [r4, #12]
 8004566:	9b00      	ldr	r3, [sp, #0]
 8004568:	6163      	str	r3, [r4, #20]
 800456a:	9b01      	ldr	r3, [sp, #4]
 800456c:	6120      	str	r0, [r4, #16]
 800456e:	b15b      	cbz	r3, 8004588 <__smakebuf_r+0x74>
 8004570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004574:	4630      	mov	r0, r6
 8004576:	f000 f97d 	bl	8004874 <_isatty_r>
 800457a:	b128      	cbz	r0, 8004588 <__smakebuf_r+0x74>
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	f023 0303 	bic.w	r3, r3, #3
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	81a3      	strh	r3, [r4, #12]
 8004588:	89a0      	ldrh	r0, [r4, #12]
 800458a:	4305      	orrs	r5, r0
 800458c:	81a5      	strh	r5, [r4, #12]
 800458e:	e7cd      	b.n	800452c <__smakebuf_r+0x18>
 8004590:	08004321 	.word	0x08004321

08004594 <malloc>:
 8004594:	4b02      	ldr	r3, [pc, #8]	; (80045a0 <malloc+0xc>)
 8004596:	4601      	mov	r1, r0
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	f000 b86f 	b.w	800467c <_malloc_r>
 800459e:	bf00      	nop
 80045a0:	2000003c 	.word	0x2000003c

080045a4 <_free_r>:
 80045a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045a6:	2900      	cmp	r1, #0
 80045a8:	d044      	beq.n	8004634 <_free_r+0x90>
 80045aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ae:	9001      	str	r0, [sp, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f1a1 0404 	sub.w	r4, r1, #4
 80045b6:	bfb8      	it	lt
 80045b8:	18e4      	addlt	r4, r4, r3
 80045ba:	f000 f97d 	bl	80048b8 <__malloc_lock>
 80045be:	4a1e      	ldr	r2, [pc, #120]	; (8004638 <_free_r+0x94>)
 80045c0:	9801      	ldr	r0, [sp, #4]
 80045c2:	6813      	ldr	r3, [r2, #0]
 80045c4:	b933      	cbnz	r3, 80045d4 <_free_r+0x30>
 80045c6:	6063      	str	r3, [r4, #4]
 80045c8:	6014      	str	r4, [r2, #0]
 80045ca:	b003      	add	sp, #12
 80045cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045d0:	f000 b978 	b.w	80048c4 <__malloc_unlock>
 80045d4:	42a3      	cmp	r3, r4
 80045d6:	d908      	bls.n	80045ea <_free_r+0x46>
 80045d8:	6825      	ldr	r5, [r4, #0]
 80045da:	1961      	adds	r1, r4, r5
 80045dc:	428b      	cmp	r3, r1
 80045de:	bf01      	itttt	eq
 80045e0:	6819      	ldreq	r1, [r3, #0]
 80045e2:	685b      	ldreq	r3, [r3, #4]
 80045e4:	1949      	addeq	r1, r1, r5
 80045e6:	6021      	streq	r1, [r4, #0]
 80045e8:	e7ed      	b.n	80045c6 <_free_r+0x22>
 80045ea:	461a      	mov	r2, r3
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	b10b      	cbz	r3, 80045f4 <_free_r+0x50>
 80045f0:	42a3      	cmp	r3, r4
 80045f2:	d9fa      	bls.n	80045ea <_free_r+0x46>
 80045f4:	6811      	ldr	r1, [r2, #0]
 80045f6:	1855      	adds	r5, r2, r1
 80045f8:	42a5      	cmp	r5, r4
 80045fa:	d10b      	bne.n	8004614 <_free_r+0x70>
 80045fc:	6824      	ldr	r4, [r4, #0]
 80045fe:	4421      	add	r1, r4
 8004600:	1854      	adds	r4, r2, r1
 8004602:	42a3      	cmp	r3, r4
 8004604:	6011      	str	r1, [r2, #0]
 8004606:	d1e0      	bne.n	80045ca <_free_r+0x26>
 8004608:	681c      	ldr	r4, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	6053      	str	r3, [r2, #4]
 800460e:	4421      	add	r1, r4
 8004610:	6011      	str	r1, [r2, #0]
 8004612:	e7da      	b.n	80045ca <_free_r+0x26>
 8004614:	d902      	bls.n	800461c <_free_r+0x78>
 8004616:	230c      	movs	r3, #12
 8004618:	6003      	str	r3, [r0, #0]
 800461a:	e7d6      	b.n	80045ca <_free_r+0x26>
 800461c:	6825      	ldr	r5, [r4, #0]
 800461e:	1961      	adds	r1, r4, r5
 8004620:	428b      	cmp	r3, r1
 8004622:	bf04      	itt	eq
 8004624:	6819      	ldreq	r1, [r3, #0]
 8004626:	685b      	ldreq	r3, [r3, #4]
 8004628:	6063      	str	r3, [r4, #4]
 800462a:	bf04      	itt	eq
 800462c:	1949      	addeq	r1, r1, r5
 800462e:	6021      	streq	r1, [r4, #0]
 8004630:	6054      	str	r4, [r2, #4]
 8004632:	e7ca      	b.n	80045ca <_free_r+0x26>
 8004634:	b003      	add	sp, #12
 8004636:	bd30      	pop	{r4, r5, pc}
 8004638:	200001bc 	.word	0x200001bc

0800463c <sbrk_aligned>:
 800463c:	b570      	push	{r4, r5, r6, lr}
 800463e:	4e0e      	ldr	r6, [pc, #56]	; (8004678 <sbrk_aligned+0x3c>)
 8004640:	460c      	mov	r4, r1
 8004642:	6831      	ldr	r1, [r6, #0]
 8004644:	4605      	mov	r5, r0
 8004646:	b911      	cbnz	r1, 800464e <sbrk_aligned+0x12>
 8004648:	f000 f88c 	bl	8004764 <_sbrk_r>
 800464c:	6030      	str	r0, [r6, #0]
 800464e:	4621      	mov	r1, r4
 8004650:	4628      	mov	r0, r5
 8004652:	f000 f887 	bl	8004764 <_sbrk_r>
 8004656:	1c43      	adds	r3, r0, #1
 8004658:	d00a      	beq.n	8004670 <sbrk_aligned+0x34>
 800465a:	1cc4      	adds	r4, r0, #3
 800465c:	f024 0403 	bic.w	r4, r4, #3
 8004660:	42a0      	cmp	r0, r4
 8004662:	d007      	beq.n	8004674 <sbrk_aligned+0x38>
 8004664:	1a21      	subs	r1, r4, r0
 8004666:	4628      	mov	r0, r5
 8004668:	f000 f87c 	bl	8004764 <_sbrk_r>
 800466c:	3001      	adds	r0, #1
 800466e:	d101      	bne.n	8004674 <sbrk_aligned+0x38>
 8004670:	f04f 34ff 	mov.w	r4, #4294967295
 8004674:	4620      	mov	r0, r4
 8004676:	bd70      	pop	{r4, r5, r6, pc}
 8004678:	200001c0 	.word	0x200001c0

0800467c <_malloc_r>:
 800467c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004680:	1ccd      	adds	r5, r1, #3
 8004682:	f025 0503 	bic.w	r5, r5, #3
 8004686:	3508      	adds	r5, #8
 8004688:	2d0c      	cmp	r5, #12
 800468a:	bf38      	it	cc
 800468c:	250c      	movcc	r5, #12
 800468e:	2d00      	cmp	r5, #0
 8004690:	4607      	mov	r7, r0
 8004692:	db01      	blt.n	8004698 <_malloc_r+0x1c>
 8004694:	42a9      	cmp	r1, r5
 8004696:	d905      	bls.n	80046a4 <_malloc_r+0x28>
 8004698:	230c      	movs	r3, #12
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	2600      	movs	r6, #0
 800469e:	4630      	mov	r0, r6
 80046a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046a4:	4e2e      	ldr	r6, [pc, #184]	; (8004760 <_malloc_r+0xe4>)
 80046a6:	f000 f907 	bl	80048b8 <__malloc_lock>
 80046aa:	6833      	ldr	r3, [r6, #0]
 80046ac:	461c      	mov	r4, r3
 80046ae:	bb34      	cbnz	r4, 80046fe <_malloc_r+0x82>
 80046b0:	4629      	mov	r1, r5
 80046b2:	4638      	mov	r0, r7
 80046b4:	f7ff ffc2 	bl	800463c <sbrk_aligned>
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	4604      	mov	r4, r0
 80046bc:	d14d      	bne.n	800475a <_malloc_r+0xde>
 80046be:	6834      	ldr	r4, [r6, #0]
 80046c0:	4626      	mov	r6, r4
 80046c2:	2e00      	cmp	r6, #0
 80046c4:	d140      	bne.n	8004748 <_malloc_r+0xcc>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	4631      	mov	r1, r6
 80046ca:	4638      	mov	r0, r7
 80046cc:	eb04 0803 	add.w	r8, r4, r3
 80046d0:	f000 f848 	bl	8004764 <_sbrk_r>
 80046d4:	4580      	cmp	r8, r0
 80046d6:	d13a      	bne.n	800474e <_malloc_r+0xd2>
 80046d8:	6821      	ldr	r1, [r4, #0]
 80046da:	3503      	adds	r5, #3
 80046dc:	1a6d      	subs	r5, r5, r1
 80046de:	f025 0503 	bic.w	r5, r5, #3
 80046e2:	3508      	adds	r5, #8
 80046e4:	2d0c      	cmp	r5, #12
 80046e6:	bf38      	it	cc
 80046e8:	250c      	movcc	r5, #12
 80046ea:	4629      	mov	r1, r5
 80046ec:	4638      	mov	r0, r7
 80046ee:	f7ff ffa5 	bl	800463c <sbrk_aligned>
 80046f2:	3001      	adds	r0, #1
 80046f4:	d02b      	beq.n	800474e <_malloc_r+0xd2>
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	442b      	add	r3, r5
 80046fa:	6023      	str	r3, [r4, #0]
 80046fc:	e00e      	b.n	800471c <_malloc_r+0xa0>
 80046fe:	6822      	ldr	r2, [r4, #0]
 8004700:	1b52      	subs	r2, r2, r5
 8004702:	d41e      	bmi.n	8004742 <_malloc_r+0xc6>
 8004704:	2a0b      	cmp	r2, #11
 8004706:	d916      	bls.n	8004736 <_malloc_r+0xba>
 8004708:	1961      	adds	r1, r4, r5
 800470a:	42a3      	cmp	r3, r4
 800470c:	6025      	str	r5, [r4, #0]
 800470e:	bf18      	it	ne
 8004710:	6059      	strne	r1, [r3, #4]
 8004712:	6863      	ldr	r3, [r4, #4]
 8004714:	bf08      	it	eq
 8004716:	6031      	streq	r1, [r6, #0]
 8004718:	5162      	str	r2, [r4, r5]
 800471a:	604b      	str	r3, [r1, #4]
 800471c:	4638      	mov	r0, r7
 800471e:	f104 060b 	add.w	r6, r4, #11
 8004722:	f000 f8cf 	bl	80048c4 <__malloc_unlock>
 8004726:	f026 0607 	bic.w	r6, r6, #7
 800472a:	1d23      	adds	r3, r4, #4
 800472c:	1af2      	subs	r2, r6, r3
 800472e:	d0b6      	beq.n	800469e <_malloc_r+0x22>
 8004730:	1b9b      	subs	r3, r3, r6
 8004732:	50a3      	str	r3, [r4, r2]
 8004734:	e7b3      	b.n	800469e <_malloc_r+0x22>
 8004736:	6862      	ldr	r2, [r4, #4]
 8004738:	42a3      	cmp	r3, r4
 800473a:	bf0c      	ite	eq
 800473c:	6032      	streq	r2, [r6, #0]
 800473e:	605a      	strne	r2, [r3, #4]
 8004740:	e7ec      	b.n	800471c <_malloc_r+0xa0>
 8004742:	4623      	mov	r3, r4
 8004744:	6864      	ldr	r4, [r4, #4]
 8004746:	e7b2      	b.n	80046ae <_malloc_r+0x32>
 8004748:	4634      	mov	r4, r6
 800474a:	6876      	ldr	r6, [r6, #4]
 800474c:	e7b9      	b.n	80046c2 <_malloc_r+0x46>
 800474e:	230c      	movs	r3, #12
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	4638      	mov	r0, r7
 8004754:	f000 f8b6 	bl	80048c4 <__malloc_unlock>
 8004758:	e7a1      	b.n	800469e <_malloc_r+0x22>
 800475a:	6025      	str	r5, [r4, #0]
 800475c:	e7de      	b.n	800471c <_malloc_r+0xa0>
 800475e:	bf00      	nop
 8004760:	200001bc 	.word	0x200001bc

08004764 <_sbrk_r>:
 8004764:	b538      	push	{r3, r4, r5, lr}
 8004766:	4d06      	ldr	r5, [pc, #24]	; (8004780 <_sbrk_r+0x1c>)
 8004768:	2300      	movs	r3, #0
 800476a:	4604      	mov	r4, r0
 800476c:	4608      	mov	r0, r1
 800476e:	602b      	str	r3, [r5, #0]
 8004770:	f7fc fb14 	bl	8000d9c <_sbrk>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d102      	bne.n	800477e <_sbrk_r+0x1a>
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	b103      	cbz	r3, 800477e <_sbrk_r+0x1a>
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	bd38      	pop	{r3, r4, r5, pc}
 8004780:	200001c4 	.word	0x200001c4

08004784 <__sread>:
 8004784:	b510      	push	{r4, lr}
 8004786:	460c      	mov	r4, r1
 8004788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800478c:	f000 f8a0 	bl	80048d0 <_read_r>
 8004790:	2800      	cmp	r0, #0
 8004792:	bfab      	itete	ge
 8004794:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004796:	89a3      	ldrhlt	r3, [r4, #12]
 8004798:	181b      	addge	r3, r3, r0
 800479a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800479e:	bfac      	ite	ge
 80047a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80047a2:	81a3      	strhlt	r3, [r4, #12]
 80047a4:	bd10      	pop	{r4, pc}

080047a6 <__swrite>:
 80047a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047aa:	461f      	mov	r7, r3
 80047ac:	898b      	ldrh	r3, [r1, #12]
 80047ae:	05db      	lsls	r3, r3, #23
 80047b0:	4605      	mov	r5, r0
 80047b2:	460c      	mov	r4, r1
 80047b4:	4616      	mov	r6, r2
 80047b6:	d505      	bpl.n	80047c4 <__swrite+0x1e>
 80047b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047bc:	2302      	movs	r3, #2
 80047be:	2200      	movs	r2, #0
 80047c0:	f000 f868 	bl	8004894 <_lseek_r>
 80047c4:	89a3      	ldrh	r3, [r4, #12]
 80047c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047ce:	81a3      	strh	r3, [r4, #12]
 80047d0:	4632      	mov	r2, r6
 80047d2:	463b      	mov	r3, r7
 80047d4:	4628      	mov	r0, r5
 80047d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047da:	f000 b817 	b.w	800480c <_write_r>

080047de <__sseek>:
 80047de:	b510      	push	{r4, lr}
 80047e0:	460c      	mov	r4, r1
 80047e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e6:	f000 f855 	bl	8004894 <_lseek_r>
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	bf15      	itete	ne
 80047f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80047f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047fa:	81a3      	strheq	r3, [r4, #12]
 80047fc:	bf18      	it	ne
 80047fe:	81a3      	strhne	r3, [r4, #12]
 8004800:	bd10      	pop	{r4, pc}

08004802 <__sclose>:
 8004802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004806:	f000 b813 	b.w	8004830 <_close_r>
	...

0800480c <_write_r>:
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	4d07      	ldr	r5, [pc, #28]	; (800482c <_write_r+0x20>)
 8004810:	4604      	mov	r4, r0
 8004812:	4608      	mov	r0, r1
 8004814:	4611      	mov	r1, r2
 8004816:	2200      	movs	r2, #0
 8004818:	602a      	str	r2, [r5, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	f7fb fe7e 	bl	800051c <_write>
 8004820:	1c43      	adds	r3, r0, #1
 8004822:	d102      	bne.n	800482a <_write_r+0x1e>
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	b103      	cbz	r3, 800482a <_write_r+0x1e>
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	bd38      	pop	{r3, r4, r5, pc}
 800482c:	200001c4 	.word	0x200001c4

08004830 <_close_r>:
 8004830:	b538      	push	{r3, r4, r5, lr}
 8004832:	4d06      	ldr	r5, [pc, #24]	; (800484c <_close_r+0x1c>)
 8004834:	2300      	movs	r3, #0
 8004836:	4604      	mov	r4, r0
 8004838:	4608      	mov	r0, r1
 800483a:	602b      	str	r3, [r5, #0]
 800483c:	f7fc fa79 	bl	8000d32 <_close>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d102      	bne.n	800484a <_close_r+0x1a>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	b103      	cbz	r3, 800484a <_close_r+0x1a>
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	200001c4 	.word	0x200001c4

08004850 <_fstat_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4d07      	ldr	r5, [pc, #28]	; (8004870 <_fstat_r+0x20>)
 8004854:	2300      	movs	r3, #0
 8004856:	4604      	mov	r4, r0
 8004858:	4608      	mov	r0, r1
 800485a:	4611      	mov	r1, r2
 800485c:	602b      	str	r3, [r5, #0]
 800485e:	f7fc fa74 	bl	8000d4a <_fstat>
 8004862:	1c43      	adds	r3, r0, #1
 8004864:	d102      	bne.n	800486c <_fstat_r+0x1c>
 8004866:	682b      	ldr	r3, [r5, #0]
 8004868:	b103      	cbz	r3, 800486c <_fstat_r+0x1c>
 800486a:	6023      	str	r3, [r4, #0]
 800486c:	bd38      	pop	{r3, r4, r5, pc}
 800486e:	bf00      	nop
 8004870:	200001c4 	.word	0x200001c4

08004874 <_isatty_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	4d06      	ldr	r5, [pc, #24]	; (8004890 <_isatty_r+0x1c>)
 8004878:	2300      	movs	r3, #0
 800487a:	4604      	mov	r4, r0
 800487c:	4608      	mov	r0, r1
 800487e:	602b      	str	r3, [r5, #0]
 8004880:	f7fc fa73 	bl	8000d6a <_isatty>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	d102      	bne.n	800488e <_isatty_r+0x1a>
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	b103      	cbz	r3, 800488e <_isatty_r+0x1a>
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	bd38      	pop	{r3, r4, r5, pc}
 8004890:	200001c4 	.word	0x200001c4

08004894 <_lseek_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4d07      	ldr	r5, [pc, #28]	; (80048b4 <_lseek_r+0x20>)
 8004898:	4604      	mov	r4, r0
 800489a:	4608      	mov	r0, r1
 800489c:	4611      	mov	r1, r2
 800489e:	2200      	movs	r2, #0
 80048a0:	602a      	str	r2, [r5, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	f7fc fa6c 	bl	8000d80 <_lseek>
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	d102      	bne.n	80048b2 <_lseek_r+0x1e>
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	b103      	cbz	r3, 80048b2 <_lseek_r+0x1e>
 80048b0:	6023      	str	r3, [r4, #0]
 80048b2:	bd38      	pop	{r3, r4, r5, pc}
 80048b4:	200001c4 	.word	0x200001c4

080048b8 <__malloc_lock>:
 80048b8:	4801      	ldr	r0, [pc, #4]	; (80048c0 <__malloc_lock+0x8>)
 80048ba:	f7ff be03 	b.w	80044c4 <__retarget_lock_acquire_recursive>
 80048be:	bf00      	nop
 80048c0:	200001b8 	.word	0x200001b8

080048c4 <__malloc_unlock>:
 80048c4:	4801      	ldr	r0, [pc, #4]	; (80048cc <__malloc_unlock+0x8>)
 80048c6:	f7ff bdfe 	b.w	80044c6 <__retarget_lock_release_recursive>
 80048ca:	bf00      	nop
 80048cc:	200001b8 	.word	0x200001b8

080048d0 <_read_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	4d07      	ldr	r5, [pc, #28]	; (80048f0 <_read_r+0x20>)
 80048d4:	4604      	mov	r4, r0
 80048d6:	4608      	mov	r0, r1
 80048d8:	4611      	mov	r1, r2
 80048da:	2200      	movs	r2, #0
 80048dc:	602a      	str	r2, [r5, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	f7fc fa0a 	bl	8000cf8 <_read>
 80048e4:	1c43      	adds	r3, r0, #1
 80048e6:	d102      	bne.n	80048ee <_read_r+0x1e>
 80048e8:	682b      	ldr	r3, [r5, #0]
 80048ea:	b103      	cbz	r3, 80048ee <_read_r+0x1e>
 80048ec:	6023      	str	r3, [r4, #0]
 80048ee:	bd38      	pop	{r3, r4, r5, pc}
 80048f0:	200001c4 	.word	0x200001c4

080048f4 <_init>:
 80048f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f6:	bf00      	nop
 80048f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fa:	bc08      	pop	{r3}
 80048fc:	469e      	mov	lr, r3
 80048fe:	4770      	bx	lr

08004900 <_fini>:
 8004900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004902:	bf00      	nop
 8004904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004906:	bc08      	pop	{r3}
 8004908:	469e      	mov	lr, r3
 800490a:	4770      	bx	lr
